# 1 "build/gencondmd.c"
# 1 "/home/giulianob/gcc_git_gnu/build_temp/gcc//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "build/gencondmd.c"




# 1 "./bconfig.h" 1


# 1 "./auto-host.h" 1
# 4 "./bconfig.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
extern "C" {
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
}
# 6 "./bconfig.h" 2
# 6 "build/gencondmd.c" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 44 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 865 "/usr/include/stdio.h" 2 3 4
# 873 "/usr/include/stdio.h" 3 4
}
# 47 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 187 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 202 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/string" 1 3
# 36 "/usr/include/c++/10/string" 3
       
# 37 "/usr/include/c++/10/string" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 1 3
# 262 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3

# 262 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 284 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 522 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h" 1 3
# 523 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/cpu_defines.h" 1 3
# 526 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3
# 39 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/10/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/10/bits/stringfwd.h" 3


# 1 "/usr/include/c++/10/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/10/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/10/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/10/bits/memoryfwd.h" 3
  template<typename>
    class allocator;


  template<>
    class allocator<void>;




  template<typename, typename>
    struct uses_allocator;





}
# 41 "/usr/include/c++/10/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;







  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

}


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;
# 93 "/usr/include/c++/10/bits/stringfwd.h" 3
  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 40 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/char_traits.h" 1 3
# 37 "/usr/include/c++/10/bits/char_traits.h" 3
       
# 38 "/usr/include/c++/10/bits/char_traits.h" 3

# 1 "/usr/include/c++/10/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/10/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/10/bits/functexcept.h" 1 3
# 40 "/usr/include/c++/10/bits/functexcept.h" 3
# 1 "/usr/include/c++/10/bits/exception_defines.h" 1 3
# 41 "/usr/include/c++/10/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_ios_failure(const char*, int) __attribute__((__noreturn__));


  void
  __throw_system_error(int) __attribute__((__noreturn__));


  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 184 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 270 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 287 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 423 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<typename> struct iterator_traits;


  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable
    {
      enum { __value = __is_trivially_copyable(_Tp) };
    };




  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable<volatile _Tp>
    {
      enum { __value = 0 };
    };


  template<typename _OutputIter, typename _InputIter>
    struct __memcpyable
    {
      enum { __value = 0 };
    };

  template<typename _Tp>
    struct __memcpyable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcpyable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };






  template<typename _Iter1, typename _Iter2>
    struct __memcmpable
    {
      enum { __value = 0 };
    };


  template<typename _Tp>
    struct __memcmpable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<const _Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
   
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/10/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? -(((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0) - 1 : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/10/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_pair.h" 1 3
# 59 "/usr/include/c++/10/bits/stl_pair.h" 3
# 1 "/usr/include/c++/10/bits/move.h" 1 3
# 38 "/usr/include/c++/10/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}

# 1 "/usr/include/c++/10/type_traits" 1 3
# 32 "/usr/include/c++/10/type_traits" 3
       
# 33 "/usr/include/c++/10/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "/usr/include/c++/10/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template <typename _Type>
    struct __type_identity
    { using type = _Type; };

  template<typename _Tp>
    using __type_identity_t = typename __type_identity<_Tp>::type;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 188 "/usr/include/c++/10/type_traits" 3
  template<typename>
    struct is_reference;
  template<typename>
    struct is_function;
  template<typename>
    struct is_void;
  template<typename>
    struct __is_array_unknown_bounds;




  template <typename _Tp, size_t = sizeof(_Tp)>
    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)
    { return {}; }

  template <typename _TypeIdentity,
      typename _NestedType = typename _TypeIdentity::type>
    constexpr typename __or_<
      is_reference<_NestedType>,
      is_function<_NestedType>,
      is_void<_NestedType>,
      __is_array_unknown_bounds<_NestedType>
    >::type __is_complete_or_unbounded(_TypeIdentity)
    { return {}; }






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };

  template<typename>
    struct remove_cv;


  template<typename _Tp>
    using __remove_cv_t = typename remove_cv<_Tp>::type;

  template<typename>
    struct is_const;



  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };
# 284 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 364 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public __not_<is_function<_Tp>>::type { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public is_function<_Tp>::type { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename _Tp>
    struct is_function
    : public __bool_constant<!is_const<const _Tp>::value> { };

  template<typename _Tp>
    struct is_function<_Tp&>
    : public false_type { };

  template<typename _Tp>
    struct is_function<_Tp&&>
    : public false_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { } __attribute__ ((__deprecated__ ("use '" "std::is_null_pointer" "' instead")));




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __not_<is_fundamental<_Tp>>::type { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename _Tp, typename... _Types>
    using __is_one_of = __or_<is_same<_Tp, _Types>...>;


  template<typename _Tp>
    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,
   signed char, signed short, signed int, signed long,
   signed long long

   , signed __int128
# 604 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,
   unsigned char, unsigned short, unsigned int, unsigned long,
   unsigned long long

   , unsigned __int128
# 623 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_standard_integer
      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;


  template<typename...> using __void_t = void;



  template<typename _Tp, typename = void>
    struct __is_referenceable
    : public false_type
    { };

  template<typename _Tp>
    struct __is_referenceable<_Tp, __void_t<_Tp&>>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct
   
    is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 770 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __is_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public false_type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl<true, _Tp, _Args...>
    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<true, _Tp, _Arg>
    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<true, _Tp>
    : public __bool_constant<noexcept(_Tp())>
    { };

  template<typename _Tp, size_t _Num>
    struct __is_nt_constructible_impl<true, _Tp[_Num]>
    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>
    { };
# 1001 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),
       _Tp, _Args...>;


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
    : public __bool_constant<__is_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_assignable_impl
    : public __and_<__bool_constant<__is_assignable(_Tp, _Up)>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __is_nothrow_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<__is_constructible_impl<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<__is_copy_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<__is_move_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<__is_destructible_safe<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename _Tp, typename _Up>
    struct is_same

    : public integral_constant<bool, __is_same_as(_Tp, _Up)>



    { };
# 1410 "/usr/include/c++/10/type_traits" 3
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    {
      typedef typename is_void<_To>::type type;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };


  template<typename _ToElementType, typename _FromElementType>
    using __is_array_convertible
      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_nt_convertible_helper
    : is_void<_To>
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_nt_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1>
 static
 __bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      using type = decltype(__test<_From, _To>(0));
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct __is_nothrow_convertible
    : public __is_nt_convertible_helper<_From, _To>::type
    { };
# 1508 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<volatile _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const volatile _Tp>
    { using type = _Tp; };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1730 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };






  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1806 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1884 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };






  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 1932 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2067 "/usr/include/c++/10/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2106 "/usr/include/c++/10/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef __remove_cv_t<_Up> __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };


  template<typename _Tp>
    using __decay_t = typename decay<_Tp>::type;

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };


  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;

  template<typename... _Cond>
    using _Require = __enable_if_t<__and_<_Cond...>::value>;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      using __cond_t
 = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());



    template<typename _Tp, typename _Up>
      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>
      _S_test(int);
# 2239 "/usr/include/c++/10/type_traits" 3
    template<typename, typename>
      static __failure_type
      _S_test_2(...);

    template<typename _Tp, typename _Up>
      static decltype(_S_test_2<_Tp, _Up>(0))
      _S_test(...);
  };


  template<>
    struct common_type<>
    { };


  template<typename _Tp0>
    struct common_type<_Tp0>
    : public common_type<_Tp0, _Tp0>
    { };


  template<typename _Tp1, typename _Tp2,
    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>
    struct __common_type_impl
    {


      using type = common_type<_Dp1, _Dp2>;
    };

  template<typename _Tp1, typename _Tp2>
    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>
    : private __do_common_type_impl
    {


      using type = decltype(_S_test<_Tp1, _Tp2>(0));
    };


  template<typename _Tp1, typename _Tp2>
    struct common_type<_Tp1, _Tp2>
    : public __common_type_impl<_Tp1, _Tp2>::type
    { };

  template<typename...>
    struct __common_type_pack
    { };

  template<typename, typename, typename = void>
    struct __common_type_fold;


  template<typename _Tp1, typename _Tp2, typename... _Rp>
    struct common_type<_Tp1, _Tp2, _Rp...>
    : public __common_type_fold<common_type<_Tp1, _Tp2>,
    __common_type_pack<_Rp...>>
    { };




  template<typename _CTp, typename... _Rp>
    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,
         __void_t<typename _CTp::type>>
    : public common_type<typename _CTp::type, _Rp...>
    { };


  template<typename _CTp, typename _Rp>
    struct __common_type_fold<_CTp, _Rp, void>
    { };

  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };


  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef __remove_cvref_t<_Arg> _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_reference<_Arg>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;





  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2624 "/usr/include/c++/10/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };

  template<typename _Tp>
   
    inline
    _Require<__not_<__is_tuple_like<_Tp>>,
      is_move_constructible<_Tp>,
      is_move_assignable<_Tp>>
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
   
    inline
    __enable_if_t<__is_swappable<_Tp>::value>
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;







  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl : false_type { };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:


      static typename _Result::type _S_get();

      template<typename _Tp>
 static void _S_conv(_Tp);


      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>
 static true_type
 _S_test(int);

      template<typename _Tp>
 static false_type
 _S_test(...);

    public:
      using type = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  struct __nonesuchbase {};
  struct __nonesuch : private __nonesuchbase {
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
#pragma GCC diagnostic pop
# 3455 "/usr/include/c++/10/type_traits" 3

}
# 58 "/usr/include/c++/10/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 138 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 179 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
   
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type



    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)

    {




      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
   
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type



    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/include/c++/10/bits/stl_pair.h" 2 3
# 69 "/usr/include/c++/10/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 80 "/usr/include/c++/10/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();




  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };
# 210 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 256 "/usr/include/c++/10/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;



      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 288 "/usr/include/c++/10/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }



      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>

        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
      is_assignable<_T2&, const _U2&>>::value,
      pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
      is_assignable<_T2&, _U2&&>>::value,
      pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }


      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>

        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };
# 464 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }
# 487 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 524 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 564 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 583 "/usr/include/c++/10/bits/stl_pair.h" 3

}
# 65 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
# 74 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 93 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 125 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 149 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits;




  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };



  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 209 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };






  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }




  template<typename _Iter>
    using __iterator_category_t
      = typename iterator_traits<_Iter>::iterator_category;

  template<typename _InIter>
    using _RequireInputIter =
      __enable_if_t<is_convertible<__iterator_category_t<_InIter>,
       input_iterator_tag>::value>;

  template<typename _It,
    typename _Cat = __iterator_category_t<_It>>
    struct __is_random_access_iter
      : is_base_of<random_access_iterator_tag, _Cat>
    {
      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;
      enum { __value = _Base::value };
    };








}
# 66 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3

# 1 "/usr/include/c++/10/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/10/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/10/bits/concept_check.h" 3
# 65 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 2 3
# 1 "/usr/include/c++/10/debug/assertions.h" 1 3
# 66 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {

     
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator.h" 1 3
# 66 "/usr/include/c++/10/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/10/bits/ptr_traits.h" 1 3
# 42 "/usr/include/c++/10/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 210 "/usr/include/c++/10/bits/ptr_traits.h" 3

}
# 67 "/usr/include/c++/10/bits/stl_iterator.h" 2 3
# 85 "/usr/include/c++/10/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 124 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;
# 160 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




     
      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }


      reverse_iterator& operator=(const reverse_iterator&) = default;






      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 206 "/usr/include/c++/10/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const




      {


 _Iterator __tmp = current;
 --__tmp;
 return _S_to_pointer(__tmp);
      }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }

    private:
      template<typename _Tp>
 static _Tp*
 _S_to_pointer(_Tp* __p)
        { return __p; }

      template<typename _Tp>
 static pointer
 _S_to_pointer(_Tp __t)
        { return __t.operator->(); }
    };
# 358 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 498 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }
# 539 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
   
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
   
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 570 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;







      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 610 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

     
      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



     
      back_insert_iterator&
      operator*()
      { return *this; }


     
      back_insert_iterator&
      operator++()
      { return *this; }


     
      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 657 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
   
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 673 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;







      explicit
      front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 713 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

     
      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



     
      front_insert_iterator&
      operator*()
      { return *this; }


     
      front_insert_iterator&
      operator++()
      { return *this; }


     
      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 760 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
   
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 780 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {







      typedef typename _Container::iterator _Iter;

    protected:
      _Container* container;
      _Iter iter;


    public:

      typedef _Container container_type;
# 812 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      insert_iterator(_Container& __x, _Iter __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 848 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

     
      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



     
      insert_iterator&
      operator*()
      { return *this; }


     
      insert_iterator&
      operator++()
      { return *this; }


     
      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 904 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }





}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 929 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef std::iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;





      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
       
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


     
      reference
      operator*() const noexcept
      { return *_M_current; }

     
      pointer
      operator->() const noexcept
      { return _M_current; }

     
      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

     
      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


     
      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

     
      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


     
      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

     
      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

     
      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

     
      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

     
      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

     
      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 1061 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
   
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
   
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }






  template<typename _IteratorL, typename _IteratorR, typename _Container>


   
    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
   
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
# 1260 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
      _Iterator _M_current;

      using __traits_type = iterator_traits<_Iterator>;



      using __base_ref = typename __traits_type::reference;


    public:
      using iterator_type = _Iterator;
# 1284 "/usr/include/c++/10/bits/stl_iterator.h" 3
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;


     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(std::move(__i)) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }


      iterator_type
      base() const
      { return _M_current; }
# 1326 "/usr/include/c++/10/bits/stl_iterator.h" 3
      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }







      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
# 1423 "/usr/include/c++/10/bits/stl_iterator.h" 3
    };

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return __x.base() == __y.base(); }
# 1442 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__x < __y); }
# 1493 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(std::move(__i)); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }
# 2154 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 2201 "/usr/include/c++/10/bits/stl_iterator.h" 3

}
# 68 "/usr/include/c++/10/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/10/debug/debug.h" 1 3
# 48 "/usr/include/c++/10/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;

  template<typename _Ite, typename _Seq, typename _Cat>
    struct _Safe_iterator;
}
# 70 "/usr/include/c++/10/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/10/bits/predefined_ops.h" 1 3
# 33 "/usr/include/c++/10/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




   
    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

 
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

 
  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




   
    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
     
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

 
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

 
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

 
  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

 
  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

 
  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

     
      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>

 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

     
      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>

 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

     
      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
   
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

     
      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
   
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

     
      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
   
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

     
      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
   
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/10/bits/stl_algobase.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  template<typename _Tp, typename _Up>
    constexpr
    inline int
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
    {

      static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
# 105 "/usr/include/c++/10/bits/stl_algobase.h" 3
 return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
    }
# 149 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 182 "/usr/include/c++/10/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 198 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 227 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 275 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 297 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
   
    inline _Iterator
    __niter_base(_Iterator __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }




  template<typename _From, typename _To>
   
    inline _From
    __niter_wrap(_From __from, _To __res)
    { return __from + (__res - std::__niter_base(__from)); }


  template<typename _Iterator>
   
    inline _Iterator
    __niter_wrap(const _Iterator&, _Iterator __res)
    { return __res; }







  template<bool _IsMove, bool _IsSimple, typename _Category>
    struct __copy_move
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>

 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::iterator_category _Category;





      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator;



  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II, _II, std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
    _OI
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_a(_II, _II,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 557 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 590 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<true>(std::__miter_base(__first),
          std::__miter_base(__last), __result);
    }






  template<bool _IsMove, bool _IsSimple, typename _Category>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type
     __n = __last - __first;
   for (; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type
     __n = __last - __first;
   for (; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>

 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::iterator_category _Category;





      return std::__copy_move_backward<_IsMove,
           __memcpyable<_BI2, _BI1>::__value,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_backward_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II, _II,
       std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_backward_a1<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
    _OI
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_backward_a(_II, _II,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 794 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
   
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 830 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
   
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
            std::__miter_base(__last),
            __result);
    }






  template<typename _ForwardIterator, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
# 892 "/usr/include/c++/10/bits/stl_algobase.h" 3
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }

  template<typename _Ite, typename _Cont, typename _Tp>
   
    inline void
    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
       ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
       const _Tp& __value)
    { std::__fill_a1(__first.base(), __last.base(), __value); }

  template<typename _Tp, typename _VTp>
    void
    __fill_a1(const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const _VTp&);

  template<typename _FIte, typename _Tp>
   
    inline void
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    { std::__fill_a1(__first, __last, __value); }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
    void
    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const _Tp&);
# 934 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(__first, __last, __value);
    }


  inline constexpr int
  __size_to_integer(int __n) { return __n; }
  inline constexpr unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline constexpr long
  __size_to_integer(long __n) { return __n; }
  inline constexpr unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long long __n) { return __n; }
  inline constexpr unsigned long long
  __size_to_integer(unsigned long long __n) { return __n; }


  inline constexpr __int128
  __size_to_integer(__int128 __n) { return __n; }
  inline constexpr unsigned __int128
  __size_to_integer(unsigned __int128 __n) { return __n; }
# 986 "/usr/include/c++/10/bits/stl_algobase.h" 3
  inline constexpr long long
  __size_to_integer(float __n) { return __n; }
  inline constexpr long long
  __size_to_integer(double __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long double __n) { return __n; }

  inline constexpr long long
  __size_to_integer(__float128 __n) { return __n; }


  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
    typename _Tp>
    ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
        _Size __n, const _Tp& __value,
        std::input_iterator_tag);

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::output_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::input_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::random_access_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      if (__n <= 0)
 return __first;

      ;

      std::__fill_a(__first, __first + __n, __value);
      return __first + __n;
    }
# 1086 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
   
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
          std::__iterator_category(__first));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>

 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>

 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !std::__memcmp(__first1, __first2, __len);
   return true;
 }
    };

  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   _II);

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __equal_aux1(std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _II, typename _Tp, typename _Ref, typename _Ptr>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(_II, _II,
  std::_Deque_iterator<_Tp, _Ref, _Ptr>);

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __memcmpable<_II1, _II2>::__value);
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      return std::__equal_aux1(std::__niter_base(__first1),
          std::__niter_base(__last1),
          std::__niter_base(__first2));
    }

  template<typename _II1, typename _Seq1, typename _Cat1, typename _II2>
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  _II2);

  template<typename _II1, typename _II2, typename _Seq2, typename _Cat2>
    bool
    __equal_aux(_II1, _II1,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename _II1, typename _Seq1, typename _Cat1,
    typename _II2, typename _Seq2, typename _Cat2>
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>

 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>

 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>

 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
   
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>

 static bool
 __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
 {
   using __gnu_cxx::__ops::__iter_less_iter;
   return std::__lexicographical_compare_impl(__first1, __last1,
           __first2, __last2,
           __iter_less_iter());
 }
    };

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>

 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = std::__memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
   
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value







  );

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 1347 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }


# 1403 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(__first1, __last1, __first2);
    }
# 1434 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1524 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1557 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1589 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1626 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
   
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 1740 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1768 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1802 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1851 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1887 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }





  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
   
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;

 case 2:
   if (__pred(__first))
     return __first;
   ++__first;

 case 1:
   if (__pred(__first))
     return __first;
   ++__first;

 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
   
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Predicate>
   
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 2044 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }



}
# 40 "/usr/include/c++/10/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/10/bits/postypes.h" 1 3
# 38 "/usr/include/c++/10/bits/postypes.h" 3
       
# 39 "/usr/include/c++/10/bits/postypes.h" 3

# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 31 "/usr/include/wchar.h" 2 3 4




# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4





typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 50 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();







extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
__attribute__ ((__leaf__)) btowc (int __c) throw ()
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) wctob (wint_t __wc) throw ()
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
__attribute__ ((__leaf__)) mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ()

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }




extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) throw () __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 671 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;






extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 726 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 781 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 807 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 817 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 856 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/include/c++/10/cwchar" 2 3
# 62 "/usr/include/c++/10/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/10/cwchar" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 234 "/usr/include/c++/10/cwchar" 3

}
}







namespace __gnu_cxx
{





  using ::wcstold;
# 260 "/usr/include/c++/10/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 280 "/usr/include/c++/10/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/10/bits/postypes.h" 2 3
# 68 "/usr/include/c++/10/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/10/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/10/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/10/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/10/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      fpos(const fpos&) = default;
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;



      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 245 "/usr/include/c++/10/bits/postypes.h" 3
  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/10/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3
# 42 "/usr/include/c++/10/bits/char_traits.h" 2 3
# 50 "/usr/include/c++/10/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/10/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 89 "/usr/include/c++/10/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;




      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
# 205 "/usr/include/c++/10/bits/char_traits.h" 3
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 302 "/usr/include/c++/10/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;






 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;






 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;






 return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;






 return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };
# 680 "/usr/include/c++/10/bits/char_traits.h" 3

}



# 1 "/usr/include/c++/10/cstdint" 1 3
# 32 "/usr/include/c++/10/cstdint" 3
       
# 33 "/usr/include/c++/10/cstdint" 3
# 41 "/usr/include/c++/10/cstdint" 3
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 2 3 4
# 42 "/usr/include/c++/10/cstdint" 2 3


namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;





}
# 686 "/usr/include/c++/10/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;

      typedef uint_least16_t int_type;





      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;

      typedef uint_least32_t int_type;





      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;




      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };
# 938 "/usr/include/c++/10/bits/char_traits.h" 3

}
# 41 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/allocator.h" 1 3
# 46 "/usr/include/c++/10/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 3
# 1 "/usr/include/c++/10/ext/new_allocator.h" 1 3
# 33 "/usr/include/c++/10/ext/new_allocator.h" 3
# 1 "/usr/include/c++/10/new" 1 3
# 38 "/usr/include/c++/10/new" 3
       
# 39 "/usr/include/c++/10/new" 3


# 1 "/usr/include/c++/10/exception" 1 3
# 33 "/usr/include/c++/10/exception" 3
       
# 34 "/usr/include/c++/10/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception.h" 1 3
# 34 "/usr/include/c++/10/bits/exception.h" 3
       
# 35 "/usr/include/c++/10/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/10/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/10/exception" 2 3

extern "C++" {

namespace std
{






  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 105 "/usr/include/c++/10/exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 137 "/usr/include/c++/10/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/10/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/10/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/typeinfo" 1 3
# 32 "/usr/include/c++/10/typeinfo" 3
       
# 33 "/usr/include/c++/10/typeinfo" 3



# 1 "/usr/include/c++/10/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/10/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/10/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/10/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/10/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/10/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/usr/include/c++/10/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }



    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/new" 1 3
# 41 "/usr/include/c++/10/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;






  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 118 "/usr/include/c++/10/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 145 "/usr/include/c++/10/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };



    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }




    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }


  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 213 "/usr/include/c++/10/bits/exception_ptr.h" 3
      return exception_ptr();

    }


}

}

#pragma GCC visibility pop
# 148 "/usr/include/c++/10/exception" 2 3
# 1 "/usr/include/c++/10/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/10/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 42 "/usr/include/c++/10/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };



  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }





  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }




  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }




  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 149 "/usr/include/c++/10/exception" 2 3
# 42 "/usr/include/c++/10/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 126 "/usr/include/c++/10/new" 3
 void* operator new(std::size_t)
  __attribute__((__externally_visible__));
 void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

 void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
 void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 174 "/usr/include/c++/10/new" 3
 inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
 inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 230 "/usr/include/c++/10/new" 3
#pragma GCC visibility pop
# 34 "/usr/include/c++/10/ext/new_allocator.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/10/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef _Tp value_type;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };





      typedef std::true_type propagate_on_container_move_assignment;


     
      new_allocator() noexcept { }

     
      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>

 new_allocator(const new_allocator<_Tp1>&) noexcept { }


      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }




      _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->_M_max_size())
   std::__throw_bad_alloc();
# 115 "/usr/include/c++/10/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(_Tp* __p, size_type __t)
      {
# 133 "/usr/include/c++/10/ext/new_allocator.h" 3
 ::operator delete(__p

     , __t * sizeof(_Tp)

    );
      }


      size_type
      max_size() const noexcept
      { return _M_max_size(); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }
# 169 "/usr/include/c++/10/ext/new_allocator.h" 3
      template<typename _Up>
 friend bool
 operator==(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return true; }


      template<typename _Up>
 friend bool
 operator!=(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return false; }


    private:
      constexpr size_type
      _M_max_size() const noexcept
      {

 return std::size_t(0x7fffffffffffffffL) / sizeof(_Tp);



      }
    };


}
# 34 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/include/c++/10/bits/allocator.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef void value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef void* pointer;
      typedef const void* const_pointer;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };
# 89 "/usr/include/c++/10/bits/allocator.h" 3
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }

    };
# 115 "/usr/include/c++/10/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
    public:
      typedef _Tp value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };





      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;




     
      allocator() noexcept { }

     
      allocator(const allocator& __a) noexcept
      : __allocator_base<_Tp>(__a) { }



      allocator& operator=(const allocator&) = default;


      template<typename _Tp1>

 allocator(const allocator<_Tp1>&) noexcept { }




      ~allocator() noexcept { }
# 191 "/usr/include/c++/10/bits/allocator.h" 3
      friend bool
      operator==(const allocator&, const allocator&) noexcept
      { return true; }


      friend bool
      operator!=(const allocator&, const allocator&) noexcept
      { return false; }



    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }


  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }




  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {
# 314 "/usr/include/c++/10/bits/allocator.h" 3
 return false;

      }
    };



}
# 42 "/usr/include/c++/10/string" 2 3

# 1 "/usr/include/c++/10/bits/localefwd.h" 1 3
# 37 "/usr/include/c++/10/bits/localefwd.h" 3
       
# 38 "/usr/include/c++/10/bits/localefwd.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 3
       
# 40 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 3

# 1 "/usr/include/c++/10/clocale" 1 3
# 39 "/usr/include/c++/10/clocale" 3
       
# 40 "/usr/include/c++/10/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 43 "/usr/include/c++/10/clocale" 2 3
# 51 "/usr/include/c++/10/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/include/c++/10/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/10/iosfwd" 1 3
# 36 "/usr/include/c++/10/iosfwd" 3
       
# 37 "/usr/include/c++/10/iosfwd" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 42 "/usr/include/c++/10/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/10/cctype" 1 3
# 39 "/usr/include/c++/10/cctype" 3
       
# 40 "/usr/include/c++/10/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 43 "/usr/include/c++/10/cctype" 2 3
# 62 "/usr/include/c++/10/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/usr/include/c++/10/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/10/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;


  template<> class codecvt<char16_t, char, mbstate_t>;
  template<> class codecvt<char32_t, char, mbstate_t>;





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 44 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/10/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/10/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/10/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/10/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/10/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/10/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   if (true)
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   if (false)
     {
       __out._M_setstate(__ios_base::badbit);
       ;
     }
   if (false)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/include/c++/10/string" 2 3



# 1 "/usr/include/c++/10/bits/stl_function.h" 1 3
# 63 "/usr/include/c++/10/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 104 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/usr/include/c++/10/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x > __y;

 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x < __y;

 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x >= __y;

 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x <= __y;

 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 774 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 1002 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1079 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1202 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/10/backward/binders.h" 1 3
# 60 "/usr/include/c++/10/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/10/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1393 "/usr/include/c++/10/bits/stl_function.h" 2 3
# 49 "/usr/include/c++/10/string" 2 3





# 1 "/usr/include/c++/10/bits/range_access.h" 1 3
# 33 "/usr/include/c++/10/bits/range_access.h" 3
       
# 34 "/usr/include/c++/10/bits/range_access.h" 3


# 1 "/usr/include/c++/10/initializer_list" 1 3
# 33 "/usr/include/c++/10/initializer_list" 3
       
# 34 "/usr/include/c++/10/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };







  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }







  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 37 "/usr/include/c++/10/bits/range_access.h" 2 3
# 1 "/usr/include/c++/10/bits/iterator_concepts.h" 1 3
# 33 "/usr/include/c++/10/bits/iterator_concepts.h" 3
       
# 34 "/usr/include/c++/10/bits/iterator_concepts.h" 3

# 1 "/usr/include/c++/10/concepts" 1 3
# 36 "/usr/include/c++/10/bits/iterator_concepts.h" 2 3

# 1 "/usr/include/c++/10/bits/range_cmp.h" 1 3
# 38 "/usr/include/c++/10/bits/iterator_concepts.h" 2 3
# 38 "/usr/include/c++/10/bits/range_access.h" 2 3
# 1 "/usr/include/c++/10/bits/int_limits.h" 1 3
# 33 "/usr/include/c++/10/bits/int_limits.h" 3
       
# 34 "/usr/include/c++/10/bits/int_limits.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __detail
{






  template<typename _Tp, bool = is_signed<_Tp>::value>
    struct __int_limits
    {
      static_assert(is_integral<_Tp>::value, "unsupported specialization");
      using _Up = typename make_unsigned<_Tp>::type;
      static constexpr int digits = sizeof(_Tp) * 8 - 1;
      static constexpr _Tp min() noexcept { return _Tp(_Up(1) << digits); }
      static constexpr _Tp max() noexcept { return _Tp(_Up(~_Up(0)) >> 1); }
    };


  template<typename _Tp>
    struct __int_limits<_Tp, false>
    {
      static_assert(is_integral<_Tp>::value, "unsupported specialization");
      static constexpr int digits = sizeof(_Tp) * 8;
      static constexpr _Tp min() noexcept { return 0; }
      static constexpr _Tp max() noexcept { return _Tp(-1); }
    };

  template<> struct __int_limits<bool>;
}

}
# 39 "/usr/include/c++/10/bits/range_access.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 1143 "/usr/include/c++/10/bits/range_access.h" 3

}
# 55 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/basic_string.h" 1 3
# 37 "/usr/include/c++/10/bits/basic_string.h" 3
       
# 38 "/usr/include/c++/10/bits/basic_string.h" 3

# 1 "/usr/include/c++/10/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/10/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/10/ext/atomicity.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 32 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 33 "/usr/include/sched.h" 2 3 4





typedef __pid_t pid_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int getcpu (unsigned int *, unsigned int *) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 23 "/usr/include/x86_64-linux-gnu/bits/timex.h" 2 3 4



struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 38 "/usr/include/time.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 47 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 48 "/usr/include/time.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 27 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 100 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 120 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 155 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 193 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 238 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 470 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 482 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 516 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 656 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 668 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 691 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     ;
# 704 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 789 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 871 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 997 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1010 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));





extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1056 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1123 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1157 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 36 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 2 3
# 47 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 102 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once"), __copy__ (pthread_once)));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific"), __copy__ (pthread_getspecific)));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific"), __copy__ (pthread_setspecific)));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create"), __copy__ (pthread_create)));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join"), __copy__ (pthread_join)));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal"), __copy__ (pthread_equal)));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self"), __copy__ (pthread_self)));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach"), __copy__ (pthread_detach)));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel"), __copy__ (pthread_cancel)));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield"), __copy__ (sched_yield)));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock"), __copy__ (pthread_mutex_lock)));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock"), __copy__ (pthread_mutex_trylock)));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock"), __copy__ (pthread_mutex_timedlock)));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock"), __copy__ (pthread_mutex_unlock)));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init"), __copy__ (pthread_mutex_init)));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy"), __copy__ (pthread_mutex_destroy)));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init"), __copy__ (pthread_cond_init)));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast"), __copy__ (pthread_cond_broadcast)));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal"), __copy__ (pthread_cond_signal)));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait"), __copy__ (pthread_cond_wait)));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait"), __copy__ (pthread_cond_timedwait)));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy"), __copy__ (pthread_cond_destroy)));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create"), __copy__ (pthread_key_create)));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete"), __copy__ (pthread_key_delete)));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init"), __copy__ (pthread_mutexattr_init)));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype"), __copy__ (pthread_mutexattr_settype)));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy"), __copy__ (pthread_mutexattr_destroy)));
# 237 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create"), __copy__ (pthread_key_create)));
# 247 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 659 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 808 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 850 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/10/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/10/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  inline void
  __attribute__((__always_inline__))
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/10/ext/atomicity.h" 3
  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  inline void
  __attribute__((__always_inline__))
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  inline _Atomic_word
  __attribute__ ((__always_inline__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);

    return __exchange_and_add_single(__mem, __val);
  }

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      {
 __atomic_add(__mem, __val);
 return;
      }

    __atomic_add_single(__mem, __val);
  }


}
# 40 "/usr/include/c++/10/bits/basic_string.h" 2 3
# 1 "/usr/include/c++/10/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/alloc_traits.h" 3

# 1 "/usr/include/c++/10/bits/alloc_traits.h" 1 3
# 33 "/usr/include/c++/10/bits/alloc_traits.h" 3
# 1 "/usr/include/c++/10/bits/stl_construct.h" 1 3
# 73 "/usr/include/c++/10/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 106 "/usr/include/c++/10/bits/stl_construct.h" 3
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
# 121 "/usr/include/c++/10/bits/stl_construct.h" 3
  template<typename _T1>
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }

  template<typename _ForwardIterator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last);




  template<typename _Tp>
    constexpr inline void
    _Destroy(_Tp* __pointer)
    {



      __pointer->~_Tp();

    }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
 static void
 __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");





      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  template<bool>
    struct _Destroy_n_aux
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __destroy_n(_ForwardIterator __first, _Size __count)
 {
   for (; __count > 0; (void)++__first, --__count)
     std::_Destroy(std::__addressof(*__first));
   return __first;
 }
    };

  template<>
    struct _Destroy_n_aux<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   std::advance(__first, __count);
   return __first;
 }
    };






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");





      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 __destroy_n(__first, __count);
    }
# 253 "/usr/include/c++/10/bits/stl_construct.h" 3

}
# 34 "/usr/include/c++/10/bits/alloc_traits.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static constexpr auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static constexpr pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static constexpr _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static constexpr
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 {

   ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);



 }

      template<typename _Alloc2, typename _Tp>
 static constexpr auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 noexcept(noexcept(__a.destroy(__p)))
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static constexpr void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 noexcept(std::is_nothrow_destructible<_Tp>::value)
 { std::_Destroy(__p); }

      template<typename _Alloc2>
 static constexpr auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static constexpr size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static constexpr auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static constexpr _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 312 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 327 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 339 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 354 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto
 construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(_S_construct(__a, __p,
           std::forward<_Args>(__args)...)))
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 370 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void
 destroy(_Alloc& __a, _Tp* __p)
 noexcept(noexcept(_S_destroy(__a, __p, 0)))
 { _S_destroy(__a, __p, 0); }
# 384 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static size_type
      max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 396 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };






  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;


      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 458 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 472 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      {

 return __a.allocate(__n, __hint);



      }
# 490 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 505 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
    _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 {

   __a.construct(__p, std::forward<_Args>(__args)...);



 }
# 525 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 {

   __a.destroy(__p);



 }






      static size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {

 return __a.max_size();



      }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;




      __do_alloc_on_copy(__one, __two, __pocca());

    }

  template<typename _Alloc>
    constexpr _Alloc
    __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }


  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;




      __do_alloc_on_move(__one, __two, __pocma());

    }


  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;







      __do_alloc_on_swap(__one, __two, __pocs());

    }

  template<typename _Alloc, typename _Tp,
    typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
    typename = void>
    struct __is_alloc_insertable_impl
    : false_type
    { };

  template<typename _Alloc, typename _Tp, typename _ValueT>
    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
      __void_t<decltype(allocator_traits<_Alloc>::construct(
     std::declval<_Alloc&>(), std::declval<_ValueT*>(),
     std::declval<_Tp>()))>>
    : true_type
    { };




  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_alloc_insertable_impl<_Alloc,
     typename _Alloc::value_type const&>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };




  template<typename _Alloc>
    struct __is_move_insertable
    : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
    { };


  template<typename _Tp>
    struct __is_move_insertable<allocator<_Tp>>
    : is_move_constructible<_Tp>
    { };


  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;

  template<typename _Alloc>
    using _RequireNotAllocator
      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
# 719 "/usr/include/c++/10/bits/alloc_traits.h" 3
  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)



 allocator_traits<_Allocator>::destroy(__alloc,
           std::__addressof(*__first));

    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 35 "/usr/include/c++/10/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
           std::forward<_Args>(__args)...)))
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static constexpr void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 166 "/usr/include/c++/10/ext/alloc_traits.h" 3
  };


}
# 41 "/usr/include/c++/10/bits/basic_string.h" 2 3
# 52 "/usr/include/c++/10/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
# 76 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    protected:




      typedef const_iterator __const_iterator;


    private:
# 150 "/usr/include/c++/10/bits/basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 309 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 461 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 492 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 510 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }
# 525 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
# 540 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 552 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 620 "/usr/include/c++/10/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 657 "/usr/include/c++/10/bits/basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {
 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 685 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 702 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {

     if (__str.size())
       this->_S_copy(_M_data(), __str._M_data(), __str.size());
     _M_set_length(__str.size());
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign()
     || _Alloc_traits::_S_always_equal()
     || _M_get_allocator() == __str._M_get_allocator())
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
   assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 796 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 925 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 938 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {
# 956 "/usr/include/c++/10/bits/basic_string.h" 3
      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 987 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1016 "/usr/include/c++/10/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 ;
 return _M_data()[__pos];
      }
# 1033 "/usr/include/c++/10/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


 ;

 ;
 return _M_data()[__pos];
      }
# 1054 "/usr/include/c++/10/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1075 "/usr/include/c++/10/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
 ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
 ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
 ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return operator[](this->size() - 1);
      }
# 1138 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1191 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1208 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1250 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1274 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1319 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 this->_M_assign(__str);
 return *this;
      }
# 1379 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1402 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1418 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1434 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1451 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1464 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1533 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1575 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1611 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      insert(const_iterator __p, initializer_list<_CharT> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1638 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1661 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1684 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1703 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1727 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1745 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1805 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1824 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1843 "/usr/include/c++/10/bits/basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
 ;
 _M_erase(size() - 1, 1);
      }
# 1887 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1909 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1934 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1959 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1983 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 2001 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2021 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2043 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2064 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2089 "/usr/include/c++/10/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2121 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2180 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2240 "/usr/include/c++/10/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2278 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2288 "/usr/include/c++/10/bits/basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2298 "/usr/include/c++/10/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2310 "/usr/include/c++/10/bits/basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2329 "/usr/include/c++/10/bits/basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2345 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2359 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2391 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2408 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2421 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2455 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2469 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2486 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2500 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2535 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2549 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2569 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2584 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2619 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2633 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2653 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2667 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2702 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2716 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2734 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2749 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2784 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2798 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2816 "/usr/include/c++/10/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2832 "/usr/include/c++/10/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2851 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2944 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2970 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2988 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 3012 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3039 "/usr/include/c++/10/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
# 3070 "/usr/include/c++/10/bits/basic_string.h" 3
      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 6020 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {

      using _Alloc_traits = allocator_traits<_Alloc>;
      bool __use_rhs = false;
      if (typename _Alloc_traits::is_always_equal{})
 __use_rhs = true;
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 __use_rhs = true;
      if (__use_rhs)

 {
   const auto __size = __lhs.size() + __rhs.size();
   if (__size > __lhs.capacity() && __size <= __rhs.capacity())
     return std::move(__rhs.insert(0, __lhs));
 }
      return std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6151 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6214 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }
# 6227 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6265 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6303 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6341 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6379 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6418 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6438 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6456 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6479 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6496 "/usr/include/c++/10/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "/usr/include/c++/10/ext/string_conversions.h" 1 3
# 32 "/usr/include/c++/10/ext/string_conversions.h" 3
       
# 33 "/usr/include/c++/10/ext/string_conversions.h" 3
# 41 "/usr/include/c++/10/ext/string_conversions.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 75 "/usr/include/c++/10/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 103 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 826 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/10/cstdlib" 2 3

# 1 "/usr/include/c++/10/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/10/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/10/bits/std_abs.h" 3
# 46 "/usr/include/c++/10/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/10/cstdlib" 2 3
# 121 "/usr/include/c++/10/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/10/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/10/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 42 "/usr/include/c++/10/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3
# 43 "/usr/include/c++/10/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/10/cstdio" 1 3
# 39 "/usr/include/c++/10/cstdio" 3
       
# 40 "/usr/include/c++/10/cstdio" 3
# 96 "/usr/include/c++/10/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/10/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/10/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/include/c++/10/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/10/cerrno" 1 3
# 39 "/usr/include/c++/10/cerrno" 3
       
# 40 "/usr/include/c++/10/cerrno" 3


# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 43 "/usr/include/c++/10/cerrno" 2 3
# 45 "/usr/include/c++/10/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6536 "/usr/include/c++/10/bits/basic_string.h" 2 3
# 1 "/usr/include/c++/10/bits/charconv.h" 1 3
# 33 "/usr/include/c++/10/bits/charconv.h" 3
       
# 34 "/usr/include/c++/10/bits/charconv.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __detail
{

  template<typename _Tp>
    constexpr unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
      const unsigned __b2 = __base * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
 {
   if (__value < (unsigned)__base) return __n;
   if (__value < __b2) return __n + 1;
   if (__value < __b3) return __n + 2;
   if (__value < __b4) return __n + 3;
   __value /= __b4;
   __n += 4;
 }
    }




  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      static constexpr char __digits[201] =
 "0001020304050607080910111213141516171819"
 "2021222324252627282930313233343536373839"
 "4041424344454647484950515253545556575859"
 "6061626364656667686970717273747576777879"
 "8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
 {
   auto const __num = (__val % 100) * 2;
   __val /= 100;
   __first[__pos] = __digits[__num + 1];
   __first[__pos - 1] = __digits[__num];
   __pos -= 2;
 }
      if (__val >= 10)
 {
   auto const __num = __val * 2;
   __first[1] = __digits[__num + 1];
   __first[0] = __digits[__num];
 }
      else
 __first[0] = '0' + __val;
    }

}

}
# 6537 "/usr/include/c++/10/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  {
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }

  inline string
  to_string(unsigned __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
    return __str;
  }

  inline string
  to_string(long __val)
  {
    const bool __neg = __val < 0;
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }

  inline string
  to_string(unsigned long __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
    return __str;
  }

  inline string
  to_string(long long __val)
  {
    const bool __neg = __val < 0;
    const unsigned long long __uval
      = __neg ? (unsigned long long)~__val + 1ull : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str(__neg + __len, '-');
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
    return __str;
  }

  inline string
  to_string(unsigned long long __val)
  {
    string __str(__detail::__to_chars_len(__val), '\0');
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
    return __str;
  }




  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }



}

}





# 1 "/usr/include/c++/10/bits/functional_hash.h" 1 3
# 33 "/usr/include/c++/10/bits/functional_hash.h" 3
       
# 34 "/usr/include/c++/10/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };







  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 192 "/usr/include/c++/10/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };
# 278 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6788 "/usr/include/c++/10/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };
# 6846 "/usr/include/c++/10/bits/basic_string.h" 3
  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };





  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }
# 6904 "/usr/include/c++/10/bits/basic_string.h" 3
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }

#pragma GCC diagnostic pop
  }
  }
# 6936 "/usr/include/c++/10/bits/basic_string.h" 3

}
# 56 "/usr/include/c++/10/string" 2 3
# 1 "/usr/include/c++/10/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/10/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/10/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 if (true)
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 if (false)
   {
     _M_dispose();
     ;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 if (true)
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 if (false)
   {
     _M_dispose();
     ;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {


 const basic_string __s(__k1, __k2, this->get_allocator());
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1158 "/usr/include/c++/10/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str(_Alloc_traits::_S_select_on_copy(
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      __string_type __str(_Alloc_traits::_S_select_on_copy(
          __rhs.get_allocator()));
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   if (true)
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
       ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   if (true)
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   if (false)
     {
       __in._M_setstate(__ios_base::badbit);
       ;
     }
   if (false)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1618 "/usr/include/c++/10/bits/basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 57 "/usr/include/c++/10/string" 2 3
# 203 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2






# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h" 1
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"

# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 110 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/cstring" 1 3
# 39 "/usr/include/c++/10/cstring" 3
       
# 40 "/usr/include/c++/10/cstring" 3


# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4


# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4
}
# 43 "/usr/include/c++/10/cstring" 2 3
# 71 "/usr/include/c++/10/cstring" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 122 "/usr/include/c++/10/cstring" 3

}
}
# 236 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

# 1 "/usr/include/c++/10/utility" 1 3
# 58 "/usr/include/c++/10/utility" 3
       
# 59 "/usr/include/c++/10/utility" 3
# 69 "/usr/include/c++/10/utility" 3
# 1 "/usr/include/c++/10/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/10/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 85 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 70 "/usr/include/c++/10/utility" 2 3
# 82 "/usr/include/c++/10/utility" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };







  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }





  template<size_t... _Indexes> struct _Index_tuple { };
# 307 "/usr/include/c++/10/utility" 3
  template<size_t _Num>
    struct _Build_index_tuple
    {






      using __type = _Index_tuple<__integer_pack(_Num)...>;

    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence



      = integer_sequence<_Tp, __integer_pack(_Num)...>;





  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 473 "/usr/include/c++/10/utility" 3

}
# 238 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 259 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 36 "/usr/include/c++/10/stdlib.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 37 "/usr/include/c++/10/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 260 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2







# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 295 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 274 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 296 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 196 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 300 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 307 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) throw () __attribute__ ((__nonnull__ (1)));







extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 338 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 62 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 148 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 168 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 178 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 214 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 293 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 304 "/usr/include/fcntl.h" 3 4
}
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 397 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/wait.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern "C" {
# 77 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);
# 100 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 121 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);






struct rusage;






extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) throw ();




extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) throw ();



}
# 398 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 1 3 4
# 113 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4
extern "C" {



int memfd_create (const char *__name, unsigned int __flags) throw ();



int mlock2 (const void *__addr, size_t __length, unsigned int __flags) throw ();





int pkey_alloc (unsigned int __flags, unsigned int __access_rights) throw ();



int pkey_set (int __key, unsigned int __access_rights) throw ();



int pkey_get (int __key) throw ();



int pkey_free (int __key) throw ();



int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) throw ();

}
# 114 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 2 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4




extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 70 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (const void *__addr, size_t __len) throw ();


extern int munlock (const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 133 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);

}
# 429 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/resource.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/resource.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,





  __RLIMIT_RTTIME = 15,


  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 131 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 3 4
struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };


    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };
# 180 "/usr/include/x86_64-linux-gnu/bits/resource.h" 2 3 4







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};


extern "C" {




extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
      const struct rlimit *__new_limit,
      struct rlimit *__old_limit) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) throw ();



}
# 25 "/usr/include/x86_64-linux-gnu/sys/resource.h" 2 3 4






extern "C" {
# 42 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;





extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) throw ();
# 61 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) throw ();






extern int setrlimit (__rlimit_resource_t __resource,
        const struct rlimit *__rlimits) throw ();
# 81 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) throw ();




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) throw ();





extern int getpriority (__priority_which_t __which, id_t __who) throw ();



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     throw ();

}
# 441 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/times.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/times.h" 3 4
extern "C" {


struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;

    clock_t tms_cutime;
    clock_t tms_cstime;
  };






extern clock_t times (struct tms *__buffer) throw ();

}
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 521 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}







# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4

# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const wchar_t * __restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) wcstoimax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const wchar_t *
          __restrict __nptr,
          wchar_t **
          __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) wcstoumax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4
}
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2




# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 576 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 599 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 40 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 600 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 671 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"

# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
extern "C" {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 2


typedef unsigned int hashval_t;




typedef hashval_t (*htab_hash) (const void *);






typedef int (*htab_eq) (const void *, const void *);



typedef void (*htab_del) (void *);





typedef int (*htab_trav) (void **, void *);





typedef void *(*htab_alloc) (size_t, size_t);


typedef void (*htab_free) (void *);



typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);
typedef void (*htab_free_with_arg) (void *, void *);
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
struct htab {

  htab_hash hash_f;


  htab_eq eq_f;


  htab_del del_f;


  void **entries;


  size_t size;


  size_t n_elements;


  size_t n_deleted;



  unsigned int searches;



  unsigned int collisions;


  htab_alloc alloc_f;
  htab_free free_f;


  void *alloc_arg;
  htab_alloc_with_arg alloc_with_arg_f;
  htab_free_with_arg free_with_arg_f;



  unsigned int size_prime_index;
};

typedef struct htab *htab_t;


enum insert_option {NO_INSERT, INSERT};



extern htab_t htab_create_alloc (size_t, htab_hash,
                                    htab_eq, htab_del,
                                    htab_alloc, htab_free);

extern htab_t htab_create_alloc_ex (size_t, htab_hash,
                                      htab_eq, htab_del,
                                      void *, htab_alloc_with_arg,
                                      htab_free_with_arg);

extern htab_t htab_create_typed_alloc (size_t, htab_hash, htab_eq, htab_del,
     htab_alloc, htab_alloc, htab_free);


extern htab_t htab_create (size_t, htab_hash, htab_eq, htab_del);
extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);

extern void htab_set_functions_ex (htab_t, htab_hash,
                                       htab_eq, htab_del,
                                       void *, htab_alloc_with_arg,
                                       htab_free_with_arg);

extern void htab_delete (htab_t);
extern void htab_empty (htab_t);

extern void * htab_find (htab_t, const void *);
extern void ** htab_find_slot (htab_t, const void *, enum insert_option);
extern void * htab_find_with_hash (htab_t, const void *, hashval_t);
extern void ** htab_find_slot_with_hash (htab_t, const void *,
       hashval_t, enum insert_option);
extern void htab_clear_slot (htab_t, void **);
extern void htab_remove_elt (htab_t, const void *);
extern void htab_remove_elt_with_hash (htab_t, const void *, hashval_t);

extern void htab_traverse (htab_t, htab_trav, void *);
extern void htab_traverse_noresize (htab_t, htab_trav, void *);

extern size_t htab_size (htab_t);
extern size_t htab_elements (htab_t);
extern double htab_collisions (htab_t);


extern htab_hash htab_hash_pointer;


extern htab_eq htab_eq_pointer;


extern hashval_t htab_hash_string (const void *);


extern hashval_t iterative_hash (const void *, size_t, hashval_t);




}
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 2


extern "C" {
# 84 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
extern int filename_cmp (const char *s1, const char *s2);


extern int filename_ncmp (const char *s1, const char *s2,
     size_t n);

extern hashval_t filename_hash (const void *s);

extern int filename_eq (const void *s1, const void *s2);

extern int canonical_filename_eq (const char *a, const char *b);


}
# 672 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 683 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/dlfcn.h" 1 3 4
# 24 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 1 3 4
# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4

# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4
extern "C" {


extern void _dl_mcount_wrapper_check (void *__selfpc) throw ();

}
# 28 "/usr/include/dlfcn.h" 2 3 4
# 44 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;







extern "C" {



extern void *dlopen (const char *__file, int __mode) throw ();



extern int dlclose (void *__handle) throw () __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      const char *__restrict __name) throw () __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) throw ();



extern void *dlvsym (void *__restrict __handle,
       const char *__restrict __name,
       const char *__restrict __version)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) throw ();





typedef struct
{
  const char *dli_fname;
  void *dli_fbase;
  const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (const void *__address, Dl_info *__info)
     throw () __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) throw () __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     throw () __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;





  __extension__ union
  {
    Dl_serpath dls_serpath[0];
    Dl_serpath __dls_serpath_pad[1];
  };



} Dl_serinfo;



}
# 684 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 692 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 1
# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"

# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern "C" {





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 2
# 55 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char * const *) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);



extern int writeargv (char * const *, FILE *);



extern int countargv (char * const *);
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));




extern const char *dos_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));





extern const char *unix_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));



extern char *lrealpath (const char *);



extern int is_valid_fd (int fd);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));
# 157 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 193 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 205 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char * getpwd (void);
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));





extern char *make_relative_prefix_ignore_links (const char *, const char *,
      const char *) __attribute__ ((__malloc__));




extern const char *choose_tmpdir (void) __attribute__ ((__returns_nonnull__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));




extern char *make_temp_file_with_prefix (const char *, const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int) __attribute__ ((__returns_nonnull__));




extern int signo_max (void);
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1))) __attribute__ ((warn_unused_result));





extern void *xrealloc (void *, size_t) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (2))) __attribute__ ((warn_unused_result));




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1, 2))) __attribute__ ((warn_unused_result));



extern char *xstrdup (const char *) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));


extern double physmem_total (void);
extern double physmem_available (void);


extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);
# 391 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase) __attribute__ ((__returns_nonnull__));
# 528 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);
# 543 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
                      const char *executable,
                                           char * const *argv,
                                           char * const *env,
                              const char *outname,
        const char *errname, int *err);





extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);






extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);







extern FILE *pex_read_output (struct pex_obj *, int binary);







extern FILE *pex_read_err (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);




extern void pex_free (struct pex_obj *);
# 618 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 637 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);



extern void *bsearch_r (const void *, const void *,
   size_t, size_t,
   int (*)(const void *, const void *, void *),
   void *);
# 661 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xasprintf (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xvasprintf (const char *, va_list) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));
# 722 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void setproctitle (const char *name, ...);


extern void stack_limit_increase (unsigned long);
# 735 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 762 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
}
# 693 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 763 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern void fancy_abort (const char *, int, const char *)
      __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
# 894 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        




        






        




        


        
# 963 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        






        
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        
# 1073 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        


        



        
# 1091 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        
# 1107 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        



       
# 1224 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h" 1
# 77 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
typedef long __gcc_host_wide_int__;
# 141 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline unsigned long
least_bit_hwi (unsigned long x)
{
  return (x & -x);
}



static inline bool
pow2_or_zerop (unsigned long x)
{
  return least_bit_hwi (x) == x;
}



static inline bool
pow2p_hwi (unsigned long x)
{
  return x && pow2_or_zerop (x);
}
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline int
clz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_clzl (x);





}

static inline int
ctz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_ctzl (x);





}

static inline int
ffs_hwi (unsigned long x)
{

  return __builtin_ffsl (x);





}

static inline int
popcount_hwi (unsigned long x)
{

  return __builtin_popcountl (x);





}

static inline int
floor_log2 (unsigned long x)
{
  return 64 - 1 - clz_hwi (x);
}

static inline int
ceil_log2 (unsigned long x)
{
  return x == 0 ? 0 : floor_log2 (x - 1) + 1;
}

static inline int
exact_log2 (unsigned long x)
{
  return pow2p_hwi (x) ? ctz_hwi (x) : -1;
}







extern long abs_hwi (long);
extern unsigned long absu_hwi (long);
extern long gcd (long, long);
extern long pos_mul_hwi (long, long);
extern long mul_hwi (long, long);
extern long least_common_multiple (long, long);



static inline int
ctz_or_zero (unsigned long x)
{
  return ffs_hwi (x) - 1;
}



static inline long
sext_hwi (long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else

    {






      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 291, __FUNCTION__), 0 : 0));
      int shift = 64 - prec;
      return ((long) ((unsigned long) src << shift)) >> shift;
    }
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
}


static inline unsigned long
zext_hwi (unsigned long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else
    {
      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 314, __FUNCTION__), 0 : 0));
      return src & ((1UL << prec) - 1);
    }
}



inline long
abs_hwi (long x)
{
  ((void)(!(x != (long) (1UL << (64 - 1))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 324, __FUNCTION__), 0 : 0));
  return x >= 0 ? x : -x;
}



inline unsigned long
absu_hwi (long x)
{
  return x >= 0 ? (unsigned long)x : -(unsigned long)x;
}
# 1225 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

typedef int sort_r_cmp_fn (const void *, const void *, void *);
void qsort_chk (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_sort_r (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_qsort (void *, size_t, size_t, int (*)(const void *, const void *));
void gcc_stablesort (void *, size_t, size_t,
       int (*)(const void *, const void *));
# 8 "build/gencondmd.c" 2
# 24 "build/gencondmd.c"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 1
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int64_t gcov_type;
typedef uint64_t gcov_type_unsigned;

struct bitmap_obstack;
class bitmap_head;
typedef class bitmap_head *bitmap;
typedef const class bitmap_head *const_bitmap;
struct simple_bitmap_def;
typedef struct simple_bitmap_def *sbitmap;
typedef const struct simple_bitmap_def *const_sbitmap;
struct rtx_def;
typedef struct rtx_def *rtx;
typedef const struct rtx_def *const_rtx;
class scalar_mode;
class scalar_int_mode;
class scalar_float_mode;
class complex_mode;
class fixed_size_mode;
template<typename> class opt_mode;
typedef opt_mode<scalar_mode> opt_scalar_mode;
typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;
typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;
template<typename> struct pod_mode;
typedef pod_mode<scalar_mode> scalar_mode_pod;
typedef pod_mode<scalar_int_mode> scalar_int_mode_pod;
typedef pod_mode<fixed_size_mode> fixed_size_mode_pod;




struct rtx_def;
  struct rtx_expr_list;
  struct rtx_insn_list;
  struct rtx_sequence;
  struct rtx_insn;
    struct rtx_debug_insn;
    struct rtx_nonjump_insn;
    struct rtx_jump_insn;
    struct rtx_call_insn;
    struct rtx_jump_table_data;
    struct rtx_barrier;
    struct rtx_code_label;
    struct rtx_note;

struct rtvec_def;
typedef struct rtvec_def *rtvec;
typedef const struct rtvec_def *const_rtvec;
struct hwivec_def;
typedef struct hwivec_def *hwivec;
typedef const struct hwivec_def *const_hwivec;
union tree_node;
typedef union tree_node *tree;
typedef const union tree_node *const_tree;
struct gimple;
typedef gimple *gimple_seq;
struct gimple_stmt_iterator;




struct gcond;
struct gdebug;
struct ggoto;
struct glabel;
struct gswitch;
struct gassign;
struct gasm;
struct gcall;
struct gtransaction;
struct greturn;
struct gbind;
struct gcatch;
struct geh_filter;
struct geh_mnt;
struct geh_else;
struct gresx;
struct geh_dispatch;
struct gphi;
struct gtry;
struct gomp_atomic_load;
struct gomp_atomic_store;
struct gomp_continue;
struct gomp_critical;
struct gomp_ordered;
struct gomp_for;
struct gomp_parallel;
struct gomp_task;
struct gomp_sections;
struct gomp_single;
struct gomp_target;
struct gomp_teams;




struct symtab_node;
  struct cgraph_node;
  struct varpool_node;
struct cgraph_edge;

union section;
typedef union section section;
struct gcc_options;
struct cl_target_option;
struct cl_optimization;
struct cl_option;
struct cl_decoded_option;
struct cl_option_handlers;
struct diagnostic_context;
class pretty_printer;
class diagnostic_event_id_t;

template<typename T> struct array_traits;



template<typename T, typename Traits = array_traits<T>,
  bool has_constant_size = Traits::has_constant_size>
class bitmap_view;


typedef unsigned char addr_space_t;






enum ir_type {
  IR_GIMPLE,
  IR_RTL_CFGRTL,
  IR_RTL_CFGLAYOUT
};






struct cpp_reader;
struct cpp_token;




enum tls_model {
  TLS_MODEL_NONE,
  TLS_MODEL_EMULATED,
  TLS_MODEL_REAL,
  TLS_MODEL_GLOBAL_DYNAMIC = TLS_MODEL_REAL,
  TLS_MODEL_LOCAL_DYNAMIC,
  TLS_MODEL_INITIAL_EXEC,
  TLS_MODEL_LOCAL_EXEC
};


enum offload_abi {
  OFFLOAD_ABI_UNSET,
  OFFLOAD_ABI_LP64,
  OFFLOAD_ABI_ILP32
};


enum profile_update {
  PROFILE_UPDATE_SINGLE,
  PROFILE_UPDATE_ATOMIC,
  PROFILE_UPDATE_PREFER_ATOMIC
};


enum profile_reproducibility {
    PROFILE_REPRODUCIBILITY_SERIAL,
    PROFILE_REPRODUCIBILITY_PARALLEL_RUNS,
    PROFILE_REPRODUCIBILITY_MULTITHREADED
};



enum unwind_info_type
{
  UI_NONE,
  UI_SJLJ,
  UI_DWARF2,
  UI_TARGET,
  UI_SEH
};


enum node_frequency {


  NODE_FREQUENCY_UNLIKELY_EXECUTED,


  NODE_FREQUENCY_EXECUTED_ONCE,

  NODE_FREQUENCY_NORMAL,


  NODE_FREQUENCY_HOT
};


enum optimization_type {

  OPTIMIZE_FOR_SPEED,


  OPTIMIZE_FOR_BOTH,


  OPTIMIZE_FOR_SIZE
};


enum pad_direction {

  PAD_NONE,




  PAD_UPWARD,




  PAD_DOWNWARD
};




enum var_init_status
{
  VAR_INIT_STATUS_UNKNOWN,
  VAR_INIT_STATUS_UNINITIALIZED,
  VAR_INIT_STATUS_INITIALIZED
};



enum warn_strict_overflow_code
{



  WARN_STRICT_OVERFLOW_ALL = 1,




  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,


  WARN_STRICT_OVERFLOW_COMPARISON = 3,


  WARN_STRICT_OVERFLOW_MISC = 4,


  WARN_STRICT_OVERFLOW_MAGNITUDE = 5
};







typedef int alias_set_type;

class edge_def;
typedef class edge_def *edge;
typedef const class edge_def *const_edge;
struct basic_block_def;
typedef struct basic_block_def *basic_block;
typedef const struct basic_block_def *const_basic_block;
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int reg_class_t;

class rtl_opt_pass;

namespace gcc {
  class context;
}

typedef std::pair <tree, tree> tree_pair;
typedef std::pair <const char *, int> string_int_pair;


template <typename ValueType>
struct kv_pair
{
  const char *const name;
  const ValueType value;
};



template<typename T>
struct iterator_range
{
public:
  iterator_range (const T &begin, const T &end)
    : m_begin (begin), m_end (end) {}

  T begin () const { return m_begin; }
  T end () const { return m_end; }

private:
  T m_begin;
  T m_end;
};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
enum function_class {
  function_c94,
  function_c99_misc,
  function_c99_math_complex,
  function_sincos,
  function_c11_misc,
  function_c2x_misc
};



enum symbol_visibility
{
  VISIBILITY_DEFAULT,
  VISIBILITY_PROTECTED,
  VISIBILITY_HIDDEN,
  VISIBILITY_INTERNAL
};



enum flt_eval_method
{
  FLT_EVAL_METHOD_UNPREDICTABLE = -1,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT = 0,
  FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE = 1,
  FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE = 2,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 = 16
};

enum excess_precision_type
{
  EXCESS_PRECISION_TYPE_IMPLICIT,
  EXCESS_PRECISION_TYPE_STANDARD,
  EXCESS_PRECISION_TYPE_FAST
};



typedef void (*gt_pointer_operator) (void *, void *);


typedef unsigned char uchar;




# 1 "./insn-modes.h" 1






enum machine_mode
{
  E_VOIDmode,






  E_BLKmode,






  E_CCmode,






  E_CCGCmode,






  E_CCGOCmode,






  E_CCNOmode,






  E_CCGZmode,






  E_CCAmode,






  E_CCCmode,






  E_CCOmode,






  E_CCPmode,






  E_CCSmode,






  E_CCZmode,






  E_CCFPmode,






  E_BImode,






  E_QImode,






  E_HImode,






  E_SImode,






  E_DImode,






  E_TImode,






  E_OImode,






  E_XImode,






  E_P2QImode,






  E_P2HImode,






  E_POImode,






  E_QQmode,






  E_HQmode,






  E_SQmode,






  E_DQmode,






  E_TQmode,






  E_UQQmode,






  E_UHQmode,






  E_USQmode,






  E_UDQmode,






  E_UTQmode,






  E_HAmode,






  E_SAmode,






  E_DAmode,






  E_TAmode,






  E_UHAmode,






  E_USAmode,






  E_UDAmode,






  E_UTAmode,






  E_SFmode,






  E_DFmode,






  E_XFmode,






  E_TFmode,






  E_SDmode,






  E_DDmode,






  E_TDmode,






  E_CQImode,






  E_CP2QImode,






  E_CHImode,






  E_CP2HImode,






  E_CSImode,






  E_CDImode,






  E_CTImode,






  E_CPOImode,






  E_COImode,






  E_CXImode,






  E_SCmode,






  E_DCmode,






  E_XCmode,






  E_TCmode,






  E_V2QImode,






  E_V4QImode,






  E_V2HImode,






  E_V1SImode,






  E_V8QImode,






  E_V4HImode,






  E_V2SImode,






  E_V1DImode,






  E_V12QImode,






  E_V6HImode,






  E_V14QImode,






  E_V16QImode,






  E_V8HImode,






  E_V4SImode,






  E_V2DImode,






  E_V1TImode,






  E_V32QImode,






  E_V16HImode,






  E_V8SImode,






  E_V4DImode,






  E_V2TImode,






  E_V64QImode,






  E_V32HImode,






  E_V16SImode,






  E_V8DImode,






  E_V4TImode,






  E_V128QImode,






  E_V64HImode,






  E_V32SImode,






  E_V16DImode,






  E_V8TImode,






  E_V64SImode,






  E_V2SFmode,






  E_V4SFmode,






  E_V2DFmode,






  E_V8SFmode,






  E_V4DFmode,






  E_V2TFmode,






  E_V16SFmode,






  E_V8DFmode,






  E_V4TFmode,






  E_V32SFmode,






  E_V16DFmode,






  E_V8TFmode,






  E_V64SFmode,






  E_V32DFmode,






  E_V16TFmode,






  MAX_MACHINE_MODE,

  MIN_MODE_RANDOM = E_VOIDmode,
  MAX_MODE_RANDOM = E_BLKmode,

  MIN_MODE_CC = E_CCmode,
  MAX_MODE_CC = E_CCFPmode,

  MIN_MODE_INT = E_QImode,
  MAX_MODE_INT = E_XImode,

  MIN_MODE_PARTIAL_INT = E_P2QImode,
  MAX_MODE_PARTIAL_INT = E_POImode,

  MIN_MODE_FRACT = E_QQmode,
  MAX_MODE_FRACT = E_TQmode,

  MIN_MODE_UFRACT = E_UQQmode,
  MAX_MODE_UFRACT = E_UTQmode,

  MIN_MODE_ACCUM = E_HAmode,
  MAX_MODE_ACCUM = E_TAmode,

  MIN_MODE_UACCUM = E_UHAmode,
  MAX_MODE_UACCUM = E_UTAmode,

  MIN_MODE_FLOAT = E_SFmode,
  MAX_MODE_FLOAT = E_TFmode,

  MIN_MODE_DECIMAL_FLOAT = E_SDmode,
  MAX_MODE_DECIMAL_FLOAT = E_TDmode,

  MIN_MODE_COMPLEX_INT = E_CQImode,
  MAX_MODE_COMPLEX_INT = E_CXImode,

  MIN_MODE_COMPLEX_FLOAT = E_SCmode,
  MAX_MODE_COMPLEX_FLOAT = E_TCmode,

  MIN_MODE_VECTOR_BOOL = E_VOIDmode,
  MAX_MODE_VECTOR_BOOL = E_VOIDmode,

  MIN_MODE_VECTOR_INT = E_V2QImode,
  MAX_MODE_VECTOR_INT = E_V64SImode,

  MIN_MODE_VECTOR_FRACT = E_VOIDmode,
  MAX_MODE_VECTOR_FRACT = E_VOIDmode,

  MIN_MODE_VECTOR_UFRACT = E_VOIDmode,
  MAX_MODE_VECTOR_UFRACT = E_VOIDmode,

  MIN_MODE_VECTOR_ACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_ACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_UACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_UACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_FLOAT = E_V2SFmode,
  MAX_MODE_VECTOR_FLOAT = E_V16TFmode,

  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
# 450 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h"
enum signop {
  SIGNED,
  UNSIGNED
};
# 451 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 1
# 314 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T> class generic_wide_int;
template <int N> class fixed_wide_int_storage;
class wide_int_storage;





typedef generic_wide_int <wide_int_storage> wide_int;
typedef generic_wide_int < fixed_wide_int_storage <((64 + 4 + 64 - 1) & ~(64 - 1))> > offset_int;
typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64)> > widest_int;


typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64) * 2> > widest2_int;



template <bool SE, bool HDP = true>
class wide_int_ref_storage;

typedef generic_wide_int <wide_int_ref_storage <false> > wide_int_ref;
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{
# 358 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  enum overflow_type {
    OVF_NONE = 0,
    OVF_UNDERFLOW = -1,
    OVF_OVERFLOW = 1,


    OVF_UNKNOWN = 2
  };


  enum precision_type {



    FLEXIBLE_PRECISION,


    VAR_PRECISION,



    CONST_PRECISION
  };
# 403 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> struct int_traits;




  template <typename T1, typename T2,
     enum precision_type P1 = int_traits <T1>::precision_type,
     enum precision_type P2 = int_traits <T2>::precision_type>
  struct binary_traits;





  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef widest_int result_type;

  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, CONST_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T2>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, FLEXIBLE_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, CONST_PRECISION>
  {
    static_assert ((int_traits <T1>::precision == int_traits <T2>::precision), "int_traits <T1>::precision == int_traits <T2>::precision");


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };
}


namespace wi
{
  template <typename T>
  unsigned int get_precision (const T &);

  template <typename T1, typename T2>
  unsigned int get_binary_precision (const T1 &, const T2 &);

  template <typename T1, typename T2>
  void copy (T1 &, const T2 &);
# 512 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> bool fits_shwi_p (const T &);
  template <typename T> bool fits_uhwi_p (const T &);
  template <typename T> bool neg_p (const T &, signop = SIGNED);

  template <typename T>
  long sign_mask (const T &);

  template <typename T1, typename T2> bool eq_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ne_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool lt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool lts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ltu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool le_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool les_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool leu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool gts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gtu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ge_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool ges_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool geu_p (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmp (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  int cmps (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmpu (const T1 &, const T2 &);

  template <typename T> typename wi::binary_traits <T, T>::result_type bit_not (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &, overflow_type *);
  template <typename T> typename wi::binary_traits <T, T>::result_type abs (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type ext (const T &, unsigned int, signop);
  template <typename T> typename wi::binary_traits <T, T>::result_type sext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type zext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type set_bit (const T &, unsigned int);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type min (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type max (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smax (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umax (const T1 &, const T2 &);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_xor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul_high (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_ceil (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type divmod_trunc (const T1 &, const T2 &, signop,
    typename wi::binary_traits <T1, T2>::result_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type gcd (const T1 &, const T2 &, signop = UNSIGNED);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop,
        typename wi::binary_traits <T1, T2>::result_type *);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type arshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rshift (const T1 &, const T2 &, signop sgn);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrotate (const T1 &, const T2 &, unsigned int = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rrotate (const T1 &, const T2 &, unsigned int = 0);







  bool only_sign_bit_p (const wide_int_ref &, unsigned int);
  bool only_sign_bit_p (const wide_int_ref &);
  int clz (const wide_int_ref &);
  int clrsb (const wide_int_ref &);
  int ctz (const wide_int_ref &);
  int exact_log2 (const wide_int_ref &);
  int floor_log2 (const wide_int_ref &);
  int ffs (const wide_int_ref &);
  int popcount (const wide_int_ref &);
  int parity (const wide_int_ref &);

  template <typename T>
  unsigned long extract_uhwi (const T &, unsigned int, unsigned int);

  template <typename T>
  unsigned int min_precision (const T &, signop);

  static inline void accumulate_overflow (overflow_type &, overflow_type);
}

namespace wi
{


  class storage_ref
  {
  public:
    storage_ref () {}
    storage_ref (const long *, unsigned int, unsigned int);

    const long *val;
    unsigned int len;
    unsigned int precision;



    unsigned int get_len () const;
    unsigned int get_precision () const;
    const long *get_val () const;
  };
}

inline::wi::storage_ref::storage_ref (const long *val_in,
          unsigned int len_in,
          unsigned int precision_in)
  : val (val_in), len (len_in), precision (precision_in)
{
}

inline unsigned int
wi::storage_ref::get_len () const
{
  return len;
}

inline unsigned int
wi::storage_ref::get_precision () const
{
  return precision;
}

inline const long *
wi::storage_ref::get_val () const
{
  return val;
}
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename storage>
class generic_wide_int : public storage
{
public:
  generic_wide_int ();

  template <typename T>
  generic_wide_int (const T &);

  template <typename T>
  generic_wide_int (const T &, unsigned int);


  long to_shwi (unsigned int) const;
  long to_shwi () const;
  unsigned long to_uhwi (unsigned int) const;
  unsigned long to_uhwi () const;
  long to_short_addr () const;


  long sign_mask () const;
  long elt (unsigned int) const;
  long sext_elt (unsigned int) const;
  unsigned long ulow () const;
  unsigned long uhigh () const;
  long slow () const;
  long shigh () const;

  template <typename T>
  generic_wide_int &operator = (const T &);
# 754 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> generic_wide_int &operator &= (const T &c) { return (*this = wi::bit_and (*this, c)); }
  template <typename T> generic_wide_int &operator |= (const T &c) { return (*this = wi::bit_or (*this, c)); }
  template <typename T> generic_wide_int &operator ^= (const T &c) { return (*this = wi::bit_xor (*this, c)); }
  template <typename T> generic_wide_int &operator += (const T &c) { return (*this = wi::add (*this, c)); }
  template <typename T> generic_wide_int &operator -= (const T &c) { return (*this = wi::sub (*this, c)); }
  template <typename T> generic_wide_int &operator *= (const T &c) { return (*this = wi::mul (*this, c)); }
  template <typename T> generic_wide_int &operator <<= (const T &c) { return (*this = wi::lshift (*this, c)); }
  template <typename T> generic_wide_int &operator >>= (const T &c) { return (*this = *this >> c); }
  generic_wide_int &operator ++ () { *this += 1; return *this; }
  generic_wide_int &operator -- () { *this += -1; return *this; }






  void dump () const;

  static const bool is_sign_extended
    = wi::int_traits <generic_wide_int <storage> >::is_sign_extended;
};

template <typename storage>
inline generic_wide_int <storage>::generic_wide_int () {}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x)
  : storage (x)
{
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x,
           unsigned int precision)
  : storage (x, precision)
{
}



template <typename storage>
inline long
generic_wide_int <storage>::to_shwi (unsigned int precision) const
{
  if (precision < 64)
    return sext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::to_shwi () const
{
  if (is_sign_extended)
    return this->get_val ()[0];
  else
    return to_shwi (this->get_precision ());
}




template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi (unsigned int precision) const
{
  if (precision < 64)
    return zext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi () const
{
  return to_uhwi (this->get_precision ());
}





template <typename storage>
inline long
generic_wide_int <storage>::to_short_addr () const
{
  return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::sign_mask () const
{
  unsigned int len = this->get_len ();
  ((void)(!(len > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 855, __FUNCTION__), 0 : 0));

  unsigned long high = this->get_val ()[len - 1];
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      int excess = len * 64 - precision;
      if (excess > 0)
 high <<= excess;
    }
  return (long) (high) < 0 ? -1 : 0;
}



template <typename storage>
inline long
generic_wide_int <storage>::slow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline long
generic_wide_int <storage>::shigh () const
{
  return this->get_val ()[this->get_len () - 1];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::ulow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::uhigh () const
{
  return this->get_val ()[this->get_len () - 1];
}


template <typename storage>
inline long
generic_wide_int <storage>::elt (unsigned int i) const
{
  if (i >= this->get_len ())
    return sign_mask ();
  else
    return this->get_val ()[i];
}



template <typename storage>
inline long
generic_wide_int <storage>::sext_elt (unsigned int i) const
{
  long elt_i = elt (i);
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      unsigned int lsb = i * 64;
      if (precision - lsb < 64)
 elt_i = sext_hwi (elt_i, precision - lsb);
    }
  return elt_i;
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage> &
generic_wide_int <storage>::operator = (const T &x)
{
  storage::operator = (x);
  return *this;
}


template <typename storage>
void
generic_wide_int <storage>::dump () const
{
  unsigned int len = this->get_len ();
  const long *val = this->get_val ();
  unsigned int precision = this->get_precision ();
  fprintf (
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "[");
  if (len * 64 < precision)
    fprintf (
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "...,");
  for (unsigned int i = 0; i < len - 1; ++i)
    fprintf (
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "%#" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                    "l" "x" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                            ",", val[len - 1 - i]);
  fprintf (
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "%#" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                  "l" "x" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                          "], precision = %d\n",
    val[0], precision);
}

namespace wi
{
  template <typename storage>
  struct int_traits < generic_wide_int <storage> >
    : public wi::int_traits <storage>
  {
    static unsigned int get_precision (const generic_wide_int <storage> &);
    static wi::storage_ref decompose (long *, unsigned int,
          const generic_wide_int <storage> &);
  };
}

template <typename storage>
inline unsigned int
wi::int_traits < generic_wide_int <storage> >::
get_precision (const generic_wide_int <storage> &x)
{
  return x.get_precision ();
}

template <typename storage>
inline wi::storage_ref
wi::int_traits < generic_wide_int <storage> >::
decompose (long *, unsigned int precision,
    const generic_wide_int <storage> &x)
{
  ((void)(!(precision == x.get_precision ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 984, __FUNCTION__), 0 : 0));
  return wi::storage_ref (x.get_val (), x.get_len (), precision);
}




template <bool SE, bool HDP>
class wide_int_ref_storage : public wi::storage_ref
{
private:


  long scratch[2];

public:
  wide_int_ref_storage () {}

  wide_int_ref_storage (const wi::storage_ref &);

  template <typename T>
  wide_int_ref_storage (const T &);

  template <typename T>
  wide_int_ref_storage (const T &, unsigned int);
};


template <bool SE, bool HDP>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const wi::storage_ref &x)
  : storage_ref (x)
{}




template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::wide_int_ref_storage (const T &x)
  : storage_ref (wi::int_traits <T>::decompose (scratch,
      wi::get_precision (x), x))
{
}


template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const T &x, unsigned int precision)
  : storage_ref (wi::int_traits <T>::decompose (scratch, precision, x))
{
}

namespace wi
{
  template <bool SE, bool HDP>
  struct int_traits <wide_int_ref_storage <SE, HDP> >
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = HDP;
    static const bool is_sign_extended = SE;
  };
}

namespace wi
{
  unsigned int force_to_size (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         signop sgn);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool = true);
}


class wide_int_storage
{
private:
  long val[((160 + 64) / 64)];
  unsigned int len;
  unsigned int precision;

public:
  wide_int_storage ();
  template <typename T>
  wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  wide_int_storage &operator = (const T &);

  static wide_int from (const wide_int_ref &, unsigned int, signop);
  static wide_int from_array (const long *, unsigned int,
         unsigned int, bool = true);
  static wide_int create (unsigned int);


  wide_int bswap () const;
};

namespace wi
{
  template <>
  struct int_traits <wide_int_storage>
  {
    static const enum precision_type precision_type = VAR_PRECISION;

    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    template <typename T1, typename T2>
    static wide_int get_binary_result (const T1 &, const T2 &);
  };
}

inline wide_int_storage::wide_int_storage () {}





template <typename T>
inline wide_int_storage::wide_int_storage (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
}

template <typename T>
inline wide_int_storage&
wide_int_storage::operator = (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
  return *this;
}

inline unsigned int
wide_int_storage::get_precision () const
{
  return precision;
}

inline const long *
wide_int_storage::get_val () const
{
  return val;
}

inline unsigned int
wide_int_storage::get_len () const
{
  return len;
}

inline long *
wide_int_storage::write_val ()
{
  return val;
}

inline void
wide_int_storage::set_len (unsigned int l, bool is_sign_extended)
{
  len = l;
  if (!is_sign_extended && len * 64 > precision)
    val[len - 1] = sext_hwi (val[len - 1],
        precision % 64);
}



inline wide_int
wide_int_storage::from (const wide_int_ref &x, unsigned int precision,
   signop sgn)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, precision, sgn));
  return result;
}




inline wide_int
wide_int_storage::from_array (const long *val, unsigned int len,
         unsigned int precision, bool need_canon_p)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::from_array (result.write_val (), val, len, precision,
      need_canon_p));
  return result;
}


inline wide_int
wide_int_storage::create (unsigned int precision)
{
  wide_int x;
  x.precision = precision;
  return x;
}

template <typename T1, typename T2>
inline wide_int
wi::int_traits <wide_int_storage>::get_binary_result (const T1 &x, const T2 &y)
{

  static_assert ((wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION), "wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION")
                                                                ;
  if (wi::int_traits <T1>::precision_type == FLEXIBLE_PRECISION)
    return wide_int::create (wi::get_precision (y));
  else
    return wide_int::create (wi::get_precision (x));
}


template <int N>
class fixed_wide_int_storage
{
private:
  long val[(N + 64 + 1) / 64];
  unsigned int len;

public:
  fixed_wide_int_storage ();
  template <typename T>
  fixed_wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  static generic_wide_int < fixed_wide_int_storage <N> > from (const wide_int_ref &, signop);
  static generic_wide_int < fixed_wide_int_storage <N> > from_array (const long *, unsigned int,
     bool = true);
};

namespace wi
{
  template <int N>
  struct int_traits < fixed_wide_int_storage <N> >
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static const unsigned int precision = N;
    template <typename T1, typename T2>
    static generic_wide_int < fixed_wide_int_storage <N> > get_binary_result (const T1 &, const T2 &);
  };
}

template <int N>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage () {}


template <int N>
template <typename T>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage (const T &x)
{


  typename wi::binary_traits <T, generic_wide_int < fixed_wide_int_storage <N> > >::result_type *assertion __attribute__ ((__unused__));
  wi::copy (*this, generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > (x, N));
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_precision () const
{
  return N;
}

template <int N>
inline const long *
fixed_wide_int_storage <N>::get_val () const
{
  return val;
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_len () const
{
  return len;
}

template <int N>
inline long *
fixed_wide_int_storage <N>::write_val ()
{
  return val;
}

template <int N>
inline void
fixed_wide_int_storage <N>::set_len (unsigned int l, bool)
{
  len = l;

  static_assert ((N % 64 == 0), "N % HOST_BITS_PER_WIDE_INT == 0");
}


template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from (const wide_int_ref &x, signop sgn)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, N, sgn));
  return result;
}




template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from_array (const long *val,
     unsigned int len,
     bool need_canon_p)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::from_array (result.write_val (), val, len,
      N, need_canon_p));
  return result;
}

template <int N>
template <typename T1, typename T2>
inline generic_wide_int < fixed_wide_int_storage <N> >
wi::int_traits < fixed_wide_int_storage <N> >::
get_binary_result (const T1 &, const T2 &)
{
  return generic_wide_int < fixed_wide_int_storage <N> > ();
}


class trailing_wide_int_storage
{
private:


  unsigned int m_precision;


  unsigned char *m_len;



  long *m_val;

public:
  trailing_wide_int_storage (unsigned int, unsigned char *, long *);


  unsigned int get_len () const;
  unsigned int get_precision () const;
  const long *get_val () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  trailing_wide_int_storage &operator = (const T &);
};

typedef generic_wide_int <trailing_wide_int_storage> trailing_wide_int;


namespace wi
{
  template <>
  struct int_traits <trailing_wide_int_storage>
    : public int_traits <wide_int_storage> {};
}





template <int N>
struct trailing_wide_ints
{
private:

  unsigned short m_precision;


  unsigned char m_max_len;


  unsigned char m_len[N];



  long m_val[1];

public:
  typedef generic_wide_int <wide_int_ref_storage <wi::int_traits <trailing_wide_int_storage>::is_sign_extended, wi::int_traits <trailing_wide_int_storage>::host_dependent_precision> > const_reference;

  void set_precision (unsigned int);
  unsigned int get_precision () const { return m_precision; }
  trailing_wide_int operator [] (unsigned int);
  const_reference operator [] (unsigned int) const;
  static size_t extra_size (unsigned int);
  size_t extra_size () const { return extra_size (m_precision); }
};

inline trailing_wide_int_storage::
trailing_wide_int_storage (unsigned int precision, unsigned char *len,
      long *val)
  : m_precision (precision), m_len (len), m_val (val)
{
}

inline unsigned int
trailing_wide_int_storage::get_len () const
{
  return *m_len;
}

inline unsigned int
trailing_wide_int_storage::get_precision () const
{
  return m_precision;
}

inline const long *
trailing_wide_int_storage::get_val () const
{
  return m_val;
}

inline long *
trailing_wide_int_storage::write_val ()
{
  return m_val;
}

inline void
trailing_wide_int_storage::set_len (unsigned int len, bool is_sign_extended)
{
  *m_len = len;
  if (!is_sign_extended && len * 64 > m_precision)
    m_val[len - 1] = sext_hwi (m_val[len - 1],
          m_precision % 64);
}

template <typename T>
inline trailing_wide_int_storage &
trailing_wide_int_storage::operator = (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, m_precision);
  wi::copy (*this, xi);
  return *this;
}



template <int N>
inline void
trailing_wide_ints <N>::set_precision (unsigned int precision)
{
  m_precision = precision;
  m_max_len = ((precision + 64 - 1)
        / 64);
}


template <int N>
inline trailing_wide_int
trailing_wide_ints <N>::operator [] (unsigned int index)
{
  return trailing_wide_int_storage (m_precision, &m_len[index],
        &m_val[index * m_max_len]);
}

template <int N>
inline typename trailing_wide_ints <N>::const_reference
trailing_wide_ints <N>::operator [] (unsigned int index) const
{
  return wi::storage_ref (&m_val[index * m_max_len],
     m_len[index], m_precision);
}



template <int N>
inline size_t
trailing_wide_ints <N>::extra_size (unsigned int precision)
{
  unsigned int max_len = ((precision + 64 - 1)
     / 64);
  return (N * max_len - 1) * sizeof (long);
}
# 1503 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{

  template <typename T, bool signed_p>
  struct primitive_int_traits
  {
    static const enum precision_type precision_type = FLEXIBLE_PRECISION;
    static const bool host_dependent_precision = true;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (T);
    static wi::storage_ref decompose (long *, unsigned int, T);
  };
}

template <typename T, bool signed_p>
inline unsigned int
wi::primitive_int_traits <T, signed_p>::get_precision (T)
{
  return sizeof (T) * 8;
}

template <typename T, bool signed_p>
inline wi::storage_ref
wi::primitive_int_traits <T, signed_p>::decompose (long *scratch,
         unsigned int precision, T x)
{
  scratch[0] = x;
  if (signed_p || scratch[0] >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}


namespace wi
{
  template <>
  struct int_traits <unsigned char>
    : public primitive_int_traits <unsigned char, false> {};

  template <>
  struct int_traits <unsigned short>
    : public primitive_int_traits <unsigned short, false> {};

  template <>
  struct int_traits <int>
    : public primitive_int_traits <int, true> {};

  template <>
  struct int_traits <unsigned int>
    : public primitive_int_traits <unsigned int, false> {};

  template <>
  struct int_traits <long>
    : public primitive_int_traits <long, true> {};

  template <>
  struct int_traits <unsigned long>
    : public primitive_int_traits <unsigned long, false> {};


  template <>
  struct int_traits <long long>
    : public primitive_int_traits <long long, true> {};

  template <>
  struct int_traits <unsigned long long>
    : public primitive_int_traits <unsigned long long, false> {};

}

namespace wi
{


  class hwi_with_prec
  {
  public:
    hwi_with_prec () {}
    hwi_with_prec (long, unsigned int, signop);
    long val;
    unsigned int precision;
    signop sgn;
  };

  hwi_with_prec shwi (long, unsigned int);
  hwi_with_prec uhwi (unsigned long, unsigned int);

  hwi_with_prec minus_one (unsigned int);
  hwi_with_prec zero (unsigned int);
  hwi_with_prec one (unsigned int);
  hwi_with_prec two (unsigned int);
}

inline wi::hwi_with_prec::hwi_with_prec (long v, unsigned int p,
      signop s)
  : precision (p), sgn (s)
{
  if (precision < 64)
    val = sext_hwi (v, precision);
  else
    val = v;
}


inline wi::hwi_with_prec
wi::shwi (long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, SIGNED);
}


inline wi::hwi_with_prec
wi::uhwi (unsigned long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, UNSIGNED);
}


inline wi::hwi_with_prec
wi::minus_one (unsigned int precision)
{
  return wi::shwi (-1, precision);
}


inline wi::hwi_with_prec
wi::zero (unsigned int precision)
{
  return wi::shwi (0, precision);
}


inline wi::hwi_with_prec
wi::one (unsigned int precision)
{
  return wi::shwi (1, precision);
}


inline wi::hwi_with_prec
wi::two (unsigned int precision)
{
  return wi::shwi (2, precision);
}

namespace wi
{


  template<typename T, precision_type = int_traits<T>::precision_type>
  struct ints_for
  {
    static int zero (const T &) { return 0; }
  };

  template<typename T>
  struct ints_for<T, VAR_PRECISION>
  {
    static hwi_with_prec zero (const T &);
  };
}

template<typename T>
inline wi::hwi_with_prec
wi::ints_for<T, wi::VAR_PRECISION>::zero (const T &x)
{
  return wi::zero (wi::get_precision (x));
}

namespace wi
{
  template <>
  struct int_traits <wi::hwi_with_prec>
  {
    static const enum precision_type precision_type = VAR_PRECISION;


    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (const wi::hwi_with_prec &);
    static wi::storage_ref decompose (long *, unsigned int,
          const wi::hwi_with_prec &);
  };
}

inline unsigned int
wi::int_traits <wi::hwi_with_prec>::get_precision (const wi::hwi_with_prec &x)
{
  return x.precision;
}

inline wi::storage_ref
wi::int_traits <wi::hwi_with_prec>::
decompose (long *scratch, unsigned int precision,
    const wi::hwi_with_prec &x)
{
  ((void)(!(precision == x.precision) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 1700, __FUNCTION__), 0 : 0));
  scratch[0] = x.val;
  if (x.sgn == SIGNED || x.val >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}






namespace wi
{
  bool eq_p_large (const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  bool lts_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  bool ltu_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  int cmps_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  int cmpu_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  unsigned int sext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int zext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int set_bit_large (long *, const long *,
         unsigned int, unsigned int, unsigned int);
  unsigned int lshift_large (long *, const long *,
        unsigned int, unsigned int, unsigned int);
  unsigned int lrshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int arshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int and_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int and_not_large (long *, const long *,
         unsigned int, const long *,
         unsigned int, unsigned int);
  unsigned int or_large (long *, const long *, unsigned int,
    const long *, unsigned int, unsigned int);
  unsigned int or_not_large (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int);
  unsigned int xor_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int add_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int sub_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int mul_internal (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int, signop,
        overflow_type *, bool);
  unsigned int divmod_internal (long *, unsigned int *,
    long *, const long *,
    unsigned int, unsigned int,
    const long *,
    unsigned int, unsigned int,
    signop, overflow_type *);
}


template <typename T>
inline unsigned int
wi::get_precision (const T &x)
{
  return wi::int_traits <T>::get_precision (x);
}



template <typename T1, typename T2>
inline unsigned int
wi::get_binary_precision (const T1 &x, const T2 &y)
{
  return get_precision (wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::
   get_binary_result (x, y));
}


template <typename T1, typename T2>
inline void
wi::copy (T1 &x, const T2 &y)
{
  long *xval = x.write_val ();
  const long *yval = y.get_val ();
  unsigned int len = y.get_len ();
  unsigned int i = 0;
  do
    xval[i] = yval[i];
  while (++i < len);
  x.set_len (len, y.is_sign_extended);
}


template <typename T>
inline bool
wi::fits_shwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.len == 1;
}



template <typename T>
inline bool
wi::fits_uhwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (xi.precision <= 64)
    return true;
  if (xi.len == 1)
    return xi.slow () >= 0;
  return xi.len == 2 && xi.uhigh () == 0;
}



template <typename T>
inline bool
wi::neg_p (const T &x, signop sgn)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (sgn == UNSIGNED)
    return false;
  return xi.sign_mask () < 0;
}


template <typename T>
inline long
wi::sign_mask (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.sign_mask ();
}


template <typename T1, typename T2>
inline bool
wi::eq_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (xi.is_sign_extended && yi.is_sign_extended)
    {

      if (xi.len != yi.len)
 return false;
      unsigned int i = 0;
      do
 if (xi.val[i] != yi.val[i])
   return false;
      while (++i != xi.len);
      return true;
    }
  if (__builtin_expect (yi.len == 1, true))
    {

      if (xi.len != 1)
 return false;


      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return xi.val[0] == 0;

      unsigned long diff = xi.val[0] ^ yi.val[0];
      int excess = 64 - precision;
      if (excess > 0)
 diff <<= excess;
      return diff == 0;
    }
  return eq_p_large (xi.val, xi.len, yi.val, yi.len, precision);
}


template <typename T1, typename T2>
inline bool
wi::ne_p (const T1 &x, const T2 &y)
{
  return !eq_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::lts_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi);

      if (wi::fits_shwi_p (xi))
 return xi.to_shwi () < yi.to_shwi ();


      if (neg_p (xi))
 return true;


      return false;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return !neg_p (yi);
  return lts_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::ltu_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    return xi.len == 1 && xi.to_uhwi () < (unsigned long) yi.val[0];
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    return yi.len != 1 || yi.to_uhwi () > (unsigned long) xi.val[0];



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl;
    }
  return ltu_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::lt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return lts_p (x, y);
  else
    return ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::les_p (const T1 &x, const T2 &y)
{
  return !lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::leu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::le_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return les_p (x, y);
  else
    return leu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::gts_p (const T1 &x, const T2 &y)
{
  return lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gtu_p (const T1 &x, const T2 &y)
{
  return ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return gts_p (x, y);
  else
    return gtu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ges_p (const T1 &x, const T2 &y)
{
  return !lts_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::geu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ge_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return ges_p (x, y);
  else
    return geu_p (x, y);
}



template <typename T1, typename T2>
inline int
wi::cmps (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi) ? -1 : !(xi.len == 1 && xi.val[0] == 0);

      if (wi::fits_shwi_p (xi))
 {
   long xl = xi.to_shwi ();
   long yl = yi.to_shwi ();
   return xl < yl ? -1 : xl > yl;
 }


      if (neg_p (xi))
 return -1;


      return 1;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return neg_p (yi) ? 1 : -1;
  return cmps_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmpu (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    {

      if (xi.len != 1)
 return 1;

      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.val[0];
      return xl < yl ? -1 : xl > yl;
    }
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    {

      if (yi.len != 1)
 return -1;

      unsigned long xl = xi.val[0];
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }
  return cmpu_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmp (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return cmps (x, y);
  else
    return cmpu (x, y);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::bit_not (const T &x)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, get_precision (result));
  for (unsigned int i = 0; i < xi.len; ++i)
    val[i] = ~xi.val[i];
  result.set_len (xi.len);
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x)
{
  return sub (0, x);
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x, overflow_type *overflow)
{
  *overflow = only_sign_bit_p (x) ? OVF_OVERFLOW : OVF_NONE;
  return sub (0, x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::abs (const T &x)
{
  return neg_p (x) ? neg (x) : typename wi::binary_traits <T, T>::result_type (x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::sext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);

  if (offset <= 64)
    {
      val[0] = sext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (sext_large (val, xi.val, xi.len, precision, offset));
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::zext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (offset >= precision)
    {
      wi::copy (result, xi);
      return result;
    }



  if (offset < 64)
    {
      val[0] = zext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (zext_large (val, xi.val, xi.len, precision, offset), true);
  return result;
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::ext (const T &x, unsigned int offset, signop sgn)
{
  return sgn == SIGNED ? sext (x, offset) : zext (x, offset);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::set_bit (const T &x, unsigned int bit)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () | (1UL << bit);
      result.set_len (1);
    }
  else
    result.set_len (set_bit_large (val, xi.val, xi.len, precision, bit));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::min (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::le_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, UNSIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::max (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::ge_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, UNSIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_large (val, xi.val, xi.len, yi.val, yi.len,
          precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_not_large (val, xi.val, xi.len, yi.val, yi.len,
       precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_large (val, xi.val, xi.len,
         yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_not_large (val, xi.val, xi.len, yi.val, yi.len,
      precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_xor (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () ^ yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (xor_large (val, xi.val, xi.len,
          yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () + yi.ulow ();
      result.set_len (1);
    }
# 2441 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (resultl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      if (sgn == SIGNED)
 {
   if ((((resultl ^ xl) & (resultl ^ yl))
        >> (precision - 1)) & 1)
     {
       if (xl > resultl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < resultl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       < (xl << (64 - precision)))
   ? OVF_OVERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () - yi.ulow ();
      result.set_len (1);
    }
# 2527 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (xl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      if (sgn == SIGNED)
 {
   if ((((xl ^ yl) & (resultl ^ xl)) >> (precision - 1)) & 1)
     {
       if (xl > yl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < yl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       > (xl << (64 - precision)))
   ? OVF_UNDERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () * yi.ulow ();
      result.set_len (1);
    }
  else
    result.set_len (mul_internal (val, xi.val, xi.len, yi.val, yi.len,
      precision, UNSIGNED, 0, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, overflow, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, SIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, UNSIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul_high (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, 0, true));
  return result;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  quotient.set_len (divmod_internal (quotient_val, 0, 0, xi.val, xi.len,
         precision,
         yi.val, yi.len, yi.precision,
         sgn, overflow));
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return quotient - 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return quotient + 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_ceil (const T1 &x, const T2 &y)
{
  return div_ceil (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return quotient - 1;
       else
  return quotient + 1;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return quotient + 1;
 }
    }
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::divmod_trunc (const T1 &x, const T2 &y, signop sgn,
    typename wi::binary_traits <T1, T2>::result_type *remainder_ptr)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn, 0));
  remainder.set_len (remainder_len);

  *remainder_ptr = remainder;
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::gcd (const T1 &a, const T2 &b, signop sgn)
{
  T1 x, y, z;

  x = wi::abs (a);
  y = wi::abs (b);

  while (gt_p (x, 0, sgn))
    {
      z = mod_trunc (y, x, sgn);
      y = x;
      x = z;
    }

  return y;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (remainder);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  divmod_internal (0, &remainder_len, remainder_val,
     xi.val, xi.len, precision,
     yi.val, yi.len, yi.precision, sgn, overflow);
  remainder.set_len (remainder_len);

  return remainder;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return remainder + y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_floor (const T1 &x, const T2 &y)
{
  return mod_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return remainder - y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return remainder + y;
       else
  return remainder - y;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return remainder - y;
 }
    }
  return remainder;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn)
{
  return wi::mod_trunc (x, y, sgn) == 0;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn,
     typename wi::binary_traits <T1, T2>::result_type *res)
{
  typename wi::binary_traits <T1, T2>::result_type remainder;
  typename wi::binary_traits <T1, T2>::result_type quotient
    = divmod_trunc (x, y, sgn, &remainder);
  if (remainder == 0)
    {
      *res = quotient;
      return true;
    }
  return false;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3054 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? ((__builtin_constant_p (shift < 64 - 1) && (shift < 64 - 1))
      && xi.len == 1
      && ((unsigned long) (xi.val[0]) - (unsigned long) (0) <= (unsigned long) ((~((long) (1UL << (64 - 1)))) >> shift) - (unsigned long) (0)))
   : precision <= 64)
 {
   val[0] = xi.ulow () << shift;
   result.set_len (1);
 }
      else
 result.set_len (lshift_large (val, xi.val, xi.len,
          precision, shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lrshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3098 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? (shift < 64
      && xi.len == 1
      && xi.val[0] >= 0)
   : xi.precision <= 64)
 {
   val[0] = xi.to_uhwi () >> shift;
   result.set_len (1);
 }
      else
 result.set_len (lrshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::arshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = sign_mask (x);
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
      if (xi.precision <= 64)
 {
   val[0] = sext_hwi (xi.ulow () >> shift, xi.precision - shift);
   result.set_len (1, true);
 }
      else
 result.set_len (arshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::rshift (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == UNSIGNED)
    return lrshift (x, y);
  else
    return arshift (x, y);
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::lrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::rrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}



inline int
wi::parity (const wide_int_ref &x)
{
  return popcount (x) & 1;
}


template <typename T>
inline unsigned long
wi::extract_uhwi (const T &x, unsigned int bitpos, unsigned int width)
{
  unsigned precision = get_precision (x);
  if (precision < bitpos + width)
    precision = bitpos + width;
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (width == 0)
    return 0;

  unsigned int start = bitpos / 64;
  unsigned int shift = bitpos % 64;
  unsigned long res = xi.elt (start);
  res >>= shift;
  if (shift + width > 64)
    {
      unsigned long upper = xi.elt (start + 1);
      res |= upper << (-shift % 64);
    }
  return zext_hwi (res, width);
}


template <typename T>
inline unsigned int
wi::min_precision (const T &x, signop sgn)
{
  if (sgn == SIGNED)
    return get_precision (x) - clrsb (x);
  else
    return get_precision (x) - clz (x);
}
# 3248 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator < (const T1 &x, const T2 &y) { return wi::lts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator <= (const T1 &x, const T2 &y) { return wi::les_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator > (const T1 &x, const T2 &y) { return wi::gts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator >= (const T1 &x, const T2 &y) { return wi::ges_p (x, y); }
# 3287 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator ~ (const generic_wide_int<T> &x) { return wi::bit_not (x); }
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator - (const generic_wide_int<T> &x) { return wi::neg (x); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator == (const T1 &x, const T2 &y) { return wi::eq_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator != (const T1 &x, const T2 &y) { return wi::ne_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator & (const T1 &x, const T2 &y) { return wi::bit_and (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator | (const T1 &x, const T2 &y) { return wi::bit_or (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator ^ (const T1 &x, const T2 &y) { return wi::bit_xor (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator + (const T1 &x, const T2 &y) { return wi::add (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator - (const T1 &x, const T2 &y) { return wi::sub (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator * (const T1 &x, const T2 &y) { return wi::mul (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T1>::operator_result operator << (const T1 &x, const T2 &y) { return wi::lshift (x, y); }






template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator >> (const T1 &x, const T2 &y)
{
  return wi::arshift (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator / (const T1 &x, const T2 &y)
{
  return wi::sdiv_trunc (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator % (const T1 &x, const T2 &y)
{
  return wi::smod_trunc (x, y);
}

template<typename T>
void
gt_ggc_mx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *, void (*) (void *, void *), void *)
{
}

template<int N>
void
gt_ggc_mx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *, void (*) (void *, void *), void *)
{
}

namespace wi
{



  struct never_used1 {};
  struct never_used2 {};

  wide_int min_value (unsigned int, signop);
  wide_int min_value (never_used1 *);
  wide_int min_value (never_used2 *);
  wide_int max_value (unsigned int, signop);
  wide_int max_value (never_used1 *);
  wide_int max_value (never_used2 *);



  wide_int from_buffer (const unsigned char *, unsigned int);





  wide_int mask (unsigned int, bool, unsigned int);
  wide_int shifted_mask (unsigned int, unsigned int, bool, unsigned int);
  wide_int set_bit_in_zero (unsigned int, unsigned int);
  wide_int insert (const wide_int &x, const wide_int &y, unsigned int,
     unsigned int);
  wide_int round_down_for_mask (const wide_int &, const wide_int &);
  wide_int round_up_for_mask (const wide_int &, const wide_int &);

  wide_int mod_inv (const wide_int &a, const wide_int &b);

  template <typename T>
  T mask (unsigned int, bool);

  template <typename T>
  T shifted_mask (unsigned int, unsigned int, bool);

  template <typename T>
  T set_bit_in_zero (unsigned int);

  unsigned int mask (long *, unsigned int, bool, unsigned int);
  unsigned int shifted_mask (long *, unsigned int, unsigned int,
        bool, unsigned int);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool);
}



inline wide_int
wi::mask (unsigned int width, bool negate_p, unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (mask (result.write_val (), width, negate_p, precision));
  return result;
}




inline wide_int
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p,
    unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (shifted_mask (result.write_val (), start, width, negate_p,
    precision));
  return result;
}



inline wide_int
wi::set_bit_in_zero (unsigned int bit, unsigned int precision)
{
  return shifted_mask (bit, 1, false, precision);
}



template <typename T>
inline T
wi::mask (unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (mask (result.write_val (), width, negate_p,
   wi::int_traits <T>::precision));
  return result;
}




template <typename T>
inline T
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (shifted_mask (result.write_val (), start, width,
    negate_p,
    wi::int_traits <T>::precision));
  return result;
}



template <typename T>
inline T
wi::set_bit_in_zero (unsigned int bit)
{
  return shifted_mask <T> (bit, 1, false);
}



static inline void
wi::accumulate_overflow (wi::overflow_type &overflow,
    wi::overflow_type suboverflow)
{
  if (!suboverflow)
    return;
  if (!overflow)
    overflow = suboverflow;
  else if (overflow != suboverflow)
    overflow = wi::OVF_UNKNOWN;
}
# 452 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h"
extern void print_dec (const wide_int_ref &wi, char *buf, signop sgn);
extern void print_dec (const wide_int_ref &wi, FILE *file, signop sgn);
extern void print_decs (const wide_int_ref &wi, char *buf);
extern void print_decs (const wide_int_ref &wi, FILE *file);
extern void print_decu (const wide_int_ref &wi, char *buf);
extern void print_decu (const wide_int_ref &wi, FILE *file);
extern void print_hex (const wide_int_ref &wi, char *buf);
extern void print_hex (const wide_int_ref &wi, FILE *file);
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename T> struct poly_int_pod;
template<unsigned int N, typename T> class poly_int;
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T, wi::precision_type = wi::int_traits<T>::precision_type>
struct poly_coeff_traits;

template<typename T>
struct poly_coeff_traits<T, wi::FLEXIBLE_PRECISION>
{
  typedef T result;
  typedef T int_type;
  static const int signedness = (T (0) >= T (-1));
  static const int precision = sizeof (T) * 8;
  static const T max_value = (signedness
         ? ((T (1) << (precision - 2))
     + ((T (1) << (precision - 2)) - 1))
         : T (-1));
  static const int rank = sizeof (T) * 2 + !signedness;
};

template<typename T>
struct poly_coeff_traits<T, wi::VAR_PRECISION>
{
  typedef T result;
  typedef int int_type;
  static const int signedness = -1;
  static const int precision = (((160 + 64) / 64) * 64);
  static const int rank = 0x7fffffff;
};

template<typename T>
struct poly_coeff_traits<T, wi::CONST_PRECISION>
{
  typedef typename wi::binary_traits <T, T>::result_type result;
  typedef int int_type;

  static const int signedness = 1;
  static const int precision = wi::int_traits<T>::precision;
  static const int rank = precision * 2 / 8;
};


template<typename T1, typename T2>
struct poly_coeff_pair_traits
{
# 118 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  static const bool lossless_p = (poly_coeff_traits<T1>::signedness
      == poly_coeff_traits<T2>::signedness
      ? (poly_coeff_traits<T1>::precision
         >= poly_coeff_traits<T2>::precision)
      : (poly_coeff_traits<T1>::signedness == 1
         && poly_coeff_traits<T2>::signedness == 0
         && (poly_coeff_traits<T1>::precision
      > poly_coeff_traits<T2>::precision)));





  static const int result_kind
    = ((poly_coeff_traits<T1>::rank <= poly_coeff_traits<long>::rank
 && poly_coeff_traits<T2>::rank <= poly_coeff_traits<long>::rank)
       ? 0
       : (poly_coeff_traits<T1>::rank <= poly_coeff_traits<unsigned long>::rank
   && poly_coeff_traits<T2>::rank <= poly_coeff_traits<unsigned long>::rank)
       ? 1 : 2);

};



template<typename T1, typename T2, typename T3,
  bool lossless_p = poly_coeff_pair_traits<T1, T2>::lossless_p>
struct if_lossless;
template<typename T1, typename T2, typename T3>
struct if_lossless<T1, T2, T3, true>
{
  typedef T3 type;
};
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T>
struct poly_int_traits
{
  static const bool is_poly = false;
  static const unsigned int num_coeffs = 1;
  typedef T coeff_type;
  typedef typename poly_coeff_traits<T>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int_pod<N, C> >
{
  static const bool is_poly = true;
  static const unsigned int num_coeffs = N;
  typedef C coeff_type;
  typedef typename poly_coeff_traits<C>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int<N, C> > : poly_int_traits<poly_int_pod<N, C> >
{
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_nonpoly {};
template<typename T1, typename T2>
struct if_nonpoly<T1, T2, false>
{
  typedef T2 type;
};



template<typename T1, typename T2, typename T3,
  bool is_poly1 = poly_int_traits<T1>::is_poly,
  bool is_poly2 = poly_int_traits<T2>::is_poly>
struct if_nonpoly2 {};
template<typename T1, typename T2, typename T3>
struct if_nonpoly2<T1, T2, T3, false, false>
{
  typedef T3 type;
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_poly {};
template<typename T1, typename T2>
struct if_poly<T1, T2, true>
{
  typedef T2 type;
};
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2 = T1,
  int result_kind = poly_coeff_pair_traits<T1, T2>::result_kind>
struct poly_result;


template<typename T1, typename T2>
struct poly_result<T1, T2, 0>
{
  typedef long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 1>
{
  typedef unsigned long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 2>
{
  typedef typename wi::binary_traits <T1, T2>::result_type type;


  typedef const T1 &cast;
};
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename C>
struct poly_int_pod
{
public:
  template<typename Ca>
  poly_int_pod &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int_pod &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int_pod &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator *= (const Ca &);

  poly_int_pod &operator <<= (unsigned int);

  bool is_constant () const;

  template<typename T>
  typename if_lossless<T, C, bool>::type is_constant (T *) const;

  C to_constant () const;

  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, unsigned int,
         signop);
  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, signop);

  bool to_shwi (poly_int_pod<N, long> *) const;
  bool to_uhwi (poly_int_pod<N, unsigned long> *) const;
  poly_int<N, long> force_shwi () const;
  poly_int<N, unsigned long> force_uhwi () const;


  operator C () const;


  C coeffs[N];
};

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator = (const Ca &a)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = a) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (a)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::is_constant () const
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (this->coeffs[i] != 0)
 return false;
  return true;
}




template<unsigned int N, typename C>
template<typename T>
inline typename if_lossless<T, C, bool>::type
poly_int_pod<N, C>::is_constant (T *const_value) const
{
  if (is_constant ())
    {
      *const_value = this->coeffs[0];
      return true;
    }
  return false;
}







template<unsigned int N, typename C>
inline C
poly_int_pod<N, C>::to_constant () const
{
  ((void)(!(is_constant ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 504, __FUNCTION__), 0 : 0));
  return this->coeffs[0];
}





template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a,
     unsigned int bitsize, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], bitsize, sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], bitsize, sgn))));
  return r;
}




template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], sgn))));
  return r;
}





template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_shwi (poly_int_pod<N, long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_shwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_shwi ();
  return true;
}






template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_uhwi (poly_int_pod<N, unsigned long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_uhwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_uhwi ();
  return true;
}




template<unsigned int N, typename C>
inline poly_int<N, long>
poly_int_pod<N, C>::force_shwi () const
{
  poly_int_pod<N, long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_shwi ();
  return r;
}




template<unsigned int N, typename C>
inline poly_int<N, unsigned long>
poly_int_pod<N, C>::force_uhwi () const
{
  poly_int_pod<N, unsigned long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_uhwi ();
  return r;
}




template<unsigned int N, typename C>
inline
poly_int_pod<N, C>::operator C () const
{
  ((void)(!(this->is_constant ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 604, __FUNCTION__), 0 : 0));
  return this->coeffs[0];
}




template<unsigned int N, typename C>
class poly_int : public poly_int_pod<N, C>
{
public:
  poly_int () {}

  template<typename Ca>
  poly_int (const poly_int<N, Ca> &);
  template<typename Ca>
  poly_int (const poly_int_pod<N, Ca> &);
  template<typename C0>
  poly_int (const C0 &);
  template<typename C0, typename C1>
  poly_int (const C0 &, const C1 &);

  template<typename Ca>
  poly_int &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator *= (const Ca &);

  poly_int &operator <<= (unsigned int);
};

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename C0>
inline
poly_int<N, C>::poly_int (const C0 &c0)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename C0, typename C1>
inline
poly_int<N, C>::poly_int (const C0 &c0, const C1 &c1)
{
  static_assert ((N >= 2), "N >= 2");
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[1] = c1) : (void) ((*this).coeffs[1].~C (), new (&(*this).coeffs[1]) C (c1)));
  for (unsigned int i = 2; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] = a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator = (const Ca &a)
{
  this->coeffs[0] = a;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      this->coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0]);
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int<N, C>&
poly_int<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const Ca &a, const Cb &b, const Cc &c)
{
  return a >= b && a <= c;
}

template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const poly_int_pod<N, Ca> &a, const Cb &b, const Cc &c)
{
  for (unsigned int i = 0; i < N; i++)
    if (a.coeffs[i] < b || a.coeffs[i] > c)
      return false;
  return true;
}

namespace wi {


template<unsigned int N>
inline poly_int<N, hwi_with_prec>
shwi (const poly_int_pod<N, long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::shwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::shwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N>
inline poly_int<N, hwi_with_prec>
uhwi (const poly_int_pod<N, unsigned long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::uhwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::uhwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
sext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sext (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
zext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::zext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::zext (a.coeffs[i], precision))));
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator + (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) + b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) + b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator + (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) + b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) + b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator + (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a + NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a + NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator - (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) - b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) - b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator - (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) - b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) - b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator - (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a - NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a - NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator - (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCa (a.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::neg (a.coeffs[0], overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::neg (a.coeffs[0], overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i], &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i], &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator ~ (const poly_int_pod<N, Ca> &a)
{
  if (N >= 2)
    return -1 - a;
  return ~a.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator * (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) * b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) * b)));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator * (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a) * b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a) * b.coeffs[i])));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a, b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a, b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::mul (a.coeffs[0], b, sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::mul (a.coeffs[0], b, sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b, sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b, sgn, &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator << (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) << b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) << b)));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
lshift (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::lshift (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::lshift (a.coeffs[i], b))));
  return r;
}
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b0, const Cb &b1)
{
  if (a1 != b1)







    return (a1 < b1
     ? b0 <= a0 && (a0 - b0) % (b1 - a1) == 0
     : b0 >= a0 && (b0 - a0) % (a1 - b1) == 0);
  return a0 == b0;
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b)
{
  if (a1 != 0)






    return (a1 < 0
     ? b <= a0 && (a0 - b) % a1 == 0
     : b >= a0 && (b - a0) % a1 == 0);
  return a0 == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_eq (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b.coeffs[0], b.coeffs[1]);
  return a.coeffs[0] == b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_eq (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b);
  return a.coeffs[0] == b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_eq (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (b.coeffs[0], b.coeffs[1], a);
  return a == b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_eq (const Ca &a, const Cb &b)
{
  return a == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_ne (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != b.coeffs[i])
 return true;
  return a.coeffs[0] != b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_ne (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != 0)
 return true;
  return a.coeffs[0] != b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_ne (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] != 0)
 return true;
  return a != b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_ne (const Ca &a, const Cb &b)
{
  return a != b;
}
# 1312 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_le (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] <= b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_le (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] <= b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_le (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a <= b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_le (const Ca &a, const Cb &b)
{
  return a <= b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_lt (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] < b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_lt (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] < b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_lt (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a < b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_lt (const Ca &a, const Cb &b)
{
  return a < b;
}
# 1414 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2>
inline bool
ordered_p (const T1 &a, const T2 &b)
{
  return ((poly_int_traits<T1>::num_coeffs == 1
    && poly_int_traits<T2>::num_coeffs == 1)
   || (!maybe_lt (b, a))
   || (!maybe_lt (a, b)));
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1439, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_min (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1453, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1467, __FUNCTION__), 0 : 0));
      return b;
    }
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1487, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_max (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1501, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1515, __FUNCTION__), 0 : 0));
      return a;
    }
}




template<unsigned int N, typename Ca>
inline Ca
constant_lower_bound (const poly_int_pod<N, Ca> &a)
{
  ((void)(!((!maybe_lt (a, typename poly_int_traits<Ca>::int_type (0)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1527, __FUNCTION__), 0 : 0));
  return a.coeffs[0];
}



template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_lower_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (a, b)))
    return a.coeffs[0];
  return b;
}




template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_upper_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a.coeffs[0];
  return b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
lower_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return lower_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}

template<typename Ca, typename Cb>
inline typename poly_result<typename if_nonpoly<Ca>::type, typename if_nonpoly<Cb>::type>::type
lower_bound (const Ca &a, const Cb &b)
{
  return a < b ? a : b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
upper_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return upper_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
coeff_gcd (const poly_int_pod<N, Ca> &a)
{

  unsigned int i;
  for (i = N - 1; i > 0; --i)
    if (a.coeffs[i] != 0)
      break;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[i];
  for (unsigned int j = 0; j < i; ++j)
    if (a.coeffs[j] != 0)
      r = gcd (r, C (a.coeffs[j]));
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
common_multiple (const poly_int_pod<N, Ca> &a, Cb b)
{
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type xgcd = coeff_gcd (a);
  return a * (least_common_multiple (xgcd, b) / xgcd);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
common_multiple (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return common_multiple (b, a);
}
# 1692 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, Cb>::type>
force_common_multiple (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return common_multiple (a, b.coeffs[0]);
  if (a.is_constant ())
    return common_multiple (a.coeffs[0], b);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Ca>::int_type ICa;

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] != ICa (0))
      {
 C lcm = least_common_multiple (NCa (a.coeffs[i]), NCb (b.coeffs[i]));
 C amul = lcm / a.coeffs[i];
 C bmul = lcm / b.coeffs[i];
 for (unsigned int j = 0; j < N; ++j)
   ((void)(!(a.coeffs[j] * amul == b.coeffs[j] * bmul) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1714, __FUNCTION__), 0 : 0));
 return a * amul;
      }
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1717, __FUNCTION__));
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline int
compare_sizes_for_sort (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b)
{
  for (unsigned int i = N; i-- > 0; )
    if (a.coeffs[i] != b.coeffs[i])
      return a.coeffs[i] < b.coeffs[i] ? -1 : 1;
  return 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_p (const poly_int_pod<N, Ca> &value, Cb align)
{
  for (unsigned int i = 1; i < N; i++)
    if ((value.coeffs[i] & (align - 1)) != 0)
      return false;
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_up (const poly_int_pod<N, Ca> &value, Cb align,
       poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value + (-value.coeffs[0] & (align - 1));
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_down (const poly_int_pod<N, Ca> &value, Cb align,
  poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value - (value.coeffs[0] & (align - 1));
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_up (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b,
       Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_up (a, align, &aligned_a)
   && can_align_up (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_down (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b,
         Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_down (a, align, &aligned_a)
   && can_align_down (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1827, __FUNCTION__), 0 : 0));
  return value + (-value.coeffs[0] & (align - 1));
}
# 1838 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1842, __FUNCTION__), 0 : 0));
  return value - (value.coeffs[0] & (align - 1));
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_lower_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)


    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] - (value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] - (value.coeffs[i] & (align - 1))))))
                                             ;
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_upper_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] + (-value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] + (-value.coeffs[i] & (align - 1))))))
                                              ;
  return r;
}
# 1886 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1890, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}
# 1910 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1914, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
known_misalignment (const poly_int_pod<N, Ca> &value, Cb align, Cm *misalign)
{
  ((void)(!(align != 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1934, __FUNCTION__), 0 : 0));
  if (!can_align_p (value, align))
    return false;
  *misalign = value.coeffs[0] & (align - 1);
  return true;
}





template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
force_get_misalignment (const poly_int_pod<N, Ca> &a, Cb align)
{
  ((void)(!(can_align_p (a, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1949, __FUNCTION__), 0 : 0));
  return a.coeffs[0] & (align - 1);
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
known_alignment (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[0];
  for (unsigned int i = 1; i < N; ++i)
    r |= a.coeffs[i];
  return r & -r;
}




template<unsigned int N, typename Ca, typename Cb, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_ior_p (const poly_int_pod<N, Ca> &a, Cb b, Cr *result)
{


  typedef typename poly_int_traits<Ca>::int_type int_type;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if ((-(a.coeffs[i] & -a.coeffs[i]) & b) != int_type (0))
 return false;
  *result = a;
  result->coeffs[0] |= b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
constant_multiple_p (const poly_int_pod<N, Ca> &a, Cb b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  if (NCa (a.coeffs[0]) % NCb (b) != 0 || !a.is_constant ())
    return false;
  *multiple = NCa (a.coeffs[0]) / NCb (b);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
constant_multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type int_type;



  if (NCa (a) % NCb (b.coeffs[0]) != 0
      || (a != int_type (0) && !b.is_constant ()))
    return false;
  *multiple = NCa (a) / NCb (b.coeffs[0]);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
constant_multiple_p (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;

  if (NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0)
    return false;

  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    if (b.coeffs[i] == ICb (0)
 ? a.coeffs[i] != ICa (0)
 : (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0
    || NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != r))
      return false;

  *multiple = r;
  return true;
}



template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b)
{
  return a % b == 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b)
{
  for (unsigned int i = 0; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  return true;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_int_traits<Ca>::int_type int_type;



  return a % b.coeffs[0] == 0 && (a == int_type (0) || b.is_constant ());
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0]);
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type tmp;
  return constant_multiple_p (a, b, &tmp);
}




template<typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b, Cm *multiple)
{
  if (a % b != 0)
    return false;
  *multiple = a / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b, poly_int_pod<N, Cm> *multiple)
{
  if (!multiple_p (a, b))
    return false;
  for (unsigned int i = 0; i < N; ++i)
    multiple->coeffs[i] = a.coeffs[i] / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;



  if (a % b.coeffs[0] != 0 || (NCa (a) != 0 && !b.is_constant ()))
    return false;
  *multiple = a / b.coeffs[0];
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     poly_int_pod<N, Cm> *multiple)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0], multiple);
  return constant_multiple_p (a, b, multiple);
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
exact_div (const poly_int_pod<N, Ca> &a, Cb b)
{
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    {
      ((void)(!(a.coeffs[i] % b == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2162, __FUNCTION__), 0 : 0));
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = a.coeffs[i] / b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (a.coeffs[i] / b)));
    }
  return r;
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
exact_div (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return exact_div (a, b.coeffs[0]);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Cb>::int_type int_type;

  ((void)(!(a.coeffs[0] % b.coeffs[0] == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2182, __FUNCTION__), 0 : 0));
  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    ((void)(!(b.coeffs[i] == int_type (0) ? a.coeffs[i] == int_type (0) : (a.coeffs[i] % b.coeffs[i] == 0 && NCa (a.coeffs[i]) / NCb (b.coeffs[i]) == r)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2185, __FUNCTION__), 0 : 0))


                                                      ;

  return r;
}
# 2201 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly2<Cb, Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b, Cq *quotient)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  Cq q = NCa (a.coeffs[0]) / NCb (b);
  if (!a.is_constant ())
    return false;
  *quotient = q;
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient)
{


  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  C q = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
# 2277 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  bool rem_p = NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0;
  for (unsigned int i = 1; i < N; ++i)
    {
      if (b.coeffs[i] == ICb (0))
 {

   if (a.coeffs[i] != ICa (0))
     return false;
 }
      else
 {
   if (q == 0)
     {

       if (a.coeffs[i] != ICa (0))
  {


    C neg_abs_a = (a.coeffs[i] < 0 ? a.coeffs[i] : -a.coeffs[i]);
    C neg_abs_b = (b.coeffs[i] < 0 ? b.coeffs[i] : -b.coeffs[i]);
    if (neg_abs_a < neg_abs_b)
      return false;
    rem_p = true;
  }
     }
   else
     {

       if (NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != q)
  return false;
       if (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0)
  rem_p = true;
     }
 }
    }




  if (rem_p && (!ordered_p (a, ICa (0)) || !ordered_p (b, ICb (0))))
    return false;

  *quotient = q;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a - *quotient * b;
  return true;
}
# 2345 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient)
{

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  for (unsigned int i = 0; i < N; ++i)
    quotient->coeffs[i] = a.coeffs[i] / b;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a.coeffs[0] % b;
  return true;
}







template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline bool
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   poly_int_pod<N, Cq> *quotient)
{
  if (b.is_constant ())
    return can_div_trunc_p (a, b.coeffs[0], quotient);
  if (!can_div_trunc_p (a, b, &quotient->coeffs[0]))
    return false;
  for (unsigned int i = 1; i < N; ++i)
    quotient->coeffs[i] = 0;
  return true;
}
# 2401 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_away_from_zero_p (const poly_int_pod<N, Ca> &a,
     const poly_int_pod<N, Cb> &b,
     Cq *quotient)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  if (maybe_ne (*quotient * b, a))
    *quotient += (*quotient < 0 ? -1 : 1);
  return true;
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file, signop sgn)
{
  if (value.is_constant ())
    print_dec (value.coeffs[0], file, sgn);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_dec (value.coeffs[i], file, sgn);
   fputc (i == N - 1 ? ']' : ',', file);
 }
    }
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file)
{
  static_assert ((poly_coeff_traits<C>::signedness >= 0), "poly_coeff_traits<C>::signedness >= 0");
  print_dec (value, file,
      poly_coeff_traits<C>::signedness ? SIGNED : UNSIGNED);
}



template<unsigned int N, typename C>
void
print_hex (const poly_int_pod<N, C> &value, FILE *file)
{
  if (value.is_constant ())
    print_hex (value.coeffs[0], file);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_hex (value.coeffs[i], file);
   fputc (i == N - 1 ? ']' : ',', file);
 }
    }
}
# 2482 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2,
  typename Res = typename poly_result<typename poly_int_traits<typename poly_result<typename poly_int_traits<T1>::coeff_type, typename poly_int_traits<T2>::coeff_type>::type>::coeff_type, typename poly_int_traits<unsigned long>::coeff_type>::type
                               >
struct poly_span_traits
{
  template<typename T>
  static const T &cast (const T &x) { return x; }
};

template<typename T1, typename T2>
struct poly_span_traits<T1, T2, unsigned long>
{
  template<typename T>
  static typename if_nonpoly<T, unsigned long>::type
  cast (const T &x) { return x; }

  template<unsigned int N, typename T>
  static poly_int<N, unsigned long>
  cast (const poly_int_pod<N, T> &x) { return x; }
};




template<typename T>
inline bool
known_size_p (const T &a)
{
  return maybe_ne (a, typename poly_int_traits<T>::int_type (-1));
}





template<typename T1, typename T2, typename T3>
inline bool
maybe_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  if ((!maybe_le (pos, val)))
    return false;
  if (!known_size_p (size))
    return true;
  if ((poly_int_traits<T1>::num_coeffs > 1
       || poly_int_traits<T2>::num_coeffs > 1)
      && maybe_lt (val, pos))


    return true;
  return maybe_lt (start_span::cast (val) - start_span::cast (pos),
     size_span::cast (size));
}





template<typename T1, typename T2, typename T3>
inline bool
known_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  return (known_size_p (size)
   && (!maybe_lt (val, pos))
   && (!maybe_le (size_span::cast (size), start_span::cast (val) - start_span::cast (pos)))
                                );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_maybe_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  if (maybe_in_range_p (pos2, pos1, size1))
    return maybe_ne (size2, typename poly_int_traits<T4>::int_type (0));
  if (maybe_in_range_p (pos1, pos2, size2))
    return maybe_ne (size1, typename poly_int_traits<T2>::int_type (0));
  return false;
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_known_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T2> size1_span;
  typedef poly_span_traits<T4, T4> size2_span;
# 2593 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  return (known_size_p (size1)
   && known_size_p (size2)
   && (!maybe_le (size1_span::cast (size1), start_span::cast (pos2) - start_span::cast (lower_bound (pos1, pos2))))


   && (!maybe_le (size2_span::cast (size2), start_span::cast (pos1) - start_span::cast (lower_bound (pos1, pos2))))

                                  );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
known_subrange_p (const T1 &pos1, const T2 &size1,
    const T3 &pos2, const T4 &size2)
{
  typedef typename poly_int_traits<T2>::coeff_type C2;
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T4> size_span;
  return ((!maybe_le (size1, typename poly_int_traits<T2>::int_type (0)))
   && (poly_coeff_traits<C2>::signedness > 0
       || known_size_p (size1))
   && known_size_p (size2)
   && (!maybe_lt (pos1, pos2))
   && (!maybe_lt (size2, size1))
   && (!maybe_lt (size_span::cast (size2) - size_span::cast (size1), start_span::cast (pos1) - start_span::cast (pos2)))
                                                           );
}





template<typename T>
inline typename if_nonpoly<T, bool>::type
endpoint_representable_p (const T &pos, const T &size)
{
  return (!known_size_p (size)
   || pos <= poly_coeff_traits<T>::max_value - size);
}

template<unsigned int N, typename C>
inline bool
endpoint_representable_p (const poly_int_pod<N, C> &pos,
     const poly_int_pod<N, C> &size)
{
  if (known_size_p (size))
    for (unsigned int i = 0; i < N; ++i)
      if (pos.coeffs[i] > poly_coeff_traits<C>::max_value - size.coeffs[i])
 return false;
  return true;
}

template<unsigned int N, typename C>
void
gt_ggc_mx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *, void (*) (void *, void *), void *)
{
}
# 467 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h"
typedef poly_int_pod<1, unsigned short> poly_uint16_pod;
typedef poly_int_pod<1, long> poly_int64_pod;
typedef poly_int_pod<1,
       unsigned long> poly_uint64_pod;
typedef poly_int_pod<1, offset_int> poly_offset_int_pod;
typedef poly_int_pod<1, wide_int> poly_wide_int_pod;
typedef poly_int_pod<1, widest_int> poly_widest_int_pod;

typedef poly_int<1, unsigned short> poly_uint16;
typedef poly_int<1, long> poly_int64;
typedef poly_int<1, unsigned long> poly_uint64;
typedef poly_int<1, offset_int> poly_offset_int;
typedef poly_int<1, wide_int> poly_wide_int;
typedef poly_int<1, wide_int_ref> poly_wide_int_ref;
typedef poly_int<1, widest_int> poly_widest_int;
# 468 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "./insn-modes-inline.h" 1
# 10 "./insn-modes-inline.h"
inline __attribute__((__always_inline__))



poly_uint16
mode_size_inline (machine_mode mode)
{
  extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 18, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 2;
    case E_CP2QImode: return 4;
    case E_CHImode: return 4;
    case E_CP2HImode: return 8;
    case E_CSImode: return 8;
    case E_CDImode: return 16;
    case E_CTImode: return 32;
    case E_CPOImode: return 64;
    case E_COImode: return 64;
    case E_CXImode: return 128;
    case E_SCmode: return 8;
    case E_DCmode: return 16;
    case E_TCmode: return 32;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 4;
    case E_V1SImode: return 4;
    case E_V8QImode: return 8;
    case E_V4HImode: return 8;
    case E_V2SImode: return 8;
    case E_V1DImode: return 8;
    case E_V12QImode: return 12;
    case E_V6HImode: return 12;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 16;
    case E_V4SImode: return 16;
    case E_V2DImode: return 16;
    case E_V1TImode: return 16;
    case E_V32QImode: return 32;
    case E_V16HImode: return 32;
    case E_V8SImode: return 32;
    case E_V4DImode: return 32;
    case E_V2TImode: return 32;
    case E_V64QImode: return 64;
    case E_V32HImode: return 64;
    case E_V16SImode: return 64;
    case E_V8DImode: return 64;
    case E_V4TImode: return 64;
    case E_V128QImode: return 128;
    case E_V64HImode: return 128;
    case E_V32SImode: return 128;
    case E_V16DImode: return 128;
    case E_V8TImode: return 128;
    case E_V64SImode: return 256;
    case E_V2SFmode: return 8;
    case E_V4SFmode: return 16;
    case E_V2DFmode: return 16;
    case E_V8SFmode: return 32;
    case E_V4DFmode: return 32;
    case E_V2TFmode: return 32;
    case E_V16SFmode: return 64;
    case E_V8DFmode: return 64;
    case E_V4TFmode: return 64;
    case E_V32SFmode: return 128;
    case E_V16DFmode: return 128;
    case E_V8TFmode: return 128;
    case E_V64SFmode: return 256;
    case E_V32DFmode: return 256;
    case E_V16TFmode: return 256;
    default: return mode_size[mode];
    }
}


inline __attribute__((__always_inline__))



poly_uint16
mode_nunits_inline (machine_mode mode)
{
  extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 1;
    case E_CCGCmode: return 1;
    case E_CCGOCmode: return 1;
    case E_CCNOmode: return 1;
    case E_CCGZmode: return 1;
    case E_CCAmode: return 1;
    case E_CCCmode: return 1;
    case E_CCOmode: return 1;
    case E_CCPmode: return 1;
    case E_CCSmode: return 1;
    case E_CCZmode: return 1;
    case E_CCFPmode: return 1;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 1;
    case E_SImode: return 1;
    case E_DImode: return 1;
    case E_TImode: return 1;
    case E_OImode: return 1;
    case E_XImode: return 1;
    case E_P2QImode: return 1;
    case E_P2HImode: return 1;
    case E_POImode: return 1;
    case E_QQmode: return 1;
    case E_HQmode: return 1;
    case E_SQmode: return 1;
    case E_DQmode: return 1;
    case E_TQmode: return 1;
    case E_UQQmode: return 1;
    case E_UHQmode: return 1;
    case E_USQmode: return 1;
    case E_UDQmode: return 1;
    case E_UTQmode: return 1;
    case E_HAmode: return 1;
    case E_SAmode: return 1;
    case E_DAmode: return 1;
    case E_TAmode: return 1;
    case E_UHAmode: return 1;
    case E_USAmode: return 1;
    case E_UDAmode: return 1;
    case E_UTAmode: return 1;
    case E_SFmode: return 1;
    case E_DFmode: return 1;
    case E_XFmode: return 1;
    case E_TFmode: return 1;
    case E_SDmode: return 1;
    case E_DDmode: return 1;
    case E_TDmode: return 1;
    case E_CQImode: return 2;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 2;
    case E_CSImode: return 2;
    case E_CDImode: return 2;
    case E_CTImode: return 2;
    case E_CPOImode: return 2;
    case E_COImode: return 2;
    case E_CXImode: return 2;
    case E_SCmode: return 2;
    case E_DCmode: return 2;
    case E_XCmode: return 2;
    case E_TCmode: return 2;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 2;
    case E_V1SImode: return 1;
    case E_V8QImode: return 8;
    case E_V4HImode: return 4;
    case E_V2SImode: return 2;
    case E_V1DImode: return 1;
    case E_V12QImode: return 12;
    case E_V6HImode: return 6;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 8;
    case E_V4SImode: return 4;
    case E_V2DImode: return 2;
    case E_V1TImode: return 1;
    case E_V32QImode: return 32;
    case E_V16HImode: return 16;
    case E_V8SImode: return 8;
    case E_V4DImode: return 4;
    case E_V2TImode: return 2;
    case E_V64QImode: return 64;
    case E_V32HImode: return 32;
    case E_V16SImode: return 16;
    case E_V8DImode: return 8;
    case E_V4TImode: return 4;
    case E_V128QImode: return 128;
    case E_V64HImode: return 64;
    case E_V32SImode: return 32;
    case E_V16DImode: return 16;
    case E_V8TImode: return 8;
    case E_V64SImode: return 64;
    case E_V2SFmode: return 2;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 2;
    case E_V8SFmode: return 8;
    case E_V4DFmode: return 4;
    case E_V2TFmode: return 2;
    case E_V16SFmode: return 16;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 4;
    case E_V32SFmode: return 32;
    case E_V16DFmode: return 16;
    case E_V8TFmode: return 8;
    case E_V64SFmode: return 64;
    case E_V32DFmode: return 32;
    case E_V16TFmode: return 16;
    default: return mode_nunits[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_inner_inline (machine_mode mode)
{
  extern const unsigned char mode_inner[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 269, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return E_VOIDmode;
    case E_BLKmode: return E_BLKmode;
    case E_CCmode: return E_CCmode;
    case E_CCGCmode: return E_CCGCmode;
    case E_CCGOCmode: return E_CCGOCmode;
    case E_CCNOmode: return E_CCNOmode;
    case E_CCGZmode: return E_CCGZmode;
    case E_CCAmode: return E_CCAmode;
    case E_CCCmode: return E_CCCmode;
    case E_CCOmode: return E_CCOmode;
    case E_CCPmode: return E_CCPmode;
    case E_CCSmode: return E_CCSmode;
    case E_CCZmode: return E_CCZmode;
    case E_CCFPmode: return E_CCFPmode;
    case E_BImode: return E_BImode;
    case E_QImode: return E_QImode;
    case E_HImode: return E_HImode;
    case E_SImode: return E_SImode;
    case E_DImode: return E_DImode;
    case E_TImode: return E_TImode;
    case E_OImode: return E_OImode;
    case E_XImode: return E_XImode;
    case E_P2QImode: return E_P2QImode;
    case E_P2HImode: return E_P2HImode;
    case E_POImode: return E_POImode;
    case E_QQmode: return E_QQmode;
    case E_HQmode: return E_HQmode;
    case E_SQmode: return E_SQmode;
    case E_DQmode: return E_DQmode;
    case E_TQmode: return E_TQmode;
    case E_UQQmode: return E_UQQmode;
    case E_UHQmode: return E_UHQmode;
    case E_USQmode: return E_USQmode;
    case E_UDQmode: return E_UDQmode;
    case E_UTQmode: return E_UTQmode;
    case E_HAmode: return E_HAmode;
    case E_SAmode: return E_SAmode;
    case E_DAmode: return E_DAmode;
    case E_TAmode: return E_TAmode;
    case E_UHAmode: return E_UHAmode;
    case E_USAmode: return E_USAmode;
    case E_UDAmode: return E_UDAmode;
    case E_UTAmode: return E_UTAmode;
    case E_SFmode: return E_SFmode;
    case E_DFmode: return E_DFmode;
    case E_XFmode: return E_XFmode;
    case E_TFmode: return E_TFmode;
    case E_SDmode: return E_SDmode;
    case E_DDmode: return E_DDmode;
    case E_TDmode: return E_TDmode;
    case E_CQImode: return E_QImode;
    case E_CP2QImode: return E_P2QImode;
    case E_CHImode: return E_HImode;
    case E_CP2HImode: return E_P2HImode;
    case E_CSImode: return E_SImode;
    case E_CDImode: return E_DImode;
    case E_CTImode: return E_TImode;
    case E_CPOImode: return E_POImode;
    case E_COImode: return E_OImode;
    case E_CXImode: return E_XImode;
    case E_SCmode: return E_SFmode;
    case E_DCmode: return E_DFmode;
    case E_XCmode: return E_XFmode;
    case E_TCmode: return E_TFmode;
    case E_V2QImode: return E_QImode;
    case E_V4QImode: return E_QImode;
    case E_V2HImode: return E_HImode;
    case E_V1SImode: return E_SImode;
    case E_V8QImode: return E_QImode;
    case E_V4HImode: return E_HImode;
    case E_V2SImode: return E_SImode;
    case E_V1DImode: return E_DImode;
    case E_V12QImode: return E_QImode;
    case E_V6HImode: return E_HImode;
    case E_V14QImode: return E_QImode;
    case E_V16QImode: return E_QImode;
    case E_V8HImode: return E_HImode;
    case E_V4SImode: return E_SImode;
    case E_V2DImode: return E_DImode;
    case E_V1TImode: return E_TImode;
    case E_V32QImode: return E_QImode;
    case E_V16HImode: return E_HImode;
    case E_V8SImode: return E_SImode;
    case E_V4DImode: return E_DImode;
    case E_V2TImode: return E_TImode;
    case E_V64QImode: return E_QImode;
    case E_V32HImode: return E_HImode;
    case E_V16SImode: return E_SImode;
    case E_V8DImode: return E_DImode;
    case E_V4TImode: return E_TImode;
    case E_V128QImode: return E_QImode;
    case E_V64HImode: return E_HImode;
    case E_V32SImode: return E_SImode;
    case E_V16DImode: return E_DImode;
    case E_V8TImode: return E_TImode;
    case E_V64SImode: return E_SImode;
    case E_V2SFmode: return E_SFmode;
    case E_V4SFmode: return E_SFmode;
    case E_V2DFmode: return E_DFmode;
    case E_V8SFmode: return E_SFmode;
    case E_V4DFmode: return E_DFmode;
    case E_V2TFmode: return E_TFmode;
    case E_V16SFmode: return E_SFmode;
    case E_V8DFmode: return E_DFmode;
    case E_V4TFmode: return E_TFmode;
    case E_V32SFmode: return E_SFmode;
    case E_V16DFmode: return E_DFmode;
    case E_V8TFmode: return E_TFmode;
    case E_V64SFmode: return E_SFmode;
    case E_V32DFmode: return E_DFmode;
    case E_V16TFmode: return E_TFmode;
    default: return mode_inner[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_unit_size_inline (machine_mode mode)
{
  extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 396, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 1;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 4;
    case E_CSImode: return 4;
    case E_CDImode: return 8;
    case E_CTImode: return 16;
    case E_CPOImode: return 32;
    case E_COImode: return 32;
    case E_CXImode: return 64;
    case E_SCmode: return 4;
    case E_DCmode: return 8;
    case E_TCmode: return 16;
    case E_V2QImode: return 1;
    case E_V4QImode: return 1;
    case E_V2HImode: return 2;
    case E_V1SImode: return 4;
    case E_V8QImode: return 1;
    case E_V4HImode: return 2;
    case E_V2SImode: return 4;
    case E_V1DImode: return 8;
    case E_V12QImode: return 1;
    case E_V6HImode: return 2;
    case E_V14QImode: return 1;
    case E_V16QImode: return 1;
    case E_V8HImode: return 2;
    case E_V4SImode: return 4;
    case E_V2DImode: return 8;
    case E_V1TImode: return 16;
    case E_V32QImode: return 1;
    case E_V16HImode: return 2;
    case E_V8SImode: return 4;
    case E_V4DImode: return 8;
    case E_V2TImode: return 16;
    case E_V64QImode: return 1;
    case E_V32HImode: return 2;
    case E_V16SImode: return 4;
    case E_V8DImode: return 8;
    case E_V4TImode: return 16;
    case E_V128QImode: return 1;
    case E_V64HImode: return 2;
    case E_V32SImode: return 4;
    case E_V16DImode: return 8;
    case E_V8TImode: return 16;
    case E_V64SImode: return 4;
    case E_V2SFmode: return 4;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 8;
    case E_V8SFmode: return 4;
    case E_V4DFmode: return 8;
    case E_V2TFmode: return 16;
    case E_V16SFmode: return 4;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 16;
    case E_V32SFmode: return 4;
    case E_V16DFmode: return 8;
    case E_V8TFmode: return 16;
    case E_V64SFmode: return 4;
    case E_V32DFmode: return 8;
    case E_V16TFmode: return 16;
    default: return mode_unit_size[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned short
mode_unit_precision_inline (machine_mode mode)
{
  extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 521, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4*(8);
    case E_CCGCmode: return 4*(8);
    case E_CCGOCmode: return 4*(8);
    case E_CCNOmode: return 4*(8);
    case E_CCGZmode: return 4*(8);
    case E_CCAmode: return 4*(8);
    case E_CCCmode: return 4*(8);
    case E_CCOmode: return 4*(8);
    case E_CCPmode: return 4*(8);
    case E_CCSmode: return 4*(8);
    case E_CCZmode: return 4*(8);
    case E_CCFPmode: return 4*(8);
    case E_BImode: return 1;
    case E_QImode: return 1*(8);
    case E_HImode: return 2*(8);
    case E_SImode: return 4*(8);
    case E_DImode: return 8*(8);
    case E_TImode: return 16*(8);
    case E_OImode: return 32*(8);
    case E_XImode: return 64*(8);
    case E_P2QImode: return 16;
    case E_P2HImode: return 32;
    case E_POImode: return 160;
    case E_QQmode: return 1*(8);
    case E_HQmode: return 2*(8);
    case E_SQmode: return 4*(8);
    case E_DQmode: return 8*(8);
    case E_TQmode: return 16*(8);
    case E_UQQmode: return 1*(8);
    case E_UHQmode: return 2*(8);
    case E_USQmode: return 4*(8);
    case E_UDQmode: return 8*(8);
    case E_UTQmode: return 16*(8);
    case E_HAmode: return 2*(8);
    case E_SAmode: return 4*(8);
    case E_DAmode: return 8*(8);
    case E_TAmode: return 16*(8);
    case E_UHAmode: return 2*(8);
    case E_USAmode: return 4*(8);
    case E_UDAmode: return 8*(8);
    case E_UTAmode: return 16*(8);
    case E_SFmode: return 4*(8);
    case E_DFmode: return 8*(8);
    case E_XFmode: return 80;
    case E_TFmode: return 16*(8);
    case E_SDmode: return 4*(8);
    case E_DDmode: return 8*(8);
    case E_TDmode: return 16*(8);
    case E_CQImode: return 1*(8);
    case E_CP2QImode: return 16;
    case E_CHImode: return 2*(8);
    case E_CP2HImode: return 32;
    case E_CSImode: return 4*(8);
    case E_CDImode: return 8*(8);
    case E_CTImode: return 16*(8);
    case E_CPOImode: return 160;
    case E_COImode: return 32*(8);
    case E_CXImode: return 64*(8);
    case E_SCmode: return 4*(8);
    case E_DCmode: return 8*(8);
    case E_XCmode: return 80;
    case E_TCmode: return 16*(8);
    case E_V2QImode: return 1*(8);
    case E_V4QImode: return 1*(8);
    case E_V2HImode: return 2*(8);
    case E_V1SImode: return 4*(8);
    case E_V8QImode: return 1*(8);
    case E_V4HImode: return 2*(8);
    case E_V2SImode: return 4*(8);
    case E_V1DImode: return 8*(8);
    case E_V12QImode: return 1*(8);
    case E_V6HImode: return 2*(8);
    case E_V14QImode: return 1*(8);
    case E_V16QImode: return 1*(8);
    case E_V8HImode: return 2*(8);
    case E_V4SImode: return 4*(8);
    case E_V2DImode: return 8*(8);
    case E_V1TImode: return 16*(8);
    case E_V32QImode: return 1*(8);
    case E_V16HImode: return 2*(8);
    case E_V8SImode: return 4*(8);
    case E_V4DImode: return 8*(8);
    case E_V2TImode: return 16*(8);
    case E_V64QImode: return 1*(8);
    case E_V32HImode: return 2*(8);
    case E_V16SImode: return 4*(8);
    case E_V8DImode: return 8*(8);
    case E_V4TImode: return 16*(8);
    case E_V128QImode: return 1*(8);
    case E_V64HImode: return 2*(8);
    case E_V32SImode: return 4*(8);
    case E_V16DImode: return 8*(8);
    case E_V8TImode: return 16*(8);
    case E_V64SImode: return 4*(8);
    case E_V2SFmode: return 4*(8);
    case E_V4SFmode: return 4*(8);
    case E_V2DFmode: return 8*(8);
    case E_V8SFmode: return 4*(8);
    case E_V4DFmode: return 8*(8);
    case E_V2TFmode: return 16*(8);
    case E_V16SFmode: return 4*(8);
    case E_V8DFmode: return 8*(8);
    case E_V4TFmode: return 16*(8);
    case E_V32SFmode: return 4*(8);
    case E_V16DFmode: return 8*(8);
    case E_V8TFmode: return 16*(8);
    case E_V64SFmode: return 4*(8);
    case E_V32DFmode: return 8*(8);
    case E_V16TFmode: return 16*(8);
    default: return mode_unit_precision[mode];
    }
}
# 469 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
typedef opt_mode<machine_mode> opt_machine_mode;

extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_inner[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_wider[NUM_MACHINE_MODES];
extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];

template<typename T>
struct mode_traits
{
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
  typedef machine_mode from_int;
# 70 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
};

template<>
struct mode_traits<machine_mode>
{

  typedef machine_mode from_int;
};
# 89 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern const char * const mode_name[NUM_MACHINE_MODES];




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mode-classes.def" 1
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 2

enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FRACT, MODE_UFRACT, MODE_ACCUM, MODE_UACCUM, MODE_FLOAT, MODE_DECIMAL_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_BOOL, MODE_VECTOR_INT, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM, MODE_VECTOR_UACCUM, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };






extern const unsigned char mode_class[NUM_MACHINE_MODES];
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
class opt_mode
{
public:
  enum from_int { dummy = MAX_MACHINE_MODE };

  inline __attribute__ ((always_inline)) constexpr opt_mode () : m_mode (E_VOIDmode) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (const T &m) : m_mode (m) {}
  template<typename U>
  inline __attribute__ ((always_inline)) constexpr opt_mode (const U &m) : m_mode (T (m)) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (from_int m) : m_mode (machine_mode (m)) {}

  machine_mode else_void () const;
  machine_mode else_blk () const { return else_mode (E_BLKmode); }
  machine_mode else_mode (machine_mode) const;
  T require () const;

  bool exists () const;
  template<typename U> bool exists (U *) const;

  bool operator== (const T &m) const { return m_mode == m; }
  bool operator!= (const T &m) const { return m_mode != m; }

private:
  machine_mode m_mode;
};




template<typename T>
inline __attribute__ ((always_inline)) machine_mode
opt_mode<T>::else_void () const
{
  return m_mode;
}



template<typename T>
inline machine_mode
opt_mode<T>::else_mode (machine_mode fallback) const
{
  return m_mode == E_VOIDmode ? fallback : m_mode;
}



template<typename T>
inline T
opt_mode<T>::require () const
{
  ((void)(!(m_mode != E_VOIDmode) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 293, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m_mode);
}



template<typename T>
inline __attribute__ ((always_inline)) bool
opt_mode<T>::exists () const
{
  return m_mode != E_VOIDmode;
}



template<typename T>
template<typename U>
inline bool
opt_mode<T>::exists (U *mode) const
{
  if (m_mode != E_VOIDmode)
    {
      *mode = T (typename mode_traits<T>::from_int (m_mode));
      return true;
    }
  return false;
}



template<typename T>
struct pod_mode
{
  typedef typename mode_traits<T>::from_int from_int;
  typedef typename T::measurement_type measurement_type;

  machine_mode m_mode;
  inline __attribute__ ((always_inline)) constexpr
  operator machine_mode () const { return m_mode; }

  inline __attribute__ ((always_inline)) constexpr
  operator T () const { return from_int (m_mode); }

  inline __attribute__ ((always_inline)) pod_mode &operator = (const T &m) { m_mode = m; return *this; }
};



template<typename T>
inline bool
is_a (machine_mode m)
{
  return T::includes_p (m);
}

template<typename T, typename U>
inline bool
is_a (const opt_mode<U> &m)
{
  return T::includes_p (m.else_void ());
}



template<typename T>
inline T
as_a (machine_mode m)
{
  ((void)(!(T::includes_p (m)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 361, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m);
}

template<typename T, typename U>
inline T
as_a (const opt_mode<U> &m)
{
  return as_a <T> (m.else_void ());
}



template<typename T>
inline opt_mode<T>
dyn_cast (machine_mode m)
{
  if (T::includes_p (m))
    return T (typename mode_traits<T>::from_int (m));
  return opt_mode<T> ();
}

template<typename T, typename U>
inline opt_mode<T>
dyn_cast (const opt_mode<U> &m)
{
  return dyn_cast <T> (m.else_void ());
}




template<typename T, typename U>
inline bool
is_a (machine_mode m, U *result)
{
  if (T::includes_p (m))
    {
      *result = T (typename mode_traits<T>::from_int (m));
      return true;
    }
  return false;
}


class scalar_int_mode
{
public:
  typedef mode_traits<scalar_int_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_int_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_int_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_INT || ((enum mode_class) mode_class[m]) == MODE_PARTIAL_INT);
}


class scalar_float_mode
{
public:
  typedef mode_traits<scalar_float_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_float_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_float_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_float_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_FLOAT || ((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT);
}


class scalar_mode
{
public:
  typedef mode_traits<scalar_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_mode::includes_p (machine_mode m)
{
  switch (((enum mode_class) mode_class[m]))
    {
    case MODE_INT:
    case MODE_PARTIAL_INT:
    case MODE_FRACT:
    case MODE_UFRACT:
    case MODE_ACCUM:
    case MODE_UACCUM:
    case MODE_FLOAT:
    case MODE_DECIMAL_FLOAT:
      return true;
    default:
      return false;
    }
}


class complex_mode
{
public:
  typedef mode_traits<complex_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) complex_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  complex_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
complex_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_COMPLEX_INT || ((enum mode_class) mode_class[m]) == MODE_COMPLEX_FLOAT);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bytes (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_size_inline (mode) : mode_size[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bits (machine_mode mode)
{
  return mode_to_bytes (mode) * (8);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_precision (machine_mode mode)
{
  return mode_precision[mode];
}



inline __attribute__ ((always_inline)) scalar_mode
mode_to_inner (machine_mode mode)
{

  return scalar_mode::from_int (__builtin_constant_p (mode)
    ? mode_inner_inline (mode)
    : mode_inner[mode]);



}



inline __attribute__ ((always_inline)) unsigned char
mode_to_unit_size (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_size_inline (mode) : mode_unit_size[mode]);



}



inline __attribute__ ((always_inline)) unsigned short
mode_to_unit_precision (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_precision_inline (mode) : mode_unit_precision[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_nunits (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_nunits_inline (mode) : mode_nunits[mode]);



}
# 701 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern const unsigned char mode_ibit[NUM_MACHINE_MODES];



extern const unsigned char mode_fbit[NUM_MACHINE_MODES];





extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];
# 760 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_WIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_wider[m]);
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_2XWIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_2xwider[m]);
}


extern const unsigned char mode_complex[NUM_MACHINE_MODES];






class fixed_size_mode
{
public:
  typedef mode_traits<fixed_size_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) fixed_size_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const complex_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
fixed_size_mode::includes_p (machine_mode mode)
{
  return mode_to_bytes (mode).is_constant ();
}
# 841 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern opt_machine_mode mode_for_size (poly_uint64, enum mode_class, int);





inline opt_scalar_int_mode
int_mode_for_size (poly_uint64 size, int limit)
{
  return dyn_cast <scalar_int_mode> (mode_for_size (size, MODE_INT, limit));
}




inline opt_scalar_float_mode
float_mode_for_size (poly_uint64 size)
{
  return dyn_cast <scalar_float_mode> (mode_for_size (size, MODE_FLOAT, 0));
}



inline opt_scalar_float_mode
decimal_float_mode_for_size (unsigned int size)
{
  return dyn_cast <scalar_float_mode>
    (mode_for_size (size, MODE_DECIMAL_FLOAT, 0));
}

extern machine_mode smallest_mode_for_size (poly_uint64, enum mode_class);




inline scalar_int_mode
smallest_int_mode_for_size (poly_uint64 size)
{
  return as_a <scalar_int_mode> (smallest_mode_for_size (size, MODE_INT));
}

extern opt_scalar_int_mode int_mode_for_mode (machine_mode);
extern opt_machine_mode bitwise_mode_for_mode (machine_mode);
extern opt_machine_mode mode_for_vector (scalar_mode, poly_uint64);
extern opt_machine_mode related_vector_mode (machine_mode, scalar_mode,
          poly_uint64 = 0);
extern opt_machine_mode related_int_vector_mode (machine_mode);


class bit_field_mode_iterator
{
public:
  bit_field_mode_iterator (long, long,
      poly_int64, poly_int64,
      unsigned int, bool);
  bool next_mode (scalar_int_mode *);
  bool prefer_smaller_modes ();

private:
  opt_scalar_int_mode m_mode;


  long m_bitsize;
  long m_bitpos;
  poly_int64 m_bitregion_start;
  poly_int64 m_bitregion_end;
  unsigned int m_align;
  bool m_volatilep;
  int m_count;
};



extern bool get_best_mode (int, int, poly_uint64, poly_uint64, unsigned int,
      unsigned long, bool, scalar_int_mode *);



extern unsigned short mode_base_align[NUM_MACHINE_MODES];

extern unsigned get_mode_alignment (machine_mode);





extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];
# 939 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
inline T
get_narrowest_mode (T mode)
{
  return typename mode_traits<T>::from_int
    (class_narrowest_mode[((enum mode_class) mode_class[mode])]);
}




extern scalar_int_mode byte_mode;
extern scalar_int_mode word_mode;
extern scalar_int_mode ptr_mode;


extern void init_adjust_machine_modes (void);
# 964 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline bool
HWI_COMPUTABLE_MODE_P (machine_mode mode)
{
  machine_mode mme = mode;
  return ((((enum mode_class) mode_class[mme]) == MODE_INT || ((enum mode_class) mode_class[mme]) == MODE_PARTIAL_INT)
   && mode_to_precision (mme).coeffs[0] <= 64);
}

inline bool
HWI_COMPUTABLE_MODE_P (scalar_int_mode mode)
{
  return ((unsigned short) mode_to_precision (mode).coeffs[0]) <= 64;
}

struct int_n_data_t {

  unsigned int bitsize;
  scalar_int_mode_pod m;

};



extern bool int_n_enabled_p[1];
extern const int_n_data_t int_n_data[1];




template<typename T>
inline bool
is_int_mode (machine_mode mode, T *int_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_INT)
    {
      *int_mode = scalar_int_mode (scalar_int_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_float_mode (machine_mode mode, T *float_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_FLOAT)
    {
      *float_mode = scalar_float_mode (scalar_float_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_int_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_INT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_float_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_FLOAT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




inline bool
is_narrower_int_mode (machine_mode mode, scalar_int_mode limit)
{
  scalar_int_mode int_mode;
  return (is_a <scalar_int_mode> (mode, &int_mode)
   && ((unsigned short) mode_to_precision (int_mode).coeffs[0]) < ((unsigned short) mode_to_precision (limit).coeffs[0]));
}

namespace mode_iterator
{


  template<typename T>
  inline void
  start (opt_mode<T> *iter, enum mode_class mclass)
  {
    if (((machine_mode) class_narrowest_mode[mclass]) == E_VOIDmode)
      *iter = opt_mode<T> ();
    else
      *iter = as_a<T> (((machine_mode) class_narrowest_mode[mclass]));
  }

  inline void
  start (machine_mode *iter, enum mode_class mclass)
  {
    *iter = ((machine_mode) class_narrowest_mode[mclass]);
  }



  template<typename T>
  inline bool
  iterate_p (opt_mode<T> *iter)
  {
    return iter->exists ();
  }

  inline bool
  iterate_p (machine_mode *iter)
  {
    return *iter != E_VOIDmode;
  }




  template<typename T>
  inline void
  get_wider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_WIDER_MODE (iter->require ());
  }

  inline void
  get_wider (machine_mode *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).else_void ();
  }




  template<typename T>
  inline void
  get_known_wider (T *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).require ();
  }




  template<typename T>
  inline void
  get_2xwider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (iter->require ());
  }

  inline void
  get_2xwider (machine_mode *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (*iter).else_void ();
  }
}
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
void
gt_ggc_mx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *, void (*) (void *, void *), void *)
{
}
# 470 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h" 1
# 49 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
struct double_int
{







  static double_int from_uhwi (unsigned long cst);
  static double_int from_shwi (long cst);
  static double_int from_pair (long high, unsigned long low);



  static double_int from_buffer (const unsigned char *buffer, int len);





  static double_int mask (unsigned prec);
  static double_int max_value (unsigned int prec, bool uns);
  static double_int min_value (unsigned int prec, bool uns);



  double_int &operator ++ ();
  double_int &operator -- ();
  double_int &operator *= (double_int);
  double_int &operator += (double_int);
  double_int &operator -= (double_int);
  double_int &operator &= (double_int);
  double_int &operator ^= (double_int);
  double_int &operator |= (double_int);





  long to_shwi () const;
  unsigned long to_uhwi () const;



  bool fits_uhwi () const;
  bool fits_shwi () const;
  bool fits_hwi (bool uns) const;



  int trailing_zeros () const;
  int popcount () const;



  bool multiple_of (double_int, bool, double_int *) const;







  double_int set_bit (unsigned) const;
  double_int mul_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int wide_mul_with_sign (double_int, bool unsigned_p,
     double_int *higher, bool *overflow) const;
  double_int add_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int sub_with_overflow (double_int, bool *overflow) const;
  double_int neg_with_overflow (bool *overflow) const;

  double_int operator * (double_int) const;
  double_int operator + (double_int) const;
  double_int operator - (double_int) const;
  double_int operator - () const;
  double_int operator ~ () const;
  double_int operator & (double_int) const;
  double_int operator | (double_int) const;
  double_int operator ^ (double_int) const;
  double_int and_not (double_int) const;

  double_int lshift (long count) const;
  double_int lshift (long count, unsigned int prec, bool arith) const;
  double_int rshift (long count) const;
  double_int rshift (long count, unsigned int prec, bool arith) const;
  double_int alshift (long count, unsigned int prec) const;
  double_int arshift (long count, unsigned int prec) const;
  double_int llshift (long count, unsigned int prec) const;
  double_int lrshift (long count, unsigned int prec) const;
  double_int lrotate (long count, unsigned int prec) const;
  double_int rrotate (long count, unsigned int prec) const;





  double_int div (double_int, bool, unsigned) const;
  double_int sdiv (double_int, unsigned) const;
  double_int udiv (double_int, unsigned) const;
  double_int mod (double_int, bool, unsigned) const;
  double_int smod (double_int, unsigned) const;
  double_int umod (double_int, unsigned) const;
  double_int divmod_with_overflow (double_int, bool, unsigned,
       double_int *, bool *) const;
  double_int divmod (double_int, bool, unsigned, double_int *) const;
  double_int sdivmod (double_int, unsigned, double_int *) const;
  double_int udivmod (double_int, unsigned, double_int *) const;



  double_int ext (unsigned prec, bool uns) const;
  double_int zext (unsigned prec) const;
  double_int sext (unsigned prec) const;



  bool is_zero () const;
  bool is_one () const;
  bool is_minus_one () const;
  bool is_negative () const;

  int cmp (double_int b, bool uns) const;
  int ucmp (double_int b) const;
  int scmp (double_int b) const;

  bool ult (double_int b) const;
  bool ule (double_int b) const;
  bool ugt (double_int b) const;
  bool slt (double_int b) const;
  bool sle (double_int b) const;
  bool sgt (double_int b) const;

  double_int max (double_int b, bool uns);
  double_int smax (double_int b);
  double_int umax (double_int b);

  double_int min (double_int b, bool uns);
  double_int smin (double_int b);
  double_int umin (double_int b);

  bool operator == (double_int cst2) const;
  bool operator != (double_int cst2) const;



  unsigned long low;
  long high;

};
# 207 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_shwi (long cst)
{
  double_int r;
  r.low = (unsigned long) cst;
  r.high = cst < 0 ? -1 : 0;
  return r;
}
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_uhwi (unsigned long cst)
{
  double_int r;
  r.low = cst;
  r.high = 0;
  return r;
}

inline double_int
double_int::from_pair (long high, unsigned long low)
{
  double_int r;
  r.low = low;
  r.high = high;
  return r;
}

inline double_int &
double_int::operator ++ ()
{
  *this += (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator -- ()
{
  *this -= (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator &= (double_int b)
{
  *this = *this & b;
  return *this;
}

inline double_int &
double_int::operator ^= (double_int b)
{
  *this = *this ^ b;
  return *this;
}

inline double_int &
double_int::operator |= (double_int b)
{
  *this = *this | b;
  return *this;
}




inline long
double_int::to_shwi () const
{
  return (long) low;
}




inline unsigned long
double_int::to_uhwi () const
{
  return low;
}



inline bool
double_int::fits_uhwi () const
{
  return high == 0;
}





inline double_int
double_int::operator ~ () const
{
  double_int result;
  result.low = ~low;
  result.high = ~high;
  return result;
}



inline double_int
double_int::operator | (double_int b) const
{
  double_int result;
  result.low = low | b.low;
  result.high = high | b.high;
  return result;
}



inline double_int
double_int::operator & (double_int b) const
{
  double_int result;
  result.low = low & b.low;
  result.high = high & b.high;
  return result;
}



inline double_int
double_int::and_not (double_int b) const
{
  double_int result;
  result.low = low & ~b.low;
  result.high = high & ~b.high;
  return result;
}



inline double_int
double_int::operator ^ (double_int b) const
{
  double_int result;
  result.low = low ^ b.low;
  result.high = high ^ b.high;
  return result;
}

void dump_double_int (FILE *, double_int, bool);
# 376 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline bool
double_int::is_zero () const
{
  return low == 0 && high == 0;
}



inline bool
double_int::is_one () const
{
  return low == 1 && high == 0;
}



inline bool
double_int::is_minus_one () const
{
  return low == -1UL && high == -1;
}



inline bool
double_int::is_negative () const
{
  return high < 0;
}



inline bool
double_int::operator == (double_int cst2) const
{
  return low == cst2.low && high == cst2.high;
}



inline bool
double_int::operator != (double_int cst2) const
{
  return low != cst2.low || high != cst2.high;
}



inline int
double_int::popcount () const
{
  return popcount_hwi (high) + popcount_hwi (low);
}
# 438 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
namespace wi
{
  template <>
  struct int_traits <double_int>
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = true;
    static const unsigned int precision = (2 * 64);
    static unsigned int get_precision (const double_int &);
    static wi::storage_ref decompose (long *, unsigned int,
          const double_int &);
  };
}

inline unsigned int
wi::int_traits <double_int>::get_precision (const double_int &)
{
  return precision;
}

inline wi::storage_ref
wi::int_traits <double_int>::decompose (long *scratch, unsigned int p,
     const double_int &x)
{
  ((void)(!(precision == p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h", 462, __FUNCTION__), 0 : 0));
  scratch[0] = x.low;
  if ((x.high == 0 && scratch[0] >= 0) || (x.high == -1 && scratch[0] < 0))
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = x.high;
  return wi::storage_ref (scratch, 2, precision);
}
# 471 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h" 1
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h"
struct align_flags_tuple
{



  int log;
  int maxskip;


  void normalize ()
  {
    int n = (1 << log);
    if (maxskip > n)
      maxskip = n - 1;
  }


  int get_value ()
  {
    return maxskip + 1;
  }
};




class align_flags
{
public:

  align_flags (int log0 = 0, int maxskip0 = 0, int log1 = 0, int maxskip1 = 0)
  {
    levels[0].log = log0;
    levels[0].maxskip = maxskip0;
    levels[1].log = log1;
    levels[1].maxskip = maxskip1;
    normalize ();
  }


  void normalize ()
  {
    for (unsigned i = 0; i < 2; i++)
      levels[i].normalize ();
  }


  static align_flags max (const align_flags f0, const align_flags f1)
    {
      int log0 = ((f0.levels[0].log) > (f1.levels[0].log) ? (f0.levels[0].log) : (f1.levels[0].log));
      int maxskip0 = ((f0.levels[0].maxskip) > (f1.levels[0].maxskip) ? (f0.levels[0].maxskip) : (f1.levels[0].maxskip));
      int log1 = ((f0.levels[1].log) > (f1.levels[1].log) ? (f0.levels[1].log) : (f1.levels[1].log));
      int maxskip1 = ((f0.levels[1].maxskip) > (f1.levels[1].maxskip) ? (f0.levels[1].maxskip) : (f1.levels[1].maxskip));
      return align_flags (log0, maxskip0, log1, maxskip1);
    }

  align_flags_tuple levels[2];
};
# 472 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 25 "build/gencondmd.c" 2
# 1 "./tm.h" 1
# 22 "./tm.h"
# 1 "./options.h" 1





# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_info_type
{
  NO_DEBUG,
  DBX_DEBUG,
  DWARF2_DEBUG,
  XCOFF_DEBUG,
  VMS_DEBUG,
  VMS_AND_DWARF2_DEBUG

};

enum debug_info_levels
{
  DINFO_LEVEL_NONE,
  DINFO_LEVEL_TERSE,
  DINFO_LEVEL_NORMAL,
  DINFO_LEVEL_VERBOSE
};
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_info_usage
{
  DINFO_USAGE_DFN,
  DINFO_USAGE_DIR_USE,
  DINFO_USAGE_IND_USE,
  DINFO_USAGE_NUM_ENUMS
};
# 83 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_struct_file
{
  DINFO_STRUCT_FILE_NONE,
  DINFO_STRUCT_FILE_BASE,

  DINFO_STRUCT_FILE_SYS,

  DINFO_STRUCT_FILE_ANY
};



enum dwarf_gnat_encodings
{
  DWARF_GNAT_ENCODINGS_ALL = 0,



  DWARF_GNAT_ENCODINGS_GDB = 1,


  DWARF_GNAT_ENCODINGS_MINIMAL = 2

};



enum ivar_visibility
{
  IVAR_VISIBILITY_PRIVATE,
  IVAR_VISIBILITY_PROTECTED,
  IVAR_VISIBILITY_PUBLIC,
  IVAR_VISIBILITY_PACKAGE
};


enum stack_reuse_level
{
  SR_NONE,
  SR_NAMED_VARS,
  SR_ALL
};


enum live_patching_level
{
  LIVE_PATCHING_NONE = 0,
  LIVE_PATCHING_INLINE_ONLY_STATIC,
  LIVE_PATCHING_INLINE_CLONE
};


enum reorder_blocks_algorithm
{
  REORDER_BLOCKS_ALGORITHM_SIMPLE,
  REORDER_BLOCKS_ALGORITHM_STC
};


enum ira_algorithm
{
  IRA_ALGORITHM_CB,
  IRA_ALGORITHM_PRIORITY
};


enum ira_region
{
  IRA_REGION_ONE,
  IRA_REGION_ALL,
  IRA_REGION_MIXED,



  IRA_REGION_AUTODETECT
};


enum excess_precision
{
  EXCESS_PRECISION_DEFAULT,
  EXCESS_PRECISION_FAST,
  EXCESS_PRECISION_STANDARD
};


enum permitted_flt_eval_methods
{
  PERMITTED_FLT_EVAL_METHODS_DEFAULT,
  PERMITTED_FLT_EVAL_METHODS_TS_18661,
  PERMITTED_FLT_EVAL_METHODS_C11
};
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum stack_check_type
{

  NO_STACK_CHECK = 0,



  GENERIC_STACK_CHECK,




  STATIC_BUILTIN_STACK_CHECK,



  FULL_BUILTIN_STACK_CHECK
};


enum callgraph_info_type
{

  NO_CALLGRAPH_INFO = 0,


  CALLGRAPH_INFO_NAKED = 1,


  CALLGRAPH_INFO_STACK_USAGE = 2,


  CALLGRAPH_INFO_DYNAMIC_ALLOC = 4
};


enum fp_contract_mode {
  FP_CONTRACT_OFF = 0,
  FP_CONTRACT_ON = 1,
  FP_CONTRACT_FAST = 2
};


enum scalar_storage_order_kind {
  SSO_NATIVE = 0,
  SSO_BIG_ENDIAN,
  SSO_LITTLE_ENDIAN
};


enum vect_cost_model {
  VECT_COST_MODEL_UNLIMITED = 0,
  VECT_COST_MODEL_CHEAP = 1,
  VECT_COST_MODEL_DYNAMIC = 2,
  VECT_COST_MODEL_DEFAULT = 3
};


enum sanitize_code {

  SANITIZE_ADDRESS = 1UL << 0,
  SANITIZE_USER_ADDRESS = 1UL << 1,
  SANITIZE_KERNEL_ADDRESS = 1UL << 2,

  SANITIZE_THREAD = 1UL << 3,

  SANITIZE_LEAK = 1UL << 4,

  SANITIZE_SHIFT_BASE = 1UL << 5,
  SANITIZE_SHIFT_EXPONENT = 1UL << 6,
  SANITIZE_DIVIDE = 1UL << 7,
  SANITIZE_UNREACHABLE = 1UL << 8,
  SANITIZE_VLA = 1UL << 9,
  SANITIZE_NULL = 1UL << 10,
  SANITIZE_RETURN = 1UL << 11,
  SANITIZE_SI_OVERFLOW = 1UL << 12,
  SANITIZE_BOOL = 1UL << 13,
  SANITIZE_ENUM = 1UL << 14,
  SANITIZE_FLOAT_DIVIDE = 1UL << 15,
  SANITIZE_FLOAT_CAST = 1UL << 16,
  SANITIZE_BOUNDS = 1UL << 17,
  SANITIZE_ALIGNMENT = 1UL << 18,
  SANITIZE_NONNULL_ATTRIBUTE = 1UL << 19,
  SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1UL << 20,
  SANITIZE_OBJECT_SIZE = 1UL << 21,
  SANITIZE_VPTR = 1UL << 22,
  SANITIZE_BOUNDS_STRICT = 1UL << 23,
  SANITIZE_POINTER_OVERFLOW = 1UL << 24,
  SANITIZE_BUILTIN = 1UL << 25,
  SANITIZE_POINTER_COMPARE = 1UL << 26,
  SANITIZE_POINTER_SUBTRACT = 1UL << 27,
  SANITIZE_SHIFT = SANITIZE_SHIFT_BASE | SANITIZE_SHIFT_EXPONENT,
  SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE
         | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN
         | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM
         | SANITIZE_BOUNDS | SANITIZE_ALIGNMENT
         | SANITIZE_NONNULL_ATTRIBUTE
         | SANITIZE_RETURNS_NONNULL_ATTRIBUTE
         | SANITIZE_OBJECT_SIZE | SANITIZE_VPTR
         | SANITIZE_POINTER_OVERFLOW | SANITIZE_BUILTIN,
  SANITIZE_UNDEFINED_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST
      | SANITIZE_BOUNDS_STRICT
};


enum incremental_link {
  INCREMENTAL_LINK_NONE,

  INCREMENTAL_LINK_NOLTO,

  INCREMENTAL_LINK_LTO
};


enum sanitize_coverage_code {

  SANITIZE_COV_TRACE_PC = 1 << 0,

  SANITIZE_COV_TRACE_CMP = 1 << 1
};


enum vtv_priority {
  VTV_NO_PRIORITY = 0,
  VTV_STANDARD_PRIORITY = 1,
  VTV_PREINIT_PRIORITY = 2
};


enum lto_partition_model {
  LTO_PARTITION_NONE = 0,
  LTO_PARTITION_ONE = 1,
  LTO_PARTITION_BALANCED = 2,
  LTO_PARTITION_1TO1 = 3,
  LTO_PARTITION_MAX = 4
};


enum lto_linker_output {
  LTO_LINKER_OUTPUT_UNKNOWN,
  LTO_LINKER_OUTPUT_REL,
  LTO_LINKER_OUTPUT_NOLTOREL,
  LTO_LINKER_OUTPUT_DYN,
  LTO_LINKER_OUTPUT_PIE,
  LTO_LINKER_OUTPUT_EXEC
};



enum gfc_init_local_real
{
  GFC_INIT_REAL_OFF = 0,
  GFC_INIT_REAL_ZERO,
  GFC_INIT_REAL_NAN,
  GFC_INIT_REAL_SNAN,
  GFC_INIT_REAL_INF,
  GFC_INIT_REAL_NEG_INF
};



enum gfc_fcoarray
{
  GFC_FCOARRAY_NONE = 0,
  GFC_FCOARRAY_SINGLE,
  GFC_FCOARRAY_LIB
};




enum gfc_convert
{
  GFC_FLAG_CONVERT_NATIVE = 0,
  GFC_FLAG_CONVERT_SWAP,
  GFC_FLAG_CONVERT_BIG,
  GFC_FLAG_CONVERT_LITTLE
};



enum cf_protection_level
{
  CF_NONE = 0,
  CF_BRANCH = 1 << 0,
  CF_RETURN = 1 << 1,
  CF_FULL = CF_BRANCH | CF_RETURN,
  CF_SET = 1 << 2,
  CF_CHECK = 1 << 3
};


enum parloops_schedule_type
{
  PARLOOPS_SCHEDULE_STATIC = 0,
  PARLOOPS_SCHEDULE_DYNAMIC,
  PARLOOPS_SCHEDULE_GUIDED,
  PARLOOPS_SCHEDULE_AUTO,
  PARLOOPS_SCHEDULE_RUNTIME
};
# 7 "./options.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h"
enum stringop_alg
{






# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/stringop.def" 1
# 20 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/stringop.def"

no_stringop,

libcall,

rep_prefix_1_byte,

rep_prefix_4_byte,

rep_prefix_8_byte,

loop_1_byte,

loop,

unrolled_loop,

vector_loop,
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h" 2
last_alg



};


enum calling_abi
{
  SYSV_ABI = 0,
  MS_ABI = 1
};

enum fpmath_unit
{
  FPMATH_387 = 1,
  FPMATH_SSE = 2
};

enum tls_dialect
{
  TLS_DIALECT_GNU,
  TLS_DIALECT_GNU2,
  TLS_DIALECT_SUN
};

enum cmodel {
  CM_32,
  CM_SMALL,
  CM_KERNEL,
  CM_MEDIUM,
  CM_LARGE,
  CM_SMALL_PIC,
  CM_MEDIUM_PIC,
  CM_LARGE_PIC
};

enum pmode {
  PMODE_SI,
  PMODE_DI
};

enum ix86_align_data {
  ix86_align_data_type_compat,
  ix86_align_data_type_abi,
  ix86_align_data_type_cacheline
};

enum asm_dialect {
  ASM_ATT,
  ASM_INTEL
};

enum ix86_veclibabi {
  ix86_veclibabi_type_none,
  ix86_veclibabi_type_svml,
  ix86_veclibabi_type_acml
};

enum stack_protector_guard {
  SSP_TLS,
  SSP_GLOBAL
};

enum prefer_vector_width {
    PVW_NONE,
    PVW_AVX128,
    PVW_AVX256,
    PVW_AVX512
};






enum indirect_branch {
  indirect_branch_unset = 0,
  indirect_branch_keep,
  indirect_branch_thunk,
  indirect_branch_thunk_inline,
  indirect_branch_thunk_extern
};

enum instrument_return {
  instrument_return_none = 0,
  instrument_return_call,
  instrument_return_nop5
};
# 9 "./options.h" 2
# 20 "./options.h"
extern long ix86_stack_protector_guard_offset;





extern addr_space_t ix86_stack_protector_guard_reg;





extern int recip_mask;





extern long function_entry_patch_area_size;





extern long function_entry_patch_area_start;





extern long ix86_isa_flags;





extern long ix86_isa_flags2;





extern long ix86_isa_flags2_explicit;





extern long ix86_isa_flags_explicit;





extern bool dump_base_name_prefixed;





extern bool exit_after_options;





extern bool flag_disable_hsa;





extern bool flag_dump_all_passed;





extern bool flag_opts_finished;





extern bool flag_stack_usage_info;





extern bool flag_warn_unused_result;





extern bool in_lto_p;





extern bool use_gnu_debug_info_extensions;





extern char *help_enum_printed;





extern char *help_printed;





extern const char *aux_base_name;





extern const char *flag_parallel_jobs;





extern const char *main_input_basename;





extern const char *main_input_filename;





extern const char *split_outputs;





extern enum debug_info_levels debug_info_level;





extern enum debug_info_type write_symbols;





extern enum debug_struct_file debug_struct_generic[DINFO_USAGE_NUM_ENUMS];





extern enum debug_struct_file debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS];





extern enum dwarf_gnat_encodings gnat_encodings;





extern enum incremental_link flag_incremental_link;





extern enum stack_check_type flag_stack_check;





extern int flag_complex_method;





extern int flag_debug_asm;





extern int flag_dump_rtl_in_asm;





extern int flag_gen_aux_info;





extern int flag_generate_lto;





extern int flag_generate_offload;





extern int flag_print_asm_name;





extern int flag_shlib;





extern int ix86_target_flags;





extern int main_input_baselength;





extern int optimize;





extern int optimize_debug;





extern int optimize_fast;





extern int optimize_size;





extern int recip_mask_explicit;





extern int rtl_dump_and_exit;





extern int target_flags;





extern unsigned int flag_sanitize;





extern unsigned int flag_sanitize_coverage;





extern unsigned int flag_sanitize_recover;





extern unsigned int help_columns;





extern unsigned int initial_max_fld_align;





extern void *flag_instrument_functions_exclude_files;





extern void *flag_instrument_functions_exclude_functions;





extern int help_flag;





extern int no_sysroot_suffix;





extern int param_align_loop_iterations;





extern int param_align_threshold;





extern int param_analyzer_bb_explosion_factor;





extern int param_analyzer_max_enodes_for_full_dump;





extern int param_analyzer_max_enodes_per_program_point;





extern int param_analyzer_max_recursion_depth;





extern int param_analyzer_max_svalue_depth;





extern int param_analyzer_min_snodes_for_call_summary;





extern int param_asan_globals;





extern int param_asan_protect_allocas;





extern int param_asan_instrument_reads;





extern int param_asan_instrument_writes;





extern int param_asan_instrumentation_with_call_threshold;





extern int param_asan_memintrin;





extern int param_asan_stack;





extern int param_asan_use_after_return;





extern int param_avg_loop_niter;





extern int param_avoid_fma_max_bits;





extern int param_balance_partitions;





extern int param_builtin_expect_probability;





extern int param_builtin_string_cmp_inline_length;





extern int param_case_values_threshold;





extern int param_comdat_sharing_probability;





extern int param_cxx_max_namespaces_for_diagnostic_help;





extern int param_dse_max_alias_queries_per_store;





extern int param_dse_max_object_size;





extern int param_early_inlining_insns;





extern int param_fsm_maximum_phi_arguments;





extern int param_fsm_scale_path_blocks;





extern int param_fsm_scale_path_stmts;





extern int param_gcse_after_reload_critical_fraction;





extern int param_gcse_after_reload_partial_fraction;





extern int param_gcse_cost_distance_ratio;





extern int param_gcse_unrestricted_cost;





extern int param_ggc_min_expand;





extern int param_ggc_min_heapsize;





extern int param_gimple_fe_computed_hot_bb_threshold;





extern int param_graphite_allow_codegen_errors;





extern int param_graphite_max_arrays_per_scop;





extern int param_graphite_max_nb_scop_params;





extern int param_hash_table_verification_limit;





extern int param_hot_bb_count_fraction;





extern int param_hot_bb_count_ws_permille;





extern int param_hot_bb_frequency_fraction;





extern int param_inline_heuristics_hint_percent;





extern int param_inline_min_speedup;





extern int param_inline_unit_growth;





extern int param_integer_share_limit;





extern int param_ipa_cp_eval_threshold;





extern int param_ipa_cp_loop_hint_bonus;





extern int param_ipa_cp_max_recursive_depth;





extern int param_ipa_cp_min_recursive_probability;





extern int param_ipa_cp_recursion_penalty;





extern int param_ipa_cp_single_call_penalty;





extern int param_ipa_cp_unit_growth;





extern int param_ipa_cp_value_list_size;





extern int param_ipa_max_aa_steps;





extern int param_ipa_max_agg_items;





extern int param_ipa_max_param_expr_ops;





extern int param_ipa_max_switch_predicate_bounds;





extern int param_ipa_sra_max_replacements;





extern int param_ipa_sra_ptr_growth_factor;





extern int param_ira_loop_reserved_regs;





extern int param_ira_max_conflict_table_size;





extern int param_ira_max_loops_num;





extern int param_iv_always_prune_cand_set_bound;





extern int param_iv_consider_all_candidates_bound;





extern int param_iv_max_considered_uses;





extern int param_jump_table_max_growth_ratio_for_size;





extern int param_jump_table_max_growth_ratio_for_speed;





extern int param_l1_cache_line_size;





extern int param_l1_cache_size;





extern int param_l2_cache_size;





extern int param_large_function_growth;





extern int param_large_function_insns;





extern int param_stack_frame_growth;





extern int param_large_stack_frame;





extern int param_large_unit_insns;





extern int param_lim_expensive;





extern int param_logical_op_non_short_circuit;





extern int param_loop_block_tile_size;





extern int param_loop_interchange_max_num_stmts;





extern int param_loop_interchange_stride_ratio;





extern int param_loop_invariant_max_bbs_in_loop;





extern int param_loop_max_datarefs_for_datadeps;





extern int param_loop_versioning_max_inner_insns;





extern int param_loop_versioning_max_outer_insns;





extern int param_lra_inheritance_ebb_probability_cutoff;





extern int param_lra_max_considered_reload_pseudos;





extern int param_max_partition_size;





extern int param_max_lto_streaming_parallelism;





extern int param_min_partition_size;





extern int param_lto_partitions;





extern int param_max_average_unrolled_insns;





extern int param_max_combine_insns;





extern int param_max_unroll_iterations;





extern int param_max_completely_peel_times;





extern int param_max_completely_peeled_insns;





extern int param_max_crossjump_edges;





extern int param_max_cse_insns;





extern int param_max_cse_path_length;





extern int param_max_cselib_memory_locations;





extern int param_max_debug_marker_count;





extern int param_max_delay_slot_insn_search;





extern int param_max_delay_slot_live_search;





extern int param_max_dse_active_local_stores;





extern int param_early_inliner_max_iterations;





extern int param_max_fields_for_field_sensitive;





extern int param_max_find_base_term_values;





extern int param_max_fsm_thread_length;





extern int param_max_fsm_thread_path_insns;





extern int param_max_fsm_thread_paths;





extern int param_max_gcse_insertion_ratio;





extern int param_max_gcse_memory;





extern int param_max_goto_duplication_insns;





extern int param_max_grow_copy_bb_insns;





extern int param_max_hoist_depth;





extern int param_max_inline_insns_auto;





extern int param_max_inline_insns_recursive_auto;





extern int param_max_inline_insns_recursive;





extern int param_max_inline_insns_single;





extern int param_max_inline_insns_size;





extern int param_max_inline_insns_small;





extern int param_max_inline_recursive_depth_auto;





extern int param_max_inline_recursive_depth;





extern int param_max_isl_operations;





extern int param_max_iterations_computation_cost;





extern int param_max_iterations_to_track;





extern int param_max_jump_thread_duplication_stmts;





extern int param_max_last_value_rtl;





extern int param_max_loop_header_insns;





extern int param_max_modulo_backtrack_attempts;





extern int param_max_partial_antic_length;





extern int param_max_peel_branches;





extern int param_max_peel_times;





extern int param_max_peeled_insns;





extern int param_max_pending_list_length;





extern int param_max_pipeline_region_blocks;





extern int param_max_pipeline_region_insns;





extern int param_max_pow_sqrt_depth;





extern int param_max_predicted_iterations;





extern int param_max_reload_search_insns;





extern int param_max_rtl_if_conversion_insns;





extern int param_max_rtl_if_conversion_predictable_cost;





extern int param_max_rtl_if_conversion_unpredictable_cost;





extern int param_max_sched_extend_regions_iters;





extern int param_max_sched_insn_conflict_delay;





extern int param_max_sched_ready_insns;





extern int param_max_sched_region_blocks;





extern int param_max_sched_region_insns;





extern int param_max_slsr_candidate_scan;





extern int param_max_speculative_devirt_maydefs;





extern int param_max_ssa_name_query_depth;





extern int param_max_stores_to_merge;





extern int param_max_stores_to_sink;





extern int param_max_tail_merge_comparisons;





extern int param_max_tail_merge_iterations;





extern int param_max_tracked_strlens;





extern int param_max_tree_if_conversion_phi_args;





extern int param_max_unroll_times;





extern int param_max_unrolled_insns;





extern int param_max_unswitch_insns;





extern int param_max_unswitch_level;





extern int param_max_variable_expansions;





extern int param_max_vartrack_expr_depth;





extern int param_max_vartrack_reverse_op_size;





extern int param_max_vartrack_size;





extern int param_max_vrp_switch_assertions;





extern int param_min_crossjump_insns;





extern int param_min_inline_recursive_probability;





extern int param_min_insn_to_prefetch_ratio;





extern int param_min_loop_cond_split_prob;





extern int param_min_nondebug_insn_uid;





extern int param_min_size_for_stack_sharing;





extern int param_min_spec_prob;





extern int param_min_vect_loop_bound;





extern int param_parloops_chunk_size;





extern int param_parloops_min_per_thread;





extern int param_parloops_schedule;





extern int param_partial_inlining_entry_probability;





extern int param_predictable_branch_outcome;





extern int param_prefetch_dynamic_strides;





extern int param_prefetch_latency;





extern int param_prefetch_min_insn_to_mem_ratio;





extern int param_prefetch_minimum_stride;





extern int param_profile_func_internal_id;





extern int param_promote_statics;





extern int param_rpo_vn_max_loop_depth;





extern int param_sccvn_max_alias_queries_per_access;





extern int param_scev_max_expr_complexity;





extern int param_scev_max_expr_size;





extern int param_sched_autopref_queue_depth;





extern int param_sched_mem_true_dep_cost;





extern int param_sched_pressure_algorithm;





extern int param_sched_spec_prob_cutoff;





extern int param_sched_state_edge_prob_cutoff;





extern int param_selsched_insns_to_rename;





extern int param_selsched_max_lookahead;





extern int param_selsched_max_sched_times;





extern int param_simultaneous_prefetches;





extern int param_sink_frequency_threshold;





extern int param_slp_max_insns_in_bb;





extern int param_sms_dfa_history;





extern int param_sms_loop_average_count_threshold;





extern int param_sms_max_ii_factor;





extern int param_sms_min_sc;





extern int param_sra_max_propagations;





extern int param_sra_max_scalarization_size_size;





extern int param_sra_max_scalarization_size_speed;





extern int param_ssa_name_def_chain_limit;





extern int param_ssp_buffer_size;





extern int param_stack_clash_protection_guard_size;





extern int param_stack_clash_protection_probe_interval;





extern int param_store_merging_allow_unaligned;





extern int param_store_merging_max_size;





extern int param_switch_conversion_branch_ratio;





extern int param_tm_max_aggregate_size;





extern int param_tracer_dynamic_coverage_feedback;





extern int param_tracer_dynamic_coverage;





extern int param_tracer_max_code_growth;





extern int param_tracer_min_branch_probability_feedback;





extern int param_tracer_min_branch_probability;





extern int param_tracer_min_branch_ratio;





extern int param_tree_reassoc_width;





extern int param_tsan_distinguish_volatile;





extern int param_tsan_instrument_func_entry_exit;





extern int param_uninit_control_dep_attempts;





extern int param_uninlined_function_insns;





extern int param_uninlined_function_time;





extern int param_uninlined_function_thunk_insns;





extern int param_uninlined_function_thunk_time;





extern int param_unlikely_bb_count_fraction;





extern int param_unroll_jam_max_unroll;





extern int param_unroll_jam_min_percent;





extern int param_use_after_scope_direct_emission_threshold;





extern int param_use_canonical_types;





extern int param_vect_epilogues_nomask;





extern int param_vect_max_peeling_for_alignment;





extern int param_vect_max_version_for_alias_checks;





extern int param_vect_max_version_for_alignment_checks;





extern int param_vect_partial_vector_usage;





extern int flag_preprocess_only;





extern int warn_abi;





extern int warn_abi_tag;





extern int warn_absolute_value;





extern int warn_address;





extern int warn_address_of_packed_member;





extern int warn_aggregate_return;





extern int warn_aggressive_loop_optimizations;





extern int warn_aliasing;





extern int warn_align_commons;





extern int warn_aligned_new;





extern long warn_alloc_size_limit;





extern int warn_alloc_zero;





extern int warn_alloca;





extern long warn_alloca_limit;





extern int warn_ampersand;





extern int warn_analyzer_double_fclose;





extern int warn_analyzer_double_free;





extern int warn_analyzer_exposure_through_output_file;





extern int warn_analyzer_file_leak;





extern int warn_analyzer_free_of_non_heap;





extern int warn_analyzer_malloc_leak;





extern int warn_analyzer_null_argument;





extern int warn_analyzer_null_dereference;





extern int warn_analyzer_possible_null_argument;





extern int warn_analyzer_possible_null_dereference;





extern int warn_analyzer_stale_setjmp_buffer;





extern int warn_analyzer_tainted_array_index;





extern int warn_analyzer_too_complex;





extern int warn_analyzer_unsafe_call_within_signal_handler;





extern int warn_analyzer_use_after_free;





extern int warn_analyzer_use_of_pointer_in_stale_stack_frame;





extern int warn_arith_conv;





extern int warn_array_bounds;





extern int warn_array_temporaries;





extern int warn_assign_intercept;





extern int warn_attribute_alias;





extern int warn_attribute_warning;





extern int warn_attributes;





extern int warn_bad_function_cast;





extern int warn_bool_compare;





extern int warn_bool_op;





extern int warn_builtin_declaraion_mismatch;





extern int cpp_warn_builtin_macro_redefined;





extern int warn_cxx_compat;





extern int warn_cxx11_compat;





extern int warn_cxx14_compat;





extern int warn_cxx17_compat;





extern int warn_cxx20_compat;





extern int warn_c_binding_type;





extern int warn_c11_c2x_compat;





extern int warn_c90_c99_compat;





extern int warn_c99_c11_compat;





extern int warn_cannot_profile;





extern int warn_cast_align;





extern int warn_cast_function_type;





extern int warn_cast_qual;





extern int warn_cast_result;





extern int warn_catch_value;





extern int warn_char_subscripts;





extern int warn_character_truncation;





extern int warn_class_conversion;





extern int warn_class_memaccess;





extern int warn_clobbered;





extern int warn_comma_subscript;





extern int cpp_warn_comment;





extern int warn_compare_reals;





extern int warn_conditionally_supported;





extern int warn_conversion;





extern int warn_conversion_extra;





extern int warn_conversion_null;





extern int warn_coverage_mismatch;





extern int warn_cpp;





extern int warn_ctor_dtor_privacy;





extern int warn_dangling_else;





extern int cpp_warn_date_time;





extern int warn_declaration_after_statement;





extern int warn_delete_incomplete;





extern int warn_delnonvdtor;





extern int warn_deprecated;





extern int warn_deprecated_copy;





extern int warn_deprecated_decl;





extern int warn_designated_init;





extern int warn_disabled_optimization;





extern int warn_discarded_array_qualifiers;





extern int warn_discarded_qualifiers;





extern int warn_div_by_zero;





extern int warn_do_subscript;





extern int warn_double_promotion;





extern int warn_duplicate_decl_specifier;





extern int warn_duplicated_branches;





extern int warn_duplicated_cond;





extern int warn_ecpp;





extern int warn_empty_body;





extern int cpp_warn_endif_labels;





extern int warn_enum_compare;





extern int warn_enum_conversion;





extern int warnings_are_errors;





extern int cpp_warn_expansion_to_defined;





extern int extra_warnings;





extern int warn_extra_semi;





extern int flag_fatal_errors;





extern int warn_float_conversion;





extern int warn_float_equal;





extern int warn_format_contains_nul;





extern int warn_format_diag;





extern int warn_format_extra_args;





extern int warn_format_nonliteral;





extern int warn_format_overflow;





extern int warn_format_security;





extern int warn_format_signedness;





extern int warn_format_trunc;





extern int warn_format_y2k;





extern int warn_format_zero_length;





extern int warn_format;





extern int warn_frame_address;





extern long warn_frame_larger_than_size;





extern int warn_free_nonheap_object;





extern int flag_warn_frontend_loop_interchange;





extern int warn_function_elimination;





extern int warn_if_not_aligned;





extern int warn_ignored_attributes;





extern int warn_ignored_qualifiers;





extern int warn_implicit;





extern int warn_implicit_fallthrough;





extern int warn_implicit_function_declaration;





extern int warn_implicit_int;





extern int warn_implicit_interface;





extern int warn_implicit_procedure;





extern int warn_inaccessible_base;





extern int warn_incompatible_pointer_types;





extern int warn_inh_var_ctor;





extern int warn_init_list;





extern int warn_init_self;





extern int warn_inline;





extern int warn_int_conversion;





extern int warn_int_in_bool_context;





extern int warn_int_to_pointer_cast;





extern int warn_integer_division;





extern int warn_intrinsic_shadow;





extern int warn_intrinsics_std;





extern int warn_invalid_memory_model;





extern int warn_invalid_offsetof;





extern int cpp_warn_invalid_pch;





extern int warn_jump_misses_init;





extern long warn_larger_than_size;





extern int warn_line_truncation;





extern int cpp_warn_literal_suffix;





extern int warn_logical_not_paren;





extern int warn_logical_op;





extern int warn_long_long;





extern int warn_lto_type_mismatch;





extern int warn_main;





extern int warn_maybe_uninitialized;





extern int warn_memset_elt_size;





extern int warn_memset_transposed_args;





extern int warn_misleading_indentation;





extern int warn_mismatched_tags;





extern int warn_missing_attributes;





extern int warn_missing_braces;





extern int warn_missing_declarations;





extern int warn_missing_field_initializers;





extern int cpp_warn_missing_include_dirs;





extern int warn_missing_parameter_type;





extern int warn_missing_profile;





extern int warn_missing_prototypes;





extern int cpp_warn_multichar;





extern int warn_multiple_inheritance;





extern int warn_multistatement_macros;





extern int warn_namespaces;





extern int warn_narrowing;





extern int warn_nested_externs;





extern int warn_noexcept;





extern int warn_noexcept_type;





extern int warn_nontemplate_friend;





extern int warn_nonvdtor;





extern int warn_nonnull;





extern int warn_nonnull_compare;





extern int cpp_warn_normalize;





extern int warn_null_dereference;





extern int warn_odr_violations;





extern int warn_old_style_cast;





extern int warn_old_style_declaration;





extern int warn_old_style_definition;





extern int warn_openmp_simd;





extern int warn_overflow;





extern int warn_overlength_strings;





extern int warn_overloaded_virtual;





extern int warn_override_init;





extern int warn_override_init_side_effects;





extern int warn_overwrite_recursive;





extern int warn_packed;





extern int warn_packed_bitfield_compat;





extern int warn_packed_not_aligned;





extern int warn_padded;





extern int warn_parentheses;





extern int pedantic;





extern int warn_pessimizing_move;





extern int warn_placement_new;





extern int warn_pmf2ptr;





extern int warn_pointer_arith;





extern int warn_pointer_compare;





extern int warn_pointer_sign;





extern int warn_pointer_to_int_cast;





extern int warn_pragmas;





extern int warn_prio_ctor_dtor;





extern int warn_property_assign_default;





extern int warn_protocol;





extern int warn_psabi;





extern int warn_real_q_constant;





extern int warn_realloc_lhs;





extern int warn_realloc_lhs_all;





extern int warn_redundant_decls;





extern int warn_redundant_move;





extern int warn_redundant_tags;





extern int warn_register;





extern int warn_reorder;





extern int warn_restrict;





extern int warn_return_local_addr;





extern int warn_return_type;





extern int warn_scalar_storage_order;





extern int warn_selector;





extern int warn_sequence_point;





extern int warn_shadow;





extern int warn_shadow_ivar;





extern int warn_shadow_compatible_local;





extern int warn_shadow_local;





extern int warn_shift_count_negative;





extern int warn_shift_count_overflow;





extern int warn_shift_negative_value;





extern int warn_shift_overflow;





extern int warn_sign_compare;





extern int warn_sign_conversion;





extern int warn_sign_promo;





extern int warn_sized_deallocation;





extern int warn_sizeof_array_argument;





extern int warn_sizeof_pointer_div;





extern int warn_sizeof_pointer_memaccess;





extern int warn_stack_protect;





extern long warn_stack_usage;





extern int warn_strict_aliasing;





extern int warn_strict_null_sentinel;





extern int warn_strict_overflow;





extern int warn_strict_prototypes;





extern int warn_strict_selector_match;





extern int warn_string_compare;





extern int warn_stringop_overflow;





extern int warn_stringop_truncation;





extern int warn_subobject_linkage;





extern int warn_suggest_attribute_cold;





extern int warn_suggest_attribute_const;





extern int warn_suggest_attribute_format;





extern int warn_suggest_attribute_malloc;





extern int warn_suggest_attribute_noreturn;





extern int warn_suggest_attribute_pure;





extern int warn_suggest_final_methods;





extern int warn_suggest_final_types;





extern int warn_override;





extern int warn_surprising;





extern int warn_switch;





extern int warn_switch_bool;





extern int warn_switch_default;





extern int warn_switch_enum;





extern int warn_switch_outside_range;





extern int warn_switch_unreachable;





extern int warn_sync_nand;





extern int warn_synth;





extern int warn_system_headers;





extern int warn_tabs;





extern int warn_target_lifetime;





extern int warn_tautological_compare;





extern int warn_templates;





extern int warn_terminate;





extern int warn_traditional;





extern int warn_traditional_conversion;





extern int warn_trampolines;





extern int cpp_warn_trigraphs;





extern int warn_type_limits;





extern int warn_undeclared_selector;





extern int cpp_warn_undef;





extern int warn_undefined_do_loop;





extern int warn_underflow;





extern int warn_uninitialized;





extern int warn_unknown_pragmas;





extern int warn_unsuffixed_float_constants;





extern int warn_unused;





extern int warn_unused_but_set_parameter;





extern int warn_unused_but_set_variable;





extern int warn_unused_const_variable;





extern int warn_unused_dummy_argument;





extern int warn_unused_function;





extern int warn_unused_label;





extern int warn_unused_local_typedefs;





extern int cpp_warn_unused_macros;





extern int warn_unused_parameter;





extern int warn_unused_result;





extern int warn_unused_value;





extern int warn_unused_variable;





extern int warn_use_without_only;





extern int warn_useless_cast;





extern int warn_varargs;





extern int cpp_warn_variadic_macros;





extern int warn_vector_operation_performance;





extern int warn_virtual_inheritance;





extern int warn_virtual_move_assign;





extern int warn_vla;





extern long warn_vla_limit;





extern int warn_volatile;





extern int warn_volatile_register_var;





extern int warn_write_strings;





extern int warn_zero_as_null_pointer_constant;





extern int warn_zero_length_bounds;





extern int warn_zerotrip;





extern const char *aux_info_file_name;





extern int flag_dump_callgraph;





extern int flag_lto_dump_defined;





extern int flag_lto_dump_demangle;





extern const char *flag_dump_body;





extern const char *flag_dump_level;





extern const char *dump_base_name;





extern const char *dump_base_ext;





extern const char *dump_dir_name;





extern int flag_pic;





extern int flag_pie;





extern int flag_abi_compat_version;





extern int flag_abi_version;





extern int flag_access_control;





extern const char *ada_specs_parent;





extern int flag_aggressive_function_elimination;





extern int flag_aggressive_loop_optimizations;





extern int flag_align_commons;





extern int flag_align_functions;





extern const char *str_align_functions;





extern int flag_align_jumps;





extern const char *str_align_jumps;





extern int flag_align_labels;





extern const char *str_align_labels;





extern int flag_align_loops;





extern const char *str_align_loops;





extern int aligned_new_threshold;





extern int flag_all_intrinsics;





extern int flag_allocation_dce;





extern int flag_allow_argument_mismatch;





extern int flag_allow_invalid_boz;





extern int flag_allow_leading_underscore;





extern int flag_allow_parameterless_variadic_functions;





extern int flag_store_data_races;





extern int flag_analyzer;





extern int flag_analyzer_call_summaries;





extern const char *flag_analyzer_checker;





extern int flag_analyzer_fine_grained;





extern int flag_analyzer_show_duplicate_count;





extern int flag_analyzer_state_merge;





extern int flag_analyzer_state_purge;





extern int flag_analyzer_transitivity;





extern int flag_analyzer_verbose_edges;





extern int flag_analyzer_verbose_state_changes;





extern int analyzer_verbosity;





extern void *common_deferred_options;





extern int flag_no_asm;





extern int flag_assert;





extern int flag_associative_math;





extern int flag_assume_phsa;





extern int flag_asynchronous_unwind_tables;





extern int flag_auto_inc_dec;





extern int flag_auto_profile;





extern const char *auto_profile_file;





extern int flag_automatic;





extern int flag_backslash;





extern int flag_backtrace;





extern int flag_blas_matmul_limit;





extern int flag_bounds_check;





extern int flag_branch_on_count_reg;





extern int flag_branch_probabilities;





extern int flag_building_libgcc;





extern int flag_building_libphobos_tests;





extern int flag_no_builtin;





extern int flag_c_prototypes;





extern int flag_c_prototypes_external;





extern int flag_caller_saves;





extern int flag_callgraph_info;





extern enum cf_protection_level flag_cf_protection;





extern int flag_char8_t;





extern int flag_check_new;





extern int flag_checking;





extern enum gfc_fcoarray flag_coarray;





extern int flag_code_hoisting;





extern int flag_combine_stack_adjustments;





extern int flag_no_common;





extern int flag_compare_debug;





extern const char *flag_compare_debug_opt;





extern int flag_compare_elim_after_reload;





extern int flag_concepts;





extern int concepts_diagnostics_max_depth;





extern int flag_concepts_ts;





extern int flag_conserve_stack;





extern int constexpr_cache_depth;





extern int max_constexpr_depth;





extern int constexpr_loop_limit;





extern long constexpr_ops_limit;





extern enum gfc_convert flag_convert;





extern int flag_coroutines;





extern int flag_cprop_registers;





extern int flag_cray_pointer;





extern int flag_crossjumping;





extern int flag_cse_follow_jumps;





extern int flag_cx_fortran_rules;





extern int flag_cx_limited_range;





extern int flag_data_sections;





extern int flag_dce;





extern int flag_debug_types_section;





extern int flag_dec;





extern int flag_dec_blank_format_item;





extern int flag_dec_char_conversions;





extern int flag_dec_format_defaults;





extern int flag_dec_include;





extern int flag_dec_intrinsic_ints;





extern int flag_dec_math;





extern int flag_dec_static;





extern int flag_dec_structure;





extern int flag_declone_ctor_dtor;





extern int flag_default_double;





extern int flag_default_integer;





extern int flag_default_real_10;





extern int flag_default_real_16;





extern int flag_default_real_8;





extern int flag_defer_pop;





extern int flag_delayed_branch;





extern int flag_delete_dead_exceptions;





extern int flag_delete_null_pointer_checks;





extern int flag_devirtualize;





extern int flag_ltrans_devirtualize;





extern int flag_devirtualize_speculatively;





extern int flag_diagnostics_show_color;





extern int flag_diagnostics_generate_patch;





extern int diagnostics_minimum_margin_width;





extern int flag_diagnostics_parseable_fixits;





extern int flag_diagnostics_path_format;





extern int flag_diagnostics_show_caret;





extern int flag_diagnostics_show_cwe;





extern int flag_diagnostics_show_labels;





extern int flag_diagnostics_show_line_numbers;





extern int flag_diagnostics_show_option;





extern int flag_diagnostics_show_path_depths;





extern int flag_diagnostics_show_template_tree;





extern int flag_diagnostics_show_urls;





extern int flag_dollar_ok;





extern int flag_dse;





extern int flag_dump_ada_spec;





extern int flag_dump_ada_spec_slim;





extern int flag_dump_analyzer;





extern int flag_dump_analyzer_callgraph;





extern int flag_dump_analyzer_exploded_graph;





extern int flag_dump_analyzer_exploded_nodes;





extern int flag_dump_analyzer_exploded_nodes_2;





extern int flag_dump_analyzer_exploded_nodes_3;





extern int flag_dump_analyzer_state_purge;





extern int flag_dump_analyzer_stderr;





extern int flag_dump_analyzer_supergraph;





extern const char *flag_dump_final_insns;





extern int flag_dump_fortran_global;





extern int flag_dump_fortran_optimized;





extern int flag_dump_fortran_original;





extern const char *flag_dump_go_spec;





extern int flag_dump_locations;





extern int flag_dump_noaddr;





extern int flag_dump_passes;





extern int flag_dump_scos;





extern int flag_dump_unnumbered;





extern int flag_dump_unnumbered_links;





extern int flag_dwarf2_cfi_asm;





extern int flag_early_inlining;





extern int flag_elide_constructors;





extern int flag_elide_type;





extern int flag_debug_only_used_symbols;





extern int flag_eliminate_unused_debug_types;





extern int flag_emit_class_debug_always;





extern int flag_enforce_eh_specs;





extern int flag_exceptions;





extern enum excess_precision flag_excess_precision;





extern int flag_expensive_optimizations;





extern int flag_ext_numeric_literals;





extern int flag_extern_tls_init;





extern int flag_external_blas;





extern int flag_f2c;





extern int flag_fat_lto_objects;





extern int flag_finite_loops;





extern int flag_finite_math_only;





extern int flag_fixed_line_length;





extern int flag_float_store;





extern int flag_forward_propagate;





extern enum fp_contract_mode flag_fp_contract_mode;





extern int flag_fp_int_builtin_inexact;





extern int flag_free_line_length;





extern int flag_frontend_loop_interchange;





extern int flag_frontend_optimize;





extern int flag_no_function_cse;





extern int flag_function_sections;





extern int flag_gcse;





extern int flag_gcse_after_reload;





extern int flag_gcse_las;





extern int flag_gcse_lm;





extern int flag_gcse_sm;





extern int flag_gimple;





extern int flag_no_gnu_keywords;





extern int flag_next_runtime;





extern int flag_tm;





extern int flag_gnu_unique;





extern int flag_gnu89_inline;





extern int go_check_divide_overflow;





extern int go_check_divide_zero;





extern int go_compiling_runtime;





extern int go_debug_escape_level;





extern const char *go_debug_escape_hash;





extern int go_debug_optimization;





extern int flag_graphite;





extern int flag_graphite_identity;





extern int flag_guess_branch_prob;





extern int flag_hoist_adjacent_loads;





extern int flag_no_ident;





extern int flag_if_conversion;





extern int flag_if_conversion2;





extern int flag_implement_inlines;





extern int flag_implicit_inline_templates;





extern int flag_implicit_none;





extern int flag_implicit_templates;





extern int flag_indirect_inlining;





extern int flag_inhibit_size_directive;





extern int flag_init_derived;





extern enum gfc_init_local_real flag_init_real;





extern int flag_no_inline;





extern int flag_inline_arg_packing;





extern int flag_inline_atomics;





extern int flag_inline_functions;





extern int flag_inline_functions_called_once;





extern int flag_inline_matmul_limit;





extern int flag_inline_small_functions;





extern int flag_instrument_function_entry_exit;





extern int flag_integer4_kind;





extern int flag_invariants;





extern int flag_ipa_bit_cp;





extern int flag_ipa_cp;





extern int flag_ipa_cp_clone;





extern int flag_ipa_icf;





extern int flag_ipa_icf_functions;





extern int flag_ipa_icf_variables;





extern int flag_ipa_profile;





extern int flag_ipa_pta;





extern int flag_ipa_pure_const;





extern int flag_ipa_ra;





extern int flag_ipa_reference;





extern int flag_ipa_reference_addressable;





extern int flag_ipa_sra;





extern int flag_ipa_stack_alignment;





extern int flag_ipa_vrp;





extern enum ira_algorithm flag_ira_algorithm;





extern int flag_ira_hoist_pressure;





extern int flag_ira_loop_pressure;





extern enum ira_region flag_ira_region;





extern int flag_ira_share_save_slots;





extern int flag_ira_share_spill_slots;





extern int flag_ira_verbose;





extern int flag_isolate_erroneous_paths_attribute;





extern int flag_isolate_erroneous_paths_dereference;





extern enum ivar_visibility default_ivar_visibility;





extern int flag_ivopts;





extern int flag_jump_tables;





extern int flag_keep_gc_roots_live;





extern int flag_keep_inline_dllexport;





extern int flag_keep_inline_functions;





extern int flag_keep_static_consts;





extern int flag_keep_static_functions;





extern int flag_large_source_files;





extern int flag_lax_vector_conversions;





extern int flag_leading_underscore;





extern int flag_lifetime_dse;





extern int flag_limit_function_alignment;





extern enum lto_linker_output flag_lto_linker_output;





extern enum live_patching_level flag_live_patching;





extern int flag_live_range_shrinkage;





extern int flag_local_ivars;





extern int flag_loop_interchange;





extern int flag_loop_nest_optimize;





extern int flag_loop_parallelize_all;





extern int flag_unroll_jam;





extern int flag_lra_remat;





extern int flag_lto_compression_level;





extern enum lto_partition_model flag_lto_partition;





extern int flag_lto_report;





extern int flag_lto_report_wpa;





extern const char *flag_lto;





extern int flag_ltrans;





extern const char *ltrans_output_list;





extern int flag_errno_math;





extern int flag_max_array_constructor;





extern int flag_max_errors;





extern int flag_max_stack_var_size;





extern int flag_max_subrecord_length;





extern int mem_report;





extern int mem_report_wpa;





extern int flag_merge_constants;





extern int flag_merge_debug_strings;





extern int flag_module_private;





extern int flag_moduleinfo;





extern int flag_modulo_sched;





extern int flag_modulo_sched_allow_regmoves;





extern int flag_move_loop_invariants;





extern int flag_ms_extensions;





extern int flag_new_inheriting_ctors;





extern int flag_new_ttp;





extern int flag_nil_receivers;





extern int flag_non_call_exceptions;





extern int flag_no_nonansi_builtin;





extern int flag_nothrow_opt;





extern int flag_objc_abi;





extern int flag_objc_call_cxx_cdtors;





extern int flag_objc_direct_dispatch;





extern int flag_objc_exceptions;





extern int flag_objc_gc;





extern int flag_objc_nilcheck;





extern int flag_objc_sjlj_exceptions;





extern int flag_objc1_only;





extern enum offload_abi flag_offload_abi;





extern int flag_omit_frame_pointer;





extern int flag_openacc;





extern const char *flag_openacc_dims;





extern int flag_openmp;





extern int flag_openmp_simd;





extern int flag_opt_info;





extern int flag_optimize_sibling_calls;





extern int flag_optimize_strlen;





extern int flag_pack_derived;





extern int flag_pack_struct;





extern int flag_pad_source;





extern int flag_partial_inlining;





extern int flag_pcc_struct_return;





extern int flag_peel_loops;





extern int flag_no_peephole;





extern int flag_peephole2;





extern int flag_permissive;





extern enum permitted_flt_eval_methods flag_permitted_flt_eval_methods;





extern int flag_plan9_extensions;





extern int flag_plt;





extern int post_ipa_mem_report;





extern int flag_postconditions;





extern const char *flag_pre_include;





extern int pre_ipa_mem_report;





extern int flag_preconditions;





extern int flag_predictive_commoning;





extern int flag_prefetch_loop_arrays;





extern int flag_pretty_templates;





extern int flag_printf_return_value;





extern int profile_flag;





extern int profile_abs_path_flag;





extern int profile_arc_flag;





extern int flag_profile_correction;





extern const char *profile_data_prefix;





extern const char *flag_profile_exclude_files;





extern const char *flag_profile_filter_files;





extern const char *profile_note_location;





extern int flag_profile_partial_training;





extern const char *profile_prefix_path;





extern int flag_profile_reorder_functions;





extern int profile_report;





extern enum profile_reproducibility flag_profile_reproducible;





extern enum profile_update flag_profile_update;





extern int flag_profile_use;





extern int flag_profile_values;





extern int flag_protect_parens;





extern int flag_range_check;





extern int flag_real4_kind;





extern int flag_real8_kind;





extern int flag_realloc_lhs;





extern int flag_reciprocal_math;





extern int flag_record_gcc_switches;





extern int flag_record_marker;





extern int flag_recursive;





extern int flag_ree;





extern int flag_rename_registers;





extern int flag_reorder_blocks;





extern enum reorder_blocks_algorithm flag_reorder_blocks_algorithm;





extern int flag_reorder_blocks_and_partition;





extern int flag_reorder_functions;





extern int flag_repack_arrays;





extern int flag_replace_objc_classes;





extern int flag_report_bug;





extern int go_require_return_statement;





extern int flag_rerun_cse_after_loop;





extern int flag_resched_modulo_sched;





extern int flag_rounding_math;





extern int flag_rtti;





extern int flag_sanitize_address_use_after_scope;





extern int flag_sanitize_undefined_trap_on_error;





extern int flag_save_optimization_record;





extern int flag_sched_critical_path_heuristic;





extern int flag_sched_dep_count_heuristic;





extern int flag_sched_group_heuristic;





extern int flag_schedule_interblock;





extern int flag_sched_last_insn_heuristic;





extern int flag_sched_pressure;





extern int flag_sched_rank_heuristic;





extern int flag_schedule_speculative;





extern int flag_sched_spec_insn_heuristic;





extern int flag_schedule_speculative_load;





extern int flag_schedule_speculative_load_dangerous;





extern int flag_sched_stalled_insns;





extern int flag_sched_stalled_insns_dep;





extern int sched_verbose_param;





extern int flag_sched2_use_superblocks;





extern int flag_schedule_fusion;





extern int flag_schedule_insns;





extern int flag_schedule_insns_after_reload;





extern int flag_second_underscore;





extern int flag_section_anchors;





extern int flag_sel_sched_pipelining;





extern int flag_sel_sched_pipelining_outer_loops;





extern int flag_sel_sched_reschedule_pipelined;





extern int flag_selective_scheduling;





extern int flag_selective_scheduling2;





extern const char *flag_self_test;





extern int flag_semantic_interposition;





extern int flag_short_enums;





extern int flag_short_wchar;





extern int flag_show_column;





extern int flag_shrink_wrap;





extern int flag_shrink_wrap_separate;





extern int flag_sign_zero;





extern int flag_signaling_nans;





extern int flag_signed_bitfields;





extern int flag_signed_char;





extern int flag_signed_zeros;





extern enum vect_cost_model flag_simd_cost_model;





extern int flag_single_precision_constant;





extern int flag_sized_deallocation;





extern int flag_split_ivs_in_unroller;





extern int flag_split_loops;





extern int flag_split_paths;





extern int flag_split_stack;





extern int flag_split_wide_types;





extern int flag_split_wide_types_early;





extern int flag_ssa_backprop;





extern int flag_ssa_phiopt;





extern enum scalar_storage_order_kind default_sso;





extern int flag_stack_arrays;





extern int flag_stack_clash_protection;





extern int flag_stack_protect;





extern enum stack_reuse_level flag_stack_reuse;





extern int flag_stack_usage;





extern int flag_detailed_statistics;





extern int flag_stdarg_opt;





extern int flag_store_merging;





extern int flag_strict_aliasing;





extern int flag_strict_enums;





extern int flag_strict_volatile_bitfields;





extern int flag_strong_eval_order;





extern int flag_switch_errors;





extern int flag_sync_libcalls;





extern int flag_syntax_only;





extern int flag_tail_call_workaround;





extern int template_backtrace_limit;





extern int flag_test_coverage;





extern int flag_test_forall_temp;





extern int flag_thread_jumps;





extern int flag_threadsafe_statics;





extern int time_report;





extern int time_report_details;





extern enum tls_model flag_tls_default;





extern int flag_toplevel_reorder;





extern int flag_tracer;





extern int flag_trampolines;





extern int flag_trapping_math;





extern int flag_trapv;





extern int flag_tree_bit_ccp;





extern int flag_tree_builtin_call_dce;





extern int flag_tree_ccp;





extern int flag_tree_ch;





extern int flag_tree_coalesce_vars;





extern int flag_tree_copy_prop;





extern int flag_tree_cselim;





extern int flag_tree_dce;





extern int flag_tree_dom;





extern int flag_tree_dse;





extern int flag_tree_forwprop;





extern int flag_tree_fre;





extern int flag_tree_loop_distribute_patterns;





extern int flag_tree_loop_distribution;





extern int flag_tree_loop_if_convert;





extern int flag_tree_loop_im;





extern int flag_tree_loop_ivcanon;





extern int flag_tree_loop_optimize;





extern int flag_tree_loop_vectorize;





extern int flag_tree_live_range_split;





extern int flag_tree_parallelize_loops;





extern int flag_tree_partial_pre;





extern int flag_tree_phiprop;





extern int flag_tree_pre;





extern int flag_tree_pta;





extern int flag_tree_reassoc;





extern int flag_tree_scev_cprop;





extern int flag_tree_sink;





extern int flag_tree_slp_vectorize;





extern int flag_tree_slsr;





extern int flag_tree_sra;





extern int flag_tree_switch_conversion;





extern int flag_tree_tail_merge;





extern int flag_tree_ter;





extern int flag_tree_vrp;





extern int flag_unconstrained_commons;





extern int flag_underscoring;





extern int flag_unit_at_a_time;





extern int flag_unroll_all_loops;





extern int flag_cunroll_grow_size;





extern int flag_unroll_loops;





extern int flag_unsafe_math_optimizations;





extern int flag_unswitch_loops;





extern int flag_unwind_tables;





extern int flag_use_cxa_atexit;





extern int flag_use_cxa_get_exception_ptr;





extern int flag_use_linker_plugin;





extern int flag_var_tracking;





extern int flag_var_tracking_assignments;





extern int flag_var_tracking_assignments_toggle;





extern int flag_var_tracking_uninit;





extern int flag_variable_expansion_in_unroller;





extern enum vect_cost_model flag_vect_cost_model;





extern int flag_verbose_asm;





extern int flag_version_loops_for_strides;





extern int flag_visibility_ms_compat;





extern enum symbol_visibility default_visibility;





extern int flag_value_profile_transformations;





extern enum vtv_priority flag_vtable_verify;





extern int flag_vtv_counts;





extern int flag_vtv_debug;





extern int flag_weak;





extern int flag_web;





extern int flag_whole_program;





extern int flag_working_directory;





extern const char *flag_wpa;





extern int flag_wrapv;





extern int flag_wrapv_pointer;





extern int flag_zero_initialized_in_bss;





extern int flag_zero_link;





extern int dwarf2out_as_loc_support;





extern int dwarf2out_as_locview_support;





extern int debug_column_info;





extern int flag_describe_dies;





extern int dwarf_version;





extern int flag_gen_declaration;





extern int debug_generate_pub_sections;





extern int flag_lto_gimple_stats;





extern int debug_inline_points;





extern int debug_internal_reset_location_views;





extern int dwarf_record_gcc_switches;





extern int dwarf_split_debug_info;





extern int debug_nonbind_markers_p;





extern int dwarf_strict;





extern int flag_gtoggle;





extern int debug_variable_location_views;





extern int flag_lto_dump_tool_help;





extern const char *imultiarch;





extern const char *plugindir_string;





extern int flag_lto_dump_list;





extern enum calling_abi ix86_abi;





extern enum pmode ix86_pmode;





extern enum ix86_align_data ix86_align_data_type;





extern int flag_android;





extern const char *ix86_arch_string;





extern enum asm_dialect ix86_asm_dialect;





extern int linux_libc;





extern int ix86_branch_cost;





extern int flag_cet_switch;





extern enum cmodel ix86_cmodel;





extern int flag_dispatch_scheduler;





extern int ix86_dump_tunes;





extern int flag_fentry;





extern const char *fentry_name;





extern const char *fentry_section;





extern int ix86_force_drap;





extern int flag_force_indirect_call;





extern enum fpmath_unit ix86_fpmath;





extern enum indirect_branch ix86_function_return;





extern int ix86_incoming_stack_boundary_arg;





extern int ix86_indirect_branch_register;





extern enum indirect_branch ix86_indirect_branch;





extern enum instrument_return ix86_instrument_return;





extern int ix86_section_threshold;





extern int flag_manual_endbr;





extern const char *ix86_tune_memcpy_strategy;





extern const char *ix86_tune_memset_strategy;





extern int ix86_tune_no_default;





extern int flag_nop_mcount;





extern enum prefer_vector_width prefer_vector_width_type;





extern int ix86_preferred_stack_boundary_arg;





extern const char *ix86_recip_name;





extern int flag_record_mcount;





extern int ix86_flag_record_return;





extern int ix86_regparm;





extern int flag_skip_rax_setup;





extern int ix86_sse2avx;





extern const char *ix86_stack_protector_guard_offset_str;





extern const char *ix86_stack_protector_guard_reg_str;





extern const char *ix86_stack_protector_guard_symbol_str;





extern enum stack_protector_guard ix86_stack_protector_guard;





extern int ix86_force_align_arg_pointer;





extern enum stringop_alg ix86_stringop_alg;





extern enum tls_dialect ix86_tls_dialect;





extern const char *ix86_tune_ctrl_string;





extern const char *ix86_tune_string;





extern enum ix86_veclibabi ix86_veclibabi_type;





extern int flag_lto_name_sort;





extern const char *asm_file_name;





extern int flag_lto_dump_objects;





extern int pass_exit_codes;





extern int flag_pedantic_errors;





extern int use_pipes;





extern const char *print_file_name;





extern int print_multi_directory;





extern int print_multi_lib;





extern int print_multi_os_directory;





extern int print_multiarch;





extern const char *print_prog_name;





extern int print_search_dirs;





extern int print_sysroot;





extern int print_sysroot_headers_suffix;





extern int flag_lto_print_value;





extern int quiet_flag;





extern int flag_lto_reverse_sort;





extern int flag_lto_size_sort;





extern const char *flag_lto_dump_symbol;





extern int report_times;





extern int flag_lto_tree_stats;





extern int flag_lto_dump_type_stats;





extern int flag_undef;





extern int verbose_flag;





extern int version_flag;





extern int inhibit_warnings;





extern const char *wrapper_string;
# 7516 "./options.h"
struct cl_optimization
{
  const char *x_str_align_functions;
  const char *x_str_align_jumps;
  const char *x_str_align_labels;
  const char *x_str_align_loops;
  int x_param_align_loop_iterations;
  int x_param_align_threshold;
  int x_param_asan_protect_allocas;
  int x_param_asan_instrument_reads;
  int x_param_asan_instrument_writes;
  int x_param_asan_instrumentation_with_call_threshold;
  int x_param_asan_memintrin;
  int x_param_asan_stack;
  int x_param_asan_use_after_return;
  int x_param_avg_loop_niter;
  int x_param_avoid_fma_max_bits;
  int x_param_builtin_expect_probability;
  int x_param_builtin_string_cmp_inline_length;
  int x_param_case_values_threshold;
  int x_param_comdat_sharing_probability;
  int x_param_dse_max_alias_queries_per_store;
  int x_param_dse_max_object_size;
  int x_param_early_inlining_insns;
  int x_param_fsm_maximum_phi_arguments;
  int x_param_fsm_scale_path_blocks;
  int x_param_fsm_scale_path_stmts;
  int x_param_gcse_after_reload_critical_fraction;
  int x_param_gcse_after_reload_partial_fraction;
  int x_param_gcse_cost_distance_ratio;
  int x_param_gcse_unrestricted_cost;
  int x_param_graphite_max_arrays_per_scop;
  int x_param_graphite_max_nb_scop_params;
  int x_param_inline_heuristics_hint_percent;
  int x_param_inline_min_speedup;
  int x_param_inline_unit_growth;
  int x_param_ipa_cp_eval_threshold;
  int x_param_ipa_cp_loop_hint_bonus;
  int x_param_ipa_cp_max_recursive_depth;
  int x_param_ipa_cp_min_recursive_probability;
  int x_param_ipa_cp_recursion_penalty;
  int x_param_ipa_cp_single_call_penalty;
  int x_param_ipa_cp_unit_growth;
  int x_param_ipa_cp_value_list_size;
  int x_param_ipa_max_aa_steps;
  int x_param_ipa_max_agg_items;
  int x_param_ipa_max_param_expr_ops;
  int x_param_ipa_max_switch_predicate_bounds;
  int x_param_ipa_sra_max_replacements;
  int x_param_ipa_sra_ptr_growth_factor;
  int x_param_ira_loop_reserved_regs;
  int x_param_ira_max_conflict_table_size;
  int x_param_ira_max_loops_num;
  int x_param_iv_always_prune_cand_set_bound;
  int x_param_iv_consider_all_candidates_bound;
  int x_param_iv_max_considered_uses;
  int x_param_jump_table_max_growth_ratio_for_size;
  int x_param_jump_table_max_growth_ratio_for_speed;
  int x_param_l1_cache_line_size;
  int x_param_l1_cache_size;
  int x_param_l2_cache_size;
  int x_param_large_function_growth;
  int x_param_large_function_insns;
  int x_param_stack_frame_growth;
  int x_param_large_stack_frame;
  int x_param_large_unit_insns;
  int x_param_lim_expensive;
  int x_param_loop_block_tile_size;
  int x_param_loop_interchange_max_num_stmts;
  int x_param_loop_interchange_stride_ratio;
  int x_param_loop_invariant_max_bbs_in_loop;
  int x_param_loop_max_datarefs_for_datadeps;
  int x_param_loop_versioning_max_inner_insns;
  int x_param_loop_versioning_max_outer_insns;
  int x_param_lra_inheritance_ebb_probability_cutoff;
  int x_param_lra_max_considered_reload_pseudos;
  int x_param_max_average_unrolled_insns;
  int x_param_max_combine_insns;
  int x_param_max_unroll_iterations;
  int x_param_max_completely_peel_times;
  int x_param_max_completely_peeled_insns;
  int x_param_max_crossjump_edges;
  int x_param_max_cse_insns;
  int x_param_max_cse_path_length;
  int x_param_max_cselib_memory_locations;
  int x_param_max_debug_marker_count;
  int x_param_max_delay_slot_insn_search;
  int x_param_max_delay_slot_live_search;
  int x_param_max_dse_active_local_stores;
  int x_param_early_inliner_max_iterations;
  int x_param_max_find_base_term_values;
  int x_param_max_fsm_thread_length;
  int x_param_max_fsm_thread_path_insns;
  int x_param_max_fsm_thread_paths;
  int x_param_max_gcse_insertion_ratio;
  int x_param_max_gcse_memory;
  int x_param_max_goto_duplication_insns;
  int x_param_max_grow_copy_bb_insns;
  int x_param_max_hoist_depth;
  int x_param_max_inline_insns_auto;
  int x_param_max_inline_insns_recursive_auto;
  int x_param_max_inline_insns_recursive;
  int x_param_max_inline_insns_single;
  int x_param_max_inline_insns_size;
  int x_param_max_inline_insns_small;
  int x_param_max_inline_recursive_depth_auto;
  int x_param_max_inline_recursive_depth;
  int x_param_max_isl_operations;
  int x_param_max_iterations_computation_cost;
  int x_param_max_iterations_to_track;
  int x_param_max_jump_thread_duplication_stmts;
  int x_param_max_last_value_rtl;
  int x_param_max_loop_header_insns;
  int x_param_max_modulo_backtrack_attempts;
  int x_param_max_partial_antic_length;
  int x_param_max_peel_branches;
  int x_param_max_peel_times;
  int x_param_max_peeled_insns;
  int x_param_max_pending_list_length;
  int x_param_max_pipeline_region_blocks;
  int x_param_max_pipeline_region_insns;
  int x_param_max_pow_sqrt_depth;
  int x_param_max_predicted_iterations;
  int x_param_max_reload_search_insns;
  int x_param_max_rtl_if_conversion_insns;
  int x_param_max_rtl_if_conversion_predictable_cost;
  int x_param_max_rtl_if_conversion_unpredictable_cost;
  int x_param_max_sched_extend_regions_iters;
  int x_param_max_sched_insn_conflict_delay;
  int x_param_max_sched_ready_insns;
  int x_param_max_sched_region_blocks;
  int x_param_max_sched_region_insns;
  int x_param_max_slsr_candidate_scan;
  int x_param_max_speculative_devirt_maydefs;
  int x_param_max_stores_to_merge;
  int x_param_max_stores_to_sink;
  int x_param_max_tail_merge_comparisons;
  int x_param_max_tail_merge_iterations;
  int x_param_max_tracked_strlens;
  int x_param_max_tree_if_conversion_phi_args;
  int x_param_max_unroll_times;
  int x_param_max_unrolled_insns;
  int x_param_max_unswitch_insns;
  int x_param_max_unswitch_level;
  int x_param_max_variable_expansions;
  int x_param_max_vartrack_expr_depth;
  int x_param_max_vartrack_reverse_op_size;
  int x_param_max_vartrack_size;
  int x_param_max_vrp_switch_assertions;
  int x_param_min_crossjump_insns;
  int x_param_min_inline_recursive_probability;
  int x_param_min_insn_to_prefetch_ratio;
  int x_param_min_loop_cond_split_prob;
  int x_param_min_size_for_stack_sharing;
  int x_param_min_spec_prob;
  int x_param_min_vect_loop_bound;
  int x_param_parloops_chunk_size;
  int x_param_parloops_min_per_thread;
  int x_param_parloops_schedule;
  int x_param_partial_inlining_entry_probability;
  int x_param_predictable_branch_outcome;
  int x_param_prefetch_dynamic_strides;
  int x_param_prefetch_latency;
  int x_param_prefetch_min_insn_to_mem_ratio;
  int x_param_prefetch_minimum_stride;
  int x_param_rpo_vn_max_loop_depth;
  int x_param_sccvn_max_alias_queries_per_access;
  int x_param_scev_max_expr_complexity;
  int x_param_scev_max_expr_size;
  int x_param_sched_autopref_queue_depth;
  int x_param_sched_mem_true_dep_cost;
  int x_param_sched_pressure_algorithm;
  int x_param_sched_spec_prob_cutoff;
  int x_param_sched_state_edge_prob_cutoff;
  int x_param_selsched_insns_to_rename;
  int x_param_selsched_max_lookahead;
  int x_param_selsched_max_sched_times;
  int x_param_simultaneous_prefetches;
  int x_param_sink_frequency_threshold;
  int x_param_slp_max_insns_in_bb;
  int x_param_sms_dfa_history;
  int x_param_sms_loop_average_count_threshold;
  int x_param_sms_max_ii_factor;
  int x_param_sms_min_sc;
  int x_param_sra_max_propagations;
  int x_param_sra_max_scalarization_size_size;
  int x_param_sra_max_scalarization_size_speed;
  int x_param_ssa_name_def_chain_limit;
  int x_param_ssp_buffer_size;
  int x_param_stack_clash_protection_guard_size;
  int x_param_stack_clash_protection_probe_interval;
  int x_param_store_merging_allow_unaligned;
  int x_param_store_merging_max_size;
  int x_param_switch_conversion_branch_ratio;
  int x_param_tm_max_aggregate_size;
  int x_param_tracer_dynamic_coverage_feedback;
  int x_param_tracer_dynamic_coverage;
  int x_param_tracer_max_code_growth;
  int x_param_tracer_min_branch_probability_feedback;
  int x_param_tracer_min_branch_probability;
  int x_param_tracer_min_branch_ratio;
  int x_param_tree_reassoc_width;
  int x_param_uninit_control_dep_attempts;
  int x_param_uninlined_function_insns;
  int x_param_uninlined_function_time;
  int x_param_uninlined_function_thunk_insns;
  int x_param_uninlined_function_thunk_time;
  int x_param_unlikely_bb_count_fraction;
  int x_param_unroll_jam_max_unroll;
  int x_param_unroll_jam_min_percent;
  int x_param_use_after_scope_direct_emission_threshold;
  int x_param_vect_epilogues_nomask;
  int x_param_vect_max_peeling_for_alignment;
  int x_param_vect_max_version_for_alias_checks;
  int x_param_vect_max_version_for_alignment_checks;
  int x_param_vect_partial_vector_usage;
  int x_flag_sched_stalled_insns;
  int x_flag_sched_stalled_insns_dep;
  int x_flag_tree_parallelize_loops;
  enum excess_precision x_flag_excess_precision;
  enum fp_contract_mode x_flag_fp_contract_mode;
  enum ira_algorithm x_flag_ira_algorithm;
  enum ira_region x_flag_ira_region;
  enum live_patching_level x_flag_live_patching;
  enum reorder_blocks_algorithm x_flag_reorder_blocks_algorithm;
  enum vect_cost_model x_flag_simd_cost_model;
  enum stack_reuse_level x_flag_stack_reuse;
  enum vect_cost_model x_flag_vect_cost_model;
  unsigned char x_optimize;
  unsigned char x_optimize_size;
  unsigned char x_optimize_debug;
  unsigned char x_optimize_fast;
  signed char x_warn_inline;
  signed char x_flag_aggressive_loop_optimizations;
  signed char x_flag_align_functions;
  signed char x_flag_align_jumps;
  signed char x_flag_align_labels;
  signed char x_flag_align_loops;
  signed char x_flag_allocation_dce;
  signed char x_flag_store_data_races;
  signed char x_flag_associative_math;
  signed char x_flag_assume_phsa;
  signed char x_flag_asynchronous_unwind_tables;
  signed char x_flag_auto_inc_dec;
  signed char x_flag_branch_on_count_reg;
  signed char x_flag_branch_probabilities;
  signed char x_flag_caller_saves;
  signed char x_flag_code_hoisting;
  signed char x_flag_combine_stack_adjustments;
  signed char x_flag_compare_elim_after_reload;
  signed char x_flag_conserve_stack;
  signed char x_flag_cprop_registers;
  signed char x_flag_crossjumping;
  signed char x_flag_cse_follow_jumps;
  signed char x_flag_cx_fortran_rules;
  signed char x_flag_cx_limited_range;
  signed char x_flag_dce;
  signed char x_flag_defer_pop;
  signed char x_flag_delayed_branch;
  signed char x_flag_delete_dead_exceptions;
  signed char x_flag_delete_null_pointer_checks;
  signed char x_flag_devirtualize;
  signed char x_flag_devirtualize_speculatively;
  signed char x_flag_dse;
  signed char x_flag_early_inlining;
  signed char x_flag_exceptions;
  signed char x_flag_expensive_optimizations;
  signed char x_flag_finite_loops;
  signed char x_flag_finite_math_only;
  signed char x_flag_float_store;
  signed char x_flag_forward_propagate;
  signed char x_flag_fp_int_builtin_inexact;
  signed char x_flag_no_function_cse;
  signed char x_flag_gcse;
  signed char x_flag_gcse_after_reload;
  signed char x_flag_gcse_las;
  signed char x_flag_gcse_lm;
  signed char x_flag_gcse_sm;
  signed char x_flag_graphite;
  signed char x_flag_graphite_identity;
  signed char x_flag_guess_branch_prob;
  signed char x_flag_hoist_adjacent_loads;
  signed char x_flag_if_conversion;
  signed char x_flag_if_conversion2;
  signed char x_flag_indirect_inlining;
  signed char x_flag_no_inline;
  signed char x_flag_inline_atomics;
  signed char x_flag_inline_functions;
  signed char x_flag_inline_functions_called_once;
  signed char x_flag_inline_small_functions;
  signed char x_flag_ipa_bit_cp;
  signed char x_flag_ipa_cp;
  signed char x_flag_ipa_cp_clone;
  signed char x_flag_ipa_icf;
  signed char x_flag_ipa_icf_functions;
  signed char x_flag_ipa_icf_variables;
  signed char x_flag_ipa_profile;
  signed char x_flag_ipa_pta;
  signed char x_flag_ipa_pure_const;
  signed char x_flag_ipa_ra;
  signed char x_flag_ipa_reference;
  signed char x_flag_ipa_reference_addressable;
  signed char x_flag_ipa_sra;
  signed char x_flag_ipa_stack_alignment;
  signed char x_flag_ipa_vrp;
  signed char x_flag_ira_hoist_pressure;
  signed char x_flag_ira_loop_pressure;
  signed char x_flag_ira_share_save_slots;
  signed char x_flag_ira_share_spill_slots;
  signed char x_flag_isolate_erroneous_paths_attribute;
  signed char x_flag_isolate_erroneous_paths_dereference;
  signed char x_flag_ivopts;
  signed char x_flag_jump_tables;
  signed char x_flag_keep_gc_roots_live;
  signed char x_flag_lifetime_dse;
  signed char x_flag_limit_function_alignment;
  signed char x_flag_live_range_shrinkage;
  signed char x_flag_loop_interchange;
  signed char x_flag_loop_nest_optimize;
  signed char x_flag_loop_parallelize_all;
  signed char x_flag_unroll_jam;
  signed char x_flag_lra_remat;
  signed char x_flag_errno_math;
  signed char x_flag_modulo_sched;
  signed char x_flag_modulo_sched_allow_regmoves;
  signed char x_flag_move_loop_invariants;
  signed char x_flag_non_call_exceptions;
  signed char x_flag_nothrow_opt;
  signed char x_flag_omit_frame_pointer;
  signed char x_flag_opt_info;
  signed char x_flag_optimize_sibling_calls;
  signed char x_flag_optimize_strlen;
  signed char x_flag_pack_struct;
  signed char x_flag_partial_inlining;
  signed char x_flag_peel_loops;
  signed char x_flag_no_peephole;
  signed char x_flag_peephole2;
  signed char x_flag_plt;
  signed char x_flag_predictive_commoning;
  signed char x_flag_prefetch_loop_arrays;
  signed char x_flag_printf_return_value;
  signed char x_flag_profile_partial_training;
  signed char x_flag_profile_reorder_functions;
  signed char x_flag_reciprocal_math;
  signed char x_flag_ree;
  signed char x_flag_pcc_struct_return;
  signed char x_flag_rename_registers;
  signed char x_flag_reorder_blocks;
  signed char x_flag_reorder_blocks_and_partition;
  signed char x_flag_reorder_functions;
  signed char x_flag_rerun_cse_after_loop;
  signed char x_flag_resched_modulo_sched;
  signed char x_flag_rounding_math;
  signed char x_flag_rtti;
  signed char x_flag_save_optimization_record;
  signed char x_flag_sched_critical_path_heuristic;
  signed char x_flag_sched_dep_count_heuristic;
  signed char x_flag_sched_group_heuristic;
  signed char x_flag_schedule_interblock;
  signed char x_flag_sched_last_insn_heuristic;
  signed char x_flag_sched_pressure;
  signed char x_flag_sched_rank_heuristic;
  signed char x_flag_schedule_speculative;
  signed char x_flag_sched_spec_insn_heuristic;
  signed char x_flag_schedule_speculative_load;
  signed char x_flag_schedule_speculative_load_dangerous;
  signed char x_flag_sched2_use_superblocks;
  signed char x_flag_schedule_fusion;
  signed char x_flag_schedule_insns;
  signed char x_flag_schedule_insns_after_reload;
  signed char x_flag_section_anchors;
  signed char x_flag_sel_sched_pipelining;
  signed char x_flag_sel_sched_pipelining_outer_loops;
  signed char x_flag_sel_sched_reschedule_pipelined;
  signed char x_flag_selective_scheduling;
  signed char x_flag_selective_scheduling2;
  signed char x_flag_short_enums;
  signed char x_flag_short_wchar;
  signed char x_flag_shrink_wrap;
  signed char x_flag_shrink_wrap_separate;
  signed char x_flag_signaling_nans;
  signed char x_flag_signed_zeros;
  signed char x_flag_single_precision_constant;
  signed char x_flag_split_ivs_in_unroller;
  signed char x_flag_split_loops;
  signed char x_flag_split_paths;
  signed char x_flag_split_wide_types;
  signed char x_flag_split_wide_types_early;
  signed char x_flag_ssa_backprop;
  signed char x_flag_ssa_phiopt;
  signed char x_flag_stack_clash_protection;
  signed char x_flag_stack_protect;
  signed char x_flag_stdarg_opt;
  signed char x_flag_store_merging;
  signed char x_flag_strict_aliasing;
  signed char x_flag_strict_enums;
  signed char x_flag_strict_volatile_bitfields;
  signed char x_flag_thread_jumps;
  signed char x_flag_threadsafe_statics;
  signed char x_flag_toplevel_reorder;
  signed char x_flag_tracer;
  signed char x_flag_trapping_math;
  signed char x_flag_trapv;
  signed char x_flag_tree_bit_ccp;
  signed char x_flag_tree_builtin_call_dce;
  signed char x_flag_tree_ccp;
  signed char x_flag_tree_ch;
  signed char x_flag_tree_coalesce_vars;
  signed char x_flag_tree_copy_prop;
  signed char x_flag_tree_cselim;
  signed char x_flag_tree_dce;
  signed char x_flag_tree_dom;
  signed char x_flag_tree_dse;
  signed char x_flag_tree_forwprop;
  signed char x_flag_tree_fre;
  signed char x_flag_tree_loop_distribute_patterns;
  signed char x_flag_tree_loop_distribution;
  signed char x_flag_tree_loop_if_convert;
  signed char x_flag_tree_loop_im;
  signed char x_flag_tree_loop_ivcanon;
  signed char x_flag_tree_loop_optimize;
  signed char x_flag_tree_loop_vectorize;
  signed char x_flag_tree_live_range_split;
  signed char x_flag_tree_partial_pre;
  signed char x_flag_tree_phiprop;
  signed char x_flag_tree_pre;
  signed char x_flag_tree_pta;
  signed char x_flag_tree_reassoc;
  signed char x_flag_tree_scev_cprop;
  signed char x_flag_tree_sink;
  signed char x_flag_tree_slp_vectorize;
  signed char x_flag_tree_slsr;
  signed char x_flag_tree_sra;
  signed char x_flag_tree_switch_conversion;
  signed char x_flag_tree_tail_merge;
  signed char x_flag_tree_ter;
  signed char x_flag_tree_vrp;
  signed char x_flag_unconstrained_commons;
  signed char x_flag_unroll_all_loops;
  signed char x_flag_cunroll_grow_size;
  signed char x_flag_unroll_loops;
  signed char x_flag_unsafe_math_optimizations;
  signed char x_flag_unswitch_loops;
  signed char x_flag_unwind_tables;
  signed char x_flag_var_tracking;
  signed char x_flag_var_tracking_assignments;
  signed char x_flag_var_tracking_assignments_toggle;
  signed char x_flag_var_tracking_uninit;
  signed char x_flag_variable_expansion_in_unroller;
  signed char x_flag_version_loops_for_strides;
  signed char x_flag_value_profile_transformations;
  signed char x_flag_web;
  signed char x_flag_wrapv;
  signed char x_flag_wrapv_pointer;
};


struct cl_target_option
{
  long x_ix86_isa_flags2_explicit;
  long x_ix86_isa_flags_explicit;
  const char *x_ix86_arch_string;
  const char *x_ix86_recip_name;
  const char *x_ix86_tune_ctrl_string;
  const char *x_ix86_tune_memcpy_strategy;
  const char *x_ix86_tune_memset_strategy;
  const char *x_ix86_tune_string;
  long x_ix86_stack_protector_guard_offset;
  addr_space_t x_ix86_stack_protector_guard_reg;
          int x_target_flags;
  long x_ix86_isa_flags;
  long x_ix86_isa_flags2;
  enum fpmath_unit x_ix86_fpmath;
          int x_ix86_target_flags;
  enum prefer_vector_width x_prefer_vector_width_type;
  enum asm_dialect x_ix86_asm_dialect;
  enum calling_abi x_ix86_abi;
  enum cmodel x_ix86_cmodel;
  enum ix86_veclibabi x_ix86_veclibabi_type;
  enum pmode x_ix86_pmode;
  enum stack_protector_guard x_ix86_stack_protector_guard;
  enum stringop_alg x_ix86_stringop_alg;
  enum tls_dialect x_ix86_tls_dialect;
  int x_ix86_branch_cost;
  int x_ix86_dump_tunes;
  int x_ix86_force_align_arg_pointer;
  int x_ix86_force_drap;
  int x_ix86_incoming_stack_boundary_arg;
  int x_ix86_preferred_stack_boundary_arg;
  int x_ix86_regparm;
  int x_ix86_section_threshold;
  int x_ix86_sse2avx;
  int x_ix86_tune_no_default;
  int x_recip_mask_explicit;
  int x_recip_mask;
  unsigned char arch;
  unsigned char arch_specified;
  unsigned char branch_cost;
  unsigned char prefetch_sse;
  unsigned char schedule;
  unsigned char tune;
  unsigned char tune_defaulted;
};



extern void cl_optimization_save (struct cl_optimization *, struct gcc_options *);


extern void cl_optimization_restore (struct gcc_options *, struct cl_optimization *);


extern void cl_optimization_print (FILE *, int, struct cl_optimization *);


extern void cl_optimization_print_diff (FILE *, int, cl_optimization *ptr1, cl_optimization *ptr2);


extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *);


extern void cl_target_option_restore (struct gcc_options *, struct cl_target_option *);


extern void cl_target_option_print (FILE *, int, struct cl_target_option *);


extern void cl_target_option_print_diff (FILE *, int, cl_target_option *ptr1, cl_target_option *ptr2);


extern bool cl_target_option_eq (const struct cl_target_option *, const struct cl_target_option *);


extern void cl_target_option_free (struct cl_target_option *);


extern hashval_t cl_target_option_hash (const struct cl_target_option *);


extern hashval_t cl_optimization_hash (const struct cl_optimization *);


extern bool cl_optimization_option_eq (cl_optimization const *ptr1, cl_optimization const *ptr2);


extern void cl_optimization_option_free (cl_optimization *ptr1);


extern void cl_optimization_compare (gcc_options *ptr1, gcc_options *ptr2);
# 8579 "./options.h"
enum opt_code
{
  OPT____ = 0,
# 8590 "./options.h"
  OPT__completion_ = 9,
# 8610 "./options.h"
  OPT__help = 29,
  OPT__help_ = 30,
# 8638 "./options.h"
  OPT__no_sysroot_suffix = 57,



  OPT__output_pch_ = 61,

  OPT__param_align_loop_iterations_ = 63,
  OPT__param_align_threshold_ = 64,
  OPT__param_analyzer_bb_explosion_factor_ = 65,
  OPT__param_analyzer_max_enodes_for_full_dump_ = 66,
  OPT__param_analyzer_max_enodes_per_program_point_ = 67,
  OPT__param_analyzer_max_recursion_depth_ = 68,
  OPT__param_analyzer_max_svalue_depth_ = 69,
  OPT__param_analyzer_min_snodes_for_call_summary_ = 70,
  OPT__param_asan_globals_ = 71,
  OPT__param_asan_instrument_allocas_ = 72,
  OPT__param_asan_instrument_reads_ = 73,
  OPT__param_asan_instrument_writes_ = 74,
  OPT__param_asan_instrumentation_with_call_threshold_ = 75,
  OPT__param_asan_memintrin_ = 76,
  OPT__param_asan_stack_ = 77,
  OPT__param_asan_use_after_return_ = 78,
  OPT__param_avg_loop_niter_ = 79,
  OPT__param_avoid_fma_max_bits_ = 80,
  OPT__param_balance_partitions_ = 81,
  OPT__param_builtin_expect_probability_ = 82,
  OPT__param_builtin_string_cmp_inline_length_ = 83,
  OPT__param_case_values_threshold_ = 84,
  OPT__param_comdat_sharing_probability_ = 85,
  OPT__param_cxx_max_namespaces_for_diagnostic_help_ = 86,
  OPT__param_dse_max_alias_queries_per_store_ = 87,
  OPT__param_dse_max_object_size_ = 88,
  OPT__param_early_inlining_insns_ = 89,
  OPT__param_fsm_maximum_phi_arguments_ = 90,
  OPT__param_fsm_scale_path_blocks_ = 91,
  OPT__param_fsm_scale_path_stmts_ = 92,
  OPT__param_gcse_after_reload_critical_fraction_ = 93,
  OPT__param_gcse_after_reload_partial_fraction_ = 94,
  OPT__param_gcse_cost_distance_ratio_ = 95,
  OPT__param_gcse_unrestricted_cost_ = 96,
  OPT__param_ggc_min_expand_ = 97,
  OPT__param_ggc_min_heapsize_ = 98,
  OPT__param_gimple_fe_computed_hot_bb_threshold_ = 99,
  OPT__param_graphite_allow_codegen_errors_ = 100,
  OPT__param_graphite_max_arrays_per_scop_ = 101,
  OPT__param_graphite_max_nb_scop_params_ = 102,
  OPT__param_hash_table_verification_limit_ = 103,
  OPT__param_hot_bb_count_fraction_ = 104,
  OPT__param_hot_bb_count_ws_permille_ = 105,
  OPT__param_hot_bb_frequency_fraction_ = 106,
  OPT__param_inline_heuristics_hint_percent_ = 107,
  OPT__param_inline_min_speedup_ = 108,
  OPT__param_inline_unit_growth_ = 109,
  OPT__param_integer_share_limit_ = 110,
  OPT__param_ipa_cp_eval_threshold_ = 111,
  OPT__param_ipa_cp_loop_hint_bonus_ = 112,
  OPT__param_ipa_cp_max_recursive_depth_ = 113,
  OPT__param_ipa_cp_min_recursive_probability_ = 114,
  OPT__param_ipa_cp_recursion_penalty_ = 115,
  OPT__param_ipa_cp_single_call_penalty_ = 116,
  OPT__param_ipa_cp_unit_growth_ = 117,
  OPT__param_ipa_cp_value_list_size_ = 118,
  OPT__param_ipa_max_aa_steps_ = 119,
  OPT__param_ipa_max_agg_items_ = 120,
  OPT__param_ipa_max_param_expr_ops_ = 121,
  OPT__param_ipa_max_switch_predicate_bounds_ = 122,
  OPT__param_ipa_sra_max_replacements_ = 123,
  OPT__param_ipa_sra_ptr_growth_factor_ = 124,
  OPT__param_ira_loop_reserved_regs_ = 125,
  OPT__param_ira_max_conflict_table_size_ = 126,
  OPT__param_ira_max_loops_num_ = 127,
  OPT__param_iv_always_prune_cand_set_bound_ = 128,
  OPT__param_iv_consider_all_candidates_bound_ = 129,
  OPT__param_iv_max_considered_uses_ = 130,
  OPT__param_jump_table_max_growth_ratio_for_size_ = 131,
  OPT__param_jump_table_max_growth_ratio_for_speed_ = 132,
  OPT__param_l1_cache_line_size_ = 133,
  OPT__param_l1_cache_size_ = 134,
  OPT__param_l2_cache_size_ = 135,
  OPT__param_large_function_growth_ = 136,
  OPT__param_large_function_insns_ = 137,
  OPT__param_large_stack_frame_growth_ = 138,
  OPT__param_large_stack_frame_ = 139,
  OPT__param_large_unit_insns_ = 140,
  OPT__param_lim_expensive_ = 141,
  OPT__param_logical_op_non_short_circuit_ = 142,
  OPT__param_loop_block_tile_size_ = 143,
  OPT__param_loop_interchange_max_num_stmts_ = 144,
  OPT__param_loop_interchange_stride_ratio_ = 145,
  OPT__param_loop_invariant_max_bbs_in_loop_ = 146,
  OPT__param_loop_max_datarefs_for_datadeps_ = 147,
  OPT__param_loop_versioning_max_inner_insns_ = 148,
  OPT__param_loop_versioning_max_outer_insns_ = 149,
  OPT__param_lra_inheritance_ebb_probability_cutoff_ = 150,
  OPT__param_lra_max_considered_reload_pseudos_ = 151,
  OPT__param_lto_max_partition_ = 152,
  OPT__param_lto_max_streaming_parallelism_ = 153,
  OPT__param_lto_min_partition_ = 154,
  OPT__param_lto_partitions_ = 155,
  OPT__param_max_average_unrolled_insns_ = 156,
  OPT__param_max_combine_insns_ = 157,
  OPT__param_max_completely_peel_loop_nest_depth_ = 158,
  OPT__param_max_completely_peel_times_ = 159,
  OPT__param_max_completely_peeled_insns_ = 160,
  OPT__param_max_crossjump_edges_ = 161,
  OPT__param_max_cse_insns_ = 162,
  OPT__param_max_cse_path_length_ = 163,
  OPT__param_max_cselib_memory_locations_ = 164,
  OPT__param_max_debug_marker_count_ = 165,
  OPT__param_max_delay_slot_insn_search_ = 166,
  OPT__param_max_delay_slot_live_search_ = 167,
  OPT__param_max_dse_active_local_stores_ = 168,
  OPT__param_max_early_inliner_iterations_ = 169,
  OPT__param_max_fields_for_field_sensitive_ = 170,
  OPT__param_max_find_base_term_values_ = 171,
  OPT__param_max_fsm_thread_length_ = 172,
  OPT__param_max_fsm_thread_path_insns_ = 173,
  OPT__param_max_fsm_thread_paths_ = 174,
  OPT__param_max_gcse_insertion_ratio_ = 175,
  OPT__param_max_gcse_memory_ = 176,
  OPT__param_max_goto_duplication_insns_ = 177,
  OPT__param_max_grow_copy_bb_insns_ = 178,
  OPT__param_max_hoist_depth_ = 179,
  OPT__param_max_inline_insns_auto_ = 180,
  OPT__param_max_inline_insns_recursive_auto_ = 181,
  OPT__param_max_inline_insns_recursive_ = 182,
  OPT__param_max_inline_insns_single_ = 183,
  OPT__param_max_inline_insns_size_ = 184,
  OPT__param_max_inline_insns_small_ = 185,
  OPT__param_max_inline_recursive_depth_auto_ = 186,
  OPT__param_max_inline_recursive_depth_ = 187,
  OPT__param_max_isl_operations_ = 188,
  OPT__param_max_iterations_computation_cost_ = 189,
  OPT__param_max_iterations_to_track_ = 190,
  OPT__param_max_jump_thread_duplication_stmts_ = 191,
  OPT__param_max_last_value_rtl_ = 192,
  OPT__param_max_loop_header_insns_ = 193,
  OPT__param_max_modulo_backtrack_attempts_ = 194,
  OPT__param_max_partial_antic_length_ = 195,
  OPT__param_max_peel_branches_ = 196,
  OPT__param_max_peel_times_ = 197,
  OPT__param_max_peeled_insns_ = 198,
  OPT__param_max_pending_list_length_ = 199,
  OPT__param_max_pipeline_region_blocks_ = 200,
  OPT__param_max_pipeline_region_insns_ = 201,
  OPT__param_max_pow_sqrt_depth_ = 202,
  OPT__param_max_predicted_iterations_ = 203,
  OPT__param_max_reload_search_insns_ = 204,
  OPT__param_max_rtl_if_conversion_insns_ = 205,
  OPT__param_max_rtl_if_conversion_predictable_cost_ = 206,
  OPT__param_max_rtl_if_conversion_unpredictable_cost_ = 207,
  OPT__param_max_sched_extend_regions_iters_ = 208,
  OPT__param_max_sched_insn_conflict_delay_ = 209,
  OPT__param_max_sched_ready_insns_ = 210,
  OPT__param_max_sched_region_blocks_ = 211,
  OPT__param_max_sched_region_insns_ = 212,
  OPT__param_max_slsr_cand_scan_ = 213,
  OPT__param_max_speculative_devirt_maydefs_ = 214,
  OPT__param_max_ssa_name_query_depth_ = 215,
  OPT__param_max_stores_to_merge_ = 216,
  OPT__param_max_stores_to_sink_ = 217,
  OPT__param_max_tail_merge_comparisons_ = 218,
  OPT__param_max_tail_merge_iterations_ = 219,
  OPT__param_max_tracked_strlens_ = 220,
  OPT__param_max_tree_if_conversion_phi_args_ = 221,
  OPT__param_max_unroll_times_ = 222,
  OPT__param_max_unrolled_insns_ = 223,
  OPT__param_max_unswitch_insns_ = 224,
  OPT__param_max_unswitch_level_ = 225,
  OPT__param_max_variable_expansions_in_unroller_ = 226,
  OPT__param_max_vartrack_expr_depth_ = 227,
  OPT__param_max_vartrack_reverse_op_size_ = 228,
  OPT__param_max_vartrack_size_ = 229,
  OPT__param_max_vrp_switch_assertions_ = 230,
  OPT__param_min_crossjump_insns_ = 231,
  OPT__param_min_inline_recursive_probability_ = 232,
  OPT__param_min_insn_to_prefetch_ratio_ = 233,
  OPT__param_min_loop_cond_split_prob_ = 234,
  OPT__param_min_nondebug_insn_uid_ = 235,
  OPT__param_min_size_for_stack_sharing_ = 236,
  OPT__param_min_spec_prob_ = 237,
  OPT__param_min_vect_loop_bound_ = 238,
  OPT__param_parloops_chunk_size_ = 239,
  OPT__param_parloops_min_per_thread_ = 240,
  OPT__param_parloops_schedule_ = 241,
  OPT__param_partial_inlining_entry_probability_ = 242,
  OPT__param_predictable_branch_outcome_ = 243,
  OPT__param_prefetch_dynamic_strides_ = 244,
  OPT__param_prefetch_latency_ = 245,
  OPT__param_prefetch_min_insn_to_mem_ratio_ = 246,
  OPT__param_prefetch_minimum_stride_ = 247,
  OPT__param_profile_func_internal_id_ = 248,
  OPT__param_promote_statics_ = 249,
  OPT__param_rpo_vn_max_loop_depth_ = 250,
  OPT__param_sccvn_max_alias_queries_per_access_ = 251,
  OPT__param_scev_max_expr_complexity_ = 252,
  OPT__param_scev_max_expr_size_ = 253,
  OPT__param_sched_autopref_queue_depth_ = 254,
  OPT__param_sched_mem_true_dep_cost_ = 255,
  OPT__param_sched_pressure_algorithm_ = 256,
  OPT__param_sched_spec_prob_cutoff_ = 257,
  OPT__param_sched_state_edge_prob_cutoff_ = 258,
  OPT__param_selsched_insns_to_rename_ = 259,
  OPT__param_selsched_max_lookahead_ = 260,
  OPT__param_selsched_max_sched_times_ = 261,
  OPT__param_simultaneous_prefetches_ = 262,
  OPT__param_sink_frequency_threshold_ = 263,
  OPT__param_slp_max_insns_in_bb_ = 264,
  OPT__param_sms_dfa_history_ = 265,
  OPT__param_sms_loop_average_count_threshold_ = 266,
  OPT__param_sms_max_ii_factor_ = 267,
  OPT__param_sms_min_sc_ = 268,
  OPT__param_sra_max_propagations_ = 269,
  OPT__param_sra_max_scalarization_size_Osize_ = 270,
  OPT__param_sra_max_scalarization_size_Ospeed_ = 271,
  OPT__param_ssa_name_def_chain_limit_ = 272,
  OPT__param_ssp_buffer_size_ = 273,
  OPT__param_stack_clash_protection_guard_size_ = 274,
  OPT__param_stack_clash_protection_probe_interval_ = 275,
  OPT__param_store_merging_allow_unaligned_ = 276,
  OPT__param_store_merging_max_size_ = 277,
  OPT__param_switch_conversion_max_branch_ratio_ = 278,
  OPT__param_tm_max_aggregate_size_ = 279,
  OPT__param_tracer_dynamic_coverage_feedback_ = 280,
  OPT__param_tracer_dynamic_coverage_ = 281,
  OPT__param_tracer_max_code_growth_ = 282,
  OPT__param_tracer_min_branch_probability_feedback_ = 283,
  OPT__param_tracer_min_branch_probability_ = 284,
  OPT__param_tracer_min_branch_ratio_ = 285,
  OPT__param_tree_reassoc_width_ = 286,
  OPT__param_tsan_distinguish_volatile_ = 287,
  OPT__param_tsan_instrument_func_entry_exit_ = 288,
  OPT__param_uninit_control_dep_attempts_ = 289,
  OPT__param_uninlined_function_insns_ = 290,
  OPT__param_uninlined_function_time_ = 291,
  OPT__param_uninlined_thunk_insns_ = 292,
  OPT__param_uninlined_thunk_time_ = 293,
  OPT__param_unlikely_bb_count_fraction_ = 294,
  OPT__param_unroll_jam_max_unroll_ = 295,
  OPT__param_unroll_jam_min_percent_ = 296,
  OPT__param_use_after_scope_direct_emission_threshold_ = 297,
  OPT__param_use_canonical_types_ = 298,
  OPT__param_vect_epilogues_nomask_ = 299,
  OPT__param_vect_max_peeling_for_alignment_ = 300,
  OPT__param_vect_max_version_for_alias_checks_ = 301,
  OPT__param_vect_max_version_for_alignment_checks_ = 302,
  OPT__param_vect_partial_vector_usage_ = 303,
# 8915 "./options.h"
  OPT__sysroot_ = 334,
  OPT__target_help = 335,
# 8926 "./options.h"
  OPT__version = 345,


  OPT_A = 348,
  OPT_B = 349,
  OPT_C = 350,
  OPT_CC = 351,
  OPT_D = 352,
  OPT_E = 353,
  OPT_F = 354,
  OPT_H = 355,
  OPT_Hd = 356,
  OPT_Hf = 357,
  OPT_I = 358,
  OPT_J = 359,
  OPT_L = 360,
  OPT_M = 361,
  OPT_MD = 362,
  OPT_MF = 363,
  OPT_MG = 364,
  OPT_MM = 365,
  OPT_MMD = 366,
  OPT_MP = 367,
  OPT_MQ = 368,
  OPT_MT = 369,
  OPT_N = 370,
  OPT_O = 371,
  OPT_Ofast = 372,
  OPT_Og = 373,
  OPT_Os = 374,
  OPT_P = 375,
  OPT_Q = 376,
  OPT_Qn = 377,
  OPT_Qy = 378,
  OPT_R = 379,
  OPT_S = 380,
  OPT_T = 381,
  OPT_Tbss = 382,
  OPT_Tbss_ = 383,
  OPT_Tdata = 384,
  OPT_Tdata_ = 385,
  OPT_Ttext = 386,
  OPT_Ttext_ = 387,
  OPT_U = 388,

  OPT_Wa_ = 390,
  OPT_Wabi = 391,
  OPT_Wabi_tag = 392,
  OPT_Wabi_ = 393,
  OPT_Wabsolute_value = 394,
  OPT_Waddress = 395,
  OPT_Waddress_of_packed_member = 396,
  OPT_Waggregate_return = 397,
  OPT_Waggressive_loop_optimizations = 398,
  OPT_Waliasing = 399,
  OPT_Walign_commons = 400,

  OPT_Waligned_new_ = 402,
  OPT_Wall = 403,
  OPT_Walloc_size_larger_than_ = 404,
  OPT_Walloc_zero = 405,
  OPT_Walloca = 406,
  OPT_Walloca_larger_than_ = 407,
  OPT_Wampersand = 408,
  OPT_Wanalyzer_double_fclose = 409,
  OPT_Wanalyzer_double_free = 410,
  OPT_Wanalyzer_exposure_through_output_file = 411,
  OPT_Wanalyzer_file_leak = 412,
  OPT_Wanalyzer_free_of_non_heap = 413,
  OPT_Wanalyzer_malloc_leak = 414,
  OPT_Wanalyzer_null_argument = 415,
  OPT_Wanalyzer_null_dereference = 416,
  OPT_Wanalyzer_possible_null_argument = 417,
  OPT_Wanalyzer_possible_null_dereference = 418,
  OPT_Wanalyzer_stale_setjmp_buffer = 419,
  OPT_Wanalyzer_tainted_array_index = 420,
  OPT_Wanalyzer_too_complex = 421,
  OPT_Wanalyzer_unsafe_call_within_signal_handler = 422,
  OPT_Wanalyzer_use_after_free = 423,
  OPT_Wanalyzer_use_of_pointer_in_stale_stack_frame = 424,
  OPT_Wargument_mismatch = 425,
  OPT_Warith_conversion = 426,
  OPT_Warray_bounds = 427,
  OPT_Warray_bounds_ = 428,
  OPT_Warray_temporaries = 429,
  OPT_Wassign_intercept = 430,

  OPT_Wattribute_alias_ = 432,
  OPT_Wattribute_warning = 433,
  OPT_Wattributes = 434,
  OPT_Wbad_function_cast = 435,
  OPT_Wbool_compare = 436,
  OPT_Wbool_operation = 437,
  OPT_Wbuiltin_declaration_mismatch = 438,
  OPT_Wbuiltin_macro_redefined = 439,
  OPT_Wc___compat = 440,

  OPT_Wc__11_compat = 442,
  OPT_Wc__14_compat = 443,
  OPT_Wc__17_compat = 444,

  OPT_Wc__20_compat = 446,

  OPT_Wc_binding_type = 448,
  OPT_Wc11_c2x_compat = 449,
  OPT_Wc90_c99_compat = 450,
  OPT_Wc99_c11_compat = 451,
  OPT_Wcannot_profile = 452,
  OPT_Wcast_align = 453,
  OPT_Wcast_align_strict = 454,
  OPT_Wcast_function_type = 455,
  OPT_Wcast_qual = 456,
  OPT_Wcast_result = 457,

  OPT_Wcatch_value_ = 459,
  OPT_Wchar_subscripts = 460,
  OPT_Wcharacter_truncation = 461,
  OPT_Wchkp = 462,
  OPT_Wclass_conversion = 463,
  OPT_Wclass_memaccess = 464,
  OPT_Wclobbered = 465,
  OPT_Wcomma_subscript = 466,
  OPT_Wcomment = 467,

  OPT_Wcompare_reals = 469,
  OPT_Wconditionally_supported = 470,
  OPT_Wconversion = 471,
  OPT_Wconversion_extra = 472,
  OPT_Wconversion_null = 473,
  OPT_Wcoverage_mismatch = 474,
  OPT_Wcpp = 475,
  OPT_Wctor_dtor_privacy = 476,
  OPT_Wdangling_else = 477,
  OPT_Wdate_time = 478,
  OPT_Wdeclaration_after_statement = 479,
  OPT_Wdelete_incomplete = 480,
  OPT_Wdelete_non_virtual_dtor = 481,
  OPT_Wdeprecated = 482,
  OPT_Wdeprecated_copy = 483,
  OPT_Wdeprecated_copy_dtor = 484,
  OPT_Wdeprecated_declarations = 485,
  OPT_Wdesignated_init = 486,
  OPT_Wdisabled_optimization = 487,
  OPT_Wdiscarded_array_qualifiers = 488,
  OPT_Wdiscarded_qualifiers = 489,
  OPT_Wdiv_by_zero = 490,
  OPT_Wdo_subscript = 491,
  OPT_Wdouble_promotion = 492,
  OPT_Wduplicate_decl_specifier = 493,
  OPT_Wduplicated_branches = 494,
  OPT_Wduplicated_cond = 495,
  OPT_Weffc__ = 496,
  OPT_Wempty_body = 497,
  OPT_Wendif_labels = 498,
  OPT_Wenum_compare = 499,
  OPT_Wenum_conversion = 500,
  OPT_Werror = 501,

  OPT_Werror_ = 503,
  OPT_Wexpansion_to_defined = 504,
  OPT_Wextra = 505,
  OPT_Wextra_semi = 506,
  OPT_Wfatal_errors = 507,
  OPT_Wfloat_conversion = 508,
  OPT_Wfloat_equal = 509,

  OPT_Wformat_contains_nul = 511,
  OPT_Wformat_diag = 512,
  OPT_Wformat_extra_args = 513,
  OPT_Wformat_nonliteral = 514,

  OPT_Wformat_overflow_ = 516,
  OPT_Wformat_security = 517,
  OPT_Wformat_signedness = 518,

  OPT_Wformat_truncation_ = 520,
  OPT_Wformat_y2k = 521,
  OPT_Wformat_zero_length = 522,
  OPT_Wformat_ = 523,
  OPT_Wframe_address = 524,
  OPT_Wframe_larger_than_ = 525,
  OPT_Wfree_nonheap_object = 526,
  OPT_Wfrontend_loop_interchange = 527,
  OPT_Wfunction_elimination = 528,

  OPT_Wif_not_aligned = 530,
  OPT_Wignored_attributes = 531,
  OPT_Wignored_qualifiers = 532,
  OPT_Wimplicit = 533,

  OPT_Wimplicit_fallthrough_ = 535,
  OPT_Wimplicit_function_declaration = 536,
  OPT_Wimplicit_int = 537,
  OPT_Wimplicit_interface = 538,
  OPT_Wimplicit_procedure = 539,

  OPT_Winaccessible_base = 541,
  OPT_Wincompatible_pointer_types = 542,
  OPT_Winherited_variadic_ctor = 543,
  OPT_Winit_list_lifetime = 544,
  OPT_Winit_self = 545,
  OPT_Winline = 546,
  OPT_Wint_conversion = 547,
  OPT_Wint_in_bool_context = 548,
  OPT_Wint_to_pointer_cast = 549,
  OPT_Winteger_division = 550,
  OPT_Wintrinsic_shadow = 551,
  OPT_Wintrinsics_std = 552,
  OPT_Winvalid_memory_model = 553,
  OPT_Winvalid_offsetof = 554,
  OPT_Winvalid_pch = 555,
  OPT_Wjump_misses_init = 556,
  OPT_Wl_ = 557,

  OPT_Wlarger_than_ = 559,
  OPT_Wline_truncation = 560,
  OPT_Wliteral_suffix = 561,
  OPT_Wlogical_not_parentheses = 562,
  OPT_Wlogical_op = 563,
  OPT_Wlong_long = 564,
  OPT_Wlto_type_mismatch = 565,
  OPT_Wmain = 566,
  OPT_Wmaybe_uninitialized = 567,
  OPT_Wmemset_elt_size = 568,
  OPT_Wmemset_transposed_args = 569,
  OPT_Wmisleading_indentation = 570,
  OPT_Wmismatched_tags = 571,
  OPT_Wmissing_attributes = 572,
  OPT_Wmissing_braces = 573,
  OPT_Wmissing_declarations = 574,
  OPT_Wmissing_field_initializers = 575,

  OPT_Wmissing_include_dirs = 577,

  OPT_Wmissing_parameter_type = 579,
  OPT_Wmissing_profile = 580,
  OPT_Wmissing_prototypes = 581,
  OPT_Wmudflap = 582,
  OPT_Wmultichar = 583,
  OPT_Wmultiple_inheritance = 584,
  OPT_Wmultistatement_macros = 585,
  OPT_Wnamespaces = 586,
  OPT_Wnarrowing = 587,
  OPT_Wnested_externs = 588,






  OPT_Wnoexcept = 595,
  OPT_Wnoexcept_type = 596,
  OPT_Wnon_template_friend = 597,
  OPT_Wnon_virtual_dtor = 598,
  OPT_Wnonnull = 599,
  OPT_Wnonnull_compare = 600,

  OPT_Wnormalized_ = 602,
  OPT_Wnull_dereference = 603,
  OPT_Wodr = 604,
  OPT_Wold_style_cast = 605,
  OPT_Wold_style_declaration = 606,
  OPT_Wold_style_definition = 607,
  OPT_Wopenmp_simd = 608,
  OPT_Woverflow = 609,
  OPT_Woverlength_strings = 610,
  OPT_Woverloaded_virtual = 611,
  OPT_Woverride_init = 612,
  OPT_Woverride_init_side_effects = 613,
  OPT_Woverwrite_recursive = 614,
  OPT_Wp_ = 615,
  OPT_Wpacked = 616,
  OPT_Wpacked_bitfield_compat = 617,
  OPT_Wpacked_not_aligned = 618,
  OPT_Wpadded = 619,
  OPT_Wparentheses = 620,
  OPT_Wpedantic = 621,
  OPT_Wpessimizing_move = 622,

  OPT_Wplacement_new_ = 624,
  OPT_Wpmf_conversions = 625,
  OPT_Wpointer_arith = 626,
  OPT_Wpointer_compare = 627,
  OPT_Wpointer_sign = 628,
  OPT_Wpointer_to_int_cast = 629,
  OPT_Wpragmas = 630,
  OPT_Wprio_ctor_dtor = 631,
  OPT_Wproperty_assign_default = 632,
  OPT_Wprotocol = 633,
  OPT_Wpsabi = 634,
  OPT_Wreal_q_constant = 635,
  OPT_Wrealloc_lhs = 636,
  OPT_Wrealloc_lhs_all = 637,
  OPT_Wredundant_decls = 638,
  OPT_Wredundant_move = 639,
  OPT_Wredundant_tags = 640,
  OPT_Wregister = 641,
  OPT_Wreorder = 642,
  OPT_Wrestrict = 643,
  OPT_Wreturn_local_addr = 644,
  OPT_Wreturn_type = 645,
  OPT_Wscalar_storage_order = 646,
  OPT_Wselector = 647,
  OPT_Wsequence_point = 648,
  OPT_Wshadow = 649,

  OPT_Wshadow_ivar = 651,

  OPT_Wshadow_compatible_local = 653,

  OPT_Wshadow_local = 655,
  OPT_Wshift_count_negative = 656,
  OPT_Wshift_count_overflow = 657,
  OPT_Wshift_negative_value = 658,

  OPT_Wshift_overflow_ = 660,
  OPT_Wsign_compare = 661,
  OPT_Wsign_conversion = 662,
  OPT_Wsign_promo = 663,
  OPT_Wsized_deallocation = 664,
  OPT_Wsizeof_array_argument = 665,
  OPT_Wsizeof_pointer_div = 666,
  OPT_Wsizeof_pointer_memaccess = 667,
  OPT_Wspeculative = 668,
  OPT_Wstack_protector = 669,
  OPT_Wstack_usage_ = 670,
  OPT_Wstrict_aliasing = 671,
  OPT_Wstrict_aliasing_ = 672,
  OPT_Wstrict_null_sentinel = 673,
  OPT_Wstrict_overflow = 674,
  OPT_Wstrict_overflow_ = 675,
  OPT_Wstrict_prototypes = 676,
  OPT_Wstrict_selector_match = 677,
  OPT_Wstring_compare = 678,

  OPT_Wstringop_overflow_ = 680,
  OPT_Wstringop_truncation = 681,
  OPT_Wsubobject_linkage = 682,
  OPT_Wsuggest_attribute_cold = 683,
  OPT_Wsuggest_attribute_const = 684,
  OPT_Wsuggest_attribute_format = 685,
  OPT_Wsuggest_attribute_malloc = 686,
  OPT_Wsuggest_attribute_noreturn = 687,
  OPT_Wsuggest_attribute_pure = 688,
  OPT_Wsuggest_final_methods = 689,
  OPT_Wsuggest_final_types = 690,
  OPT_Wsuggest_override = 691,
  OPT_Wsurprising = 692,
  OPT_Wswitch = 693,
  OPT_Wswitch_bool = 694,
  OPT_Wswitch_default = 695,
  OPT_Wswitch_enum = 696,
  OPT_Wswitch_outside_range = 697,
  OPT_Wswitch_unreachable = 698,
  OPT_Wsync_nand = 699,
  OPT_Wsynth = 700,
  OPT_Wsystem_headers = 701,
  OPT_Wtabs = 702,
  OPT_Wtarget_lifetime = 703,
  OPT_Wtautological_compare = 704,
  OPT_Wtemplates = 705,
  OPT_Wterminate = 706,
  OPT_Wtraditional = 707,
  OPT_Wtraditional_conversion = 708,
  OPT_Wtrampolines = 709,
  OPT_Wtrigraphs = 710,
  OPT_Wtype_limits = 711,
  OPT_Wundeclared_selector = 712,
  OPT_Wundef = 713,
  OPT_Wundefined_do_loop = 714,
  OPT_Wunderflow = 715,
  OPT_Wuninitialized = 716,
  OPT_Wunknown_pragmas = 717,


  OPT_Wunsuffixed_float_constants = 720,
  OPT_Wunused = 721,
  OPT_Wunused_but_set_parameter = 722,
  OPT_Wunused_but_set_variable = 723,

  OPT_Wunused_const_variable_ = 725,
  OPT_Wunused_dummy_argument = 726,
  OPT_Wunused_function = 727,
  OPT_Wunused_label = 728,
  OPT_Wunused_local_typedefs = 729,
  OPT_Wunused_macros = 730,
  OPT_Wunused_parameter = 731,
  OPT_Wunused_result = 732,
  OPT_Wunused_value = 733,
  OPT_Wunused_variable = 734,
  OPT_Wuse_without_only = 735,
  OPT_Wuseless_cast = 736,
  OPT_Wvarargs = 737,
  OPT_Wvariadic_macros = 738,
  OPT_Wvector_operation_performance = 739,
  OPT_Wvirtual_inheritance = 740,
  OPT_Wvirtual_move_assign = 741,
  OPT_Wvla = 742,
  OPT_Wvla_larger_than_ = 743,
  OPT_Wvolatile = 744,
  OPT_Wvolatile_register_var = 745,
  OPT_Wwrite_strings = 746,
  OPT_Wzero_as_null_pointer_constant = 747,
  OPT_Wzero_length_bounds = 748,
  OPT_Wzerotrip = 749,
  OPT_X = 750,
  OPT_Xassembler = 751,
  OPT_Xf = 752,
  OPT_Xlinker = 753,
  OPT_Xpreprocessor = 754,
  OPT_Z = 755,
  OPT_ansi = 756,
  OPT_aux_info = 757,

  OPT_c = 759,
  OPT_callgraph = 760,
  OPT_coverage = 761,
  OPT_cpp = 762,
  OPT_cpp_ = 763,
  OPT_d = 764,
  OPT_debuglib_ = 765,
  OPT_defaultlib_ = 766,
  OPT_defined_only = 767,
  OPT_demangle = 768,
  OPT_dstartfiles = 769,
  OPT_dump_body_ = 770,
  OPT_dump_level_ = 771,
  OPT_dumpbase = 772,
  OPT_dumpbase_ext = 773,
  OPT_dumpdir = 774,
  OPT_dumpfullversion = 775,
  OPT_dumpmachine = 776,
  OPT_dumpspecs = 777,
  OPT_dumpversion = 778,
  OPT_e = 779,
  OPT_export_dynamic = 780,
  OPT_fPIC = 781,
  OPT_fPIE = 782,
  OPT_fRTS_ = 783,
  OPT_fabi_compat_version_ = 784,
  OPT_fabi_version_ = 785,
  OPT_faccess_control = 786,
  OPT_fada_spec_parent_ = 787,
  OPT_faggressive_function_elimination = 788,
  OPT_faggressive_loop_optimizations = 789,
  OPT_falign_commons = 790,
  OPT_falign_functions = 791,
  OPT_falign_functions_ = 792,
  OPT_falign_jumps = 793,
  OPT_falign_jumps_ = 794,
  OPT_falign_labels = 795,
  OPT_falign_labels_ = 796,
  OPT_falign_loops = 797,
  OPT_falign_loops_ = 798,

  OPT_faligned_new_ = 800,
  OPT_fall_instantiations = 801,
  OPT_fall_intrinsics = 802,
  OPT_fall_virtual = 803,
  OPT_fallocation_dce = 804,
  OPT_fallow_argument_mismatch = 805,
  OPT_fallow_invalid_boz = 806,
  OPT_fallow_leading_underscore = 807,
  OPT_fallow_parameterless_variadic_functions = 808,
  OPT_fallow_store_data_races = 809,
  OPT_falt_external_templates = 810,
  OPT_fanalyzer = 811,
  OPT_fanalyzer_call_summaries = 812,
  OPT_fanalyzer_checker_ = 813,
  OPT_fanalyzer_fine_grained = 814,
  OPT_fanalyzer_show_duplicate_count = 815,
  OPT_fanalyzer_state_merge = 816,
  OPT_fanalyzer_state_purge = 817,
  OPT_fanalyzer_transitivity = 818,
  OPT_fanalyzer_verbose_edges = 819,
  OPT_fanalyzer_verbose_state_changes = 820,
  OPT_fanalyzer_verbosity_ = 821,




  OPT_fasan_shadow_offset_ = 826,
  OPT_fasm = 827,
  OPT_fassert = 828,
  OPT_fassociative_math = 829,
  OPT_fassume_phsa = 830,
  OPT_fasynchronous_unwind_tables = 831,
  OPT_fauto_inc_dec = 832,
  OPT_fauto_profile = 833,
  OPT_fauto_profile_ = 834,
  OPT_fautomatic = 835,
  OPT_fbackslash = 836,
  OPT_fbacktrace = 837,
  OPT_fblas_matmul_limit_ = 838,
  OPT_fbounds_check = 839,
  OPT_fbounds_check_ = 840,
  OPT_fbranch_count_reg = 841,
  OPT_fbranch_probabilities = 842,



  OPT_fbuilding_libgcc = 846,
  OPT_fbuilding_libphobos_tests = 847,
  OPT_fbuiltin = 848,
  OPT_fbuiltin_ = 849,
  OPT_fbuiltin_printf = 850,
  OPT_fc_prototypes = 851,
  OPT_fc_prototypes_external = 852,
  OPT_fcall_saved_ = 853,
  OPT_fcall_used_ = 854,
  OPT_fcaller_saves = 855,
  OPT_fcallgraph_info = 856,
  OPT_fcallgraph_info_ = 857,
  OPT_fcanonical_system_headers = 858,

  OPT_fcf_protection_ = 860,
  OPT_fchar8_t = 861,
  OPT_fcheck_array_temporaries = 862,

  OPT_fcheck_new = 864,
  OPT_fcheck_pointer_bounds = 865,
  OPT_fcheck_ = 866,
  OPT_fchecking = 867,
  OPT_fchecking_ = 868,
  OPT_fchkp_check_incomplete_type = 869,
  OPT_fchkp_check_read = 870,
  OPT_fchkp_check_write = 871,
  OPT_fchkp_first_field_has_own_bounds = 872,
  OPT_fchkp_flexible_struct_trailing_arrays = 873,
  OPT_fchkp_instrument_calls = 874,
  OPT_fchkp_instrument_marked_only = 875,
  OPT_fchkp_narrow_bounds = 876,
  OPT_fchkp_narrow_to_innermost_array = 877,
  OPT_fchkp_optimize = 878,
  OPT_fchkp_store_bounds = 879,
  OPT_fchkp_treat_zero_dynamic_size_as_infinite = 880,
  OPT_fchkp_use_fast_string_functions = 881,
  OPT_fchkp_use_nochk_string_functions = 882,
  OPT_fchkp_use_static_bounds = 883,
  OPT_fchkp_use_static_const_bounds = 884,
  OPT_fchkp_use_wrappers = 885,
  OPT_fchkp_zero_input_bounds_for_main = 886,

  OPT_fcoarray_ = 888,
  OPT_fcode_hoisting = 889,
  OPT_fcombine_stack_adjustments = 890,
  OPT_fcommon = 891,
  OPT_fcompare_debug = 892,
  OPT_fcompare_debug_second = 893,
  OPT_fcompare_debug_ = 894,
  OPT_fcompare_elim = 895,
  OPT_fconcepts = 896,
  OPT_fconcepts_diagnostics_depth_ = 897,
  OPT_fconcepts_ts = 898,
  OPT_fcond_mismatch = 899,

  OPT_fconserve_stack = 901,
  OPT_fconstant_string_class_ = 902,
  OPT_fconstexpr_cache_depth_ = 903,
  OPT_fconstexpr_depth_ = 904,
  OPT_fconstexpr_loop_limit_ = 905,
  OPT_fconstexpr_ops_limit_ = 906,
  OPT_fconvert_ = 907,
  OPT_fcoroutines = 908,
  OPT_fcprop_registers = 909,
  OPT_fcray_pointer = 910,
  OPT_fcrossjumping = 911,
  OPT_fcse_follow_jumps = 912,

  OPT_fcx_fortran_rules = 914,
  OPT_fcx_limited_range = 915,
  OPT_fd_lines_as_code = 916,
  OPT_fd_lines_as_comments = 917,
  OPT_fdata_sections = 918,
  OPT_fdbg_cnt_list = 919,
  OPT_fdbg_cnt_ = 920,
  OPT_fdce = 921,
  OPT_fdebug = 922,
  OPT_fdebug_cpp = 923,
  OPT_fdebug_prefix_map_ = 924,
  OPT_fdebug_types_section = 925,
  OPT_fdebug_ = 926,
  OPT_fdec = 927,
  OPT_fdec_blank_format_item = 928,
  OPT_fdec_char_conversions = 929,
  OPT_fdec_format_defaults = 930,
  OPT_fdec_include = 931,
  OPT_fdec_intrinsic_ints = 932,
  OPT_fdec_math = 933,
  OPT_fdec_static = 934,
  OPT_fdec_structure = 935,
  OPT_fdeclone_ctor_dtor = 936,

  OPT_fdefault_double_8 = 938,

  OPT_fdefault_integer_8 = 940,
  OPT_fdefault_real_10 = 941,
  OPT_fdefault_real_16 = 942,
  OPT_fdefault_real_8 = 943,
  OPT_fdefer_pop = 944,
  OPT_fdelayed_branch = 945,
  OPT_fdelete_dead_exceptions = 946,
  OPT_fdelete_null_pointer_checks = 947,
  OPT_fdevirtualize = 948,
  OPT_fdevirtualize_at_ltrans = 949,
  OPT_fdevirtualize_speculatively = 950,

  OPT_fdiagnostics_color_ = 952,
  OPT_fdiagnostics_column_origin_ = 953,
  OPT_fdiagnostics_column_unit_ = 954,
  OPT_fdiagnostics_format_ = 955,
  OPT_fdiagnostics_generate_patch = 956,
  OPT_fdiagnostics_minimum_margin_width_ = 957,
  OPT_fdiagnostics_parseable_fixits = 958,
  OPT_fdiagnostics_path_format_ = 959,
  OPT_fdiagnostics_plain_output = 960,
  OPT_fdiagnostics_show_caret = 961,
  OPT_fdiagnostics_show_cwe = 962,
  OPT_fdiagnostics_show_labels = 963,
  OPT_fdiagnostics_show_line_numbers = 964,
  OPT_fdiagnostics_show_location_ = 965,
  OPT_fdiagnostics_show_option = 966,
  OPT_fdiagnostics_show_path_depths = 967,
  OPT_fdiagnostics_show_template_tree = 968,
  OPT_fdiagnostics_urls_ = 969,
  OPT_fdirectives_only = 970,
  OPT_fdisable_ = 971,
  OPT_fdoc = 972,
  OPT_fdoc_dir_ = 973,
  OPT_fdoc_file_ = 974,
  OPT_fdoc_inc_ = 975,
  OPT_fdollar_ok = 976,
  OPT_fdollars_in_identifiers = 977,
  OPT_fdruntime = 978,
  OPT_fdse = 979,
  OPT_fdump_ = 980,
  OPT_fdump_ada_spec = 981,
  OPT_fdump_ada_spec_slim = 982,
  OPT_fdump_analyzer = 983,
  OPT_fdump_analyzer_callgraph = 984,
  OPT_fdump_analyzer_exploded_graph = 985,
  OPT_fdump_analyzer_exploded_nodes = 986,
  OPT_fdump_analyzer_exploded_nodes_2 = 987,
  OPT_fdump_analyzer_exploded_nodes_3 = 988,
  OPT_fdump_analyzer_state_purge = 989,
  OPT_fdump_analyzer_stderr = 990,
  OPT_fdump_analyzer_supergraph = 991,

  OPT_fdump_d_original = 993,
  OPT_fdump_final_insns = 994,
  OPT_fdump_final_insns_ = 995,
  OPT_fdump_fortran_global = 996,
  OPT_fdump_fortran_optimized = 997,
  OPT_fdump_fortran_original = 998,
  OPT_fdump_go_spec_ = 999,
  OPT_fdump_internal_locations = 1000,
  OPT_fdump_noaddr = 1001,

  OPT_fdump_passes = 1003,
  OPT_fdump_scos = 1004,
  OPT_fdump_unnumbered = 1005,
  OPT_fdump_unnumbered_links = 1006,
  OPT_fdwarf2_cfi_asm = 1007,
  OPT_fearly_inlining = 1008,
  OPT_felide_constructors = 1009,
  OPT_felide_type = 1010,

  OPT_feliminate_unused_debug_symbols = 1012,
  OPT_feliminate_unused_debug_types = 1013,
  OPT_femit_class_debug_always = 1014,
  OPT_femit_struct_debug_baseonly = 1015,
  OPT_femit_struct_debug_detailed_ = 1016,
  OPT_femit_struct_debug_reduced = 1017,
  OPT_fenable_ = 1018,
  OPT_fenforce_eh_specs = 1019,
  OPT_fenum_int_equiv = 1020,
  OPT_fexceptions = 1021,
  OPT_fexcess_precision_ = 1022,
  OPT_fexec_charset_ = 1023,
  OPT_fexpensive_optimizations = 1024,
  OPT_fext_numeric_literals = 1025,
  OPT_fextended_identifiers = 1026,
  OPT_fextern_tls_init = 1027,
  OPT_fexternal_blas = 1028,
  OPT_fexternal_templates = 1029,
  OPT_ff2c = 1030,
  OPT_ffast_math = 1031,
  OPT_ffat_lto_objects = 1032,
  OPT_ffile_prefix_map_ = 1033,
  OPT_ffinite_loops = 1034,
  OPT_ffinite_math_only = 1035,
  OPT_ffixed_ = 1036,
  OPT_ffixed_form = 1037,
  OPT_ffixed_line_length_ = 1038,
  OPT_ffixed_line_length_none = 1039,
  OPT_ffloat_store = 1040,
  OPT_ffor_scope = 1041,

  OPT_fforward_propagate = 1043,
  OPT_ffp_contract_ = 1044,
  OPT_ffp_int_builtin_inexact = 1045,
  OPT_ffpe_summary_ = 1046,
  OPT_ffpe_trap_ = 1047,
  OPT_ffree_form = 1048,
  OPT_ffree_line_length_ = 1049,
  OPT_ffree_line_length_none = 1050,
  OPT_ffreestanding = 1051,
  OPT_ffriend_injection = 1052,
  OPT_ffrontend_loop_interchange = 1053,
  OPT_ffrontend_optimize = 1054,
  OPT_ffunction_cse = 1055,
  OPT_ffunction_sections = 1056,
  OPT_fgcse = 1057,
  OPT_fgcse_after_reload = 1058,
  OPT_fgcse_las = 1059,
  OPT_fgcse_lm = 1060,
  OPT_fgcse_sm = 1061,
  OPT_fgimple = 1062,
  OPT_fgnat_encodings_ = 1063,
  OPT_fgnu_keywords = 1064,
  OPT_fgnu_runtime = 1065,
  OPT_fgnu_tm = 1066,
  OPT_fgnu_unique = 1067,
  OPT_fgnu89_inline = 1068,
  OPT_fgo_c_header_ = 1069,
  OPT_fgo_check_divide_overflow = 1070,
  OPT_fgo_check_divide_zero = 1071,
  OPT_fgo_compiling_runtime = 1072,
  OPT_fgo_debug_escape = 1073,
  OPT_fgo_debug_escape_hash_ = 1074,
  OPT_fgo_debug_optimization = 1075,
  OPT_fgo_dump_ = 1076,
  OPT_fgo_optimize_ = 1077,
  OPT_fgo_pkgpath_ = 1078,
  OPT_fgo_prefix_ = 1079,
  OPT_fgo_relative_import_path_ = 1080,
  OPT_fgraphite = 1081,
  OPT_fgraphite_identity = 1082,
  OPT_fguess_branch_probability = 1083,
  OPT_fguiding_decls = 1084,



  OPT_fhoist_adjacent_loads = 1088,
  OPT_fhonor_std = 1089,
  OPT_fhosted = 1090,
  OPT_fhuge_objects = 1091,
  OPT_fident = 1092,
  OPT_fif_conversion = 1093,
  OPT_fif_conversion2 = 1094,
  OPT_fignore_unknown_pragmas = 1095,
  OPT_fimplement_inlines = 1096,
  OPT_fimplicit_inline_templates = 1097,
  OPT_fimplicit_none = 1098,
  OPT_fimplicit_templates = 1099,
  OPT_findirect_inlining = 1100,
  OPT_finhibit_size_directive = 1101,
  OPT_finit_character_ = 1102,
  OPT_finit_derived = 1103,
  OPT_finit_integer_ = 1104,
  OPT_finit_local_zero = 1105,
  OPT_finit_logical_ = 1106,
  OPT_finit_real_ = 1107,
  OPT_finline = 1108,
  OPT_finline_arg_packing = 1109,
  OPT_finline_atomics = 1110,
  OPT_finline_functions = 1111,
  OPT_finline_functions_called_once = 1112,

  OPT_finline_limit_ = 1114,
  OPT_finline_matmul_limit_ = 1115,
  OPT_finline_small_functions = 1116,
  OPT_finput_charset_ = 1117,
  OPT_finstrument_functions = 1118,
  OPT_finstrument_functions_exclude_file_list_ = 1119,
  OPT_finstrument_functions_exclude_function_list_ = 1120,
  OPT_finteger_4_integer_8 = 1121,
  OPT_fintrinsic_modules_path = 1122,
  OPT_fintrinsic_modules_path_ = 1123,
  OPT_finvariants = 1124,
  OPT_fipa_bit_cp = 1125,
  OPT_fipa_cp = 1126,

  OPT_fipa_cp_clone = 1128,
  OPT_fipa_icf = 1129,
  OPT_fipa_icf_functions = 1130,
  OPT_fipa_icf_variables = 1131,

  OPT_fipa_profile = 1133,
  OPT_fipa_pta = 1134,
  OPT_fipa_pure_const = 1135,
  OPT_fipa_ra = 1136,
  OPT_fipa_reference = 1137,
  OPT_fipa_reference_addressable = 1138,
  OPT_fipa_sra = 1139,
  OPT_fipa_stack_alignment = 1140,

  OPT_fipa_vrp = 1142,
  OPT_fira_algorithm_ = 1143,
  OPT_fira_hoist_pressure = 1144,
  OPT_fira_loop_pressure = 1145,
  OPT_fira_region_ = 1146,
  OPT_fira_share_save_slots = 1147,
  OPT_fira_share_spill_slots = 1148,
  OPT_fira_verbose_ = 1149,
  OPT_fisolate_erroneous_paths_attribute = 1150,
  OPT_fisolate_erroneous_paths_dereference = 1151,
  OPT_fivar_visibility_ = 1152,
  OPT_fivopts = 1153,
  OPT_fjump_tables = 1154,
  OPT_fkeep_gc_roots_live = 1155,
  OPT_fkeep_inline_dllexport = 1156,
  OPT_fkeep_inline_functions = 1157,
  OPT_fkeep_static_consts = 1158,
  OPT_fkeep_static_functions = 1159,
  OPT_flabels_ok = 1160,
  OPT_flarge_source_files = 1161,
  OPT_flax_vector_conversions = 1162,
  OPT_fleading_underscore = 1163,
  OPT_flifetime_dse = 1164,
  OPT_flifetime_dse_ = 1165,
  OPT_flimit_function_alignment = 1166,
  OPT_flinker_output_ = 1167,

  OPT_flive_patching_ = 1169,
  OPT_flive_range_shrinkage = 1170,
  OPT_flocal_ivars = 1171,


  OPT_floop_interchange = 1174,
  OPT_floop_nest_optimize = 1175,

  OPT_floop_parallelize_all = 1177,

  OPT_floop_unroll_and_jam = 1179,
  OPT_flra_remat = 1180,
  OPT_flto = 1181,
  OPT_flto_compression_level_ = 1182,

  OPT_flto_partition_ = 1184,
  OPT_flto_report = 1185,
  OPT_flto_report_wpa = 1186,
  OPT_flto_ = 1187,
  OPT_fltrans = 1188,
  OPT_fltrans_output_list_ = 1189,
  OPT_fmacro_prefix_map_ = 1190,
  OPT_fmain = 1191,
  OPT_fmath_errno = 1192,
  OPT_fmax_array_constructor_ = 1193,
  OPT_fmax_errors_ = 1194,
  OPT_fmax_identifier_length_ = 1195,
  OPT_fmax_include_depth_ = 1196,
  OPT_fmax_stack_var_size_ = 1197,
  OPT_fmax_subrecord_length_ = 1198,
  OPT_fmem_report = 1199,
  OPT_fmem_report_wpa = 1200,
  OPT_fmerge_all_constants = 1201,
  OPT_fmerge_constants = 1202,
  OPT_fmerge_debug_strings = 1203,
  OPT_fmessage_length_ = 1204,
  OPT_fmodule_file_ = 1205,
  OPT_fmodule_private = 1206,
  OPT_fmoduleinfo = 1207,
  OPT_fmodulo_sched = 1208,
  OPT_fmodulo_sched_allow_regmoves = 1209,
  OPT_fmove_loop_invariants = 1210,
  OPT_fms_extensions = 1211,
  OPT_fmudflap = 1212,
  OPT_fmudflapir = 1213,
  OPT_fmudflapth = 1214,
  OPT_fname_mangling_version_ = 1215,
  OPT_fnew_abi = 1216,
  OPT_fnew_inheriting_ctors = 1217,
  OPT_fnew_ttp_matching = 1218,
  OPT_fnext_runtime = 1219,
  OPT_fnil_receivers = 1220,
  OPT_fnon_call_exceptions = 1221,
  OPT_fnonansi_builtins = 1222,
  OPT_fnonnull_objects = 1223,
  OPT_fnothrow_opt = 1224,
  OPT_fobjc_abi_version_ = 1225,
  OPT_fobjc_call_cxx_cdtors = 1226,
  OPT_fobjc_direct_dispatch = 1227,
  OPT_fobjc_exceptions = 1228,
  OPT_fobjc_gc = 1229,
  OPT_fobjc_nilcheck = 1230,
  OPT_fobjc_sjlj_exceptions = 1231,
  OPT_fobjc_std_objc1 = 1232,
  OPT_foffload_abi_ = 1233,
  OPT_foffload_ = 1234,
  OPT_fomit_frame_pointer = 1235,
  OPT_fonly_ = 1236,
  OPT_fopenacc = 1237,
  OPT_fopenacc_dim_ = 1238,
  OPT_fopenmp = 1239,
  OPT_fopenmp_simd = 1240,
  OPT_foperator_names = 1241,
  OPT_fopt_info = 1242,
  OPT_fopt_info_ = 1243,

  OPT_foptimize_sibling_calls = 1245,
  OPT_foptimize_strlen = 1246,

  OPT_fpack_derived = 1248,
  OPT_fpack_struct = 1249,
  OPT_fpack_struct_ = 1250,
  OPT_fpad_source = 1251,
  OPT_fparallel_jobs_ = 1252,
  OPT_fpartial_inlining = 1253,
  OPT_fpatchable_function_entry_ = 1254,
  OPT_fpcc_struct_return = 1255,
  OPT_fpch_deps = 1256,
  OPT_fpch_preprocess = 1257,
  OPT_fpeel_loops = 1258,
  OPT_fpeephole = 1259,
  OPT_fpeephole2 = 1260,
  OPT_fpermissive = 1261,
  OPT_fpermitted_flt_eval_methods_ = 1262,
  OPT_fpic = 1263,
  OPT_fpie = 1264,
  OPT_fplan9_extensions = 1265,
  OPT_fplt = 1266,
  OPT_fplugin_arg_ = 1267,
  OPT_fplugin_ = 1268,
  OPT_fpost_ipa_mem_report = 1269,
  OPT_fpostconditions = 1270,
  OPT_fpre_include_ = 1271,
  OPT_fpre_ipa_mem_report = 1272,
  OPT_fpreconditions = 1273,
  OPT_fpredictive_commoning = 1274,
  OPT_fprefetch_loop_arrays = 1275,
  OPT_fpreprocessed = 1276,
  OPT_fpretty_templates = 1277,
  OPT_fprintf_return_value = 1278,
  OPT_fprofile = 1279,
  OPT_fprofile_abs_path = 1280,
  OPT_fprofile_arcs = 1281,
  OPT_fprofile_correction = 1282,
  OPT_fprofile_dir_ = 1283,
  OPT_fprofile_exclude_files_ = 1284,
  OPT_fprofile_filter_files_ = 1285,
  OPT_fprofile_generate = 1286,
  OPT_fprofile_generate_ = 1287,
  OPT_fprofile_note_ = 1288,
  OPT_fprofile_partial_training = 1289,
  OPT_fprofile_prefix_path_ = 1290,
  OPT_fprofile_reorder_functions = 1291,
  OPT_fprofile_report = 1292,
  OPT_fprofile_reproducible = 1293,
  OPT_fprofile_update_ = 1294,
  OPT_fprofile_use = 1295,
  OPT_fprofile_use_ = 1296,
  OPT_fprofile_values = 1297,
  OPT_fprotect_parens = 1298,
  OPT_frandom_seed = 1299,
  OPT_frandom_seed_ = 1300,
  OPT_frange_check = 1301,
  OPT_freal_4_real_10 = 1302,
  OPT_freal_4_real_16 = 1303,
  OPT_freal_4_real_8 = 1304,
  OPT_freal_8_real_10 = 1305,
  OPT_freal_8_real_16 = 1306,
  OPT_freal_8_real_4 = 1307,
  OPT_frealloc_lhs = 1308,
  OPT_freciprocal_math = 1309,
  OPT_frecord_gcc_switches = 1310,
  OPT_frecord_marker_4 = 1311,
  OPT_frecord_marker_8 = 1312,
  OPT_frecursive = 1313,
  OPT_free = 1314,
  OPT_freg_struct_return = 1315,

  OPT_frelease = 1317,
  OPT_frename_registers = 1318,
  OPT_freorder_blocks = 1319,
  OPT_freorder_blocks_algorithm_ = 1320,
  OPT_freorder_blocks_and_partition = 1321,
  OPT_freorder_functions = 1322,
  OPT_frepack_arrays = 1323,
  OPT_freplace_objc_classes = 1324,
  OPT_frepo = 1325,
  OPT_freport_bug = 1326,
  OPT_frequire_return_statement = 1327,
  OPT_frerun_cse_after_loop = 1328,

  OPT_freschedule_modulo_scheduled_loops = 1330,
  OPT_fresolution_ = 1331,
  OPT_frounding_math = 1332,
  OPT_frtti = 1333,
  OPT_fsanitize_address_use_after_scope = 1334,
  OPT_fsanitize_coverage_ = 1335,
  OPT_fsanitize_recover = 1336,
  OPT_fsanitize_recover_ = 1337,
  OPT_fsanitize_sections_ = 1338,
  OPT_fsanitize_undefined_trap_on_error = 1339,
  OPT_fsanitize_ = 1340,
  OPT_fsave_optimization_record = 1341,
  OPT_fsched_critical_path_heuristic = 1342,
  OPT_fsched_dep_count_heuristic = 1343,
  OPT_fsched_group_heuristic = 1344,
  OPT_fsched_interblock = 1345,
  OPT_fsched_last_insn_heuristic = 1346,
  OPT_fsched_pressure = 1347,
  OPT_fsched_rank_heuristic = 1348,
  OPT_fsched_spec = 1349,
  OPT_fsched_spec_insn_heuristic = 1350,
  OPT_fsched_spec_load = 1351,
  OPT_fsched_spec_load_dangerous = 1352,
  OPT_fsched_stalled_insns = 1353,
  OPT_fsched_stalled_insns_dep = 1354,
  OPT_fsched_stalled_insns_dep_ = 1355,
  OPT_fsched_stalled_insns_ = 1356,
  OPT_fsched_verbose_ = 1357,
  OPT_fsched2_use_superblocks = 1358,

  OPT_fschedule_fusion = 1360,
  OPT_fschedule_insns = 1361,
  OPT_fschedule_insns2 = 1362,
  OPT_fsecond_underscore = 1363,
  OPT_fsection_anchors = 1364,

  OPT_fsel_sched_pipelining = 1366,
  OPT_fsel_sched_pipelining_outer_loops = 1367,
  OPT_fsel_sched_reschedule_pipelined = 1368,
  OPT_fselective_scheduling = 1369,
  OPT_fselective_scheduling2 = 1370,
  OPT_fself_test_ = 1371,
  OPT_fsemantic_interposition = 1372,
  OPT_fshort_enums = 1373,
  OPT_fshort_wchar = 1374,
  OPT_fshow_column = 1375,
  OPT_fshrink_wrap = 1376,
  OPT_fshrink_wrap_separate = 1377,
  OPT_fsign_zero = 1378,
  OPT_fsignaling_nans = 1379,
  OPT_fsigned_bitfields = 1380,
  OPT_fsigned_char = 1381,
  OPT_fsigned_zeros = 1382,
  OPT_fsimd_cost_model_ = 1383,
  OPT_fsingle_precision_constant = 1384,
  OPT_fsized_deallocation = 1385,
  OPT_fsplit_ivs_in_unroller = 1386,
  OPT_fsplit_loops = 1387,
  OPT_fsplit_outputs_ = 1388,
  OPT_fsplit_paths = 1389,
  OPT_fsplit_stack = 1390,
  OPT_fsplit_wide_types = 1391,
  OPT_fsplit_wide_types_early = 1392,
  OPT_fsquangle = 1393,
  OPT_fssa_backprop = 1394,
  OPT_fssa_phiopt = 1395,
  OPT_fsso_struct_ = 1396,
  OPT_fstack_arrays = 1397,

  OPT_fstack_check_ = 1399,
  OPT_fstack_clash_protection = 1400,
  OPT_fstack_limit = 1401,
  OPT_fstack_limit_register_ = 1402,
  OPT_fstack_limit_symbol_ = 1403,
  OPT_fstack_protector = 1404,
  OPT_fstack_protector_all = 1405,
  OPT_fstack_protector_explicit = 1406,
  OPT_fstack_protector_strong = 1407,
  OPT_fstack_reuse_ = 1408,
  OPT_fstack_usage = 1409,
  OPT_fstats = 1410,
  OPT_fstdarg_opt = 1411,
  OPT_fstore_merging = 1412,

  OPT_fstrict_aliasing = 1414,
  OPT_fstrict_enums = 1415,
  OPT_fstrict_overflow = 1416,
  OPT_fstrict_prototype = 1417,
  OPT_fstrict_volatile_bitfields = 1418,

  OPT_fstrong_eval_order_ = 1420,
  OPT_fswitch_errors = 1421,
  OPT_fsync_libcalls = 1422,
  OPT_fsyntax_only = 1423,
  OPT_ftabstop_ = 1424,

  OPT_ftail_call_workaround_ = 1426,

  OPT_ftemplate_backtrace_limit_ = 1428,

  OPT_ftemplate_depth_ = 1430,
  OPT_ftest_coverage = 1431,
  OPT_ftest_forall_temp = 1432,
  OPT_fthis_is_variable = 1433,
  OPT_fthread_jumps = 1434,
  OPT_fthreadsafe_statics = 1435,
  OPT_ftime_report = 1436,
  OPT_ftime_report_details = 1437,
  OPT_ftls_model_ = 1438,
  OPT_ftoplevel_reorder = 1439,
  OPT_ftracer = 1440,
  OPT_ftrack_macro_expansion = 1441,
  OPT_ftrack_macro_expansion_ = 1442,
  OPT_ftrampolines = 1443,
  OPT_ftransition_all = 1444,
  OPT_ftransition_checkimports = 1445,
  OPT_ftransition_complex = 1446,
  OPT_ftransition_dip1000 = 1447,
  OPT_ftransition_dip25 = 1448,
  OPT_ftransition_field = 1449,
  OPT_ftransition_import = 1450,
  OPT_ftransition_nogc = 1451,
  OPT_ftransition_tls = 1452,
  OPT_ftrapping_math = 1453,
  OPT_ftrapv = 1454,
  OPT_ftree_bit_ccp = 1455,
  OPT_ftree_builtin_call_dce = 1456,
  OPT_ftree_ccp = 1457,
  OPT_ftree_ch = 1458,

  OPT_ftree_coalesce_vars = 1460,
  OPT_ftree_copy_prop = 1461,

  OPT_ftree_cselim = 1463,
  OPT_ftree_dce = 1464,
  OPT_ftree_dominator_opts = 1465,
  OPT_ftree_dse = 1466,
  OPT_ftree_forwprop = 1467,
  OPT_ftree_fre = 1468,
  OPT_ftree_loop_distribute_patterns = 1469,
  OPT_ftree_loop_distribution = 1470,
  OPT_ftree_loop_if_convert = 1471,

  OPT_ftree_loop_im = 1473,
  OPT_ftree_loop_ivcanon = 1474,

  OPT_ftree_loop_optimize = 1476,
  OPT_ftree_loop_vectorize = 1477,
  OPT_ftree_lrs = 1478,
  OPT_ftree_parallelize_loops_ = 1479,
  OPT_ftree_partial_pre = 1480,
  OPT_ftree_phiprop = 1481,
  OPT_ftree_pre = 1482,
  OPT_ftree_pta = 1483,
  OPT_ftree_reassoc = 1484,

  OPT_ftree_scev_cprop = 1486,
  OPT_ftree_sink = 1487,
  OPT_ftree_slp_vectorize = 1488,
  OPT_ftree_slsr = 1489,
  OPT_ftree_sra = 1490,


  OPT_ftree_switch_conversion = 1493,
  OPT_ftree_tail_merge = 1494,
  OPT_ftree_ter = 1495,

  OPT_ftree_vectorize = 1497,

  OPT_ftree_vrp = 1499,
  OPT_funconstrained_commons = 1500,
  OPT_funderscoring = 1501,
  OPT_funit_at_a_time = 1502,
  OPT_funittest = 1503,
  OPT_funroll_all_loops = 1504,
  OPT_funroll_completely_grow_size = 1505,
  OPT_funroll_loops = 1506,

  OPT_funsafe_math_optimizations = 1508,
  OPT_funsigned_bitfields = 1509,
  OPT_funsigned_char = 1510,
  OPT_funswitch_loops = 1511,
  OPT_funwind_tables = 1512,
  OPT_fuse_cxa_atexit = 1513,
  OPT_fuse_cxa_get_exception_ptr = 1514,
  OPT_fuse_ld_bfd = 1515,
  OPT_fuse_ld_gold = 1516,
  OPT_fuse_ld_lld = 1517,
  OPT_fuse_linker_plugin = 1518,
  OPT_fvar_tracking = 1519,
  OPT_fvar_tracking_assignments = 1520,
  OPT_fvar_tracking_assignments_toggle = 1521,
  OPT_fvar_tracking_uninit = 1522,
  OPT_fvariable_expansion_in_unroller = 1523,

  OPT_fvect_cost_model_ = 1525,
  OPT_fverbose_asm = 1526,

  OPT_fversion_loops_for_strides = 1528,
  OPT_fversion_ = 1529,
  OPT_fvisibility_inlines_hidden = 1530,
  OPT_fvisibility_ms_compat = 1531,
  OPT_fvisibility_ = 1532,
  OPT_fvpt = 1533,
  OPT_fvtable_gc = 1534,
  OPT_fvtable_thunks = 1535,
  OPT_fvtable_verify_ = 1536,
  OPT_fvtv_counts = 1537,
  OPT_fvtv_debug = 1538,
  OPT_fweak = 1539,
  OPT_fweb = 1540,

  OPT_fwhole_program = 1542,
  OPT_fwide_exec_charset_ = 1543,
  OPT_fworking_directory = 1544,
  OPT_fwpa = 1545,
  OPT_fwpa_ = 1546,
  OPT_fwrapv = 1547,
  OPT_fwrapv_pointer = 1548,
  OPT_fxref = 1549,

  OPT_fzero_initialized_in_bss = 1551,
  OPT_fzero_link = 1552,
  OPT_g = 1553,
  OPT_gant = 1554,
  OPT_gas_loc_support = 1555,
  OPT_gas_locview_support = 1556,
  OPT_gcoff = 1557,
  OPT_gcoff1 = 1558,
  OPT_gcoff2 = 1559,
  OPT_gcoff3 = 1560,
  OPT_gcolumn_info = 1561,
  OPT_gdescribe_dies = 1562,
  OPT_gdwarf = 1563,
  OPT_gdwarf_ = 1564,
  OPT_gen_decls = 1565,
  OPT_ggdb = 1566,
  OPT_ggnu_pubnames = 1567,
  OPT_gimple_stats = 1568,
  OPT_ginline_points = 1569,
  OPT_ginternal_reset_location_views = 1570,
  OPT_gnat = 1571,
  OPT_gnatO = 1572,
  OPT_gno_ = 1573,
  OPT_gno_pubnames = 1574,
  OPT_gpubnames = 1575,
  OPT_grecord_gcc_switches = 1576,
  OPT_gsplit_dwarf = 1577,
  OPT_gstabs = 1578,
  OPT_gstabs_ = 1579,
  OPT_gstatement_frontiers = 1580,
  OPT_gstrict_dwarf = 1581,
  OPT_gtoggle = 1582,
  OPT_gvariable_location_views = 1583,
  OPT_gvariable_location_views_incompat5 = 1584,
  OPT_gvms = 1585,
  OPT_gxcoff = 1586,
  OPT_gxcoff_ = 1587,
  OPT_gz = 1588,
  OPT_gz_ = 1589,
  OPT_h = 1590,
  OPT_help = 1591,
  OPT_idirafter = 1592,
  OPT_imacros = 1593,
  OPT_imultiarch = 1594,
  OPT_imultilib = 1595,
  OPT_include = 1596,
  OPT_iplugindir_ = 1597,
  OPT_iprefix = 1598,
  OPT_iquote = 1599,
  OPT_isysroot = 1600,
  OPT_isystem = 1601,
  OPT_iwithprefix = 1602,
  OPT_iwithprefixbefore = 1603,
  OPT_k8 = 1604,
  OPT_l = 1605,
  OPT_lang_asm = 1606,
  OPT_list = 1607,
  OPT_m128bit_long_double = 1608,
  OPT_m16 = 1609,
  OPT_m32 = 1610,
  OPT_m3dnow = 1611,
  OPT_m3dnowa = 1612,
  OPT_m64 = 1613,
  OPT_m80387 = 1614,
  OPT_m8bit_idiv = 1615,
  OPT_m96bit_long_double = 1616,
  OPT_mabi_ = 1617,
  OPT_mabm = 1618,
  OPT_maccumulate_outgoing_args = 1619,
  OPT_maddress_mode_ = 1620,
  OPT_madx = 1621,
  OPT_maes = 1622,
  OPT_malign_data_ = 1623,
  OPT_malign_double = 1624,
  OPT_malign_functions_ = 1625,
  OPT_malign_jumps_ = 1626,
  OPT_malign_loops_ = 1627,
  OPT_malign_stringops = 1628,
  OPT_mandroid = 1629,
  OPT_march_ = 1630,
  OPT_masm_ = 1631,
  OPT_mavx = 1632,
  OPT_mavx2 = 1633,
  OPT_mavx256_split_unaligned_load = 1634,
  OPT_mavx256_split_unaligned_store = 1635,
  OPT_mavx5124fmaps = 1636,
  OPT_mavx5124vnniw = 1637,
  OPT_mavx512bf16 = 1638,
  OPT_mavx512bitalg = 1639,
  OPT_mavx512bw = 1640,
  OPT_mavx512cd = 1641,
  OPT_mavx512dq = 1642,
  OPT_mavx512er = 1643,
  OPT_mavx512f = 1644,
  OPT_mavx512ifma = 1645,
  OPT_mavx512pf = 1646,
  OPT_mavx512vbmi = 1647,
  OPT_mavx512vbmi2 = 1648,
  OPT_mavx512vl = 1649,
  OPT_mavx512vnni = 1650,
  OPT_mavx512vp2intersect = 1651,
  OPT_mavx512vpopcntdq = 1652,
  OPT_mbionic = 1653,
  OPT_mbmi = 1654,
  OPT_mbmi2 = 1655,
  OPT_mbranch_cost_ = 1656,
  OPT_mcall_ms2sysv_xlogues = 1657,
  OPT_mcet_switch = 1658,
  OPT_mcld = 1659,
  OPT_mcldemote = 1660,
  OPT_mclflushopt = 1661,
  OPT_mclwb = 1662,
  OPT_mclzero = 1663,
  OPT_mcmodel_ = 1664,

  OPT_mcrc32 = 1666,
  OPT_mcx16 = 1667,
  OPT_mdispatch_scheduler = 1668,
  OPT_mdump_tune_features = 1669,
  OPT_menqcmd = 1670,
  OPT_mf16c = 1671,
  OPT_mfancy_math_387 = 1672,
  OPT_mfentry = 1673,
  OPT_mfentry_name_ = 1674,
  OPT_mfentry_section_ = 1675,
  OPT_mfma = 1676,
  OPT_mfma4 = 1677,
  OPT_mforce_drap = 1678,
  OPT_mforce_indirect_call = 1679,
  OPT_mfp_ret_in_387 = 1680,
  OPT_mfpmath_ = 1681,
  OPT_mfsgsbase = 1682,
  OPT_mfunction_return_ = 1683,

  OPT_mfxsr = 1685,
  OPT_mgeneral_regs_only = 1686,
  OPT_mgfni = 1687,
  OPT_mglibc = 1688,
  OPT_mhard_float = 1689,
  OPT_mhle = 1690,
  OPT_miamcu = 1691,
  OPT_mieee_fp = 1692,
  OPT_mincoming_stack_boundary_ = 1693,
  OPT_mindirect_branch_register = 1694,
  OPT_mindirect_branch_ = 1695,
  OPT_minline_all_stringops = 1696,
  OPT_minline_stringops_dynamically = 1697,
  OPT_minstrument_return_ = 1698,

  OPT_mlarge_data_threshold_ = 1700,
  OPT_mlong_double_128 = 1701,
  OPT_mlong_double_64 = 1702,
  OPT_mlong_double_80 = 1703,
  OPT_mlwp = 1704,
  OPT_mlzcnt = 1705,
  OPT_mmanual_endbr = 1706,
  OPT_mmemcpy_strategy_ = 1707,
  OPT_mmemset_strategy_ = 1708,
  OPT_mmitigate_rop = 1709,
  OPT_mmmx = 1710,
  OPT_mmovbe = 1711,
  OPT_mmovdir64b = 1712,
  OPT_mmovdiri = 1713,
  OPT_mmpx = 1714,
  OPT_mms_bitfields = 1715,
  OPT_mmusl = 1716,
  OPT_mmwaitx = 1717,
  OPT_mno_align_stringops = 1718,
  OPT_mno_default = 1719,
  OPT_mno_fancy_math_387 = 1720,
  OPT_mno_push_args = 1721,
  OPT_mno_red_zone = 1722,
  OPT_mno_sse4 = 1723,
  OPT_mnop_mcount = 1724,
  OPT_momit_leaf_frame_pointer = 1725,
  OPT_mpc32 = 1726,
  OPT_mpc64 = 1727,
  OPT_mpc80 = 1728,
  OPT_mpclmul = 1729,
  OPT_mpcommit = 1730,
  OPT_mpconfig = 1731,
  OPT_mpku = 1732,
  OPT_mpopcnt = 1733,

  OPT_mprefer_vector_width_ = 1735,
  OPT_mpreferred_stack_boundary_ = 1736,
  OPT_mprefetchwt1 = 1737,
  OPT_mprfchw = 1738,
  OPT_mptwrite = 1739,
  OPT_mpush_args = 1740,
  OPT_mrdpid = 1741,
  OPT_mrdrnd = 1742,
  OPT_mrdseed = 1743,
  OPT_mrecip = 1744,
  OPT_mrecip_ = 1745,
  OPT_mrecord_mcount = 1746,
  OPT_mrecord_return = 1747,
  OPT_mred_zone = 1748,
  OPT_mregparm_ = 1749,
  OPT_mrtd = 1750,
  OPT_mrtm = 1751,
  OPT_msahf = 1752,
  OPT_mserialize = 1753,
  OPT_msgx = 1754,
  OPT_msha = 1755,
  OPT_mshstk = 1756,
  OPT_mskip_rax_setup = 1757,
  OPT_msoft_float = 1758,
  OPT_msse = 1759,
  OPT_msse2 = 1760,
  OPT_msse2avx = 1761,
  OPT_msse3 = 1762,
  OPT_msse4 = 1763,
  OPT_msse4_1 = 1764,
  OPT_msse4_2 = 1765,
  OPT_msse4a = 1766,

  OPT_msseregparm = 1768,
  OPT_mssse3 = 1769,
  OPT_mstack_arg_probe = 1770,
  OPT_mstack_protector_guard_offset_ = 1771,
  OPT_mstack_protector_guard_reg_ = 1772,
  OPT_mstack_protector_guard_symbol_ = 1773,
  OPT_mstack_protector_guard_ = 1774,
  OPT_mstackrealign = 1775,
  OPT_mstringop_strategy_ = 1776,
  OPT_mstv = 1777,
  OPT_mtbm = 1778,
  OPT_mtls_dialect_ = 1779,
  OPT_mtls_direct_seg_refs = 1780,
  OPT_mtsxldtrk = 1781,
  OPT_mtune_ctrl_ = 1782,
  OPT_mtune_ = 1783,
  OPT_muclibc = 1784,
  OPT_mvaes = 1785,
  OPT_mveclibabi_ = 1786,
  OPT_mvect8_ret_in_mem = 1787,
  OPT_mvpclmulqdq = 1788,
  OPT_mvzeroupper = 1789,
  OPT_mwaitpkg = 1790,
  OPT_mwbnoinvd = 1791,
  OPT_mx32 = 1792,
  OPT_mxop = 1793,
  OPT_mxsave = 1794,
  OPT_mxsavec = 1795,
  OPT_mxsaveopt = 1796,
  OPT_mxsaves = 1797,
  OPT_n = 1798,
  OPT_name_sort = 1799,
  OPT_no_canonical_prefixes = 1800,
  OPT_no_integrated_cpp = 1801,
  OPT_no_pie = 1802,
  OPT_nocpp = 1803,
  OPT_nodefaultlibs = 1804,
  OPT_nolibc = 1805,
  OPT_nophoboslib = 1806,
  OPT_nostartfiles = 1807,
  OPT_nostdinc = 1808,
  OPT_nostdinc__ = 1809,
  OPT_nostdlib = 1810,
  OPT_o = 1811,
  OPT_objects = 1812,
  OPT_p = 1813,
  OPT_pass_exit_codes = 1814,

  OPT_pedantic_errors = 1816,
  OPT_pg = 1817,
  OPT_pie = 1818,
  OPT_pipe = 1819,
  OPT_posix = 1820,
  OPT_print_file_name_ = 1821,
  OPT_print_libgcc_file_name = 1822,
  OPT_print_multi_directory = 1823,
  OPT_print_multi_lib = 1824,
  OPT_print_multi_os_directory = 1825,
  OPT_print_multiarch = 1826,
  OPT_print_objc_runtime_info = 1827,
  OPT_print_prog_name_ = 1828,
  OPT_print_search_dirs = 1829,
  OPT_print_sysroot = 1830,
  OPT_print_sysroot_headers_suffix = 1831,
  OPT_print_value = 1832,
  OPT_profile = 1833,
  OPT_pthread = 1834,
  OPT_quiet = 1835,
  OPT_r = 1836,
  OPT_rdynamic = 1837,
  OPT_remap = 1838,
  OPT_reverse_sort = 1839,
  OPT_s = 1840,
  OPT_save_temps = 1841,
  OPT_save_temps_ = 1842,
  OPT_shared = 1843,
  OPT_shared_libgcc = 1844,
  OPT_shared_libphobos = 1845,
  OPT_size_sort = 1846,

  OPT_specs_ = 1848,
  OPT_static = 1849,
  OPT_static_libasan = 1850,
  OPT_static_libgcc = 1851,
  OPT_static_libgfortran = 1852,
  OPT_static_libgo = 1853,
  OPT_static_liblsan = 1854,
  OPT_static_libmpx = 1855,
  OPT_static_libmpxwrappers = 1856,
  OPT_static_libphobos = 1857,
  OPT_static_libstdc__ = 1858,
  OPT_static_libtsan = 1859,
  OPT_static_libubsan = 1860,
  OPT_static_pie = 1861,


  OPT_std_c__11 = 1864,
  OPT_std_c__14 = 1865,
  OPT_std_c__17 = 1866,


  OPT_std_c__20 = 1869,

  OPT_std_c__98 = 1871,
  OPT_std_c11 = 1872,
  OPT_std_c17 = 1873,


  OPT_std_c2x = 1876,

  OPT_std_c90 = 1878,
  OPT_std_c99 = 1879,

  OPT_std_f2003 = 1881,
  OPT_std_f2008 = 1882,
  OPT_std_f2008ts = 1883,
  OPT_std_f2018 = 1884,
  OPT_std_f95 = 1885,
  OPT_std_gnu = 1886,


  OPT_std_gnu__11 = 1889,
  OPT_std_gnu__14 = 1890,
  OPT_std_gnu__17 = 1891,


  OPT_std_gnu__20 = 1894,

  OPT_std_gnu__98 = 1896,
  OPT_std_gnu11 = 1897,
  OPT_std_gnu17 = 1898,


  OPT_std_gnu2x = 1901,

  OPT_std_gnu90 = 1903,
  OPT_std_gnu99 = 1904,


  OPT_std_iso9899_199409 = 1907,





  OPT_std_legacy = 1913,
  OPT_symbol_ = 1914,
  OPT_symbolic = 1915,
  OPT_t = 1916,
  OPT_time = 1917,
  OPT_time_ = 1918,
  OPT_tno_android_cc = 1919,
  OPT_tno_android_ld = 1920,
  OPT_traditional = 1921,
  OPT_traditional_cpp = 1922,
  OPT_tree_stats = 1923,
  OPT_trigraphs = 1924,
  OPT_type_stats = 1925,
  OPT_u = 1926,
  OPT_undef = 1927,
  OPT_v = 1928,
  OPT_version = 1929,
  OPT_w = 1930,
  OPT_wrapper = 1931,
  OPT_x = 1932,
  OPT_z = 1933,
  N_OPTS,
  OPT_SPECIAL_unknown,
  OPT_SPECIAL_ignore,
  OPT_SPECIAL_warn_removed,
  OPT_SPECIAL_program_name,
  OPT_SPECIAL_input_file
};
# 23 "./tm.h" 2
# 1 "./insn-constants.h" 1
# 113 "./insn-constants.h"
enum unspec {
  UNSPEC_GOT = 0,
  UNSPEC_GOTOFF = 1,
  UNSPEC_GOTPCREL = 2,
  UNSPEC_GOTTPOFF = 3,
  UNSPEC_TPOFF = 4,
  UNSPEC_NTPOFF = 5,
  UNSPEC_DTPOFF = 6,
  UNSPEC_GOTNTPOFF = 7,
  UNSPEC_INDNTPOFF = 8,
  UNSPEC_PLTOFF = 9,
  UNSPEC_MACHOPIC_OFFSET = 10,
  UNSPEC_PCREL = 11,
  UNSPEC_SIZEOF = 12,
  UNSPEC_STACK_ALLOC = 13,
  UNSPEC_SET_GOT = 14,
  UNSPEC_SET_RIP = 15,
  UNSPEC_SET_GOT_OFFSET = 16,
  UNSPEC_MEMORY_BLOCKAGE = 17,
  UNSPEC_PROBE_STACK = 18,
  UNSPEC_TP = 19,
  UNSPEC_TLS_GD = 20,
  UNSPEC_TLS_LD_BASE = 21,
  UNSPEC_TLSDESC = 22,
  UNSPEC_TLS_IE_SUN = 23,
  UNSPEC_SCAS = 24,
  UNSPEC_FNSTSW = 25,
  UNSPEC_SAHF = 26,
  UNSPEC_NOTRAP = 27,
  UNSPEC_PARITY = 28,
  UNSPEC_FSTCW = 29,
  UNSPEC_REP = 30,
  UNSPEC_LD_MPIC = 31,
  UNSPEC_TRUNC_NOOP = 32,
  UNSPEC_DIV_ALREADY_SPLIT = 33,
  UNSPEC_PAUSE = 34,
  UNSPEC_LEA_ADDR = 35,
  UNSPEC_XBEGIN_ABORT = 36,
  UNSPEC_STOS = 37,
  UNSPEC_PEEPSIB = 38,
  UNSPEC_INSN_FALSE_DEP = 39,
  UNSPEC_SBB = 40,
  UNSPEC_FIX_NOTRUNC = 41,
  UNSPEC_MASKMOV = 42,
  UNSPEC_MOVMSK = 43,
  UNSPEC_RCP = 44,
  UNSPEC_RSQRT = 45,
  UNSPEC_PSADBW = 46,
  UNSPEC_COPYSIGN = 47,
  UNSPEC_XORSIGN = 48,
  UNSPEC_IEEE_MIN = 49,
  UNSPEC_IEEE_MAX = 50,
  UNSPEC_SIN = 51,
  UNSPEC_COS = 52,
  UNSPEC_FPATAN = 53,
  UNSPEC_FYL2X = 54,
  UNSPEC_FYL2XP1 = 55,
  UNSPEC_FRNDINT = 56,
  UNSPEC_FIST = 57,
  UNSPEC_F2XM1 = 58,
  UNSPEC_TAN = 59,
  UNSPEC_FXAM = 60,
  UNSPEC_FRNDINT_ROUNDEVEN = 61,
  UNSPEC_FRNDINT_FLOOR = 62,
  UNSPEC_FRNDINT_CEIL = 63,
  UNSPEC_FRNDINT_TRUNC = 64,
  UNSPEC_FIST_FLOOR = 65,
  UNSPEC_FIST_CEIL = 66,
  UNSPEC_SINCOS_COS = 67,
  UNSPEC_SINCOS_SIN = 68,
  UNSPEC_XTRACT_FRACT = 69,
  UNSPEC_XTRACT_EXP = 70,
  UNSPEC_FSCALE_FRACT = 71,
  UNSPEC_FSCALE_EXP = 72,
  UNSPEC_FPREM_F = 73,
  UNSPEC_FPREM_U = 74,
  UNSPEC_FPREM1_F = 75,
  UNSPEC_FPREM1_U = 76,
  UNSPEC_C2_FLAG = 77,
  UNSPEC_FXAM_MEM = 78,
  UNSPEC_SP_SET = 79,
  UNSPEC_SP_TEST = 80,
  UNSPEC_ROUND = 81,
  UNSPEC_CRC32 = 82,
  UNSPEC_LZCNT = 83,
  UNSPEC_TZCNT = 84,
  UNSPEC_BEXTR = 85,
  UNSPEC_PDEP = 86,
  UNSPEC_PEXT = 87,
  UNSPEC_INTERRUPT_RETURN = 88,
  UNSPEC_MOVNTQ = 89,
  UNSPEC_PFRCP = 90,
  UNSPEC_PFRCPIT1 = 91,
  UNSPEC_PFRCPIT2 = 92,
  UNSPEC_PFRSQRT = 93,
  UNSPEC_PFRSQIT1 = 94,
  UNSPEC_MOVNT = 95,
  UNSPEC_MOVDI_TO_SSE = 96,
  UNSPEC_LDDQU = 97,
  UNSPEC_PSHUFB = 98,
  UNSPEC_PSIGN = 99,
  UNSPEC_PALIGNR = 100,
  UNSPEC_EXTRQI = 101,
  UNSPEC_EXTRQ = 102,
  UNSPEC_INSERTQI = 103,
  UNSPEC_INSERTQ = 104,
  UNSPEC_BLENDV = 105,
  UNSPEC_INSERTPS = 106,
  UNSPEC_DP = 107,
  UNSPEC_MOVNTDQA = 108,
  UNSPEC_MPSADBW = 109,
  UNSPEC_PHMINPOSUW = 110,
  UNSPEC_PTEST = 111,
  UNSPEC_PCMPESTR = 112,
  UNSPEC_PCMPISTR = 113,
  UNSPEC_FMADDSUB = 114,
  UNSPEC_XOP_UNSIGNED_CMP = 115,
  UNSPEC_XOP_TRUEFALSE = 116,
  UNSPEC_XOP_PERMUTE = 117,
  UNSPEC_FRCZ = 118,
  UNSPEC_AESENC = 119,
  UNSPEC_AESENCLAST = 120,
  UNSPEC_AESDEC = 121,
  UNSPEC_AESDECLAST = 122,
  UNSPEC_AESIMC = 123,
  UNSPEC_AESKEYGENASSIST = 124,
  UNSPEC_PCLMUL = 125,
  UNSPEC_PCMP = 126,
  UNSPEC_VPERMIL = 127,
  UNSPEC_VPERMIL2 = 128,
  UNSPEC_VPERMIL2F128 = 129,
  UNSPEC_CAST = 130,
  UNSPEC_VTESTP = 131,
  UNSPEC_VCVTPH2PS = 132,
  UNSPEC_VCVTPS2PH = 133,
  UNSPEC_VPERMVAR = 134,
  UNSPEC_VPERMTI = 135,
  UNSPEC_GATHER = 136,
  UNSPEC_VSIBADDR = 137,
  UNSPEC_VPERMT2 = 138,
  UNSPEC_UNSIGNED_FIX_NOTRUNC = 139,
  UNSPEC_UNSIGNED_PCMP = 140,
  UNSPEC_TESTM = 141,
  UNSPEC_TESTNM = 142,
  UNSPEC_SCATTER = 143,
  UNSPEC_RCP14 = 144,
  UNSPEC_RSQRT14 = 145,
  UNSPEC_FIXUPIMM = 146,
  UNSPEC_SCALEF = 147,
  UNSPEC_VTERNLOG = 148,
  UNSPEC_GETEXP = 149,
  UNSPEC_GETMANT = 150,
  UNSPEC_ALIGN = 151,
  UNSPEC_CONFLICT = 152,
  UNSPEC_COMPRESS = 153,
  UNSPEC_COMPRESS_STORE = 154,
  UNSPEC_EXPAND = 155,
  UNSPEC_MASKED_EQ = 156,
  UNSPEC_MASKED_GT = 157,
  UNSPEC_MASKOP = 158,
  UNSPEC_KORTEST = 159,
  UNSPEC_KTEST = 160,
  UNSPEC_EMBEDDED_ROUNDING = 161,
  UNSPEC_GATHER_PREFETCH = 162,
  UNSPEC_SCATTER_PREFETCH = 163,
  UNSPEC_EXP2 = 164,
  UNSPEC_RCP28 = 165,
  UNSPEC_RSQRT28 = 166,
  UNSPEC_SHA1MSG1 = 167,
  UNSPEC_SHA1MSG2 = 168,
  UNSPEC_SHA1NEXTE = 169,
  UNSPEC_SHA1RNDS4 = 170,
  UNSPEC_SHA256MSG1 = 171,
  UNSPEC_SHA256MSG2 = 172,
  UNSPEC_SHA256RNDS2 = 173,
  UNSPEC_DBPSADBW = 174,
  UNSPEC_PMADDUBSW512 = 175,
  UNSPEC_PMADDWD512 = 176,
  UNSPEC_PSHUFHW = 177,
  UNSPEC_PSHUFLW = 178,
  UNSPEC_CVTINT2MASK = 179,
  UNSPEC_REDUCE = 180,
  UNSPEC_FPCLASS = 181,
  UNSPEC_RANGE = 182,
  UNSPEC_VPMADD52LUQ = 183,
  UNSPEC_VPMADD52HUQ = 184,
  UNSPEC_VPMULTISHIFT = 185,
  UNSPEC_VP4FMADD = 186,
  UNSPEC_VP4FNMADD = 187,
  UNSPEC_VP4DPWSSD = 188,
  UNSPEC_VP4DPWSSDS = 189,
  UNSPEC_GF2P8AFFINEINV = 190,
  UNSPEC_GF2P8AFFINE = 191,
  UNSPEC_GF2P8MUL = 192,
  UNSPEC_VPSHLD = 193,
  UNSPEC_VPSHRD = 194,
  UNSPEC_VPSHRDV = 195,
  UNSPEC_VPSHLDV = 196,
  UNSPEC_VPMADDUBSWACCD = 197,
  UNSPEC_VPMADDUBSWACCSSD = 198,
  UNSPEC_VPMADDWDACCD = 199,
  UNSPEC_VPMADDWDACCSSD = 200,
  UNSPEC_VAESDEC = 201,
  UNSPEC_VAESDECLAST = 202,
  UNSPEC_VAESENC = 203,
  UNSPEC_VAESENCLAST = 204,
  UNSPEC_VPCLMULQDQ = 205,
  UNSPEC_VPSHUFBIT = 206,
  UNSPEC_VP2INTERSECT = 207,
  UNSPEC_VCVTNE2PS2BF16 = 208,
  UNSPEC_VCVTNEPS2BF16 = 209,
  UNSPEC_VDPBF16PS = 210,
  UNSPEC_LFENCE = 211,
  UNSPEC_SFENCE = 212,
  UNSPEC_MFENCE = 213,
  UNSPEC_FILD_ATOMIC = 214,
  UNSPEC_FIST_ATOMIC = 215,
  UNSPEC_LDX_ATOMIC = 216,
  UNSPEC_STX_ATOMIC = 217,
  UNSPEC_LDA = 218,
  UNSPEC_STA = 219
};

extern const char *const unspec_strings[];

enum unspecv {
  UNSPECV_UD2 = 0,
  UNSPECV_BLOCKAGE = 1,
  UNSPECV_STACK_PROBE = 2,
  UNSPECV_PROBE_STACK_RANGE = 3,
  UNSPECV_ALIGN = 4,
  UNSPECV_PROLOGUE_USE = 5,
  UNSPECV_SPLIT_STACK_RETURN = 6,
  UNSPECV_CLD = 7,
  UNSPECV_NOPS = 8,
  UNSPECV_RDTSC = 9,
  UNSPECV_RDTSCP = 10,
  UNSPECV_RDPMC = 11,
  UNSPECV_LLWP_INTRINSIC = 12,
  UNSPECV_SLWP_INTRINSIC = 13,
  UNSPECV_LWPVAL_INTRINSIC = 14,
  UNSPECV_LWPINS_INTRINSIC = 15,
  UNSPECV_RDFSBASE = 16,
  UNSPECV_RDGSBASE = 17,
  UNSPECV_WRFSBASE = 18,
  UNSPECV_WRGSBASE = 19,
  UNSPECV_FXSAVE = 20,
  UNSPECV_FXRSTOR = 21,
  UNSPECV_FXSAVE64 = 22,
  UNSPECV_FXRSTOR64 = 23,
  UNSPECV_XSAVE = 24,
  UNSPECV_XRSTOR = 25,
  UNSPECV_XSAVE64 = 26,
  UNSPECV_XRSTOR64 = 27,
  UNSPECV_XSAVEOPT = 28,
  UNSPECV_XSAVEOPT64 = 29,
  UNSPECV_XSAVES = 30,
  UNSPECV_XRSTORS = 31,
  UNSPECV_XSAVES64 = 32,
  UNSPECV_XRSTORS64 = 33,
  UNSPECV_XSAVEC = 34,
  UNSPECV_XSAVEC64 = 35,
  UNSPECV_XGETBV = 36,
  UNSPECV_XSETBV = 37,
  UNSPECV_WBINVD = 38,
  UNSPECV_WBNOINVD = 39,
  UNSPECV_FNSTENV = 40,
  UNSPECV_FLDENV = 41,
  UNSPECV_FNSTSW = 42,
  UNSPECV_FNCLEX = 43,
  UNSPECV_RDRAND = 44,
  UNSPECV_RDSEED = 45,
  UNSPECV_XBEGIN = 46,
  UNSPECV_XEND = 47,
  UNSPECV_XABORT = 48,
  UNSPECV_XTEST = 49,
  UNSPECV_NLGR = 50,
  UNSPECV_CLWB = 51,
  UNSPECV_CLFLUSHOPT = 52,
  UNSPECV_MONITORX = 53,
  UNSPECV_MWAITX = 54,
  UNSPECV_CLZERO = 55,
  UNSPECV_PKU = 56,
  UNSPECV_RDPID = 57,
  UNSPECV_NOP_ENDBR = 58,
  UNSPECV_NOP_RDSSP = 59,
  UNSPECV_INCSSP = 60,
  UNSPECV_SAVEPREVSSP = 61,
  UNSPECV_RSTORSSP = 62,
  UNSPECV_WRSS = 63,
  UNSPECV_WRUSS = 64,
  UNSPECV_SETSSBSY = 65,
  UNSPECV_CLRSSBSY = 66,
  UNSPECV_MOVDIRI = 67,
  UNSPECV_MOVDIR64B = 68,
  UNSPECV_XSUSLDTRK = 69,
  UNSPECV_XRESLDTRK = 70,
  UNSPECV_UMWAIT = 71,
  UNSPECV_UMONITOR = 72,
  UNSPECV_TPAUSE = 73,
  UNSPECV_CLDEMOTE = 74,
  UNSPECV_SPECULATION_BARRIER = 75,
  UNSPECV_PTWRITE = 76,
  UNSPECV_ENQCMD = 77,
  UNSPECV_ENQCMDS = 78,
  UNSPECV_SERIALIZE = 79,
  UNSPECV_PATCHABLE_AREA = 80,
  UNSPECV_EMMS = 81,
  UNSPECV_FEMMS = 82,
  UNSPECV_LDMXCSR = 83,
  UNSPECV_STMXCSR = 84,
  UNSPECV_CLFLUSH = 85,
  UNSPECV_MONITOR = 86,
  UNSPECV_MWAIT = 87,
  UNSPECV_VZEROALL = 88,
  UNSPECV_VZEROUPPER = 89,
  UNSPECV_CMPXCHG = 90,
  UNSPECV_XCHG = 91,
  UNSPECV_LOCK = 92
};

extern const char *const unspecv_strings[];
# 24 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/vxworks-dummy.h" 1
# 25 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/biarch64.h" 1
# 26 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 1
# 216 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/vxworks-dummy.h" 1
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
struct stringop_algs
{
  const enum stringop_alg unknown_size;
  const struct stringop_strategy {
    const int max;
    const enum stringop_alg alg;
    int noalign;
  } size [4];
};
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
struct processor_costs {


  struct
    {
      const int movzbl_load;
      const int int_load[3];


      const int int_store[3];

      const int fp_move;
      const int fp_load[3];

      const int fp_store[3];

      const int mmx_move;
      const int mmx_load[2];

      const int mmx_store[2];

      const int xmm_move;
      const int ymm_move;
      const int zmm_move;
      const int sse_load[5];

      const int sse_store[5];

      const int sse_to_integer;
      const int integer_to_sse;
    } hard_register;

  const int add;
  const int lea;
  const int shift_var;
  const int shift_const;
  const int mult_init[5];

  const int mult_bit;
  const int divide[5];

  int movsx;
  int movzx;
  const int large_insn;
  const int move_ratio;

  const int clear_ratio;

  const int int_load[3];


  const int int_store[3];

  const int sse_load[5];

  const int sse_store[5];

  const int sse_unaligned_load[5];
  const int sse_unaligned_store[5];
  const int xmm_move, ymm_move,
     zmm_move;
  const int sse_to_integer;
  const int gather_static, gather_per_elt;

  const int scatter_static, scatter_per_elt;

  const int l1_cache_size;
  const int l2_cache_size;
  const int prefetch_block;
  const int simultaneous_prefetches;

  const int branch_cost;
  const int fadd;
  const int fmul;
  const int fdiv;
  const int fabs;
  const int fchs;
  const int fsqrt;


  const int sse_op;
  const int addss;
  const int mulss;
  const int mulsd;
  const int fmass;
  const int fmasd;
  const int divss;
  const int divsd;
  const int sqrtss;
  const int sqrtsd;
  const int reassoc_int, reassoc_fp, reassoc_vec_int, reassoc_vec_fp;






  struct stringop_algs *memcpy, *memset;
  const int cond_taken_branch_cost;

  const int cond_not_taken_branch_cost;





  const char *const align_loop;
  const char *const align_jump;
  const char *const align_label;
  const char *const align_func;
};

extern const struct processor_costs *ix86_cost;
extern const struct processor_costs ix86_size_cost;
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum ix86_tune_indices {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def" 1
# 42 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_SCHEDULE,
# 51 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_REG_DEPENDENCY,
# 63 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY,







X86_TUNE_SSE_SPLIT_REGS,
# 82 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_FLAG_REG_STALL,




X86_TUNE_MOVX,







X86_TUNE_MEMORY_MISMATCH_STALL,






X86_TUNE_FUSE_CMP_AND_BRANCH_32,




X86_TUNE_FUSE_CMP_AND_BRANCH_64,






X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS,






X86_TUNE_FUSE_ALU_AND_BRANCH,
# 137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_ACCUMULATE_OUTGOING_ARGS,





X86_TUNE_PROLOGUE_USING_MOVE,




X86_TUNE_EPILOGUE_USING_MOVE,



X86_TUNE_USE_LEAVE,





X86_TUNE_PUSH_MEMORY,





X86_TUNE_SINGLE_PUSH,




X86_TUNE_DOUBLE_PUSH,




X86_TUNE_SINGLE_POP,




X86_TUNE_DOUBLE_POP,







X86_TUNE_PAD_SHORT_FUNCTION,






X86_TUNE_PAD_RETURNS,




X86_TUNE_FOUR_JUMP_LIMIT,
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL,




X86_TUNE_LCP_STALL,



X86_TUNE_READ_MODIFY,







X86_TUNE_USE_INCDEC,






X86_TUNE_INTEGER_DFMODE_MOVES,






X86_TUNE_OPT_AGU,



X86_TUNE_AVOID_LEA_FOR_ADDR,






X86_TUNE_SLOW_IMUL_IMM32_MEM,





X86_TUNE_SLOW_IMUL_IMM8,




X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE,





X86_TUNE_SINGLE_STRINGOP,






X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,




X86_TUNE_USE_SAHF,






X86_TUNE_USE_CLTD,




X86_TUNE_USE_BT,






X86_TUNE_AVOID_FALSE_DEP_FOR_BMI,






X86_TUNE_ADJUST_UNROLL,



X86_TUNE_ONE_IF_CONV_INSN,




X86_TUNE_AVOID_MFENCE,





X86_TUNE_EXPAND_ABS,
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_USE_HIMODE_FIOP,




X86_TUNE_USE_SIMODE_FIOP,





X86_TUNE_USE_FFREEP,


X86_TUNE_EXT_80387_CONSTANTS,
# 359 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_GENERAL_REGS_SSE_SPILL,




X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL,






X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL,






X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL,



X86_TUNE_SSE_TYPELESS_STORES,




X86_TUNE_SSE_LOAD0_BY_PXOR,
# 398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_INTER_UNIT_MOVES_TO_VEC,





X86_TUNE_INTER_UNIT_MOVES_FROM_VEC,




X86_TUNE_INTER_UNIT_CONVERSIONS,




X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS,






X86_TUNE_USE_VECTOR_FP_CONVERTS,




X86_TUNE_USE_VECTOR_CONVERTS,


X86_TUNE_SLOW_PSHUFB,




X86_TUNE_AVOID_4BYTE_PREFIXES,



X86_TUNE_USE_GATHER,




X86_TUNE_AVOID_128FMA_CHAINS,



X86_TUNE_AVOID_256FMA_CHAINS,







X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL,




X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL,



X86_TUNE_AVX256_SPLIT_REGS,




X86_TUNE_AVX128_OPTIMAL,




X86_TUNE_AVX256_OPTIMAL,







X86_TUNE_DOUBLE_WITH_ADD,




X86_TUNE_ALWAYS_FANCY_MATH_387,






X86_TUNE_UNROLL_STRLEN,



X86_TUNE_SHIFT1,



X86_TUNE_ZERO_EXTEND_WITH_AND,




X86_TUNE_PROMOTE_HIMODE_IMUL,





X86_TUNE_FAST_PREFIX,




X86_TUNE_READ_MODIFY_WRITE,




X86_TUNE_MOVE_M1_VIA_OR,



X86_TUNE_NOT_UNPAIRABLE,
# 539 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_REG_STALL,



X86_TUNE_PROMOTE_QIMODE,




X86_TUNE_PROMOTE_HI_REGS,



X86_TUNE_HIMODE_MATH,



X86_TUNE_SPLIT_LONG_MOVES,


X86_TUNE_USE_XCHGB,



X86_TUNE_USE_MOV0,




X86_TUNE_NOT_VECTORMODE,



X86_TUNE_AVOID_VECTOR_DECODE,
# 583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_BRANCH_PREDICTION_HINTS,


X86_TUNE_QIMODE_MATH,




X86_TUNE_PROMOTE_QI_REGS,



X86_TUNE_EMIT_VZEROUPPER,
# 470 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2

X86_TUNE_LAST
};

extern unsigned char ix86_tune_features[X86_TUNE_LAST];
# 608 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum ix86_arch_indices {
  X86_ARCH_CMOV,
  X86_ARCH_CMPXCHG,
  X86_ARCH_CMPXCHG8B,
  X86_ARCH_XADD,
  X86_ARCH_BSWAP,

  X86_ARCH_LAST
};

extern unsigned char ix86_arch_features[X86_ARCH_LAST];
# 633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern unsigned char x86_prefetch_sse;
# 663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern tree x86_mfence;
# 729 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern const char *host_detect_local_cpu (int argc, const char **argv);
# 1388 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum reg_class
{
  NO_REGS,
  AREG, DREG, CREG, BREG, SIREG, DIREG,
  AD_REGS,
  CLOBBERED_REGS,
  Q_REGS,
  NON_Q_REGS,
  TLS_GOTBASE_REGS,
  INDEX_REGS,
  LEGACY_REGS,
  GENERAL_REGS,

  FP_TOP_REG, FP_SECOND_REG,
  FLOAT_REGS,
  SSE_FIRST_REG,
  NO_REX_SSE_REGS,
  SSE_REGS,
  ALL_SSE_REGS,
  MMX_REGS,
  FLOAT_SSE_REGS,
  FLOAT_INT_REGS,
  INT_SSE_REGS,
  FLOAT_INT_SSE_REGS,
  MASK_REGS,
  ALL_MASK_REGS,
  ALL_REGS,
  LIM_REG_CLASSES
};
# 1692 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
typedef struct ix86_args {
  int words;
  int nregs;
  int regno;
  int fastcall;

  int sse_words;
  int sse_nregs;
  int warn_avx512f;

  int warn_avx;
  int warn_sse;
  int warn_mmx;
  int warn_empty;

  int sse_regno;
  int mmx_words;
  int mmx_nregs;
  int mmx_regno;
  int maybe_vaarg;
  int caller;
  int float_in_sse;


  int stdarg;
  enum calling_abi call_abi;

  tree decl;
} CUMULATIVE_ARGS;
# 2151 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern int const dbx_register_map[76];
extern int const dbx64_register_map[76];
extern int const svr4_dbx_register_map[76];
# 2323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum processor_type
{
  PROCESSOR_GENERIC = 0,
  PROCESSOR_I386,
  PROCESSOR_I486,
  PROCESSOR_PENTIUM,
  PROCESSOR_LAKEMONT,
  PROCESSOR_PENTIUMPRO,
  PROCESSOR_PENTIUM4,
  PROCESSOR_NOCONA,
  PROCESSOR_CORE2,
  PROCESSOR_NEHALEM,
  PROCESSOR_SANDYBRIDGE,
  PROCESSOR_HASWELL,
  PROCESSOR_BONNELL,
  PROCESSOR_SILVERMONT,
  PROCESSOR_GOLDMONT,
  PROCESSOR_GOLDMONT_PLUS,
  PROCESSOR_TREMONT,
  PROCESSOR_KNL,
  PROCESSOR_KNM,
  PROCESSOR_SKYLAKE,
  PROCESSOR_SKYLAKE_AVX512,
  PROCESSOR_CANNONLAKE,
  PROCESSOR_ICELAKE_CLIENT,
  PROCESSOR_ICELAKE_SERVER,
  PROCESSOR_CASCADELAKE,
  PROCESSOR_TIGERLAKE,
  PROCESSOR_COOPERLAKE,
  PROCESSOR_SAPPHIRERAPIDS,
  PROCESSOR_ALDERLAKE,
  PROCESSOR_INTEL,
  PROCESSOR_GEODE,
  PROCESSOR_K6,
  PROCESSOR_ATHLON,
  PROCESSOR_K8,
  PROCESSOR_AMDFAM10,
  PROCESSOR_BDVER1,
  PROCESSOR_BDVER2,
  PROCESSOR_BDVER3,
  PROCESSOR_BDVER4,
  PROCESSOR_BTVER1,
  PROCESSOR_BTVER2,
  PROCESSOR_ZNVER1,
  PROCESSOR_ZNVER2,
  PROCESSOR_max
};


extern const char *const processor_names[];

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-bitmask.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-bitmask.h"
class wide_int_bitmask
{
public:
  inline wide_int_bitmask ();
  inline wide_int_bitmask (uint64_t l);
  inline wide_int_bitmask (uint64_t l, uint64_t h);
  inline wide_int_bitmask &operator &= (wide_int_bitmask);
  inline wide_int_bitmask &operator |= (wide_int_bitmask);
  inline wide_int_bitmask operator ~ () const;
  inline wide_int_bitmask operator & (wide_int_bitmask) const;
  inline wide_int_bitmask operator | (wide_int_bitmask) const;
  inline wide_int_bitmask operator >> (int);
  inline wide_int_bitmask operator << (int);
  inline bool operator == (wide_int_bitmask) const;
  inline bool operator != (wide_int_bitmask) const;
  uint64_t low, high;
};

inline
wide_int_bitmask::wide_int_bitmask ()
: low (0), high (0)
{
}

inline
wide_int_bitmask::wide_int_bitmask (uint64_t l)
: low (l), high (0)
{
}

inline
wide_int_bitmask::wide_int_bitmask (uint64_t l, uint64_t h)
: low (l), high (h)
{
}

inline wide_int_bitmask &
wide_int_bitmask::operator &= (wide_int_bitmask b)
{
  low &= b.low;
  high &= b.high;
  return *this;
}

inline wide_int_bitmask &
wide_int_bitmask::operator |= (wide_int_bitmask b)
{
  low |= b.low;
  high |= b.high;
  return *this;
}

inline wide_int_bitmask
wide_int_bitmask::operator ~ () const
{
  wide_int_bitmask ret (~low, ~high);
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator | (wide_int_bitmask b) const
{
  wide_int_bitmask ret (low | b.low, high | b.high);
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator & (wide_int_bitmask b) const
{
  wide_int_bitmask ret (low & b.low, high & b.high);
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator << (int amount)
{
  wide_int_bitmask ret;
  if (amount >= 64)
    {
      ret.low = 0;
      ret.high = low << (amount - 64);
    }
  else if (amount == 0)
    ret = *this;
  else
    {
      ret.low = low << amount;
      ret.high = (low >> (64 - amount)) | (high << amount);
    }
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator >> (int amount)
{
  wide_int_bitmask ret;
  if (amount >= 64)
    {
      ret.low = high >> (amount - 64);
      ret.high = 0;
    }
  else if (amount == 0)
    ret = *this;
  else
    {
      ret.low = (high << (64 - amount)) | (low >> amount);
      ret.high = high >> amount;
    }
  return ret;
}

inline bool
wide_int_bitmask::operator == (wide_int_bitmask b) const
{
  return low == b.low && high == b.high;
}

inline bool
wide_int_bitmask::operator != (wide_int_bitmask b) const
{
  return low != b.low || high != b.high;
}
# 2375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2

const wide_int_bitmask PTA_3DNOW (1UL << 0);
const wide_int_bitmask PTA_3DNOW_A (1UL << 1);
const wide_int_bitmask PTA_64BIT (1UL << 2);
const wide_int_bitmask PTA_ABM (1UL << 3);
const wide_int_bitmask PTA_AES (1UL << 4);
const wide_int_bitmask PTA_AVX (1UL << 5);
const wide_int_bitmask PTA_BMI (1UL << 6);
const wide_int_bitmask PTA_CX16 (1UL << 7);
const wide_int_bitmask PTA_F16C (1UL << 8);
const wide_int_bitmask PTA_FMA (1UL << 9);
const wide_int_bitmask PTA_FMA4 (1UL << 10);
const wide_int_bitmask PTA_FSGSBASE (1UL << 11);
const wide_int_bitmask PTA_LWP (1UL << 12);
const wide_int_bitmask PTA_LZCNT (1UL << 13);
const wide_int_bitmask PTA_MMX (1UL << 14);
const wide_int_bitmask PTA_MOVBE (1UL << 15);
const wide_int_bitmask PTA_NO_SAHF (1UL << 16);
const wide_int_bitmask PTA_PCLMUL (1UL << 17);
const wide_int_bitmask PTA_POPCNT (1UL << 18);
const wide_int_bitmask PTA_PREFETCH_SSE (1UL << 19);
const wide_int_bitmask PTA_RDRND (1UL << 20);
const wide_int_bitmask PTA_SSE (1UL << 21);
const wide_int_bitmask PTA_SSE2 (1UL << 22);
const wide_int_bitmask PTA_SSE3 (1UL << 23);
const wide_int_bitmask PTA_SSE4_1 (1UL << 24);
const wide_int_bitmask PTA_SSE4_2 (1UL << 25);
const wide_int_bitmask PTA_SSE4A (1UL << 26);
const wide_int_bitmask PTA_SSSE3 (1UL << 27);
const wide_int_bitmask PTA_TBM (1UL << 28);
const wide_int_bitmask PTA_XOP (1UL << 29);
const wide_int_bitmask PTA_AVX2 (1UL << 30);
const wide_int_bitmask PTA_BMI2 (1UL << 31);
const wide_int_bitmask PTA_RTM (1UL << 32);
const wide_int_bitmask PTA_HLE (1UL << 33);
const wide_int_bitmask PTA_PRFCHW (1UL << 34);
const wide_int_bitmask PTA_RDSEED (1UL << 35);
const wide_int_bitmask PTA_ADX (1UL << 36);
const wide_int_bitmask PTA_FXSR (1UL << 37);
const wide_int_bitmask PTA_XSAVE (1UL << 38);
const wide_int_bitmask PTA_XSAVEOPT (1UL << 39);
const wide_int_bitmask PTA_AVX512F (1UL << 40);
const wide_int_bitmask PTA_AVX512ER (1UL << 41);
const wide_int_bitmask PTA_AVX512PF (1UL << 42);
const wide_int_bitmask PTA_AVX512CD (1UL << 43);

const wide_int_bitmask PTA_SHA (1UL << 45);
const wide_int_bitmask PTA_PREFETCHWT1 (1UL << 46);
const wide_int_bitmask PTA_CLFLUSHOPT (1UL << 47);
const wide_int_bitmask PTA_XSAVEC (1UL << 48);
const wide_int_bitmask PTA_XSAVES (1UL << 49);
const wide_int_bitmask PTA_AVX512DQ (1UL << 50);
const wide_int_bitmask PTA_AVX512BW (1UL << 51);
const wide_int_bitmask PTA_AVX512VL (1UL << 52);
const wide_int_bitmask PTA_AVX512IFMA (1UL << 53);
const wide_int_bitmask PTA_AVX512VBMI (1UL << 54);
const wide_int_bitmask PTA_CLWB (1UL << 55);
const wide_int_bitmask PTA_MWAITX (1UL << 56);
const wide_int_bitmask PTA_CLZERO (1UL << 57);
const wide_int_bitmask PTA_NO_80387 (1UL << 58);
const wide_int_bitmask PTA_PKU (1UL << 59);
const wide_int_bitmask PTA_AVX5124VNNIW (1UL << 60);
const wide_int_bitmask PTA_AVX5124FMAPS (1UL << 61);
const wide_int_bitmask PTA_AVX512VPOPCNTDQ (1UL << 62);
const wide_int_bitmask PTA_SGX (1UL << 63);
const wide_int_bitmask PTA_AVX512VNNI (0, 1UL);
const wide_int_bitmask PTA_GFNI (0, 1UL << 1);
const wide_int_bitmask PTA_VAES (0, 1UL << 2);
const wide_int_bitmask PTA_AVX512VBMI2 (0, 1UL << 3);
const wide_int_bitmask PTA_VPCLMULQDQ (0, 1UL << 4);
const wide_int_bitmask PTA_AVX512BITALG (0, 1UL << 5);
const wide_int_bitmask PTA_RDPID (0, 1UL << 6);
const wide_int_bitmask PTA_PCONFIG (0, 1UL << 7);
const wide_int_bitmask PTA_WBNOINVD (0, 1UL << 8);
const wide_int_bitmask PTA_AVX512VP2INTERSECT (0, 1UL << 9);
const wide_int_bitmask PTA_PTWRITE (0, 1UL << 10);
const wide_int_bitmask PTA_AVX512BF16 (0, 1UL << 11);
const wide_int_bitmask PTA_WAITPKG (0, 1UL << 12);
const wide_int_bitmask PTA_MOVDIRI(0, 1UL << 13);
const wide_int_bitmask PTA_MOVDIR64B(0, 1UL << 14);
const wide_int_bitmask PTA_ENQCMD (0, 1UL << 15);
const wide_int_bitmask PTA_CLDEMOTE (0, 1UL << 16);
const wide_int_bitmask PTA_SERIALIZE (0, 1UL << 17);
const wide_int_bitmask PTA_TSXLDTRK (0, 1UL << 18);

const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2
  | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;
const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2
  | PTA_POPCNT;
const wide_int_bitmask PTA_WESTMERE = PTA_NEHALEM | PTA_PCLMUL;
const wide_int_bitmask PTA_SANDYBRIDGE = PTA_WESTMERE | PTA_AVX | PTA_XSAVE
  | PTA_XSAVEOPT;
const wide_int_bitmask PTA_IVYBRIDGE = PTA_SANDYBRIDGE | PTA_FSGSBASE
  | PTA_RDRND | PTA_F16C;
const wide_int_bitmask PTA_HASWELL = PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI
  | PTA_BMI2 | PTA_LZCNT | PTA_FMA | PTA_MOVBE | PTA_HLE;
const wide_int_bitmask PTA_BROADWELL = PTA_HASWELL | PTA_ADX | PTA_PRFCHW
  | PTA_RDSEED;
const wide_int_bitmask PTA_SKYLAKE = PTA_BROADWELL | PTA_AES | PTA_CLFLUSHOPT
  | PTA_XSAVEC | PTA_XSAVES | PTA_SGX;
const wide_int_bitmask PTA_SKYLAKE_AVX512 = PTA_SKYLAKE | PTA_AVX512F
  | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU
  | PTA_CLWB;
const wide_int_bitmask PTA_CASCADELAKE = PTA_SKYLAKE_AVX512 | PTA_AVX512VNNI;
const wide_int_bitmask PTA_COOPERLAKE = PTA_CASCADELAKE | PTA_AVX512BF16;
const wide_int_bitmask PTA_CANNONLAKE = PTA_SKYLAKE | PTA_AVX512F
  | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU
  | PTA_AVX512VBMI | PTA_AVX512IFMA | PTA_SHA;
const wide_int_bitmask PTA_ICELAKE_CLIENT = PTA_CANNONLAKE | PTA_AVX512VNNI
  | PTA_GFNI | PTA_VAES | PTA_AVX512VBMI2 | PTA_VPCLMULQDQ | PTA_AVX512BITALG
  | PTA_RDPID | PTA_AVX512VPOPCNTDQ;
const wide_int_bitmask PTA_ICELAKE_SERVER = PTA_ICELAKE_CLIENT | PTA_PCONFIG
  | PTA_WBNOINVD | PTA_CLWB;
const wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI
  | PTA_MOVDIR64B | PTA_CLWB | PTA_AVX512VP2INTERSECT;
const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI
  | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE
  | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK;
const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE
  | PTA_WAITPKG | PTA_SERIALIZE;
const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER
  | PTA_AVX512F | PTA_AVX512CD;
const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;
const wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE | PTA_RDRND;
const wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_AES | PTA_SHA | PTA_XSAVE
  | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT | PTA_XSAVEOPT
  | PTA_FSGSBASE;
const wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID
  | PTA_SGX | PTA_PTWRITE;
const wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB
  | PTA_GFNI;
const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW
  | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;
# 2533 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern enum processor_type ix86_tune;
extern enum processor_type ix86_arch;






extern unsigned int ix86_preferred_stack_boundary;
extern unsigned int ix86_incoming_stack_boundary;


extern enum reg_class const regclass_map[76];

enum ix86_fpcmp_strategy {
  IX86_FPCMP_SAHF,
  IX86_FPCMP_COMI,
  IX86_FPCMP_ARITH
};
# 2568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum ix86_stack_slot
{
  SLOT_TEMP = 0,
  SLOT_CW_STORED,
  SLOT_CW_ROUNDEVEN,
  SLOT_CW_TRUNC,
  SLOT_CW_FLOOR,
  SLOT_CW_CEIL,
  SLOT_STV_TEMP,
  MAX_386_STACK_LOCALS
};

enum ix86_entity
{
  X86_DIRFLAG = 0,
  AVX_U128,
  I387_ROUNDEVEN,
  I387_TRUNC,
  I387_FLOOR,
  I387_CEIL,
  MAX_386_ENTITIES
};

enum x86_dirflag_state
{
  X86_DIRFLAG_RESET,
  X86_DIRFLAG_ANY
};

enum avx_u128_state
{
  AVX_U128_CLEAN,
  AVX_U128_DIRTY,
  AVX_U128_ANY
};
# 2681 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
struct ix86_frame
{
  int nsseregs;
  int nregs;
  int va_arg_size;
  int red_zone_size;
  int outgoing_arguments_size;


  long frame_pointer_offset;
  long hard_frame_pointer_offset;
  long stack_pointer_offset;
  long hfp_save_offset;
  long reg_save_offset;
  long stack_realign_allocate;
  long stack_realign_offset;
  long sse_reg_save_offset;



  bool save_regs_using_mov;



  bool expensive_p;
  int expensive_count;
};





struct machine_frame_state
{



  rtx cfa_reg;
  long cfa_offset;





  long sp_offset;
  long fp_offset;





  int red_zone_offset;





  unsigned int sp_valid : 1;
  unsigned int fp_valid : 1;
  unsigned int drap_valid : 1;




  unsigned int realigned : 1;






  unsigned int sp_realigned : 1;



  long sp_realigned_fp_last;





  long sp_realigned_offset;
};


struct seh_frame_state;

enum function_type
{
  TYPE_UNKNOWN = 0,
  TYPE_NORMAL,


  TYPE_INTERRUPT,



  TYPE_EXCEPTION
};

enum queued_insn_type
{
  TYPE_NONE = 0,
  TYPE_ENDBR,
  TYPE_PATCHABLE_AREA
};

struct machine_function {
  struct stack_local_entry *stack_locals;
  int varargs_gpr_size;
  int varargs_fpr_size;
  int optimize_mode_switching[MAX_386_ENTITIES];


  struct ix86_frame frame;






  rtx split_stack_varargs_pointer;



  enum calling_abi call_abi : 8;


  unsigned int accesses_prev_frame : 1;



  unsigned int use_fast_prologue_epilogue : 1;



  unsigned int pc_thunk_call_expanded : 1;
# 2828 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
  unsigned int tls_descriptor_call_expanded_p : 1;



  unsigned int static_chain_on_stack : 1;


  unsigned int no_drap_save_restore : 1;


  enum function_type func_type : 2;


  enum indirect_branch indirect_branch_type : 3;



  unsigned int has_local_indirect_jump : 1;


  enum indirect_branch function_return_type : 3;



  unsigned int no_caller_saved_registers : 1;






  unsigned int arg_reg_available : 1;



  unsigned int call_ms2sysv : 1;



  unsigned int call_ms2sysv_pad_in : 1;





  unsigned int call_ms2sysv_extra_regs:3;


  unsigned int outgoing_args_on_stack : 1;


  enum queued_insn_type insn_queued_at_entrance : 2;


  unsigned int function_label_emitted : 1;


  unsigned int stack_frame_required : 1;


  unsigned int max_used_stack_alignment;



  struct machine_frame_state fs;


  struct seh_frame_state * seh;
};

extern tree sysv_va_list_type_node;
extern tree ms_va_list_type_node;
# 2942 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern void debug_ready_dispatch (void);
extern void debug_dispatch_window (int);
# 27 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/unix.h" 1
# 28 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/att.h" 1
# 29 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/dbxelf.h" 1
# 30 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/elfos.h" 1
# 31 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/gnu-user.h" 1
# 32 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/glibc-stdint.h" 1
# 33 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-64.h" 1
# 34 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/gnu-user-common.h" 1
# 35 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/gnu-user64.h" 1
# 36 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/linux.h" 1
# 37 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/linux-android.h" 1
# 38 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/linux-common.h" 1
# 71 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/linux-common.h"
extern void file_end_indicate_exec_stack_and_cet (void);
# 39 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/linux64.h" 1
# 40 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/initfini-array.h" 1
# 41 "./tm.h" 2







# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/defaults.h" 1
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/defaults.h"
typedef uint8_t target_unit;
# 49 "./tm.h" 2
# 26 "build/gencondmd.c" 2
# 1 "./insn-constants.h" 1
# 27 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 1
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
enum real_value_class {
  rvc_zero,
  rvc_normal,
  rvc_inf,
  rvc_nan
};







struct real_value {



  unsigned int cl : 2;

  unsigned int decimal : 1;

  unsigned int sign : 1;

  unsigned int signalling : 1;


  unsigned int canonical : 1;

  unsigned int uexp : (32 - 6);

  unsigned long sig[((128 + (8 * 8)) / (8 * 8))];
};
# 80 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern char test_real_width
  [sizeof (struct real_value) <= (((128 + (8 * 8)) + 32)/64 + (((128 + (8 * 8)) + 32)%64 ? 1 : 0)) * sizeof (long) ? 1 : -1];
# 118 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
struct real_format
{

  void (*encode) (const struct real_format *, long *,
    const struct real_value *);
  void (*decode) (const struct real_format *, struct real_value *,
    const long *);


  int b;


  int p;


  int pnan;


  int emin;


  int emax;



  int signbit_ro;



  int signbit_rw;
# 158 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
  int ieee_bits;


  bool round_towards_zero;
  bool has_sign_dependent_rounding;


  bool has_nans;
  bool has_inf;
  bool has_denorm;
  bool has_signed_zero;
  bool qnan_msb_set;
  bool canonical_nan_lsbs_set;
  const char *name;
};







extern const struct real_format *
  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1
         + MAX_MODE_DECIMAL_FLOAT - MIN_MODE_DECIMAL_FLOAT + 1];
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
class format_helper
{
public:
  format_helper (const real_format *format) : m_format (format) {}
  template<typename T> format_helper (const T &);
  const real_format *operator-> () const { return m_format; }
  operator const real_format *() const { return m_format; }

  bool decimal_p () const { return m_format && m_format->b == 10; }
  bool can_represent_integral_type_p (tree type) const;

private:
  const real_format *m_format;
};

template<typename T>
inline format_helper::format_helper (const T &m)
  : m_format (m == E_VOIDmode ? 0 : (real_format_for_mode[(((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT) ? (((m) - MIN_MODE_DECIMAL_FLOAT) + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) : ((enum mode_class) mode_class[m]) == MODE_FLOAT ? ((m) - MIN_MODE_FLOAT) : ((fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/real.h", 234, __FUNCTION__)), 0)]))
{}
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern bool HONOR_NANS (machine_mode);
extern bool HONOR_NANS (const_tree);
extern bool HONOR_NANS (const_rtx);


extern bool HONOR_SNANS (machine_mode);
extern bool HONOR_SNANS (const_tree);
extern bool HONOR_SNANS (const_rtx);



extern bool HONOR_INFINITIES (machine_mode);
extern bool HONOR_INFINITIES (const_tree);
extern bool HONOR_INFINITIES (const_rtx);



extern bool HONOR_SIGNED_ZEROS (machine_mode);
extern bool HONOR_SIGNED_ZEROS (const_tree);
extern bool HONOR_SIGNED_ZEROS (const_rtx);



extern bool HONOR_SIGN_DEPENDENT_ROUNDING (machine_mode);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_tree);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_rtx);


extern bool real_arithmetic (struct real_value *, int, const struct real_value *,
        const struct real_value *);


extern bool real_compare (int, const struct real_value *, const struct real_value *);


extern bool real_isinf (const struct real_value *);


extern bool real_isnan (const struct real_value *);


extern bool real_issignaling_nan (const struct real_value *);


extern bool real_isfinite (const struct real_value *);


extern bool real_isneg (const struct real_value *);


extern bool real_isnegzero (const struct real_value *);


extern bool real_identical (const struct real_value *, const struct real_value *);
extern bool real_equal (const struct real_value *, const struct real_value *);
extern bool real_less (const struct real_value *, const struct real_value *);


extern void real_convert (struct real_value *, format_helper,
     const struct real_value *);


extern bool exact_real_truncate (format_helper, const struct real_value *);


extern void real_to_decimal (char *, const struct real_value *, size_t,
        size_t, int);



extern void real_to_decimal_for_mode (char *, const struct real_value *, size_t,
          size_t, int, machine_mode);


extern void real_to_hexadecimal (char *, const struct real_value *,
     size_t, size_t, int);


extern long real_to_integer (const struct real_value *);



extern int real_from_string (struct real_value *, const char *);

extern void real_from_string3 (struct real_value *, const char *, format_helper);

extern long real_to_target (long *, const struct real_value *, format_helper);

extern void real_from_target (struct real_value *, const long *,
         format_helper);

extern void real_inf (struct real_value *);

extern bool real_nan (struct real_value *, const char *, int, format_helper);

extern void real_maxval (struct real_value *, int, machine_mode);

extern void real_2expN (struct real_value *, int, format_helper);

extern unsigned int real_hash (const struct real_value *);



extern const struct real_format ieee_single_format;
extern const struct real_format mips_single_format;
extern const struct real_format motorola_single_format;
extern const struct real_format spu_single_format;
extern const struct real_format ieee_double_format;
extern const struct real_format mips_double_format;
extern const struct real_format motorola_double_format;
extern const struct real_format ieee_extended_motorola_format;
extern const struct real_format ieee_extended_intel_96_format;
extern const struct real_format ieee_extended_intel_96_round_53_format;
extern const struct real_format ieee_extended_intel_128_format;
extern const struct real_format ibm_extended_format;
extern const struct real_format mips_extended_format;
extern const struct real_format ieee_quad_format;
extern const struct real_format mips_quad_format;
extern const struct real_format vax_f_format;
extern const struct real_format vax_d_format;
extern const struct real_format vax_g_format;
extern const struct real_format real_internal_format;
extern const struct real_format decimal_single_format;
extern const struct real_format decimal_double_format;
extern const struct real_format decimal_quad_format;
extern const struct real_format ieee_half_format;
extern const struct real_format arm_half_format;
extern const struct real_format arm_bfloat_half_format;
# 418 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern struct real_value real_value_truncate (format_helper, struct real_value);

extern struct real_value real_value_negate (const struct real_value *);
extern struct real_value real_value_abs (const struct real_value *);

extern int significand_size (format_helper);

extern struct real_value real_from_string2 (const char *, format_helper);
# 443 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern int real_exponent (const struct real_value *);


extern void real_ldexp (struct real_value *, const struct real_value *, int);





extern struct real_value dconst0;
extern struct real_value dconst1;
extern struct real_value dconst2;
extern struct real_value dconstm1;
extern struct real_value dconsthalf;
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern const struct real_value * dconst_e_ptr (void);


extern const struct real_value *dconst_third_ptr (void);
extern const struct real_value *dconst_quarter_ptr (void);
extern const struct real_value *dconst_sixth_ptr (void);
extern const struct real_value *dconst_ninth_ptr (void);


extern const struct real_value * dconst_sqrt2_ptr (void);



struct real_value real_value_from_int_cst (const_tree, const_tree);


extern rtx const_double_from_real_value (struct real_value, machine_mode);


extern bool exact_real_inverse (format_helper, struct real_value *);




bool real_can_shorten_arithmetic (machine_mode, machine_mode);


extern tree build_real (tree, struct real_value);


extern tree build_real_truncate (tree, struct real_value);


extern bool real_powi (struct real_value *, format_helper,
         const struct real_value *, long);


extern void real_trunc (struct real_value *, format_helper,
   const struct real_value *);
extern void real_floor (struct real_value *, format_helper,
   const struct real_value *);
extern void real_ceil (struct real_value *, format_helper,
         const struct real_value *);
extern void real_round (struct real_value *, format_helper,
   const struct real_value *);
extern void real_roundeven (struct real_value *, format_helper,
       const struct real_value *);


extern void real_copysign (struct real_value *, const struct real_value *);


extern bool real_isinteger (const struct real_value *, format_helper);
extern bool real_isinteger (const struct real_value *, long *);


extern bool real_nextafter (struct real_value *, format_helper,
       const struct real_value *, const struct real_value *);




extern void get_max_float (const struct real_format *, char *, size_t, bool);
# 539 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern void build_sinatan_real (struct real_value *, tree);
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
struct fixed_value
{
  double_int data;
  scalar_mode_pod mode;
};
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
extern struct fixed_value fconst0[18];
extern struct fixed_value fconst1[8];
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
extern rtx const_fixed_from_fixed_value (struct fixed_value, machine_mode);



extern struct fixed_value fixed_from_double_int (double_int, scalar_mode);



static inline rtx
const_fixed_from_double_int (double_int payload,
        scalar_mode mode)
{
  return
    const_fixed_from_fixed_value (fixed_from_double_int (payload, mode),
                                  mode);
}


extern void fixed_from_string (struct fixed_value *, const char *,
          scalar_mode);


extern tree build_fixed (tree, struct fixed_value);


extern bool fixed_convert (struct fixed_value *, scalar_mode,
      const struct fixed_value *, bool);


extern bool fixed_convert_from_int (struct fixed_value *, scalar_mode,
        double_int, bool, bool);


extern bool fixed_convert_from_real (struct fixed_value *, scalar_mode,
         const struct real_value *, bool);


extern void real_convert_from_fixed (struct real_value *, scalar_mode,
         const struct fixed_value *);


extern bool fixed_identical (const struct fixed_value *, const struct fixed_value *);


extern unsigned int fixed_hash (const struct fixed_value *);







extern void fixed_to_decimal (char *str, const struct fixed_value *, size_t);


extern bool fixed_arithmetic (struct fixed_value *, int, const struct fixed_value *,
         const struct fixed_value *, bool);


extern bool fixed_compare (int, const struct fixed_value *,
      const struct fixed_value *);


extern bool fixed_isneg (const struct fixed_value *);
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h" 1
# 61 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h"
struct function;


extern void statistics_early_init (void);
extern void statistics_init (void);
extern void statistics_fini (void);
extern void statistics_fini_pass (void);
extern void statistics_counter_event (struct function *, const char *, int);
extern void statistics_histogram_event (struct function *, const char *, int);
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void ggc_free (void *);
extern size_t ggc_round_alloc_size (size_t requested_size);
extern void *ggc_realloc (void *, size_t );
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void dump_vec_loc_statistics (void);


extern htab_t vec_mem_usage_hash;




struct vec_prefix
{




  void register_overhead (void *, size_t, size_t );
  void release_overhead (void *, size_t, size_t, bool );
  static unsigned calculate_allocation (vec_prefix *, unsigned, bool);
  static unsigned calculate_allocation_1 (unsigned, unsigned);







  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;

  unsigned m_alloc : 31;
  unsigned m_using_auto_storage : 1;
  unsigned m_num;
};





inline unsigned
vec_prefix::calculate_allocation (vec_prefix *pfx, unsigned reserve,
      bool exact)
{
  if (exact)
    return (pfx ? pfx->m_num : 0) + reserve;
  else if (!pfx)
    return ((4) > (reserve) ? (4) : (reserve));
  return calculate_allocation_1 (pfx->m_alloc, pfx->m_num + reserve);
}

template<typename, typename, typename> struct vec;






struct vl_embed { };
struct vl_ptr { };
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
struct va_heap
{


  typedef vl_ptr default_layout;

  template<typename T>
  static void reserve (vec<T, va_heap, vl_embed> *&, unsigned, bool
         );

  template<typename T>
  static void release (vec<T, va_heap, vl_embed> *&);
};







template<typename T>
inline void
va_heap::reserve (vec<T, va_heap, vl_embed> *&v, unsigned reserve, bool exact
    )
{
  size_t elt_size = sizeof (T);
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  ((void)(!(alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 282, __FUNCTION__), 0 : 0));

  if (0 && v)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), false);

  size_t size = vec<T, va_heap, vl_embed>::embedded_size (alloc);
  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, va_heap, vl_embed> *> (xrealloc (v, size));
  v->embedded_init (alloc, nelem);

  if (0)
    v->m_vecpfx.register_overhead (v, alloc, elt_size );
}



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfree-nonheap-object"




template<typename T>
void
va_heap::release (vec<T, va_heap, vl_embed> *&v)
{
  size_t elt_size = sizeof (T);
  if (v == nullptr)
    return;

  if (0)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), true);
  ::free (v);
  v = nullptr;
}


#pragma GCC diagnostic pop





struct va_gc
{




  typedef vl_embed default_layout;

  template<typename T, typename A>
  static void reserve (vec<T, A, vl_embed> *&, unsigned, bool
         );

  template<typename T, typename A>
  static void release (vec<T, A, vl_embed> *&v);
};




template<typename T, typename A>
inline void
va_gc::release (vec<T, A, vl_embed> *&v)
{
  if (v)
    ::ggc_free (v);
  v = nullptr;
}







template<typename T, typename A>
void
va_gc::reserve (vec<T, A, vl_embed> *&v, unsigned reserve, bool exact
  )
{
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  if (!alloc)
    {
      ::ggc_free (v);
      v = nullptr;
      return;
    }


  size_t size = vec<T, A, vl_embed>::embedded_size (alloc);


  size = ::ggc_round_alloc_size (size);


  size_t vec_offset = sizeof (vec_prefix);
  size_t elt_size = sizeof (T);
  alloc = (size - vec_offset) / elt_size;


  size = vec_offset + alloc * elt_size;

  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, A, vl_embed> *> (::ggc_realloc (v, size
              ));
  v->embedded_init (alloc, nelem);
}





struct va_gc_atomic : va_gc
{
};
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T,
         typename A = va_heap,
         typename L = typename A::default_layout>
struct vec
{
};
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
void
debug_helper (vec<T> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
                  stderr
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                        );
    }
}






template<typename T>
void
debug_helper (vec<T, va_gc> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
                  stderr
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                        );
    }
}
# 501 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
inline void
vec_default_construct (T *dst, unsigned n)
{
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
  for ( ; n; ++dst, --n)
    ::new (static_cast<void*>(dst)) T ();
}



template <typename T>
inline void
vec_copy_construct (T *dst, const T *src, unsigned n)
{
  for ( ; n; ++dst, ++src, --n)
    ::new (static_cast<void*>(dst)) T (*src);
}







struct vnull
{
  template <typename T, typename A, typename L>
  constexpr operator vec<T, A, L> () { return vec<T, A, L>(); }
};
extern vnull vNULL;
# 574 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
struct vec<T, A, vl_embed>
{
public:
  unsigned allocated (void) const { return m_vecpfx.m_alloc; }
  unsigned length (void) const { return m_vecpfx.m_num; }
  bool is_empty (void) const { return m_vecpfx.m_num == 0; }
  T *address (void) { return m_vecdata; }
  const T *address (void) const { return m_vecdata; }
  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return address () + length (); }
  const T *end () const { return address () + length (); }
  const T &operator[] (unsigned) const;
  T &operator[] (unsigned);
  T &last (void);
  bool space (unsigned) const;
  bool iterate (unsigned, T *) const;
  bool iterate (unsigned, T **) const;
  vec *copy () const;
  void splice (const vec &);
  void splice (const vec *src);
  T *quick_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void quick_insert (unsigned, const T &);
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  static size_t embedded_size (unsigned);
  void embedded_init (unsigned, unsigned = 0, unsigned = 0);
  void quick_grow (unsigned len);
  void quick_grow_cleared (unsigned len);


  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;



  vec_prefix m_vecpfx;
  T m_vecdata[1];
};
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec_safe_space (const vec<T, A, vl_embed> *v, unsigned nelems)
{
  return v ? v->space (nelems) : nelems == 0;
}



template<typename T, typename A>
inline unsigned
vec_safe_length (const vec<T, A, vl_embed> *v)
{
  return v ? v->length () : 0;
}



template<typename T, typename A>
inline T *
vec_safe_address (vec<T, A, vl_embed> *v)
{
  return v ? v->address () : nullptr;
}



template<typename T, typename A>
inline bool
vec_safe_is_empty (vec<T, A, vl_embed> *v)
{
  return v ? v->is_empty () : true;
}



template<typename T, typename A>
inline bool
vec_safe_reserve (vec<T, A, vl_embed> *&v, unsigned nelems, bool exact = false
    )
{
  bool extend = nelems ? !vec_safe_space (v, nelems) : false;
  if (extend)
    A::reserve (v, nelems, exact );
  return extend;
}

template<typename T, typename A>
inline bool
vec_safe_reserve_exact (vec<T, A, vl_embed> *&v, unsigned nelems
   )
{
  return vec_safe_reserve (v, nelems, true );
}





template<typename T, typename A>
inline void
vec_alloc (vec<T, A, vl_embed> *&v, unsigned nelems )
{
  v = nullptr;
  vec_safe_reserve (v, nelems, false );
}




template<typename T, typename A>
inline void
vec_free (vec<T, A, vl_embed> *&v)
{
  A::release (v);
}



template<typename T, typename A>
inline void
vec_safe_grow (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  ((void)(!(len >= oldlen) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 729, __FUNCTION__), 0 : 0));
  vec_safe_reserve_exact (v, len - oldlen );
  v->quick_grow (len);
}



template<typename T, typename A>
inline void
vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  vec_safe_grow (v, len );
  vec_default_construct (v->address () + oldlen, len - oldlen);
}




template<typename T>
inline void
vec_safe_grow_cleared (vec<T, va_heap, vl_ptr> *&v,
         unsigned len )
{
  v->safe_grow_cleared (len );
}




template<typename T>
inline bool
vec_safe_reserve (vec<T, va_heap, vl_ptr> *&v, unsigned nelems, bool exact = false
    )
{
  return v->reserve (nelems, exact);
}



template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T **ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}

template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T *ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline T *
vec_safe_push (vec<T, A, vl_embed> *&v, const T &obj )
{
  vec_safe_reserve (v, 1, false );
  return v->quick_push (obj);
}




template<typename T, typename A>
inline void
vec_safe_insert (vec<T, A, vl_embed> *&v, unsigned ix, const T &obj
   )
{
  vec_safe_reserve (v, 1, false );
  v->quick_insert (ix, obj);
}



template<typename T, typename A>
inline void
vec_safe_truncate (vec<T, A, vl_embed> *v, unsigned size)
{
  if (v)
    v->truncate (size);
}



template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec_safe_copy (vec<T, A, vl_embed> *src )
{
  return src ? src->copy () : nullptr;
}



template<typename T, typename A>
inline void
vec_safe_splice (vec<T, A, vl_embed> *&dst, const vec<T, A, vl_embed> *src
   )
{
  unsigned src_len = vec_safe_length (src);
  if (src_len)
    {
      vec_safe_reserve_exact (dst, vec_safe_length (dst) + src_len
         );
      dst->splice (*src);
    }
}




template<typename T, typename A>
inline bool
vec_safe_contains (vec<T, A, vl_embed> *v, const T &search)
{
  return v ? v->contains (search) : false;
}




template<typename T, typename A>
inline const T &
vec<T, A, vl_embed>::operator[] (unsigned ix) const
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 870, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}

template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::operator[] (unsigned ix)
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 878, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::last (void)
{
  ((void)(!(m_vecpfx.m_num > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 889, __FUNCTION__), 0 : 0));
  return (*this)[m_vecpfx.m_num - 1];
}
# 900 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::space (unsigned nelems) const
{
  return m_vecpfx.m_alloc - m_vecpfx.m_num >= nelems;
}
# 915 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T *ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = m_vecdata[ix];
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}
# 941 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T **ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = (const_cast<T *> ((&m_vecdata[ix])));
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec<T, A, vl_embed>::copy (void) const
{
  vec<T, A, vl_embed> *new_vec = nullptr;
  unsigned len = length ();
  if (len)
    {
      vec_alloc (new_vec, len );
      new_vec->embedded_init (len, len);
      vec_copy_construct (new_vec->address (), m_vecdata, len);
    }
  return new_vec;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> &src)
{
  unsigned len = src.length ();
  if (len)
    {
      ((void)(!(space (len)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 986, __FUNCTION__), 0 : 0));
      vec_copy_construct (end (), src.address (), len);
      m_vecpfx.m_num += len;
    }
}

template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> *src)
{
  if (src)
    splice (*src);
}






template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::quick_push (const T &obj)
{
  ((void)(!(space (1)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1009, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[m_vecpfx.m_num++];
  *slot = obj;
  return slot;
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::pop (void)
{
  ((void)(!(length () > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1022, __FUNCTION__), 0 : 0));
  return m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::truncate (unsigned size)
{
  ((void)(!(length () >= size) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1034, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = size;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_insert (unsigned ix, const T &obj)
{
  ((void)(!(length () < allocated ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1046, __FUNCTION__), 0 : 0));
  ((void)(!(ix <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1047, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot + 1, slot, (m_vecpfx.m_num++ - ix) * sizeof (T));
  *slot = obj;
}






template<typename T, typename A>
inline void
vec<T, A, vl_embed>::ordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1062, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot, slot + 1, (--m_vecpfx.m_num - ix) * sizeof (T));
}
# 1105 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline void
vec<T, A, vl_embed>::unordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1109, __FUNCTION__), 0 : 0));
  m_vecdata[ix] = m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::block_remove (unsigned ix, unsigned len)
{
  ((void)(!(ix + len <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1121, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  m_vecpfx.m_num -= len;
  memmove (slot, slot + len, (m_vecpfx.m_num - ix) * sizeof (T));
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::qsort (int (*cmp) (const void *, const void *))
{
  if (length () > 1)
    gcc_qsort (address (), length (), sizeof (T), cmp);
}




template<typename T, typename A>
inline void
vec<T, A, vl_embed>::sort (int (*cmp) (const void *, const void *, void *),
      void *data)
{
  if (length () > 1)
    gcc_sort_r (address (), length (), sizeof (T), cmp, data);
}





template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *))
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *,
          void *), void *data)
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p, data);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::contains (const T &search) const
{
  unsigned int len = length ();
  for (unsigned int i = 0; i < len; i++)
    if ((*this)[i] == search)
      return true;

  return false;
}






template<typename T, typename A>
unsigned
vec<T, A, vl_embed>::lower_bound (T obj, bool (*lessthan)(const T &, const T &))
  const
{
  unsigned int len = length ();
  unsigned int half, middle;
  unsigned int first = 0;
  while (len > 0)
    {
      half = len / 2;
      middle = first;
      middle += half;
      T middle_elem = (*this)[middle];
      if (lessthan (middle_elem, obj))
 {
   first = middle;
   ++first;
   len = len - half - 1;
 }
      else
 len = half;
    }
  return first;
}
# 1280 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline size_t
vec<T, A, vl_embed>::embedded_size (unsigned alloc)
{
  struct alignas (T) U { char data[sizeof (T)]; };
  typedef vec<U, A, vl_embed> vec_embedded;
  typedef typename std::conditional<std::is_standard_layout<T>::value,
        vec, vec_embedded>::type vec_stdlayout;
  static_assert (sizeof (vec_stdlayout) == sizeof (vec), "");
  static_assert (alignof (vec_stdlayout) == alignof (vec), "");
  return 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        __builtin_offsetof (
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        vec_stdlayout
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        , 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        m_vecdata
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        ) 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                                            + alloc * sizeof (T);
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::embedded_init (unsigned alloc, unsigned num, unsigned aut)
{
  m_vecpfx.m_alloc = alloc;
  m_vecpfx.m_using_auto_storage = aut;
  m_vecpfx.m_num = num;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow (unsigned len)
{
  ((void)(!(length () <= len && len <= m_vecpfx.m_alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1314, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = len;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow_cleared (unsigned len)
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  quick_grow (len);
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}



template<typename T>
void
gt_ggc_mx (vec<T, va_gc> *v)
{
  extern void gt_ggc_mx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_ggc_mx ((*v)[i]);
}

template<typename T>
void
gt_ggc_mx (vec<T, va_gc_atomic, vl_embed> *v __attribute__ ((__unused__)))
{


}




template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v)
{
  extern void gt_pch_nx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx ((*v)[i]);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T *, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  for (unsigned i = 0; i < v->length (); i++)
    op (&((*v)[i]), cookie);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  extern void gt_pch_nx (T *, gt_pointer_operator, void *);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx (&((*v)[i]), op, cookie);
}
# 1410 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
struct vec<T, va_heap, vl_ptr>
{
public:


  void create (unsigned nelems );
  void release (void);


  bool exists (void) const
  { return m_vec != nullptr; }

  bool is_empty (void) const
  { return m_vec ? m_vec->is_empty () : true; }

  unsigned length (void) const
  { return m_vec ? m_vec->length () : 0; }

  T *address (void)
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  const T *address (void) const
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return begin () + length (); }
  const T *end () const { return begin () + length (); }
  const T &operator[] (unsigned ix) const
  { return (*m_vec)[ix]; }

  bool operator!=(const vec &other) const
  { return !(*this == other); }

  bool operator==(const vec &other) const
  { return address () == other.address (); }

  T &operator[] (unsigned ix)
  { return (*m_vec)[ix]; }

  T &last (void)
  { return m_vec->last (); }

  bool space (int nelems) const
  { return m_vec ? m_vec->space (nelems) : nelems == 0; }

  bool iterate (unsigned ix, T *p) const;
  bool iterate (unsigned ix, T **p) const;
  vec copy () const;
  bool reserve (unsigned, bool = false );
  bool reserve_exact (unsigned );
  void splice (const vec &);
  void safe_splice (const vec & );
  T *quick_push (const T &);
  T *safe_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void safe_grow (unsigned );
  void safe_grow_cleared (unsigned );
  void quick_grow (unsigned);
  void quick_grow_cleared (unsigned);
  void quick_insert (unsigned, const T &);
  void safe_insert (unsigned, const T & );
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  void reverse (void);

  bool using_auto_storage () const;



  vec<T, va_heap, vl_embed> *m_vec;
};
# 1500 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, size_t N = 0>
class auto_vec : public vec<T, va_heap>
{
public:
  auto_vec ()
  {
    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  auto_vec (size_t s)
  {
    if (s > N)
      {
 this->create (s);
 return;
      }

    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  ~auto_vec ()
  {
    this->release ();
  }

private:
  vec<T, va_heap, vl_embed> m_auto;
  T m_data[((N - 1) > (1) ? (N - 1) : (1))];
};



template<typename T>
class auto_vec<T, 0> : public vec<T, va_heap>
{
public:
  auto_vec () { this->m_vec = nullptr; }
  auto_vec (size_t n) { this->create (n); }
  ~auto_vec () { this->release (); }
};






template<typename T>
inline void
vec_alloc (vec<T> *&v, unsigned nelems )
{
  v = new vec<T>;
  v->create (nelems );
}





class auto_string_vec : public auto_vec <char *>
{
 public:
  ~auto_string_vec ();
};
# 1578 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
class auto_delete_vec : public auto_vec <T *>
{
 public:
  auto_delete_vec () {}
  auto_delete_vec (size_t s) : auto_vec <T *> (s) {}

  ~auto_delete_vec ();

private:
  auto_delete_vec<T> (const auto_delete_vec<T>&) = delete; void operator= (const auto_delete_vec<T> &) = delete;
};



template<typename T>
inline void
vec_check_alloc (vec<T, va_heap> *&vec, unsigned nelems )
{
  if (!vec)
    vec_alloc (vec, nelems );
}




template<typename T>
inline void
vec_free (vec<T> *&v)
{
  if (v == nullptr)
    return;

  v->release ();
  delete v;
  v = nullptr;
}
# 1624 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T *ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1647 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T **ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1686 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
inline
auto_string_vec::~auto_string_vec ()
{
  int i;
  char *str;
  for (i = 0; (*this).iterate ((i), &(str)); ++(i))
    free (str);
}




template <typename T>
inline
auto_delete_vec<T>::~auto_delete_vec ()
{
  int i;
  T *item;
  for (i = 0; (*this).iterate ((i), &(item)); ++(i))
    delete item;
}




template<typename T>
inline vec<T, va_heap, vl_ptr>
vec<T, va_heap, vl_ptr>::copy (void) const
{
  vec<T, va_heap, vl_ptr> new_vec = vNULL;
  if (length ())
    new_vec.m_vec = m_vec->copy ();
  return new_vec;
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve (unsigned nelems, bool exact )
{
  if (space (nelems))
    return false;




  vec<T, va_heap, vl_embed> *oldvec = m_vec;
  unsigned int oldsize = 0;
  bool handle_auto_vec = m_vec && using_auto_storage ();
  if (handle_auto_vec)
    {
      m_vec = nullptr;
      oldsize = oldvec->length ();
      nelems += oldsize;
    }

  va_heap::reserve (m_vec, nelems, exact );
  if (handle_auto_vec)
    {
      vec_copy_construct (m_vec->address (), oldvec->address (), oldsize);
      m_vec->m_vecpfx.m_num = oldsize;
    }

  return true;
}







template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve_exact (unsigned nelems )
{
  return reserve (nelems, true );
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::create (unsigned nelems )
{
  m_vec = nullptr;
  if (nelems > 0)
    reserve_exact (nelems );
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::release (void)
{
  if (!m_vec)
    return;

  if (using_auto_storage ())
    {
      m_vec->m_vecpfx.m_num = 0;
      return;
    }

  va_heap::release (m_vec);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::splice (const vec<T, va_heap, vl_ptr> &src)
{
  if (src.length ())
    m_vec->splice (*(src.m_vec));
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_splice (const vec<T, va_heap, vl_ptr> &src
          )
{
  if (src.length ())
    {
      reserve_exact (src.length ());
      splice (src);
    }
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::quick_push (const T &obj)
{
  return m_vec->quick_push (obj);
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::safe_push (const T &obj )
{
  reserve (1, false );
  return quick_push (obj);
}




template<typename T>
inline T &
vec<T, va_heap, vl_ptr>::pop (void)
{
  return m_vec->pop ();
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::truncate (unsigned size)
{
  if (m_vec)
    m_vec->truncate (size);
  else
    ((void)(!(size == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1885, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow (unsigned len )
{
  unsigned oldlen = length ();
  ((void)(!(oldlen <= len) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1898, __FUNCTION__), 0 : 0));
  reserve_exact (len - oldlen );
  if (m_vec)
    m_vec->quick_grow (len);
  else
    ((void)(!(len == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1903, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow_cleared (unsigned len )
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  safe_grow (len );
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1930, __FUNCTION__), 0 : 0));
  m_vec->quick_grow (len);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow_cleared (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1943, __FUNCTION__), 0 : 0));
  m_vec->quick_grow_cleared (len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_insert (unsigned ix, const T &obj)
{
  m_vec->quick_insert (ix, obj);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_insert (unsigned ix, const T &obj )
{
  reserve (1, false );
  quick_insert (ix, obj);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::ordered_remove (unsigned ix)
{
  m_vec->ordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::unordered_remove (unsigned ix)
{
  m_vec->unordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::block_remove (unsigned ix, unsigned len)
{
  m_vec->block_remove (ix, len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::qsort (int (*cmp) (const void *, const void *))
{
  if (m_vec)
    m_vec->qsort (cmp);
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::sort (int (*cmp) (const void *, const void *,
        void *), void *data)
{
  if (m_vec)
    m_vec->sort (cmp, data);
}





template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *))
{
  if (m_vec)
    return m_vec->bsearch (key, cmp);
  return nullptr;
}




template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *,
           void *), void *data)
{
  if (m_vec)
    return m_vec->bsearch (key, cmp, data);
  return nullptr;
}







template<typename T>
inline unsigned
vec<T, va_heap, vl_ptr>::lower_bound (T obj,
          bool (*lessthan)(const T &, const T &))
    const
{
  return m_vec ? m_vec->lower_bound (obj, lessthan) : 0;
}




template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::contains (const T &search) const
{
  return m_vec ? m_vec->contains (search) : false;
}



template<typename T>
inline void
vec<T, va_heap, vl_ptr>::reverse (void)
{
  unsigned l = length ();
  T *ptr = address ();

  for (unsigned i = 0; i < l / 2; i++)
    std::swap (ptr[i], ptr[l - i - 1]);
}

template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::using_auto_storage () const
{
  return m_vec->m_vecpfx.m_using_auto_storage;
}



template<typename T>
inline void
release_vec_vec (vec<vec<T> > &vec)
{
  for (unsigned i = 0; i < vec.length (); i++)
    vec[i].release ();

  vec.release ();
}


        
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 1
# 247 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
# 1 "./gtype-desc.h" 1
# 31 "./gtype-desc.h"
extern void gt_ggc_mx_line_maps (void *);



extern void gt_ggc_mx_cpp_token (void *);



extern void gt_ggc_mx_cpp_macro (void *);



extern void gt_ggc_mx_string_concat (void *);



extern void gt_ggc_mx_string_concat_db (void *);



extern void gt_ggc_mx_hash_map_location_hash_string_concat__ (void *);



extern void gt_ggc_mx_bitmap_head (void *);



extern void gt_ggc_mx_rtx_def (void *);



extern void gt_ggc_mx_rtvec_def (void *);



extern void gt_ggc_mx_gimple (void *);



extern void gt_ggc_mx_symtab_node (void *);



extern void gt_ggc_mx_cgraph_edge (void *);



extern void gt_ggc_mx_section (void *);



extern void gt_ggc_mx_cl_target_option (void *);



extern void gt_ggc_mx_cl_optimization (void *);



extern void gt_ggc_mx_edge_def (void *);



extern void gt_ggc_mx_basic_block_def (void *);



extern void gt_ggc_mx_stack_local_entry (void *);



extern void gt_ggc_mx_machine_function (void *);



extern void gt_ggc_mx_bitmap_element (void *);



extern void gt_ggc_mx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_ggc_mx_coverage_data (void *);



extern void gt_ggc_mx_mem_attrs (void *);



extern void gt_ggc_mx_reg_attrs (void *);



extern void gt_ggc_mx_object_block (void *);



extern void gt_ggc_mx_vec_rtx_va_gc_ (void *);



extern void gt_ggc_mx_real_value (void *);



extern void gt_ggc_mx_fixed_value (void *);



extern void gt_ggc_mx_constant_descriptor_rtx (void *);



extern void gt_ggc_mx_function (void *);



extern void gt_ggc_mx_target_rtl (void *);



extern void gt_ggc_mx_cgraph_rtl_info (void *);



extern void gt_ggc_mx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_ggc_mx_ptr_info_def (void *);



extern void gt_ggc_mx_range_info_def (void *);



extern void gt_ggc_mx_die_struct (void *);



extern void gt_ggc_mx_vec_constructor_elt_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_va_gc_ (void *);



extern void gt_ggc_mx_lang_type (void *);



extern void gt_ggc_mx_lang_decl (void *);



extern void gt_ggc_mx_tree_statement_list_node (void *);



extern void gt_ggc_mx_target_globals (void *);



extern void gt_ggc_mx_lang_tree_node (void *);



extern void gt_ggc_mx_tree_map (void *);



extern void gt_ggc_mx_tree_decl_map (void *);



extern void gt_ggc_mx_tree_int_map (void *);



extern void gt_ggc_mx_tree_vec_map (void *);



extern void gt_ggc_mx_vec_alias_pair_va_gc_ (void *);



extern void gt_ggc_mx_libfunc_entry (void *);



extern void gt_ggc_mx_hash_table_libfunc_hasher_ (void *);



extern void gt_ggc_mx_target_libfuncs (void *);



extern void gt_ggc_mx_sequence_stack (void *);



extern void gt_ggc_mx_vec_rtx_insn__va_gc_ (void *);



extern void gt_ggc_mx_call_site_record_d (void *);



extern void gt_ggc_mx_vec_uchar_va_gc_ (void *);



extern void gt_ggc_mx_vec_call_site_record_va_gc_ (void *);



extern void gt_ggc_mx_gimple_df (void *);



extern void gt_ggc_mx_dw_fde_node (void *);



extern void gt_ggc_mx_rtx_constant_pool (void *);



extern void gt_ggc_mx_frame_space (void *);



extern void gt_ggc_mx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_ggc_mx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_ggc_mx_stack_usage (void *);



extern void gt_ggc_mx_eh_status (void *);



extern void gt_ggc_mx_control_flow_graph (void *);



extern void gt_ggc_mx_loops (void *);



extern void gt_ggc_mx_language_function (void *);



extern void gt_ggc_mx_hash_set_tree_ (void *);



extern void gt_ggc_mx_types_used_by_vars_entry (void *);



extern void gt_ggc_mx_hash_table_used_type_hasher_ (void *);



extern void gt_ggc_mx_nb_iter_bound (void *);



extern void gt_ggc_mx_loop_exit (void *);



extern void gt_ggc_mx_loop (void *);



extern void gt_ggc_mx_control_iv (void *);



extern void gt_ggc_mx_vec_loop_p_va_gc_ (void *);



extern void gt_ggc_mx_niter_desc (void *);



extern void gt_ggc_mx_hash_table_loop_exit_hasher_ (void *);



extern void gt_ggc_mx_vec_basic_block_va_gc_ (void *);



extern void gt_ggc_mx_rtl_bb_info (void *);



extern void gt_ggc_mx_vec_edge_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_ggc_mx_section_hash_entry (void *);



extern void gt_ggc_mx_lto_file_decl_data (void *);



extern void gt_ggc_mx_ipa_replace_map (void *);



extern void gt_ggc_mx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_ggc_mx_ipa_param_adjustments (void *);



extern void gt_ggc_mx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_ggc_mx_cgraph_simd_clone (void *);



extern void gt_ggc_mx_cgraph_function_version_info (void *);



extern void gt_ggc_mx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_ggc_mx_cgraph_indirect_call_info (void *);



extern void gt_ggc_mx_asm_node (void *);



extern void gt_ggc_mx_symbol_table (void *);



extern void gt_ggc_mx_hash_table_section_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_asmname_hasher_ (void *);



extern void gt_ggc_mx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_ggc_mx_constant_descriptor_tree (void *);



extern void gt_ggc_mx_hash_map_alias_set_hash_int_ (void *);



extern void gt_ggc_mx_alias_set_entry (void *);



extern void gt_ggc_mx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_ggc_mx_hash_table_function_version_hasher_ (void *);



extern void gt_ggc_mx_lto_in_decl_state (void *);



extern void gt_ggc_mx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_ipa_node_params (void *);



extern void gt_ggc_mx_ipa_edge_args (void *);



extern void gt_ggc_mx_ipa_agg_replacement_value (void *);



extern void gt_ggc_mx_ipa_fn_summary (void *);



extern void gt_ggc_mx_odr_type_d (void *);



extern void gt_ggc_mx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_ggc_mx_param_access (void *);



extern void gt_ggc_mx_vec_param_access__va_gc_ (void *);



extern void gt_ggc_mx_isra_func_summary (void *);



extern void gt_ggc_mx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_ggc_mx_ipa_sra_function_summaries (void *);



extern void gt_ggc_mx_typeinfo (void *);



extern void gt_ggc_mx_dw_cfi_node (void *);



extern void gt_ggc_mx_dw_loc_descr_node (void *);



extern void gt_ggc_mx_dw_loc_list_struct (void *);



extern void gt_ggc_mx_dw_discr_list_node (void *);



extern void gt_ggc_mx_dw_cfa_location (void *);



extern void gt_ggc_mx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_ggc_mx_addr_table_entry (void *);



extern void gt_ggc_mx_indirect_string_node (void *);



extern void gt_ggc_mx_dwarf_file_data (void *);



extern void gt_ggc_mx_hash_map_char__tree_ (void *);



extern void gt_ggc_mx_dw_cfi_row (void *);



extern void gt_ggc_mx_reg_saved_in_data (void *);



extern void gt_ggc_mx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_indirect_string_hasher_ (void *);



extern void gt_ggc_mx_comdat_type_node (void *);



extern void gt_ggc_mx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_ggc_mx_dw_line_info_table (void *);



extern void gt_ggc_mx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_ggc_mx_limbo_die_struct (void *);



extern void gt_ggc_mx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_die_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_ggc_mx_variable_value_struct (void *);



extern void gt_ggc_mx_hash_table_variable_value_hasher_ (void *);



extern void gt_ggc_mx_hash_table_block_die_hasher_ (void *);



extern void gt_ggc_mx_var_loc_node (void *);



extern void gt_ggc_mx_var_loc_list_def (void *);



extern void gt_ggc_mx_call_arg_loc_node (void *);



extern void gt_ggc_mx_hash_table_decl_loc_hasher_ (void *);



extern void gt_ggc_mx_cached_dw_loc_list_def (void *);



extern void gt_ggc_mx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_ggc_mx_vec_pubname_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_ggc_mx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_addr_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_ggc_mx_inline_entry_data (void *);



extern void gt_ggc_mx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_ggc_mx_temp_slot (void *);



extern void gt_ggc_mx_initial_value_struct (void *);



extern void gt_ggc_mx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_const_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_reg_attr_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_double_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_fixed_hasher_ (void *);



extern void gt_ggc_mx_eh_region_d (void *);



extern void gt_ggc_mx_eh_landing_pad_d (void *);



extern void gt_ggc_mx_eh_catch_d (void *);



extern void gt_ggc_mx_vec_eh_region_va_gc_ (void *);



extern void gt_ggc_mx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_ggc_mx_hash_map_gimple__int_ (void *);



extern void gt_ggc_mx_hash_table_insn_cache_hasher_ (void *);



extern void gt_ggc_mx_temp_slot_address_entry (void *);



extern void gt_ggc_mx_hash_table_temp_address_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_hash_tree_ (void *);



extern void gt_ggc_mx_test_struct (void *);



extern void gt_ggc_mx_test_of_length (void *);



extern void gt_ggc_mx_test_other (void *);



extern void gt_ggc_mx_test_of_union (void *);



extern void gt_ggc_mx_example_base (void *);



extern void gt_ggc_mx_test_node (void *);



extern void gt_ggc_mx_user_struct (void *);



extern void gt_ggc_mx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_ggc_mx_string_pool_data (void *);



extern void gt_ggc_mx_type_hash (void *);



extern void gt_ggc_mx_hash_table_type_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_cl_option_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_section_hasher_ (void *);



extern void gt_ggc_mx_hash_table_object_block_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_clone_hasher_ (void *);



extern void gt_ggc_mx_tm_restart_node (void *);



extern void gt_ggc_mx_hash_map_tree_tree_ (void *);



extern void gt_ggc_mx_hash_table_ssa_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_restart_hasher_ (void *);



extern void gt_ggc_mx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_ggc_mx_scev_info_str (void *);



extern void gt_ggc_mx_hash_table_scev_info_hasher_ (void *);



extern void gt_ggc_mx_ssa_operand_memory_d (void *);



extern void gt_ggc_mx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_ggc_mx_omp_declare_variant_base_entry (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_ggc_mx_hash_table_dllimport_hasher_ (void *);



extern void gt_ggc_mx_hash_map_char__unsigned_ (void *);



extern void gt_ggc_mx_vec_gimple__va_gc_ (void *);



extern void gt_ggc_mx_int_range_1_ (void *);



extern void gt_ggc_mx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_ggc_mx_ipa_bits (void *);



extern void gt_ggc_mx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_bits__va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_vr_va_gc_ (void *);



extern void gt_ggc_mx_ipcp_transformation (void *);



extern void gt_ggc_mx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_ggc_mx_ipa_node_params_t (void *);



extern void gt_ggc_mx_ipa_edge_args_sum_t (void *);



extern void gt_ggc_mx_function_summary_ipcp_transformation__ (void *);



extern void gt_ggc_mx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_state_hasher_ (void *);



extern void gt_ggc_mx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_ggc_mx_vec_condition_va_gc_ (void *);



extern void gt_ggc_mx_vec_size_time_entry_va_gc_ (void *);



extern void gt_ggc_mx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_ggc_mx_tree_type_map (void *);



extern void gt_ggc_mx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_ggc_mx_vec_odr_type_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_value_annotation_hasher_ (void *);



extern void gt_ggc_mx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_ggc_mx_tree_entity_vec_map (void *);



extern void gt_ggc_mx_hash_table_dummy_type_hasher_ (void *);



extern void gt_ggc_mx_parm_attr_d (void *);



extern void gt_ggc_mx_vec_parm_attr_va_gc_ (void *);



extern void gt_ggc_mx_stmt_group (void *);



extern void gt_ggc_mx_elab_info (void *);



extern void gt_ggc_mx_range_check_info_d (void *);



extern void gt_ggc_mx_vec_range_check_info_va_gc_ (void *);



extern void gt_ggc_mx_loop_info_d (void *);



extern void gt_ggc_mx_vec_loop_info_va_gc_ (void *);



extern void gt_ggc_mx_gnat_binding_level (void *);



extern void gt_ggc_mx_packable_type_hash (void *);



extern void gt_ggc_mx_hash_table_packable_type_hasher_ (void *);



extern void gt_ggc_mx_pad_type_hash (void *);



extern void gt_ggc_mx_hash_table_pad_type_hasher_ (void *);



extern void gt_ggc_mx_c_label_vars (void *);



extern void gt_ggc_mx_c_binding (void *);



extern void gt_ggc_mx_c_scope (void *);



extern void gt_ggc_mx_c_goto_bindings (void *);



extern void gt_ggc_mx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_ggc_mx_c_inline_static (void *);



extern void gt_ggc_mx_sorted_fields_type (void *);



extern void gt_ggc_mx_vec_const_char_p_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_ggc_mx_align_stack (void *);



extern void gt_ggc_mx_vec_pending_weak_va_gc_ (void *);



extern void gt_ggc_mx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_ggc_mx_opt_stack (void *);



extern void gt_ggc_mx_c_parser (void *);



extern void gt_ggc_mx_vec_c_token_va_gc_ (void *);



extern void gt_ggc_mx_binding_table_s (void *);



extern void gt_ggc_mx_binding_entry_s (void *);



extern void gt_ggc_mx_cxx_binding (void *);



extern void gt_ggc_mx_cp_binding_level (void *);



extern void gt_ggc_mx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_ggc_mx_cp_token_cache (void *);



extern void gt_ggc_mx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_ggc_mx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_ggc_mx_saved_scope (void *);



extern void gt_ggc_mx_cxx_int_tree_map (void *);



extern void gt_ggc_mx_named_label_entry (void *);



extern void gt_ggc_mx_hash_table_named_label_hash_ (void *);



extern void gt_ggc_mx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_ggc_mx_tree_pair_s (void *);



extern void gt_ggc_mx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_named_decl_hash_ (void *);



extern void gt_ggc_mx_tinst_level (void *);



extern void gt_ggc_mx_tree_check (void *);



extern void gt_ggc_mx_vec_cp_token_va_gc_ (void *);



extern void gt_ggc_mx_cp_lexer (void *);



extern void gt_ggc_mx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser_context (void *);



extern void gt_ggc_mx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser (void *);



extern void gt_ggc_mx_hash_map_tree_int_ (void *);



extern void gt_ggc_mx_constexpr_fundef (void *);



extern void gt_ggc_mx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_ggc_mx_constexpr_call (void *);



extern void gt_ggc_mx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_ggc_mx_sat_entry (void *);



extern void gt_ggc_mx_hash_table_sat_hasher_ (void *);



extern void gt_ggc_mx_coroutine_info (void *);



extern void gt_ggc_mx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_ggc_mx_source_location_table_entry (void *);



extern void gt_ggc_mx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_ggc_mx_named_label_use_entry (void *);



extern void gt_ggc_mx_vec_incomplete_var_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_typename_hasher_ (void *);



extern void gt_ggc_mx_hash_table_mangled_decl_hash_ (void *);



extern void gt_ggc_mx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_int_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_conv_type_hasher_ (void *);



extern void gt_ggc_mx_subsumption_entry (void *);



extern void gt_ggc_mx_hash_table_subsumption_hasher_ (void *);



extern void gt_ggc_mx_pending_template (void *);



extern void gt_ggc_mx_spec_entry (void *);



extern void gt_ggc_mx_hash_table_spec_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_ggc_mx_vec_tinfo_s_va_gc_ (void *);



extern void gt_ggc_mx_vec_deferred_access_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_cplus_array_hasher_ (void *);



extern void gt_ggc_mx_hash_table_list_hasher_ (void *);



extern void gt_ggc_mx_pending_abstract_type (void *);



extern void gt_ggc_mx_hash_table_abstract_type_hasher_ (void *);



extern void gt_ggc_mx_Statement (void *);



extern void gt_ggc_mx_binding_level (void *);



extern void gt_ggc_mx_d_label_use_entry (void *);



extern void gt_ggc_mx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_ggc_mx_hash_table_module_hasher_ (void *);



extern void gt_ggc_mx_module_htab_entry (void *);



extern void gt_ggc_mx_hash_table_module_decl_hasher_ (void *);



extern void gt_ggc_mx_objc_map_private (void *);



extern void gt_ggc_mx_hashed_entry (void *);



extern void gt_ggc_mx_hashed_attribute (void *);



extern void gt_ggc_mx_imp_entry (void *);



extern void gt_ggc_mx_string_descriptor (void *);



extern void gt_ggc_mx_hash_table_objc_string_hasher_ (void *);



extern void gt_ggc_mx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_ggc_mx_vec_msgref_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_ivarref_entry_va_gc_ (void *);
# 1388 "./gtype-desc.h"
extern void gt_pch_nx_line_maps (void *);



extern void gt_pch_nx_cpp_token (void *);



extern void gt_pch_nx_cpp_macro (void *);



extern void gt_pch_nx_string_concat (void *);



extern void gt_pch_nx_string_concat_db (void *);



extern void gt_pch_nx_hash_map_location_hash_string_concat__ (void *);



extern void gt_pch_nx_bitmap_head (void *);



extern void gt_pch_nx_rtx_def (void *);



extern void gt_pch_nx_rtvec_def (void *);



extern void gt_pch_nx_gimple (void *);



extern void gt_pch_nx_symtab_node (void *);



extern void gt_pch_nx_cgraph_edge (void *);



extern void gt_pch_nx_section (void *);



extern void gt_pch_nx_cl_target_option (void *);



extern void gt_pch_nx_cl_optimization (void *);



extern void gt_pch_nx_edge_def (void *);



extern void gt_pch_nx_basic_block_def (void *);



extern void gt_pch_nx_stack_local_entry (void *);



extern void gt_pch_nx_machine_function (void *);



extern void gt_pch_nx_bitmap_element (void *);



extern void gt_pch_nx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_pch_nx_coverage_data (void *);



extern void gt_pch_nx_mem_attrs (void *);



extern void gt_pch_nx_reg_attrs (void *);



extern void gt_pch_nx_object_block (void *);



extern void gt_pch_nx_vec_rtx_va_gc_ (void *);



extern void gt_pch_nx_real_value (void *);



extern void gt_pch_nx_fixed_value (void *);



extern void gt_pch_nx_constant_descriptor_rtx (void *);



extern void gt_pch_nx_function (void *);



extern void gt_pch_nx_target_rtl (void *);



extern void gt_pch_nx_cgraph_rtl_info (void *);



extern void gt_pch_nx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_pch_nx_ptr_info_def (void *);



extern void gt_pch_nx_range_info_def (void *);



extern void gt_pch_nx_die_struct (void *);



extern void gt_pch_nx_vec_constructor_elt_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_va_gc_ (void *);



extern void gt_pch_nx_lang_type (void *);



extern void gt_pch_nx_lang_decl (void *);



extern void gt_pch_nx_tree_statement_list_node (void *);



extern void gt_pch_nx_target_globals (void *);



extern void gt_pch_nx_lang_tree_node (void *);



extern void gt_pch_nx_tree_map (void *);



extern void gt_pch_nx_tree_decl_map (void *);



extern void gt_pch_nx_tree_int_map (void *);



extern void gt_pch_nx_tree_vec_map (void *);



extern void gt_pch_nx_vec_alias_pair_va_gc_ (void *);



extern void gt_pch_nx_libfunc_entry (void *);



extern void gt_pch_nx_hash_table_libfunc_hasher_ (void *);



extern void gt_pch_nx_target_libfuncs (void *);



extern void gt_pch_nx_sequence_stack (void *);



extern void gt_pch_nx_vec_rtx_insn__va_gc_ (void *);



extern void gt_pch_nx_call_site_record_d (void *);



extern void gt_pch_nx_vec_uchar_va_gc_ (void *);



extern void gt_pch_nx_vec_call_site_record_va_gc_ (void *);



extern void gt_pch_nx_gimple_df (void *);



extern void gt_pch_nx_dw_fde_node (void *);



extern void gt_pch_nx_rtx_constant_pool (void *);



extern void gt_pch_nx_frame_space (void *);



extern void gt_pch_nx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_pch_nx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_pch_nx_stack_usage (void *);



extern void gt_pch_nx_eh_status (void *);



extern void gt_pch_nx_control_flow_graph (void *);



extern void gt_pch_nx_loops (void *);



extern void gt_pch_nx_language_function (void *);



extern void gt_pch_nx_hash_set_tree_ (void *);



extern void gt_pch_nx_types_used_by_vars_entry (void *);



extern void gt_pch_nx_hash_table_used_type_hasher_ (void *);



extern void gt_pch_nx_nb_iter_bound (void *);



extern void gt_pch_nx_loop_exit (void *);



extern void gt_pch_nx_loop (void *);



extern void gt_pch_nx_control_iv (void *);



extern void gt_pch_nx_vec_loop_p_va_gc_ (void *);



extern void gt_pch_nx_niter_desc (void *);



extern void gt_pch_nx_hash_table_loop_exit_hasher_ (void *);



extern void gt_pch_nx_vec_basic_block_va_gc_ (void *);



extern void gt_pch_nx_rtl_bb_info (void *);



extern void gt_pch_nx_vec_edge_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_pch_nx_section_hash_entry (void *);



extern void gt_pch_nx_lto_file_decl_data (void *);



extern void gt_pch_nx_ipa_replace_map (void *);



extern void gt_pch_nx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_pch_nx_ipa_param_adjustments (void *);



extern void gt_pch_nx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_pch_nx_cgraph_simd_clone (void *);



extern void gt_pch_nx_cgraph_function_version_info (void *);



extern void gt_pch_nx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_pch_nx_cgraph_indirect_call_info (void *);



extern void gt_pch_nx_asm_node (void *);



extern void gt_pch_nx_symbol_table (void *);



extern void gt_pch_nx_hash_table_section_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_asmname_hasher_ (void *);



extern void gt_pch_nx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_pch_nx_constant_descriptor_tree (void *);



extern void gt_pch_nx_hash_map_alias_set_hash_int_ (void *);



extern void gt_pch_nx_alias_set_entry (void *);



extern void gt_pch_nx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_pch_nx_hash_table_function_version_hasher_ (void *);



extern void gt_pch_nx_lto_in_decl_state (void *);



extern void gt_pch_nx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_pch_nx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_pch_nx_ipa_node_params (void *);



extern void gt_pch_nx_ipa_edge_args (void *);



extern void gt_pch_nx_ipa_agg_replacement_value (void *);



extern void gt_pch_nx_ipa_fn_summary (void *);



extern void gt_pch_nx_odr_type_d (void *);



extern void gt_pch_nx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_pch_nx_param_access (void *);



extern void gt_pch_nx_vec_param_access__va_gc_ (void *);



extern void gt_pch_nx_isra_func_summary (void *);



extern void gt_pch_nx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_pch_nx_ipa_sra_function_summaries (void *);



extern void gt_pch_nx_typeinfo (void *);



extern void gt_pch_nx_dw_cfi_node (void *);



extern void gt_pch_nx_dw_loc_descr_node (void *);



extern void gt_pch_nx_dw_loc_list_struct (void *);



extern void gt_pch_nx_dw_discr_list_node (void *);



extern void gt_pch_nx_dw_cfa_location (void *);



extern void gt_pch_nx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_pch_nx_addr_table_entry (void *);



extern void gt_pch_nx_indirect_string_node (void *);



extern void gt_pch_nx_dwarf_file_data (void *);



extern void gt_pch_nx_hash_map_char__tree_ (void *);



extern void gt_pch_nx_dw_cfi_row (void *);



extern void gt_pch_nx_reg_saved_in_data (void *);



extern void gt_pch_nx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_pch_nx_hash_table_indirect_string_hasher_ (void *);



extern void gt_pch_nx_comdat_type_node (void *);



extern void gt_pch_nx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_pch_nx_dw_line_info_table (void *);



extern void gt_pch_nx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_pch_nx_limbo_die_struct (void *);



extern void gt_pch_nx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_die_hasher_ (void *);



extern void gt_pch_nx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_pch_nx_variable_value_struct (void *);



extern void gt_pch_nx_hash_table_variable_value_hasher_ (void *);



extern void gt_pch_nx_hash_table_block_die_hasher_ (void *);



extern void gt_pch_nx_var_loc_node (void *);



extern void gt_pch_nx_var_loc_list_def (void *);



extern void gt_pch_nx_call_arg_loc_node (void *);



extern void gt_pch_nx_hash_table_decl_loc_hasher_ (void *);



extern void gt_pch_nx_cached_dw_loc_list_def (void *);



extern void gt_pch_nx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_pch_nx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_pch_nx_vec_pubname_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_pch_nx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_hash_table_addr_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_pch_nx_inline_entry_data (void *);



extern void gt_pch_nx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_pch_nx_temp_slot (void *);



extern void gt_pch_nx_initial_value_struct (void *);



extern void gt_pch_nx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_pch_nx_hash_table_const_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_reg_attr_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_double_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_fixed_hasher_ (void *);



extern void gt_pch_nx_eh_region_d (void *);



extern void gt_pch_nx_eh_landing_pad_d (void *);



extern void gt_pch_nx_eh_catch_d (void *);



extern void gt_pch_nx_vec_eh_region_va_gc_ (void *);



extern void gt_pch_nx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_pch_nx_hash_map_gimple__int_ (void *);



extern void gt_pch_nx_hash_table_insn_cache_hasher_ (void *);



extern void gt_pch_nx_temp_slot_address_entry (void *);



extern void gt_pch_nx_hash_table_temp_address_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_hash_tree_ (void *);



extern void gt_pch_nx_test_struct (void *);



extern void gt_pch_nx_test_of_length (void *);



extern void gt_pch_nx_test_other (void *);



extern void gt_pch_nx_test_of_union (void *);



extern void gt_pch_nx_example_base (void *);



extern void gt_pch_nx_test_node (void *);



extern void gt_pch_nx_user_struct (void *);



extern void gt_pch_nx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_pch_nx_string_pool_data (void *);



extern void gt_pch_nx_type_hash (void *);



extern void gt_pch_nx_hash_table_type_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_cl_option_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_section_hasher_ (void *);



extern void gt_pch_nx_hash_table_object_block_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_clone_hasher_ (void *);



extern void gt_pch_nx_tm_restart_node (void *);



extern void gt_pch_nx_hash_map_tree_tree_ (void *);



extern void gt_pch_nx_hash_table_ssa_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_restart_hasher_ (void *);



extern void gt_pch_nx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_pch_nx_scev_info_str (void *);



extern void gt_pch_nx_hash_table_scev_info_hasher_ (void *);



extern void gt_pch_nx_ssa_operand_memory_d (void *);



extern void gt_pch_nx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_pch_nx_omp_declare_variant_base_entry (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_pch_nx_hash_table_dllimport_hasher_ (void *);



extern void gt_pch_nx_hash_map_char__unsigned_ (void *);



extern void gt_pch_nx_vec_gimple__va_gc_ (void *);



extern void gt_pch_nx_int_range_1_ (void *);



extern void gt_pch_nx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_pch_nx_ipa_bits (void *);



extern void gt_pch_nx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_bits__va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_vr_va_gc_ (void *);



extern void gt_pch_nx_ipcp_transformation (void *);



extern void gt_pch_nx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_pch_nx_ipa_node_params_t (void *);



extern void gt_pch_nx_ipa_edge_args_sum_t (void *);



extern void gt_pch_nx_function_summary_ipcp_transformation__ (void *);



extern void gt_pch_nx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_state_hasher_ (void *);



extern void gt_pch_nx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_pch_nx_vec_condition_va_gc_ (void *);



extern void gt_pch_nx_vec_size_time_entry_va_gc_ (void *);



extern void gt_pch_nx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_pch_nx_tree_type_map (void *);



extern void gt_pch_nx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_pch_nx_vec_odr_type_va_gc_ (void *);



extern void gt_pch_nx_hash_table_value_annotation_hasher_ (void *);



extern void gt_pch_nx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_pch_nx_tree_entity_vec_map (void *);



extern void gt_pch_nx_hash_table_dummy_type_hasher_ (void *);



extern void gt_pch_nx_parm_attr_d (void *);



extern void gt_pch_nx_vec_parm_attr_va_gc_ (void *);



extern void gt_pch_nx_stmt_group (void *);



extern void gt_pch_nx_elab_info (void *);



extern void gt_pch_nx_range_check_info_d (void *);



extern void gt_pch_nx_vec_range_check_info_va_gc_ (void *);



extern void gt_pch_nx_loop_info_d (void *);



extern void gt_pch_nx_vec_loop_info_va_gc_ (void *);



extern void gt_pch_nx_gnat_binding_level (void *);



extern void gt_pch_nx_packable_type_hash (void *);



extern void gt_pch_nx_hash_table_packable_type_hasher_ (void *);



extern void gt_pch_nx_pad_type_hash (void *);



extern void gt_pch_nx_hash_table_pad_type_hasher_ (void *);



extern void gt_pch_nx_c_label_vars (void *);



extern void gt_pch_nx_c_binding (void *);



extern void gt_pch_nx_c_scope (void *);



extern void gt_pch_nx_c_goto_bindings (void *);



extern void gt_pch_nx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_pch_nx_c_inline_static (void *);



extern void gt_pch_nx_sorted_fields_type (void *);



extern void gt_pch_nx_vec_const_char_p_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_pch_nx_align_stack (void *);



extern void gt_pch_nx_vec_pending_weak_va_gc_ (void *);



extern void gt_pch_nx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_pch_nx_opt_stack (void *);



extern void gt_pch_nx_c_parser (void *);



extern void gt_pch_nx_vec_c_token_va_gc_ (void *);



extern void gt_pch_nx_binding_table_s (void *);



extern void gt_pch_nx_binding_entry_s (void *);



extern void gt_pch_nx_cxx_binding (void *);



extern void gt_pch_nx_cp_binding_level (void *);



extern void gt_pch_nx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_pch_nx_cp_token_cache (void *);



extern void gt_pch_nx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_pch_nx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_pch_nx_saved_scope (void *);



extern void gt_pch_nx_cxx_int_tree_map (void *);



extern void gt_pch_nx_named_label_entry (void *);



extern void gt_pch_nx_hash_table_named_label_hash_ (void *);



extern void gt_pch_nx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_pch_nx_tree_pair_s (void *);



extern void gt_pch_nx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_pch_nx_hash_table_named_decl_hash_ (void *);



extern void gt_pch_nx_tinst_level (void *);



extern void gt_pch_nx_tree_check (void *);



extern void gt_pch_nx_vec_cp_token_va_gc_ (void *);



extern void gt_pch_nx_cp_lexer (void *);



extern void gt_pch_nx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser_context (void *);



extern void gt_pch_nx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser (void *);



extern void gt_pch_nx_hash_map_tree_int_ (void *);



extern void gt_pch_nx_constexpr_fundef (void *);



extern void gt_pch_nx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_pch_nx_constexpr_call (void *);



extern void gt_pch_nx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_pch_nx_sat_entry (void *);



extern void gt_pch_nx_hash_table_sat_hasher_ (void *);



extern void gt_pch_nx_coroutine_info (void *);



extern void gt_pch_nx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_pch_nx_source_location_table_entry (void *);



extern void gt_pch_nx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_pch_nx_named_label_use_entry (void *);



extern void gt_pch_nx_vec_incomplete_var_va_gc_ (void *);



extern void gt_pch_nx_hash_table_typename_hasher_ (void *);



extern void gt_pch_nx_hash_table_mangled_decl_hash_ (void *);



extern void gt_pch_nx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_int_va_gc_ (void *);



extern void gt_pch_nx_hash_table_conv_type_hasher_ (void *);



extern void gt_pch_nx_subsumption_entry (void *);



extern void gt_pch_nx_hash_table_subsumption_hasher_ (void *);



extern void gt_pch_nx_pending_template (void *);



extern void gt_pch_nx_spec_entry (void *);



extern void gt_pch_nx_hash_table_spec_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_pch_nx_vec_tinfo_s_va_gc_ (void *);



extern void gt_pch_nx_vec_deferred_access_va_gc_ (void *);



extern void gt_pch_nx_hash_table_cplus_array_hasher_ (void *);



extern void gt_pch_nx_hash_table_list_hasher_ (void *);



extern void gt_pch_nx_pending_abstract_type (void *);



extern void gt_pch_nx_hash_table_abstract_type_hasher_ (void *);



extern void gt_pch_nx_Statement (void *);



extern void gt_pch_nx_binding_level (void *);



extern void gt_pch_nx_d_label_use_entry (void *);



extern void gt_pch_nx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_pch_nx_hash_table_module_hasher_ (void *);



extern void gt_pch_nx_module_htab_entry (void *);



extern void gt_pch_nx_hash_table_module_decl_hasher_ (void *);



extern void gt_pch_nx_objc_map_private (void *);



extern void gt_pch_nx_hashed_entry (void *);



extern void gt_pch_nx_hashed_attribute (void *);



extern void gt_pch_nx_imp_entry (void *);



extern void gt_pch_nx_string_descriptor (void *);



extern void gt_pch_nx_hash_table_objc_string_hasher_ (void *);



extern void gt_pch_nx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_pch_nx_vec_msgref_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_ivarref_entry_va_gc_ (void *);





extern void gt_pch_p_9line_maps
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_token
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_macro
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13string_concat
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_concat_db
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_map_location_hash_string_concat__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11bitmap_head
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9rtvec_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_edge
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7section
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cl_target_option
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cl_optimization
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8edge_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15basic_block_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17stack_local_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16machine_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14bitmap_element
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34generic_wide_int_wide_int_storage_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13coverage_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9mem_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9reg_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12object_block
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14vec_rtx_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10real_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11fixed_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23constant_descriptor_rtx
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10target_rtl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cgraph_rtl_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_decl_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_type_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12ptr_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14range_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_constructor_elt_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_tree_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_decl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24tree_statement_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14target_globals
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14lang_tree_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_decl_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_int_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_alias_pair_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13libfunc_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_libfunc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15target_libfuncs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14sequence_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_rtx_insn__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18call_site_record_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16vec_uchar_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_call_site_record_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9gimple_df
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_fde_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17rtx_constant_pool
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11frame_space
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_callee_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_dalloc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11stack_usage
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18control_flow_graph
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_5loops
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17language_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14hash_set_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24types_used_by_vars_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_used_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13nb_iter_bound
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9loop_exit
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_4loop
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10control_iv
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_loop_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10niter_desc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_loop_exit_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_basic_block_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11rtl_bb_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_edge_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_ref_t_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18section_hash_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18lto_file_decl_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_replace_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ipa_replace_map__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21ipa_param_adjustments
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_ipa_param_performed_split_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cgraph_simd_clone
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28cgraph_function_version_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cgraph_edge_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25cgraph_indirect_call_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8asm_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12symbol_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_section_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_asmname_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_symtab_node__symbol_priority_map_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24constant_descriptor_tree
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_map_alias_set_hash_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15alias_set_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_alias_set_entry__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_function_version_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17lto_in_decl_state
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_ipa_bit_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_ipa_vr_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_node_params
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13ipa_edge_args
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25ipa_agg_replacement_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14ipa_fn_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10odr_type_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_ipa_adjusted_param_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12param_access
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_param_access__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17isra_func_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_isra_param_desc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26ipa_sra_function_summaries
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8typeinfo
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_cfi_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17dw_loc_descr_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_loc_list_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_discr_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dw_cfa_location
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_cfi_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16addr_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20indirect_string_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dwarf_file_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20hash_map_char__tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10dw_cfi_row
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17reg_saved_in_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_fde_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_indirect_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16comdat_type_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_line_info_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_line_info_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_dw_attr_node_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16limbo_die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dwarf_file_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_die_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21variable_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_variable_value_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_block_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12var_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16var_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17call_arg_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_loc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22cached_dw_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_dw_loc_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30vec_dw_line_info_table__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_pubname_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_macinfo_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_dw_ranges_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_ranges_by_label_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_die_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_addr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_map_tree_sym_off_pair_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17inline_entry_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36hash_table_inline_entry_data_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9temp_slot
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20initial_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_temp_slot_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_const_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_wide_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_poly_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_reg_attr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_const_double_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_const_fixed_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11eh_region_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16eh_landing_pad_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10eh_catch_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_eh_region_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_eh_landing_pad_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21hash_map_gimple__int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_insn_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23temp_slot_address_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_temp_address_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_tree_hash_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11test_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14test_of_length
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10test_other
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13test_of_union
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9test_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11user_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_libfunc_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_pool_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_type_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_poly_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_cl_option_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_decl_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_37hash_table_tree_vec_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_section_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_object_block_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_tree_descriptor_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_rtx_desc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_tm_clone_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15tm_restart_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19hash_map_tree_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_ssa_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_restart_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_mem_addr_template_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13scev_info_str
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_scev_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20ssa_operand_memory_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_omp_declare_variant_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30omp_declare_variant_base_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_omp_declare_variant_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_table_omp_declare_variant_alt_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_dllimport_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_char__unsigned_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_gimple__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12int_range_1_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_ipa_agg_jf_item_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8ipa_bits
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_ipa_param_descriptor_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_bits__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_ipa_vr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipcp_transformation
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ipa_jump_func_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_39vec_ipa_polymorphic_call_context_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17ipa_node_params_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipa_edge_args_sum_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38function_summary_ipcp_transformation__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_wrapper_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_decl_state_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_expr_eval_op_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_condition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_size_time_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44fast_function_summary_ipa_fn_summary__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_type_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_type_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_odr_type_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_value_annotation_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_Entity_Id_va_gc_atomic_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19tree_entity_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dummy_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11parm_attr_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_parm_attr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10stmt_group
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9elab_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18range_check_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_range_check_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11loop_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_loop_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18gnat_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18packable_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_packable_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13pad_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_pad_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12c_label_vars
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9c_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7c_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_goto_bindings
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_c_goto_bindings_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_inline_static
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18sorted_fields_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_const_char_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_gc_vec_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11align_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_pending_weak_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_pending_redefinition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9opt_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8c_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_c_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_table_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_entry_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cxx_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cp_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_cp_class_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14cp_token_cache
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32vec_deferred_access_check_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_cxx_saved_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11saved_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cxx_int_tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17named_label_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_named_label_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_cxx_int_tree_map_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tree_pair_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_pair_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_named_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tinst_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10tree_check
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_cp_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8cp_lexer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_cp_default_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cp_parser_context
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38vec_cp_unparsed_functions_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cp_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18hash_map_tree_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16constexpr_fundef
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_constexpr_fundef_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14constexpr_call
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_constexpr_call_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9sat_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22hash_table_sat_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14coroutine_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_coroutine_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27source_location_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44hash_table_source_location_table_entry_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21named_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_incomplete_var_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_typename_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_mangled_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_pending_noexcept_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_tree_int_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_conv_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17subsumption_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_subsumption_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16pending_template
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10spec_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_spec_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_map_tree_tree_pair_p_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_tinfo_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_deferred_access_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cplus_array_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21pending_abstract_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_abstract_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9Statement
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17d_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_map_Statement__d_label_entry_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25hash_table_module_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17module_htab_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_module_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16objc_map_private
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12hashed_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16hashed_attribute
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9imp_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17string_descriptor
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_objc_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ident_data_tuple_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_msgref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_prot_list_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ivarref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 2




typedef void (*gt_note_pointers) (void *, void *, gt_pointer_operator,
      void *);






typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,
       void *);


extern int gt_pch_note_object (void *, void *, gt_note_pointers);



extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);


extern void gt_clear_caches ();


typedef void (*gt_pointer_walker) (void *);



struct ggc_root_tab {
  void *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
};


extern const struct ggc_root_tab * const gt_ggc_rtab[];
extern const struct ggc_root_tab * const gt_ggc_deletable_rtab[];
extern const struct ggc_root_tab * const gt_pch_scalar_rtab[];
# 91 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
extern int ggc_set_mark (const void *);




extern int ggc_marked_p (const void *);


extern void gt_pch_n_S (const void *);
extern void gt_ggc_m_S (const void *);




extern void init_stringpool (void);


extern void init_ggc (void);





extern bool ggc_protect_identifiers;


extern void gt_pch_save (FILE *f);





extern void *ggc_internal_alloc (size_t, void (*)(void *), size_t,
     size_t )
     __attribute__ ((__malloc__));

inline void *
ggc_internal_alloc (size_t s )
{
  return ggc_internal_alloc (s, nullptr, 0, 1 );
}

extern size_t ggc_round_alloc_size (size_t requested_size);


extern void *ggc_internal_cleared_alloc (size_t, void (*)(void *),
      size_t, size_t
      ) __attribute__ ((__malloc__));

inline void *
ggc_internal_cleared_alloc (size_t s )
{
  return ggc_internal_cleared_alloc (s, nullptr, 0, 1 );
}


extern void *ggc_realloc (void *, size_t );


extern void ggc_free (void *);

extern void dump_ggc_loc_statistics ();





template<typename T>
void
finalize (void *p)
{
  static_cast<T *> (p)->~T ();
}

template<typename T>
inline bool
need_finalization_p ()
{

  return !__has_trivial_destructor (T);



}

template<typename T>
inline T *
ggc_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), finalize<T>, 0, 1
       ));
  else
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
       ));
}





template<typename T>
inline T *
ggc_alloc_no_dtor ()
{
  return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
            ));
}

template<typename T>
inline T *
ggc_cleared_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T),
        finalize<T>, 0, 1
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T), nullptr, 0, 1
        ));
}

template<typename T>
inline T *
ggc_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), finalize<T>,
       sizeof (T), c ));
  else
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), nullptr, 0, 0
       ));
}

template<typename T>
inline T *
ggc_cleared_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T),
        finalize<T>,
        sizeof (T), c
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T), nullptr,
        0, 0 ));
}

inline void *
ggc_alloc_atomic (size_t s )
{
    return ggc_internal_alloc (s );
}



template <typename T>
inline void
ggc_delete (T *ptr)
{
  ptr->~T ();
  ggc_free (ptr);
}




extern const char *ggc_alloc_string (const char *contents, int length
                                     );






extern void ggc_collect (void);


extern void ggc_trim (void);


extern void ggc_grow (void);



extern void ggc_register_root_tab (const struct ggc_root_tab *);


extern void gt_pch_restore (FILE *f);




extern void ggc_print_statistics (void);

extern void stringpool_statistics (void);


extern void init_ggc_heuristics (void);


extern void report_heap_memory_use (void);







inline struct rtx_def *
ggc_alloc_rtx_def_stat (size_t s )
{
  return (struct rtx_def *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_cleared_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_cleared_alloc (s );
}

inline gimple *
ggc_alloc_cleared_gimple_statement_stat (size_t s )
{
  return (gimple *) ggc_internal_cleared_alloc (s );
}

inline void
gt_ggc_mx (const char *s)
{
  ((const_cast<char *> (s)) != nullptr && ((void *) (const_cast<char *> (s))) != (void *) 1 && ! ggc_set_mark (const_cast<char *> (s)));
}

inline void
gt_pch_nx (const char *)
{
}

inline void
gt_ggc_mx (int)
{
}

inline void
gt_pch_nx (int)
{
}

inline void
gt_pch_nx (unsigned int)
{
}
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 250 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
hashval_t iterative_hash_host_wide_int (long, hashval_t);
hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);

namespace inchash
{

class hash
{
 public:


  hash (hashval_t seed = 0)
  {
    val = seed;
    bits = 0;
  }


  hashval_t end ()
  {
    return val;
  }


  void add_int (unsigned v)
  {
    val = iterative_hash_hashval_t (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_int (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_int (v.coeffs[i]);
  }


  void add_hwi (long v)
  {
    val = iterative_hash_host_wide_int (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_hwi (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_hwi (v.coeffs[i]);
  }


  template<typename T>
  void add_wide_int (const generic_wide_int<T> &x)
  {
    add_int (x.get_len ());
    for (unsigned i = 0; i < x.get_len (); i++)
      add_hwi (x.sext_elt (i));
  }


  void add_ptr (const void *ptr)
  {
    add (&ptr, sizeof (ptr));
  }


  void add (const void *data, size_t len)
  {
    val = iterative_hash (data, len, val);
  }


  void merge_hash (hashval_t other)
  {
    val = iterative_hash_hashval_t (other, val);
  }


  void merge (hash &other)
  {
    merge_hash (other.val);
  }

  template<class T> void add_object(T &obj)
  {
    add (&obj, sizeof(T));
  }



  void add_flag (bool flag)
  {
    bits = (bits << 1) | flag;
  }

  void commit_flag ()
  {
    add_int (bits);
    bits = 0;
  }





  void add_commutative (hash &a, hash &b)
  {
    if (a.end() > b.end())
      {
 merge (b);
 merge (a);
      }
    else
      {
 merge (a);
 merge (b);
      }
  }

 private:
  hashval_t val;
  unsigned bits;
};

}
# 174 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
inline
hashval_t
iterative_hash_hashval_t (hashval_t val, hashval_t val2)
{

  hashval_t a = 0x9e3779b9;

  { a -= val; a -= val2; a ^= (val2>>13); val -= val2; val -= a; val ^= (a<< 8); val2 -= a; val2 -= val; val2 ^= ((val&0xffffffff)>>13); a -= val; a -= val2; a ^= ((val2&0xffffffff)>>12); val -= val2; val -= a; val = (val ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>> 5)) & 0xffffffff; a -= val; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; val -= val2; val -= a; val = (val ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>>15)) & 0xffffffff; };
  return val2;
}



inline
hashval_t
iterative_hash_host_wide_int (long val, hashval_t val2)
{
  if (sizeof (long) == sizeof (hashval_t))
    return iterative_hash_hashval_t (val, val2);
  else
    {
      hashval_t a = (hashval_t) val;


      int zero = 0;
      hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 8 + zero));
      { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
      if (sizeof (long) > 2 * sizeof (hashval_t))
 {
   hashval_t a = (hashval_t) (val >> (sizeof (hashval_t) * 16 + zero));
   hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 24 + zero));
   { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
 }
      return val2;
    }
}
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h"
enum mem_alloc_origin
{
  HASH_TABLE_ORIGIN,
  HASH_MAP_ORIGIN,
  HASH_SET_ORIGIN,
  VEC_ORIGIN,
  BITMAP_ORIGIN,
  GGC_ORIGIN,
  ALLOC_POOL_ORIGIN,
  MEM_ALLOC_ORIGIN_LENGTH
};


static const char * mem_alloc_origin_names[] = { "Hash tables", "Hash maps",
  "Hash sets", "Heap vectors", "Bitmaps", "GGC memory", "Allocation pool" };
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h"
template <typename Type>
struct typed_free_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_free_remove <Type>::remove (Type *p)
{
  free (p);
}



template <typename Type>
struct typed_delete_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_delete_remove <Type>::remove (Type *p)
{
  delete p;
}



template <typename Type>
struct typed_noop_remove
{
  static inline void remove (Type &);
};




template <typename Type>
inline void
typed_noop_remove <Type>::remove (Type &)
{
}







template <typename Type, Type Empty, Type Deleted = Empty>
struct int_hash : typed_noop_remove <Type>
{
  typedef Type value_type;
  typedef Type compare_type;

  static inline hashval_t hash (value_type);
  static inline bool equal (value_type existing, value_type candidate);
  static inline void mark_deleted (Type &);
  static const bool empty_zero_p = Empty == 0;
  static inline void mark_empty (Type &);
  static inline bool is_deleted (Type);
  static inline bool is_empty (Type);
};

template <typename Type, Type Empty, Type Deleted>
inline hashval_t
int_hash <Type, Empty, Deleted>::hash (value_type x)
{
  return x;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::equal (value_type x, value_type y)
{
  return x == y;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_deleted (Type &x)
{
  ((void)(!(Empty != Deleted) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h", 115, __FUNCTION__), 0 : 0));
  x = Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_empty (Type &x)
{
  x = Empty;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_deleted (Type x)
{
  return Empty != Deleted && x == Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_empty (Type x)
{
  return x == Empty;
}





template <typename Type>
struct pointer_hash
{
  typedef Type *value_type;
  typedef Type *compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &existing,
       const compare_type &candidate);
  static inline void mark_deleted (Type *&);
  static const bool empty_zero_p = true;
  static inline void mark_empty (Type *&);
  static inline bool is_deleted (Type *);
  static inline bool is_empty (Type *);
};

template <typename Type>
inline hashval_t
pointer_hash <Type>::hash (const value_type &candidate)
{


  return (hashval_t) ((intptr_t)candidate >> 3);
}

template <typename Type>
inline bool
pointer_hash <Type>::equal (const value_type &existing,
      const compare_type &candidate)
{
  return existing == candidate;
}

template <typename Type>
inline void
pointer_hash <Type>::mark_deleted (Type *&e)
{
  e = reinterpret_cast<Type *> (1);
}

template <typename Type>
inline void
pointer_hash <Type>::mark_empty (Type *&e)
{
  e = nullptr;
}

template <typename Type>
inline bool
pointer_hash <Type>::is_deleted (Type *e)
{
  return e == reinterpret_cast<Type *> (1);
}

template <typename Type>
inline bool
pointer_hash <Type>::is_empty (Type *e)
{
  return e == nullptr;
}




struct string_hash : pointer_hash <const char>
{
  static inline hashval_t hash (const char *);
  static inline bool equal (const char *, const char *);
};

inline hashval_t
string_hash::hash (const char *id)
{
  return htab_hash_string (id);
}

inline bool
string_hash::equal (const char *id1, const char *id2)
{
  return strcmp (id1, id2) == 0;
}



template<typename T>
struct ggc_remove
{
  static void remove (T &) {}

  static void
  ggc_mx (T &p)
  {
    extern void gt_ggc_mx (T &);
    gt_ggc_mx (p);
  }


  static void
  ggc_maybe_mx (T &p)
  {
    ggc_mx (p);
  }

  static void
  pch_nx (T &p)
  {
    extern void gt_pch_nx (T &);
    gt_pch_nx (p);
  }

  static void
  pch_nx (T &p, gt_pointer_operator op, void *cookie)
  {
    op (&p, cookie);
  }
};




template<typename T>
struct ggc_cache_remove : ggc_remove<T>
{

  static void ggc_maybe_mx (T &) {}

  static int
  keep_cache_entry (T &e)
  {
    return ggc_marked_p (e) ? -1 : 0;
  }
};




template <typename T>
struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T *> {};




template <typename T>
struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};




template <typename T>
struct delete_ptr_hash : pointer_hash <T>, typed_delete_remove <T> {};




template <typename T>
struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};





template <typename T>
struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};




struct nofree_string_hash : string_hash, typed_noop_remove <const char *> {};




template <typename T1, typename T2>
struct pair_hash
{
  typedef std::pair <typename T1::value_type,
       typename T2::value_type> value_type;
  typedef std::pair <typename T1::compare_type,
       typename T2::compare_type> compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &, const compare_type &);
  static inline void remove (value_type &);
  static inline void mark_deleted (value_type &);
  static const bool empty_zero_p = T1::empty_zero_p;
  static inline void mark_empty (value_type &);
  static inline bool is_deleted (const value_type &);
  static inline bool is_empty (const value_type &);
};

template <typename T1, typename T2>
inline hashval_t
pair_hash <T1, T2>::hash (const value_type &x)
{
  return iterative_hash_hashval_t (T1::hash (x.first), T2::hash (x.second));
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::equal (const value_type &x, const compare_type &y)
{
  return T1::equal (x.first, y.first) && T2::equal (x.second, y.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::remove (value_type &x)
{
  T1::remove (x.first);
  T2::remove (x.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_deleted (value_type &x)
{
  T1::mark_deleted (x.first);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_empty (value_type &x)
{
  T1::mark_empty (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_deleted (const value_type &x)
{
  return T1::is_deleted (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_empty (const value_type &x)
{
  return T1::is_empty (x.first);
}

template <typename T> struct default_hash_traits : T {};

template <typename T>
struct default_hash_traits <T *> : ggc_ptr_hash <T> {};
# 253 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h"
template <typename H, typename Value>
struct simple_hashmap_traits
{
  typedef typename H::value_type key_type;
  static const bool maybe_mx = true;
  static inline hashval_t hash (const key_type &);
  static inline bool equal_keys (const key_type &, const key_type &);
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = H::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename H, typename Value>
inline hashval_t
simple_hashmap_traits <H, Value>::hash (const key_type &h)
{
  return H::hash (h);
}

template <typename H, typename Value>
inline bool
simple_hashmap_traits <H, Value>::equal_keys (const key_type &k1,
           const key_type &k2)
{
  return H::equal (k1, k2);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::remove (T &entry)
{
  H::remove (entry.m_key);
  entry.m_value.~Value ();
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_empty (const T &entry)
{
  return H::is_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_deleted (const T &entry)
{
  return H::is_deleted (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_empty (T &entry)
{
  H::mark_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_deleted (T &entry)
{
  H::mark_deleted (entry.m_key);
}

template <typename H, typename Value>
struct simple_cache_map_traits: public simple_hashmap_traits<H,Value>
{
  static const bool maybe_mx = false;
};






template <typename Value>
struct unbounded_hashmap_traits
{
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = default_hash_traits <Value>::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::remove (T &entry)
{
  default_hash_traits <Value>::remove (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_empty (const T &entry)
{
  return default_hash_traits <Value>::is_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_deleted (const T &entry)
{
  return default_hash_traits <Value>::is_deleted (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_empty (T &entry)
{
  default_hash_traits <Value>::mark_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_deleted (T &entry)
{
  default_hash_traits <Value>::mark_deleted (entry.m_value);
}





template <typename Key, typename Value>
struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>
{
  typedef Key key_type;
  static inline hashval_t hash (Key);
  static inline bool equal_keys (Key, Key);
};

template <typename Key, typename Value>
inline hashval_t
unbounded_int_hashmap_traits <Key, Value>::hash (Key k)
{
  return k;
}

template <typename Key, typename Value>
inline bool
unbounded_int_hashmap_traits <Key, Value>::equal_keys (Key k1, Key k2)
{
  return k1 == k2;
}
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

template<typename, typename, typename> class hash_map;
template<typename, bool, typename> class hash_set;




template <typename Type>
struct xcallocator
{
  static Type *data_alloc (size_t count);
  static void data_free (Type *memory);
};




template <typename Type>
inline Type *
xcallocator <Type>::data_alloc (size_t count)
{
  return static_cast <Type *> (xcalloc (count, sizeof (Type)));
}




template <typename Type>
inline void
xcallocator <Type>::data_free (Type *memory)
{
  return ::free (memory);
}




struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;
  hashval_t shift;
};

extern struct prime_ent const prime_tab[];


extern unsigned int hash_table_sanitize_eq_limit;



extern unsigned int hash_table_higher_prime_index (unsigned long n)
   __attribute__ ((__pure__));

extern __attribute__ ((__noreturn__)) __attribute__ ((__cold__)) void hashtab_chk_error ();
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
inline hashval_t
mul_mod (hashval_t x, hashval_t y, hashval_t inv, int shift)
{
   hashval_t t1, t2, t3, t4, q, r;

   t1 = ((uint64_t)x * inv) >> 32;
   t2 = x - t1;
   t3 = t2 >> 1;
   t4 = t1 + t3;
   q = t4 >> shift;
   r = x - (q * y);

   return r;
}



inline hashval_t
hash_table_mod1 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 343, __FUNCTION__), 0 : 0));
  return mul_mod (hash, p->prime, p->inv, p->shift);
}



inline hashval_t
hash_table_mod2 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 353, __FUNCTION__), 0 : 0));
  return 1 + mul_mod (hash, p->prime - 2, p->inv_m2, p->shift);
}

class mem_usage;
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template <typename Descriptor, bool Lazy = false,
   template<typename Type> class Allocator = xcallocator>
class hash_table
{
  typedef typename Descriptor::value_type value_type;
  typedef typename Descriptor::compare_type compare_type;

public:
  explicit hash_table (size_t, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  explicit hash_table (const hash_table &, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  ~hash_table ();


  static hash_table *
  create_ggc (size_t n, bool sanitize_eq_and_hash = true )
  {
    hash_table *table = ggc_alloc<hash_table> ();
    new (table) hash_table (n, true, sanitize_eq_and_hash, 0,
       HASH_TABLE_ORIGIN );
    return table;
  }


  size_t size () const { return m_size; }


  size_t elements () const { return m_n_elements - m_n_deleted; }


  size_t elements_with_deleted () const { return m_n_elements; }


  void empty () { if (elements ()) empty_slow (); }


  bool is_empty () const { return elements () == 0; }




  void clear_slot (value_type *);




  value_type &find_with_hash (const compare_type &, hashval_t);


  value_type &find (const value_type &value)
    {
      return find_with_hash (value, Descriptor::hash (value));
    }

  value_type *find_slot (const value_type &value, insert_option insert)
    {
      return find_slot_with_hash (value, Descriptor::hash (value), insert);
    }
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
  value_type *find_slot_with_hash (const compare_type &comparable,
       hashval_t hash, enum insert_option insert);




  void remove_elt_with_hash (const compare_type &, hashval_t);



  void remove_elt (const value_type &value)
    {
      remove_elt_with_hash (value, Descriptor::hash (value));
    }




  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse_noresize (Argument argument);



  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse (Argument argument);

  class iterator
  {
  public:
    iterator () : m_slot (nullptr), m_limit (nullptr) {}

    iterator (value_type *slot, value_type *limit) :
      m_slot (slot), m_limit (limit) {}

    inline value_type &operator * () { return *m_slot; }
    void slide ();
    inline iterator &operator ++ ();
    bool operator != (const iterator &other) const
      {
 return m_slot != other.m_slot || m_limit != other.m_limit;
      }

  private:
    value_type *m_slot;
    value_type *m_limit;
  };

  iterator begin () const
    {
      if (Lazy && m_entries == nullptr)
 return iterator ();
      iterator iter (m_entries, m_entries + m_size);
      iter.slide ();
      return iter;
    }

  iterator end () const { return iterator (); }

  double collisions () const
    {
      return m_searches ? static_cast <double> (m_collisions) / m_searches : 0;
    }

private:

  void operator= (hash_table&);

  template<typename T> friend void gt_ggc_mx (hash_table<T> *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *);
  template<typename T> friend void
    hashtab_entry_note_pointers (void *, void *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void
  gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *,
           gt_pointer_operator, void *);

  template<typename T> friend void gt_cleare_cache (hash_table<T> *);

  void empty_slow ();

  value_type *alloc_entries (size_t n ) const;
  value_type *find_empty_slot_for_expand (hashval_t);
  void verify (const compare_type &comparable, hashval_t hash);
  bool too_empty_p (unsigned int);
  void expand ();
  static bool is_deleted (value_type &v)
  {
    return Descriptor::is_deleted (v);
  }

  static bool is_empty (value_type &v)
  {
    return Descriptor::is_empty (v);
  }

  static void mark_deleted (value_type &v)
  {
    Descriptor::mark_deleted (v);
  }

  static void mark_empty (value_type &v)
  {
    Descriptor::mark_empty (v);
  }


  typename Descriptor::value_type *m_entries;

  size_t m_size;


  size_t m_n_elements;


  size_t m_n_deleted;



  unsigned int m_searches;



  unsigned int m_collisions;



  unsigned int m_size_prime_index;


  bool m_ggc;


  bool m_sanitize_eq_and_hash;





  static const bool m_gather_mem_stats = false;

};




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
template<typename Key, typename Value,
  typename Traits = simple_hashmap_traits<default_hash_traits<Key>,
       Value> >
class hash_map;





class mem_location
{
public:

  inline
  mem_location () {}


  inline
  mem_location (mem_alloc_origin origin, bool ggc,
  const char *filename = nullptr, int line = 0,
  const char *function = nullptr):
    m_filename (filename), m_function (function), m_line (line), m_origin
    (origin), m_ggc (ggc) {}


  inline
  mem_location (mem_location &other): m_filename (other.m_filename),
    m_function (other.m_function), m_line (other.m_line),
    m_origin (other.m_origin), m_ggc (other.m_ggc) {}





  hashval_t
  hash ()
  {
    inchash::hash hash;

    hash.add_ptr (m_filename);
    hash.add_ptr (m_function);
    hash.add_int (m_line);

    return hash.end ();
  }


  int
  equal (const mem_location &other)
  {
    return m_filename == other.m_filename && m_function == other.m_function
      && m_line == other.m_line;
  }


  inline const char *
  get_trimmed_filename ()
  {
    const char *s1 = m_filename;
    const char *s2;

    while ((s2 = strstr (s1, "gcc/")))
      s1 = s2 + 4;

    return s1;
  }

  inline char *
  to_string ()
  {
    unsigned l = strlen (get_trimmed_filename ()) + strlen (m_function)
      + 30;

    char *s = ((char *) xmalloc (sizeof (char) * (l)));
    sprintf (s, "%s:%i (%s)", get_trimmed_filename (),
      m_line, m_function);

    s[((48) < (l - 1) ? (48) : (l - 1))] = '\0';

    return s;
  }


  static const char *
  get_origin_name (mem_alloc_origin origin)
  {
    return mem_alloc_origin_names[(unsigned) origin];
  }


  const char *m_filename;

  const char *m_function;

  int m_line;

  mem_alloc_origin m_origin;

  bool m_ggc;
};


class mem_usage
{
public:

  mem_usage (): m_allocated (0), m_times (0), m_peak (0), m_instances (1) {}


  mem_usage (size_t allocated, size_t times, size_t peak, size_t instances = 0):
    m_allocated (allocated), m_times (times), m_peak (peak),
    m_instances (instances) {}


  inline void
  register_overhead (size_t size)
  {
    m_allocated += size;
    m_times++;

    if (m_peak < m_allocated)
      m_peak = m_allocated;
  }


  inline void
  release_overhead (size_t size)
  {
    ((void)(!(size <= m_allocated) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h", 153, __FUNCTION__), 0 : 0));

    m_allocated -= size;
  }


  mem_usage
  operator+ (const mem_usage &second)
  {
    return mem_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_instances + second.m_instances);
  }


  inline bool
  operator== (const mem_usage &second) const
  {
    return (m_allocated == second.m_allocated
     && m_peak == second.m_peak
     && m_times == second.m_times);
  }


  inline bool
  operator< (const mem_usage &second) const
  {
    if (*this == second)
      return false;

    return (m_allocated == second.m_allocated ?
     (m_peak == second.m_peak ? m_times < second.m_times
      : m_peak < second.m_peak) : m_allocated < second.m_allocated);
  }


  static int
  compare (const void *first, const void *second)
  {
    typedef std::pair<mem_location *, mem_usage *> mem_pair_t;

    const mem_pair_t f = *(const mem_pair_t *)first;
    const mem_pair_t s = *(const mem_pair_t *)second;

    if (*f.second == *s.second)
      return 0;

    return *f.second < *s.second ? 1 : -1;
  }


  inline void
  dump (mem_location *loc, const mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s " "%" "9" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                             "l" "u" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                             "%c" ":%5.1f%%"
      "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
     "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
     "%c" "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
              "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
              "%c" ":%5.1f%%%10s\n",
      location_string, (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)(((m_peak) < 10 * 1024 ? (m_peak) : ((m_peak) < 10 * (1024 * 1024) ? (m_peak) / 1024 : (m_peak) / (1024 * 1024)))), ((m_peak) < 10 * 1024 ? ' ' : ((m_peak) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_times, total.m_times), loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  inline void
  dump_footer () const
  {
    fprintf (
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%s" "%" "53" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                         "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                         "%c" "%" "26" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                                   "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                                   "%c" "\n", "Total",
      (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')));
  }


  static inline float
  get_percent (size_t nominator, size_t denominator)
  {
    return denominator == 0 ? 0.0f : nominator * 100.0 / denominator;
  }


  static inline void
  print_dash_line (size_t count = 140)
  {
    while (count--)
      fputc ('-', 
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                 stderr
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                       );
    fputc ('\n', 
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                stderr
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                      );
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s %11s%16s%10s%17s\n", name, "Leak", "Peak",
      "Times", "Type");
  }


  size_t m_allocated;

  size_t m_times;

  size_t m_peak;

  size_t m_instances;
};



template <class T>
class mem_usage_pair
{
public:
  mem_usage_pair (T *usage_, size_t allocated_): usage (usage_),
  allocated (allocated_) {}

  T *usage;
  size_t allocated;
};


template <class T>
class mem_alloc_description
{
public:
  struct mem_location_hash : nofree_ptr_hash <mem_location>
  {
    static hashval_t
    hash (value_type l)
    {
      inchash::hash hstate;

      hstate.add_ptr ((const void *)l->m_filename);
      hstate.add_ptr (l->m_function);
      hstate.add_int (l->m_line);

      return hstate.end ();
    }

    static bool
    equal (value_type l1, value_type l2)
    {
      return (l1->m_filename == l2->m_filename
       && l1->m_function == l2->m_function
       && l1->m_line == l2->m_line);
    }
  };


  typedef hash_map <mem_location_hash, T *> mem_map_t;
  typedef hash_map <const void *, mem_usage_pair<T> > reverse_mem_map_t;
  typedef hash_map <const void *, std::pair<T *, size_t> > reverse_object_map_t;
  typedef std::pair <mem_location *, T *> mem_list_t;


  mem_alloc_description ();


  ~mem_alloc_description ();


  bool contains_descriptor_for_instance (const void *ptr);


  T *get_descriptor_for_instance (const void *ptr);



  T *register_descriptor (const void *ptr, mem_location *location);





  T *register_descriptor (const void *ptr, mem_alloc_origin origin,
     bool ggc, const char *name, int line,
     const char *function);



  T *register_instance_overhead (size_t size, const void *ptr);




  void register_object_overhead (T *usage, size_t size, const void *ptr);




  T *release_instance_overhead (void *ptr, size_t size,
    bool remove_from_map = false);


  void release_object_overhead (void *ptr);





  void unregister_descriptor (void *ptr);


  T get_sum (mem_alloc_origin origin);





  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length);



  void dump (mem_alloc_origin origin);


  reverse_object_map_t *m_reverse_object_map;

private:


  T *register_overhead (size_t size, mem_alloc_origin origin, const char *name,
   int line, const char *function, const void *ptr);


  mem_location m_location;


  mem_map_t *m_map;


  reverse_mem_map_t *m_reverse_map;
};



template <class T>
inline bool
mem_alloc_description<T>::contains_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr);
}



template <class T>
inline T*
mem_alloc_description<T>::get_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr) ? (*m_reverse_map->get (ptr)).usage : nullptr;
}




template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_location *location)
{
  T *usage = nullptr;

  T **slot = m_map->get (location);
  if (slot)
    {
      delete location;
      usage = *slot;
      usage->m_instances++;
    }
  else
    {
      usage = new T ();
      m_map->put (location, usage);
    }

  if (!m_reverse_map->get (ptr))
    m_reverse_map->put (ptr, mem_usage_pair<T> (usage, 0));

  return usage;
}






template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_alloc_origin origin,
            bool ggc,
            const char *filename,
            int line,
            const char *function)
{
  mem_location *l = new mem_location (origin, ggc, filename, line, function);
  return register_descriptor (ptr, l);
}




template <class T>
inline T*
mem_alloc_description<T>::register_instance_overhead (size_t size,
            const void *ptr)
{
  mem_usage_pair <T> *slot = m_reverse_map->get (ptr);
  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->register_overhead (size);

  return usage;
}





template <class T>
void
mem_alloc_description<T>::register_object_overhead (T *usage, size_t size,
          const void *ptr)
{


  m_reverse_object_map->put (ptr, std::pair<T *, size_t> (usage, size));
}




template <class T>
inline T*
mem_alloc_description<T>::register_overhead (size_t size,
          mem_alloc_origin origin,
          const char *filename,
          int line,
          const char *function,
          const void *ptr)
{
  T *usage = register_descriptor (ptr, origin, filename, line, function);
  usage->register_overhead (size);

  return usage;
}



template <class T>
inline T *
mem_alloc_description<T>::release_instance_overhead (void *ptr, size_t size,
           bool remove_from_map)
{
  mem_usage_pair<T> *slot = m_reverse_map->get (ptr);

  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->release_overhead (size);

  if (remove_from_map)
    m_reverse_map->remove (ptr);

  return usage;
}



template <class T>
inline void
mem_alloc_description<T>::release_object_overhead (void *ptr)
{
  std::pair <T *, size_t> *entry = m_reverse_object_map->get (ptr);
  entry->first->release_overhead (entry->second);
  m_reverse_object_map->remove (ptr);
}





template <class T>
inline void
mem_alloc_description<T>::unregister_descriptor (void *ptr)
{
  m_reverse_map->remove (ptr);
}



template <class T>
inline
mem_alloc_description<T>::mem_alloc_description ()
{
  m_map = new mem_map_t (13, false, false, false);
  m_reverse_map = new reverse_mem_map_t (13, false, false, false);
  m_reverse_object_map = new reverse_object_map_t (13, false, false, false);
}



template <class T>
inline
mem_alloc_description<T>::~mem_alloc_description ()
{
  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    {
      delete (*it).first;
      delete (*it).second;
    }

  delete m_map;
  delete m_reverse_map;
  delete m_reverse_object_map;
}






template <class T>
inline
typename mem_alloc_description<T>::mem_list_t *
mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length)
{


  size_t element_size = sizeof (mem_list_t);
  mem_list_t *list = ((mem_list_t *) xcalloc ((m_map->elements ()), sizeof (mem_list_t)));
  unsigned i = 0;

  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    if ((*it).first->m_origin == origin)
      list[i++] = std::pair<mem_location*, T*> (*it);

  gcc_qsort (list, i, element_size, T::compare);
  *length = i;

  return list;
}



template <class T>
inline T
mem_alloc_description<T>::get_sum (mem_alloc_origin origin)
{
  unsigned length;
  mem_list_t *list = get_list (origin, &length);
  T sum;

  for (unsigned i = 0; i < length; i++)
    sum = sum + *list[i].second;

  free ((void*) (list));

  return sum;
}




template <class T>
inline void
mem_alloc_description<T>::dump (mem_alloc_origin origin)
{
  unsigned length;

  fprintf (
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");

  mem_list_t *list = get_list (origin, &length);
  T total = get_sum (origin);

  T::print_dash_line ();
  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  for (int i = length - 1; i >= 0; i--)
    list[i].second->dump (list[i].first, total);
  T::print_dash_line ();

  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  total.dump_footer ();
  T::print_dash_line ();

  free ((void*) (list));

  fprintf (
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");
}
# 595 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h" 1
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h"
const size_t default_hash_map_size = 13;
template<typename KeyId, typename Value,
  typename Traits
                                        >
class hash_map
{
  typedef typename Traits::key_type Key;
  struct hash_entry
  {
    Key m_key;
    Value m_value;

    typedef hash_entry value_type;
    typedef Key compare_type;

    static hashval_t hash (const hash_entry &e)
      {
        return Traits::hash (e.m_key);
      }

    static bool equal (const hash_entry &a, const Key &b)
        {
   return Traits::equal_keys (a.m_key, b);
        }

    static void remove (hash_entry &e) { Traits::remove (e); }

    static void mark_deleted (hash_entry &e) { Traits::mark_deleted (e); }

    static bool is_deleted (const hash_entry &e)
      {
        return Traits::is_deleted (e);
      }

    static const bool empty_zero_p = Traits::empty_zero_p;
    static void mark_empty (hash_entry &e) { Traits::mark_empty (e); }
    static bool is_empty (const hash_entry &e) { return Traits::is_empty (e); }

    static void ggc_mx (hash_entry &e)
      {
 gt_ggc_mx (e.m_key);
 gt_ggc_mx (e.m_value);
      }

    static void ggc_maybe_mx (hash_entry &e)
      {
 if (Traits::maybe_mx)
   ggc_mx (e);
      }

    static void pch_nx (hash_entry &e)
      {
 gt_pch_nx (e.m_key);
 gt_pch_nx (e.m_value);
      }

    static void pch_nx (hash_entry &e, gt_pointer_operator op, void *c)
      {
 pch_nx_helper (e.m_key, op, c);
 pch_nx_helper (e.m_value, op, c);
      }

    static int keep_cache_entry (hash_entry &e)
      {
 return ggc_marked_p (e.m_key);
      }

  private:
    template<typename T>
    static void
      pch_nx_helper (T &x, gt_pointer_operator op, void *cookie)
 {
   gt_pch_nx (&x, op, cookie);
 }

    static void
      pch_nx_helper (int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (unsigned int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (bool, gt_pointer_operator, void *)
 {
 }

    template<typename T>
      static void
      pch_nx_helper (T *&x, gt_pointer_operator op, void *cookie)
 {
   op (&x, cookie);
 }
  };

public:
  explicit hash_map (size_t n = default_hash_map_size, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (n, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN )
  {
  }

  explicit hash_map (const hash_map &h, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (h.m_table, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN ) {}


  static hash_map *create_ggc (size_t size = default_hash_map_size,
          bool gather_mem_stats = 0
          )
    {
      hash_map *map = ggc_alloc<hash_map> ();
      new (map) hash_map (size, true, true, gather_mem_stats );
      return map;
    }





  bool put (const Key &k, const Value &v)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = hash_entry::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *) &e->m_value) Value (v);
 }
      else
 e->m_value = v;

      return !ins;
    }




  Value *get (const Key &k)
    {
      hash_entry &e = m_table.find_with_hash (k, Traits::hash (k));
      return Traits::is_empty (e) ? nullptr : &e.m_value;
    }





  Value &get_or_insert (const Key &k, bool *existed = nullptr)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = Traits::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *)&e->m_value) Value ();
 }

      if (existed != nullptr)
 *existed = !ins;

      return e->m_value;
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       const Value &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f ((*iter).m_key, (*iter).m_value, a);
    }

  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       Value *, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 if (!f ((*iter).m_key, &(*iter).m_value, a))
   break;
    }

  size_t elements () const { return m_table.elements (); }

  void empty () { m_table.empty(); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<hash_entry>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
    {
      ++m_iter;
      return *this;
    }




    class reference_pair {
    public:
      const Key &first;
      Value &second;

      reference_pair (const Key &key, Value &value) : first (key), second (value) {}

      template <typename K, typename V>
      operator std::pair<K, V> () const { return std::pair<K, V> (first, second); }
    };

    reference_pair operator* ()
    {
      hash_entry &e = *m_iter;
      return reference_pair (e.m_key, e.m_value);
    }

    bool
    operator != (const iterator &other) const
    {
      return m_iter != other.m_iter;
    }

  private:
    typename hash_table<hash_entry>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }

private:

  template<typename T, typename U, typename V> friend void gt_ggc_mx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void gt_cleare_cache (hash_map<T, U, V> *);

  hash_table<hash_entry> m_table;
};



template<typename K, typename V, typename H>
static inline void
gt_ggc_mx (hash_map<K, V, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_cleare_cache (hash_map<K, V, H> *h)
{
  if (h)
    gt_cleare_cache (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}

enum hm_alloc { hm_heap = false, hm_ggc = true };
template<bool ggc, typename K, typename V, typename H>
inline hash_map<K,V,H> *
hash_map_maybe_create (hash_map<K,V,H> *&h,
         size_t size = default_hash_map_size)
{
  if (!h)
    {
      if (ggc)
 h = hash_map<K,V,H>::create_ggc (size);
      else
 h = new hash_map<K,V,H> (size);
    }
  return h;
}


template<typename K, typename V, typename H>
inline V*
hash_map_safe_get (hash_map<K,V,H> *h, const K& k)
{
  return h ? h->get (k) : nullptr;
}


template<bool ggc, typename K, typename V, typename H>
inline V&
hash_map_safe_get_or_insert (hash_map<K,V,H> *&h, const K& k, bool *e = nullptr,
        size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->get_or_insert (k, e);
}


template<bool ggc, typename K, typename V, typename H>
inline bool
hash_map_safe_put (hash_map<K,V,H> *&h, const K& k, const V& v,
     size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->put (k, v);
}
# 596 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

extern mem_alloc_description<mem_usage>& hash_table_usage (void);


extern void dump_hash_table_loc_statistics (void);

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (size_t size, bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (0), m_n_deleted (0), m_searches (0), m_collisions (0),
  m_ggc (ggc), m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  unsigned int size_prime_index;

  size_prime_index = hash_table_higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
          , 0,0,0);

  if (Lazy)
    m_entries = nullptr;
  else
    m_entries = alloc_entries (size );
  m_size = size;
  m_size_prime_index = size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (const hash_table &h,
           bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (h.m_n_elements), m_n_deleted (h.m_n_deleted),
  m_searches (0), m_collisions (0), m_ggc (ggc),
  m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  size_t size = h.m_size;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
       , 0,0,0);

  if (Lazy && h.m_entries == nullptr)
    m_entries = nullptr;
  else
    {
      value_type *nentries = alloc_entries (size );
      for (size_t i = 0; i < size; ++i)
 {
   value_type &entry = h.m_entries[i];
   if (is_deleted (entry))
     mark_deleted (nentries[i]);
   else if (!is_empty (entry))
     new ((void*) (nentries + i)) value_type (entry);
 }
      m_entries = nentries;
    }
  m_size = size;
  m_size_prime_index = h.m_size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::~hash_table ()
{
  if (!Lazy || m_entries)
    {
      for (size_t i = m_size - 1; i < m_size; i--)
 if (!is_empty (m_entries[i]) && !is_deleted (m_entries[i]))
   Descriptor::remove (m_entries[i]);

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);
      if (m_gather_mem_stats)
 hash_table_usage ().release_instance_overhead (this,
             sizeof (value_type)
             * m_size, true);
    }
  else if (m_gather_mem_stats)
    hash_table_usage ().unregister_descriptor (this);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::alloc_entries (size_t n ) const
{
  value_type *nentries;

  if (m_gather_mem_stats)
    hash_table_usage ().register_instance_overhead (sizeof (value_type) * n, this);

  if (!m_ggc)
    nentries = Allocator <value_type> ::data_alloc (n);
  else
    nentries = ::ggc_cleared_vec_alloc<value_type> (n );

  ((void)(!(nentries != nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 715, __FUNCTION__), 0 : 0));
  if (!Descriptor::empty_zero_p)
    for (size_t i = 0; i < n; i++)
      mark_empty (nentries[i]);

  return nentries;
}
# 730 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::find_empty_slot_for_expand (hashval_t hash)
{
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  size_t size = m_size;
  value_type *slot = m_entries + index;
  hashval_t hash2;

  if (is_empty (*slot))
    return slot;
  ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 743, __FUNCTION__), 0 : 0));

  hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      index += hash2;
      if (index >= size)
        index -= size;

      slot = m_entries + index;
      if (is_empty (*slot))
        return slot;
      ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 755, __FUNCTION__), 0 : 0));
    }
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline bool
hash_table<Descriptor, Lazy, Allocator>::too_empty_p (unsigned int elts)
{
  return elts * 8 < m_size && m_size > 32;
}
# 776 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::expand ()
{
  value_type *oentries = m_entries;
  unsigned int oindex = m_size_prime_index;
  size_t osize = size ();
  value_type *olimit = oentries + osize;
  size_t elts = elements ();



  unsigned int nindex;
  size_t nsize;
  if (elts * 2 > osize || too_empty_p (elts))
    {
      nindex = hash_table_higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
  else
    {
      nindex = oindex;
      nsize = osize;
    }

  value_type *nentries = alloc_entries (nsize);

  if (m_gather_mem_stats)
    hash_table_usage ().release_instance_overhead (this, sizeof (value_type)
          * osize);

  m_entries = nentries;
  m_size = nsize;
  m_size_prime_index = nindex;
  m_n_elements -= m_n_deleted;
  m_n_deleted = 0;

  value_type *p = oentries;
  do
    {
      value_type &x = *p;

      if (!is_empty (x) && !is_deleted (x))
        {
          value_type *q = find_empty_slot_for_expand (Descriptor::hash (x));
   new ((void*) q) value_type (x);
        }

      p++;
    }
  while (p < olimit);

  if (!m_ggc)
    Allocator <value_type> ::data_free (oentries);
  else
    ggc_free (oentries);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::empty_slow ()
{
  size_t size = m_size;
  size_t nsize = size;
  value_type *entries = m_entries;

  for (size_t i = size - 1; i < size; i--)
    if (!is_empty (entries[i]) && !is_deleted (entries[i]))
      Descriptor::remove (entries[i]);


  if (size > 1024*1024 / sizeof (value_type))
    nsize = 1024 / sizeof (value_type);
  else if (too_empty_p (m_n_elements))
    nsize = m_n_elements * 2;

  if (nsize != size)
    {
      unsigned int nindex = hash_table_higher_prime_index (nsize);

      nsize = prime_tab[nindex].prime;

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);

      m_entries = alloc_entries (nsize);
      m_size = nsize;
      m_size_prime_index = nindex;
    }
  else if (Descriptor::empty_zero_p)
    memset ((void *) entries, 0, size * sizeof (value_type));
  else
    for (size_t i = 0; i < size; i++)
      mark_empty (entries[i]);

  m_n_deleted = 0;
  m_n_elements = 0;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::clear_slot (value_type *slot)
{
  ((void)(!(!(slot < m_entries || slot >= m_entries + size () || is_empty (*slot) || is_deleted (*slot))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 890, __FUNCTION__), 0 : 0))
                                                      ;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type &
hash_table<Descriptor, Lazy, Allocator>
::find_with_hash (const compare_type &comparable, hashval_t hash)
{
  m_searches++;
  size_t size = m_size;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);

  if (Lazy && m_entries == nullptr)
    m_entries = alloc_entries (size);






  value_type *entry = &m_entries[index];
  if (is_empty (*entry)
      || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
    return *entry;

  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
        index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry)
          || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
 return *entry;
    }
}
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy, Allocator>
::find_slot_with_hash (const compare_type &comparable, hashval_t hash,
         enum insert_option insert)
{
  if (Lazy && m_entries == nullptr)
    {
      if (insert == INSERT)
 m_entries = alloc_entries (m_size);
      else
 return nullptr;
    }
  if (insert == INSERT && m_size * 3 <= m_n_elements * 4)
    expand ();






  m_searches++;
  value_type *first_deleted_slot = nullptr;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  value_type *entry = &m_entries[index];
  size_t size = m_size;
  if (is_empty (*entry))
    goto empty_entry;
  else if (is_deleted (*entry))
    first_deleted_slot = &m_entries[index];
  else if (Descriptor::equal (*entry, comparable))
    return &m_entries[index];

  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
 index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry))
 goto empty_entry;
      else if (is_deleted (*entry))
 {
   if (!first_deleted_slot)
     first_deleted_slot = &m_entries[index];
 }
      else if (Descriptor::equal (*entry, comparable))
 return &m_entries[index];
    }

 empty_entry:
  if (insert == NO_INSERT)
    return nullptr;

  if (first_deleted_slot)
    {
      m_n_deleted--;
      mark_empty (*first_deleted_slot);
      return first_deleted_slot;
    }

  m_n_elements++;
  return &m_entries[index];
}




template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::verify (const compare_type &comparable, hashval_t hash)
{
  for (size_t i = 0; i < ((hash_table_sanitize_eq_limit) < (m_size) ? (hash_table_sanitize_eq_limit) : (m_size)); i++)
    {
      value_type *entry = &m_entries[i];
      if (!is_empty (*entry) && !is_deleted (*entry)
   && hash != Descriptor::hash (*entry)
   && Descriptor::equal (*entry, comparable))
 hashtab_chk_error ();
    }
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::remove_elt_with_hash (const compare_type &comparable, hashval_t hash)
{
  value_type *slot = find_slot_with_hash (comparable, hash, NO_INSERT);
  if (slot == nullptr)
    return;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
   template<typename Type> class Allocator>
template<typename Argument,
  int (*Callback)
  (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
  Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse_noresize (Argument argument)
{
  if (Lazy && m_entries == nullptr)
    return;

  value_type *slot = m_entries;
  value_type *limit = slot + size ();

  do
    {
      value_type &x = *slot;

      if (!is_empty (x) && !is_deleted (x))
        if (! Callback (slot, argument))
          break;
    }
  while (++slot < limit);
}




template <typename Descriptor, bool Lazy,
   template <typename Type> class Allocator>
template <typename Argument,
   int (*Callback)
   (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
   Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse (Argument argument)
{
  if (too_empty_p (elements ()) && (!Lazy || m_entries))
    expand ();

  traverse_noresize <Argument, Callback> (argument);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::iterator::slide ()
{
  for ( ; m_slot < m_limit; ++m_slot )
    {
      value_type &x = *m_slot;
      if (!is_empty (x) && !is_deleted (x))
        return;
    }
  m_slot = nullptr;
  m_limit = nullptr;
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::iterator &
hash_table<Descriptor, Lazy, Allocator>::iterator::operator ++ ()
{
  ++m_slot;
  slide ();
  return *this;
}
# 1146 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename E>
static inline void
gt_ggc_mx (hash_table<E> *h)
{
  typedef hash_table<E> table;

  if (!((h->m_entries) != nullptr && ((void *) (h->m_entries)) != (void *) 1 && ! ggc_set_mark (h->m_entries)))
    return;

  for (size_t i = 0; i < h->m_size; i++)
    {
      if (table::is_empty (h->m_entries[i])
   || table::is_deleted (h->m_entries[i]))
 continue;



      E::ggc_maybe_mx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
hashtab_entry_note_pointers (void *obj, void *h, gt_pointer_operator op,
        void *cookie)
{
  hash_table<D> *map = static_cast<hash_table<D> *> (h);
  ((void)(!(map->m_entries == obj) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1173, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < map->m_size; i++)
    {
      typedef hash_table<D> table;
      if (table::is_empty (map->m_entries[i])
   || table::is_deleted (map->m_entries[i]))
 continue;

      D::pch_nx (map->m_entries[i], op, cookie);
    }
}

template<typename D>
static void
gt_pch_nx (hash_table<D> *h)
{
  bool success
    = gt_pch_note_object (h->m_entries, h, hashtab_entry_note_pointers<D>);
  ((void)(!(success) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1191, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < h->m_size; i++)
    {
      if (hash_table<D>::is_empty (h->m_entries[i])
   || hash_table<D>::is_deleted (h->m_entries[i]))
 continue;

      D::pch_nx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
gt_pch_nx (hash_table<D> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_entries, cookie);
}

template<typename H>
inline void
gt_cleare_cache (hash_table<H> *h)
{
  typedef hash_table<H> table;
  if (!h)
    return;

  for (typename table::iterator iter = h->begin (); iter != h->end (); ++iter)
    if (!table::is_empty (*iter) && !table::is_deleted (*iter))
      {
 int res = H::keep_cache_entry (*iter);
 if (res == 0)
   h->clear_slot (&*iter);
 else if (res != -1)
   H::ggc_mx (*iter);
      }
}
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename KeyId, bool Lazy = false,
  typename Traits = default_hash_traits<KeyId> >
class hash_set
{
public:
  typedef typename Traits::value_type Key;
  explicit hash_set (size_t n = 13, bool ggc = false )
    : m_table (n, ggc, true, 0, HASH_SET_ORIGIN ) {}



  static hash_set *
  create_ggc (size_t n)
    {
      hash_set *set = ggc_alloc<hash_set> ();
      new (set) hash_set (n, true);
      return set;
    }




  bool add (const Key &k)
    {
      Key *e = m_table.find_slot_with_hash (k, Traits::hash (k), INSERT);
      bool existed = !Traits::is_empty (*e);
      if (!existed)
 new (e) Key (k);

      return existed;
    }



  bool contains (const Key &k)
    {
      if (Lazy)
 return (m_table.find_slot_with_hash (k, Traits::hash (k), NO_INSERT)
  != nullptr);
      Key &e = m_table.find_with_hash (k, Traits::hash (k));
      return !Traits::is_empty (e);
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::value_type &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<Traits, Lazy>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f (*iter, a);
    }



  size_t elements () const { return m_table.elements (); }



  void empty () { m_table.empty (); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<Traits,
       Lazy>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
      {
 ++m_iter;
 return *this;
      }

    Key
    operator* ()
      {
 return *m_iter;
      }

    bool
    operator != (const iterator &other) const
      {
 return m_iter != other.m_iter;
      }

  private:
    typename hash_table<Traits, Lazy>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }


private:

  template<typename T, typename U>
  friend void gt_ggc_mx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);

  hash_table<Traits, Lazy> m_table;
};
# 161 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename T>
void
debug_helper (hash_set<T> &ref)
{
  for (typename hash_set<T>::iterator it = ref.begin ();
       it != ref.end (); ++it)
    {
      debug_slim (*it);
      fputc ('\n', 
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 3 4
                  stderr
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
                        );
    }
}
# 191 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename K, typename H>
static inline void
gt_ggc_mx (hash_set<K, false, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h" 1
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int linenum_type;


typedef long long linenum_arith_t;



inline int compare (linenum_type lhs, linenum_type rhs)
{


  linenum_arith_t diff = (linenum_arith_t)lhs - (linenum_arith_t)rhs;
  if (diff)
    return diff > 0 ? 1 : -1;
  return 0;
}


enum lc_reason
{
  LC_ENTER = 0,
  LC_LEAVE,
  LC_RENAME,
  LC_RENAME_VERBATIM,
  LC_ENTER_MACRO,

  LC_HWM
};
# 291 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int location_t;




const unsigned int LINE_MAP_MAX_COLUMN_NUMBER = (1U << 12);




const location_t LINE_MAP_MAX_LOCATION_WITH_PACKED_RANGES = 0x50000000;




const location_t LINE_MAP_MAX_LOCATION_WITH_COLS = 0x60000000;


const location_t LINE_MAP_MAX_LOCATION = 0x70000000;
# 319 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct source_range
{
  location_t m_start;
  location_t m_finish;






  static source_range from_location (location_t loc)
  {
    source_range result;
    result.m_start = loc;
    result.m_finish = loc;
    return result;
  }


  static source_range from_locations (location_t start,
          location_t finish)
  {
    source_range result;
    result.m_start = start;
    result.m_finish = finish;
    return result;
  }
};


typedef void *(*line_map_realloc) (void *, size_t);



typedef size_t (*line_map_round_alloc_size_func) (size_t);
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map {
  location_t start_location;


};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map_ordinary : public line_map {





  enum lc_reason reason : 8;





  unsigned char sysp;



  unsigned int m_column_and_range_bits : 8;
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  unsigned int m_range_bits : 8;



  const char *to_file;
  linenum_type to_line;




  location_t included_from;


};



const location_t MAX_LOCATION_T = 0x7FFFFFFF;

struct cpp_hashnode;






struct line_map_macro : public line_map {



  unsigned int n_tokens;




  struct cpp_hashnode *
   


    macro;
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  location_t * macro_locations;






  location_t expansion;


};
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
inline bool
IS_ORDINARY_LOC (location_t loc)
{
  return loc < LINE_MAP_MAX_LOCATION;
}

inline bool
IS_ADHOC_LOC (location_t loc)
{
  return loc > MAX_LOCATION_T;
}

inline bool
IS_MACRO_LOC (location_t loc)
{
  return !IS_ORDINARY_LOC (loc) && !IS_ADHOC_LOC (loc);
}



inline bool
MAP_ORDINARY_P (const line_map *map)
{
  return IS_ORDINARY_LOC (map->start_location);
}



bool
linemap_macro_expansion_map_p (const line_map *);





inline line_map_ordinary *
linemap_check_ordinary (line_map *map)
{
  ((void)(0 && (MAP_ORDINARY_P (map))));
  return (line_map_ordinary *)map;
}





inline const line_map_ordinary *
linemap_check_ordinary (const line_map *map)
{
  ((void)(0 && (MAP_ORDINARY_P (map))));
  return (const line_map_ordinary *)map;
}




inline line_map_macro *linemap_check_macro (line_map *map)
{
  ((void)(0 && (!MAP_ORDINARY_P (map))));
  return (line_map_macro *)map;
}




inline const line_map_macro *
linemap_check_macro (const line_map *map)
{
  ((void)(0 && (!MAP_ORDINARY_P (map))));
  return (const line_map_macro *)map;
}



inline location_t
MAP_START_LOCATION (const line_map *map)
{
  return map->start_location;
}



inline linenum_type
ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}






inline unsigned char
ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}



inline const char *
ORDINARY_MAP_FILE_NAME (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}



inline cpp_hashnode *
MACRO_MAP_MACRO (const line_map_macro *macro_map)
{
  return macro_map->macro;
}




inline unsigned int
MACRO_MAP_NUM_MACRO_TOKENS (const line_map_macro *macro_map)
{
  return macro_map->n_tokens;
}




inline location_t *
MACRO_MAP_LOCATIONS (const line_map_macro *macro_map)
{
  return macro_map->macro_locations;
}



inline location_t
MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map_macro *macro_map)
{
  return macro_map->expansion;
}
# 714 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct maps_info_ordinary {



  line_map_ordinary * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};

struct maps_info_macro {


  line_map_macro * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};



struct location_adhoc_data {
  location_t locus;
  source_range src_range;
  void * data;
};

struct htab;
# 765 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct location_adhoc_data_map {
  struct htab * htab;
  location_t curr_loc;
  unsigned int allocated;
  struct location_adhoc_data *data;
};


class line_maps {
public:

  ~line_maps ();

  maps_info_ordinary info_ordinary;

  maps_info_macro info_macro;


  unsigned int depth;


  bool trace_includes;


  location_t highest_location;


  location_t highest_line;



  unsigned int max_column_hint;


  line_map_realloc reallocator;



  line_map_round_alloc_size_func round_alloc_size;

  struct location_adhoc_data_map location_adhoc_data_map;



  location_t builtin_location;


  bool seen_line_directive;


  unsigned int default_range_bits;

  unsigned int num_optimized_ranges;
  unsigned int num_unoptimized_ranges;
};



inline unsigned int
LINEMAPS_ALLOCATED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int &
LINEMAPS_ALLOCATED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int
LINEMAPS_USED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}



inline unsigned int &
LINEMAPS_USED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}




inline unsigned int &
LINEMAPS_CACHE (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.cache;
  else
    return set->info_ordinary.cache;
}


inline line_map *
LINEMAPS_MAP_AT (const line_maps *set, bool map_kind, int index)
{
  if (map_kind)
    return &set->info_macro.maps[index];
  else
    return &set->info_ordinary.maps[index];
}




inline line_map *
LINEMAPS_LAST_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_USED (set, map_kind) - 1);
}




inline line_map *
LINEMAPS_LAST_ALLOCATED_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_ALLOCATED (set, map_kind) - 1);
}



inline line_map_ordinary *
LINEMAPS_ORDINARY_MAPS (const line_maps *set)
{
  return set->info_ordinary.maps;
}


inline line_map_ordinary *
LINEMAPS_ORDINARY_MAP_AT (const line_maps *set, int index)
{
  ((void)(0 && (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, false))))
                                                        ;
  return (line_map_ordinary *)LINEMAPS_MAP_AT (set, false, index);
}



inline unsigned int
LINEMAPS_ORDINARY_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, false);
}


inline unsigned int
LINEMAPS_ORDINARY_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, false);
}



inline unsigned int &
LINEMAPS_ORDINARY_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_MAP (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_ALLOCATED_MAP (set, false);
}



inline line_map_macro *
LINEMAPS_MACRO_MAPS (const line_maps *set)
{
  return set->info_macro.maps;
}


inline line_map_macro *
LINEMAPS_MACRO_MAP_AT (const line_maps *set, int index)
{
  ((void)(0 && (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, true))))
                                                       ;
  return (line_map_macro *)LINEMAPS_MAP_AT (set, true, index);
}



inline unsigned int
LINEMAPS_MACRO_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, true);
}


inline unsigned int
LINEMAPS_MACRO_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, true);
}



inline unsigned int &
LINEMAPS_MACRO_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, true);
}


inline line_map_macro *
LINEMAPS_LAST_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_MAP (set, true);
}



inline location_t
LINEMAPS_MACRO_LOWEST_LOCATION (const line_maps *set)
{
  return LINEMAPS_MACRO_USED (set)
         ? MAP_START_LOCATION (LINEMAPS_LAST_MACRO_MAP (set))
         : MAX_LOCATION_T + 1;
}


inline line_map_macro *
LINEMAPS_LAST_ALLOCATED_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_ALLOCATED_MAP (set, true);
}

extern location_t get_combined_adhoc_loc (line_maps *, location_t,
       source_range, void *);
extern void *get_data_from_adhoc_loc (const line_maps *, location_t);
extern location_t get_location_from_adhoc_loc (const line_maps *,
            location_t);

extern source_range get_range_from_loc (line_maps *set, location_t loc);




bool
pure_location_p (line_maps *set, location_t loc);




extern location_t get_pure_location (line_maps *set, location_t loc);



inline location_t
COMBINE_LOCATION_DATA (class line_maps *set,
         location_t loc,
         source_range src_range,
         void *block)
{
  return get_combined_adhoc_loc (set, loc, src_range, block);
}

extern void rebuild_location_adhoc_htab (class line_maps *);





extern void linemap_init (class line_maps *set,
     location_t builtin_location);



extern void linemap_check_files_exited (class line_maps *);







extern location_t linemap_line_start
(class line_maps *set, linenum_type to_line, unsigned int max_column_hint);
# 1092 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
extern const line_map *linemap_add
  (class line_maps *, enum lc_reason, unsigned int sysp,
   const char *to_file, linenum_type to_line);







extern const line_map *linemap_lookup
  (const line_maps *, location_t);



bool linemap_tracks_macro_expansion_locs_p (class line_maps *);


const char* linemap_map_get_macro_name (const line_map_macro *);
# 1121 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
int linemap_location_in_system_header_p (class line_maps *,
      location_t);



bool linemap_location_from_macro_expansion_p (const line_maps *,
           location_t);



bool linemap_location_from_macro_definition_p (class line_maps *,
            location_t);






extern location_t linemap_macro_map_loc_unwind_toward_spelling
  (line_maps *set, const line_map_macro *macro_map, location_t location);




const location_t RESERVED_LOCATION_COUNT = 2;


inline linenum_type
SOURCE_LINE (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   >> ord_map->m_column_and_range_bits) + ord_map->to_line;
}


inline linenum_type
SOURCE_COLUMN (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   & ((1 << ord_map->m_column_and_range_bits) - 1)) >> ord_map->m_range_bits;
}


inline location_t
linemap_included_from (const line_map_ordinary *ord_map)
{
  return ord_map->included_from;
}


const line_map_ordinary *linemap_included_from_linemap
  (line_maps *set, const line_map_ordinary *map);



inline bool
MAIN_FILE_P (const line_map_ordinary *ord_map)
{
  return ord_map->included_from == 0;
}





extern location_t
linemap_position_for_column (class line_maps *, unsigned int);



location_t
linemap_position_for_line_and_column (line_maps *set,
          const line_map_ordinary *,
          linenum_type, unsigned int);




location_t
linemap_position_for_loc_and_offset (class line_maps *set,
         location_t loc,
         unsigned int offset);


inline const char *
LINEMAP_FILE (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}


inline linenum_type
LINEMAP_LINE (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}





inline unsigned char
LINEMAP_SYSP (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}





int linemap_compare_locations (class line_maps *set,
          location_t pre,
          location_t post);




inline bool
linemap_location_before_p (class line_maps *set,
      location_t loc_a,
      location_t loc_b)
{
  return linemap_compare_locations (set, loc_a, loc_b) >= 0;
}

typedef struct
{

  const char *file;


  int line;

  int column;

  void *data;


  bool sysp;
} expanded_location;

class range_label;
# 1279 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
enum range_display_kind
{

  SHOW_RANGE_WITH_CARET,



  SHOW_RANGE_WITHOUT_CARET,





  SHOW_LINES_WITHOUT_RANGE
};





struct location_range
{
  location_t m_loc;

  enum range_display_kind m_range_display_kind;


  const range_label *m_label;
};
# 1320 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
template <typename T, int NUM_EMBEDDED>
class semi_embedded_vec
{
 public:
  semi_embedded_vec ();
  ~semi_embedded_vec ();

  unsigned int count () const { return m_num; }
  T& operator[] (int idx);
  const T& operator[] (int idx) const;

  void push (const T&);
  void truncate (int len);

 private:
  int m_num;
  T m_embedded[NUM_EMBEDDED];
  int m_alloc;
  T *m_extra;
};




template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::semi_embedded_vec ()
: m_num (0), m_alloc (0), m_extra (nullptr)
{
}



template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::~semi_embedded_vec ()
{
  free ((void*) (m_extra));
}



template <typename T, int NUM_EMBEDDED>
T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx)
{
  ((void)(0 && (idx < m_num)));
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      ((void)(0 && (m_extra != nullptr)));
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
const T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx) const
{
  ((void)(0 && (idx < m_num)));
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      ((void)(0 && (m_extra != nullptr)));
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::push (const T& value)
{
  int idx = m_num++;
  if (idx < NUM_EMBEDDED)
    m_embedded[idx] = value;
  else
    {

      idx -= NUM_EMBEDDED;
      if (nullptr == m_extra)
 {
   ((void)(0 && (m_alloc == 0)));
   m_alloc = 16;
   m_extra = ((T *) xmalloc (sizeof (T) * (m_alloc)));
 }
      else if (idx >= m_alloc)
 {
   ((void)(0 && (m_alloc > 0)));
   m_alloc *= 2;
   m_extra = ((T *) xrealloc ((void *) (m_extra), sizeof (T) * (m_alloc)));
 }
      ((void)(0 && (m_extra)));
      ((void)(0 && (idx < m_alloc)));
      m_extra[idx] = value;
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::truncate (int len)
{
  ((void)(0 && (len <= m_num)));
  m_num = len;
}

class fixit_hint;
class diagnostic_path;
# 1609 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class rich_location
{
 public:



  rich_location (line_maps *set, location_t loc,
   const range_label *label = nullptr);


  ~rich_location ();


  location_t get_loc () const { return get_loc (0); }
  location_t get_loc (unsigned int idx) const;

  void
  add_range (location_t loc,
      enum range_display_kind range_display_kind
        = SHOW_RANGE_WITHOUT_CARET,
      const range_label *label = nullptr);

  void
  set_range (unsigned int idx, location_t loc,
      enum range_display_kind range_display_kind);

  unsigned int get_num_locations () const { return m_ranges.count (); }

  const location_range *get_range (unsigned int idx) const;
  location_range *get_range (unsigned int idx);

  expanded_location get_expanded_location (unsigned int idx);

  void
  override_column (int column);







  void
  add_fixit_insert_before (const char *new_content);


  void
  add_fixit_insert_before (location_t where,
      const char *new_content);



  void
  add_fixit_insert_after (const char *new_content);


  void
  add_fixit_insert_after (location_t where,
     const char *new_content);




  void
  add_fixit_remove ();



  void
  add_fixit_remove (location_t where);


  void
  add_fixit_remove (source_range src_range);




  void
  add_fixit_replace (const char *new_content);



  void
  add_fixit_replace (location_t where,
       const char *new_content);



  void
  add_fixit_replace (source_range src_range,
       const char *new_content);

  unsigned int get_num_fixit_hints () const { return m_fixit_hints.count (); }
  fixit_hint *get_fixit_hint (int idx) const { return m_fixit_hints[idx]; }
  fixit_hint *get_last_fixit_hint () const;
  bool seen_impossible_fixit_p () const { return m_seen_impossible_fixit; }
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  void fixits_cannot_be_auto_applied ()
  {
    m_fixits_cannot_be_auto_applied = true;
  }

  bool fixits_can_be_auto_applied_p () const
  {
    return !m_fixits_cannot_be_auto_applied;
  }


  const diagnostic_path *get_path () const { return m_path; }
  void set_path (const diagnostic_path *path) { m_path = path; }

private:
  bool reject_impossible_fixit (location_t where);
  void stop_supporting_fixits ();
  void maybe_add_fixit (location_t start,
   location_t next_loc,
   const char *new_content);

public:
  static const int STATICALLY_ALLOCATED_RANGES = 3;

protected:
  line_maps *m_line_table;
  semi_embedded_vec <location_range, STATICALLY_ALLOCATED_RANGES> m_ranges;

  int m_column_override;

  bool m_have_expanded_location;
  expanded_location m_expanded_location;

  static const int MAX_STATIC_FIXIT_HINTS = 2;
  semi_embedded_vec <fixit_hint *, MAX_STATIC_FIXIT_HINTS> m_fixit_hints;

  bool m_seen_impossible_fixit;
  bool m_fixits_cannot_be_auto_applied;

  const diagnostic_path *m_path;
};





class label_text
{
public:
  label_text ()
  : m_buffer (nullptr), m_caller_owned (false)
  {}

  void maybe_free ()
  {
    if (m_caller_owned)
      free (m_buffer);
  }



  static label_text borrow (const char *buffer)
  {
    return label_text (const_cast <char *> (buffer), false);
  }


  static label_text take (char *buffer)
  {
    return label_text (buffer, true);
  }


  char *take_or_copy ()
  {
    if (m_caller_owned)
      return m_buffer;
    else
      return xstrdup (m_buffer);
  }

  char *m_buffer;
  bool m_caller_owned;

private:
  label_text (char *buffer, bool owned)
  : m_buffer (buffer), m_caller_owned (owned)
  {}
};
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class range_label
{
 public:
  virtual ~range_label () {}




  virtual label_text get_text (unsigned range_idx) const = 0;
};
# 1848 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class fixit_hint
{
 public:
  fixit_hint (location_t start,
       location_t next_loc,
       const char *new_content);
  ~fixit_hint () { free (m_bytes); }

  bool affects_line_p (const char *file, int line) const;
  location_t get_start_loc () const { return m_start; }
  location_t get_next_loc () const { return m_next_loc; }
  bool maybe_append (location_t start,
       location_t next_loc,
       const char *new_content);

  const char *get_string () const { return m_bytes; }
  size_t get_length () const { return m_len; }

  bool insertion_p () const { return m_start == m_next_loc; }

  bool ends_with_newline_p () const;

 private:




  location_t m_start;
  location_t m_next_loc;
  char *m_bytes;
  size_t m_len;
};





enum location_resolution_kind
{
  LRK_MACRO_EXPANSION_POINT,
  LRK_SPELLING_LOCATION,
  LRK_MACRO_DEFINITION_LOCATION
};
# 1940 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_resolve_location (class line_maps *,
         location_t loc,
         enum location_resolution_kind lrk,
         const line_map_ordinary **loc_map);
# 1952 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_toward_expansion (class line_maps *,
         location_t loc,
         const line_map **loc_map);
# 1970 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_to_first_non_reserved_loc (class line_maps *,
           location_t loc,
           const line_map **map);





expanded_location linemap_expand_location (class line_maps *,
        const line_map *,
        location_t loc);



struct linemap_stats
{
  long num_ordinary_maps_allocated;
  long num_ordinary_maps_used;
  long ordinary_maps_allocated_size;
  long ordinary_maps_used_size;
  long num_expanded_macros;
  long num_macro_tokens;
  long num_macro_maps_used;
  long macro_maps_allocated_size;
  long macro_maps_used_size;
  long macro_maps_locations_size;
  long duplicated_macro_maps_locations_size;
  long adhoc_table_size;
  long adhoc_table_entries_used;
};





bool linemap_get_file_highest_location (class line_maps * set,
     const char *file_name,
     location_t *loc);



void linemap_get_statistics (line_maps *, struct linemap_stats *);



void linemap_dump_location (line_maps *, location_t, FILE *);




void linemap_dump (FILE *, line_maps *, unsigned, bool);




void line_table_dump (FILE *, line_maps *, unsigned int, unsigned int);



enum location_aspect
{
  LOCATION_ASPECT_CARET,
  LOCATION_ASPECT_START,
  LOCATION_ASPECT_FINISH
};







extern expanded_location
linemap_client_expand_location_to_spelling_point (location_t,
        enum location_aspect);
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h" 2

extern class line_maps *line_table;
extern class line_maps *saved_line_table;
# 37 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
static_assert ((((location_t) 1) < RESERVED_LOCATION_COUNT), "BUILTINS_LOCATION < RESERVED_LOCATION_COUNT");

extern bool is_location_from_builtin_token (location_t);
extern expanded_location expand_location (location_t);

extern int location_compute_display_column (expanded_location exploc,
         int tabstop);




class char_span
{
 public:
  char_span (const char *ptr, size_t n_elts) : m_ptr (ptr), m_n_elts (n_elts) {}


  operator bool() const { return m_ptr; }



  size_t length () const { return m_n_elts; }

  const char *get_buffer () const { return m_ptr; }

  char operator[] (int idx) const
  {
    ((void)(!(idx >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 64, __FUNCTION__), 0 : 0));
    ((void)(!((size_t)idx < m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 65, __FUNCTION__), 0 : 0));
    return m_ptr[idx];
  }

  char_span subspan (int offset, int n_elts) const
  {
    ((void)(!(offset >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 71, __FUNCTION__), 0 : 0));
    ((void)(!(offset < (int)m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 72, __FUNCTION__), 0 : 0));
    ((void)(!(n_elts >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 73, __FUNCTION__), 0 : 0));
    ((void)(!(offset + n_elts <= (int)m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 74, __FUNCTION__), 0 : 0));
    return char_span (m_ptr + offset, n_elts);
  }

  char *xstrdup () const
  {
    return ::xstrndup (m_ptr, m_n_elts);
  }

 private:
  const char *m_ptr;
  size_t m_n_elts;
};

extern char_span location_get_source_line (const char *file_path, int line);

extern bool location_missing_trailing_newline (const char *file_path);
extern expanded_location
expand_location_to_spelling_point (location_t,
       enum location_aspect aspect
         = LOCATION_ASPECT_CARET);
extern location_t expansion_point_location_if_in_system_header (location_t);
extern location_t expansion_point_location (location_t);

extern location_t input_location;
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
static inline int
in_system_header_at (location_t loc)
{
  return linemap_location_in_system_header_p (line_table, loc);
}




static inline bool
from_macro_expansion_at (location_t loc)
{
  return linemap_location_from_macro_expansion_p (line_table, loc);
}





static inline bool
from_macro_definition_at (location_t loc)
{
  return linemap_location_from_macro_definition_p (line_table, loc);
}

static inline location_t
get_pure_location (location_t loc)
{
  return get_pure_location (line_table, loc);
}



static inline location_t
get_start (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_start;
}



static inline location_t
get_finish (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_finish;
}

extern location_t make_location (location_t caret,
     location_t start, location_t finish);
extern location_t make_location (location_t caret, source_range src_range);

void dump_line_table_statistics (void);

void dump_location_info (FILE *stream);

void diagnostics_file_cache_fini (void);

void diagnostics_file_cache_forcibly_evict_file (const char *file_path);

class string_concat
{
public:
  string_concat (int num, location_t *locs);

  int m_num;
  location_t * m_locs;
};

struct location_hash : int_hash <location_t, ((location_t) 0)> { };

class string_concat_db
{
 public:
  string_concat_db ();
  void record_string_concatenation (int num, location_t *locs);

  bool get_string_concatenation (location_t loc,
     int *out_num,
     location_t **out_locs);

 private:
  static location_t get_key_loc (location_t loc);




  friend void ::gt_ggc_mx_string_concat_db (void *x_p);
  friend void ::gt_pch_nx_string_concat_db (void *x_p);
  friend void ::gt_pch_p_16string_concat_db (void *this_obj, void *x_p,
          gt_pointer_operator op,
          void *cookie);

  hash_map <location_hash, string_concat *> *m_table;
};
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h" 1
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
struct is_a_helper
{
  template <typename U>
  static inline bool test (U *p);
  template <typename U>
  static inline T cast (U *p);
};
# 168 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
template <typename U>
inline T
is_a_helper <T>::cast (U *p)
{
  return reinterpret_cast <T> (p);
}
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T, typename U>
inline bool
is_a (U *p)
{
  return is_a_helper<T>::test (p);
}




template <typename T, typename U>
inline T
as_a (U *p)
{
  ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 197, __FUNCTION__), 0 : 0));
  return is_a_helper <T>::cast (p);
}




template <typename T, typename U>
inline T
safe_as_a (U *p)
{
  if (p)
    {
      ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 210, __FUNCTION__), 0 : 0));
      return is_a_helper <T>::cast (p);
    }
  else
    return nullptr;
}




template <typename T, typename U>
inline T
dyn_cast (U *p)
{
  if (is_a <T> (p))
    return is_a_helper <T>::cast (p);
  else
    return static_cast <T> (0);
}



template <typename T, typename U>
inline T
safe_dyn_cast (U *p)
{
  return p ? dyn_cast <T> (p) : 0;
}
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/array-traits.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/array-traits.h"
template<typename T, T zero = T (0)>
struct scalar_array_traits
{
  typedef T element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = 1;
  static const T *base (const T &x) { return &x; }
  static size_t size (const T &) { return 1; }
};

template<typename T>
struct array_traits : scalar_array_traits<T> {};


template<typename T, size_t N>
struct array_traits<T[N]>
{
  typedef T element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = N;
  static const T *base (const T (&x)[N]) { return x; }
  static size_t size (const T (&)[N]) { return N; }
};
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h" 2
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
typedef unsigned long HARD_REG_ELT_TYPE;
# 56 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
struct HARD_REG_SET
{
  HARD_REG_SET
  operator~ () const
  {
    HARD_REG_SET res;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      res.elts[i] = ~elts[i];
    return res;
  }

  HARD_REG_SET
  operator& (const HARD_REG_SET &other) const
  {
    HARD_REG_SET res;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      res.elts[i] = elts[i] & other.elts[i];
    return res;
  }

  HARD_REG_SET &
  operator&= (const HARD_REG_SET &other)
  {
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      elts[i] &= other.elts[i];
    return *this;
  }

  HARD_REG_SET
  operator| (const HARD_REG_SET &other) const
  {
    HARD_REG_SET res;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      res.elts[i] = elts[i] | other.elts[i];
    return res;
  }

  HARD_REG_SET &
  operator|= (const HARD_REG_SET &other)
  {
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      elts[i] |= other.elts[i];
    return *this;
  }

  bool
  operator== (const HARD_REG_SET &other) const
  {
    HARD_REG_ELT_TYPE bad = 0;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      bad |= (elts[i] ^ other.elts[i]);
    return bad == 0;
  }

  bool
  operator!= (const HARD_REG_SET &other) const
  {
    return !operator== (other);
  }

  HARD_REG_ELT_TYPE elts[((76 + (8 * 8) - 1) / (8 * 8))];
};
typedef const HARD_REG_SET &const_hard_reg_set;

template<>
struct array_traits<HARD_REG_SET>
{
  typedef HARD_REG_ELT_TYPE element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = ((76 + (8 * 8) - 1) / (8 * 8));
  static const element_type *base (const HARD_REG_SET &x) { return x.elts; }
  static size_t size (const HARD_REG_SET &) { return ((76 + (8 * 8) - 1) / (8 * 8)); }
};






struct hard_reg_set_container
{
  HARD_REG_SET set;
};
# 196 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
inline void
SET_HARD_REG_BIT (HARD_REG_SET &set, unsigned int bit)
{
  set.elts[bit / ((unsigned) (8 * 8))]
    |= ((HARD_REG_ELT_TYPE) (1)) << (bit % ((unsigned) (8 * 8)));
}

inline void
CLEAR_HARD_REG_BIT (HARD_REG_SET &set, unsigned int bit)
{
  set.elts[bit / ((unsigned) (8 * 8))]
    &= ~(((HARD_REG_ELT_TYPE) (1)) << (bit % ((unsigned) (8 * 8))));
}

inline bool
TEST_HARD_REG_BIT (const_hard_reg_set set, unsigned int bit)
{
  return (set.elts[bit / ((unsigned) (8 * 8))]
   & (((HARD_REG_ELT_TYPE) (1)) << (bit % ((unsigned) (8 * 8)))));
}

inline void
CLEAR_HARD_REG_SET (HARD_REG_SET &set)
{
  for (unsigned int i = 0; i < (sizeof (set.elts) / sizeof ((set.elts)[0])); ++i)
    set.elts[i] = 0;
}

inline void
SET_HARD_REG_SET (HARD_REG_SET &set)
{
  for (unsigned int i = 0; i < (sizeof (set.elts) / sizeof ((set.elts)[0])); ++i)
    set.elts[i] = -1;
}

static inline bool
hard_reg_set_subset_p (const_hard_reg_set x, const_hard_reg_set y)
{
  HARD_REG_ELT_TYPE bad = 0;
  for (unsigned int i = 0; i < (sizeof (x.elts) / sizeof ((x.elts)[0])); ++i)
    bad |= (x.elts[i] & ~y.elts[i]);
  return bad == 0;
}

static inline bool
hard_reg_set_intersect_p (const_hard_reg_set x, const_hard_reg_set y)
{
  HARD_REG_ELT_TYPE good = 0;
  for (unsigned int i = 0; i < (sizeof (x.elts) / sizeof ((x.elts)[0])); ++i)
    good |= (x.elts[i] & y.elts[i]);
  return good != 0;
}

static inline bool
hard_reg_set_empty_p (const_hard_reg_set x)
{
  HARD_REG_ELT_TYPE bad = 0;
  for (unsigned int i = 0; i < (sizeof (x.elts) / sizeof ((x.elts)[0])); ++i)
    bad |= x.elts[i];
  return bad == 0;
}




struct hard_reg_set_iterator
{

  const HARD_REG_ELT_TYPE *pelt;


  unsigned short length;


  unsigned short word_no;




  HARD_REG_ELT_TYPE bits;
};





static inline void
hard_reg_set_iter_init (hard_reg_set_iterator *iter, const_hard_reg_set set,
                        unsigned min, unsigned *regno)
{

  iter->pelt = set.elts;
  iter->length = ((76 + (8 * 8) - 1) / (8 * 8));




  iter->word_no = min / ((unsigned) (8 * 8));
  if (iter->word_no < iter->length)
    {
      iter->bits = iter->pelt[iter->word_no];
      iter->bits >>= min % ((unsigned) (8 * 8));


      min += !iter->bits;
    }
  *regno = min;
}

static inline bool
hard_reg_set_iter_set (hard_reg_set_iterator *iter, unsigned *regno)
{
  while (1)
    {

      if (iter->word_no >= iter->length)
        return false;

      if (iter->bits)
        {

          while (!(iter->bits & 1))
            {
              iter->bits >>= 1;
              *regno += 1;
            }
          return (*regno < 76);
        }


      *regno = (*regno + ((unsigned) (8 * 8)) - 1);
      *regno -= *regno % ((unsigned) (8 * 8));


      while (++iter->word_no < iter->length)
        {
          iter->bits = iter->pelt[iter->word_no];
          if (iter->bits)
            break;
          *regno += ((unsigned) (8 * 8));
        }
    }
}

static inline void
hard_reg_set_iter_next (hard_reg_set_iterator *iter, unsigned *regno)
{
  iter->bits >>= 1;
  *regno += 1;
}
# 360 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
extern char global_regs[76];

class simplifiable_subreg;
class subreg_shape;

struct simplifiable_subregs_hasher : nofree_ptr_hash <simplifiable_subreg>
{
  typedef const subreg_shape *compare_type;

  static inline hashval_t hash (const simplifiable_subreg *);
  static inline bool equal (const simplifiable_subreg *, const subreg_shape *);
};

struct target_hard_regs {
  void finalize ();


  HARD_REG_SET x_accessible_reg_set;



  HARD_REG_SET x_operand_reg_set;





  char x_fixed_regs[76];


  HARD_REG_SET x_fixed_reg_set;





  char x_call_used_regs[76];
# 406 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
  HARD_REG_SET x_savable_regs;





  HARD_REG_SET x_fixed_nonglobal_reg_set;







  HARD_REG_SET x_regs_invalidated_by_call;


  int x_reg_alloc_order[76];


  int x_inv_reg_alloc_order[76];


  HARD_REG_SET x_reg_class_contents[((int) LIM_REG_CLASSES)];



  bool x_class_only_fixed_regs[((int) LIM_REG_CLASSES)];


  unsigned int x_reg_class_size[((int) LIM_REG_CLASSES)];


  enum reg_class x_reg_class_subclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



  enum reg_class x_reg_class_subunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



  enum reg_class x_reg_class_superunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];


  const char *x_reg_names[76];



  hash_table <simplifiable_subregs_hasher> *x_simplifiable_subregs;
};

extern struct target_hard_regs default_target_hard_regs;

extern struct target_hard_regs *this_target_hard_regs;
# 507 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
extern const char * reg_class_names[];
# 518 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
inline bool
call_used_or_fixed_reg_p (unsigned int regno)
{
  return (this_target_hard_regs->x_fixed_regs)[regno] || this_target_hard_regs->x_call_used_regs[regno];
}
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2

class predefined_function_abi;
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
enum rtx_code {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def" 1
# 81 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
UNKNOWN ,






VALUE ,



DEBUG_EXPR ,






EXPR_LIST ,



INSN_LIST ,


INT_LIST ,
# 126 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
SEQUENCE ,


ADDRESS ,
# 142 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEBUG_INSN ,


INSN ,



JUMP_INSN ,






CALL_INSN ,






JUMP_TABLE_DATA ,


BARRIER ,







CODE_LABEL ,






NOTE ,
# 194 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
COND_EXEC ,


PARALLEL ,







ASM_INPUT ,
# 219 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
ASM_OPERANDS ,
# 237 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
UNSPEC ,


UNSPEC_VOLATILE ,







ADDR_VEC ,
# 272 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
ADDR_DIFF_VEC ,
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
PREFETCH ,
# 295 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
SET ,
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
USE ,
# 313 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
CLOBBER ,





CALL ,



RETURN ,





SIMPLE_RETURN ,



EH_RETURN ,





TRAP_IF ,






CONST_INT ,


CONST_WIDE_INT ,


CONST_POLY_INT ,


CONST_FIXED ,





CONST_DOUBLE ,


CONST_VECTOR ,




CONST_STRING ,





CONST ,



PC ,







REG ,





SCRATCH ,



SUBREG ,
# 410 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
STRICT_LOW_PART ,





CONCAT ,





CONCATN ,




MEM ,



LABEL_REF ,





SYMBOL_REF ,






CC0 ,
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
IF_THEN_ELSE ,


COMPARE ,


PLUS ,


MINUS ,


NEG ,

MULT ,


SS_MULT ,

US_MULT ,


DIV ,

SS_DIV ,

US_DIV ,


MOD ,


UDIV ,
UMOD ,


AND ,
IOR ,
XOR ,
NOT ,




ASHIFT ,
ROTATE ,
ASHIFTRT ,
LSHIFTRT ,
ROTATERT ,
# 513 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
SMIN ,
SMAX ,
UMIN ,
UMAX ,
# 525 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
PRE_DEC ,
PRE_INC ,
POST_DEC ,
POST_INC ,
# 542 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
PRE_MODIFY ,
POST_MODIFY ,







NE ,
EQ ,
GE ,
GT ,
LE ,
LT ,
LTGT ,
GEU ,
GTU ,
LEU ,
LTU ,


UNORDERED ,
ORDERED ,


UNEQ ,
UNGE ,
UNGT ,
UNLE ,
UNLT ,




SIGN_EXTEND ,


ZERO_EXTEND ,


TRUNCATE ,


FLOAT_EXTEND ,
FLOAT_TRUNCATE ,


FLOAT ,







FIX ,


UNSIGNED_FLOAT ,




UNSIGNED_FIX ,
# 616 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
FRACT_CONVERT ,






UNSIGNED_FRACT_CONVERT ,







SAT_FRACT ,





UNSIGNED_SAT_FRACT ,


ABS ,


SQRT ,


BSWAP ,




FFS ,



CLRSB ,


CLZ ,


CTZ ,


POPCOUNT ,


PARITY ,
# 679 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
SIGN_EXTRACT ,



ZERO_EXTRACT ,




HIGH ,



LO_SUM ,






VEC_MERGE ,





VEC_SELECT ,




VEC_CONCAT ,





VEC_DUPLICATE ,




VEC_SERIES ,


SS_PLUS ,


US_PLUS ,


SS_MINUS ,


SS_NEG ,

US_NEG ,


SS_ABS ,


SS_ASHIFT ,


US_ASHIFT ,


US_MINUS ,


SS_TRUNCATE ,


US_TRUNCATE ,


FMA ,


VAR_LOCATION ,



DEBUG_IMPLICIT_PTR ,




ENTRY_VALUE ,



DEBUG_PARAMETER_REF ,


DEBUG_MARKER ,
# 814 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
MATCH_OPERAND ,





MATCH_SCRATCH ,






MATCH_OPERATOR ,







MATCH_PARALLEL ,



MATCH_DUP ,



MATCH_OP_DUP ,



MATCH_PAR_DUP ,
# 857 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
MATCH_CODE ,



MATCH_TEST ,
# 881 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_INSN ,
# 890 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_PEEPHOLE ,
# 901 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_SPLIT ,
# 929 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_INSN_AND_SPLIT ,





DEFINE_INSN_AND_REWRITE ,



DEFINE_PEEPHOLE2 ,
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_EXPAND ,
# 969 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_DELAY ,


DEFINE_ASM_ATTRIBUTES ,
# 986 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_COND_EXEC ,
# 1002 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_PREDICATE ,
DEFINE_SPECIAL_PREDICATE ,
# 1016 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_REGISTER_CONSTRAINT ,
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_CONSTRAINT ,
DEFINE_MEMORY_CONSTRAINT ,
DEFINE_SPECIAL_MEMORY_CONSTRAINT ,
DEFINE_ADDRESS_CONSTRAINT ,
# 1072 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_CPU_UNIT ,




DEFINE_QUERY_CPU_UNIT ,
# 1087 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
EXCLUSION_SET ,
# 1109 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
PRESENCE_SET ,
# 1130 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
FINAL_PRESENCE_SET ,
# 1153 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
ABSENCE_SET ,




FINAL_ABSENCE_SET ,
# 1173 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_BYPASS ,
# 1182 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_AUTOMATON ,
# 1205 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
AUTOMATA_OPTION ,
# 1214 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_RESERVATION ,
# 1262 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_INSN_RESERVATION ,







DEFINE_ATTR ,





DEFINE_ENUM_ATTR ,


ATTR ,







SET_ATTR ,
# 1302 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
SET_ATTR_ALTERNATIVE ,




EQ_ATTR ,



EQ_ATTR_ALT ,







ATTR_FLAG ,






COND ,
# 1346 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_SUBST ,
# 1361 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.def"
DEFINE_SUBST_ATTR ,
# 52 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2


  LAST_AND_UNUSED_RTX_CODE};
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
enum rtx_class {




  RTX_COMPARE,
  RTX_COMM_COMPARE,
  RTX_BIN_ARITH,
  RTX_COMM_ARITH,


  RTX_UNARY,

  RTX_EXTRA,
  RTX_MATCH,
  RTX_INSN,


  RTX_OBJ,
  RTX_CONST_OBJ,

  RTX_TERNARY,
  RTX_BITFIELD_OPS,
  RTX_AUTOINC
};
# 106 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern const unsigned char rtx_length[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_name[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const char * const rtx_format[((int) LAST_AND_UNUSED_RTX_CODE)];


extern const enum rtx_class rtx_class[((int) LAST_AND_UNUSED_RTX_CODE)];






extern const unsigned char rtx_code_size[((int) LAST_AND_UNUSED_RTX_CODE)];
extern const unsigned char rtx_next[((int) LAST_AND_UNUSED_RTX_CODE)];



struct addr_diff_vec_flags
{

  unsigned min_align: 8;

  unsigned base_after_vec: 1;
  unsigned min_after_vec: 1;

  unsigned max_after_vec: 1;

  unsigned min_after_base: 1;

  unsigned max_after_base: 1;


  unsigned offset_unsigned: 1;
  unsigned : 2;
  unsigned scale : 8;
};




class mem_attrs
{
public:
  mem_attrs ();




  tree expr;



  poly_int64 offset;



  poly_int64 size;


  alias_set_type alias;




  unsigned int align;


  unsigned char addrspace;


  bool offset_known_p;


  bool size_known_p;
};
# 193 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
class reg_attrs {
public:
  tree decl;
  poly_int64 offset;
};



union rtunion
{
  int rt_int;
  unsigned int rt_uint;
  poly_uint16_pod rt_subreg;
  const char *rt_str;
  rtx rt_rtx;
  rtvec rt_rtvec;
  machine_mode rt_type;
  addr_diff_vec_flags rt_addr_diff_vec_flags;
  struct cselib_val *rt_cselib;
  tree rt_tree;
  basic_block rt_bb;
  mem_attrs *rt_mem;
  class constant_descriptor_rtx *rt_constant;
  struct dw_cfi_node *rt_cfi;
};


struct reg_info {

  unsigned int regno;


  unsigned int nregs : 8;
  unsigned int unused : 24;


  reg_attrs *attrs;
};




struct block_symbol {

  rtunion fld[2];


  struct object_block *block;



  long offset;
};



struct object_block {

  section *sect;


  unsigned int alignment;


  long size;
# 267 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  vec<rtx, va_gc> *objects;
# 277 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  vec<rtx, va_gc> *anchors;
};

struct hwivec_def {
  long elem[1];
};







struct const_poly_int_def {
  trailing_wide_ints<1> coeffs;
};
# 309 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
struct

                                     rtx_def {

  enum rtx_code code: 16;


  enum machine_mode mode : 8;
# 329 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  unsigned int jump : 1;






  unsigned int call : 1;
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  unsigned int unchanging : 1;
# 362 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  unsigned int volatil : 1;
# 377 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  unsigned int in_struct : 1;
# 386 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  unsigned int used : 1;
# 395 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  unsigned frame_related : 1;






  unsigned return_val : 1;

  union {






    unsigned int original_regno;


    int insn_uid;


    unsigned int symbol_ref_flags;


    enum var_init_status var_location_status;



    unsigned int num_elem;


    struct
    {

      unsigned int npatterns : 16;


      unsigned int nelts_per_pattern : 8;


      unsigned int unused : 8;
    } const_vector;
  } u2;




  union u {
    rtunion fld[1];
    long hwint[1];
    struct reg_info reg;
    struct block_symbol block_sym;
    struct real_value rv;
    struct fixed_value fv;
    struct hwivec_def hwiv;
    struct const_poly_int_def cpi;
  } u;
};



struct rtx_expr_list : public rtx_def
{
private:


public:

  rtx_expr_list *next () const;


  rtx element () const;
};

template <>
template <>
inline bool
is_a_helper <rtx_expr_list *>::test (rtx rt)
{
  return rt->code == EXPR_LIST;
}

struct rtx_insn_list : public rtx_def
{
private:
# 491 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
public:

  rtx_insn_list *next () const;


  rtx_insn *insn () const;

};

template <>
template <>
inline bool
is_a_helper <rtx_insn_list *>::test (rtx rt)
{
  return rt->code == INSN_LIST;
}




struct rtx_sequence : public rtx_def
{
private:


public:

  int len () const;


  rtx element (int index) const;



  rtx_insn *insn (int index) const;
};

template <>
template <>
inline bool
is_a_helper <rtx_sequence *>::test (rtx rt)
{
  return rt->code == SEQUENCE;
}

template <>
template <>
inline bool
is_a_helper <const rtx_sequence *>::test (const_rtx rt)
{
  return rt->code == SEQUENCE;
}

struct rtx_insn : public rtx_def
{
public:
# 565 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  bool deleted () const { return volatil; }



  void set_deleted () { volatil = true; }



  void set_undeleted () { volatil = false; }
};



struct rtx_debug_insn : public rtx_insn
{







};

struct rtx_nonjump_insn : public rtx_insn
{







};

struct rtx_jump_insn : public rtx_insn
{
public:
# 616 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  inline rtx jump_label () const;



  inline rtx_code_label *jump_target () const;



  inline void set_jump_target (rtx_code_label *);
};

struct rtx_call_insn : public rtx_insn
{
# 638 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
};

struct rtx_jump_table_data : public rtx_insn
{
# 662 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  inline rtvec get_labels () const;
  inline scalar_int_mode get_data_mode () const;
};

struct rtx_barrier : public rtx_insn
{







};

struct rtx_code_label : public rtx_insn
{







};

struct rtx_note : public rtx_insn
{







};
# 735 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
struct rtvec_def {
  int num_elem;
  rtx elem[1];
};
# 877 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
template <>
template <>
inline bool
is_a_helper <rtx_insn *>::test (rtx rt)
{
  return ((((((enum rtx_code) (rt)->code) == INSN) || (((enum rtx_code) (rt)->code) == JUMP_INSN) || (((enum rtx_code) (rt)->code) == CALL_INSN)) || (((enum rtx_code) (rt)->code) == DEBUG_INSN))
   || (((enum rtx_code) (rt)->code) == NOTE)
   || (((enum rtx_code) (rt)->code) == JUMP_TABLE_DATA)
   || (((enum rtx_code) (rt)->code) == BARRIER)
   || (((enum rtx_code) (rt)->code) == CODE_LABEL));
}

template <>
template <>
inline bool
is_a_helper <const rtx_insn *>::test (const_rtx rt)
{
  return ((((((enum rtx_code) (rt)->code) == INSN) || (((enum rtx_code) (rt)->code) == JUMP_INSN) || (((enum rtx_code) (rt)->code) == CALL_INSN)) || (((enum rtx_code) (rt)->code) == DEBUG_INSN))
   || (((enum rtx_code) (rt)->code) == NOTE)
   || (((enum rtx_code) (rt)->code) == JUMP_TABLE_DATA)
   || (((enum rtx_code) (rt)->code) == BARRIER)
   || (((enum rtx_code) (rt)->code) == CODE_LABEL));
}

template <>
template <>
inline bool
is_a_helper <rtx_debug_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == DEBUG_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_nonjump_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == JUMP_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_insn *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == JUMP_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_call_insn *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == CALL_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_call_insn *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == CALL_INSN);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_table_data *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == JUMP_TABLE_DATA);
}

template <>
template <>
inline bool
is_a_helper <rtx_jump_table_data *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == JUMP_TABLE_DATA);
}

template <>
template <>
inline bool
is_a_helper <rtx_barrier *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == BARRIER);
}

template <>
template <>
inline bool
is_a_helper <rtx_code_label *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == CODE_LABEL);
}

template <>
template <>
inline bool
is_a_helper <rtx_code_label *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == CODE_LABEL);
}

template <>
template <>
inline bool
is_a_helper <rtx_note *>::test (rtx rt)
{
  return (((enum rtx_code) (rt)->code) == NOTE);
}

template <>
template <>
inline bool
is_a_helper <rtx_note *>::test (rtx_insn *insn)
{
  return (((enum rtx_code) (insn)->code) == NOTE);
}
# 1392 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline rtx_expr_list *rtx_expr_list::next () const
{
  rtx tmp = (((this)->u.fld[1]).rt_rtx);
  return safe_as_a <rtx_expr_list *> (tmp);
}

inline rtx rtx_expr_list::element () const
{
  return (((this)->u.fld[0]).rt_rtx);
}



inline rtx_insn_list *rtx_insn_list::next () const
{
  rtx tmp = (((this)->u.fld[1]).rt_rtx);
  return safe_as_a <rtx_insn_list *> (tmp);
}

inline rtx_insn *rtx_insn_list::insn () const
{
  rtx tmp = (((this)->u.fld[0]).rt_rtx);
  return safe_as_a <rtx_insn *> (tmp);
}



inline int rtx_sequence::len () const
{
  return (((((this)->u.fld[0]).rt_rtvec))->num_elem);
}

inline rtx rtx_sequence::element (int index) const
{
  return (((((this)->u.fld[0]).rt_rtvec))->elem[index]);
}

inline rtx_insn *rtx_sequence::insn (int index) const
{
  return as_a <rtx_insn *> ((((((this)->u.fld[0]).rt_rtvec))->elem[index]));
}





inline int INSN_UID (const_rtx insn)
{
  return ((insn))
               ->u2.insn_uid;
}
inline int& INSN_UID (rtx insn)
{
  return ((insn))
               ->u2.insn_uid;
}
# 1456 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline rtx_insn *PREV_INSN (const rtx_insn *insn)
{
  rtx prev = (((insn)->u.fld[0]).rt_rtx);
  return safe_as_a <rtx_insn *> (prev);
}

inline rtx& SET_PREV_INSN (rtx_insn *insn)
{
  return (((insn)->u.fld[0]).rt_rtx);
}

inline rtx_insn *NEXT_INSN (const rtx_insn *insn)
{
  rtx next = (((insn)->u.fld[1]).rt_rtx);
  return safe_as_a <rtx_insn *> (next);
}

inline rtx& SET_NEXT_INSN (rtx_insn *insn)
{
  return (((insn)->u.fld[1]).rt_rtx);
}

inline basic_block BLOCK_FOR_INSN (const_rtx insn)
{
  return (((insn)->u.fld[2]).rt_bb);
}

inline basic_block& BLOCK_FOR_INSN (rtx insn)
{
  return (((insn)->u.fld[2]).rt_bb);
}

inline void set_block_for_insn (rtx_insn *insn, basic_block bb)
{
  BLOCK_FOR_INSN (insn) = bb;
}


inline rtx PATTERN (const_rtx insn)
{
  return (((insn)->u.fld[3]).rt_rtx);
}

inline rtx& PATTERN (rtx insn)
{
  return (((insn)->u.fld[3]).rt_rtx);
}

inline unsigned int INSN_LOCATION (const rtx_insn *insn)
{
  return (((insn)->u.fld[4]).rt_uint);
}

inline unsigned int& INSN_LOCATION (rtx_insn *insn)
{
  return (((insn)->u.fld[4]).rt_uint);
}

inline bool INSN_HAS_LOCATION (const rtx_insn *insn)
{
  return ((IS_ADHOC_LOC (INSN_LOCATION (insn))) ? get_location_from_adhoc_loc (line_table, INSN_LOCATION (insn)) : (INSN_LOCATION (insn))) != ((location_t) 0);
}
# 1528 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline rtvec rtx_jump_table_data::get_labels () const
{
  rtx pat = PATTERN (this);
  if (((enum rtx_code) (pat)->code) == ADDR_VEC)
    return (((pat)->u.fld[0]).rt_rtvec);
  else
    return (((pat)->u.fld[1]).rt_rtvec);
}




inline scalar_int_mode
rtx_jump_table_data::get_data_mode () const
{
  return as_a <scalar_int_mode> (((machine_mode) (PATTERN (this))->mode));
}




inline rtx_jump_table_data *
jump_table_for_label (const rtx_code_label *label)
{
  return safe_dyn_cast <rtx_jump_table_data *> (NEXT_INSN (label));
}
# 1617 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
enum reg_note
{

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/reg-notes.def" 1
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/reg-notes.def"
REG_DEP_TRUE,




REG_DEAD,


REG_INC,
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/reg-notes.def"
REG_EQUIV,




REG_EQUAL,






REG_NONNEG,


REG_UNUSED,
# 81 "/home/giulianob/gcc_git_gnu/gcc/gcc/reg-notes.def"
REG_CC_SETTER,
REG_CC_USER,




REG_LABEL_TARGET,





REG_LABEL_OPERAND,




REG_DEP_OUTPUT,
REG_DEP_ANTI,
REG_DEP_CONTROL,






REG_BR_PROB,



REG_NOALIAS,





REG_BR_PRED,




REG_FRAME_RELATED_EXPR,
# 132 "/home/giulianob/gcc_git_gnu/gcc/gcc/reg-notes.def"
REG_CFA_DEF_CFA,







REG_CFA_ADJUST_CFA,





REG_CFA_OFFSET,




REG_CFA_REGISTER,





REG_CFA_EXPRESSION,




REG_CFA_VAL_EXPRESSION,





REG_CFA_RESTORE,




REG_CFA_SET_VDRAP,




REG_CFA_WINDOW_SAVE,






REG_CFA_FLUSH_QUEUE,




REG_CFA_TOGGLE_RA_MANGLE,





REG_EH_REGION,


REG_SAVE_NOTE,


REG_NORETURN,



REG_NON_LOCAL_GOTO,



REG_SETJMP,




REG_TM,




REG_ARGS_SIZE,




REG_RETURNED,



REG_STACK_CHECK,




REG_CALL_DECL,






REG_CALL_NOCF_CHECK,


REG_CALL_ARG_LOCATION,
# 1621 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2

  REG_NOTE_MAX
};
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern const char * const reg_note_name[];
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
enum insn_note
{

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/insn-notes.def" 1
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/insn-notes.def"
NOTE_INSN_DELETED,


NOTE_INSN_DELETED_LABEL,



NOTE_INSN_DELETED_DEBUG_LABEL,



NOTE_INSN_BLOCK_BEG,
NOTE_INSN_BLOCK_END,




NOTE_INSN_FUNCTION_BEG,


NOTE_INSN_PROLOGUE_END,


NOTE_INSN_EPILOGUE_BEG,



NOTE_INSN_EH_REGION_BEG,
NOTE_INSN_EH_REGION_END,


NOTE_INSN_VAR_LOCATION,


NOTE_INSN_BEGIN_STMT,



NOTE_INSN_INLINE_ENTRY,






NOTE_INSN_BASIC_BLOCK,



NOTE_INSN_SWITCH_TEXT_SECTIONS,



NOTE_INSN_CFI,



NOTE_INSN_CFI_LABEL,



NOTE_INSN_UPDATE_SJLJ_CONTEXT,
# 1788 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 2


  NOTE_INSN_MAX
};



extern const char * const note_insn_name[NOTE_INSN_MAX];
# 1810 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
enum label_kind
{
  LABEL_NORMAL = 0,
  LABEL_STATIC_ENTRY,
  LABEL_GLOBAL_ENTRY,
  LABEL_WEAK_ENTRY
};
# 1862 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline rtx_insn *JUMP_LABEL_AS_INSN (const rtx_insn *insn)
{
  return safe_as_a <rtx_insn *> ((((insn)->u.fld[7]).rt_rtx));
}



inline rtx rtx_jump_insn::jump_label () const
{
  return (((this)->u.fld[7]).rt_rtx);
}

inline rtx_code_label *rtx_jump_insn::jump_target () const
{
  return safe_as_a <rtx_code_label *> ((((this)->u.fld[7]).rt_rtx));
}

inline void rtx_jump_insn::set_jump_target (rtx_code_label *target)
{
  (((this)->u.fld[7]).rt_rtx) = target;
}







static inline rtx_insn *
label_ref_label (const_rtx ref)
{
  return as_a<rtx_insn *> ((((ref)->u.fld[0]).rt_rtx));
}



static inline void
set_label_ref_label (rtx ref, rtx_insn *label)
{
  (((ref)->u.fld[0]).rt_rtx) = label;
}
# 1921 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
static inline unsigned int
rhs_regno (const_rtx x)
{
  return (&(x)->u.reg)->regno;
}


static inline unsigned int
END_REGNO (const_rtx x)
{
  return (rhs_regno(x)) + ((&(x)->u.reg)->nregs);
}



static inline void
set_regno_raw (rtx x, unsigned int regno, unsigned int nregs)
{
  reg_info *reg = (&(x)->u.reg);
  reg->regno = regno;
  reg->nregs = nregs;
}
# 2026 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline unsigned int
const_vector_encoded_nelts (const_rtx x)
{
  return (((x)) ->u2.const_vector.npatterns) * (((x)) ->u2.const_vector.nelts_per_pattern);
}
# 2053 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
static inline bool
always_void_p (enum rtx_code code)
{
  return code == SET;
}



struct full_rtx_costs
{
  int speed;
  int size;
};


static inline void
init_costs_to_max (struct full_rtx_costs *c)
{
  c->speed = 0x7fffffff;
  c->size = 0x7fffffff;
}


static inline void
init_costs_to_zero (struct full_rtx_costs *c)
{
  c->speed = 0;
  c->size = 0;
}



static inline bool
costs_lt_p (struct full_rtx_costs *a, struct full_rtx_costs *b,
     bool speed)
{
  if (speed)
    return (a->speed < b->speed
     || (a->speed == b->speed && a->size < b->size));
  else
    return (a->size < b->size
     || (a->size == b->size && a->speed < b->speed));
}



static inline void
costs_add_n_insns (struct full_rtx_costs *c, int n)
{
  c->speed += ((n) * 4);
  c->size += ((n) * 4);
}






class subreg_shape {
public:
  subreg_shape (machine_mode, poly_uint16, machine_mode);
  bool operator == (const subreg_shape &) const;
  bool operator != (const subreg_shape &) const;
  unsigned long unique_id () const;

  machine_mode inner_mode;
  poly_uint16 offset;
  machine_mode outer_mode;
};

inline
subreg_shape::subreg_shape (machine_mode inner_mode_in,
       poly_uint16 offset_in,
       machine_mode outer_mode_in)
  : inner_mode (inner_mode_in), offset (offset_in), outer_mode (outer_mode_in)
{}

inline bool
subreg_shape::operator == (const subreg_shape &other) const
{
  return (inner_mode == other.inner_mode
   && (!maybe_ne (offset, other.offset))
   && outer_mode == other.outer_mode);
}

inline bool
subreg_shape::operator != (const subreg_shape &other) const
{
  return !operator == (other);
}






inline unsigned long
subreg_shape::unique_id () const
{
  { static_assert ((MAX_MACHINE_MODE <= 256), "MAX_MACHINE_MODE <= 256"); }
  { static_assert ((1 <= 3), "NUM_POLY_INT_COEFFS <= 3"); }
  { static_assert ((sizeof (offset.coeffs[0]) <= 2), "sizeof (offset.coeffs[0]) <= 2"); }
  int res = (int) inner_mode + ((int) outer_mode << 8);
  for (int i = 0; i < 1; ++i)
    res += (long) offset.coeffs[i] << ((1 + i) * 16);
  return res;
}



static inline subreg_shape
shape_of_subreg (const_rtx x)
{
  return subreg_shape (((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode),
         (((x)->u.fld[1]).rt_subreg), ((machine_mode) (x)->mode));
}




struct address_info {


  machine_mode mode;


  addr_space_t as;


  bool autoinc_p;


  rtx *outer;
# 2199 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  rtx *inner;
# 2219 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  rtx *segment;
  rtx *base;
  rtx *index;
  rtx *disp;

  rtx *segment_term;
  rtx *base_term;
  rtx *index_term;
  rtx *disp_term;



  rtx *base_term2;



  enum rtx_code addr_outer_code;


  enum rtx_code base_outer_code;
};




typedef std::pair <rtx, machine_mode> rtx_mode_t;

namespace wi
{
  template <>
  struct int_traits <rtx_mode_t>
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = false;


    static const bool is_sign_extended = false;
    static unsigned int get_precision (const rtx_mode_t &);
    static wi::storage_ref decompose (long *, unsigned int,
          const rtx_mode_t &);
  };
}

inline unsigned int
wi::int_traits <rtx_mode_t>::get_precision (const rtx_mode_t &x)
{
  return ((unsigned short) mode_to_precision (as_a <scalar_mode> (x.second)).coeffs[0]);
}

inline wi::storage_ref
wi::int_traits <rtx_mode_t>::decompose (long *,
     unsigned int precision,
     const rtx_mode_t &x)
{
  ((void)(!(precision == get_precision (x)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h", 2273, __FUNCTION__), 0 : 0));
  switch (((enum rtx_code) (x.first)->code))
    {
    case CONST_INT:
      if (precision < 64)


 ((void)(!(((x.first)->u.hwint[0]) == sext_hwi (((x.first)->u.hwint[0]), precision) || (x.second == E_BImode && ((x.first)->u.hwint[0]) == 1)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h", 2280, __FUNCTION__), 0 : 0))

                                                         ;

      return wi::storage_ref (&((x.first)->u.hwint[0]), 1, precision);

    case CONST_WIDE_INT:
      return wi::storage_ref (&((x.first)->u.hwiv.elem[0]),
         ((int)((x.first))->u2.num_elem), precision);






    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h", 2296, __FUNCTION__));
    }
}

namespace wi
{
  hwi_with_prec shwi (long, machine_mode mode);
  wide_int min_value (machine_mode, signop);
  wide_int max_value (machine_mode, signop);
}

inline wi::hwi_with_prec
wi::shwi (long val, machine_mode mode)
{
  return shwi (val, ((unsigned short) mode_to_precision (as_a <scalar_mode> (mode)).coeffs[0]));
}



inline wide_int
wi::min_value (machine_mode mode, signop sgn)
{
  return min_value (((unsigned short) mode_to_precision (as_a <scalar_mode> (mode)).coeffs[0]), sgn);
}



inline wide_int
wi::max_value (machine_mode mode, signop sgn)
{
  return max_value (((unsigned short) mode_to_precision (as_a <scalar_mode> (mode)).coeffs[0]), sgn);
}

namespace wi
{
  typedef poly_int<1,
     generic_wide_int <wide_int_ref_storage <false, false> > >
    rtx_to_poly_wide_ref;
  rtx_to_poly_wide_ref to_poly_wide (const_rtx, machine_mode);
}



inline wi::rtx_to_poly_wide_ref
const_poly_int_value (const_rtx x)
{
  poly_int<1, generic_wide_int <wide_int_ref_storage <wi::int_traits <wide_int>::is_sign_extended, wi::int_traits <wide_int>::host_dependent_precision> > > res;
  for (unsigned int i = 0; i < 1; ++i)
    res.coeffs[i] = (((x))->u.cpi.coeffs)[i];
  return res;
}




inline bool
poly_int_rtx_p (const_rtx x)
{
  return ((((enum rtx_code) (x)->code) == CONST_INT) || (((enum rtx_code) (x)->code) == CONST_WIDE_INT)) || (1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT);
}




inline wi::rtx_to_poly_wide_ref
wi::to_poly_wide (const_rtx x, machine_mode mode)
{
  if ((1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT))
    return const_poly_int_value (x);
  return rtx_mode_t (const_cast<rtx> (x), mode);
}



inline poly_int64
rtx_to_poly_int64 (const_rtx x)
{
  if ((1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT))
    {
      poly_int64 res;
      for (unsigned int i = 0; i < 1; ++i)
 res.coeffs[i] = (((x))->u.cpi.coeffs)[i].to_shwi ();
      return res;
    }
  return ((x)->u.hwint[0]);
}





inline bool
poly_int_rtx_p (const_rtx x, poly_int64_pod *res)
{
  if ((((enum rtx_code) (x)->code) == CONST_INT))
    {
      *res = ((x)->u.hwint[0]);
      return true;
    }
  if ((1 > 1 && ((enum rtx_code) (x)->code) == CONST_POLY_INT))
    {
      for (unsigned int i = 0; i < 1; ++i)
 if (!wi::fits_shwi_p ((((x))->u.cpi.coeffs)[i]))
   return false;
      for (unsigned int i = 0; i < 1; ++i)
 res->coeffs[i] = (((x))->u.cpi.coeffs)[i].to_shwi ();
      return true;
    }
  return false;
}

extern void init_rtlanal (void);
extern int rtx_cost (rtx, machine_mode, enum rtx_code, int, bool);
extern int address_cost (rtx, machine_mode, addr_space_t, bool);
extern void get_full_rtx_cost (rtx, machine_mode, enum rtx_code, int,
          struct full_rtx_costs *);
extern bool native_encode_rtx (machine_mode, rtx, vec<target_unit> &,
          unsigned int, unsigned int);
extern rtx native_decode_rtx (machine_mode, vec<target_unit>,
         unsigned int);
extern rtx native_decode_vector_rtx (machine_mode, vec<target_unit>,
         unsigned int, unsigned int, unsigned int);
extern poly_uint64 subreg_lsb (const_rtx);
extern poly_uint64 subreg_size_lsb (poly_uint64, poly_uint64, poly_uint64);
extern poly_uint64 subreg_size_offset_from_lsb (poly_uint64, poly_uint64,
      poly_uint64);
extern bool read_modify_subreg_p (const_rtx);





inline poly_uint64
subreg_lsb_1 (machine_mode outer_mode, machine_mode inner_mode,
       poly_uint64 subreg_byte)
{
  return subreg_size_lsb (((unsigned short) mode_to_bytes (outer_mode).coeffs[0]),
     ((unsigned short) mode_to_bytes (inner_mode).coeffs[0]), subreg_byte);
}







inline poly_uint64
subreg_offset_from_lsb (machine_mode outer_mode,
   machine_mode inner_mode,
   poly_uint64 lsb_shift)
{
  return subreg_size_offset_from_lsb (((unsigned short) mode_to_bytes (outer_mode).coeffs[0]),
          ((unsigned short) mode_to_bytes (inner_mode).coeffs[0]), lsb_shift);
}

extern unsigned int subreg_regno_offset (unsigned int, machine_mode,
      poly_uint64, machine_mode);
extern bool subreg_offset_representable_p (unsigned int, machine_mode,
        poly_uint64, machine_mode);
extern unsigned int subreg_regno (const_rtx);
extern int simplify_subreg_regno (unsigned int, machine_mode,
      poly_uint64, machine_mode);
extern unsigned int subreg_nregs (const_rtx);
extern unsigned int subreg_nregs_with_regno (unsigned int, const_rtx);
extern unsigned long nonzero_bits (const_rtx, machine_mode);
extern unsigned int num_sign_bit_copies (const_rtx, machine_mode);
extern bool constant_pool_constant_p (rtx);
extern bool truncated_to_mode (machine_mode, const_rtx);
extern int low_bitmask_len (machine_mode, unsigned long);
extern void split_double (rtx, rtx *, rtx *);
extern rtx *strip_address_mutations (rtx *, enum rtx_code * = 0);
extern void decompose_address (struct address_info *, rtx *,
          machine_mode, addr_space_t, enum rtx_code);
extern void decompose_lea_address (struct address_info *, rtx *);
extern void decompose_mem_address (struct address_info *, rtx);
extern void update_address (struct address_info *);
extern long get_index_scale (const struct address_info *);
extern enum rtx_code get_index_code (const struct address_info *);
# 2497 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
const int SRP_POINTER = -1;
const int SRP_SIGNED = 0;
const int SRP_UNSIGNED = 1;
const int SRP_SIGNED_AND_UNSIGNED = 2;
# 2901 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern int generating_concat_p;


extern int currently_expanding_to_rtl;
# 2956 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern long trunc_int_for_mode (long, machine_mode);
extern poly_int64 trunc_int_for_mode (poly_int64, machine_mode);
extern rtx plus_constant (machine_mode, rtx, poly_int64, bool = false);
extern long get_stack_check_protect (void);


extern rtx rtx_alloc (enum rtx_code );
inline rtx
rtx_init (rtx rt, enum rtx_code code)
{
  memset (rt, 0, 
# 2966 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 3 4
                __builtin_offsetof (
# 2966 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
                struct rtx_def
# 2966 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 3 4
                , 
# 2966 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
                u
# 2966 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h" 3 4
                )
# 2966 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
                            );
  ((rt)->code = (code));
  return rt;
}


extern rtx rtx_alloc_stat_v (enum rtx_code , int);






extern rtvec rtvec_alloc (int);
extern rtvec shallow_copy_rtvec (rtvec);
extern bool shared_const_p (const_rtx);
extern rtx copy_rtx (rtx);
extern enum rtx_code classify_insn (rtx);
extern void dump_rtx_statistics (void);


extern rtx copy_rtx_if_shared (rtx);


extern unsigned int rtx_size (const_rtx);
extern rtx shallow_copy_rtx (const_rtx );
extern int rtx_equal_p (const_rtx, const_rtx);
extern bool rtvec_all_equal_p (const_rtvec);



inline bool
const_vec_duplicate_p (const_rtx x)
{
  return (((enum rtx_code) (x)->code) == CONST_VECTOR
   && (((x)) ->u2.const_vector.npatterns) == 1
   && ((((x)) ->u2.const_vector.nelts_per_pattern) == 1));
}




template <typename T>
inline bool
const_vec_duplicate_p (T x, T *elt)
{
  if (const_vec_duplicate_p (x))
    {
      *elt = (((((x)->u.fld[0]).rt_rtvec))->elem[0]);
      return true;
    }
  return false;
}




template <typename T>
inline bool
vec_duplicate_p (T x, T *elt)
{
  if (((enum rtx_code) (x)->code) == VEC_DUPLICATE
      && !(((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_BOOL || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_INT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_FLOAT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_FRACT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_UFRACT || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_ACCUM || ((enum mode_class) mode_class[((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode)]) == MODE_VECTOR_UACCUM))
    {
      *elt = (((x)->u.fld[0]).rt_rtx);
      return true;
    }
  return const_vec_duplicate_p (x, elt);
}




template <typename T>
inline T
unwrap_const_vec_duplicate (T x)
{
  if (const_vec_duplicate_p (x))
    x = const_vector_elt (x, 0);
  return x;
}


extern wide_int const_vector_int_elt (const_rtx, unsigned int);
extern rtx const_vector_elt (const_rtx, unsigned int);
extern bool const_vec_series_p_1 (const_rtx, rtx *, rtx *);
# 3060 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline bool
const_vec_series_p (const_rtx x, rtx *base_out, rtx *step_out)
{
  if (((enum rtx_code) (x)->code) == CONST_VECTOR
      && (((x)) ->u2.const_vector.npatterns) == 1
      && !((((x)) ->u2.const_vector.nelts_per_pattern) == 1))
    return const_vec_series_p_1 (x, base_out, step_out);
  return false;
}
# 3078 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline bool
vec_series_p (const_rtx x, rtx *base_out, rtx *step_out)
{
  if (((enum rtx_code) (x)->code) == VEC_SERIES)
    {
      *base_out = (((x)->u.fld[0]).rt_rtx);
      *step_out = (((x)->u.fld[1]).rt_rtx);
      return true;
    }
  return const_vec_series_p (x, base_out, step_out);
}



inline scalar_int_mode
subreg_unpromoted_mode (rtx x)
{
  ((void)(!((((x))->in_struct)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h", 3095, __FUNCTION__), 0 : 0));
  return as_a <scalar_int_mode> (((machine_mode) (x)->mode));
}



inline scalar_int_mode
subreg_promoted_mode (rtx x)
{
  ((void)(!((((x))->in_struct)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h", 3104, __FUNCTION__), 0 : 0));
  return as_a <scalar_int_mode> (((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}


extern rtvec gen_rtvec_v (int, rtx *);
extern rtvec gen_rtvec_v (int, rtx_insn **);
extern rtx gen_reg_rtx (machine_mode);
extern rtx gen_rtx_REG_offset (rtx, machine_mode, unsigned int, poly_int64);
extern rtx gen_reg_rtx_offset (rtx, machine_mode, int);
extern rtx gen_reg_rtx_and_attrs (rtx);
extern rtx_code_label *gen_label_rtx (void);
extern rtx gen_lowpart_common (machine_mode, rtx);


extern rtx gen_lowpart_if_possible (machine_mode, rtx);


extern rtx gen_highpart (machine_mode, rtx);
extern rtx gen_highpart_mode (machine_mode, machine_mode, rtx);
extern rtx operand_subword (rtx, poly_uint64, int, machine_mode);


extern rtx operand_subword_force (rtx, poly_uint64, machine_mode);
extern int subreg_lowpart_p (const_rtx);
extern poly_uint64 subreg_size_lowpart_offset (poly_uint64, poly_uint64);







inline bool
partial_subreg_p (machine_mode outermode, machine_mode innermode)
{


  poly_int64 outer_prec = ((unsigned short) mode_to_precision (outermode).coeffs[0]);
  poly_int64 inner_prec = ((unsigned short) mode_to_precision (innermode).coeffs[0]);
  ((void)(!(ordered_p (outer_prec, inner_prec)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h", 3144, __FUNCTION__), 0 : 0));
  return maybe_lt (outer_prec, inner_prec);
}





inline bool
partial_subreg_p (const_rtx x)
{
  if (((enum rtx_code) (x)->code) != SUBREG)
    return false;
  return partial_subreg_p (((machine_mode) (x)->mode), ((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}




inline bool
paradoxical_subreg_p (machine_mode outermode, machine_mode innermode)
{


  poly_int64 outer_prec = ((unsigned short) mode_to_precision (outermode).coeffs[0]);
  poly_int64 inner_prec = ((unsigned short) mode_to_precision (innermode).coeffs[0]);
  ((void)(!(ordered_p (outer_prec, inner_prec)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h", 3170, __FUNCTION__), 0 : 0));
  return maybe_lt (inner_prec, outer_prec);
}



inline bool
paradoxical_subreg_p (const_rtx x)
{
  if (((enum rtx_code) (x)->code) != SUBREG)
    return false;
  return paradoxical_subreg_p (((machine_mode) (x)->mode), ((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}



inline poly_uint64
subreg_lowpart_offset (machine_mode outermode, machine_mode innermode)
{
  return subreg_size_lowpart_offset (((unsigned short) mode_to_bytes (outermode).coeffs[0]),
         ((unsigned short) mode_to_bytes (innermode).coeffs[0]));
}





inline machine_mode
narrower_subreg_mode (machine_mode outermode, machine_mode innermode)
{
  return paradoxical_subreg_p (outermode, innermode) ? innermode : outermode;
}





inline machine_mode
wider_subreg_mode (machine_mode outermode, machine_mode innermode)
{
  return partial_subreg_p (outermode, innermode) ? innermode : outermode;
}



inline machine_mode
wider_subreg_mode (const_rtx x)
{
  return wider_subreg_mode (((machine_mode) (x)->mode), ((machine_mode) ((((x)->u.fld[0]).rt_rtx))->mode));
}

extern poly_uint64 subreg_size_highpart_offset (poly_uint64, poly_uint64);



inline poly_uint64
subreg_highpart_offset (machine_mode outermode, machine_mode innermode)
{
  return subreg_size_highpart_offset (((unsigned short) mode_to_bytes (outermode).coeffs[0]),
          ((unsigned short) mode_to_bytes (innermode).coeffs[0]));
}

extern poly_int64 byte_lowpart_offset (machine_mode, machine_mode);
extern poly_int64 subreg_memory_offset (machine_mode, machine_mode,
     poly_uint64);
extern poly_int64 subreg_memory_offset (const_rtx);
extern rtx make_safe_from (rtx, rtx);
extern rtx convert_memory_address_addr_space_1 (scalar_int_mode, rtx,
      addr_space_t, bool, bool);
extern rtx convert_memory_address_addr_space (scalar_int_mode, rtx,
           addr_space_t);


extern const char *get_insn_name (int);
extern rtx_insn *get_last_insn_anywhere (void);
extern rtx_insn *get_first_nonnote_insn (void);
extern rtx_insn *get_last_nonnote_insn (void);
extern void start_sequence (void);
extern void push_to_sequence (rtx_insn *);
extern void push_to_sequence2 (rtx_insn *, rtx_insn *);
extern void end_sequence (void);



extern void cwi_output_hex (FILE *, const_rtx);




extern rtx immed_wide_int_const (const poly_wide_int_ref &, machine_mode);


extern rtx force_const_mem (machine_mode, rtx);



struct function;
extern rtx get_pool_constant (const_rtx);
extern rtx get_pool_constant_mark (rtx, bool *);
extern fixed_size_mode get_pool_mode (const_rtx);
extern rtx simplify_subtraction (rtx);
extern void decide_function_section (tree);


extern rtx_insn *emit_insn_before (rtx, rtx_insn *);
extern rtx_insn *emit_insn_before_noloc (rtx, rtx_insn *, basic_block);
extern rtx_insn *emit_insn_before_setloc (rtx, rtx_insn *, location_t);
extern rtx_jump_insn *emit_jump_insn_before (rtx, rtx_insn *);
extern rtx_jump_insn *emit_jump_insn_before_noloc (rtx, rtx_insn *);
extern rtx_jump_insn *emit_jump_insn_before_setloc (rtx, rtx_insn *,
          location_t);
extern rtx_insn *emit_call_insn_before (rtx, rtx_insn *);
extern rtx_insn *emit_call_insn_before_noloc (rtx, rtx_insn *);
extern rtx_insn *emit_call_insn_before_setloc (rtx, rtx_insn *, location_t);
extern rtx_insn *emit_debug_insn_before (rtx, rtx_insn *);
extern rtx_insn *emit_debug_insn_before_noloc (rtx, rtx_insn *);
extern rtx_insn *emit_debug_insn_before_setloc (rtx, rtx_insn *, location_t);
extern rtx_barrier *emit_barrier_before (rtx_insn *);
extern rtx_code_label *emit_label_before (rtx_code_label *, rtx_insn *);
extern rtx_note *emit_note_before (enum insn_note, rtx_insn *);
extern rtx_insn *emit_insn_after (rtx, rtx_insn *);
extern rtx_insn *emit_insn_after_noloc (rtx, rtx_insn *, basic_block);
extern rtx_insn *emit_insn_after_setloc (rtx, rtx_insn *, location_t);
extern rtx_jump_insn *emit_jump_insn_after (rtx, rtx_insn *);
extern rtx_jump_insn *emit_jump_insn_after_noloc (rtx, rtx_insn *);
extern rtx_jump_insn *emit_jump_insn_after_setloc (rtx, rtx_insn *, location_t);
extern rtx_insn *emit_call_insn_after (rtx, rtx_insn *);
extern rtx_insn *emit_call_insn_after_noloc (rtx, rtx_insn *);
extern rtx_insn *emit_call_insn_after_setloc (rtx, rtx_insn *, location_t);
extern rtx_insn *emit_debug_insn_after (rtx, rtx_insn *);
extern rtx_insn *emit_debug_insn_after_noloc (rtx, rtx_insn *);
extern rtx_insn *emit_debug_insn_after_setloc (rtx, rtx_insn *, location_t);
extern rtx_barrier *emit_barrier_after (rtx_insn *);
extern rtx_insn *emit_label_after (rtx_insn *, rtx_insn *);
extern rtx_note *emit_note_after (enum insn_note, rtx_insn *);
extern rtx_insn *emit_insn (rtx);
extern rtx_insn *emit_debug_insn (rtx);
extern rtx_insn *emit_jump_insn (rtx);
extern rtx_insn *emit_call_insn (rtx);
extern rtx_code_label *emit_label (rtx);
extern rtx_jump_table_data *emit_jump_table_data (rtx);
extern rtx_barrier *emit_barrier (void);
extern rtx_note *emit_note (enum insn_note);
extern rtx_note *emit_note_copy (rtx_note *);
extern rtx_insn *gen_clobber (rtx);
extern rtx_insn *emit_clobber (rtx);
extern rtx_insn *gen_use (rtx);
extern rtx_insn *emit_use (rtx);
extern rtx_insn *make_insn_raw (rtx);
extern void add_function_usage_to (rtx, rtx);
extern rtx_call_insn *last_call_insn (void);
extern rtx_insn *previous_insn (rtx_insn *);
extern rtx_insn *next_insn (rtx_insn *);
extern rtx_insn *prev_nonnote_insn (rtx_insn *);
extern rtx_insn *next_nonnote_insn (rtx_insn *);
extern rtx_insn *prev_nondebug_insn (rtx_insn *);
extern rtx_insn *next_nondebug_insn (rtx_insn *);
extern rtx_insn *prev_nonnote_nondebug_insn (rtx_insn *);
extern rtx_insn *prev_nonnote_nondebug_insn_bb (rtx_insn *);
extern rtx_insn *next_nonnote_nondebug_insn (rtx_insn *);
extern rtx_insn *next_nonnote_nondebug_insn_bb (rtx_insn *);
extern rtx_insn *prev_real_insn (rtx_insn *);
extern rtx_insn *next_real_insn (rtx_insn *);
extern rtx_insn *prev_real_nondebug_insn (rtx_insn *);
extern rtx_insn *next_real_nondebug_insn (rtx);
extern rtx_insn *prev_active_insn (rtx_insn *);
extern rtx_insn *next_active_insn (rtx_insn *);
extern int active_insn_p (const rtx_insn *);
extern rtx_insn *next_cc0_user (rtx_insn *);
extern rtx_insn *prev_cc0_setter (rtx_insn *);


extern int insn_line (const rtx_insn *);
extern const char * insn_file (const rtx_insn *);
extern tree insn_scope (const rtx_insn *);
extern expanded_location insn_location (const rtx_insn *);
extern location_t prologue_location, epilogue_location;


extern enum rtx_code reverse_condition (enum rtx_code);
extern enum rtx_code reverse_condition_maybe_unordered (enum rtx_code);
extern enum rtx_code swap_condition (enum rtx_code);
extern enum rtx_code unsigned_condition (enum rtx_code);
extern enum rtx_code signed_condition (enum rtx_code);
extern void mark_jump_label (rtx, rtx_insn *, int);




inline bool
unsigned_condition_p (enum rtx_code code)
{
  return unsigned_condition (code) == code;
}


extern rtx_insn *delete_related_insns (rtx);


extern rtx *find_constant_term_loc (rtx *);


extern rtx_insn *try_split (rtx, rtx_insn *, int);


extern rtx_insn *split_insns (rtx, rtx_insn *);


extern rtx simplify_const_unary_operation (enum rtx_code, machine_mode,
        rtx, machine_mode);
extern rtx simplify_unary_operation (enum rtx_code, machine_mode, rtx,
         machine_mode);
extern rtx simplify_const_binary_operation (enum rtx_code, machine_mode,
         rtx, rtx);
extern rtx simplify_binary_operation (enum rtx_code, machine_mode, rtx,
          rtx);
extern rtx simplify_ternary_operation (enum rtx_code, machine_mode,
           machine_mode, rtx, rtx, rtx);
extern rtx simplify_const_relational_operation (enum rtx_code,
      machine_mode, rtx, rtx);
extern rtx simplify_relational_operation (enum rtx_code, machine_mode,
       machine_mode, rtx, rtx);
extern rtx simplify_gen_binary (enum rtx_code, machine_mode, rtx, rtx);
extern rtx simplify_gen_unary (enum rtx_code, machine_mode, rtx,
          machine_mode);
extern rtx simplify_gen_ternary (enum rtx_code, machine_mode,
     machine_mode, rtx, rtx, rtx);
extern rtx simplify_gen_relational (enum rtx_code, machine_mode,
        machine_mode, rtx, rtx);
extern rtx simplify_subreg (machine_mode, rtx, machine_mode, poly_uint64);
extern rtx simplify_gen_subreg (machine_mode, rtx, machine_mode, poly_uint64);
extern rtx lowpart_subreg (machine_mode, rtx, machine_mode);
extern rtx simplify_replace_fn_rtx (rtx, const_rtx,
        rtx (*fn) (rtx, const_rtx, void *), void *);
extern rtx simplify_replace_rtx (rtx, const_rtx, rtx);
extern rtx simplify_rtx (const_rtx);
extern rtx avoid_constant_pool_reference (rtx);
extern rtx delegitimize_mem_from_attrs (rtx);
extern bool mode_signbit_p (machine_mode, const_rtx);
extern bool val_signbit_p (machine_mode, unsigned long);
extern bool val_signbit_known_set_p (machine_mode,
         unsigned long);
extern bool val_signbit_known_clear_p (machine_mode,
           unsigned long);


extern machine_mode choose_hard_reg_mode (unsigned int, unsigned int,
       const predefined_function_abi *);
extern const HARD_REG_SET &simplifiable_subregs (const subreg_shape &);


extern rtx set_for_reg_notes (rtx);
extern rtx set_unique_reg_note (rtx, enum reg_note, rtx);
extern rtx set_dst_reg_note (rtx, enum reg_note, rtx, rtx);
extern void set_insn_deleted (rtx_insn *);



extern rtx single_set_2 (const rtx_insn *, const_rtx);
extern bool contains_symbol_ref_p (const_rtx);
extern bool contains_symbolic_reference_p (const_rtx);
extern bool contains_constant_pool_address_p (const_rtx);
extern void add_auto_inc_notes (rtx_insn *, rtx);



inline rtx single_set (const rtx_insn *insn)
{
  if (!(((((enum rtx_code) (insn)->code) == INSN) || (((enum rtx_code) (insn)->code) == JUMP_INSN) || (((enum rtx_code) (insn)->code) == CALL_INSN)) || (((enum rtx_code) (insn)->code) == DEBUG_INSN)))
    return (rtx) 0;

  if (((enum rtx_code) (PATTERN (insn))->code) == SET)
    return PATTERN (insn);


  return single_set_2 (insn, PATTERN (insn));
}

extern scalar_int_mode get_address_mode (rtx mem);
extern int rtx_addr_can_trap_p (const_rtx);
extern bool nonzero_address_p (const_rtx);
extern int rtx_unstable_p (const_rtx);
extern bool rtx_varies_p (const_rtx, bool);
extern bool rtx_addr_varies_p (const_rtx, bool);
extern rtx get_call_rtx_from (const rtx_insn *);
extern tree get_call_fndecl (const rtx_insn *);
extern long get_integer_term (const_rtx);
extern rtx get_related_value (const_rtx);
extern bool offset_within_block_p (const_rtx, long);
extern void split_const (rtx, rtx *, rtx *);
extern rtx strip_offset (rtx, poly_int64_pod *);
extern poly_int64 get_args_size (const_rtx);
extern bool unsigned_reg_p (rtx);
extern int reg_mentioned_p (const_rtx, const_rtx);
extern int count_occurrences (const_rtx, const_rtx, int);
extern int reg_referenced_p (const_rtx, const_rtx);
extern int reg_used_between_p (const_rtx, const rtx_insn *, const rtx_insn *);
extern int reg_set_between_p (const_rtx, const rtx_insn *, const rtx_insn *);
extern int commutative_operand_precedence (rtx);
extern bool swap_commutative_operands_p (rtx, rtx);
extern int modified_between_p (const_rtx, const rtx_insn *, const rtx_insn *);
extern int no_labels_between_p (const rtx_insn *, const rtx_insn *);
extern int modified_in_p (const_rtx, const_rtx);
extern int reg_set_p (const_rtx, const_rtx);
extern int multiple_sets (const_rtx);
extern int set_noop_p (const_rtx);
extern int noop_move_p (const rtx_insn *);
extern bool refers_to_regno_p (unsigned int, unsigned int, const_rtx, rtx *);
extern int reg_overlap_mentioned_p (const_rtx, const_rtx);
extern const_rtx set_of (const_rtx, const_rtx);
extern void record_hard_reg_sets (rtx, const_rtx, void *);
extern void record_hard_reg_uses (rtx *, void *);
extern void find_all_hard_regs (const_rtx, HARD_REG_SET *);
extern void find_all_hard_reg_sets (const rtx_insn *, HARD_REG_SET *, bool);
extern void note_pattern_stores (const_rtx,
     void (*) (rtx, const_rtx, void *), void *);
extern void note_stores (const rtx_insn *,
    void (*) (rtx, const_rtx, void *), void *);
extern void note_uses (rtx *, void (*) (rtx *, void *), void *);
extern int dead_or_set_p (const rtx_insn *, const_rtx);
extern int dead_or_set_regno_p (const rtx_insn *, unsigned int);
extern rtx find_reg_note (const_rtx, enum reg_note, const_rtx);
extern rtx find_regno_note (const_rtx, enum reg_note, unsigned int);
extern rtx find_reg_equal_equiv_note (const_rtx);
extern rtx find_constant_src (const rtx_insn *);
extern int find_reg_fusage (const_rtx, enum rtx_code, const_rtx);
extern int find_regno_fusage (const_rtx, enum rtx_code, unsigned int);
extern rtx alloc_reg_note (enum reg_note, rtx, rtx);
extern void add_reg_note (rtx, enum reg_note, rtx);
extern void add_int_reg_note (rtx_insn *, enum reg_note, int);
extern void add_args_size_note (rtx_insn *, poly_int64);
extern void add_shallow_copy_of_reg_note (rtx_insn *, rtx);
extern rtx duplicate_reg_note (rtx);
extern void remove_note (rtx_insn *, const_rtx);
extern bool remove_reg_equal_equiv_notes (rtx_insn *, bool = false);
extern void remove_reg_equal_equiv_notes_for_regno (unsigned int);
extern int side_effects_p (const_rtx);
extern int volatile_refs_p (const_rtx);
extern int volatile_insn_p (const_rtx);
extern int may_trap_p_1 (const_rtx, unsigned);
extern int may_trap_p (const_rtx);
extern int may_trap_or_fault_p (const_rtx);
extern bool can_throw_internal (const_rtx);
extern bool can_throw_external (const_rtx);
extern bool insn_could_throw_p (const_rtx);
extern bool insn_nothrow_p (const_rtx);
extern bool can_nonlocal_goto (const rtx_insn *);
extern void copy_reg_eh_region_note_forward (rtx, rtx_insn *, rtx);
extern void copy_reg_eh_region_note_backward (rtx, rtx_insn *, rtx);
extern rtx replace_rtx (rtx, rtx, rtx, bool = false);
extern void replace_label (rtx *, rtx, rtx, bool);
extern void replace_label_in_insn (rtx_insn *, rtx_insn *, rtx_insn *, bool);
extern bool rtx_referenced_p (const_rtx, const_rtx);
extern bool tablejump_p (const rtx_insn *, rtx_insn **, rtx_jump_table_data **);
extern rtx tablejump_casesi_pattern (const rtx_insn *insn);
extern int computed_jump_p (const rtx_insn *);
extern bool tls_referenced_p (const_rtx);
extern bool contains_mem_rtx_p (rtx x);


inline bool
refers_to_regno_p (unsigned int regnum, const_rtx x, rtx* loc = nullptr)
{
  return refers_to_regno_p (regnum, regnum + 1, x, loc);
}







typedef int (*for_each_inc_dec_fn) (rtx mem, rtx op, rtx dest, rtx src,
        rtx srcoff, void *arg);
extern int for_each_inc_dec (rtx, for_each_inc_dec_fn, void *arg);

typedef int (*rtx_equal_p_callback_function) (const_rtx *, const_rtx *,
                                              rtx *, rtx *);
extern int rtx_equal_p_cb (const_rtx, const_rtx,
                           rtx_equal_p_callback_function);

typedef int (*hash_rtx_callback_function) (const_rtx, machine_mode, rtx *,
                                           machine_mode *);
extern unsigned hash_rtx_cb (const_rtx, machine_mode, int *, int *,
                             bool, hash_rtx_callback_function);

extern rtx regno_use_in (unsigned int, rtx);
extern int auto_inc_p (const_rtx);
extern bool in_insn_list_p (const rtx_insn_list *, const rtx_insn *);
extern void remove_node_from_expr_list (const_rtx, rtx_expr_list **);
extern void remove_node_from_insn_list (const rtx_insn *, rtx_insn_list **);
extern int loc_mentioned_in_p (rtx *, const_rtx);
extern rtx_insn *find_first_parameter_load (rtx_insn *, rtx_insn *);
extern bool keep_with_call_p (const rtx_insn *);
extern bool label_is_jump_target_p (const_rtx, const rtx_insn *);
extern int pattern_cost (rtx, bool);
extern int insn_cost (rtx_insn *, bool);
extern unsigned seq_cost (const rtx_insn *, bool);



extern rtx canonicalize_condition (rtx_insn *, rtx, int, rtx_insn **, rtx,
       int, int);



extern rtx get_condition (rtx_insn *, rtx_insn **, int, int);


struct subreg_info
{

  int offset;




  int nregs;


  bool representable_p;
};

extern void subreg_get_info (unsigned int, machine_mode,
        poly_uint64, machine_mode,
        struct subreg_info *);



extern void free_EXPR_LIST_list (rtx_expr_list **);
extern void free_INSN_LIST_list (rtx_insn_list **);
extern void free_EXPR_LIST_node (rtx);
extern void free_INSN_LIST_node (rtx);
extern rtx_insn_list *alloc_INSN_LIST (rtx, rtx);
extern rtx_insn_list *copy_INSN_LIST (rtx_insn_list *);
extern rtx_insn_list *concat_INSN_LIST (rtx_insn_list *, rtx_insn_list *);
extern rtx_expr_list *alloc_EXPR_LIST (int, rtx, rtx);
extern void remove_free_INSN_LIST_elem (rtx_insn *, rtx_insn_list **);
extern rtx remove_list_elem (rtx, rtx *);
extern rtx_insn *remove_free_INSN_LIST_node (rtx_insn_list **);
extern rtx remove_free_EXPR_LIST_node (rtx_expr_list **);





extern bool resize_reg_info (void);

extern void free_reg_info (void);
extern void init_subregs_of_mode (void);
extern void finish_subregs_of_mode (void);


extern rtx extract_asm_operands (rtx);
extern int asm_noperands (const_rtx);
extern const char *decode_asm_operands (rtx, rtx *, rtx **, const char **,
     machine_mode *, location_t *);
extern void get_referenced_operands (const char *, bool *, unsigned int);

extern enum reg_class reg_preferred_class (int);
extern enum reg_class reg_alternate_class (int);
extern enum reg_class reg_allocno_class (int);
extern void setup_reg_classes (int, enum reg_class, enum reg_class,
          enum reg_class);

extern void split_all_insns (void);
extern unsigned int split_all_insns_noflow (void);


extern rtx const_int_rtx[64 * 2 + 1];





extern rtx const_true_rtx;

extern rtx const_tiny_rtx[4][(int) MAX_MACHINE_MODE];
# 3660 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern rtx pc_rtx;
extern rtx cc0_rtx;
extern rtx ret_rtx;
extern rtx simple_return_rtx;
extern rtx_insn *invalid_insn_rtx;
# 3687 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
enum global_rtl_index
{
  GR_STACK_POINTER,
  GR_FRAME_POINTER,
# 3700 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  GR_HARD_FRAME_POINTER,





  GR_ARG_POINTER,


  GR_VIRTUAL_INCOMING_ARGS,
  GR_VIRTUAL_STACK_ARGS,
  GR_VIRTUAL_STACK_DYNAMIC,
  GR_VIRTUAL_OUTGOING_ARGS,
  GR_VIRTUAL_CFA,
  GR_VIRTUAL_PREFERRED_STACK_BOUNDARY,

  GR_MAX
};


struct target_rtl {
# 3736 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
  rtx x_global_rtl[GR_MAX];


  rtx x_pic_offset_table_rtx;




  rtx x_return_address_pointer_rtx;





  rtx x_initial_regno_reg_rtx[76];


  rtx x_top_of_stack[MAX_MACHINE_MODE];



  rtx x_static_reg_base_value[76];


  class mem_attrs *x_mode_mem_attrs[(int) MAX_MACHINE_MODE];


  bool target_specific_initialized;
};

extern struct target_rtl default_target_rtl;

extern struct target_rtl *this_target_rtl;
# 3821 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern rtx_expr_list *gen_rtx_EXPR_LIST (machine_mode, rtx, rtx);
extern rtx_insn_list *gen_rtx_INSN_LIST (machine_mode, rtx, rtx);
extern rtx_insn *
gen_rtx_INSN (machine_mode mode, rtx_insn *prev_insn, rtx_insn *next_insn,
       basic_block bb, rtx pattern, int location, int code,
       rtx reg_notes);
extern rtx gen_rtx_CONST_INT (machine_mode, long);
extern rtx gen_rtx_CONST_VECTOR (machine_mode, rtvec);
extern void set_mode_and_regno (rtx, machine_mode, unsigned int);
extern rtx init_raw_REG (rtx, machine_mode, unsigned int);
extern rtx gen_raw_REG (machine_mode, unsigned int);


extern rtx gen_rtx_REG (machine_mode, unsigned int);
extern rtx gen_rtx_SUBREG (machine_mode, rtx, poly_uint64);
extern rtx gen_rtx_MEM (machine_mode, rtx);
extern rtx gen_rtx_VAR_LOCATION (machine_mode, tree, rtx,
     enum var_init_status);
# 3933 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern rtx output_constant_def (tree, int);
extern rtx lookup_constant_def (tree);




extern int reload_completed;


extern int epilogue_completed;




extern int reload_in_progress;


extern int lra_in_progress;
# 3960 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern int regstack_completed;
# 3969 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
extern int cse_not_expected;





extern int rtx_to_tree_code (enum rtx_code);


extern int delete_trivially_dead_insns (rtx_insn *, int);
extern int exp_equiv_p (const_rtx, const_rtx, int, bool);
extern unsigned hash_rtx (const_rtx x, machine_mode, int *, int *, bool);


extern bool check_for_inc_dec (rtx_insn *insn);


extern int comparison_dominates_p (enum rtx_code, enum rtx_code);
extern bool jump_to_label_p (const rtx_insn *);
extern int condjump_p (const rtx_insn *);
extern int any_condjump_p (const rtx_insn *);
extern int any_uncondjump_p (const rtx_insn *);
extern rtx pc_set (const rtx_insn *);
extern rtx condjump_label (const rtx_insn *);
extern int simplejump_p (const rtx_insn *);
extern int returnjump_p (const rtx_insn *);
extern int eh_returnjump_p (rtx_insn *);
extern int onlyjump_p (const rtx_insn *);
extern int only_sets_cc0_p (const_rtx);
extern int sets_cc0_p (const_rtx);
extern int invert_jump_1 (rtx_jump_insn *, rtx);
extern int invert_jump (rtx_jump_insn *, rtx, int);
extern int rtx_renumbered_equal_p (const_rtx, const_rtx);
extern int true_regnum (const_rtx);
extern unsigned int reg_or_subregno (const_rtx);
extern int redirect_jump_1 (rtx_insn *, rtx);
extern void redirect_jump_2 (rtx_jump_insn *, rtx, rtx, int, int);
extern int redirect_jump (rtx_jump_insn *, rtx, int);
extern void rebuild_jump_labels (rtx_insn *);
extern void rebuild_jump_labels_chain (rtx_insn *);
extern rtx reversed_comparison (const_rtx, machine_mode);
extern enum rtx_code reversed_comparison_code (const_rtx, const rtx_insn *);
extern enum rtx_code reversed_comparison_code_parts (enum rtx_code, const_rtx,
           const_rtx, const rtx_insn *);
extern void delete_for_peephole (rtx_insn *, rtx_insn *);
extern int condjump_in_parallel_p (const rtx_insn *);


extern int max_reg_num (void);
extern int max_label_num (void);
extern int get_first_label_num (void);
extern void maybe_set_first_label_num (rtx_code_label *);
extern void delete_insns_since (rtx_insn *);
extern void mark_reg_pointer (rtx, int);
extern void mark_user_reg (rtx);
extern void reset_used_flags (rtx);
extern void set_used_flags (rtx);
extern void reorder_insns (rtx_insn *, rtx_insn *, rtx_insn *);
extern void reorder_insns_nobb (rtx_insn *, rtx_insn *, rtx_insn *);
extern int get_max_insn_count (void);
extern int in_sequence_p (void);
extern void init_emit (void);
extern void init_emit_regs (void);
extern void init_derived_machine_modes (void);
extern void init_emit_once (void);
extern void push_topmost_sequence (void);
extern void pop_topmost_sequence (void);
extern void set_new_first_and_last_insn (rtx_insn *, rtx_insn *);
extern unsigned int unshare_all_rtl (void);
extern void unshare_all_rtl_again (rtx_insn *);
extern void unshare_all_rtl_in_chain (rtx_insn *);
extern void verify_rtl_sharing (void);
extern void add_insn (rtx_insn *);
extern void add_insn_before (rtx_insn *, rtx_insn *, basic_block);
extern void add_insn_after (rtx_insn *, rtx_insn *, basic_block);
extern void remove_insn (rtx_insn *);
extern rtx_insn *emit (rtx, bool = true);
extern void emit_insn_at_entry (rtx);
extern rtx gen_lowpart_SUBREG (machine_mode, rtx);
extern rtx gen_const_mem (machine_mode, rtx);
extern rtx gen_frame_mem (machine_mode, rtx);
extern rtx gen_tmp_stack_mem (machine_mode, rtx);
extern bool validate_subreg (machine_mode, machine_mode,
        const_rtx, poly_uint64);


extern unsigned int extended_count (const_rtx, machine_mode, int);
extern rtx remove_death (unsigned int, rtx_insn *);
extern void dump_combine_stats (FILE *);
extern void dump_combine_total_stats (FILE *);
extern rtx make_compound_operation (rtx, enum rtx_code);


extern void schedule_insns (void);


extern void schedule_ebbs (void);


extern void sel_sched_fix_param (const char *param, const char *val);


extern const char *print_rtx_head;
extern void debug (const rtx_def &ref);
extern void debug (const rtx_def *ptr);
extern void debug_rtx (const_rtx);
extern void debug_rtx_list (const rtx_insn *, int);
extern void debug_rtx_range (const rtx_insn *, const rtx_insn *);
extern const rtx_insn *debug_rtx_find (const rtx_insn *, int);
extern void print_mem_expr (FILE *, const_tree);
extern void print_rtl (FILE *, const_rtx);
extern void print_simple_rtl (FILE *, const_rtx);
extern int print_rtl_single (FILE *, const_rtx);
extern int print_rtl_single_with_indent (FILE *, const_rtx, int);
extern void print_inline_rtx (FILE *, const_rtx, int);


extern void expand_null_return (void);
extern void expand_naked_return (void);
extern void emit_jump (rtx);
# 4098 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
enum memop_ret
{
  RETURN_BEGIN,
  RETURN_END,
  RETURN_END_MINUS_ONE
};


extern rtx move_by_pieces (rtx, rtx, unsigned long,
      unsigned int, memop_ret);
extern poly_int64 find_args_size_adjust (rtx_insn *);
extern poly_int64 fixup_args_size_notes (rtx_insn *, rtx_insn *, poly_int64);


extern void init_expmed (void);
extern void expand_inc (rtx, rtx);
extern void expand_dec (rtx, rtx);


extern void init_lower_subreg (void);


extern bool can_copy_p (machine_mode);
extern bool can_assign_to_reg_without_clobbers_p (rtx, machine_mode);
extern rtx_insn *prepare_copy_insn (rtx, rtx);


extern rtx fis_get_condition (rtx_insn *);


extern HARD_REG_SET eliminable_regset;
extern void mark_elimination (int, int);


extern int reg_classes_intersect_p (reg_class_t, reg_class_t);
extern int reg_class_subset_p (reg_class_t, reg_class_t);
extern void globalize_reg (tree, int);
extern void init_reg_modes_target (void);
extern void init_regs (void);
extern void reinit_regs (void);
extern void init_fake_stack_mems (void);
extern void save_register_info (void);
extern void init_reg_sets (void);
extern void regclass (rtx, int);
extern void reg_scan (rtx_insn *, unsigned int);
extern void fix_register (const char *, int, int);
extern const HARD_REG_SET *valid_mode_changes_for_regno (unsigned int);


extern int function_invariant_p (const_rtx);


enum libcall_type
{
  LCT_NORMAL = 0,
  LCT_CONST = 1,
  LCT_PURE = 2,
  LCT_NORETURN = 3,
  LCT_THROW = 4,
  LCT_RETURNS_TWICE = 5
};

extern rtx emit_library_call_value_1 (int, rtx, rtx, enum libcall_type,
          machine_mode, int, rtx_mode_t *);
# 4172 "/home/giulianob/gcc_git_gnu/gcc/gcc/rtl.h"
inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode)
{
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 0, nullptr);
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode)
{
  rtx_mode_t args[] = { rtx_mode_t (arg1, arg1_mode) };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 1, args);
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode,
     rtx arg2, machine_mode arg2_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode)
  };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 2, args);
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode,
     rtx arg2, machine_mode arg2_mode,
     rtx arg3, machine_mode arg3_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode)
  };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 3, args);
}

inline void
emit_library_call (rtx fun, libcall_type fn_type, machine_mode outmode,
     rtx arg1, machine_mode arg1_mode,
     rtx arg2, machine_mode arg2_mode,
     rtx arg3, machine_mode arg3_mode,
     rtx arg4, machine_mode arg4_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode),
    rtx_mode_t (arg4, arg4_mode)
  };
  emit_library_call_value_1 (0, fun, (rtx) 0, fn_type, outmode, 4, args);
}





inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode)
{
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 0, nullptr);
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode)
{
  rtx_mode_t args[] = { rtx_mode_t (arg1, arg1_mode) };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 1, args);
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode,
    rtx arg2, machine_mode arg2_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode)
  };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 2, args);
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode,
    rtx arg2, machine_mode arg2_mode,
    rtx arg3, machine_mode arg3_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode)
  };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 3, args);
}

inline rtx
emit_library_call_value (rtx fun, rtx value, libcall_type fn_type,
    machine_mode outmode,
    rtx arg1, machine_mode arg1_mode,
    rtx arg2, machine_mode arg2_mode,
    rtx arg3, machine_mode arg3_mode,
    rtx arg4, machine_mode arg4_mode)
{
  rtx_mode_t args[] = {
    rtx_mode_t (arg1, arg1_mode),
    rtx_mode_t (arg2, arg2_mode),
    rtx_mode_t (arg3, arg3_mode),
    rtx_mode_t (arg4, arg4_mode)
  };
  return emit_library_call_value_1 (1, fun, value, fn_type, outmode, 4, args);
}


extern void init_varasm_once (void);

extern rtx make_debug_expr_from_rtl (const_rtx);



extern bool read_rtx (const char *, vec<rtx> *);



extern rtx canon_rtx (rtx);
extern int true_dependence (const_rtx, machine_mode, const_rtx);
extern rtx get_addr (rtx);
extern int canon_true_dependence (const_rtx, machine_mode, rtx,
      const_rtx, rtx);
extern int read_dependence (const_rtx, const_rtx);
extern int anti_dependence (const_rtx, const_rtx);
extern int canon_anti_dependence (const_rtx, bool,
      const_rtx, machine_mode, rtx);
extern int output_dependence (const_rtx, const_rtx);
extern int canon_output_dependence (const_rtx, bool,
        const_rtx, machine_mode, rtx);
extern int may_alias_p (const_rtx, const_rtx);
extern void init_alias_target (void);
extern void init_alias_analysis (void);
extern void end_alias_analysis (void);
extern void vt_equate_reg_base_value (const_rtx, const_rtx);
extern bool memory_modified_in_insn_p (const_rtx, const_rtx);
extern bool may_be_sp_based_p (rtx);
extern rtx gen_hard_reg_clobber (machine_mode, unsigned int);
extern rtx get_reg_known_value (unsigned int);
extern bool get_reg_known_equiv_p (unsigned int);
extern rtx get_reg_base_value (unsigned int);


extern int stack_regs_mentioned (const_rtx insn);



extern rtx stack_limit_rtx;


extern unsigned int variable_tracking_main (void);
extern void delete_vta_debug_insns (bool);


extern void get_mode_bounds (scalar_int_mode, int,
        scalar_int_mode, rtx *, rtx *);


extern rtx canon_condition (rtx);
extern void simplify_using_condition (rtx, rtx *, bitmap);


extern unsigned int compute_alignments (void);
extern void update_alignments (vec<rtx> &);
extern int asm_str_count (const char *templ);

struct rtl_hooks
{
  rtx (*gen_lowpart) (machine_mode, rtx);
  rtx (*gen_lowpart_no_emit) (machine_mode, rtx);
  rtx (*reg_nonzero_bits) (const_rtx, scalar_int_mode, scalar_int_mode,
      unsigned long *);
  rtx (*reg_num_sign_bit_copies) (const_rtx, scalar_int_mode, scalar_int_mode,
      unsigned int *);
  bool (*reg_truncated_to_mode) (machine_mode, const_rtx);


};


extern struct rtl_hooks rtl_hooks;


extern const struct rtl_hooks general_rtl_hooks;




extern void insn_locations_init (void);
extern void insn_locations_finalize (void);
extern void set_curr_insn_location (location_t);
extern location_t curr_insn_location (void);
extern void set_insn_locations (rtx_insn *, location_t);


extern void _fatal_insn_not_found (const_rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void _fatal_insn (const char *, const_rtx, const char *, int, const char *)
     __attribute__ ((__noreturn__)) __attribute__ ((__cold__));







extern tree global_regs_decl[76];




struct cgraph_rtl_info {
  unsigned int preferred_incoming_stack_boundary;



  HARD_REG_SET function_used_regs;
};





inline rtx_code
load_extend_op (machine_mode mode)
{
  scalar_int_mode int_mode;
  if (is_a <scalar_int_mode> (mode, &int_mode)
      && ((unsigned short) mode_to_precision (int_mode).coeffs[0]) < ((8) * (((ix86_isa_flags & (1UL << 1)) != 0) ? 8 : 4)))
    return UNKNOWN;
  return UNKNOWN;
}




inline rtx
strip_offset_and_add (rtx x, poly_int64_pod *offset)
{
  if (((enum rtx_code) (x)->code) == PLUS)
    {
      poly_int64 suboffset;
      x = strip_offset (x, &suboffset);
      *offset = poly_uint64 (*offset) + suboffset;
    }
  return x;
}




inline bool
word_register_operation_p (const_rtx x)
{
  switch (((enum rtx_code) (x)->code))
    {
    case CONST_INT:
    case ROTATE:
    case ROTATERT:
    case SIGN_EXTRACT:
    case ZERO_EXTRACT:
      return false;

    default:
      return true;
    }
}


extern void gt_ggc_mx (rtx &);
extern void gt_pch_nx (rtx &);
extern void gt_pch_nx (rtx &, gt_pointer_operator, void *);
# 28 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/memmodel.h" 1
# 37 "/home/giulianob/gcc_git_gnu/gcc/gcc/memmodel.h"
enum memmodel
{
  MEMMODEL_RELAXED = 0,
  MEMMODEL_CONSUME = 1,
  MEMMODEL_ACQUIRE = 2,
  MEMMODEL_RELEASE = 3,
  MEMMODEL_ACQ_REL = 4,
  MEMMODEL_SEQ_CST = 5,
  MEMMODEL_LAST = 6,
  MEMMODEL_SYNC_ACQUIRE = MEMMODEL_ACQUIRE | (1<<15),
  MEMMODEL_SYNC_RELEASE = MEMMODEL_RELEASE | (1<<15),
  MEMMODEL_SYNC_SEQ_CST = MEMMODEL_SEQ_CST | (1<<15),

  MEMMODEL_MAX = ((int) (~ (int) 0 - ((int) ((! ((int) 0 < (int) -1)) ? (int) 1 << (sizeof (int) * 8 - 1) : (int) 0))))
};


static inline enum memmodel
memmodel_from_int (unsigned long val)
{
  return (enum memmodel) (val & ((1<<16)-1));
}


static inline enum memmodel
memmodel_base (unsigned long val)
{
  return (enum memmodel) (val & ((1<<15)-1));
}


static inline bool
is_mm_relaxed (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_RELAXED;
}


static inline bool
is_mm_consume (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_CONSUME;
}


static inline bool
is_mm_acquire (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_ACQUIRE;
}


static inline bool
is_mm_release (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_RELEASE;
}


static inline bool
is_mm_acq_rel (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_ACQ_REL;
}


static inline bool
is_mm_seq_cst (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_SEQ_CST;
}


static inline bool
is_mm_sync (enum memmodel model)
{
  return (model & (1<<15));
}
# 29 "build/gencondmd.c" 2
# 1 "./tm_p.h" 1



# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-protos.h" 1
# 21 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-protos.h"
extern bool ix86_handle_option (struct gcc_options *opts,
    struct gcc_options *opts_set __attribute__ ((__unused__)),
    const struct cl_decoded_option *decoded,
    location_t loc);


extern bool ix86_target_stack_probe (void);
extern bool ix86_can_use_return_insn_p (void);
extern void ix86_setup_frame_addresses (void);
extern bool ix86_rip_relative_addr_p (struct ix86_address *parts);

extern long ix86_initial_elimination_offset (int, int);
extern void ix86_expand_prologue (void);
extern void ix86_maybe_emit_epilogue_vzeroupper (void);
extern void ix86_expand_epilogue (int);
extern void ix86_expand_split_stack_prologue (void);

extern void ix86_output_addr_vec_elt (FILE *, int);
extern void ix86_output_addr_diff_elt (FILE *, int, int);

extern const char *ix86_output_ssemov (rtx_insn *, rtx *);

extern enum calling_abi ix86_cfun_abi (void);
extern enum calling_abi ix86_function_type_abi (const_tree);

extern bool ix86_use_pseudo_pic_reg (void);

extern void ix86_reset_previous_fndecl (void);

extern bool ix86_using_red_zone (void);

extern unsigned int ix86_regmode_natural_size (machine_mode);

extern int standard_80387_constant_p (rtx);
extern const char *standard_80387_constant_opcode (rtx);
extern rtx standard_80387_constant_rtx (int);
extern int standard_sse_constant_p (rtx, machine_mode);
extern const char *standard_sse_constant_opcode (rtx_insn *, rtx *);
extern bool ix86_standard_x87sse_constant_load_p (const rtx_insn *, rtx);
extern bool ix86_pre_reload_split (void);
extern bool symbolic_reference_mentioned_p (rtx);
extern bool extended_reg_mentioned_p (rtx);
extern bool x86_extended_QIreg_mentioned_p (rtx_insn *);
extern bool x86_extended_reg_mentioned_p (rtx);
extern bool x86_maybe_negate_const_int (rtx *, machine_mode);
extern machine_mode ix86_cc_mode (enum rtx_code, rtx, rtx);

extern int avx_vpermilp_parallel (rtx par, machine_mode mode);
extern int avx_vperm2f128_parallel (rtx par, machine_mode mode);

extern bool ix86_expand_strlen (rtx, rtx, rtx, rtx);
extern bool ix86_expand_set_or_cpymem (rtx, rtx, rtx, rtx, rtx, rtx,
           rtx, rtx, rtx, rtx, bool);

extern bool constant_address_p (rtx);
extern bool legitimate_pic_operand_p (rtx);
extern bool legitimate_pic_address_disp_p (rtx);
extern bool ix86_force_load_from_GOT_p (rtx);
extern void print_reg (rtx, int, FILE*);
extern void ix86_print_operand (FILE *, rtx, int);

extern void split_double_mode (machine_mode, rtx[], int, rtx[], rtx[]);

extern const char *output_set_got (rtx, rtx);
extern const char *output_387_binary_op (rtx_insn *, rtx*);
extern const char *output_387_reg_move (rtx_insn *, rtx*);
extern const char *output_fix_trunc (rtx_insn *, rtx*, bool);
extern const char *output_fp_compare (rtx_insn *, rtx*, bool, bool);
extern const char *output_adjust_stack_and_probe (rtx);
extern const char *output_probe_stack_range (rtx, rtx);

extern void ix86_output_patchable_area (unsigned int, bool);

extern void ix86_expand_clear (rtx);
extern void ix86_expand_move (machine_mode, rtx[]);
extern void ix86_expand_vector_move (machine_mode, rtx[]);
extern void ix86_expand_vector_move_misalign (machine_mode, rtx[]);
extern rtx ix86_fixup_binary_operands (enum rtx_code,
           machine_mode, rtx[]);
extern void ix86_fixup_binary_operands_no_copy (enum rtx_code,
      machine_mode, rtx[]);
extern void ix86_expand_binary_operator (enum rtx_code,
      machine_mode, rtx[]);
extern void ix86_expand_vector_logical_operator (enum rtx_code,
       machine_mode, rtx[]);
extern bool ix86_binary_operator_ok (enum rtx_code, machine_mode, rtx[]);
extern bool ix86_avoid_lea_for_add (rtx_insn *, rtx[]);
extern bool ix86_use_lea_for_mov (rtx_insn *, rtx[]);
extern bool ix86_avoid_lea_for_addr (rtx_insn *, rtx[]);
extern void ix86_split_lea_for_addr (rtx_insn *, rtx[], machine_mode);
extern bool ix86_lea_for_add_ok (rtx_insn *, rtx[]);
extern bool ix86_vec_interleave_v2df_operator_ok (rtx operands[3], bool high);
extern bool ix86_dep_by_shift_count (const_rtx set_insn, const_rtx use_insn);
extern bool ix86_agi_dependent (rtx_insn *set_insn, rtx_insn *use_insn);
extern void ix86_expand_unary_operator (enum rtx_code, machine_mode,
     rtx[]);
extern rtx ix86_build_const_vector (machine_mode, bool, rtx);
extern rtx ix86_build_signbit_mask (machine_mode, bool, bool);
extern void ix86_split_convert_uns_si_sse (rtx[]);
extern void ix86_expand_convert_uns_didf_sse (rtx, rtx);
extern void ix86_expand_convert_uns_sixf_sse (rtx, rtx);
extern void ix86_expand_convert_uns_sidf_sse (rtx, rtx);
extern void ix86_expand_convert_uns_sisf_sse (rtx, rtx);
extern void ix86_expand_convert_sign_didf_sse (rtx, rtx);
extern void ix86_expand_vector_convert_uns_vsivsf (rtx, rtx);
extern rtx ix86_expand_adjust_ufix_to_sfix_si (rtx, rtx *);
extern enum ix86_fpcmp_strategy ix86_fp_comparison_strategy (enum rtx_code);
extern void ix86_expand_fp_absneg_operator (enum rtx_code, machine_mode,
         rtx[]);
extern void ix86_split_fp_absneg_operator (enum rtx_code, machine_mode,
        rtx[]);
extern void ix86_expand_copysign (rtx []);
extern void ix86_split_copysign_const (rtx []);
extern void ix86_split_copysign_var (rtx []);
extern void ix86_expand_xorsign (rtx []);
extern void ix86_split_xorsign (rtx []);
extern bool ix86_unary_operator_ok (enum rtx_code, machine_mode, rtx[]);
extern bool ix86_match_ccmode (rtx, machine_mode);
extern void ix86_expand_branch (enum rtx_code, rtx, rtx, rtx);
extern void ix86_expand_setcc (rtx, enum rtx_code, rtx, rtx);
extern bool ix86_expand_int_movcc (rtx[]);
extern bool ix86_expand_fp_movcc (rtx[]);
extern bool ix86_expand_fp_vcond (rtx[]);
extern bool ix86_expand_int_vcond (rtx[]);
extern void ix86_expand_vec_perm (rtx[]);
extern bool ix86_expand_mask_vec_cmp (rtx, enum rtx_code, rtx, rtx);
extern bool ix86_expand_int_vec_cmp (rtx[]);
extern bool ix86_expand_fp_vec_cmp (rtx[]);
extern void ix86_expand_sse_movcc (rtx, rtx, rtx, rtx);
extern void ix86_expand_sse_unpack (rtx, rtx, bool, bool);
extern bool ix86_expand_int_addcc (rtx[]);
extern rtx_insn *ix86_expand_call (rtx, rtx, rtx, rtx, rtx, bool);
extern void ix86_split_call_vzeroupper (rtx, rtx);
extern void x86_initialize_trampoline (rtx, rtx, rtx);
extern rtx ix86_zero_extend_to_Pmode (rtx);
extern void ix86_split_long_move (rtx[]);
extern void ix86_split_ashl (rtx *, rtx, machine_mode);
extern void ix86_split_ashr (rtx *, rtx, machine_mode);
extern void ix86_split_lshr (rtx *, rtx, machine_mode);
extern rtx ix86_find_base_term (rtx);
extern bool ix86_check_movabs (rtx, int);
extern bool ix86_check_no_addr_space (rtx);
extern void ix86_split_idivmod (machine_mode, rtx[], bool);

extern rtx assign_386_stack_local (machine_mode, enum ix86_stack_slot);
extern int ix86_attr_length_immediate_default (rtx_insn *, bool);
extern int ix86_attr_length_address_default (rtx_insn *);
extern int ix86_attr_length_vex_default (rtx_insn *, bool, bool);

extern rtx ix86_libcall_value (machine_mode);
extern bool ix86_function_arg_regno_p (int);
extern void ix86_asm_output_function_label (FILE *, const char *, tree);
extern void ix86_call_abi_override (const_tree);
extern int ix86_reg_parm_stack_space (const_tree);

extern bool ix86_libc_has_function (enum function_class fn_class);

extern void x86_order_regs_for_local_alloc (void);
extern void x86_function_profiler (FILE *, int);
extern void x86_emit_floatuns (rtx [2]);
extern void ix86_emit_fp_unordered_jump (rtx);

extern void ix86_emit_i387_sinh (rtx, rtx);
extern void ix86_emit_i387_cosh (rtx, rtx);
extern void ix86_emit_i387_tanh (rtx, rtx);
extern void ix86_emit_i387_asinh (rtx, rtx);
extern void ix86_emit_i387_acosh (rtx, rtx);
extern void ix86_emit_i387_atanh (rtx, rtx);
extern void ix86_emit_i387_log1p (rtx, rtx);
extern void ix86_emit_i387_round (rtx, rtx);
extern void ix86_emit_swdivsf (rtx, rtx, rtx, machine_mode);
extern void ix86_emit_swsqrtsf (rtx, rtx, machine_mode, bool);

extern enum rtx_code ix86_reverse_condition (enum rtx_code, machine_mode);

extern void ix86_expand_lround (rtx, rtx);
extern void ix86_expand_lfloorceil (rtx, rtx, bool);
extern void ix86_expand_rint (rtx, rtx);
extern void ix86_expand_floorceil (rtx, rtx, bool);
extern void ix86_expand_floorceildf_32 (rtx, rtx, bool);
extern void ix86_expand_trunc (rtx, rtx);
extern void ix86_expand_truncdf_32 (rtx, rtx);
extern void ix86_expand_round (rtx, rtx);
extern void ix86_expand_rounddf_32 (rtx, rtx);
extern void ix86_expand_round_sse4 (rtx, rtx);

extern bool ix86_expand_vecmul_qihi (rtx, rtx, rtx);
extern void ix86_expand_vecop_qihi (enum rtx_code, rtx, rtx, rtx);
extern bool ix86_expand_vec_shift_qihi_constant (enum rtx_code, rtx, rtx, rtx);

extern rtx ix86_split_stack_guard (void);

extern void ix86_move_vector_high_sse_to_mmx (rtx);
extern void ix86_split_mmx_pack (rtx[], enum rtx_code);
extern void ix86_split_mmx_punpck (rtx[], bool);
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-protos.h"
extern rtx ix86_tls_module_base (void);
extern bool ix86_tls_address_pattern_p (rtx);
extern rtx ix86_rewrite_tls_address (rtx);

extern void ix86_expand_vector_init (bool, rtx, rtx);
extern void ix86_expand_vector_set (bool, rtx, rtx, int);
extern void ix86_expand_vector_extract (bool, rtx, rtx, int);
extern void ix86_expand_reduc (rtx (*)(rtx, rtx, rtx), rtx, rtx);

extern void ix86_expand_vec_extract_even_odd (rtx, rtx, rtx, unsigned);
extern bool ix86_expand_pextr (rtx *);
extern bool ix86_expand_pinsr (rtx *);
extern void ix86_expand_mul_widen_evenodd (rtx, rtx, rtx, bool, bool);
extern void ix86_expand_mul_widen_hilo (rtx, rtx, rtx, bool, bool);
extern void ix86_expand_sse2_mulv4si3 (rtx, rtx, rtx);
extern void ix86_expand_sse2_mulvxdi3 (rtx, rtx, rtx);
extern void ix86_expand_sse2_abs (rtx, rtx);


extern void ix86_target_macros (void);
extern void ix86_register_pragmas (void);


extern void ix86_d_target_versions (void);


extern void i386_pe_unique_section (tree, int);
extern void i386_pe_declare_function_type (FILE *, const char *, int);
extern void i386_pe_record_external_function (tree, const char *);
extern void i386_pe_maybe_record_exported_symbol (tree, const char *, int);
extern void i386_pe_encode_section_info (tree, rtx, int);
extern bool i386_pe_binds_local_p (const_tree);
extern const char *i386_pe_strip_name_encoding_full (const char *);
extern bool i386_pe_valid_dllimport_attribute_p (const_tree);
extern unsigned int i386_pe_section_type_flags (tree, const char *, int);
extern void i386_pe_asm_named_section (const char *, unsigned int, tree);
extern void i386_pe_asm_output_aligned_decl_common (FILE *, tree,
          const char *,
          long,
          long);
extern void i386_pe_file_end (void);
extern void i386_pe_asm_lto_start (void);
extern void i386_pe_asm_lto_end (void);
extern void i386_pe_start_function (FILE *, const char *, tree);
extern void i386_pe_end_function (FILE *, const char *, tree);
extern void i386_pe_end_cold_function (FILE *, const char *, tree);
extern void i386_pe_assemble_visibility (tree, int);
extern tree i386_pe_mangle_decl_assembler_name (tree, tree);
extern tree i386_pe_mangle_assembler_name (const char *);
extern void i386_pe_record_stub (const char *);

extern void i386_pe_seh_init (FILE *);
extern void i386_pe_seh_end_prologue (FILE *);
extern void i386_pe_seh_cold_init (FILE *, const char *);
extern void i386_pe_seh_unwind_emit (FILE *, rtx_insn *);
extern void i386_pe_seh_emit_except_personality (rtx);
extern void i386_pe_seh_init_sections (void);


extern void i386_pe_adjust_class_at_definition (tree);
extern bool i386_pe_type_dllimport_p (tree);
extern bool i386_pe_type_dllexport_p (tree);

extern int i386_pe_reloc_rw_mask (void);

extern char internal_label_prefix[16];
extern int internal_label_prefix_len;

extern bool ix86_epilogue_uses (int);

struct ix86_address
{
  rtx base, index, disp;
  long scale;
  addr_space_t seg;
};

extern int ix86_decompose_address (rtx, struct ix86_address *);
extern int memory_address_length (rtx, bool);
extern void x86_output_aligned_bss (FILE *, tree, const char *,
        unsigned long, int);
extern void x86_elf_aligned_decl_common (FILE *, tree, const char *,
      unsigned long, int);


extern void ix86_fp_comparison_codes (enum rtx_code code, enum rtx_code *,
          enum rtx_code *, enum rtx_code *);
extern enum rtx_code ix86_fp_compare_code_to_integer (enum rtx_code);

extern int asm_preferred_eh_data_format (int, int);





extern const char * ix86_output_call_insn (rtx_insn *insn, rtx call_op);
extern const char * ix86_output_indirect_jmp (rtx call_op);
extern const char * ix86_output_function_return (bool long_p);
extern const char * ix86_output_indirect_function_return (rtx ret_op);
extern void ix86_split_simple_return_pop_internal (rtx);
extern bool ix86_operands_ok_for_move_multiple (rtx *operands, bool load,
      machine_mode mode);
extern int ix86_min_insn_size (rtx_insn *);

extern int ix86_issue_rate (void);
extern int ix86_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn,
        int cost, unsigned int);
extern int ia32_multipass_dfa_lookahead (void);
extern bool ix86_macro_fusion_p (void);
extern bool ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp);

extern bool ix86_bd_has_dispatch (rtx_insn *insn, int action);
extern void ix86_bd_do_dispatch (rtx_insn *insn, int mode);

extern void ix86_core2i7_init_hooks (void);

extern int ix86_atom_sched_reorder (FILE *, int, rtx_insn **, int *, int);

extern poly_int64 ix86_push_rounding (poly_int64);




struct ix86_first_cycle_multipass_data_
{

  int ifetch_block_len;

  int ifetch_block_n_insns;

  sbitmap ready_try_change;

  int ready_try_change_size;
};




const addr_space_t ADDR_SPACE_SEG_FS = 1;
const addr_space_t ADDR_SPACE_SEG_GS = 2;

namespace gcc { class context; }
class rtl_opt_pass;

extern rtl_opt_pass *make_pass_insert_vzeroupper (gcc::context *);
extern rtl_opt_pass *make_pass_stv (gcc::context *);
extern rtl_opt_pass *make_pass_insert_endbr_and_patchable_area
  (gcc::context *);
extern rtl_opt_pass *make_pass_remove_partial_avx_dependency
  (gcc::context *);
# 5 "./tm_p.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/linux-protos.h" 1
# 20 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/linux-protos.h"
extern bool linux_has_ifunc_p (void);

extern bool linux_libc_has_function (enum function_class fn_class);
# 6 "./tm_p.h" 2
# 1 "./tm-preds.h" 1







extern int general_operand (rtx, machine_mode);
extern int address_operand (rtx, machine_mode);
extern int register_operand (rtx, machine_mode);
extern int pmode_register_operand (rtx, machine_mode);
extern int scratch_operand (rtx, machine_mode);
extern int immediate_operand (rtx, machine_mode);
extern int const_int_operand (rtx, machine_mode);
extern int const_scalar_int_operand (rtx, machine_mode);
extern int const_double_operand (rtx, machine_mode);
extern int nonimmediate_operand (rtx, machine_mode);
extern int nonmemory_operand (rtx, machine_mode);
extern int push_operand (rtx, machine_mode);
extern int pop_operand (rtx, machine_mode);
extern int memory_operand (rtx, machine_mode);
extern int indirect_operand (rtx, machine_mode);
extern int ordered_comparison_operator (rtx, machine_mode);
extern int comparison_operator (rtx, machine_mode);
extern int any_fp_register_operand (rtx, machine_mode);
extern int fp_register_operand (rtx, machine_mode);
extern int general_reg_operand (rtx, machine_mode);
extern int nonimmediate_gr_operand (rtx, machine_mode);
extern int general_gr_operand (rtx, machine_mode);
extern int mmx_reg_operand (rtx, machine_mode);
extern int register_mmxmem_operand (rtx, machine_mode);
extern int sse_reg_operand (rtx, machine_mode);
extern int any_QIreg_operand (rtx, machine_mode);
extern int QIreg_operand (rtx, machine_mode);
extern int ext_QIreg_operand (rtx, machine_mode);
extern int ax_reg_operand (rtx, machine_mode);
extern int flags_reg_operand (rtx, machine_mode);
extern int int_nonimmediate_operand (rtx, machine_mode);
extern int register_ssemem_operand (rtx, machine_mode);
extern int nonimm_ssenomem_operand (rtx, machine_mode);
extern int x87nonimm_ssenomem_operand (rtx, machine_mode);
extern int register_sse4nonimm_operand (rtx, machine_mode);
extern int symbol_operand (rtx, machine_mode);
extern int ix86_endbr_immediate_operand (rtx, machine_mode);
extern int x86_64_immediate_operand (rtx, machine_mode);
extern int x86_64_zext_immediate_operand (rtx, machine_mode);
extern int x86_64_hilo_int_operand (rtx, machine_mode);
extern int x86_64_dwzext_immediate_operand (rtx, machine_mode);
extern int x86_64_immediate_size_operand (rtx, machine_mode);
extern int x86_64_general_operand (rtx, machine_mode);
extern int x86_64_hilo_general_operand (rtx, machine_mode);
extern int x86_64_sext_operand (rtx, machine_mode);
extern int sext_operand (rtx, machine_mode);
extern int x86_64_zext_operand (rtx, machine_mode);
extern int x86_64_szext_general_operand (rtx, machine_mode);
extern int x86_64_nonmemory_operand (rtx, machine_mode);
extern int x86_64_szext_nonmemory_operand (rtx, machine_mode);
extern int pic_32bit_operand (rtx, machine_mode);
extern int x86_64_movabs_operand (rtx, machine_mode);
extern int symbolic_operand (rtx, machine_mode);
extern int local_symbolic_operand (rtx, machine_mode);
extern int gotoff_operand (rtx, machine_mode);
extern int tls_symbolic_operand (rtx, machine_mode);
extern int tls_modbase_operand (rtx, machine_mode);
extern int tls_address_pattern (rtx, machine_mode);
extern int constant_call_address_operand (rtx, machine_mode);
extern int call_register_no_elim_operand (rtx, machine_mode);
extern int register_no_elim_operand (rtx, machine_mode);
extern int index_register_operand (rtx, machine_mode);
extern int general_no_elim_operand (rtx, machine_mode);
extern int nonmemory_no_elim_operand (rtx, machine_mode);
extern int indirect_branch_operand (rtx, machine_mode);
extern int sibcall_memory_operand (rtx, machine_mode);
extern int GOT_memory_operand (rtx, machine_mode);
extern int call_insn_operand (rtx, machine_mode);
extern int sibcall_insn_operand (rtx, machine_mode);
extern int GOT32_symbol_operand (rtx, machine_mode);
extern int const0_operand (rtx, machine_mode);
extern int const1_operand (rtx, machine_mode);
extern int constm1_operand (rtx, machine_mode);
extern int const8_operand (rtx, machine_mode);
extern int const128_operand (rtx, machine_mode);
extern int const_32bit_mask (rtx, machine_mode);
extern int const248_operand (rtx, machine_mode);
extern int const123_operand (rtx, machine_mode);
extern int const2367_operand (rtx, machine_mode);
extern int const1248_operand (rtx, machine_mode);
extern int const359_operand (rtx, machine_mode);
extern int const_4_or_8_to_11_operand (rtx, machine_mode);
extern int const48_operand (rtx, machine_mode);
extern int const_0_to_1_operand (rtx, machine_mode);
extern int const_0_to_3_operand (rtx, machine_mode);
extern int const_0_to_4_operand (rtx, machine_mode);
extern int const_0_to_5_operand (rtx, machine_mode);
extern int const_0_to_7_operand (rtx, machine_mode);
extern int const_0_to_15_operand (rtx, machine_mode);
extern int const_0_to_31_operand (rtx, machine_mode);
extern int const_0_to_63_operand (rtx, machine_mode);
extern int const_0_to_255_operand (rtx, machine_mode);
extern int const_0_to_255_mul_8_operand (rtx, machine_mode);
extern int const_1_to_31_operand (rtx, machine_mode);
extern int const_1_to_63_operand (rtx, machine_mode);
extern int const_2_to_3_operand (rtx, machine_mode);
extern int const_4_to_5_operand (rtx, machine_mode);
extern int const_4_to_7_operand (rtx, machine_mode);
extern int const_6_to_7_operand (rtx, machine_mode);
extern int const_8_to_9_operand (rtx, machine_mode);
extern int const_8_to_11_operand (rtx, machine_mode);
extern int const_8_to_15_operand (rtx, machine_mode);
extern int const_10_to_11_operand (rtx, machine_mode);
extern int const_12_to_13_operand (rtx, machine_mode);
extern int const_12_to_15_operand (rtx, machine_mode);
extern int const_14_to_15_operand (rtx, machine_mode);
extern int const_16_to_19_operand (rtx, machine_mode);
extern int const_16_to_31_operand (rtx, machine_mode);
extern int const_20_to_23_operand (rtx, machine_mode);
extern int const_24_to_27_operand (rtx, machine_mode);
extern int const_28_to_31_operand (rtx, machine_mode);
extern int incdec_operand (rtx, machine_mode);
extern int reg_or_pm1_operand (rtx, machine_mode);
extern int shiftdi_operand (rtx, machine_mode);
extern int ashldi_input_operand (rtx, machine_mode);
extern int zero_extended_scalar_load_operand (rtx, machine_mode);
extern int vector_all_ones_operand (rtx, machine_mode);
extern int vector_memory_operand (rtx, machine_mode);
extern int vector_operand (rtx, machine_mode);
extern int nonimmediate_or_const_vector_operand (rtx, machine_mode);
extern int nonimmediate_or_sse_const_operand (rtx, machine_mode);
extern int reg_or_0_operand (rtx, machine_mode);
extern int nonimm_or_0_operand (rtx, machine_mode);
extern int norex_memory_operand (rtx, machine_mode);
extern int SImode_address_operand (rtx, machine_mode);
extern int address_no_seg_operand (rtx, machine_mode);
extern int vsib_address_operand (rtx, machine_mode);
extern int vsib_mem_operator (rtx, machine_mode);
extern int aligned_operand (rtx, machine_mode);
extern int memory_displacement_operand (rtx, machine_mode);
extern int memory_displacement_only_operand (rtx, machine_mode);
extern int long_memory_operand (rtx, machine_mode);
extern int fcmov_comparison_operator (rtx, machine_mode);
extern int sse_comparison_operator (rtx, machine_mode);
extern int ix86_comparison_int_operator (rtx, machine_mode);
extern int ix86_comparison_uns_operator (rtx, machine_mode);
extern int bt_comparison_operator (rtx, machine_mode);
extern int shr_comparison_operator (rtx, machine_mode);
extern int add_comparison_operator (rtx, machine_mode);
extern int ix86_comparison_operator (rtx, machine_mode);
extern int ix86_carry_flag_operator (rtx, machine_mode);
extern int ix86_trivial_fp_comparison_operator (rtx, machine_mode);
extern int ix86_fp_comparison_operator (rtx, machine_mode);
extern int cmp_fp_expander_operand (rtx, machine_mode);
extern int binary_fp_operator (rtx, machine_mode);
extern int mult_operator (rtx, machine_mode);
extern int div_operator (rtx, machine_mode);
extern int plusminuslogic_operator (rtx, machine_mode);
extern int arith_or_logical_operator (rtx, machine_mode);
extern int commutative_operator (rtx, machine_mode);
extern int promotable_binary_operator (rtx, machine_mode);
extern int compare_operator (rtx, machine_mode);
extern int misaligned_operand (rtx, machine_mode);
extern int vzeroall_operation (rtx, machine_mode);
extern int vzeroall_pattern (rtx, machine_mode);
extern int vzeroupper_pattern (rtx, machine_mode);
extern int addsub_vm_operator (rtx, machine_mode);
extern int addsub_vs_operator (rtx, machine_mode);
extern int addsub_vs_parallel (rtx, machine_mode);
extern int avx_vbroadcast_operand (rtx, machine_mode);
extern int palignr_operand (rtx, machine_mode);
extern int avx2_pblendw_operand (rtx, machine_mode);
extern int general_vector_operand (rtx, machine_mode);
extern int register_or_constm1_operand (rtx, machine_mode);
extern int save_multiple (rtx, machine_mode);
extern int restore_multiple (rtx, machine_mode);



enum constraint_num
{
  CONSTRAINT__UNKNOWN = 0,
  CONSTRAINT_r,
  CONSTRAINT_R,
  CONSTRAINT_q,
  CONSTRAINT_Q,
  CONSTRAINT_l,
  CONSTRAINT_a,
  CONSTRAINT_b,
  CONSTRAINT_c,
  CONSTRAINT_d,
  CONSTRAINT_S,
  CONSTRAINT_D,
  CONSTRAINT_A,
  CONSTRAINT_U,
  CONSTRAINT_f,
  CONSTRAINT_t,
  CONSTRAINT_u,
  CONSTRAINT_Yk,
  CONSTRAINT_k,
  CONSTRAINT_y,
  CONSTRAINT_x,
  CONSTRAINT_v,
  CONSTRAINT_Yz,
  CONSTRAINT_Yd,
  CONSTRAINT_Yp,
  CONSTRAINT_Ya,
  CONSTRAINT_Yb,
  CONSTRAINT_Yf,
  CONSTRAINT_Yr,
  CONSTRAINT_Yv,
  CONSTRAINT_Yw,
  CONSTRAINT_I,
  CONSTRAINT_J,
  CONSTRAINT_K,
  CONSTRAINT_L,
  CONSTRAINT_M,
  CONSTRAINT_N,
  CONSTRAINT_O,
  CONSTRAINT_m,
  CONSTRAINT_o,
  CONSTRAINT_Bm,
  CONSTRAINT_Bc,
  CONSTRAINT_Bn,
  CONSTRAINT_p,
  CONSTRAINT_Tv,
  CONSTRAINT_Ts,
  CONSTRAINT_Bz,
  CONSTRAINT_G,
  CONSTRAINT_e,
  CONSTRAINT_We,
  CONSTRAINT_Wz,
  CONSTRAINT_Wd,
  CONSTRAINT_Wf,
  CONSTRAINT_Z,
  CONSTRAINT_Bf,
  CONSTRAINT_V,
  CONSTRAINT__l,
  CONSTRAINT__g,
  CONSTRAINT_i,
  CONSTRAINT_s,
  CONSTRAINT_n,
  CONSTRAINT_E,
  CONSTRAINT_F,
  CONSTRAINT_X,
  CONSTRAINT_Bg,
  CONSTRAINT_Bs,
  CONSTRAINT_Bw,
  CONSTRAINT_BC,
  CONSTRAINT_C,
  CONSTRAINT__LIMIT
};

extern enum constraint_num lookup_constraint_1 (const char *);
extern const unsigned char lookup_constraint_array[];




static inline enum constraint_num
lookup_constraint (const char *p)
{
  unsigned int index = lookup_constraint_array[(unsigned char) *p];
  return (index == 
# 261 "./tm-preds.h" 3 4
                  (0x7f * 2 + 1)
          
# 262 "./tm-preds.h"
         ? lookup_constraint_1 (p)
          : (enum constraint_num) index);
}

extern bool (*constraint_satisfied_p_array[]) (rtx);



static inline bool
constraint_satisfied_p (rtx x, enum constraint_num c)
{
  int i = (int) c - (int) CONSTRAINT_I;
  return i >= 0 && constraint_satisfied_p_array[i] (x);
}

static inline bool
insn_extra_register_constraint (enum constraint_num c)
{
  return c >= CONSTRAINT_r && c <= CONSTRAINT_Yw;
}

static inline bool
insn_extra_memory_constraint (enum constraint_num c)
{
  return c >= CONSTRAINT_m && c <= CONSTRAINT_o;
}

static inline bool
insn_extra_special_memory_constraint (enum constraint_num c)
{
  return c >= CONSTRAINT_Bm && c <= CONSTRAINT_Bn;
}

static inline bool
insn_extra_address_constraint (enum constraint_num c)
{
  return c >= CONSTRAINT_p && c <= CONSTRAINT_Ts;
}

static inline void
insn_extra_constraint_allows_reg_mem (enum constraint_num c,
          bool *allows_reg, bool *allows_mem)
{
  if (c >= CONSTRAINT_Bz && c <= CONSTRAINT_Z)
    return;
  if (c >= CONSTRAINT_Bf && c <= CONSTRAINT_Bf)
    {
      *allows_reg = true;
      return;
    }
  if (c >= CONSTRAINT_V && c <= CONSTRAINT__g)
    {
      *allows_mem = true;
      return;
    }
  (void) c;
  *allows_reg = true;
  *allows_mem = true;
}

static inline size_t
insn_constraint_len (char fc, const char *str __attribute__ ((__unused__)))
{
  switch (fc)
    {
    case 'B': return 2;
    case 'T': return 2;
    case 'W': return 2;
    case 'Y': return 2;
    default: break;
    }
  return 1;
}



extern enum reg_class reg_class_for_constraint_1 (enum constraint_num);

static inline enum reg_class
reg_class_for_constraint (enum constraint_num c)
{
  if (insn_extra_register_constraint (c))
    return reg_class_for_constraint_1 (c);
  return NO_REGS;
}

extern bool insn_const_int_ok_for_constraint (long, enum constraint_num);



enum constraint_type
{
  CT_REGISTER,
  CT_CONST_INT,
  CT_MEMORY,
  CT_SPECIAL_MEMORY,
  CT_ADDRESS,
  CT_FIXED_FORM
};

static inline enum constraint_type
get_constraint_type (enum constraint_num c)
{
  if (c >= CONSTRAINT_Bm)
    {
      if (c >= CONSTRAINT_Bz)
        return CT_FIXED_FORM;
      if (c >= CONSTRAINT_p)
        return CT_ADDRESS;
      return CT_SPECIAL_MEMORY;
    }
  if (c >= CONSTRAINT_m)
    return CT_MEMORY;
  if (c >= CONSTRAINT_I)
    return CT_CONST_INT;
  return CT_REGISTER;
}
# 7 "./tm_p.h" 2
# 30 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h" 1
# 31 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
struct sequence_stack {

  rtx_insn *first;
  rtx_insn *last;
  struct sequence_stack *next;
};

struct emit_status {
  void ensure_regno_capacity ();



  int x_reg_rtx_no;


  int x_first_label_num;
# 56 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
  struct sequence_stack seq;



  int x_cur_insn_uid;



  int x_cur_debug_insn_uid;





  int regno_pointer_align_length;




  unsigned char * regno_pointer_align;
};
# 87 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
extern rtx * regno_reg_rtx;






struct expr_status {


  poly_int64_pod x_pending_stack_adjust;
# 114 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
  int x_inhibit_defer_pop;





  poly_int64_pod x_stack_pointer_delta;




  rtx x_saveregs_value;


  rtx x_apply_args_value;


  vec<rtx_insn *, va_gc> *x_forced_labels;
};

typedef struct call_site_record_d *call_site_record;


struct rtl_eh {
  rtx ehr_stackadj;
  rtx ehr_handler;
  rtx_code_label *ehr_label;

  rtx sjlj_fc;
  rtx_insn *sjlj_exit_after;

  vec<uchar, va_gc> *action_record_data;

  vec<call_site_record, va_gc> *call_site_record_v[2];
};
# 157 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
struct gimple_df;
struct call_site_record_d;
struct dw_fde_node;

struct varasm_status {

  struct rtx_constant_pool *pool;



  unsigned int deferred_constants;
};



struct function_subsections {




  const char *hot_section_label;
  const char *cold_section_label;
  const char *hot_section_end_label;
  const char *cold_section_end_label;
};




class frame_space
{
public:
  class frame_space *next;

  poly_int64 start;
  poly_int64 length;
};


struct callinfo_callee
{
  location_t location;
  tree decl;
};


struct callinfo_dalloc
{
  location_t location;
  char const *name;
};

class stack_usage
{
public:

  long static_stack_size;



  long dynamic_stack_size;




  poly_int64 pushed_stack_size;



  unsigned int has_unbounded_dynamic_stack_size : 1;


  vec<callinfo_callee, va_gc> *callees;



  vec<callinfo_dalloc, va_gc> *dallocs;
};
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
struct function {
  struct eh_status *eh;


  struct control_flow_graph *cfg;


  gimple_seq gimple_body;


  struct gimple_df *gimple_df;


  struct loops *x_current_loops;


  char *pass_startwith;


  class stack_usage *su;


  htab_t value_histograms;




  tree decl;



  tree static_chain_decl;




  tree nonlocal_goto_save_area;


  vec<tree, va_gc> *local_decls;




  struct machine_function * machine;


  struct language_function * language;


  hash_set<tree> * used_types_hash;




  struct dw_fde_node *fde;


  int last_stmt_uid;





  int debug_marker_count;


  int funcdef_no;


  location_t function_start_locus;


  location_t function_end_locus;


  unsigned int curr_properties;
  unsigned int last_verified;




  const char * cannot_be_copied_reason;


  unsigned short last_clique;






  unsigned int va_list_gpr_size : 8;



  unsigned int va_list_fpr_size : 8;


  unsigned int calls_setjmp : 1;



  unsigned int calls_alloca : 1;


  unsigned int calls_eh_return : 1;



  unsigned int has_nonlocal_label : 1;



  unsigned int has_forced_label_in_static : 1;




  unsigned int cannot_be_copied_set : 1;


  unsigned int stdarg : 1;

  unsigned int after_inlining : 1;
  unsigned int always_inline_functions_inlined : 1;



  unsigned int can_throw_non_call_exceptions : 1;



  unsigned int can_delete_dead_exceptions : 1;






  unsigned int returns_struct : 1;



  unsigned int returns_pcc_struct : 1;



  unsigned int has_local_explicit_reg_vars : 1;





  unsigned int is_thunk : 1;



  unsigned int has_force_vectorize_loops : 1;



  unsigned int has_simduid_loops : 1;


  unsigned int tail_call_marked : 1;


  unsigned int has_unroll : 1;



  unsigned int debug_nonbind_markers : 1;


  unsigned int coroutine_component : 1;


  unsigned int has_omp_target : 1;
};



void add_local_decl (struct function *fun, tree d);





void record_final_call (tree callee, location_t location);


void record_dynamic_alloc (tree decl_or_exp);







extern struct function *cfun;







extern int virtuals_instantiated;


extern int trampolines_created;

struct types_used_by_vars_entry {
  tree type;
  tree var_decl;
};

struct used_type_hasher : ggc_ptr_hash<types_used_by_vars_entry>
{
  static hashval_t hash (types_used_by_vars_entry *);
  static bool equal (types_used_by_vars_entry *, types_used_by_vars_entry *);
};






extern hash_table<used_type_hasher> *types_used_by_vars_hash;

void types_used_by_var_decl_insert (tree type, tree var_decl);



extern vec<tree, va_gc> *types_used_by_cur_var_decl;




inline struct loops *
loops_for_fn (struct function *fn)
{
  return fn->x_current_loops;
}



inline void
set_loops_for_fn (struct function *fn, struct loops *loops)
{
  ((void)(!(fn->x_current_loops == nullptr || loops == nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/function.h", 499, __FUNCTION__), 0 : 0));
  fn->x_current_loops = loops;
}
# 513 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
extern struct machine_function * (*init_machine_status) (void);






struct args_size
{
  poly_int64_pod constant;
  tree var;
};



struct locate_and_pad_arg_data
{



  struct args_size size;

  struct args_size offset;


  struct args_size slot_offset;


  struct args_size alignment_pad;

  pad_direction where_pad;

  unsigned int boundary;
};
# 597 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
enum stack_clash_probes {
  NO_PROBE_NO_FRAME,
  NO_PROBE_SMALL_FRAME,
  PROBE_INLINE,
  PROBE_LOOP
};

extern void dump_stack_clash_frame_info (enum stack_clash_probes, bool);


extern void push_function_context (void);
extern void pop_function_context (void);


extern void free_after_parsing (struct function *);
extern void free_after_compilation (struct function *);




extern poly_int64 get_frame_size (void);




extern bool frame_offset_overflow (poly_int64, tree);

extern unsigned int spill_slot_alignment (machine_mode);

extern rtx assign_stack_local_1 (machine_mode, poly_int64, int, int);
extern rtx assign_stack_local (machine_mode, poly_int64, int);
extern rtx assign_stack_temp_for_type (machine_mode, poly_int64, tree);
extern rtx assign_stack_temp (machine_mode, poly_int64);
extern rtx assign_temp (tree, int, int);
extern void update_temp_slot_address (rtx, rtx);
extern void preserve_temp_slots (rtx);
extern void free_temp_slots (void);
extern void push_temp_slots (void);
extern void pop_temp_slots (void);
extern void init_temp_slots (void);
extern rtx get_hard_reg_initial_reg (rtx);
extern rtx get_hard_reg_initial_val (machine_mode, unsigned int);
extern rtx has_hard_reg_initial_val (machine_mode, unsigned int);


extern unsigned int emit_initial_value_sets (void);

extern bool initial_value_entry (int i, rtx *, rtx *);
extern void instantiate_decl_rtl (rtx x);
extern int aggregate_value_p (const_tree, const_tree);
extern bool use_register_for_decl (const_tree);
extern gimple_seq gimplify_parameters (gimple_seq *);
extern void locate_and_pad_parm (machine_mode, tree, int, int, int,
     tree, struct args_size *,
     struct locate_and_pad_arg_data *);
extern void generate_setjmp_warnings (void);



extern void reorder_blocks (void);
extern void clear_block_marks (tree);
extern tree blocks_nreverse (tree);
extern tree block_chainon (tree, tree);


extern void number_blocks (tree);


extern void set_cfun (struct function *new_cfun, bool force = false);
extern void push_cfun (struct function *new_cfun);
extern void pop_cfun (void);

extern int get_next_funcdef_no (void);
extern int get_last_funcdef_no (void);
extern void allocate_struct_function (tree, bool);
extern void push_struct_function (tree fndecl);
extern void push_dummy_function (bool);
extern void pop_dummy_function (void);
extern void init_dummy_function_start (void);
extern void init_function_start (tree);
extern void stack_protect_epilogue (void);
extern void expand_function_start (tree);
extern void expand_dummy_function_end (void);

extern void thread_prologue_and_epilogue_insns (void);
extern void diddle_return_value (void (*)(rtx, void*), void*);
extern void clobber_return_register (void);
extern void expand_function_end (void);
extern rtx get_arg_pointer_save_area (void);
extern void maybe_copy_prologue_epilogue_insn (rtx, rtx);
extern int prologue_contains (const rtx_insn *);
extern int epilogue_contains (const rtx_insn *);
extern int prologue_epilogue_contains (const rtx_insn *);
extern void record_prologue_seq (rtx_insn *);
extern void record_epilogue_seq (rtx_insn *);
extern void emit_return_into_block (bool simple_p, basic_block bb);
extern void set_return_jump_label (rtx_insn *);
extern bool active_insn_between (rtx_insn *head, rtx_insn *tail);
extern vec<edge> convert_jumps_to_returns (basic_block last_bb, bool simple_p,
        vec<edge> unconverted);
extern basic_block emit_return_for_exit (edge exit_fallthru_edge,
      bool simple_p);
extern void reposition_prologue_and_epilogue_notes (void);


extern const char *fndecl_name (tree);
extern const char *function_name (struct function *);
extern const char *current_function_name (void);

extern void used_types_insert (tree);
# 32 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/emit-rtl.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/emit-rtl.h"
class temp_slot;
typedef class temp_slot *temp_slot_p;
class predefined_function_abi;


struct incoming_args {



  poly_int64_pod pops_args;




  poly_int64_pod size;




  int pretend_args_size;



  rtx arg_offset_rtx;



  CUMULATIVE_ARGS info;


  rtx internal_arg_pointer;
};



struct rtl_data {
  void init_stack_alignment ();

  struct expr_status expr;
  struct emit_status emit;
  struct varasm_status varasm;
  struct incoming_args args;
  struct function_subsections subsections;
  struct rtl_eh eh;







  const predefined_function_abi * abi;





  poly_int64_pod outgoing_args_size;





  rtx return_rtx;






  struct initial_value_struct *hard_reg_initial_vals;



  tree stack_protect_guard;



  tree stack_protect_guard_decl;



  rtx_insn_list *x_nonlocal_goto_handler_labels;




  rtx_code_label *x_return_label;




  rtx_code_label *x_naked_return_label;



  vec<rtx, va_gc> *x_stack_slot_list;


  class frame_space *frame_space_list;


  rtx_note *x_stack_check_probe_note;





  rtx x_arg_pointer_save_area;


  rtx drap_reg;




  poly_int64_pod x_frame_offset;


  rtx_insn *x_parm_birth_insn;


  vec<temp_slot_p, va_gc> *x_used_temp_slots;


  class temp_slot *x_avail_temp_slots;


  int x_temp_slot_level;



  unsigned int stack_alignment_needed;



  unsigned int preferred_stack_boundary;


  unsigned int parm_stack_boundary;


  unsigned int max_used_stack_slot_alignment;
# 174 "/home/giulianob/gcc_git_gnu/gcc/gcc/emit-rtl.h"
  unsigned int stack_alignment_estimated;


  unsigned short patch_area_size;


  unsigned short patch_area_entry;





  bool accesses_prior_frames;


  bool calls_eh_return;



  bool saves_all_registers;



  bool has_nonlocal_goto;


  bool has_asm_statement;






  bool all_throwers_are_sibcalls;



  bool limit_stack;


  bool profile;


  bool uses_const_pool;


  bool uses_pic_offset_table;


  bool uses_eh_lsda;


  bool tail_call_emit;


  bool arg_pointer_save_area_init;




  bool frame_pointer_needed;


  bool maybe_hot_insn_p;






  bool stack_realign_needed;




  bool stack_realign_tried;



  bool need_drap;




  bool stack_realign_processed;



  bool stack_realign_finalized;


  bool dbr_scheduled_p;




  bool nothrow;


  bool shrink_wrapped;



  bool shrink_wrapped_separate;




  bool sp_is_unchanging;





  bool is_leaf;




  bool uses_only_leaf_regs;




  bool has_bb_partition;



  bool bb_reorder_complete;





  HARD_REG_SET asm_clobbers;


  int max_insn_address;
};
# 329 "/home/giulianob/gcc_git_gnu/gcc/gcc/emit-rtl.h"
extern struct rtl_data x_rtl;







bool mem_attrs_eq_p (const class mem_attrs *, const class mem_attrs *);


extern void set_mem_alias_set (rtx, alias_set_type);


extern void set_mem_align (rtx, unsigned int);


extern void set_mem_addr_space (rtx, addr_space_t);


extern void set_mem_expr (rtx, tree);


extern void set_mem_offset (rtx, poly_int64);


extern void clear_mem_offset (rtx);


extern void set_mem_size (rtx, poly_int64);


extern void clear_mem_size (rtx);


extern void set_mem_attrs_for_spill (rtx);
extern tree get_spill_slot_decl (bool);





extern rtx replace_equiv_address (rtx, rtx, bool = false);


extern rtx replace_equiv_address_nv (rtx, rtx, bool = false);

extern rtx gen_blockage (void);
extern rtvec gen_rtvec (int, ...);
extern rtx copy_insn_1 (rtx);
extern rtx copy_insn (rtx);
extern rtx_insn *copy_delay_slot_insn (rtx_insn *);
extern rtx gen_int_mode (poly_int64, machine_mode);
extern rtx_insn *emit_copy_of_insn_after (rtx_insn *, rtx_insn *);
extern void set_reg_attrs_from_value (rtx, rtx);
extern void set_reg_attrs_for_parm (rtx, rtx);
extern void set_reg_attrs_for_decl_rtl (tree t, rtx x);
extern void adjust_reg_mode (rtx, machine_mode);
extern int mem_expr_equal_p (const_tree, const_tree);
extern rtx gen_int_shift_amount (machine_mode, poly_int64);

extern bool need_atomic_barrier_p (enum memmodel, bool);



static inline struct sequence_stack *
get_current_sequence (void)
{
  return &(&x_rtl)->emit.seq;
}



static inline struct sequence_stack *
get_topmost_sequence (void)
{
  struct sequence_stack *seq, *top;

  seq = get_current_sequence ();
  do
    {
      top = seq;
      seq = seq->next;
    } while (seq);
  return top;
}



static inline rtx_insn *
get_insns (void)
{
  return get_current_sequence ()->first;
}



static inline void
set_first_insn (rtx_insn *insn)
{
  ((void)(!(!insn || !PREV_INSN (insn)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/emit-rtl.h", 429, __FUNCTION__), 0 : 0));
  get_current_sequence ()->first = insn;
}



static inline rtx_insn *
get_last_insn (void)
{
  return get_current_sequence ()->last;
}



static inline void
set_last_insn (rtx_insn *insn)
{
  ((void)(!(!insn || !NEXT_INSN (insn)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/emit-rtl.h", 446, __FUNCTION__), 0 : 0));
  get_current_sequence ()->last = insn;
}



static inline int
get_max_uid (void)
{
  return (&x_rtl)->emit.x_cur_insn_uid;
}

extern bool valid_for_const_vector_p (machine_mode, rtx);
extern rtx gen_const_vec_duplicate (machine_mode, rtx);
extern rtx gen_vec_duplicate (machine_mode, rtx);

extern rtx gen_const_vec_series (machine_mode, rtx, rtx);
extern rtx gen_vec_series (machine_mode, rtx, rtx);

extern void set_decl_incoming_rtl (tree, rtx, bool);





extern rtx change_address (rtx, machine_mode, rtx);
# 508 "/home/giulianob/gcc_git_gnu/gcc/gcc/emit-rtl.h"
extern rtx adjust_address_1 (rtx, machine_mode, poly_int64, int, int,
        int, poly_int64);
extern rtx adjust_automodify_address_1 (rtx, machine_mode, rtx,
     poly_int64, int);




extern rtx offset_address (rtx, rtx, unsigned long);




extern void set_mem_attributes (rtx, tree, int);




extern void set_mem_attributes_minus_bitpos (rtx, tree, int, poly_int64);




extern int get_mem_align_offset (rtx, unsigned int);



extern rtx widen_memory_access (rtx, machine_mode, poly_int64);

extern void maybe_set_max_label_num (rtx_code_label *x);
# 33 "build/gencondmd.c" 2






# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/regs.h" 1
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/regs.h"
extern int max_regno;
# 58 "/home/giulianob/gcc_git_gnu/gcc/gcc/regs.h"
struct regstat_n_sets_and_refs_t
{
  int sets;
  int refs;
};

extern struct regstat_n_sets_and_refs_t *regstat_n_sets_and_refs;


static inline int
REG_N_REFS (int regno)
{
  return regstat_n_sets_and_refs[regno].refs;
}






static inline int
REG_N_SETS (int regno)
{
  return regstat_n_sets_and_refs[regno].sets;
}






extern bool reg_is_parm_p (rtx);


extern void regstat_init_n_sets_and_refs (void);
extern void regstat_free_n_sets_and_refs (void);
extern void regstat_compute_ri (void);
extern void regstat_free_ri (void);
extern bitmap regstat_get_setjmp_crosses (void);
extern void regstat_compute_calls_crossed (void);
extern void regstat_free_calls_crossed (void);
extern void dump_reg_info (FILE *);




struct reg_info_t
{
  int freq;
  int deaths;
  int calls_crossed;
  int basic_block;
};

extern struct reg_info_t *reg_info_p;


extern size_t reg_info_p_size;
# 185 "/home/giulianob/gcc_git_gnu/gcc/gcc/regs.h"
extern short *reg_renumber;




extern int caller_save_needed;
# 199 "/home/giulianob/gcc_git_gnu/gcc/gcc/regs.h"
struct target_regs {


  unsigned char x_hard_regno_nregs[76][MAX_MACHINE_MODE];





  machine_mode x_reg_raw_mode[76];



  bool x_have_regs_of_mode[MAX_MACHINE_MODE];


  char x_contains_reg_of_mode[((int) LIM_REG_CLASSES)][MAX_MACHINE_MODE];



  char x_contains_allocatable_reg_of_mode[((int) LIM_REG_CLASSES)][MAX_MACHINE_MODE];




  char x_direct_load[NUM_MACHINE_MODES];
  char x_direct_store[NUM_MACHINE_MODES];


  bool x_float_extend_from_mem[NUM_MACHINE_MODES][NUM_MACHINE_MODES];
};

extern struct target_regs default_target_regs;

extern struct target_regs *this_target_regs;
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/regs.h"
inline __attribute__ ((always_inline)) unsigned char
hard_regno_nregs (unsigned int regno, machine_mode mode)
{
  return this_target_regs->x_hard_regno_nregs[regno][mode];
}




static inline unsigned int
end_hard_regno (machine_mode mode, unsigned int regno)
{
  return regno + hard_regno_nregs (regno, mode);
}




static inline void
add_to_hard_reg_set (HARD_REG_SET *regs, machine_mode mode,
       unsigned int regno)
{
  unsigned int end_regno;

  end_regno = end_hard_regno (mode, regno);
  do
    SET_HARD_REG_BIT (*regs, regno);
  while (++regno < end_regno);
}



static inline void
remove_from_hard_reg_set (HARD_REG_SET *regs, machine_mode mode,
     unsigned int regno)
{
  unsigned int end_regno;

  end_regno = end_hard_regno (mode, regno);
  do
    CLEAR_HARD_REG_BIT (*regs, regno);
  while (++regno < end_regno);
}



static inline bool
in_hard_reg_set_p (const_hard_reg_set regs, machine_mode mode,
     unsigned int regno)
{
  unsigned int end_regno;

  ((void)(!(((regno) < 76)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/regs.h", 306, __FUNCTION__), 0 : 0));

  if (!TEST_HARD_REG_BIT (regs, regno))
    return false;

  end_regno = end_hard_regno (mode, regno);

  if (!((end_regno - 1) < 76))
    return false;

  while (++regno < end_regno)
    if (!TEST_HARD_REG_BIT (regs, regno))
      return false;

  return true;
}



static inline bool
overlaps_hard_reg_set_p (const_hard_reg_set regs, machine_mode mode,
    unsigned int regno)
{
  unsigned int end_regno;

  if (TEST_HARD_REG_BIT (regs, regno))
    return true;

  end_regno = end_hard_regno (mode, regno);
  while (++regno < end_regno)
    if (TEST_HARD_REG_BIT (regs, regno))
      return true;

  return false;
}




static inline void
add_range_to_hard_reg_set (HARD_REG_SET *regs, unsigned int regno,
      int nregs)
{
  while (nregs-- > 0)
    SET_HARD_REG_BIT (*regs, regno + nregs);
}



static inline void
remove_range_from_hard_reg_set (HARD_REG_SET *regs, unsigned int regno,
    int nregs)
{
  while (nregs-- > 0)
    CLEAR_HARD_REG_BIT (*regs, regno + nregs);
}



static inline bool
range_overlaps_hard_reg_set_p (const_hard_reg_set set, unsigned regno,
          int nregs)
{
  while (nregs-- > 0)
    if (TEST_HARD_REG_BIT (set, regno + nregs))
      return true;
  return false;
}



static inline bool
range_in_hard_reg_set_p (const_hard_reg_set set, unsigned regno, int nregs)
{
  while (nregs-- > 0)
    if (!TEST_HARD_REG_BIT (set, regno + nregs))
      return false;
  return true;
}
# 40 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/recog.h" 1
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/recog.h"
typedef uint64_t alternative_mask;
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/recog.h"
enum op_type {
  OP_IN,
  OP_OUT,
  OP_INOUT
};

struct operand_alternative
{


  const char *constraint;


  enum reg_class cl : 16;



  unsigned int reject : 16;


  int matches : 8;



  int matched : 8;


  unsigned int earlyclobber : 1;


  unsigned int memory_ok : 1;

  unsigned int is_address : 1;


  unsigned int anything_ok : 1;

  unsigned int unused : 12;
};




static inline enum reg_class
alternative_class (const operand_alternative *alt, int i)
{
  return alt[i].matches >= 0 ? alt[alt[i].matches].cl : alt[i].cl;
}

extern void init_recog (void);
extern void init_recog_no_volatile (void);
extern int check_asm_operands (rtx);
extern int asm_operand_ok (rtx, const char *, const char **);
extern bool validate_change (rtx, rtx *, rtx, bool);
extern bool validate_unshare_change (rtx, rtx *, rtx, bool);
extern bool canonicalize_change_group (rtx_insn *insn, rtx x);
extern int insn_invalid_p (rtx_insn *, bool);
extern int verify_changes (int);
extern void confirm_change_group (void);
extern int apply_change_group (void);
extern int num_validated_changes (void);
extern void cancel_changes (int);
extern int constrain_operands (int, alternative_mask);
extern int constrain_operands_cached (rtx_insn *, int);
extern int memory_address_addr_space_p (machine_mode, rtx, addr_space_t);


extern int strict_memory_address_addr_space_p (machine_mode, rtx,
            addr_space_t);


extern int validate_replace_rtx_subexp (rtx, rtx, rtx_insn *, rtx *);
extern int validate_replace_rtx (rtx, rtx, rtx_insn *);
extern int validate_replace_rtx_part (rtx, rtx, rtx *, rtx_insn *);
extern int validate_replace_rtx_part_nosimplify (rtx, rtx, rtx *, rtx_insn *);
extern void validate_replace_rtx_group (rtx, rtx, rtx_insn *);
extern void validate_replace_src_group (rtx, rtx, rtx_insn *);
extern bool validate_simplify_insn (rtx_insn *insn);
extern int num_changes_pending (void);
extern bool reg_fits_class_p (const_rtx, reg_class_t, int, machine_mode);

extern int offsettable_memref_p (rtx);
extern int offsettable_nonstrict_memref_p (rtx);
extern int offsettable_address_addr_space_p (int, machine_mode, rtx,
          addr_space_t);



extern bool mode_dependent_address_p (rtx, addr_space_t);

extern int recog (rtx, rtx_insn *, int *);



extern void add_clobbers (rtx, int);
extern int added_clobbers_hard_reg_p (int);
extern void insn_extract (rtx_insn *);
extern void extract_insn (rtx_insn *);
extern void extract_constrain_insn (rtx_insn *insn);
extern void extract_constrain_insn_cached (rtx_insn *);
extern void extract_insn_cached (rtx_insn *);
extern void preprocess_constraints (int, int, const char **,
        operand_alternative *, rtx **);
extern const operand_alternative *preprocess_insn_constraints (unsigned int);
extern void preprocess_constraints (rtx_insn *);
extern rtx_insn *peep2_next_insn (int);
extern int peep2_regno_dead_p (int, int);
extern int peep2_reg_dead_p (int, rtx);

extern rtx peep2_find_free_register (int, int, const char *,
         machine_mode, HARD_REG_SET *);

extern rtx_insn *peephole2_insns (rtx, rtx_insn *, int *);

extern int store_data_bypass_p (rtx_insn *, rtx_insn *);
extern int if_test_bypass_p (rtx_insn *, rtx_insn *);
# 174 "/home/giulianob/gcc_git_gnu/gcc/gcc/recog.h"
static inline const char *
skip_alternative (const char *p)
{
  const char *r = p;
  while (*r != '\0' && *r != ',')
    r++;
  if (*r == ',')
    r++;
  return r;
}


extern int volatile_ok;



class temporary_volatile_ok
{
public:
  temporary_volatile_ok (int value) : save_volatile_ok (volatile_ok)
  {
    volatile_ok = value;
  }

  ~temporary_volatile_ok () { volatile_ok = save_volatile_ok; }

private:
  temporary_volatile_ok (const temporary_volatile_ok &);
  int save_volatile_ok;
};



extern int which_alternative;



struct recog_data_d
{







  rtx operand[10];


  rtx *operand_loc[10];


  const char *constraints[10];


  char is_operator[10];


  machine_mode operand_mode[10];


  enum op_type operand_type[10];



  rtx *dup_loc[10];



  char dup_num[10];
# 256 "/home/giulianob/gcc_git_gnu/gcc/gcc/recog.h"
  char n_operands;


  char n_dups;


  char n_alternatives;


  bool is_asm;


  rtx_insn *insn;
};

extern struct recog_data_d recog_data;

extern const operand_alternative *recog_op_alt;





inline static const operand_alternative *
which_op_alt ()
{
  ((void)(!(((unsigned long) (which_alternative) - (unsigned long) (0) <= (unsigned long) (recog_data.n_alternatives - 1) - (unsigned long) (0))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/recog.h", 282, __FUNCTION__), 0 : 0))
                                    ;
  return &recog_op_alt[which_alternative * recog_data.n_operands];
}




typedef int (*insn_operand_predicate_fn) (rtx, machine_mode);
typedef const char * (*insn_output_fn) (rtx *, rtx_insn *);

struct insn_gen_fn
{
  typedef void (*stored_funcptr) (void);

  template<typename ...Ts>
  rtx_insn *operator() (Ts... args) const
  {
    typedef rtx_insn *(*funcptr) (decltype ((void) args, (rtx) 0)...);
    return ((funcptr) func) (args...);
  }



  insn_gen_fn operator * (void) const { return *this; }





  stored_funcptr func;
};

struct insn_operand_data
{
  const insn_operand_predicate_fn predicate;

  const char *const constraint;

  enum machine_mode const mode : 16;

  const char strict_low;

  const char is_operator;

  const char eliminable;

  const char allows_mem;
};
# 339 "/home/giulianob/gcc_git_gnu/gcc/gcc/recog.h"
struct insn_data_d
{
  const char *const name;

  union {
    const char *single;
    const char *const *multi;
    insn_output_fn function;
  } output;







  const insn_gen_fn genfun;
  const struct insn_operand_data *const operand;

  const char n_generator_args;
  const char n_operands;
  const char n_dups;
  const char n_alternatives;
  const char output_format;
};

extern const struct insn_data_d insn_data[];
extern int peep2_current_count;
# 41 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
extern void init_final (const char *);



extern void app_enable (void);



extern void app_disable (void);




extern int dbr_sequence_length (void);


extern void init_insn_lengths (void);



extern int get_attr_length (rtx_insn *);



extern int get_attr_min_length (rtx_insn *);



extern void shorten_branches (rtx_insn *);

const char *get_some_local_dynamic_name ();






extern void final_start_function (rtx_insn *, FILE *, int);




extern void final_end_function (void);


extern void final (rtx_insn *, FILE *, int);




extern rtx_insn *final_scan_insn (rtx_insn *, FILE *, int, int, int *);



extern rtx alter_subreg (rtx *, bool);


extern void output_operand (rtx, int);



extern void output_operand_lossage (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));



extern void output_asm_insn (const char *, rtx *);




extern int insn_current_reference_address (rtx_insn *);



extern align_flags label_to_alignment (rtx);


extern void output_asm_label (rtx);


extern void mark_symbol_refs_as_used (rtx);



extern void output_address (machine_mode, rtx);




extern void output_addr_const (FILE *, rtx);
# 124 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
extern void fprint_whex (FILE *, unsigned long);
extern void fprint_ul (FILE *, unsigned long);
extern int sprint_ul (char *, unsigned long);

extern void asm_fprintf (FILE *file, const char *p, ...)
     __attribute__ ((__format__ (__asm_fprintf__, 2, 3))) __attribute__ ((__nonnull__ (2)));


extern int leaf_function_p (void);




extern int final_forward_branch_p (rtx_insn *);



extern int only_leaf_regs_used (void);



extern void leaf_renumber_regs_insn (rtx);


extern const char *get_insn_template (int, rtx_insn *);




extern void weak_finish (void);
# 162 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
extern int decode_reg_name (const char *);




extern int decode_reg_name_and_count (const char *, int *);

extern void do_assemble_alias (tree, tree);
extern void do_assemble_symver (tree, tree);

extern void default_assemble_visibility (tree, int);



extern void assemble_asm (tree);


extern const char *get_fnname_from_decl (tree);





extern void assemble_start_function (tree, const char *);



extern void assemble_end_function (tree, const char *);
# 200 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
extern void assemble_variable (tree, int, int, int);



extern void assemble_vtv_preinit_initializer (tree);



extern void assemble_undefined_decl (tree);



extern void align_variable (tree decl, bool dont_output_data);




extern void assemble_external (tree);


extern void assemble_zeros (unsigned long);


extern void assemble_align (unsigned int);


extern void assemble_string (const char *, int);


extern void assemble_external_libcall (rtx);


extern void assemble_label (FILE *, const char *);





extern void assemble_name_raw (FILE *, const char *);





extern const char *assemble_name_resolve (const char *);





extern void assemble_name (FILE *, const char *);
# 259 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
extern const char *integer_asm_op (int, int);



extern void assemble_integer_with_op (const char *, rtx);


extern bool default_assemble_integer (rtx, unsigned int, int);





extern bool assemble_integer (rtx, unsigned, unsigned, int);



extern section *get_named_text_section (tree, const char *, const char *);
# 287 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
extern void assemble_real (struct real_value, scalar_float_mode, unsigned,
      bool = false);


extern void assemble_addr_to_section (rtx, section *);




extern bool constant_pool_empty_p (void);

extern rtx_insn *peephole (rtx_insn *);

extern void output_shared_constant_pool (void);

extern void output_object_blocks (void);

extern void output_quoted_string (FILE *, const char *);







extern rtx_sequence *final_sequence;




extern FILE *asm_out_file;



extern const char *first_global_object_name;


extern const char *weak_global_object_name;


extern rtx current_insn_predicate;


extern rtx_insn *current_output_insn;




extern const rtx_insn *this_is_asm_operands;



extern int size_directive_output;
extern tree last_assemble_variable_decl;

extern bool first_function_block_is_cold;



extern bool decl_readonly_section (const_tree, int);



extern int compute_reloc_for_constant (tree);


extern const char *user_label_prefix;


extern void default_function_pro_epilogue (FILE *);


extern void default_function_switched_text_sections (FILE *, tree, bool);


extern void no_asm_to_stream (FILE *);
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
enum section_category
{
  SECCAT_TEXT,

  SECCAT_RODATA,
  SECCAT_RODATA_MERGE_STR,
  SECCAT_RODATA_MERGE_STR_INIT,
  SECCAT_RODATA_MERGE_CONST,
  SECCAT_SRODATA,

  SECCAT_DATA,
# 423 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
  SECCAT_DATA_REL,
  SECCAT_DATA_REL_LOCAL,
  SECCAT_DATA_REL_RO,
  SECCAT_DATA_REL_RO_LOCAL,

  SECCAT_SDATA,
  SECCAT_TDATA,

  SECCAT_BSS,
  SECCAT_SBSS,
  SECCAT_TBSS
};


struct section_common {

  unsigned int flags;
};


struct named_section {
  struct section_common common;


  const char *name;



  tree decl;
};



typedef void (*unnamed_section_callback) (const void *);


struct unnamed_section {
  struct section_common common;



  unnamed_section_callback callback;
  const void * data;


  section *next;
};
# 480 "/home/giulianob/gcc_git_gnu/gcc/gcc/output.h"
typedef bool (*noswitch_section_callback) (tree decl, const char *name,
        unsigned long size,
        unsigned long rounded);


struct noswitch_section {
  struct section_common common;


  noswitch_section_callback callback;
};


union section {
  struct section_common common;
  struct named_section named;
  struct unnamed_section unnamed;
  struct noswitch_section noswitch;
};




struct object_block;


extern section *text_section;
extern section *data_section;
extern section *readonly_data_section;
extern section *sdata_section;
extern section *ctors_section;
extern section *dtors_section;
extern section *bss_section;
extern section *sbss_section;
extern section *exception_section;
extern section *eh_frame_section;
extern section *tls_comm_section;
extern section *comm_section;
extern section *lcomm_section;
extern section *bss_noswitch_section;

extern section *in_section;
extern bool in_cold_section_p;

extern section *get_unnamed_section (unsigned int, void (*) (const void *),
         const void *);
extern section *get_section (const char *, unsigned int, tree);
extern section *get_named_section (tree, const char *, int);
extern section *get_variable_section (tree, bool);
extern void place_block_symbol (rtx);
extern rtx get_section_anchor (struct object_block *, long,
          enum tls_model);
extern section *mergeable_constant_section (machine_mode,
         unsigned long,
         unsigned int);
extern section *function_section (tree);
extern section *unlikely_text_section (void);
extern section *current_function_section (void);
extern void switch_to_other_text_partition (void);



extern section *get_cdtor_priority_section (int, bool);

extern bool unlikely_text_section_p (section *);
extern void switch_to_section (section *);
extern void output_section_asm_op (const void *);

extern void record_tm_clone_pair (tree, tree);
extern void finish_tm_clone_pairs (void);
extern tree get_tm_clone_pair (tree);

extern void default_asm_output_source_filename (FILE *, const char *);
extern void output_file_directive (FILE *, const char *);

extern unsigned int default_section_type_flags (tree, const char *, int);

extern bool have_global_bss_p (void);
extern bool bss_initializer_p (const_tree, bool = false);

extern void default_no_named_section (const char *, unsigned int, tree);
extern void default_elf_asm_named_section (const char *, unsigned int, tree);
extern enum section_category categorize_decl_for_section (const_tree, int);
extern void default_coff_asm_named_section (const char *, unsigned int, tree);
extern void default_pe_asm_named_section (const char *, unsigned int, tree);

extern void default_named_section_asm_out_destructor (rtx, int);
extern void default_dtor_section_asm_out_destructor (rtx, int);
extern void default_named_section_asm_out_constructor (rtx, int);
extern void default_ctor_section_asm_out_constructor (rtx, int);

extern section *default_select_section (tree, int, unsigned long);
extern section *default_elf_select_section (tree, int, unsigned long);
extern void default_unique_section (tree, int);
extern section *default_function_rodata_section (tree);
extern section *default_no_function_rodata_section (tree);
extern section *default_clone_table_section (void);
extern section *default_select_rtx_section (machine_mode, rtx,
         unsigned long);
extern section *default_elf_select_rtx_section (machine_mode, rtx,
      unsigned long);
extern void default_encode_section_info (tree, rtx, int);
extern const char *default_strip_name_encoding (const char *);
extern void default_asm_output_anchor (rtx);
extern bool default_use_anchors_for_symbol_p (const_rtx);
extern bool default_binds_local_p (const_tree);
extern bool default_binds_local_p_1 (const_tree, int);
extern bool default_binds_local_p_2 (const_tree);
extern bool default_binds_local_p_3 (const_tree, bool, bool, bool, bool);
extern void default_globalize_label (FILE *, const char *);
extern void default_globalize_decl_name (FILE *, tree);
extern void default_emit_unwind_label (FILE *, tree, int, int);
extern void default_emit_except_table_label (FILE *);
extern void default_generate_internal_label (char *, const char *,
          unsigned long);
extern void default_internal_label (FILE *, const char *, unsigned long);
extern void default_asm_declare_constant_name (FILE *, const char *,
            const_tree, long);
extern void default_file_start (void);
extern void file_end_indicate_exec_stack (void);
extern void file_end_indicate_split_stack (void);

extern void default_elf_asm_output_external (FILE *file, tree,
          const char *);
extern void default_elf_asm_output_limited_string (FILE *, const char *);
extern void default_elf_asm_output_ascii (FILE *, const char *, unsigned int);
extern void default_elf_internal_label (FILE *, const char *, unsigned long);

extern void default_elf_init_array_asm_out_constructor (rtx, int);
extern void default_elf_fini_array_asm_out_destructor (rtx, int);
extern int maybe_assemble_visibility (tree);

extern int default_address_cost (rtx, machine_mode, addr_space_t, bool);


extern void output_stack_usage (void);
# 42 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/flags.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/flags.h"
extern const char *const debug_type_names[];

extern void strip_off_ending (char *, int);
extern int base_of_path (const char *path, const char **base_out);


extern bool fast_math_flags_set_p (const struct gcc_options *);
extern bool fast_math_flags_struct_set_p (struct cl_optimization *);






extern bool final_insns_dump_p;




class target_flag_state
{
public:


  align_flags x_align_loops;
  align_flags x_align_jumps;
  align_flags x_align_labels;
  align_flags x_align_functions;
};

extern class target_flag_state default_target_flag_state;

extern class target_flag_state *this_target_flag_state;
# 43 "build/gencondmd.c" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
struct function;
struct profile_count;
class sreal;



enum profile_quality {

  UNINITIALIZED_PROFILE,





  GUESSED_LOCAL,




  GUESSED_GLOBAL0,


  GUESSED_GLOBAL0_ADJUSTED,






  GUESSED,


  AFDO,




  ADJUSTED,



  PRECISE
};

extern const char *profile_quality_as_string (enum profile_quality);
extern bool parse_profile_quality (const char *value,
       profile_quality *quality);






bool slow_safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res);



inline bool
safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)
{

  uint64_t tmp;
  if (!__builtin_mul_overflow (a, b, &tmp)
      && !__builtin_add_overflow (tmp, c/2, &tmp))
    {
      *res = tmp / c;
      return true;
    }
  if (c == 1)
    {
      *res = (uint64_t) -1;
      return false;
    }
# 106 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  return slow_safe_scale_64bit (a, b, c, res);
}
# 146 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
class profile_probability
{
  static const int n_bits = 29;


  static const uint32_t max_probability = (uint32_t) 1 << (n_bits - 2);
  static const uint32_t uninitialized_probability
   = ((uint32_t) 1 << (n_bits - 1)) - 1;

  uint32_t m_val : 29;
  enum profile_quality m_quality : 3;

  friend struct profile_count;
public:
  profile_probability (): m_val (uninitialized_probability),
    m_quality (GUESSED)
  {}

  profile_probability (uint32_t val, profile_quality quality):
    m_val (val), m_quality (quality)
  {}


  static profile_probability never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = PRECISE;
      return ret;
    }

  static profile_probability guessed_never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = GUESSED;
      return ret;
    }

  static profile_probability very_unlikely ()
    {

      profile_probability r = guessed_always ().apply_scale (1, 2000);
      r.m_val--;
      return r;
    }

  static profile_probability unlikely ()
    {

      profile_probability r = guessed_always ().apply_scale (1, 5);
      r.m_val--;
      return r;
    }

  static profile_probability even ()
    {
      return guessed_always ().apply_scale (1, 2);
    }

  static profile_probability very_likely ()
    {
      return always () - very_unlikely ();
    }

  static profile_probability likely ()
    {
      return always () - unlikely ();
    }

  static profile_probability guessed_always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = GUESSED;
      return ret;
    }

  static profile_probability always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = PRECISE;
      return ret;
    }



  static profile_probability uninitialized ()
    {
      profile_probability c;
      c.m_val = uninitialized_probability;
      c.m_quality = GUESSED;
      return c;
    }


  bool initialized_p () const
    {
      return m_val != uninitialized_probability;
    }


  bool reliable_p () const
    {
      return m_quality >= ADJUSTED;
    }



  static profile_probability from_reg_br_prob_base (int v)
    {
      profile_probability ret;
      ((void)(!(v >= 0 && v <= 10000) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 259, __FUNCTION__), 0 : 0));
      ret.m_val = (((v * (uint64_t) max_probability) + (10000) / 2) / (10000));
      ret.m_quality = GUESSED;
      return ret;
    }


  profile_probability adjusted () const
    {
      profile_probability ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = ADJUSTED;
      return ret;
    }

  int to_reg_br_prob_base () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 277, __FUNCTION__), 0 : 0));
      return (((m_val * (uint64_t) 10000) + (max_probability) / 2) / (max_probability));
    }


  static profile_probability from_reg_br_prob_note (int v)
    {
      profile_probability ret;
      ret.m_val = ((unsigned int)v) / 8;
      ret.m_quality = (enum profile_quality)(v & 7);
      return ret;
    }

  int to_reg_br_prob_note () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 292, __FUNCTION__), 0 : 0));
      int ret = m_val * 8 + m_quality;
      ((void)(!(from_reg_br_prob_note (ret) == *this) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 294, __FUNCTION__), 0 : 0));
      return ret;
    }


  static profile_probability probability_in_gcov_type
     (gcov_type val1, gcov_type val2)
    {
      profile_probability ret;
      ((void)(!(val1 >= 0 && val2 > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 303, __FUNCTION__), 0 : 0));
      if (val1 > val2)
 ret.m_val = max_probability;
      else
 {
   uint64_t tmp;
   safe_scale_64bit (val1, max_probability, val2, &tmp);
   ((void)(!(tmp <= max_probability) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 310, __FUNCTION__), 0 : 0));
   ret.m_val = tmp;
 }
      ret.m_quality = PRECISE;
      return ret;
    }


  bool operator== (const profile_probability &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }

  profile_probability operator+ (const profile_probability &other) const
    {
      if (other == never ())
 return *this;
      if (*this == never ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();

      profile_probability ret;
      ret.m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_probability &operator+= (const profile_probability &other)
    {
      if (other == never ())
 return *this;
      if (*this == never ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_probability operator- (const profile_probability &other) const
    {
      if (*this == never ()
   || other == never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_probability &operator-= (const profile_probability &other)
    {
      if (*this == never ()
   || other == never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_probability operator* (const profile_probability &other) const
    {
      if (*this == never ()
   || other == never ())
 return never ();
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;
      ret.m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
      return ret;
    }

  profile_probability &operator*= (const profile_probability &other)
    {
      if (*this == never ()
   || other == never ())
 return *this = never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
 }
      return *this;
    }

  profile_probability operator/ (const profile_probability &other) const
    {
      if (*this == never ())
 return never ();
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;

      if (m_val >= other.m_val)
 {
   ret.m_val = max_probability;
          ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (GUESSED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (GUESSED))
                  ;
   return ret;
 }
      else if (!m_val)
 ret.m_val = 0;
      else
 {
   ((void)(!(other.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 432, __FUNCTION__), 0 : 0));
   ret.m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
 }
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
      return ret;
    }

  profile_probability &operator/= (const profile_probability &other)
    {
      if (*this == never ())
 return *this = never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {


   if (m_val > other.m_val)
     {
       m_val = max_probability;
              m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (GUESSED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (GUESSED))
                  ;
       return *this;
     }
   else if (!m_val)
     ;
   else
     {
       ((void)(!(other.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 462, __FUNCTION__), 0 : 0));
       m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
     }
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
 }
      return *this;
    }
# 487 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  profile_probability split (const profile_probability &cprob)
    {
      profile_probability ret = *this * cprob;





      if (!(*this == always ()))
        *this = (*this - ret) / ret.invert ();
      return ret;
    }

  gcov_type apply (gcov_type val) const
    {
      if (*this == uninitialized ())
 return val / 2;
      return (((val * m_val) + (max_probability) / 2) / (max_probability));
    }


  profile_probability invert () const
    {
      return always() - *this;
    }


  profile_probability guessed () const
    {
      profile_probability ret = *this;
      ret.m_quality = GUESSED;
      return ret;
    }


  profile_probability afdo () const
    {
      profile_probability ret = *this;
      ret.m_quality = AFDO;
      return ret;
    }


  profile_probability apply_scale (int64_t num, int64_t den) const
    {
      if (*this == never ())
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_probability ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_probability) ? (tmp) : (max_probability));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }
# 560 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  bool probably_reliable_p () const
    {
      if (m_quality >= ADJUSTED)
 return true;
      if (!initialized_p ())
 return false;
      return m_val < max_probability / 100
      || m_val > max_probability - max_probability / 100;
    }


  bool verify () const
    {
      ((void)(!(m_quality != UNINITIALIZED_PROFILE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 573, __FUNCTION__), 0 : 0));
      if (m_val == uninitialized_probability)
 return m_quality == GUESSED;
      else if (m_quality < GUESSED)
 return false;
      return m_val <= max_probability;
    }



  bool operator< (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val < other.m_val;
    }

  bool operator> (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }

  bool operator<= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val <= other.m_val;
    }

  bool operator>= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val >= other.m_val;
    }


  uint32_t value () const { return m_val; }


  enum profile_quality quality () const { return m_quality; }


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_probability other) const;


  bool differs_lot_from_p (profile_probability other) const;




  profile_probability combine_with_count (profile_count count1,
       profile_probability other,
       profile_count count2) const;


  sreal to_sreal () const;

  static profile_probability stream_in (class lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 690 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
struct profile_count
{
public:




  static const int n_bits = 61;
  static const uint64_t max_count = ((uint64_t) 1 << n_bits) - 2;
private:
  static const uint64_t uninitialized_count = ((uint64_t) 1 << n_bits) - 1;
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  uint64_t m_val : n_bits;

  enum profile_quality m_quality : 3;
public:




  bool compatible_p (const profile_count other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return true;
      if (*this == zero ()
   || other == zero ())
 return true;


      if (ipa ().nonzero_p ()
   && !(other.ipa () == other))
 return false;
      if (other.ipa ().nonzero_p ()
   && !(ipa () == *this))
 return false;

      return ipa_p () == other.ipa_p ();
    }


  static profile_count zero ()
    {
      return from_gcov_type (0);
    }

  static profile_count adjusted_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = ADJUSTED;
      return c;
    }

  static profile_count guessed_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = GUESSED;
      return c;
    }

  static profile_count one ()
    {
      return from_gcov_type (1);
    }



  static profile_count uninitialized ()
    {
      profile_count c;
      c.m_val = uninitialized_count;
      c.m_quality = GUESSED_LOCAL;
      return c;
    }


  gcov_type to_gcov_type () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 778, __FUNCTION__), 0 : 0));
      return m_val;
    }


  bool initialized_p () const
    {
      return m_val != uninitialized_count;
    }


  bool reliable_p () const
    {
      return m_quality >= ADJUSTED;
    }


  bool ipa_p () const
    {
      return !initialized_p () || m_quality >= GUESSED_GLOBAL0;
    }


  bool precise_p () const
    {
      return m_quality == PRECISE;
    }


  uint32_t value () const { return m_val; }


  enum profile_quality quality () const { return m_quality; }





  bool ok_for_merging (profile_count other) const
    {
      if (m_quality < ADJUSTED
   || other.m_quality < ADJUSTED)
 return true;
      return !(other < *this);
    }



  profile_count merge (profile_count other) const
    {
      if (*this == other || !other.initialized_p ()
   || m_quality > other.m_quality)
 return *this;
      if (other.m_quality > m_quality
   || other > *this)
 return other;
      return *this;
    }


  bool operator== (const profile_count &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }

  profile_count operator+ (const profile_count &other) const
    {
      if (other == zero ())
 return *this;
      if (*this == zero ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();

      profile_count ret;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 853, __FUNCTION__), 0 : 0));
      ret.m_val = m_val + other.m_val;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_count &operator+= (const profile_count &other)
    {
      if (other == zero ())
 return *this;
      if (*this == zero ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 872, __FUNCTION__), 0 : 0));
   m_val += other.m_val;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_count operator- (const profile_count &other) const
    {
      if (*this == zero () || other == zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 885, __FUNCTION__), 0 : 0));
      profile_count ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_count &operator-= (const profile_count &other)
    {
      if (*this == zero () || other == zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 900, __FUNCTION__), 0 : 0));
   m_val = m_val >= other.m_val ? m_val - other.m_val: 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }


  bool verify () const
    {
      ((void)(!(m_quality != UNINITIALIZED_PROFILE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 910, __FUNCTION__), 0 : 0));
      return m_val != uninitialized_count || m_quality == GUESSED_LOCAL;
    }



  bool operator< (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return !(other == zero ());
      if (other == zero ())
 return false;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 924, __FUNCTION__), 0 : 0));
      return m_val < other.m_val;
    }

  bool operator> (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return false;
      if (other == zero ())
 return !(*this == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 936, __FUNCTION__), 0 : 0));
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }

  bool operator< (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 942, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 943, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val < (uint64_t) other;
    }

  bool operator> (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 949, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 950, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val > (uint64_t) other;
    }

  bool operator<= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return true;
      if (other == zero ())
 return (*this == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 962, __FUNCTION__), 0 : 0));
      return m_val <= other.m_val;
    }

  bool operator>= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (other == zero ())
 return true;
      if (*this == zero ())
 return (other == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 974, __FUNCTION__), 0 : 0));
      return m_val >= other.m_val;
    }

  bool operator<= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 980, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 981, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val <= (uint64_t) other;
    }

  bool operator>= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 987, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 988, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val >= (uint64_t) other;
    }




  bool nonzero_p () const
    {
      return initialized_p () && m_val != 0;
    }


  profile_count force_nonzero () const
    {
      if (!initialized_p ())
 return *this;
      profile_count ret = *this;
      if (ret.m_val == 0)
 {
   ret.m_val = 1;
          ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
 }
      return ret;
    }

  profile_count max (profile_count other) const
    {
      profile_count val = *this;


      if (ipa ().nonzero_p () || other.ipa ().nonzero_p ())
 {
   val = ipa ();
   other = other.ipa ();
 }
      if (!initialized_p ())
 return other;
      if (!other.initialized_p ())
 return *this;
      if (*this == zero ())
 return other;
      if (other == zero ())
 return *this;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1032, __FUNCTION__), 0 : 0));
      if (val.m_val < other.m_val || (m_val == other.m_val
          && val.m_quality < other.m_quality))
 return other;
      return *this;
    }



  profile_count apply_probability (int prob) const
    {
      ((void)(!(prob >= 0 && prob <= 10000) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1043, __FUNCTION__), 0 : 0));
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      ret.m_val = (((m_val * prob) + (10000) / 2) / (10000));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }


  profile_count apply_probability (profile_probability prob) const
    {
      if (*this == zero ())
 return *this;
      if (prob == profile_probability::never ())
 return zero ();
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, prob.m_val, profile_probability::max_probability,
   &tmp);
      ret.m_val = tmp;
      ret.m_quality = ((m_quality) < (prob.m_quality) ? (m_quality) : (prob.m_quality));
      return ret;
    }


  profile_count apply_scale (int64_t num, int64_t den) const
    {
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      uint64_t tmp;

      ((void)(!(num >= 0 && den > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1082, __FUNCTION__), 0 : 0));
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_count) ? (tmp) : (max_count));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }

  profile_count apply_scale (profile_count num, profile_count den) const
    {
      if (*this == zero ())
 return *this;
      if (num == zero ())
 return num;
      if (!initialized_p () || !num.initialized_p () || !den.initialized_p ())
 return uninitialized ();
      if (num == den)
 return *this;
      ((void)(!(den.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1099, __FUNCTION__), 0 : 0));

      profile_count ret;
      uint64_t val;
      safe_scale_64bit (m_val, num.m_val, den.m_val, &val);
      ret.m_val = ((val) < (max_count) ? (val) : (max_count));
      ret.m_quality = ((((((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) < (num.m_quality) ? (((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) : (num.m_quality))) < (den.m_quality) ? (((((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) < (num.m_quality) ? (((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) : (num.m_quality))) : (den.m_quality))
                                         ;


      if (num.ipa_p ())
 ret.m_quality = ((ret.m_quality) > (num == num.ipa () ? GUESSED : num.m_quality) ? (ret.m_quality) : (num == num.ipa () ? GUESSED : num.m_quality))
                                                    ;
      return ret;
    }


  profile_count guessed_local () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_LOCAL;
      return ret;
    }


  profile_count global0 () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_GLOBAL0;
      return ret;
    }



  profile_count global0adjusted () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_GLOBAL0_ADJUSTED;
      return ret;
    }


  profile_count guessed () const
    {
      profile_count ret = *this;
      ret.m_quality = ((ret.m_quality) < (GUESSED) ? (ret.m_quality) : (GUESSED));
      return ret;
    }



  profile_count ipa () const
    {
      if (m_quality > GUESSED_GLOBAL0_ADJUSTED)
 return *this;
      if (m_quality == GUESSED_GLOBAL0)
 return zero ();
      if (m_quality == GUESSED_GLOBAL0_ADJUSTED)
 return adjusted_zero ();
      return uninitialized ();
    }


  profile_count afdo () const
    {
      profile_count ret = *this;
      ret.m_quality = AFDO;
      return ret;
    }



  profile_probability probability_in (const profile_count overall) const
    {
      if (*this == zero ()
   && !(overall == zero ()))
 return profile_probability::never ();
      if (!initialized_p () || !overall.initialized_p ()
   || !overall.m_val)
 return profile_probability::uninitialized ();
      if (*this == overall && m_quality == PRECISE)
 return profile_probability::always ();
      profile_probability ret;
      ((void)(!(compatible_p (overall)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1188, __FUNCTION__), 0 : 0));

      if (overall.m_val < m_val)
 {
   ret.m_val = profile_probability::max_probability;
   ret.m_quality = GUESSED;
   return ret;
 }
      else
 ret.m_val = (((m_val * profile_probability::max_probability) + (overall.m_val) / 2) / (overall.m_val))
                   ;
      ret.m_quality = ((((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (GUESSED) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (GUESSED))) < (ADJUSTED) ? (((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (GUESSED) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (GUESSED))) : (ADJUSTED))
                       ;
      return ret;
    }

  int to_frequency (struct function *fun) const;
  int to_cgraph_frequency (profile_count entry_bb_count) const;
  sreal to_sreal_scale (profile_count in, bool *known = nullptr) const;


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_count other) const;




  static void adjust_for_ipa_scaling (profile_count *num, profile_count *den);






  profile_count combine_with_ipa_count (profile_count ipa);


  profile_count combine_with_ipa_count_within
   (profile_count ipa, profile_count ipa2);




  static profile_count from_gcov_type (gcov_type v,
           profile_quality quality = PRECISE);


  static profile_count stream_in (class lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.h" 2
# 37 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.h"
enum br_predictor
{
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.def" 1
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.def"
PRED_COMBINED,


PRED_DS_THEORY,



PRED_FIRST_MATCH,


PRED_NO_PREDICTION,


PRED_UNCONDITIONAL,



PRED_MALLOC_NONNULL,





PRED_LOOP_ITERATIONS,




PRED_COMPARE_AND_SWAP,






PRED_BUILTIN_EXPECT,



PRED_BUILTIN_EXPECT_WITH_PROBABILITY,




PRED_HOT_LABEL,



PRED_COLD_LABEL,



PRED_LOOP_ITERATIONS_GUESSED,



PRED_LOOP_ITERATIONS_MAX,



PRED_CONTINUE,


PRED_NORETURN,



PRED_COLD_FUNCTION,



PRED_LOOP_EXIT,



PRED_LOOP_EXIT_WITH_RECURSION,




PRED_LOOP_EXTRA_EXIT,



PRED_POINTER,
PRED_TREE_POINTER,


PRED_OPCODE_POSITIVE,
PRED_OPCODE_NONEQUAL,
PRED_FPOPCODE,
PRED_TREE_OPCODE_POSITIVE,

PRED_TREE_OPCODE_NONEQUAL,

PRED_TREE_FPOPCODE,


PRED_CALL,



PRED_INDIR_CALL,
PRED_POLYMORPHIC_CALL,
PRED_RECURSIVE_CALL,


PRED_TREE_EARLY_RETURN,



PRED_GOTO,


PRED_CONST_RETURN,


PRED_NEGATIVE_RETURN,


PRED_NULL_RETURN,



PRED_LOOP_IV_COMPARE_GUESS,




PRED_LOOP_IV_COMPARE,
# 176 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.def"
PRED_LOOP_GUARD,


PRED_LOOP_GUARD_WITH_RECURSION,





PRED_FORTRAN_OVERFLOW,






PRED_FORTRAN_FAIL_ALLOC,




PRED_FORTRAN_REALLOC,






PRED_FORTRAN_FAIL_IO,



PRED_FORTRAN_WARN_ONCE,


PRED_FORTRAN_SIZE_ZERO,





PRED_FORTRAN_INVALID_BOUND,






PRED_FORTRAN_ABSENT_DUMMY,





PRED_FORTRAN_LOOP_PREHEADER,





PRED_FORTRAN_CONTIGUOUS,
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/predict.h" 2


  END_PREDICTORS
};

enum prediction
{
   NOT_TAKEN,
   TAKEN
};


extern profile_probability split_branch_probability;

extern gcov_type get_hot_bb_threshold (void);
extern void set_hot_bb_threshold (gcov_type);
extern bool maybe_hot_count_p (struct function *, profile_count);
extern bool maybe_hot_bb_p (struct function *, const_basic_block);
extern bool maybe_hot_edge_p (edge);
extern bool probably_never_executed_bb_p (struct function *, const_basic_block);
extern bool probably_never_executed_edge_p (struct function *, edge);
extern bool optimize_function_for_size_p (struct function *);
extern bool optimize_function_for_speed_p (struct function *);
extern optimization_type function_optimization_type (struct function *);
extern bool optimize_bb_for_size_p (const_basic_block);
extern bool optimize_bb_for_speed_p (const_basic_block);
extern optimization_type bb_optimization_type (const_basic_block);
extern bool optimize_edge_for_size_p (edge);
extern bool optimize_edge_for_speed_p (edge);
extern bool optimize_insn_for_size_p (void);
extern bool optimize_insn_for_speed_p (void);
extern bool optimize_loop_for_size_p (class loop *);
extern bool optimize_loop_for_speed_p (class loop *);
extern bool optimize_loop_nest_for_speed_p (class loop *);
extern bool optimize_loop_nest_for_size_p (class loop *);
extern bool predictable_edge_p (edge);
extern void rtl_profile_for_bb (basic_block);
extern void rtl_profile_for_edge (edge);
extern void default_rtl_profile (void);
extern bool rtl_predicted_by_p (const_basic_block, enum br_predictor);
extern bool gimple_predicted_by_p (const_basic_block, enum br_predictor);
extern bool edge_probability_reliable_p (const_edge);
extern bool br_prob_note_reliable_p (const_rtx);
extern void predict_insn_def (rtx_insn *, enum br_predictor, enum prediction);
extern void rtl_predict_edge (edge, enum br_predictor, int);
extern void gimple_predict_edge (edge, enum br_predictor, int);
extern void remove_predictions_associated_with_edge (edge);
extern void predict_edge_def (edge, enum br_predictor, enum prediction);
extern void invert_br_probabilities (rtx);
extern void guess_outgoing_edge_probabilities (basic_block);
extern void tree_guess_outgoing_edge_probabilities (basic_block);
extern void tree_estimate_probability (bool);
extern void handle_missing_profiles (void);
extern bool update_max_bb_count (void);
extern bool expensive_function_p (int);
extern void estimate_bb_frequencies (bool);
extern void compute_function_frequency (void);
extern tree build_predict_expr (enum br_predictor, enum prediction);
extern const char *predictor_name (enum br_predictor);
extern void rebuild_frequencies (void);
extern void report_predictor_hitrates (void);
extern void force_edge_cold (edge, bool);
extern void propagate_unlikely_bbs_forward (void);

extern void add_reg_br_prob_note (rtx_insn *, profile_probability);


extern void warn_function_cold (tree);
# 45 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h" 2


class edge_def {
public:

  basic_block src;
  basic_block dest;


  union edge_def_insns {
    gimple_seq g;
    rtx_insn *r;
  } insns;


  void * aux;


  location_t goto_locus;



  unsigned int dest_idx;

  int flags;
  profile_probability probability;


  inline profile_count count () const;
};



enum cfg_edge_flags {
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cfg-flags.def" 1
# 111 "/home/giulianob/gcc_git_gnu/gcc/gcc/cfg-flags.def"
EDGE_FALLTHRU = 1 << 0 ,



EDGE_ABNORMAL = 1 << 1 ,





EDGE_ABNORMAL_CALL = 1 << 2 ,




EDGE_EH = 1 << 3 ,




EDGE_PRESERVE = 1 << 4 ,




EDGE_FAKE = 1 << 5 ,



EDGE_DFS_BACK = 1 << 6 ,


EDGE_IRREDUCIBLE_LOOP = 1 << 7 ,



EDGE_TRUE_VALUE = 1 << 8 ,



EDGE_FALSE_VALUE = 1 << 9 ,



EDGE_EXECUTABLE = 1 << 10 ,



EDGE_CROSSING = 1 << 11 ,




EDGE_SIBCALL = 1 << 12 ,



EDGE_CAN_FALLTHRU = 1 << 13 ,



EDGE_LOOP_EXIT = 1 << 14 ,


EDGE_TM_UNINSTRUMENTED = 1 << 15 ,


EDGE_TM_ABORT = 1 << 16 ,




EDGE_IGNORE = 1 << 17 ,
# 59 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h" 2
  LAST_CFG_EDGE_FLAG
};
# 72 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h"
struct rtl_bb_info {


  rtx_insn *end_;



  rtx_insn *header_;
  rtx_insn *footer_;
};

struct gimple_bb_info {

  gimple_seq seq;


  gimple_seq phi_nodes;
};
# 117 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h"
struct basic_block_def {

  vec<edge, va_gc> *preds;
  vec<edge, va_gc> *succs;


  void * aux;


  class loop *loop_father;


  struct et_node * dom[2];


  basic_block prev_bb;
  basic_block next_bb;

  union basic_block_il_dependent {
      struct gimple_bb_info gimple;
      struct {
        rtx_insn *head_;
        struct rtl_bb_info * rtl;
      } x;
    } il;


  int flags;


  int index;


  profile_count count;




  int discriminator;
};




typedef int __assert_gimple_bb_smaller_rtl_bb
              [(int) sizeof (struct rtl_bb_info)
               - (int) sizeof (struct gimple_bb_info)];






enum cfg_bb_flags
{
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cfg-flags.def" 1
# 45 "/home/giulianob/gcc_git_gnu/gcc/gcc/cfg-flags.def"
BB_NEW = 1 << 0 ,



BB_REACHABLE = 1 << 1 ,


BB_IRREDUCIBLE_LOOP = 1 << 2 ,


BB_SUPERBLOCK = 1 << 3 ,



BB_DISABLE_SCHEDULE = 1 << 4 ,


BB_HOT_PARTITION = 1 << 5 ,


BB_COLD_PARTITION = 1 << 6 ,


BB_DUPLICATED = 1 << 7 ,


BB_NON_LOCAL_GOTO_TARGET = 1 << 8 ,


BB_RTL = 1 << 9 ,



BB_FORWARDER_BLOCK = 1 << 10 ,



BB_NONTHREADABLE_BLOCK = 1 << 11 ,




BB_MODIFIED = 1 << 12 ,


BB_VISITED = 1 << 13 ,



BB_IN_TRANSACTION = 1 << 14 ,
# 173 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h" 2
  LAST_CFG_BB_FLAG
};
# 320 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h"
static inline bool
single_succ_p (const_basic_block bb)
{
  return vec_safe_length (bb->succs) == 1;
}



static inline bool
single_pred_p (const_basic_block bb)
{
  return vec_safe_length (bb->preds) == 1;
}




static inline edge
single_succ_edge (const_basic_block bb)
{
  ((void)(!(single_succ_p (bb)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h", 340, __FUNCTION__), 0 : 0));
  return (*(bb)->succs)[(0)];
}




static inline edge
single_pred_edge (const_basic_block bb)
{
  ((void)(!(single_pred_p (bb)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h", 350, __FUNCTION__), 0 : 0));
  return (*(bb)->preds)[(0)];
}




static inline basic_block
single_succ (const_basic_block bb)
{
  return single_succ_edge (bb)->dest;
}




static inline basic_block
single_pred (const_basic_block bb)
{
  return single_pred_edge (bb)->src;
}



struct edge_iterator {
  unsigned index;
  vec<edge, va_gc> **container;
};

static inline vec<edge, va_gc> *
ei_container (edge_iterator i)
{
  ((void)(!(i.container) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h", 382, __FUNCTION__), 0 : 0));
  return *i.container;
}





static inline edge_iterator
ei_start_1 (vec<edge, va_gc> **ev)
{
  edge_iterator i;

  i.index = 0;
  i.container = ev;

  return i;
}



static inline edge_iterator
ei_last_1 (vec<edge, va_gc> **ev)
{
  edge_iterator i;

  i.index = vec_safe_length (*ev) - 1;
  i.container = ev;

  return i;
}


static inline bool
ei_end_p (edge_iterator i)
{
  return (i.index == vec_safe_length (ei_container (i)));
}



static inline bool
ei_one_before_end_p (edge_iterator i)
{
  return (i.index + 1 == vec_safe_length (ei_container (i)));
}


static inline void
ei_next (edge_iterator *i)
{
  ((void)(!(i->index < vec_safe_length (ei_container (*i))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h", 433, __FUNCTION__), 0 : 0));
  i->index++;
}


static inline void
ei_prev (edge_iterator *i)
{
  ((void)(!(i->index > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h", 441, __FUNCTION__), 0 : 0));
  i->index--;
}


static inline edge
ei_edge (edge_iterator i)
{
  return (*ei_container (i))[(i.index)];
}




static inline edge
ei_safe_edge (edge_iterator i)
{
  return !ei_end_p (i) ? ei_edge (i) : nullptr;
}





static inline bool
ei_cond (edge_iterator ei, edge *p)
{
  if (!ei_end_p (ei))
    {
      *p = ei_edge (ei);
      return 1;
    }
  else
    {
      *p = nullptr;
      return 0;
    }
}
# 516 "/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h"
static inline bool
bb_in_transaction (basic_block bb)
{
  return bb->flags & BB_IN_TRANSACTION;
}


static inline bool
bb_has_eh_pred (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->preds))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    {
      if (e->flags & EDGE_EH)
 return true;
    }
  return false;
}


static inline bool
bb_has_abnormal_pred (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->preds))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    {
      if (e->flags & EDGE_ABNORMAL)
 return true;
    }
  return false;
}


static inline edge
find_fallthru_edge (vec<edge, va_gc> *edges)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((edges))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    if (e->flags & EDGE_FALLTHRU)
      break;

  return e;
}



static inline void
check_probability (int prob)
{
  ((void)(!(prob >= 0 && prob <= 10000) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/basic-block.h", 571, __FUNCTION__), 0 : 0));
}




static inline int
combine_probabilities (int prob1, int prob2)
{
  check_probability (prob1);
  check_probability (prob2);
  return (((prob1 * prob2) + (10000) / 2) / (10000));
}





static inline gcov_type
apply_scale (gcov_type freq, gcov_type scale)
{
  return (((freq * scale) + (10000) / 2) / (10000));
}



static inline gcov_type
apply_probability (gcov_type freq, int prob)
{
  check_probability (prob);
  return apply_scale (freq, prob);
}



static inline int
inverse_probability (int prob1)
{
  check_probability (prob1);
  return 10000 - prob1;
}



static inline bool
has_abnormal_or_eh_outgoing_edge_p (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->succs))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    if (e->flags & (EDGE_ABNORMAL | EDGE_EH))
      return true;

  return false;
}




static inline bool
has_abnormal_call_or_eh_pred_edge_p (basic_block bb)
{
  edge e;
  edge_iterator ei;

  for ((ei) = ei_start_1 (&((bb->preds))); ei_cond ((ei), &(e)); ei_next (&(ei)))
    if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))
      return true;

  return false;
}


inline profile_count edge_def::count () const
{
  return src->count.apply_probability (probability);
}
# 46 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 1
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 1
# 111 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 112 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 2
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
extern "C" {


struct _obstack_chunk
{
  char *limit;
  struct _obstack_chunk *prev;
  char contents[4];
};

struct obstack
{
  size_t chunk_size;
  struct _obstack_chunk *chunk;
  char *object_base;
  char *next_free;
  char *chunk_limit;
  union
  {
    size_t i;
    void *p;
  } temp;
  size_t alignment_mask;


  union
  {
    void *(*plain) (size_t);
    void *(*extra) (void *, size_t);
  } chunkfun;
  union
  {
    void (*plain) (void *);
    void (*extra) (void *, void *);
  } freefun;

  void *extra_arg;
  unsigned use_extra_arg : 1;
  unsigned maybe_empty_object : 1;



  unsigned alloc_failed : 1;


};



extern void _obstack_newchunk (struct obstack *, size_t);
extern void _obstack_free (struct obstack *, void *);
extern int _obstack_begin (struct obstack *,
                           size_t, size_t,
                           void *(*) (size_t), void (*) (void *));
extern int _obstack_begin_1 (struct obstack *,
                             size_t, size_t,
                             void *(*) (void *, size_t),
                             void (*) (void *, void *), void *);
extern size_t _obstack_memory_used (struct obstack *)
  
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 3 4
 __attribute__ ((__pure__))
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
                   ;






extern void (*obstack_alloc_failed_handler) (void);


extern int obstack_exit_failure;
# 532 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
}
# 213 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 2



class bitmap_usage: public mem_usage
{
public:

  bitmap_usage (): m_nsearches (0), m_search_iter (0) {}

  bitmap_usage (size_t allocated, size_t times, size_t peak,
      uint64_t nsearches, uint64_t search_iter)
    : mem_usage (allocated, times, peak),
    m_nsearches (nsearches), m_search_iter (search_iter) {}


  bitmap_usage
  operator+ (const bitmap_usage &second)
  {
    return bitmap_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_nsearches + second.m_nsearches,
        m_search_iter + second.m_search_iter);
  }


  inline void
  dump (mem_location *loc, const mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
            stderr
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
                  , "%-48s " "%" "9" 
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
                             "l" "u" 
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
                             "%c" ":%5.1f%%"
      "%" "9" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
     "l" "u" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
     "%c" "%" "9" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
              "l" "u" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
              "%c" ":%5.1f%%"
      "%" "11" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
     "l" "u" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
     "%c" "%" "11" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
               "l" "u" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
               "%c" "%10s\n",
      location_string, (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)(((m_peak) < 10 * 1024 ? (m_peak) : ((m_peak) < 10 * (1024 * 1024) ? (m_peak) / 1024 : (m_peak) / (1024 * 1024)))), ((m_peak) < 10 * 1024 ? ' ' : ((m_peak) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_times, total.m_times),
      (uint64_t)(((m_nsearches) < 10 * 1024 ? (m_nsearches) : ((m_nsearches) < 10 * (1024 * 1024) ? (m_nsearches) / 1024 : (m_nsearches) / (1024 * 1024)))), ((m_nsearches) < 10 * 1024 ? ' ' : ((m_nsearches) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_search_iter) < 10 * 1024 ? (m_search_iter) : ((m_search_iter) < 10 * (1024 * 1024) ? (m_search_iter) / 1024 : (m_search_iter) / (1024 * 1024)))), ((m_search_iter) < 10 * 1024 ? ' ' : ((m_search_iter) < 10 * (1024 * 1024) ? 'k' : 'M')),
      loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 261 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
            stderr
# 261 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
                  , "%-48s %11s%16s%17s%12s%12s%10s\n", name, "Leak", "Peak",
      "Times", "N searches", "Search iter", "Type");
  }


  uint64_t m_nsearches;

  uint64_t m_search_iter;
};


extern mem_alloc_description<bitmap_usage> bitmap_mem_desc;



typedef unsigned long BITMAP_WORD;
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
struct bitmap_obstack {
  struct bitmap_element *elements;
  bitmap_head *heads;
  struct obstack obstack;
};
# 310 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
struct bitmap_element {


  struct bitmap_element *next;


  struct bitmap_element *prev;

  unsigned int indx;

  BITMAP_WORD bits[((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u))];
};




class bitmap_head {
public:
  static bitmap_obstack crashme;

  constexpr bitmap_head()
    : indx (0), tree_form (false), padding (0), alloc_descriptor (0), first (nullptr),
      current (nullptr), obstack (&crashme)
  {}

  unsigned int indx;


  unsigned tree_form: 1;

  unsigned padding: 2;

  unsigned alloc_descriptor: 29;


  bitmap_element *first;

  bitmap_element * current;

  bitmap_obstack * obstack;


  void dump ();




  unsigned *get_descriptor ()
  {
    return (unsigned *)(ptrdiff_t)(alloc_descriptor << 3);
  }
};


extern bitmap_element bitmap_zero_bits;
extern bitmap_obstack bitmap_default_obstack;


void bitmap_list_view (bitmap);
void bitmap_tree_view (bitmap);


extern void bitmap_clear (bitmap);


extern void bitmap_copy (bitmap, const_bitmap);


extern void bitmap_move (bitmap, bitmap);


extern bool bitmap_equal_p (const_bitmap, const_bitmap);


extern bool bitmap_intersect_p (const_bitmap, const_bitmap);



extern bool bitmap_intersect_compl_p (const_bitmap, const_bitmap);


inline bool bitmap_empty_p (const_bitmap map)
{
  return !map->first;
}


extern bool bitmap_single_bit_set_p (const_bitmap);


extern unsigned long bitmap_count_bits (const_bitmap);


extern unsigned long bitmap_count_unique_bits (const_bitmap, const_bitmap);





extern void bitmap_and (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_and_into (bitmap, const_bitmap);
extern bool bitmap_and_compl (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_and_compl_into (bitmap, const_bitmap);

extern void bitmap_compl_and_into (bitmap, const_bitmap);
extern void bitmap_clear_range (bitmap, unsigned int, unsigned int);
extern void bitmap_set_range (bitmap, unsigned int, unsigned int);
extern bool bitmap_ior (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_ior_into (bitmap, const_bitmap);
extern bool bitmap_ior_into_and_free (bitmap, bitmap *);
extern void bitmap_xor (bitmap, const_bitmap, const_bitmap);
extern void bitmap_xor_into (bitmap, const_bitmap);


extern bool bitmap_ior_and_into (bitmap DST, const_bitmap B, const_bitmap C);

extern bool bitmap_ior_and_compl (bitmap DST, const_bitmap A,
      const_bitmap B, const_bitmap C);

extern bool bitmap_ior_and_compl_into (bitmap A,
           const_bitmap B, const_bitmap C);


extern bool bitmap_clear_bit (bitmap, int);


extern bool bitmap_set_bit (bitmap, int);


extern int bitmap_bit_p (const_bitmap, int);


extern void debug_bitmap (const_bitmap);
extern void debug_bitmap_file (FILE *, const_bitmap);


extern void bitmap_print (FILE *, const_bitmap, const char *, const char *);


extern void bitmap_obstack_initialize (bitmap_obstack *);
extern void bitmap_obstack_release (bitmap_obstack *);
extern void bitmap_register (bitmap );
extern void dump_bitmap_statistics (void);




static inline void
bitmap_initialize (bitmap head, bitmap_obstack *obstack )
{
  head->first = head->current = nullptr;
  head->indx = head->tree_form = 0;
  head->padding = 0;
  head->alloc_descriptor = 0;
  head->obstack = obstack;
  if (0)
    bitmap_register (head );
}




static inline void
bitmap_release (bitmap head)
{
  bitmap_clear (head);


  head->obstack = &bitmap_head::crashme;
}


extern bitmap bitmap_alloc (bitmap_obstack *obstack );

extern bitmap bitmap_gc_alloc ();

extern void bitmap_obstack_free (bitmap);


inline void dump_bitmap (FILE *file, const_bitmap map)
{
  bitmap_print (file, map, "", "\n");
}
extern void debug (const bitmap_head &ref);
extern void debug (const bitmap_head *ptr);

extern unsigned bitmap_first_set_bit (const_bitmap);
extern unsigned bitmap_last_set_bit (const_bitmap);


extern hashval_t bitmap_hash (const_bitmap);







struct bitmap_iterator
{

  bitmap_element *elt1;


  bitmap_element *elt2;


  unsigned word_no;




  BITMAP_WORD bits;
};




static inline void
bmp_iter_set_init (bitmap_iterator *bi, const_bitmap map,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map->first;
  bi->elt2 = nullptr;

  ((void)(!(!map->tree_form) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 535, __FUNCTION__), 0 : 0));


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));


  bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 8 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static inline void
bmp_iter_and_init (bitmap_iterator *bi, const_bitmap map1, const_bitmap map2,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;

  ((void)(!(!map1->tree_form && !map2->tree_form) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 579, __FUNCTION__), 0 : 0));



  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt2 = nullptr;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (1)
    {
      if (!bi->elt2)
 {
   bi->elt1 = bi->elt2 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt2->indx >= bi->elt1->indx)
 break;
      bi->elt2 = bi->elt2->next;
    }


  if (bi->elt1->indx == bi->elt2->indx)
    {


      if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));

      bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
      bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
      bi->bits >>= start_bit % (8 * 8 * 1u);
    }
  else
    {


      bi->word_no = ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) - 1;
      bi->bits = 0;
    }





  start_bit += !bi->bits;

  *bit_no = start_bit;
}



static inline void
bmp_iter_and_compl_init (bitmap_iterator *bi,
    const_bitmap map1, const_bitmap map2,
    unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;

  ((void)(!(!map1->tree_form && !map2->tree_form) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 649, __FUNCTION__), 0 : 0));


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
    bi->elt2 = bi->elt2->next;



  if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));

  bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  if (bi->elt2 && bi->elt1->indx == bi->elt2->indx)
    bi->bits &= ~bi->elt2->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 8 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static inline void
bmp_iter_next (bitmap_iterator *bi, unsigned *bit_no)
{
  bi->bits >>= 1;
  *bit_no += 1;
}



static inline void
bmp_iter_next_bit (bitmap_iterator * bi, unsigned *bit_no)
{

  {
    unsigned int n = __builtin_ctzl (bi->bits);
    ((void)(!(sizeof (unsigned long) == sizeof (BITMAP_WORD)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 707, __FUNCTION__), 0 : 0));
    bi->bits >>= n;
    *bit_no += n;
  }







}





static inline bool
bmp_iter_set (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 755, __FUNCTION__), 0 : 0));


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return false;
      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}





static inline bool
bmp_iter_and (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      do
 {

   ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 804, __FUNCTION__), 0 : 0));



   do
     {
       bi->elt1 = bi->elt1->next;
       if (!bi->elt1)
  return false;
     }
   while (bi->elt1->indx < bi->elt2->indx);


   ((void)(!(bi->elt2->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 817, __FUNCTION__), 0 : 0));



   while (bi->elt2->indx < bi->elt1->indx)
     {
       bi->elt2 = bi->elt2->next;
       if (!bi->elt2)
  return false;
     }
 }
      while (bi->elt1->indx != bi->elt2->indx);

      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}





static inline bool
bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->elt2 && bi->elt2->indx == bi->elt1->indx)
     bi->bits &= ~bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 872, __FUNCTION__), 0 : 0));


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return false;


      ((void)(!(! bi->elt2 || bi->elt2->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 880, __FUNCTION__), 0 : 0));


      while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
 bi->elt2 = bi->elt2->next;

      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}
# 939 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
class auto_bitmap
{
 public:
  auto_bitmap () { bitmap_initialize (&m_bits, &bitmap_default_obstack); }
  explicit auto_bitmap (bitmap_obstack *o) { bitmap_initialize (&m_bits, o); }
  ~auto_bitmap () { bitmap_clear (&m_bits); }

  operator bitmap () { return &m_bits; }

 private:

  auto_bitmap (const auto_bitmap &);
  auto_bitmap &operator = (const auto_bitmap &);

  auto_bitmap (auto_bitmap &&);
  auto_bitmap &operator = (auto_bitmap &&);


  bitmap_head m_bits;
};


template<typename T, typename Traits = array_traits<T> >
class base_bitmap_view
{
public:
  typedef typename Traits::element_type array_element_type;

  base_bitmap_view (const T &, bitmap_element *);
  operator const_bitmap () const { return &m_head; }

private:
  base_bitmap_view (const base_bitmap_view &);

  bitmap_head m_head;
};




template<typename T, typename Traits>
class bitmap_view<T, Traits, true> : public base_bitmap_view<T, Traits>
{
public:
  bitmap_view (const T &array)
    : base_bitmap_view<T, Traits> (array, m_bitmap_elements) {}

private:

  static const size_t num_bitmap_elements
    = (((8 * sizeof (typename Traits::element_type) * Traits::constant_size) + ((((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u))) - 1) / ((((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u))))


                             ;
  bitmap_element m_bitmap_elements[num_bitmap_elements];
};




template<typename T, typename Traits>
base_bitmap_view<T, Traits>::base_bitmap_view (const T &array,
            bitmap_element *bitmap_elements)
{
  m_head.obstack = nullptr;



  const size_t array_element_bits = 8 * sizeof (array_element_type);
  static_assert (((((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)) % array_element_bits == 0), "BITMAP_ELEMENT_ALL_BITS % array_element_bits == 0");
  size_t array_step = (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)) / array_element_bits;
  size_t array_size = Traits::size (array);





  const array_element_type *array_elements = Traits::base (array);
  unsigned int indx = 0;
  for (size_t array_base = 0;
       array_base < array_size;
       array_base += array_step, indx += 1)
    {

      unsigned int array_count
 = ((__builtin_constant_p (array_size % array_step == 0) && (array_size % array_step == 0))
    ? array_step : ((array_step) < (array_size - array_base) ? (array_step) : (array_size - array_base)));


      array_element_type ior = array_elements[array_base];
      for (size_t i = 1; i < array_count; ++i)
 ior |= array_elements[array_base + i];
      if (ior == 0)
 continue;


      bitmap_element *bitmap_element = bitmap_elements++;
      if (m_head.current)
 m_head.current->next = bitmap_element;
      else
 m_head.first = bitmap_element;
      bitmap_element->prev = m_head.current;
      bitmap_element->next = nullptr;
      bitmap_element->indx = indx;
      m_head.current = bitmap_element;
      m_head.indx = indx;


      if (array_element_bits < (8 * 8 * 1u))
 {


   size_t array_i = array_base;
   for (unsigned int word_i = 0; word_i < ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
        ++word_i)
     {
       BITMAP_WORD word = 0;
       for (unsigned int shift = 0;
     shift < (8 * 8 * 1u) && array_i < array_size;
     shift += array_element_bits)
  word |= array_elements[array_i++] << shift;
       bitmap_element->bits[word_i] = word;
     }
 }
      else
 {


   unsigned int word_i = 0;
   for (unsigned int i = 0; i < array_count; ++i)
     for (unsigned int shift = 0; shift < array_element_bits;
   shift += (8 * 8 * 1u))
       bitmap_element->bits[word_i++]
  = array_elements[array_base + i] >> shift;
   while (word_i < ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
     bitmap_element->bits[word_i++] = 0;
 }
    }
}
# 47 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/regset.h" 1
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/regset.h"
typedef bitmap_head regset_head;


typedef bitmap regset;
# 88 "/home/giulianob/gcc_git_gnu/gcc/gcc/regset.h"
extern void reg_set_to_hard_reg_set (HARD_REG_SET *, const_bitmap);






typedef bitmap_iterator reg_set_iterator;
# 115 "/home/giulianob/gcc_git_gnu/gcc/gcc/regset.h"
extern bitmap_obstack reg_obstack;


extern void dump_regset (regset, FILE *);
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/memory-block.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/memory-block.h"
class memory_block_pool
{
public:

  static const size_t block_size = 64 * 1024;

  static const size_t freelist_size = 1024 * 1024 / block_size;

  memory_block_pool ();

  static inline void *allocate () __attribute__ ((__malloc__));
  static inline void release (void *);
  static void trim (int nblocks = freelist_size);
  void reduce_free_list (int);

private:

  static memory_block_pool instance;

  struct block_list
  {
    block_list *m_next;
  };


  block_list *m_blocks;
};


inline void *
memory_block_pool::allocate ()
{
  if (instance.m_blocks == nullptr)
    return ((char *) xmalloc (sizeof (char) * (block_size)));

  void *result = instance.m_blocks;
  instance.m_blocks = instance.m_blocks->m_next;
  ;
  return result;
}


inline void
memory_block_pool::release (void *uncast_block)
{
  block_list *block = new (uncast_block) block_list;
  block->m_next = instance.m_blocks;
  instance.m_blocks = block;

 


                             ;
}

extern void *mempool_obstack_chunk_alloc (size_t) __attribute__ ((__malloc__));
extern void mempool_obstack_chunk_free (void *);
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 2
# 1 "./options.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 2

extern void dump_alloc_pool_statistics (void);


extern bool after_memory_report;

typedef unsigned long ALLOC_POOL_ID_TYPE;


extern ALLOC_POOL_ID_TYPE last_id;


class pool_usage: public mem_usage
{
public:

  pool_usage (): m_element_size (0), m_pool_name ("") {}

  pool_usage (size_t allocated, size_t times, size_t peak,
       size_t instances, size_t element_size,
       const char *pool_name)
    : mem_usage (allocated, times, peak, instances),
      m_element_size (element_size),
      m_pool_name (pool_name) {}


  pool_usage
  operator+ (const pool_usage &second)
  {
    return pool_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_instances + second.m_instances,
        m_element_size, m_pool_name);
  }


  inline void
  dump (mem_location *loc, const mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
            stderr
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                  , "%-32s%-48s " "%" "5" 
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                                  "l" "u" 
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                                  "%c" "%" "9" 
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                                          "l" "u" 
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                                          "%c" ":%5.1f%%"
      "%" "9" 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
     "l" "u" 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
     "%c" "%" "9" 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
             "l" "u" 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
             "%c" ":%5.1f%%%12" 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                                   "l" "u" 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                                          "\n",
      m_pool_name, location_string,
      (uint64_t)(((m_instances) < 10 * 1024 ? (m_instances) : ((m_instances) < 10 * (1024 * 1024) ? (m_instances) / 1024 : (m_instances) / (1024 * 1024)))), ((m_instances) < 10 * 1024 ? ' ' : ((m_instances) < 10 * (1024 * 1024) ? 'k' : 'M')),
      (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)(((m_peak) < 10 * 1024 ? (m_peak) : ((m_peak) < 10 * (1024 * 1024) ? (m_peak) / 1024 : (m_peak) / (1024 * 1024)))), ((m_peak) < 10 * 1024 ? ' ' : ((m_peak) < 10 * (1024 * 1024) ? 'k' : 'M')),
      (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_times, total.m_times),
      (uint64_t)m_element_size);

    free (location_string);
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 85 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
            stderr
# 85 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                  , "%-32s%-48s %6s%11s%16s%17s%12s\n", "Pool name", name,
      "Pools", "Leak", "Peak", "Times", "Elt size");
  }


  inline void
  dump_footer ()
  {
    fprintf (
# 93 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
            stderr
# 93 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                  , "%s" "%" "82" 
# 93 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                         "l" "u" 
# 93 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                         "%c" "%" "10" 
# 93 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                                  "l" "u" 
# 93 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                                  "%c" "\n", "Total",
      (uint64_t)(((m_instances) < 10 * 1024 ? (m_instances) : ((m_instances) < 10 * (1024 * 1024) ? (m_instances) / 1024 : (m_instances) / (1024 * 1024)))), ((m_instances) < 10 * 1024 ? ' ' : ((m_instances) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')));
  }


  size_t m_element_size;

  const char *m_pool_name;
};

extern mem_alloc_description<pool_usage> pool_allocator_usage;
# 140 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
template <typename TBlockAllocator>
class base_pool_allocator
{
public:

  base_pool_allocator (const char *name, size_t size );
  ~base_pool_allocator ();
  void release ();
  void release_if_empty ();
  void *allocate () __attribute__ ((__malloc__));
  void remove (void *object);
  size_t num_elts_current ();

private:
  struct allocation_pool_list
  {
    allocation_pool_list *next;
  };


  void initialize ();

  struct allocation_object
  {





    union
      {

 char data[1];





 char *align_p;
 int64_t align_i;
      } u;
# 192 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
    static inline void*
    get_data (void *instance_ptr)
    {
      return (void*)(((allocation_object *) instance_ptr)->u.data);
    }
  };


  static inline size_t
  align_eight (size_t x)
  {
    return (((x+7) >> 3) << 3);
  }

  const char *m_name;
  ALLOC_POOL_ID_TYPE m_id;
  size_t m_elts_per_block;



  allocation_pool_list *m_returned_free_list;



  char* m_virgin_free_list;



  size_t m_virgin_elts_remaining;

  size_t m_elts_allocated;

  size_t m_elts_free;

  size_t m_blocks_allocated;

  allocation_pool_list *m_block_list;

  size_t m_elt_size;

  size_t m_size;

  bool m_initialized;

  mem_location m_location;
};

template <typename TBlockAllocator>
inline
base_pool_allocator <TBlockAllocator>::base_pool_allocator (
    const char *name, size_t size ):
  m_name (name), m_id (0), m_elts_per_block (0), m_returned_free_list (nullptr),
  m_virgin_free_list (nullptr), m_virgin_elts_remaining (0), m_elts_allocated (0),
  m_elts_free (0), m_blocks_allocated (0), m_block_list (nullptr), m_elt_size (0),
  m_size (size), m_initialized (false),
  m_location (ALLOC_POOL_ORIGIN, false ) {}



template <typename TBlockAllocator>
inline void
base_pool_allocator <TBlockAllocator>::initialize ()
{
  ((void)(!(!m_initialized) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h", 255, __FUNCTION__), 0 : 0));
  m_initialized = true;

  size_t size = m_size;

  ((void)(!(m_name) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h", 260, __FUNCTION__), 0 : 0));
  ((void)(!(m_size) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h", 261, __FUNCTION__), 0 : 0));


  if (size < sizeof (allocation_pool_list*))
    size = sizeof (allocation_pool_list*);


  size = align_eight (size);


  size += 
# 271 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
         __builtin_offsetof (
# 271 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
         allocation_object
# 271 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
         , 
# 271 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
         u.data
# 271 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
         )
# 271 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                                             ;

  m_elt_size = size;

  if (0)
    {
      pool_usage *u = pool_allocator_usage.register_descriptor
 (this, new mem_location (m_location));

      u->m_element_size = m_elt_size;
      u->m_pool_name = m_name;
    }


  size_t header_size = align_eight (sizeof (allocation_pool_list));

  m_elts_per_block = (TBlockAllocator::block_size - header_size) / size;
  ((void)(!(m_elts_per_block != 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h", 288, __FUNCTION__), 0 : 0));



  last_id++;
  if (last_id == 0)
    last_id++;

  m_id = last_id;
}


template <typename TBlockAllocator>
inline void
base_pool_allocator <TBlockAllocator>::release ()
{
  if (!m_initialized)
    return;

  allocation_pool_list *block, *next_block;


  for (block = m_block_list; block != nullptr; block = next_block)
    {
      next_block = block->next;
      TBlockAllocator::release (block);
    }

  if (0 && !after_memory_report)
    {
      pool_allocator_usage.release_instance_overhead
 (this, (m_elts_allocated - m_elts_free) * m_elt_size);
    }

  m_returned_free_list = nullptr;
  m_virgin_free_list = nullptr;
  m_virgin_elts_remaining = 0;
  m_elts_allocated = 0;
  m_elts_free = 0;
  m_blocks_allocated = 0;
  m_block_list = nullptr;
}

template <typename TBlockAllocator>
inline void
base_pool_allocator <TBlockAllocator>::release_if_empty ()
{
  if (m_elts_free == m_elts_allocated)
    release ();
}

template <typename TBlockAllocator>
inline base_pool_allocator <TBlockAllocator>::~base_pool_allocator ()
{
  release ();
}


template <typename TBlockAllocator>
inline void*
base_pool_allocator <TBlockAllocator>::allocate ()
{
  if (!m_initialized)
    initialize ();

  allocation_pool_list *header;




  if (0)
    {
      pool_allocator_usage.register_instance_overhead (m_elt_size, this);
    }






  if (!m_returned_free_list)
    {
      char *block;
      if (!m_virgin_elts_remaining)
 {
   allocation_pool_list *block_header;


   block = reinterpret_cast<char *> (TBlockAllocator::allocate ());
   block_header = new (block) allocation_pool_list;
   block += align_eight (sizeof (allocation_pool_list));


   block_header->next = m_block_list;
   m_block_list = block_header;


   m_virgin_free_list = block;
   m_virgin_elts_remaining = m_elts_per_block;



   m_elts_allocated += m_elts_per_block;
   m_elts_free += m_elts_per_block;
   m_blocks_allocated += 1;
 }



      block = m_virgin_free_list;
      header = (allocation_pool_list*) allocation_object::get_data (block);
      header->next = nullptr;





      ;
      m_returned_free_list = header;
      m_virgin_free_list += m_elt_size;
      m_virgin_elts_remaining--;

    }


  header = m_returned_free_list;
  ;
  m_returned_free_list = header->next;
  m_elts_free--;





  ;

  return (void *)(header);
}


template <typename TBlockAllocator>
inline void
base_pool_allocator <TBlockAllocator>::remove (void *object)
{
  int size = m_elt_size - 
# 432 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                         __builtin_offsetof (
# 432 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                         allocation_object
# 432 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                         , 
# 432 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                         u.data
# 432 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h" 3 4
                         )
# 432 "/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h"
                                                             ;

  if (flag_checking)
    {
      ((void)(!(m_initialized) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h", 436, __FUNCTION__), 0 : 0));
      ((void)(!(object && m_elts_free < m_elts_allocated) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/alloc-pool.h", 437, __FUNCTION__), 0 : 0))

                                      ;





      memset (object, 0xaf, size);
    }






  allocation_pool_list *header = new (object) allocation_pool_list;
  header->next = m_returned_free_list;
  m_returned_free_list = header;
  ;
  m_elts_free++;

  if (0)
    {
      pool_allocator_usage.release_instance_overhead (this, m_elt_size);
    }
}



template <typename TBlockAllocator>
inline size_t
base_pool_allocator <TBlockAllocator>::num_elts_current ()
{
  return m_elts_allocated - m_elts_free;
}




typedef base_pool_allocator <memory_block_pool> pool_allocator;


template <typename T>
class object_allocator
{
public:

  object_allocator (const char *name ):
    m_allocator (name, sizeof (T) ) {}

  inline void
  release ()
  {
    m_allocator.release ();
  }

  inline void release_if_empty ()
  {
    m_allocator.release_if_empty ();
  }




  inline T *
  allocate () __attribute__ ((__malloc__))
  {
    return ::new (m_allocator.allocate ()) T;
  }





  inline void *
  allocate_raw () __attribute__ ((__malloc__))
  {
    return m_allocator.allocate ();
  }

  inline void
  remove (T *object)
  {

    object->~T ();

    m_allocator.remove (object);
  }

  inline void
  remove_raw (void *object)
  {
    m_allocator.remove (object);
  }

  inline size_t
  num_elts_current ()
  {
    return m_allocator.num_elts_current ();
  }

private:
  pool_allocator m_allocator;
};







struct alloc_pool_descriptor
{

  unsigned long created;

  unsigned long allocated;

  unsigned long current;

  unsigned long peak;

  int elt_size;
};



template <typename T>
inline void *
operator new (size_t, object_allocator<T> &a)
{
  return a.allocate_raw ();
}


extern hash_map<const char *, alloc_pool_descriptor> *alloc_pool_hash;
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.h" 1
# 52 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.h"
struct timevar_time_def
{

  double user;



  double sys;


  double wall;


  size_t ggc_mem;
};






typedef enum
{
  TV_NONE,
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.def" 1
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.def"
TV_TOTAL,







TV_PHASE_SETUP,
TV_PHASE_PARSING,
TV_PHASE_DEFERRED,
TV_PHASE_LATE_PARSING_CLEANUPS,
TV_PHASE_OPT_GEN,
TV_PHASE_LATE_ASM,
TV_PHASE_STREAM_IN,
TV_PHASE_STREAM_OUT,
TV_PHASE_FINALIZE,


TV_NAME_LOOKUP,
TV_OVERLOAD,


TV_GC,


TV_DUMP,


TV_PCH_SAVE,
TV_PCH_CPP_SAVE,
TV_PCH_PTR_REALLOC,
TV_PCH_PTR_SORT,
TV_PCH_RESTORE,
TV_PCH_CPP_RESTORE,

TV_CGRAPH,
TV_CGRAPHOPT,
TV_CGRAPH_FUNC_EXPANSION,
TV_CGRAPH_IPA_PASSES,
TV_IPA_ODR,
TV_IPA_FNSUMMARY,
TV_IPA_UNREACHABLE,
TV_IPA_INHERITANCE,
TV_IPA_VIRTUAL_CALL,
TV_IPA_DEVIRT,
TV_IPA_CONSTANT_PROP,
TV_IPA_INLINING,
TV_IPA_FNSPLIT,
TV_IPA_COMDATS,
TV_IPA_OPT,
TV_IPA_LTO_DECOMPRESS,
TV_IPA_LTO_COMPRESS,
TV_IPA_LTO_OUTPUT,
TV_IPA_LTO_GIMPLE_IN,
TV_IPA_LTO_GIMPLE_OUT,
TV_IPA_LTO_DECL_IN,
TV_IPA_LTO_DECL_OUT,
TV_IPA_LTO_CTORS_IN,
TV_IPA_LTO_CTORS_OUT,
TV_IPA_LTO_CGRAPH_IO,
TV_IPA_LTO_DECL_MERGE,
TV_IPA_LTO_CGRAPH_MERGE,
TV_LTO,
TV_WHOPR_WPA,
TV_WHOPR_WPA_IO,
TV_WHOPR_PARTITIONING,
TV_WHOPR_LTRANS,
TV_IPA_REFERENCE,
TV_IPA_PROFILE,
TV_IPA_AUTOFDO,
TV_IPA_PURE_CONST,
TV_IPA_ICF,
TV_IPA_PTA,
TV_IPA_SRA,
TV_IPA_FREE_LANG_DATA,
TV_IPA_FREE_INLINE_SUMMARY,

TV_CFG,

TV_CLEANUP_CFG,
TV_CFG_VERIFY,
TV_DELETE_TRIVIALLY_DEAD,


TV_DF_SCAN,
TV_DF_MD,
TV_DF_RD,
TV_DF_LR,
TV_DF_LIVE,
TV_DF_MIR,
TV_DF_CHAIN,
TV_DF_WORD_LR,
TV_DF_NOTE,
TV_REG_STATS,

TV_ALIAS_ANALYSIS,
TV_ALIAS_STMT_WALK,
TV_REG_SCAN,
TV_REBUILD_JUMP,

TV_CPP,
TV_LEX,
TV_PARSE_GLOBAL,
TV_PARSE_STRUCT,
TV_PARSE_ENUM,
TV_PARSE_FUNC,
TV_PARSE_INLINE,
TV_PARSE_INMETH,
TV_TEMPLATE_INST,
TV_CONSTEXPR,
TV_CONSTRAINT_NORM,
TV_CONSTRAINT_SAT,
TV_CONSTRAINT_SUB,
TV_FLATTEN_INLINING,
TV_EARLY_INLINING,
TV_INLINE_PARAMETERS,
TV_INTEGRATION,
TV_TREE_GIMPLIFY,
TV_TREE_EH,
TV_TREE_CFG,
TV_TREE_CLEANUP_CFG,
TV_TREE_TAIL_MERGE,
TV_TREE_VRP,
TV_TREE_EARLY_VRP,
TV_TREE_COPY_PROP,
TV_FIND_REFERENCED_VARS,
TV_TREE_PTA,
TV_TREE_INSERT_PHI_NODES,
TV_TREE_SSA_REWRITE_BLOCKS,
TV_TREE_SSA_OTHER,
TV_TREE_SSA_INCREMENTAL,
TV_TREE_OPS,
TV_TREE_SSA_DOMINATOR_OPTS,
TV_TREE_SSA_THREAD_JUMPS,
TV_TREE_SRA,
TV_ISOLATE_ERRONEOUS_PATHS,
TV_TREE_CCP,
TV_TREE_SPLIT_EDGES,
TV_TREE_REASSOC,
TV_TREE_PRE,
TV_TREE_FRE,
TV_TREE_SINK,
TV_TREE_PHIOPT,
TV_TREE_BACKPROP,
TV_TREE_FORWPROP,
TV_TREE_PHIPROP,
TV_TREE_DCE,
TV_TREE_CD_DCE,
TV_TREE_CALL_CDCE,
TV_TREE_DSE,
TV_TREE_MERGE_PHI,
TV_TREE_LOOP,
TV_TREE_NOLOOP,
TV_TREE_LOOP_BOUNDS,
TV_LIM,
TV_LINTERCHANGE,
TV_TREE_LOOP_IVCANON,
TV_SCEV_CONST,
TV_TREE_LOOP_UNSWITCH,
TV_LOOP_SPLIT,
TV_LOOP_JAM,
TV_COMPLETE_UNROLL,
TV_TREE_PARALLELIZE_LOOPS,
TV_TREE_VECTORIZATION,
TV_TREE_SLP_VECTORIZATION,
TV_GRAPHITE,
TV_GRAPHITE_TRANSFORMS,
TV_GRAPHITE_DATA_DEPS,
TV_GRAPHITE_CODE_GEN,
TV_TREE_LOOP_DISTRIBUTION,
TV_CHECK_DATA_DEPS,
TV_TREE_PREFETCH,
TV_TREE_LOOP_IVOPTS,
TV_PREDCOM,
TV_TREE_CH,
TV_TREE_SSA_UNCPROP,
TV_TREE_NRV,
TV_TREE_COPY_RENAME,
TV_TREE_SSA_VERIFY,
TV_TREE_STMT_VERIFY,
TV_TREE_SWITCH_CONVERSION,
TV_TREE_SWITCH_LOWERING,
TV_TREE_RECIP,
TV_TREE_SINCOS,
TV_TREE_WIDEN_MUL,
TV_TRANS_MEM,
TV_TREE_STRLEN,
TV_CGRAPH_VERIFY,
TV_DOM_FRONTIERS,
TV_DOMINANCE,
TV_CONTROL_DEPENDENCES,
TV_OUT_OF_SSA,
TV_VAR_EXPAND,
TV_EXPAND,
TV_POST_EXPAND,
TV_VARCONST,
TV_LOWER_SUBREG,
TV_JUMP,
TV_FWPROP,
TV_CSE,
TV_DCE,
TV_DSE1,
TV_DSE2,
TV_LOOP,
TV_LOOP_INIT,
TV_LOOP_VERSIONING,
TV_LOOP_MOVE_INVARIANTS,
TV_LOOP_UNROLL,
TV_LOOP_DOLOOP,
TV_LOOP_FINI,
TV_CPROP,
TV_PRE,
TV_HOIST,
TV_LSM,
TV_TRACER,
TV_WEB,
TV_AUTO_INC_DEC,
TV_CSE2,
TV_BRANCH_PROB,
TV_COMBINE,
TV_IFCVT,
TV_MODE_SWITCH,
TV_SMS,
TV_LIVE_RANGE_SHRINKAGE,
TV_SCHED,
TV_EARLY_REMAT,
TV_IRA,
TV_LRA,
TV_LRA_ELIMINATE,
TV_LRA_INHERITANCE,
TV_LRA_CREATE_LIVE_RANGES,
TV_LRA_ASSIGN,
TV_LRA_COALESCE,
TV_LRA_REMAT,
TV_RELOAD,
TV_RELOAD_CSE_REGS,
TV_GCSE_AFTER_RELOAD,
TV_REE,
TV_THREAD_PROLOGUE_AND_EPILOGUE,
TV_IFCVT2,
TV_SPLIT_PATHS,
TV_COMBINE_STACK_ADJUST,
TV_PEEPHOLE2,
TV_RENAME_REGISTERS,
TV_SCHED_FUSION,
TV_CPROP_REGISTERS,
TV_SCHED2,
TV_MACH_DEP,
TV_DBR_SCHED,
TV_REORDER_BLOCKS,
TV_SHORTEN_BRANCH,
TV_REG_STACK,
TV_FINAL,
TV_VAROUT,
TV_SYMOUT,
TV_VAR_TRACKING,
TV_VAR_TRACKING_DATAFLOW,
TV_VAR_TRACKING_EMIT,
TV_TREE_IFCOMBINE,
TV_TREE_UNINIT,
TV_PLUGIN_INIT,
TV_PLUGIN_RUN,
TV_GIMPLE_SLSR,
TV_GIMPLE_STORE_MERGING,
TV_VTABLE_VERIFICATION,
TV_TREE_UBSAN,
TV_INITIALIZE_RTL,
TV_GIMPLE_LADDRESS,
TV_TREE_LOOP_IFCVT,


TV_EARLY_LOCAL,
TV_OPTIMIZE,
TV_REST_OF_COMPILATION,
TV_POSTRELOAD,
TV_LATE_COMPILATION,
TV_REMOVE_UNUSED,
TV_ADDRESS_TAKEN,
TV_TODO,
TV_VERIFY_LOOP_CLOSED,
TV_VERIFY_RTL_SHARING,
TV_REBUILD_FREQUENCIES,
TV_REPAIR_LOOPS,


TV_JIT_REPLAY,
TV_ASSEMBLE,
TV_LINK,
TV_LOAD,
TV_JIT_ACQUIRING_MUTEX,
TV_JIT_CLIENT_CODE,


TV_ANALYZER,
TV_ANALYZER_SUPERGRAPH,
TV_ANALYZER_STATE_PURGE,
TV_ANALYZER_PLAN,
TV_ANALYZER_SCC,
TV_ANALYZER_WORKLIST,
TV_ANALYZER_DUMP,
TV_ANALYZER_DIAGNOSTICS,
TV_ANALYZER_SHORTEST_PATHS,
# 77 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.h" 2
  TIMEVAR_LAST
}
timevar_id_t;




class timer;







extern timer *g_timer;


extern size_t timevar_ggc_mem_total;

extern void timevar_init (void);
extern void timevar_start (timevar_id_t);
extern void timevar_stop (timevar_id_t);
extern bool timevar_cond_start (timevar_id_t);
extern void timevar_cond_stop (timevar_id_t, bool);



class timer
{
 public:
  timer ();
  ~timer ();

  void start (timevar_id_t tv);
  void stop (timevar_id_t tv);
  void push (timevar_id_t tv);
  void pop (timevar_id_t tv);
  bool cond_start (timevar_id_t tv);
  void cond_stop (timevar_id_t tv);

  void push_client_item (const char *item_name);
  void pop_client_item ();

  void print (FILE *fp);

  const char *get_topmost_item_name () const;

 private:

  void validate_phases (FILE *fp) const;

  struct timevar_def;
  void push_internal (struct timevar_def *tv);
  void pop_internal ();
  static void print_row (FILE *fp,
    const timevar_time_def *total,
    const char *name, const timevar_time_def &elapsed);
  static bool all_zero (const timevar_time_def &elapsed);

 private:
  typedef hash_map<timevar_def *, timevar_time_def> child_map_t;


  struct timevar_def
  {

    struct timevar_time_def elapsed;



    struct timevar_time_def start_time;


    const char *name;



    unsigned standalone : 1;



    unsigned used : 1;

    child_map_t *children;
  };




  struct timevar_stack_def
  {

    struct timevar_def *timevar;


    struct timevar_stack_def *next;
  };





  class named_items;

 private:





  timevar_def m_timevars[TIMEVAR_LAST];


  timevar_stack_def *m_stack;



  timevar_stack_def *m_unused_stack_instances;




  timevar_time_def m_start_time;


  named_items *m_jit_client_items;

  friend class named_items;
};


static inline void
timevar_push (timevar_id_t tv)
{
  if (g_timer)
    g_timer->push (tv);
}

static inline void
timevar_pop (timevar_id_t tv)
{
  if (g_timer)
    g_timer->pop (tv);
}



class auto_timevar
{
 public:
  auto_timevar (timer *t, timevar_id_t tv)
    : m_timer (t),
      m_tv (tv)
  {
    if (m_timer)
      m_timer->push (m_tv);
  }

  explicit auto_timevar (timevar_id_t tv)
    : m_timer (g_timer)
    , m_tv (tv)
  {
    if (m_timer)
      m_timer->push (m_tv);
  }

  ~auto_timevar ()
  {
    if (m_timer)
      m_timer->pop (m_tv);
  }

 private:


  auto_timevar (const auto_timevar &);

  timer *m_timer;
  timevar_id_t m_tv;
};

extern void print_time (const char *, long);
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h" 2

struct dataflow;
class df_d;
struct df_problem;
struct df_link;
struct df_insn_info;
union df_ref_d;
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
enum df_problem_id
  {
    DF_SCAN,
    DF_LR,
    DF_LIVE,
    DF_RD,
    DF_CHAIN,
    DF_WORD_LR,
    DF_NOTE,
    DF_MD,
    DF_MIR,

    DF_LAST_PROBLEM_PLUS1
  };


enum df_flow_dir
  {
    DF_NONE,
    DF_FORWARD,
    DF_BACKWARD
  };


enum df_ref_class {DF_REF_BASE, DF_REF_ARTIFICIAL, DF_REF_REGULAR};




enum df_ref_type {DF_REF_REG_DEF, DF_REF_REG_USE,
    DF_REF_REG_MEM_LOAD, DF_REF_REG_MEM_STORE};

enum df_ref_flags
  {


    DF_REF_CONDITIONAL = 1 << 0,





    DF_REF_AT_TOP = 1 << 1,



    DF_REF_IN_NOTE = 1 << 2,



    DF_HARD_REG_LIVE = 1 << 3,




    DF_REF_PARTIAL = 1 << 4,




    DF_REF_READ_WRITE = 1 << 5,






    DF_REF_MAY_CLOBBER = 1 << 6,
# 124 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
    DF_REF_MUST_CLOBBER = 1 << 7,







    DF_REF_SIGN_EXTRACT = 1 << 8,


    DF_REF_ZERO_EXTRACT = 1 << 9,


    DF_REF_STRICT_LOW_PART = 1 << 10,


    DF_REF_SUBREG = 1 << 11,



    DF_REF_MW_HARDREG = 1 << 12,



    DF_REF_CALL_STACK_USAGE = 1 << 13,


    DF_REF_REG_MARKER = 1 << 14,


    DF_REF_PRE_POST_MODIFY = 1 << 15

  };


enum df_ref_order
  {

    DF_REF_ORDER_NO_TABLE,



    DF_REF_ORDER_UNORDERED,
    DF_REF_ORDER_UNORDERED_WITH_NOTES,




    DF_REF_ORDER_BY_REG,



    DF_REF_ORDER_BY_REG_WITH_NOTES,



    DF_REF_ORDER_BY_INSN,



    DF_REF_ORDER_BY_INSN_WITH_NOTES
  };




typedef void (*df_alloc_function) (bitmap);







typedef void (*df_reset_function) (bitmap);



typedef void (*df_free_bb_function) (basic_block, void *);


typedef void (*df_local_compute_function) (bitmap);


typedef void (*df_init_function) (bitmap);


typedef void (*df_dataflow_function) (struct dataflow *, bitmap, int *, int);


typedef void (*df_confluence_function_0) (basic_block);



typedef bool (*df_confluence_function_n) (edge);



typedef bool (*df_transfer_function) (int);


typedef void (*df_finalizer_function) (bitmap);


typedef void (*df_free_function) (void);




typedef void (*df_remove_problem_function) (void);


typedef void (*df_dump_problem_function) (FILE *);


typedef void (*df_dump_bb_problem_function) (basic_block, FILE *);


typedef void (*df_dump_insn_problem_function) (const rtx_insn *, FILE *);


typedef void (*df_verify_solution_start) (void);


typedef void (*df_verify_solution_end) (void);




struct df_problem {


  enum df_problem_id id;
  enum df_flow_dir dir;
  df_alloc_function alloc_fun;
  df_reset_function reset_fun;
  df_free_bb_function free_bb_fun;
  df_local_compute_function local_compute_fun;
  df_init_function init_fun;
  df_dataflow_function dataflow_fun;
  df_confluence_function_0 con_fun_0;
  df_confluence_function_n con_fun_n;
  df_transfer_function trans_fun;
  df_finalizer_function finalize_fun;
  df_free_function free_fun;
  df_remove_problem_function remove_problem_fun;
  df_dump_problem_function dump_start_fun;
  df_dump_bb_problem_function dump_top_fun;
  df_dump_bb_problem_function dump_bottom_fun;
  df_dump_insn_problem_function dump_insn_top_fun;
  df_dump_insn_problem_function dump_insn_bottom_fun;
  df_verify_solution_start verify_start_fun;
  df_verify_solution_end verify_end_fun;
  const struct df_problem *dependent_problem;
  unsigned int block_info_elt_size;


  timevar_id_t tv_id;



  bool free_blocks_on_set_blocks;
};



struct dataflow
{
  const struct df_problem *problem;



  void *block_info;
  unsigned int block_info_size;


  object_allocator<df_link> *block_pool;






  bitmap out_of_date_transfer_functions;





  void *problem_data;


  unsigned int local_flags;





  bool computed;




  bool solutions_dirty;




  bool optional_p;
};






struct df_mw_hardreg
{
  df_mw_hardreg *next;
  rtx mw_reg;


  enum df_ref_type type : 16;

  int flags : 16;
  unsigned int start_regno;
  unsigned int end_regno;
  unsigned int mw_order;
};





struct df_base_ref
{


  enum df_ref_class cl : 8;

  enum df_ref_type type : 8;

  int flags : 16;
  unsigned int regno;
  rtx reg;
  union df_ref_d *next_loc;
  struct df_link *chain;



  struct df_insn_info *insn_info;



  union df_ref_d *next_reg;
  union df_ref_d *prev_reg;


  int id;


  unsigned int ref_order;
};




struct df_artificial_ref
{
  struct df_base_ref base;



  basic_block bb;
};


struct df_regular_ref
{
  struct df_base_ref base;




  rtx *loc;
};


union df_ref_d
{
  struct df_base_ref base;
  struct df_regular_ref regular_ref;
  struct df_artificial_ref artificial_ref;
};
typedef union df_ref_d *df_ref;



struct df_insn_info
{
  rtx_insn *insn;
  df_ref defs;
  df_ref uses;

  df_ref eq_uses;
  struct df_mw_hardreg *mw_hardregs;



  int luid;
};



struct df_link
{
  df_ref ref;
  struct df_link *next;
};


enum df_chain_flags
{

  DF_DU_CHAIN = 1,
  DF_UD_CHAIN = 2
};

enum df_scan_flags
{

  DF_SCAN_EMPTY_ENTRY_EXIT = 1

};

enum df_changeable_flags
{


  DF_LR_RUN_DCE = 1 << 0,
  DF_NO_HARD_REGS = 1 << 1,

  DF_EQ_NOTES = 1 << 2,
  DF_NO_REGS_EVER_LIVE = 1 << 3,




  DF_NO_INSN_RESCAN = 1 << 4,




  DF_DEFER_INSN_RESCAN = 1 << 5,




  DF_RD_PRUNE_DEAD_DEFS = 1 << 6,

  DF_VERIFY_SCHEDULED = 1 << 7
};




struct df_ref_info
{
  df_ref *refs;
  unsigned int *begin;
  unsigned int *count;
  unsigned int refs_size;







  unsigned int table_size;
  unsigned int total_size;

  enum df_ref_order ref_order;
};



struct df_reg_info
{

  df_ref reg_chain;

  unsigned int n_refs;
};
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
class df_d
{
public:
# 539 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
  struct dataflow *problems_in_order[DF_LAST_PROBLEM_PLUS1];
  struct dataflow *problems_by_index[DF_LAST_PROBLEM_PLUS1];





  bitmap blocks_to_analyze;




  struct df_ref_info def_info;
  struct df_ref_info use_info;



  struct df_reg_info **def_regs;
  struct df_reg_info **use_regs;
  struct df_reg_info **eq_use_regs;
  unsigned int regs_size;
  unsigned int regs_inited;


  struct df_insn_info **insns;
  unsigned int insns_size;

  int num_problems_defined;

  bitmap_head hardware_regs_used;


  bitmap_head regular_block_artificial_uses;


  bitmap_head eh_block_artificial_uses;

  bitmap entry_block_defs;
  bitmap exit_block_uses;



  bitmap_head insns_to_delete;
  bitmap_head insns_to_rescan;
  bitmap_head insns_to_notes_rescan;
  int *postorder;

  vec<int> postorder_inverted;

  int n_blocks;
# 600 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
  unsigned int *hard_regs_live_count;



  unsigned int ref_order;



  int changeable_flags : 8;



  bool analyze_subset;



  bool redo_entry_and_exit;
};
# 805 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
extern bitmap_obstack df_bitmap_obstack;



struct df_scan_bb_info
{
# 820 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
  df_ref artificial_defs;





  df_ref artificial_uses;
};






class df_rd_bb_info
{
public:

  bitmap_head kill;
  bitmap_head sparse_kill;
  bitmap_head gen;


  bitmap_head in;
  bitmap_head out;
};





class df_md_bb_info
{
public:

  bitmap_head gen;
  bitmap_head kill;
  bitmap_head init;


  bitmap_head in;
  bitmap_head out;
};





class df_lr_bb_info
{
public:

  bitmap_head def;

  bitmap_head use;


  bitmap_head in;
  bitmap_head out;
};






class df_live_bb_info
{
public:

  bitmap_head kill;

  bitmap_head gen;


  bitmap_head in;
  bitmap_head out;
};







class df_word_lr_bb_info
{
public:

  bitmap_head def;

  bitmap_head use;


  bitmap_head in;
  bitmap_head out;
};



class df_mir_bb_info
{
public:

  bitmap_head kill;

  bitmap_head gen;



  bitmap_head in;
  bitmap_head out;
};





extern class df_d *df;
# 963 "/home/giulianob/gcc_git_gnu/gcc/gcc/df.h"
extern void df_add_problem (const struct df_problem *);
extern int df_set_flags (int);
extern int df_clear_flags (int);
extern void df_set_blocks (bitmap);
extern void df_remove_problem (struct dataflow *);
extern void df_finish_pass (bool);
extern void df_analyze_problem (struct dataflow *, bitmap, int *, int);
extern void df_analyze ();
extern void df_analyze_loop (class loop *);
extern int df_get_n_blocks (enum df_flow_dir);
extern int *df_get_postorder (enum df_flow_dir);
extern void df_simple_dataflow (enum df_flow_dir, df_init_function,
    df_confluence_function_0, df_confluence_function_n,
    df_transfer_function, bitmap, int *, int);
extern void df_mark_solutions_dirty (void);
extern bool df_get_bb_dirty (basic_block);
extern void df_set_bb_dirty (basic_block);
extern void df_compact_blocks (void);
extern void df_bb_replace (int, basic_block);
extern void df_bb_delete (int);
extern void df_verify (void);



extern df_ref df_bb_regno_first_def_find (basic_block, unsigned int);
extern df_ref df_bb_regno_last_def_find (basic_block, unsigned int);
extern df_ref df_find_def (rtx_insn *, rtx);
extern bool df_reg_defined (rtx_insn *, rtx);
extern df_ref df_find_use (rtx_insn *, rtx);
extern bool df_reg_used (rtx_insn *, rtx);
extern void df_worklist_dataflow (struct dataflow *,bitmap, int *, int);
extern void df_print_regset (FILE *file, const_bitmap r);
extern void df_print_word_regset (FILE *file, const_bitmap r);
extern void df_dump (FILE *);
extern void df_dump_region (FILE *);
extern void df_dump_start (FILE *);
extern void df_dump_top (basic_block, FILE *);
extern void df_dump_bottom (basic_block, FILE *);
extern void df_dump_insn_top (const rtx_insn *, FILE *);
extern void df_dump_insn_bottom (const rtx_insn *, FILE *);
extern void df_refs_chain_dump (df_ref, bool, FILE *);
extern void df_regs_chain_dump (df_ref, FILE *);
extern void df_insn_debug (rtx_insn *, bool, FILE *);
extern void df_insn_debug_regno (rtx_insn *, FILE *);
extern void df_regno_debug (unsigned int, FILE *);
extern void df_ref_debug (df_ref, FILE *);
extern void debug_df_insn (rtx_insn *);
extern void debug_df_regno (unsigned int);
extern void debug_df_reg (rtx);
extern void debug_df_defno (unsigned int);
extern void debug_df_useno (unsigned int);
extern void debug_df_ref (df_ref);
extern void debug_df_chain (struct df_link *);



extern struct df_link *df_chain_create (df_ref, df_ref);
extern void df_chain_unlink (df_ref);
extern void df_chain_copy (df_ref, struct df_link *);
extern void df_grow_bb_info (struct dataflow *);
extern void df_chain_dump (struct df_link *, FILE *);
extern void df_print_bb_index (basic_block bb, FILE *file);
extern void df_rd_add_problem (void);
extern void df_rd_simulate_artificial_defs_at_top (basic_block, bitmap);
extern void df_rd_simulate_one_insn (basic_block, rtx_insn *, bitmap);
extern void df_lr_add_problem (void);
extern void df_lr_verify_transfer_functions (void);
extern void df_live_verify_transfer_functions (void);
extern void df_live_add_problem (void);
extern void df_live_set_all_dirty (void);
extern void df_chain_add_problem (unsigned int);
extern void df_word_lr_add_problem (void);
extern bool df_word_lr_mark_ref (df_ref, bool, bitmap);
extern bool df_word_lr_simulate_defs (rtx_insn *, bitmap);
extern void df_word_lr_simulate_uses (rtx_insn *, bitmap);
extern void df_word_lr_simulate_artificial_refs_at_top (basic_block, bitmap);
extern void df_word_lr_simulate_artificial_refs_at_end (basic_block, bitmap);
extern void df_note_add_problem (void);
extern void df_md_add_problem (void);
extern void df_md_simulate_artificial_defs_at_top (basic_block, bitmap);
extern void df_md_simulate_one_insn (basic_block, rtx_insn *, bitmap);
extern void df_mir_add_problem (void);
extern void df_mir_simulate_one_insn (basic_block, rtx_insn *, bitmap, bitmap);
extern void df_simulate_find_noclobber_defs (rtx_insn *, bitmap);
extern void df_simulate_find_defs (rtx_insn *, bitmap);
extern void df_simulate_defs (rtx_insn *, bitmap);
extern void df_simulate_uses (rtx_insn *, bitmap);
extern void df_simulate_initialize_backwards (basic_block, bitmap);
extern void df_simulate_one_insn_backwards (basic_block, rtx_insn *, bitmap);
extern void df_simulate_finalize_backwards (basic_block, bitmap);
extern void df_simulate_initialize_forwards (basic_block, bitmap);
extern void df_simulate_one_insn_forwards (basic_block, rtx_insn *, bitmap);
extern void simulate_backwards_to_point (basic_block, regset, rtx);
extern bool can_move_insns_across (rtx_insn *, rtx_insn *,
       rtx_insn *, rtx_insn *,
       basic_block, regset,
       regset, rtx_insn **);


extern void df_scan_alloc (bitmap);
extern void df_scan_add_problem (void);
extern void df_grow_reg_info (void);
extern void df_grow_insn_info (void);
extern void df_scan_blocks (void);
extern void df_uses_create (rtx *, rtx_insn *, int);
extern struct df_insn_info * df_insn_create_insn_record (rtx_insn *);
extern void df_insn_delete (rtx_insn *);
extern void df_bb_refs_record (int, bool);
extern bool df_insn_rescan (rtx_insn *);
extern bool df_insn_rescan_debug_internal (rtx_insn *);
extern void df_insn_rescan_all (void);
extern void df_process_deferred_rescans (void);
extern void df_recompute_luids (basic_block);
extern void df_insn_change_bb (rtx_insn *, basic_block);
extern void df_maybe_reorganize_use_refs (enum df_ref_order);
extern void df_maybe_reorganize_def_refs (enum df_ref_order);
extern void df_ref_change_reg_with_loc (rtx, unsigned int);
extern void df_notes_rescan (rtx_insn *);
extern void df_hard_reg_init (void);
extern void df_update_entry_block_defs (void);
extern void df_update_exit_block_uses (void);
extern void df_update_entry_exit_and_calls (void);
extern bool df_hard_reg_used_p (unsigned int);
extern unsigned int df_hard_reg_used_count (unsigned int);
extern bool df_regs_ever_live_p (unsigned int);
extern void df_set_regs_ever_live (unsigned int, bool);
extern void df_compute_regs_ever_live (bool);
extern void df_scan_verify (void);






static inline struct df_scan_bb_info *
df_scan_get_bb_info (unsigned int index)
{
  if (index < (df->problems_by_index[DF_SCAN])->block_info_size)
    return &((struct df_scan_bb_info *) (df->problems_by_index[DF_SCAN])->block_info)[index];
  else
    return nullptr;
}

static inline class df_rd_bb_info *
df_rd_get_bb_info (unsigned int index)
{
  if (index < (df->problems_by_index[DF_RD])->block_info_size)
    return &((class df_rd_bb_info *) (df->problems_by_index[DF_RD])->block_info)[index];
  else
    return nullptr;
}

static inline class df_lr_bb_info *
df_lr_get_bb_info (unsigned int index)
{
  if (index < (df->problems_by_index[DF_LR])->block_info_size)
    return &((class df_lr_bb_info *) (df->problems_by_index[DF_LR])->block_info)[index];
  else
    return nullptr;
}

static inline class df_md_bb_info *
df_md_get_bb_info (unsigned int index)
{
  if (index < (df->problems_by_index[DF_MD])->block_info_size)
    return &((class df_md_bb_info *) (df->problems_by_index[DF_MD])->block_info)[index];
  else
    return nullptr;
}

static inline class df_live_bb_info *
df_live_get_bb_info (unsigned int index)
{
  if (index < (df->problems_by_index[DF_LIVE])->block_info_size)
    return &((class df_live_bb_info *) (df->problems_by_index[DF_LIVE])->block_info)[index];
  else
    return nullptr;
}

static inline class df_word_lr_bb_info *
df_word_lr_get_bb_info (unsigned int index)
{
  if (index < (df->problems_by_index[DF_WORD_LR])->block_info_size)
    return &((class df_word_lr_bb_info *) (df->problems_by_index[DF_WORD_LR])->block_info)[index];
  else
    return nullptr;
}

static inline class df_mir_bb_info *
df_mir_get_bb_info (unsigned int index)
{
  if (index < (df->problems_by_index[DF_MIR])->block_info_size)
    return &((class df_mir_bb_info *) (df->problems_by_index[DF_MIR])->block_info)[index];
  else
    return nullptr;
}






static inline bitmap
df_get_live_out (basic_block bb)
{
  ((void)(!((df->problems_by_index[DF_LR])) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/df.h", 1168, __FUNCTION__), 0 : 0));

  if ((df->problems_by_index[DF_LIVE]))
    return (&(df_live_get_bb_info ((bb)->index))->out);
  else
    return (&(df_lr_get_bb_info ((bb)->index))->out);
}






static inline bitmap
df_get_live_in (basic_block bb)
{
  ((void)(!((df->problems_by_index[DF_LR])) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/df.h", 1184, __FUNCTION__), 0 : 0));

  if ((df->problems_by_index[DF_LIVE]))
    return (&(df_live_get_bb_info ((bb)->index))->in);
  else
    return (&(df_lr_get_bb_info ((bb)->index))->in);
}




static inline df_ref
df_get_artificial_defs (unsigned int bb_index)
{
  return df_scan_get_bb_info (bb_index)->artificial_defs;
}




static inline df_ref
df_get_artificial_uses (unsigned int bb_index)
{
  return df_scan_get_bb_info (bb_index)->artificial_uses;
}




static inline df_ref
df_single_def (const df_insn_info *info)
{
  df_ref defs = ((info)->defs);
  return defs && !((defs)->base.next_loc) ? defs : nullptr;
}




static inline df_ref
df_single_use (const df_insn_info *info)
{
  df_ref uses = ((info)->uses);
  return uses && !((uses)->base.next_loc) ? uses : nullptr;
}



struct web_entry_base
{
 private:

  web_entry_base *pred_pvt;

 public:

  web_entry_base *pred () { return pred_pvt; }
  void set_pred (web_entry_base *p) { pred_pvt = p; }


  web_entry_base *unionfind_root ();


  friend bool unionfind_union (web_entry_base *first, web_entry_base *second);
};
# 48 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/resource.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/resource.h"
struct resources
{
  char memory;
  char volatil;
  char cc;
  HARD_REG_SET regs;
};


enum mark_resource_type
{
  MARK_SRC_DEST = 0,
  MARK_SRC_DEST_CALL = 1
};

extern void mark_target_live_regs (rtx_insn *, rtx, struct resources *);
extern void mark_set_resources (rtx, struct resources *, int,
    enum mark_resource_type);
extern void mark_referenced_resources (rtx, struct resources *, bool);
extern void clear_hashed_info_for_insn (rtx_insn *);
extern void clear_hashed_info_until_next_barrier (rtx_insn *);
extern void incr_ticks_for_insn (rtx_insn *);
extern void mark_end_of_function_resources (rtx, bool);
extern void init_resource_info (rtx_insn *);
extern void free_resource_info (void);
# 49 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h"
# 1 "./bversion.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h" 2


typedef enum
{

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.def" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.def"
DK_UNSPECIFIED,




DK_IGNORED,


DK_FATAL,
DK_ICE,
DK_ERROR,
DK_SORRY,
DK_WARNING,
DK_ANACHRONISM,
DK_NOTE,
DK_DEBUG,



DK_DIAGNOSTIC_PATH,



DK_PEDWARN,
DK_PERMERROR,


DK_WERROR,


DK_ICE_NOBT,
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h" 2

  DK_LAST_DIAGNOSTIC_KIND,


  DK_POP
} diagnostic_t;



class auto_diagnostic_group
{
 public:
  auto_diagnostic_group ();
  ~auto_diagnostic_group ();
};


class diagnostic_metadata;

extern const char *progname;

extern const char *trim_filename (const char *);
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h"
extern void internal_error (const char *, ...) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__noreturn__));
extern void internal_error_no_backtrace (const char *, ...)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__noreturn__));

extern bool warning (int, const char *, ...) __attribute__ ((__nonnull__ (2)));
extern bool warning_n (location_t, int, unsigned long,
         const char *, const char *, ...)
    __attribute__ ((__nonnull__ (4))) __attribute__ ((__nonnull__ (5)));
extern bool warning_n (rich_location *, int, unsigned long,
         const char *, const char *, ...)
    __attribute__ ((__nonnull__ (4))) __attribute__ ((__nonnull__ (5)));
extern bool warning_at (location_t, int, const char *, ...)
    __attribute__ ((__nonnull__ (3)));
extern bool warning_at (rich_location *, int, const char *, ...)
    __attribute__ ((__nonnull__ (3)));
extern bool warning_meta (rich_location *,
     const diagnostic_metadata &, int,
     const char *, ...)
    __attribute__ ((__nonnull__ (4)));
extern void error (const char *, ...) __attribute__ ((__nonnull__ (1)));
extern void error_n (location_t, unsigned long, const char *,
       const char *, ...)
    __attribute__ ((__nonnull__ (3))) __attribute__ ((__nonnull__ (4)));
extern void error_at (location_t, const char *, ...) __attribute__ ((__nonnull__ (2)));
extern void error_at (rich_location *, const char *, ...)
  __attribute__ ((__nonnull__ (2)));
extern void fatal_error (location_t, const char *, ...) __attribute__ ((__nonnull__ (2)))
     __attribute__ ((__noreturn__));

extern bool pedwarn (location_t, int, const char *, ...)
     __attribute__ ((__nonnull__ (3)));
extern bool pedwarn (rich_location *, int, const char *, ...)
     __attribute__ ((__nonnull__ (3)));
extern bool permerror (location_t, const char *, ...) __attribute__ ((__nonnull__ (2)));
extern bool permerror (rich_location *, const char *,
       ...) __attribute__ ((__nonnull__ (2)));
extern void sorry (const char *, ...) __attribute__ ((__nonnull__ (1)));
extern void sorry_at (location_t, const char *, ...) __attribute__ ((__nonnull__ (2)));
extern void inform (location_t, const char *, ...) __attribute__ ((__nonnull__ (2)));
extern void inform (rich_location *, const char *, ...) __attribute__ ((__nonnull__ (2)));
extern void inform_n (location_t, unsigned long, const char *,
        const char *, ...)
    __attribute__ ((__nonnull__ (3))) __attribute__ ((__nonnull__ (4)));
extern void verbatim (const char *, ...) __attribute__ ((__nonnull__ (1)));
extern bool emit_diagnostic (diagnostic_t, location_t, int,
        const char *, ...) __attribute__ ((__nonnull__ (4)));
extern bool emit_diagnostic (diagnostic_t, rich_location *, int,
        const char *, ...) __attribute__ ((__nonnull__ (4)));
extern bool emit_diagnostic_valist (diagnostic_t, location_t, int, const char *,
        va_list *) __attribute__ ((__nonnull__ (4)));
extern bool seen_error (void);




extern void fnotice (FILE *, const char *, ...)
     __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));
# 50 "build/gencondmd.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/reload.h" 1
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/reload.h"
extern int register_move_cost (machine_mode, reg_class_t, reg_class_t);
extern int memory_move_cost (machine_mode, reg_class_t, bool);
extern int memory_move_secondary_cost (machine_mode, reg_class_t, bool);
# 64 "/home/giulianob/gcc_git_gnu/gcc/gcc/reload.h"
enum reload_type
{
  RELOAD_FOR_INPUT, RELOAD_FOR_OUTPUT, RELOAD_FOR_INSN,
  RELOAD_FOR_INPUT_ADDRESS, RELOAD_FOR_INPADDR_ADDRESS,
  RELOAD_FOR_OUTPUT_ADDRESS, RELOAD_FOR_OUTADDR_ADDRESS,
  RELOAD_FOR_OPERAND_ADDRESS, RELOAD_FOR_OPADDR_ADDR,
  RELOAD_OTHER, RELOAD_FOR_OTHER_ADDRESS
};
# 156 "/home/giulianob/gcc_git_gnu/gcc/gcc/reload.h"
struct target_reload {



  bool x_indirect_symref_ok;







  unsigned char x_spill_indirect_levels;


  bool x_caller_save_initialized_p;





  machine_mode (x_regno_save_mode
       [76]
       [16 / 4 + 1]);



  bool x_double_reg_address_ok[MAX_MACHINE_MODE];






  int x_cached_reg_save_code[76][MAX_MACHINE_MODE];
  int x_cached_reg_restore_code[76][MAX_MACHINE_MODE];
};

extern struct target_reload default_target_reload;

extern struct target_reload *this_target_reload;
# 209 "/home/giulianob/gcc_git_gnu/gcc/gcc/reload.h"
struct reg_equivs_t
{




  rtx constant;




  rtx invariant;





  rtx memory_loc;




  rtx address;



  rtx mem;



  rtx_expr_list *alt_mem_list;



  rtx_insn_list *init;
};
# 261 "/home/giulianob/gcc_git_gnu/gcc/gcc/reload.h"
extern vec<reg_equivs_t, va_gc> *reg_equivs;



extern int n_earlyclobbers;
extern rtx reload_earlyclobbers[10];


extern int reload_n_operands;



extern int reload_first_uid;

extern int num_not_at_initial_offset;





class insn_chain
{
public:

  class insn_chain *next, *prev;



  class insn_chain *next_need_reload;


  rtx_insn *insn;


  int block;


  unsigned int need_reload:1;


  unsigned int need_operand_change:1;

  unsigned int need_elim:1;

  unsigned int is_caller_save_insn:1;




  bitmap_head live_throughout;
  bitmap_head dead_or_set;


  struct reload *rld;
  int n_reloads;


  HARD_REG_SET used_spill_regs;
};



extern class insn_chain *reload_insn_chain;


extern class insn_chain *new_insn_chain (void);



extern void compute_use_by_pseudos (HARD_REG_SET *, bitmap);




extern reg_class_t secondary_reload_class (bool, reg_class_t,
        machine_mode, rtx);
# 345 "/home/giulianob/gcc_git_gnu/gcc/gcc/reload.h"
extern rtx get_secondary_mem (rtx, machine_mode, int, enum reload_type);


extern void clear_secondary_mem (void);



extern void transfer_replacements (int, int);





extern int remove_address_replacements (rtx in_rtx);




extern int operands_match_p (rtx, rtx);


extern int safe_from_earlyclobber (rtx, rtx);




extern int find_reloads (rtx_insn *, int, int, int, short *);





extern rtx form_sum (machine_mode, rtx, rtx);



extern void subst_reloads (rtx_insn *);




extern void copy_replacements (rtx, rtx);


extern void move_replacements (rtx *x, rtx *y);



extern rtx find_replacement (rtx *);


extern int reg_overlap_mentioned_for_reload_p (rtx, rtx);



extern rtx find_equiv_reg (rtx, rtx_insn *, enum reg_class, int, short *,
      int, machine_mode);


extern int regno_clobbered_p (unsigned int, rtx_insn *, machine_mode, int);


extern int earlyclobber_operand_p (rtx);


extern int push_reload (rtx, rtx, rtx *, rtx *, enum reg_class,
   machine_mode, machine_mode,
   int, int, int, enum reload_type);




extern void init_reload (void);


extern bool reload (rtx_insn *, int);



extern void mark_home_live (int);



extern rtx eliminate_regs (rtx, machine_mode, rtx);
extern bool elimination_target_reg_p (rtx);



extern void calculate_elim_costs_all_insns (void);


extern void deallocate_reload_reg (int r);




extern void init_caller_save (void);


extern void init_save_areas (void);


extern void setup_save_areas (void);


extern void save_call_clobbered_regs (void);


extern void cleanup_subreg_operands (rtx_insn *);


extern void debug_reload_to_stream (FILE *);
extern void debug_reload (void);



extern rtx reload_adjust_reg_for_mode (rtx, machine_mode);


extern void grow_reg_equivs (void);
# 51 "build/gencondmd.c" 2
# 1 "./tm-constrs.h" 1






static inline bool
satisfies_constraint_m (rtx op)
{
  return (((enum rtx_code) (op)->code) == MEM) && (
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(memory_address_addr_space_p (((machine_mode) (op)->mode), (((op)->u.fld[0]).rt_rtx),
       0)));
}
static inline bool
satisfies_constraint_o (rtx op)
{
  return (((enum rtx_code) (op)->code) == MEM) && (
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(offsettable_nonstrict_memref_p (op)));
}
static inline bool
satisfies_constraint_V (rtx op)
{
  return (((enum rtx_code) (op)->code) == MEM) && ((
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(memory_address_addr_space_p (((machine_mode) (op)->mode), (((op)->u.fld[0]).rt_rtx),
       0))) && (!(
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(offsettable_nonstrict_memref_p (op)))));
}
static inline bool
satisfies_constraint__l (rtx op)
{
  return (((enum rtx_code) (op)->code) == MEM) && ((
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((enum rtx_code) ((((op)->u.fld[0]).rt_rtx))->code) == PRE_DEC)) || (
# 51 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((enum rtx_code) ((((op)->u.fld[0]).rt_rtx))->code) == POST_DEC)));
}
static inline bool
satisfies_constraint__g (rtx op)
{
  return (((enum rtx_code) (op)->code) == MEM) && ((
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((enum rtx_code) ((((op)->u.fld[0]).rt_rtx))->code) == PRE_INC)) || (
# 58 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((enum rtx_code) ((((op)->u.fld[0]).rt_rtx))->code) == POST_INC)));
}
static inline bool
satisfies_constraint_p (rtx op __attribute__ ((__unused__)))
{
  return
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(address_operand (op, E_VOIDmode));
}
static inline bool
satisfies_constraint_i (rtx op)
{
  return (
# 66 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((rtx_class[(int) (((enum rtx_code) (op)->code))]) == RTX_CONST_OBJ))) && (
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(!flag_pic || legitimate_pic_operand_p (op)));
}
static inline bool
satisfies_constraint_s (rtx op)
{
  return (
# 71 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((rtx_class[(int) (((enum rtx_code) (op)->code))]) == RTX_CONST_OBJ))) && ((
# 72 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(!((((enum rtx_code) (op)->code) == CONST_INT) || (((enum rtx_code) (op)->code) == CONST_WIDE_INT)))) && (
# 73 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(!flag_pic || legitimate_pic_operand_p (op))));
}
static inline bool
satisfies_constraint_n (rtx op)
{
  return (
# 77 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((((enum rtx_code) (op)->code) == CONST_INT) || (((enum rtx_code) (op)->code) == CONST_WIDE_INT)))) && (
# 78 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(!flag_pic || legitimate_pic_operand_p (op)));
}
static inline bool
satisfies_constraint_E (rtx op)
{
  return (
# 82 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
((((enum rtx_code) (op)->code) == CONST_DOUBLE && ((machine_mode) (op)->mode) != E_VOIDmode))) || (
# 83 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((enum rtx_code) (op)->code) == CONST_VECTOR
      && ((enum mode_class) mode_class[((machine_mode) (op)->mode)]) == MODE_VECTOR_FLOAT));
}
static inline bool
satisfies_constraint_F (rtx op)
{
  return (
# 89 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
((((enum rtx_code) (op)->code) == CONST_DOUBLE && ((machine_mode) (op)->mode) != E_VOIDmode))) || (
# 90 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(((enum rtx_code) (op)->code) == CONST_VECTOR
      && ((enum mode_class) mode_class[((machine_mode) (op)->mode)]) == MODE_VECTOR_FLOAT));
}
static inline bool
satisfies_constraint_X (rtx op __attribute__ ((__unused__)))
{
  return
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/common.md"
(true);
}
static inline bool
satisfies_constraint_Bf (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return flags_reg_operand (op, mode);
}
static inline bool
satisfies_constraint_Bg (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return GOT_memory_operand (op, mode);
}
static inline bool
satisfies_constraint_Bm (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return vector_memory_operand (op, mode);
}
static inline bool
satisfies_constraint_Bc (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return (memory_operand (op, mode)) && (
# 180 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(constant_address_p ((((op)->u.fld[0]).rt_rtx))));
}
static inline bool
satisfies_constraint_Bn (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return norex_memory_operand (op, mode);
}
static inline bool
satisfies_constraint_Bs (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return ((!(
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
((ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)))) && ((!(
# 189 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((ix86_isa_flags & (1UL << 58)) != 0)))) && (sibcall_memory_operand (op, mode)))) || ((
# 191 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((ix86_isa_flags & (1UL << 58)) != 0) && (ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) && (GOT_memory_operand (op, mode)));
}
static inline bool
satisfies_constraint_Bw (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return ((!(
# 196 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
((ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)))) && ((!(
# 197 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((ix86_isa_flags & (1UL << 58)) != 0)))) && (memory_operand (op, mode)))) || ((
# 199 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((ix86_isa_flags & (1UL << 58)) != 0) && (ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) && (GOT_memory_operand (op, mode)));
}
static inline bool
satisfies_constraint_Bz (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return constant_call_address_operand (op, mode);
}
static inline bool
satisfies_constraint_BC (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return (
# 208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((ix86_isa_flags & (1UL << 50)) != 0))) && ((
# 209 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(op == (const_int_rtx[64 -1]))) || (vector_all_ones_operand (op, mode)));
}
static inline bool
satisfies_constraint_I (rtx op)
{
  long ival = 0;
  if ((((enum rtx_code) (op)->code) == CONST_INT))
    ival = ((op)->u.hwint[0]);
  return (((enum rtx_code) (op)->code) == CONST_INT) && (
# 216 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((unsigned long) (ival) - (unsigned long) (0) <= (unsigned long) (31) - (unsigned long) (0))));
}
static inline bool
satisfies_constraint_J (rtx op)
{
  long ival = 0;
  if ((((enum rtx_code) (op)->code) == CONST_INT))
    ival = ((op)->u.hwint[0]);
  return (((enum rtx_code) (op)->code) == CONST_INT) && (
# 221 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((unsigned long) (ival) - (unsigned long) (0) <= (unsigned long) (63) - (unsigned long) (0))));
}
static inline bool
satisfies_constraint_K (rtx op)
{
  long ival = 0;
  if ((((enum rtx_code) (op)->code) == CONST_INT))
    ival = ((op)->u.hwint[0]);
  return (((enum rtx_code) (op)->code) == CONST_INT) && (
# 226 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((unsigned long) (ival) - (unsigned long) (-128) <= (unsigned long) (127) - (unsigned long) (-128))));
}
static inline bool
satisfies_constraint_L (rtx op)
{
  long ival = 0;
  if ((((enum rtx_code) (op)->code) == CONST_INT))
    ival = ((op)->u.hwint[0]);
  return (((enum rtx_code) (op)->code) == CONST_INT) && (
# 232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(ival == 0xff || ival == 0xffff
      || ival == (long) 0xffffffff));
}
static inline bool
satisfies_constraint_M (rtx op)
{
  long ival = 0;
  if ((((enum rtx_code) (op)->code) == CONST_INT))
    ival = ((op)->u.hwint[0]);
  return (((enum rtx_code) (op)->code) == CONST_INT) && (
# 238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((unsigned long) (ival) - (unsigned long) (0) <= (unsigned long) (3) - (unsigned long) (0))));
}
static inline bool
satisfies_constraint_N (rtx op)
{
  long ival = 0;
  if ((((enum rtx_code) (op)->code) == CONST_INT))
    ival = ((op)->u.hwint[0]);
  return (((enum rtx_code) (op)->code) == CONST_INT) && (
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((unsigned long) (ival) - (unsigned long) (0) <= (unsigned long) (255) - (unsigned long) (0))));
}
static inline bool
satisfies_constraint_O (rtx op)
{
  long ival = 0;
  if ((((enum rtx_code) (op)->code) == CONST_INT))
    ival = ((op)->u.hwint[0]);
  return (((enum rtx_code) (op)->code) == CONST_INT) && (
# 249 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((unsigned long) (ival) - (unsigned long) (0) <= (unsigned long) (127) - (unsigned long) (0))));
}
static inline bool
satisfies_constraint_G (rtx op)
{
  return (((enum rtx_code) (op)->code) == CONST_DOUBLE) && (
# 258 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(standard_80387_constant_p (op) > 0));
}
static inline bool
satisfies_constraint_C (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return (
# 263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(op == (const_int_rtx[64]))) || (const0_operand (op, mode));
}
static inline bool
satisfies_constraint_e (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return x86_64_immediate_operand (op, mode);
}
static inline bool
satisfies_constraint_We (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return (x86_64_immediate_operand (op, mode)) && (
# 282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((machine_mode) (op)->mode) != E_VOIDmode));
}
static inline bool
satisfies_constraint_Wz (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return (x86_64_zext_immediate_operand (op, mode)) && (
# 289 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/constraints.md"
(((machine_mode) (op)->mode) != E_VOIDmode));
}
static inline bool
satisfies_constraint_Wd (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return x86_64_hilo_int_operand (op, mode);
}
static inline bool
satisfies_constraint_Wf (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return x86_64_dwzext_immediate_operand (op, mode);
}
static inline bool
satisfies_constraint_Z (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return x86_64_zext_immediate_operand (op, mode);
}
static inline bool
satisfies_constraint_Tv (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return vsib_address_operand (op, mode);
}
static inline bool
satisfies_constraint_Ts (rtx op)
{
  machine_mode mode = ((machine_mode) (op)->mode);
  return address_no_seg_operand (op, mode);
}
# 52 "build/gencondmd.c" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/except.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/except.h"
struct function;
struct eh_region_d;


enum eh_region_type
{





  ERT_CLEANUP,






  ERT_TRY,






  ERT_ALLOWED_EXCEPTIONS,
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/except.h"
  ERT_MUST_NOT_THROW
};





struct eh_landing_pad_d
{

  struct eh_landing_pad_d *next_lp;


  struct eh_region_d *region;




  tree post_landing_pad;






  rtx_code_label *landing_pad;


  int index;
};



struct eh_catch_d
{

  struct eh_catch_d *next_catch;
  struct eh_catch_d *prev_catch;



  tree type_list;




  tree filter_list;




  tree label;
};



struct eh_region_d
{

  struct eh_region_d *outer;


  struct eh_region_d *inner;
  struct eh_region_d *next_peer;


  int index;


  enum eh_region_type type;


  union eh_region_u {
    struct eh_region_u_try {

      struct eh_catch_d *first_catch;
      struct eh_catch_d *last_catch;
    } eh_try;

    struct eh_region_u_allowed {

      tree type_list;



      tree label;




      int filter;
    } allowed;

    struct eh_region_u_must_not_throw {







      tree failure_decl;

      location_t failure_loc;
    } must_not_throw;
  } u;


  struct eh_landing_pad_d *landing_pads;




  rtx exc_ptr_reg, filter_reg;



  bool use_cxa_end_cleanup;
};

typedef struct eh_landing_pad_d *eh_landing_pad;
typedef struct eh_catch_d *eh_catch;
typedef struct eh_region_d *eh_region;






struct eh_status
{

  eh_region region_tree;


  vec<eh_region, va_gc> *region_array;


  vec<eh_landing_pad, va_gc> *lp_array;



  hash_map<gimple *, int> * throw_stmt_table;



  vec<tree, va_gc> *ttype_data;





  union eh_status_u {
    vec<tree, va_gc> * arm_eabi;
    vec<uchar, va_gc> * other;
  } ehspec_data;
};




extern void for_each_eh_label (void (*) (rtx));

extern void init_eh_for_function (void);

extern void remove_eh_landing_pad (eh_landing_pad);
extern void remove_eh_handler (eh_region);
extern void remove_unreachable_eh_regions (sbitmap);

extern bool current_function_has_exception_handlers (void);
extern void output_function_exception_table (int);

extern rtx expand_builtin_eh_pointer (tree);
extern rtx expand_builtin_eh_filter (tree);
extern rtx expand_builtin_eh_copy_values (tree);
extern void expand_builtin_unwind_init (void);
extern rtx expand_builtin_eh_return_data_regno (tree);
extern rtx expand_builtin_extract_return_addr (tree);
extern void expand_builtin_init_dwarf_reg_sizes (tree);
extern rtx expand_builtin_frob_return_addr (tree);
extern rtx expand_builtin_dwarf_sp_column (void);
extern void expand_builtin_eh_return (tree, tree);
extern void expand_eh_return (void);
extern rtx expand_builtin_extend_pointer (tree);

typedef tree (*duplicate_eh_regions_map) (tree, void *);
extern hash_map<void *, void *> *duplicate_eh_regions
  (struct function *, eh_region, int, duplicate_eh_regions_map, void *);

extern void sjlj_emit_function_exit_after (rtx_insn *);
extern void update_sjlj_context (void);

extern eh_region gen_eh_region_cleanup (eh_region);
extern eh_region gen_eh_region_try (eh_region);
extern eh_region gen_eh_region_allowed (eh_region, tree);
extern eh_region gen_eh_region_must_not_throw (eh_region);

extern eh_catch gen_eh_region_catch (eh_region, tree);
extern eh_landing_pad gen_eh_landing_pad (eh_region);

extern eh_region get_eh_region_from_number_fn (struct function *, int);
extern eh_region get_eh_region_from_number (int);
extern eh_landing_pad get_eh_landing_pad_from_number_fn (struct function*,int);
extern eh_landing_pad get_eh_landing_pad_from_number (int);
extern eh_region get_eh_region_from_lp_number_fn (struct function *, int);
extern eh_region get_eh_region_from_lp_number (int);

extern eh_region eh_region_outermost (struct function *, eh_region, eh_region);

extern void make_reg_eh_region_note (rtx_insn *insn, int ecf_flags, int lp_nr);
extern void make_reg_eh_region_note_nothrow_nononlocal (rtx_insn *);

extern void verify_eh_tree (struct function *);
extern void dump_eh_tree (FILE *, struct function *);
void debug_eh_tree (struct function *);
extern void add_type_for_runtime (tree);
extern tree lookup_type_for_runtime (tree);
extern void assign_filter_values (void);

extern eh_region get_eh_region_from_rtx (const_rtx);
extern eh_landing_pad get_eh_landing_pad_from_rtx (const_rtx);

extern void finish_eh_generation (void);

struct throw_stmt_node {
  gimple *stmt;
  int lp_nr;
};

extern hash_map<gimple *, int> *get_eh_throw_stmt_table (struct function *);
extern void set_eh_throw_stmt_table (function *, hash_map<gimple *, int> *);

enum eh_personality_kind {
  eh_personality_none,
  eh_personality_any,
  eh_personality_lang
};

extern enum eh_personality_kind
function_needs_eh_personality (struct function *);



static inline eh_region
ehr_next (eh_region r, eh_region start)
{
  if (r->inner)
    r = r->inner;
  else if (r->next_peer && r != start)
    r = r->next_peer;
  else
    {
      do
 {
   r = r->outer;
   if (r == start)
     return nullptr;
 }
      while (r->next_peer == nullptr);
      r = r->next_peer;
    }
  return r;
}
# 55 "build/gencondmd.c" 2


extern rtx_insn *insn;
extern rtx ins1;
extern rtx operands[];





struct c_test
{
  const char *expr;
  int value;
};
# 80 "build/gencondmd.c"
static const struct c_test insn_conditions[] = {

  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4DImode == V16SFmode\n							      || V4DImode == V8DFmode\n							      || V4DImode == V8DImode\n							      || V4DImode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DImode == E_V16SFmode
             || E_V4DImode == E_V8DFmode
             || E_V4DImode == E_V8DImode
             || E_V4DImode == E_V16SImode)) &&
# 378 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DImode == E_V16SFmode
             || E_V4DImode == E_V8DFmode
             || E_V4DImode == E_V8DImode
             || E_V4DImode == E_V16SImode)) &&
# 378 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_AVOID_VECTOR_DECODE\n   && SSE_FLOAT_MODE_P (SFmode)\n   && optimize_insn_for_speed_p ()) && (TARGET_64BIT)",


    __builtin_constant_p (
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && optimize_insn_for_speed_p ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && optimize_insn_for_speed_p ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (SImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL && TARGET_AVX512BW)) && (TARGET_AVX512VL && TARGET_AVX512BW))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(TARGET_64BIT && TARGET_STV) && (Pmode == SImode)",
    __builtin_constant_p (
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_SSE && reload_completed) && ((((TARGET_64BIT) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",
    __builtin_constant_p (
# 1777 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) && (((
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 1777 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) && (((
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "((optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& (TARGET_SHIFT1\n	    || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFT, DImode, operands)) && (TARGET_64BIT)",






    __builtin_constant_p (
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VBMI)",
    __builtin_constant_p (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20907 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)))
    ? (int) (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20907 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)))
    : -1 },
  { "(((TARGET_64BIT) && (TARGET_LZCNT)) && (TARGET_64BIT)) && (TARGET_LZCNT)",
    __builtin_constant_p (((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)))
    ? (int) (((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)))
    : -1 },
  { "(((TARGET_64BIT) && (TARGET_BMI)) && (TARGET_64BIT)) && (TARGET_BMI)",
    __builtin_constant_p (((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)))
    ? (int) (((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)))
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",


    __builtin_constant_p (
# 17773 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 17773 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (MINUS, V16SFmode, operands)\n   && 1 && 1) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_MINUS, V16HImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (CONST_INT_P (operands[2])\n       ? (INTVAL (operands[2]) < GET_MODE_BITSIZE (DImode)\n	  && INTVAL (operands[2])\n	       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n       : !memory_operand (operands[1], DImode))\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",






    __builtin_constant_p ((
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_DImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_DImode))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12364 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_DImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_DImode))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12364 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[4]) == REGNO (operands[0])\n   && REGNO (operands[5]) == REGNO (operands[3])\n   && peep2_reg_dead_p (4, operands[3])\n   && ((REGNO (operands[0]) == REGNO (operands[3]))\n       || peep2_reg_dead_p (2, operands[0]))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (HImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3), CCGOCmode)",
# 19740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode))
    ? (int)
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode))
    : -1 },
  { "(TARGET_MOVDIR64B) && (Pmode == SImode)",
    __builtin_constant_p (
# 21500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 10)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 21500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 10)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_SSE2) && (Pmode == DImode)",
    __builtin_constant_p (
# 16228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 16228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2\n   && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && 1",
    __builtin_constant_p
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1)
    ? (int)
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1)
    : -1 },
  { "(ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (XOR, DImode, operands)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX)))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH",
    __builtin_constant_p
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
  { "(!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",

    __builtin_constant_p (
# 18228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 18228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || QImode == SImode\n       || QImode == DImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (MINUS, SImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
# 8960 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n    && GET_MODE (operands[2]) != QImode\n    && (!REG_P (operands[2]) || ANY_QI_REG_P (operands[2]))\n    && ((ix86_match_ccmode (insn, CCZmode)\n	 && !(INTVAL (operands[3]) & ~255))\n	|| (ix86_match_ccmode (insn, CCNOmode)\n	    && !(INTVAL (operands[3]) & ~127)))",






    __builtin_constant_p
# 8960 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && ((machine_mode) (operands[2])->mode) != E_QImode
    && (!(((enum rtx_code) (operands[2])->code) == REG) || ((((enum rtx_code) (operands[2])->code) == REG) && (((ix86_isa_flags & (1UL << 1)) != 0) ? ((((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36))) : ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (0) <= (unsigned long) (3) - (unsigned long) (0)))))
    && ((ix86_match_ccmode (insn, E_CCZmode)
  && !(((operands[3])->u.hwint[0]) & ~255))
 || (ix86_match_ccmode (insn, E_CCNOmode)
     && !(((operands[3])->u.hwint[0]) & ~127))))
    ? (int)
# 8960 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && ((machine_mode) (operands[2])->mode) != E_QImode
    && (!(((enum rtx_code) (operands[2])->code) == REG) || ((((enum rtx_code) (operands[2])->code) == REG) && (((ix86_isa_flags & (1UL << 1)) != 0) ? ((((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36))) : ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (0) <= (unsigned long) (3) - (unsigned long) (0)))))
    && ((ix86_match_ccmode (insn, E_CCZmode)
  && !(((operands[3])->u.hwint[0]) & ~255))
 || (ix86_match_ccmode (insn, E_CCNOmode)
     && !(((operands[3])->u.hwint[0]) & ~127))))
    : -1 },
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATERT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()",



    __builtin_constant_p
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    ? (int)
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    : -1 },
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()",



    __builtin_constant_p
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    ? (int)
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    : -1 },
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && 1 && 1",
    __builtin_constant_p
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && 1)
    ? (int)
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && 1)
    : -1 },
# 15107 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[3]) == REGNO (operands[4])\n   && peep2_reg_dead_p (3, operands[1])\n   && peep2_reg_dead_p (3, operands[3])\n   && peep2_regno_dead_p (4, FLAGS_REG)",



    __builtin_constant_p
# 15107 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[3])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (3, operands[1])
   && peep2_reg_dead_p (3, operands[3])
   && peep2_regno_dead_p (4, 17))
    ? (int)
# 15107 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[3])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (3, operands[1])
   && peep2_reg_dead_p (3, operands[3])
   && peep2_regno_dead_p (4, 17))
    : -1 },
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, QImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])",


    __builtin_constant_p
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    ? (int)
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    : -1 },
# 6898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, HImode, operands)",
    __builtin_constant_p
# 6898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands))
    ? (int)
# 6898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512F && (V8DImode == V16SFmode\n									      || V8DImode == V8DFmode\n									      || V8DImode == V8DImode\n									      || V8DImode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DImode == E_V16SFmode
               || E_V8DImode == E_V8DFmode
               || E_V8DImode == E_V8DImode
               || E_V8DImode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DImode == E_V16SFmode
               || E_V8DImode == E_V8DFmode
               || E_V8DImode == E_V8DImode
               || E_V8DImode == E_V16SImode))))
    : -1 },
# 15074 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[2]) == REGNO (operands[3])\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (3, operands[2])\n   && peep2_regno_dead_p (4, FLAGS_REG)",



    __builtin_constant_p
# 15074 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[2])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (3, operands[2])
   && peep2_regno_dead_p (4, 17))
    ? (int)
# 15074 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[2])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (3, operands[2])
   && peep2_regno_dead_p (4, 17))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX && TARGET_AVX512DQ)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21201 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && ((ix86_isa_flags & (1UL << 13)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21201 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && ((ix86_isa_flags & (1UL << 13)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V32QImode)\n       == GET_MODE_NUNITS (V32QImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((((TARGET_AVX512VL) && (Pmode == SImode)) && (Pmode == SImode)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F && (16 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && 1 && 1) && (TARGET_SSE2)",

    __builtin_constant_p (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "CONST_INT_P (operands[2])\n   && (HImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, HImode, operands)\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
# 624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX_WITH_SSE && TARGET_SSE3",
    __builtin_constant_p
# 624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 52)) != 0))
    ? (int)
# 624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 52)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(reload_completed\n   && REGNO (operands[0]) != REGNO (operands[1])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 11017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (rhs_regno(operands[0])) != (rhs_regno(operands[1]))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (rhs_regno(operands[0])) != (rhs_regno(operands[1]))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == SImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode))",
    __builtin_constant_p (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_64BIT && TARGET_XSAVE) && (TARGET_XSAVEOPT)",
    __builtin_constant_p (
# 20946 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20887 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 62)) != 0)))
    ? (int) (
# 20946 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20887 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 62)) != 0)))
    : -1 },
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_FMA || TARGET_AVX512F",
    __builtin_constant_p
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
    ? (int)
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
    : -1 },
  { "(INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == DImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode))",
    __builtin_constant_p (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE4_1 && !flag_trapping_math) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 18497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 18497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || DImode == SImode\n       || DImode == DImode)) && (TARGET_AVX)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSSE3 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DFmode)\n       == GET_MODE_NUNITS (V32HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (SS_MINUS, V8QImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_MINUS, E_V8QImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_MINUS, E_V8QImode, operands))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V32QImode)\n       == GET_MODE_NUNITS (V4DFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    : -1 },
  { "(epilogue_completed) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 11334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(epilogue_completed) &&
# 1051 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(epilogue_completed) &&
# 1051 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
  { "(ix86_unary_operator_ok (PLUS, SImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && 1 && 1\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1
   && ix86_pre_reload_split ())
    ? (int)
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_GFNI) && (TARGET_AVX)",
    __builtin_constant_p (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 6122 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VL && TARGET_AVX512F",
    __builtin_constant_p
# 6122 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0))
    ? (int)
# 6122 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0))
    : -1 },
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (LSHIFTRT, SImode, operands)",





    __builtin_constant_p
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    ? (int)
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    : -1 },
  { "(TARGET_SSE && TARGET_64BIT) && (Pmode == DImode)",
    __builtin_constant_p (
# 22926 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 22926 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)",


    __builtin_constant_p
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0)))
    ? (int)
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0)))
    : -1 },
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	  || TARGET_MIX_SSE_I387)\n    && !flag_trapping_math)\n   || (TARGET_SSE4_1 && TARGET_SSE_MATH)",




    __builtin_constant_p
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && !flag_trapping_math)
   || (((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && !flag_trapping_math)
   || (((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && 1",
    __builtin_constant_p
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1)
    ? (int)
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1)
    : -1 },
  { "(INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == DImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",
    __builtin_constant_p (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
# 14535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_TBM",
    __builtin_constant_p
# 14535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 56)) != 0))
    ? (int)
# 14535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 56)) != 0))
    : -1 },
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NEG, HImode, operands)",
    __builtin_constant_p
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_HImode, operands))
    ? (int)
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_HImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_VAES) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 23377 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 18)) != 0)) &&
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 23377 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 18)) != 0)) &&
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V32HImode)\n       == GET_MODE_NUNITS (V8DFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    : -1 },
  { "(TARGET_LWP) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21132 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21132 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 8548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && reload_completed\n   && (TARGET_AVX512VL\n       || (REG_P (operands[0]) && !EXT_REX_SSE_REG_P (operands[1])))",



    __builtin_constant_p
# 8548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || ((((enum rtx_code) (operands[0])->code) == REG) && !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))))
    ? (int)
# 8548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || ((((enum rtx_code) (operands[0])->code) == REG) && !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))))
    : -1 },
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V8HImode))",


    __builtin_constant_p
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V8HImode).coeffs[0])))
    ? (int)
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V8HImode).coeffs[0])))
    : -1 },
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)",
    __builtin_constant_p
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode))
    ? (int)
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V16HImode)\n       == GET_MODE_NUNITS (V16HImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    : -1 },
# 15864 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && X87_ENABLE_ARITH (DFmode)\n   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 15864 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 15864 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(!(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_HIMODE_MATH)",
    __builtin_constant_p (
# 7472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1047 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_HIMODE_MATH]))
    ? (int) (
# 7472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1047 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_HIMODE_MATH]))
    : -1 },
  { "(TARGET_AVX512BW && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1) &&
# 412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1) &&
# 412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && (16 == 64 || TARGET_AVX512VL) && 1) && (TARGET_SSE2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (32 == 64 || TARGET_AVX512VL)\n   && avx_vpermilp_parallel (operands[2], V4DFmode)) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V4DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V4DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && 1 && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& (TARGET_SHIFT1\n	    || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFT, QImode, operands)",






    __builtin_constant_p
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_QImode, operands))
    ? (int)
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_QImode, operands))
    : -1 },
  { "(reload_completed) && (word_mode == SImode)",
    __builtin_constant_p (
# 13622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 13622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
  { "((TARGET_AVX512F\n   && (register_operand (operands[0], V64SFmode)\n       || register_operand (operands[1], V64SFmode))) && (TARGET_AVX5124FMAPS)) && ( reload_completed)",


    __builtin_constant_p ((
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SFmode)
       || register_operand (operands[1], E_V64SFmode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0))) &&
# 22622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SFmode)
       || register_operand (operands[1], E_V64SFmode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0))) &&
# 22622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)\n   && can_create_pseudo_p ()",



    __builtin_constant_p
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))
   && (!reload_in_progress && !reload_completed))
    ? (int)
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))
   && (!reload_in_progress && !reload_completed))
    : -1 },
# 11017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n   && REGNO (operands[0]) != REGNO (operands[1])",

    __builtin_constant_p
# 11017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (rhs_regno(operands[0])) != (rhs_regno(operands[1])))
    ? (int)
# 11017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (rhs_regno(operands[0])) != (rhs_regno(operands[1])))
    : -1 },
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSSE3 && 1 && 1",
    __builtin_constant_p
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1)
    ? (int)
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1)
    : -1 },
  { "(ix86_unary_operator_ok (MINUS, HImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 1448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 1448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 1448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
  { "((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ()) &&
# 12396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ()) &&
# 12396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 21182 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_RDRND",
    __builtin_constant_p
# 21182 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 44)) != 0))
    ? (int)
# 21182 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 44)) != 0))
    : -1 },
  { "(!(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",

    __builtin_constant_p (
# 18228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 18228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 15590 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_TLS_DIRECT_SEG_REFS",
    __builtin_constant_p
# 15590 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 27)) != 0))
    ? (int)
# 15590 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 27)) != 0))
    : -1 },
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && (REGNO (operands[4]) == REGNO (operands[0])\n       || REGNO (operands[4]) == REGNO (operands[3]))\n   && (rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n			     ? 3 : 0], operands[5])\n       ? rtx_equal_p (operands[2], operands[6])\n       : rtx_equal_p (operands[2], operands[5])\n	 && rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n				  ? 3 : 0], operands[6]))\n   && peep2_reg_dead_p (4, operands[4])\n   && peep2_reg_dead_p (5, operands[REGNO (operands[4]) == REGNO (operands[0])\n				    ? 3 : 0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[3], operands[0])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[2])\n   && (QImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))",
# 19994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode)))
    ? (int)
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode)))
    : -1 },
  { "(epilogue_completed) && (TARGET_64BIT)",
    __builtin_constant_p (
# 11334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(epilogue_completed) &&
# 1052 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(epilogue_completed) &&
# 1052 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && 1)",
    __builtin_constant_p (
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1))
    ? (int) (
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1))
    : -1 },
# 8939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VL\n   && (!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[2]))",

    __builtin_constant_p
# 8939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    ? (int)
# 8939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    : -1 },
  { "(!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_unary_operator_ok (NOT, DImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",


    __builtin_constant_p (
# 10361 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_unary_operator_ok (NOT, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 10365 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 10361 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_unary_operator_ok (NOT, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 10365 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_64BIT) && ( reload_completed)",
    __builtin_constant_p (
# 8484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 8486 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 8484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 8486 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)",





    __builtin_constant_p
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_QImode, operands))
    ? (int)
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_QImode, operands))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (XOR, V8QImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (XOR, E_V8QImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (XOR, E_V8QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)))
    : -1 },
# 1831 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX_WITH_SSE && TARGET_SSE4_1\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V2SImode))",


    __builtin_constant_p
# 1831 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V2SImode).coeffs[0])))
    ? (int)
# 1831 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V2SImode).coeffs[0])))
    : -1 },
# 23098 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VBMI2",
    __builtin_constant_p
# 23098 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0))
    ? (int)
# 23098 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0))
    : -1 },
  { "(TARGET_SHSTK) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_64BIT && TARGET_GNU2_TLS) && (ptr_mode == SImode)",
    __builtin_constant_p (
# 15538 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU2)) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    ? (int) (
# 15538 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU2)) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V32HImode)\n       == GET_MODE_NUNITS (V16SImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(!TARGET_64BIT && TARGET_XSAVE) && (TARGET_XSAVEOPT)",
    __builtin_constant_p (
# 20920 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20881 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 62)) != 0)))
    ? (int) (
# 20920 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20881 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 62)) != 0)))
    : -1 },
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (MINUS, V2SImode, operands)",

    __builtin_constant_p
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V2SImode, operands))
    ? (int)
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V2SImode, operands))
    : -1 },
  { "(TARGET_64BIT && TARGET_SSE) && (TARGET_SSE2)",
    __builtin_constant_p (
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V8SImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 20018 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && (REGNO (operands[5]) == REGNO (operands[0])\n       || REGNO (operands[5]) == REGNO (operands[3]))\n   && REGNO (operands[5]) == REGNO (operands[4])\n   && (rtx_equal_p (operands[REGNO (operands[5]) == REGNO (operands[0])\n			     ? 3 : 0], operands[6])\n       ? (REG_P (operands[2])\n	  ? REG_P (operands[7]) && REGNO (operands[2]) == REGNO (operands[7])\n	  : rtx_equal_p (operands[2], operands[7]))\n       : (rtx_equal_p (operands[REGNO (operands[5]) == REGNO (operands[0])\n				? 3 : 0], operands[7])\n	  && REG_P (operands[2])\n	  && REGNO (operands[2]) == REGNO (operands[6])))\n   && peep2_reg_dead_p (4, operands[5])\n   && peep2_reg_dead_p (5, operands[REGNO (operands[5]) == REGNO (operands[0])\n				    ? 3 : 0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[3], operands[0])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[2])\n   && (QImode != QImode\n       || immediate_operand (operands[2], SImode)\n       || any_QIreg_operand (operands[2], SImode))",
# 20042 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 20018 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[5])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[5])) == (rhs_regno(operands[3])))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[4]))
   && (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[6])
       ? ((((enum rtx_code) (operands[2])->code) == REG)
   ? (((enum rtx_code) (operands[7])->code) == REG) && (rhs_regno(operands[2])) == (rhs_regno(operands[7]))
   : rtx_equal_p (operands[2], operands[7]))
       : (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
    ? 3 : 0], operands[7])
   && (((enum rtx_code) (operands[2])->code) == REG)
   && (rhs_regno(operands[2])) == (rhs_regno(operands[6]))))
   && peep2_reg_dead_p (4, operands[5])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode)))
    ? (int)
# 20018 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[5])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[5])) == (rhs_regno(operands[3])))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[4]))
   && (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[6])
       ? ((((enum rtx_code) (operands[2])->code) == REG)
   ? (((enum rtx_code) (operands[7])->code) == REG) && (rhs_regno(operands[2])) == (rhs_regno(operands[7]))
   : rtx_equal_p (operands[2], operands[7]))
       : (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
    ? 3 : 0], operands[7])
   && (((enum rtx_code) (operands[2])->code) == REG)
   && (rhs_regno(operands[2])) == (rhs_regno(operands[6]))))
   && peep2_reg_dead_p (4, operands[5])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode)))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V8SImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && TARGET_64BIT)",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (SImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, SImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 18633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && TARGET_CMOVE\n   && !(MEM_P (operands[2]) && MEM_P (operands[3]))",

    __builtin_constant_p
# 18633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    ? (int)
# 18633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    : -1 },
  { "(!TARGET_X32\n   && !TARGET_INDIRECT_BRANCH_REGISTER\n   && SIBLING_CALL_P (peep2_next_insn (1))\n   && !reg_mentioned_p (operands[0],\n			CALL_INSN_FUNCTION_USAGE (peep2_next_insn (1)))) && (word_mode == DImode)",




    __builtin_constant_p (
# 13334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (1)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (1))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 13334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (1)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (1))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
# 11655 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && (optimize_function_for_size_p (cfun)\n       || !TARGET_PARTIAL_FLAG_REG_STALL\n       || (operands[2] == const1_rtx\n	   && TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (LSHIFTRT, SImode, operands)",






    __builtin_constant_p
# 11655 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (optimize_function_for_size_p ((cfun + 0))
       || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
       || (operands[2] == (const_int_rtx[64 +1])
    && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    ? (int)
# 11655 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (optimize_function_for_size_p ((cfun + 0))
       || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
       || (operands[2] == (const_int_rtx[64 +1])
    && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    : -1 },
  { "(ix86_binary_operator_ok (ROTATE, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_AVOID_VECTOR_DECODE\n   && SSE_FLOAT_MODE_P (SFmode)\n   && optimize_insn_for_speed_p ()",


    __builtin_constant_p
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && optimize_insn_for_speed_p ())
    ? (int)
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && optimize_insn_for_speed_p ())
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V8DFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_64BIT && TARGET_SSE2) && (TARGET_AVX2)",
    __builtin_constant_p (
# 16177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 381 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 16177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 381 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V4SImode == V16SFmode\n									      || V4SImode == V8DFmode\n									      || V4SImode == V8DImode\n									      || V4SImode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SImode == E_V16SFmode
               || E_V4SImode == E_V8DFmode
               || E_V4SImode == E_V8DImode
               || E_V4SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SImode == E_V16SFmode
               || E_V4SImode == E_V8DFmode
               || E_V4SImode == E_V8DImode
               || E_V4SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL) && 1)",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    : -1 },
  { "((!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   && rtx_equal_p (operands[0], operands[1])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 9814 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && rtx_equal_p (operands[0], operands[1])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9814 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && rtx_equal_p (operands[0], operands[1])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_AVOID_VECTOR_DECODE\n   && SSE_FLOAT_MODE_P (DFmode)\n   && optimize_insn_for_speed_p ()",


    __builtin_constant_p
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && optimize_insn_for_speed_p ())
    ? (int)
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && optimize_insn_for_speed_p ())
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512BW && TARGET_AVX512VL)",
    __builtin_constant_p (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20906 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20906 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 18433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CMOVE && !(MEM_P (operands[2]) && MEM_P (operands[3]))",
    __builtin_constant_p
# 18433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    ? (int)
# 18433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V32QImode)\n       == GET_MODE_NUNITS (V4DImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    : -1 },
# 4043 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "/* cltd is shorter than sarl $31, %eax */\n   !optimize_function_for_size_p (cfun)\n   && REGNO (operands[1]) == AX_REG\n   && REGNO (operands[2]) == DX_REG\n   && peep2_reg_dead_p (2, operands[1])\n   && peep2_reg_dead_p (3, operands[2])\n   && !reg_mentioned_p (operands[2], operands[3])",






    __builtin_constant_p
# 4043 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   !optimize_function_for_size_p ((cfun + 0))
   && (rhs_regno(operands[1])) == 0
   && (rhs_regno(operands[2])) == 1
   && peep2_reg_dead_p (2, operands[1])
   && peep2_reg_dead_p (3, operands[2])
   && !reg_mentioned_p (operands[2], operands[3]))
    ? (int)
# 4043 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   !optimize_function_for_size_p ((cfun + 0))
   && (rhs_regno(operands[1])) == 0
   && (rhs_regno(operands[2])) == 1
   && peep2_reg_dead_p (2, operands[1])
   && peep2_reg_dead_p (3, operands[2])
   && !reg_mentioned_p (operands[2], operands[3]))
    : -1 },
# 7123 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, HImode, operands)",
    __builtin_constant_p
# 7123 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands))
    ? (int)
# 7123 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands))
    : -1 },
# 6739 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCmode)\n   && ix86_binary_operator_ok (MINUS, SImode, operands)",

    __builtin_constant_p
# 6739 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    ? (int)
# 6739 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V32QImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V32QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V32QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(ix86_unary_operator_ok (NEG, TImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 9965 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_TImode, operands)) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9965 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_TImode, operands)) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(ix86_unary_operator_ok (PLUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(!TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC) && ( reload_completed)",
    __builtin_constant_p (
# 1245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 1247 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 1245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 1247 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE)",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5227 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5227 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)))
    : -1 },
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (PLUS, HImode, operands)",

    __builtin_constant_p
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_HImode, operands))
    ? (int)
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_HImode, operands))
    : -1 },
# 19898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[0]) == REGNO (operands[4])\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (5, operands[5])\n   && (QImode != QImode\n       || immediate_operand (operands[2], SImode)\n       || any_QIreg_operand (operands[2], SImode))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[5], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (4),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[5])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[5], operands[1])
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[5])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[5], operands[1])
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
  { "((TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && (((((((((((word_mode == SImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode))",


    __builtin_constant_p (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_FLOAT (SFmode, SImode))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (64 == 64 || TARGET_AVX512VL)\n   && (INTVAL (operands[2]) == (INTVAL (operands[6]) - 4)\n       && INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n       && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n       && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4)))",




    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && (((operands[2])->u.hwint[0]) == (((operands[6])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && (((operands[2])->u.hwint[0]) == (((operands[6])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4))))
    : -1 },
# 19698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && ix86_match_ccmode (peep2_next_insn (1),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",







    __builtin_constant_p
# 19698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
# 9052 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (AND, DImode, operands)",
    __builtin_constant_p
# 9052 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (AND, E_DImode, operands))
    ? (int)
# 9052 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (AND, E_DImode, operands))
    : -1 },
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NEG, SImode, operands)\n   && mode_signbit_p (SImode, operands[2])",

    __builtin_constant_p
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_SImode, operands)
   && mode_signbit_p (E_SImode, operands[2]))
    ? (int)
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_SImode, operands)
   && mode_signbit_p (E_SImode, operands[2]))
    : -1 },
# 11105 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && (optimize_function_for_size_p (cfun)\n       || !TARGET_PARTIAL_FLAG_REG_STALL\n       || (operands[2] == const1_rtx\n	   && (TARGET_SHIFT1\n	       || TARGET_DOUBLE_WITH_ADD)))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFT, SImode, operands)",







    __builtin_constant_p
# 11105 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (optimize_function_for_size_p ((cfun + 0))
       || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
       || (operands[2] == (const_int_rtx[64 +1])
    && (ix86_tune_features[X86_TUNE_SHIFT1]
        || ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD])))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    ? (int)
# 11105 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (optimize_function_for_size_p ((cfun + 0))
       || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
       || (operands[2] == (const_int_rtx[64 +1])
    && (ix86_tune_features[X86_TUNE_SHIFT1]
        || ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD])))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DImode)\n       == GET_MODE_NUNITS (V8SImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    : -1 },
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (QImode))",


    __builtin_constant_p
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0])))
    ? (int)
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0])))
    : -1 },
# 17129 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 17129 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 17129 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((HImode == HImode\n       && TARGET_LCP_STALL)\n       || (TARGET_SPLIT_LONG_MOVES\n          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))",




    __builtin_constant_p
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_HImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn)))
    ? (int)
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_HImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn)))
    : -1 },
  { "((TARGET_SINGLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == SImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",

    __builtin_constant_p (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
  { "(((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_TBM) && (TARGET_64BIT)",
    __builtin_constant_p (
# 14535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 56)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 56)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(ix86_unary_operator_ok (PLUS, HImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 620 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "(rtx_equal_p (operands[0], operands[5])\n    && rtx_equal_p (operands[1], operands[6]))\n   || (rtx_equal_p (operands[0], operands[6])\n       && rtx_equal_p (operands[1], operands[5]))",



    __builtin_constant_p
# 620 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rtx_equal_p (operands[0], operands[5])
    && rtx_equal_p (operands[1], operands[6]))
   || (rtx_equal_p (operands[0], operands[6])
       && rtx_equal_p (operands[1], operands[5])))
    ? (int)
# 620 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rtx_equal_p (operands[0], operands[5])
    && rtx_equal_p (operands[1], operands[6]))
   || (rtx_equal_p (operands[0], operands[6])
       && rtx_equal_p (operands[1], operands[5])))
    : -1 },
  { "((optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (LSHIFTRT, DImode, operands)) && (TARGET_64BIT)",





    __builtin_constant_p (
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2)",
    __builtin_constant_p (
# 9715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 9715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (SS_PLUS, V4HImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_PLUS, E_V4HImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_PLUS, E_V4HImode, operands))
    : -1 },
# 10811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (ASHIFT, SImode, operands)",
    __builtin_constant_p
# 10811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    ? (int)
# 10811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (PLUS, V16HImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V16HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V16HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_SSE2 && 1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(REGNO (operands[2]) == REGNO (operands[3])\n  && general_operand (operands[4], SImode)\n  && (general_reg_operand (operands[4], SImode)\n      || memory_operand (operands[4], SImode)\n      || immediate_operand (operands[4], SImode))\n  && !reg_overlap_mentioned_p (operands[3], operands[4])) && (ptr_mode == DImode)",





    __builtin_constant_p (
# 20651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[2])) == (rhs_regno(operands[3]))
  && general_operand (operands[4], E_SImode)
  && (general_reg_operand (operands[4], E_SImode)
      || memory_operand (operands[4], E_SImode)
      || immediate_operand (operands[4], E_SImode))
  && !reg_overlap_mentioned_p (operands[3], operands[4])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    ? (int) (
# 20651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[2])) == (rhs_regno(operands[3]))
  && general_operand (operands[4], E_SImode)
  && (general_reg_operand (operands[4], E_SImode)
      || memory_operand (operands[4], E_SImode)
      || immediate_operand (operands[4], E_SImode))
  && !reg_overlap_mentioned_p (operands[3], operands[4])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    : -1 },
# 13300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_MACHO\n   && !TARGET_64BIT\n   && !TARGET_INDIRECT_BRANCH_REGISTER\n   && SIBLING_CALL_P (insn)",



    __builtin_constant_p
# 13300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!0
   && !((ix86_isa_flags & (1UL << 1)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((insn))->jump))
    ? (int)
# 13300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!0
   && !((ix86_isa_flags & (1UL << 1)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((insn))->jump))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V8DFmode, operands)\n   && 1 && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX\n   && (V8SFmode != V4DFmode || !TARGET_AVX2 || operands[3] == const0_rtx)) && ( reload_completed)",

    __builtin_constant_p (
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V8SFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64]))) &&
# 20265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V8SFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64]))) &&
# 20265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(!TARGET_AVX\n   && TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && (!EXT_REX_SSE_REG_P (operands[0])\n       || TARGET_AVX512VL)) && (TARGET_64BIT)",




    __builtin_constant_p (
# 5025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 8)) != 0)
   && ix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 8)) != 0)
   && ix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, HImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])",


    __builtin_constant_p
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    ? (int)
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (64 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 9502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE3 && reload_completed",
    __builtin_constant_p
# 9502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && reload_completed)
    ? (int)
# 9502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && reload_completed)
    : -1 },
  { "(TARGET_BMI) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p (
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) (
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (INTVAL (operands[3])\n       == (GET_MODE_UNIT_SIZE (V16SImode) == 4 ? 0xFFF0 : 0xFC))",


    __builtin_constant_p
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V16SImode) == 4 ? 0xFFF0 : 0xFC)))
    ? (int)
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V16SImode) == 4 ? 0xFFF0 : 0xFC)))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V8SFmode)\n       == GET_MODE_NUNITS (V4DFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BW) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12730 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12730 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512BW && !(MEM_P (operands[1]) && MEM_P (operands[2])))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V4SFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && 1 && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || HImode == SImode\n       || HImode == DImode)) && (TARGET_AVX512BW)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "((TARGET_DOUBLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == SImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",

    __builtin_constant_p (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 2913 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && reload_completed",
    __builtin_constant_p
# 2913 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed)
    ? (int)
# 2913 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed)
    : -1 },
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (XOR, QImode, operands)",

    __builtin_constant_p
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_QImode, operands))
    ? (int)
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_QImode, operands))
    : -1 },
  { "(TARGET_RDSEED) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21192 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 45)) != 0)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21192 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 45)) != 0)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(optimize_insn_for_size_p ()\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == SImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",

    __builtin_constant_p (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 1391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE2",
    __builtin_constant_p
# 1391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 51)) != 0))
    ? (int)
# 1391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 51)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1 && TARGET_AVX512BW && TARGET_AVX512VL\n   && ix86_pre_reload_split ())",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V2DFmode == V4SFmode)) && (TARGET_SSE2))",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V4SFmode)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V4SFmode)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
# 8737 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn,\n		      CONST_INT_P (operands[1])\n		      && INTVAL (operands[1]) >= 0 ? CCNOmode : CCZmode)",


    __builtin_constant_p
# 8737 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn,
        (((enum rtx_code) (operands[1])->code) == CONST_INT)
        && ((operands[1])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    ? (int)
# 8737 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn,
        (((enum rtx_code) (operands[1])->code) == CONST_INT)
        && ((operands[1])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    : -1 },
  { "(TARGET_AVX512BW && TARGET_AVX512VL) && (TARGET_AVX2)",
    __builtin_constant_p (
# 16693 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 16674 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 16693 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 16674 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_LZCNT) && (TARGET_64BIT)",
    __builtin_constant_p (
# 14225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 518 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "TARGET_CMPXCHG",
    __builtin_constant_p
# 518 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG])
    ? (int)
# 518 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG])
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 21580 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CLDEMOTE",
    __builtin_constant_p
# 21580 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 4)) != 0))
    ? (int)
# 21580 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 4)) != 0))
    : -1 },
  { "(TARGET_AVX2 && 1\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1
   && ix86_pre_reload_split ()) &&
# 18071 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1
   && ix86_pre_reload_split ()) &&
# 18071 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
  { "(TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && 1) && (TARGET_AVX)",


    __builtin_constant_p (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && TARGET_AVX512BW && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15182 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15182 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 18673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(DFmode != DFmode || TARGET_64BIT)\n   && TARGET_80387 && TARGET_CMOVE\n   && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && optimize_insn_for_speed_p ()",




    __builtin_constant_p
# 18673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((E_DFmode != E_DFmode || ((ix86_isa_flags & (1UL << 1)) != 0))
   && ((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    ? (int)
# 18673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((E_DFmode != E_DFmode || ((ix86_isa_flags & (1UL << 1)) != 0))
   && ((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DImode)\n       == GET_MODE_NUNITS (V8DFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    : -1 },
# 20504 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_3DNOW || TARGET_PREFETCH_SSE || TARGET_PRFCHW || TARGET_PREFETCHWT1",
    __builtin_constant_p
# 20504 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 2)) != 0) || x86_prefetch_sse || ((ix86_isa_flags & (1UL << 43)) != 0) || ((ix86_isa_flags & (1UL << 42)) != 0))
    ? (int)
# 20504 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 2)) != 0) || x86_prefetch_sse || ((ix86_isa_flags & (1UL << 43)) != 0) || ((ix86_isa_flags & (1UL << 42)) != 0))
    : -1 },
  { "(TARGET_64BIT && TARGET_XSAVE) && (TARGET_XSAVEC)",
    __builtin_constant_p (
# 20946 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20888 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 61)) != 0)))
    ? (int) (
# 20946 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20888 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 61)) != 0)))
    : -1 },
  { "((ix86_binary_operator_ok (LSHIFTRT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",



    __builtin_constant_p ((
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 4566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || (TARGET_64BIT && SSE_FLOAT_MODE_P (SFmode))",
    __builtin_constant_p
# 4566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))))
    ? (int)
# 4566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))))
    : -1 },
# 18673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(SFmode != DFmode || TARGET_64BIT)\n   && TARGET_80387 && TARGET_CMOVE\n   && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && optimize_insn_for_speed_p ()",




    __builtin_constant_p
# 18673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((E_SFmode != E_DFmode || ((ix86_isa_flags & (1UL << 1)) != 0))
   && ((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    ? (int)
# 18673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((E_SFmode != E_DFmode || ((ix86_isa_flags & (1UL << 1)) != 0))
   && ((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    : -1 },
# 10449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)",
    __builtin_constant_p
# 10449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode))
    ? (int)
# 10449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode))
    : -1 },
# 19437 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p () && ix86_match_ccmode (insn, CCNOmode)",
    __builtin_constant_p
# 19437 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p () && ix86_match_ccmode (insn, E_CCNOmode))
    ? (int)
# 19437 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p () && ix86_match_ccmode (insn, E_CCNOmode))
    : -1 },
# 2060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_SSE4_1\n   && reload_completed",

    __builtin_constant_p
# 2060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed)
    ? (int)
# 2060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed)
    : -1 },
  { "(TARGET_BMI && TARGET_64BIT) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p (
# 14061 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14063 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) (
# 14061 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14063 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V64QImode)\n       == GET_MODE_NUNITS (V16SImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    : -1 },
  { "((TARGET_SINGLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == DImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode))",

    __builtin_constant_p (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 2568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX",
    __builtin_constant_p
# 2568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0))
    ? (int)
# 2568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0))
    : -1 },
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "!TARGET_64BIT && (TARGET_80387 || TARGET_SSE)",
    __builtin_constant_p
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0)))
    ? (int)
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_PLUS, V32QImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V4DImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (XFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)) && ( reload_completed)",


    __builtin_constant_p (
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))) &&
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))) &&
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ) && (TARGET_AVX512VL)))",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
# 19520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "! TARGET_PARTIAL_REG_STALL\n   && ix86_match_ccmode (insn, CCNOmode)\n   && REGNO (operands[2]) != AX_REG\n   && peep2_reg_dead_p (1, operands[2])",



    __builtin_constant_p
# 19520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_match_ccmode (insn, E_CCNOmode)
   && (rhs_regno(operands[2])) != 0
   && peep2_reg_dead_p (1, operands[2]))
    ? (int)
# 19520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_match_ccmode (insn, E_CCNOmode)
   && (rhs_regno(operands[2])) != 0
   && peep2_reg_dead_p (1, operands[2]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || HImode == SImode\n       || HImode == DImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 14807 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && 1\n   && INTVAL (operands[2]) + 4 == INTVAL (operands[6])\n   && INTVAL (operands[3]) + 4 == INTVAL (operands[7])\n   && INTVAL (operands[4]) + 4 == INTVAL (operands[8])\n   && INTVAL (operands[5]) + 4 == INTVAL (operands[9])",





    __builtin_constant_p
# 14807 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && 1
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0]))
    ? (int)
# 14807 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && 1
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0]))
    : -1 },
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && 1 && 1",
    __builtin_constant_p
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1)
    ? (int)
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1)
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && (!true\n       || HImode == SImode\n       || HImode == DImode))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_HImode == E_SImode
       || E_HImode == E_DImode)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_HImode == E_SImode
       || E_HImode == E_DImode)))
    : -1 },
  { "(TARGET_SSE && TARGET_SSE_MATH) && (TARGET_AVX)",
    __builtin_constant_p (
# 2077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 331 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 2077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 331 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V16HImode)\n       || register_operand (operands[1], V16HImode))) && (TARGET_AVX)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16HImode)
       || register_operand (operands[1], E_V16HImode))) &&
# 213 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16HImode)
       || register_operand (operands[1], E_V16HImode))) &&
# 213 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (EQ, V2SImode, operands)",

    __builtin_constant_p
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (EQ, E_V2SImode, operands))
    ? (int)
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (EQ, E_V2SImode, operands))
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (PLUS, V4DImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 16693 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && TARGET_AVX512VL",
    __builtin_constant_p
# 16693 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0))
    ? (int)
# 16693 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_MMX_WITH_SSE) && ( reload_completed)",
    __builtin_constant_p (
# 270 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 272 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
( reload_completed))
    ? (int) (
# 270 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 272 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V2DImode == V16SFmode\n									      || V2DImode == V8DFmode\n									      || V2DImode == V8DImode\n									      || V2DImode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DImode == E_V16SFmode
               || E_V2DImode == E_V8DFmode
               || E_V2DImode == E_V8DImode
               || E_V2DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DImode == E_V16SFmode
               || E_V2DImode == E_V8DFmode
               || E_V2DImode == E_V8DImode
               || E_V2DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode)\n   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC) && ( reload_completed)",


    __builtin_constant_p (
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 5081 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 5081 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",

    __builtin_constant_p (
# 17937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 17937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_SSE4_1) && (TARGET_SSE2)",
    __builtin_constant_p (
# 18303 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 18303 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 19299 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "! TARGET_PARTIAL_REG_STALL && reload_completed\n   && optimize_insn_for_speed_p ()\n   && ((GET_MODE (operands[1]) == HImode && ! TARGET_FAST_PREFIX)\n       || (GET_MODE (operands[1]) == QImode && TARGET_PROMOTE_QImode))\n   /* Ensure that the operand will remain sign-extended immediate.  */\n   && ix86_match_ccmode (insn, INTVAL (operands[4]) >= 0 ? CCNOmode : CCZmode)",





    __builtin_constant_p
# 19299 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && optimize_insn_for_speed_p ()
   && ((((machine_mode) (operands[1])->mode) == E_HImode && ! ix86_tune_features[X86_TUNE_FAST_PREFIX])
       || (((machine_mode) (operands[1])->mode) == E_QImode && ix86_tune_features[X86_TUNE_PROMOTE_QIMODE]))

   && ix86_match_ccmode (insn, ((operands[4])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    ? (int)
# 19299 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && optimize_insn_for_speed_p ()
   && ((((machine_mode) (operands[1])->mode) == E_HImode && ! ix86_tune_features[X86_TUNE_FAST_PREFIX])
       || (((machine_mode) (operands[1])->mode) == E_QImode && ix86_tune_features[X86_TUNE_PROMOTE_QIMODE]))

   && ix86_match_ccmode (insn, ((operands[4])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    : -1 },
# 4566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || (TARGET_64BIT && SSE_FLOAT_MODE_P (DFmode))",
    __builtin_constant_p
# 4566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))))
    ? (int)
# 4566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))))
    : -1 },
# 958 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW_A || TARGET_MMX_WITH_SSE",
    __builtin_constant_p
# 958 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 3)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int)
# 958 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 3)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 20080 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(! TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n   && peep2_regno_dead_p (0, FLAGS_REG)",

    __builtin_constant_p
# 20080 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((! ix86_tune_features[X86_TUNE_USE_MOV0] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20080 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((! ix86_tune_features[X86_TUNE_USE_MOV0] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_AVX2 && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 21502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1) &&
# 409 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 21502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1) &&
# 409 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "CONST_INT_P (operands[2])\n   && (QImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, QImode, operands)\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "((((TARGET_64BIT) && (TARGET_BMI)) && (TARGET_64BIT)) && (TARGET_BMI)) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p ((((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) ((((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
  { "(!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (XFmode, DImode)\n   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC) && ( reload_completed)",


    __builtin_constant_p (
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 5081 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 5081 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V8SFmode)\n       || register_operand (operands[1], V8SFmode))) && (TARGET_AVX)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8SFmode)
       || register_operand (operands[1], E_V8SFmode))) &&
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8SFmode)
       || register_operand (operands[1], E_V8SFmode))) &&
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_64BIT && TARGET_STV) && (Pmode == DImode)",
    __builtin_constant_p (
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
# 11919 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_BMI2 && reload_completed",
    __builtin_constant_p
# 11919 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed)
    ? (int)
# 11919 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && 1 && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_64BIT && TARGET_SSE) && ( reload_completed)",
    __builtin_constant_p (
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 16091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 16091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
# 15349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && !TARGET_64BIT\n   && reload_completed",

    __builtin_constant_p
# 15349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((ix86_isa_flags & (1UL << 1)) != 0)
   && reload_completed)
    ? (int)
# 15349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((ix86_isa_flags & (1UL << 1)) != 0)
   && reload_completed)
    : -1 },
  { "(ix86_binary_operator_ok (IOR, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_DImode, operands)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_DImode, operands)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (AND, V8QImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (AND, E_V8QImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (AND, E_V8QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V4DImode == V16SFmode\n									      || V4DImode == V8DFmode\n									      || V4DImode == V8DImode\n									      || V4DImode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DImode == E_V16SFmode
               || E_V4DImode == E_V8DFmode
               || E_V4DImode == E_V8DImode
               || E_V4DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DImode == E_V16SFmode
               || E_V4DImode == E_V8DFmode
               || E_V4DImode == E_V8DImode
               || E_V4DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 13372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 13372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 14792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_POPCNT\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 14792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)
   && ix86_pre_reload_split ())
    ? (int)
# 14792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)
   && ix86_pre_reload_split ())
    : -1 },
# 1998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX_WITH_SSE && TARGET_SSE4_1",
    __builtin_constant_p
# 1998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0))
    ? (int)
# 1998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_FMA) && (TARGET_SSE2))",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "((TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && ((((((((word_mode == DImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",


    __builtin_constant_p (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",


    __builtin_constant_p (
# 17773 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 17773 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	  || TARGET_MIX_SSE_I387)\n    && !flag_trapping_math)\n   || (TARGET_SSE4_1 && TARGET_SSE_MATH)",




    __builtin_constant_p
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && !flag_trapping_math)
   || (((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && !flag_trapping_math)
   || (((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 2723 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "peep2_reg_dead_p (3, operands[0])\n   && optimize_insn_for_size_p ()",

    __builtin_constant_p
# 2723 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (3, operands[0])
   && optimize_insn_for_size_p ())
    ? (int)
# 2723 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (3, operands[0])
   && optimize_insn_for_size_p ())
    : -1 },
  { "(TARGET_SSE) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 13262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 4998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_FMA4",
    __builtin_constant_p
# 4998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 30)) != 0))
    ? (int)
# 4998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 30)) != 0))
    : -1 },
# 9478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(~INTVAL (operands[2]) & ~255)\n    && !(INTVAL (operands[2]) & 128)",



    __builtin_constant_p
# 9478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~255)
    && !(((operands[2])->u.hwint[0]) & 128))
    ? (int)
# 9478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~255)
    && !(((operands[2])->u.hwint[0]) & 128))
    : -1 },
  { "(TARGET_AVX && 1\n   && avx_vpermilp_parallel (operands[2], V8DFmode)) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V8DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V8DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (SMIN, V2SFmode, operands)",

    __builtin_constant_p
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SMIN, E_V2SFmode, operands))
    ? (int)
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SMIN, E_V2SFmode, operands))
    : -1 },
# 20344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_PARTIAL_REG_STALL\n   || SImode == SImode\n   || optimize_function_for_size_p (cfun)",


    __builtin_constant_p
# 20344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   || E_SImode == E_SImode
   || optimize_function_for_size_p ((cfun + 0)))
    ? (int)
# 20344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   || E_SImode == E_SImode
   || optimize_function_for_size_p ((cfun + 0)))
    : -1 },
  { "(TARGET_AVX512IFMA) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 22551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 16)) != 0)) &&
# 375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 22551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 16)) != 0)) &&
# 375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSSE3 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_SSSE3 || TARGET_AVX || TARGET_XOP) && (TARGET_AVX512VBMI)",
    __builtin_constant_p (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13041 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)))
    ? (int) (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13041 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)))
    : -1 },
# 17190 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4A",
    __builtin_constant_p
# 17190 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 54)) != 0))
    ? (int)
# 17190 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 54)) != 0))
    : -1 },
  { "(TARGET_AVOID_VECTOR_DECODE\n   && SSE_FLOAT_MODE_P (DFmode)\n   && optimize_insn_for_speed_p ()) && (TARGET_64BIT)",


    __builtin_constant_p (
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && optimize_insn_for_speed_p ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 4755 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_AVOID_VECTOR_DECODE]
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && optimize_insn_for_speed_p ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SImode)\n       == GET_MODE_NUNITS (V4DImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    : -1 },
  { "(SIBLING_CALL_P (insn)) && (word_mode == SImode)",
    __builtin_constant_p (
# 13315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 13315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
# 5727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && ix86_match_ccmode (insn, CCGCmode)",

    __builtin_constant_p
# 5727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_match_ccmode (insn, E_CCGCmode))
    ? (int)
# 5727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_match_ccmode (insn, E_CCGCmode))
    : -1 },
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (LSHIFTRT, SImode, operands)",
    __builtin_constant_p
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    ? (int)
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    : -1 },
  { "(TARGET_64BIT && TARGET_USE_BT\n   && ix86_binary_operator_ok (IOR, DImode, operands)\n   && IN_RANGE (exact_log2 (INTVAL (operands[2])), 31, 63)) && ( reload_completed)",


    __builtin_constant_p (
# 9650 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31))) &&
# 9654 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 9650 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31))) &&
# 9654 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_SSE2) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 19771 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 19771 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_GFNI) && (TARGET_AVX))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()) && ( 1)",



    __builtin_constant_p (
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 12432 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 12432 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (MINUS, QImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
# 1740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && epilogue_completed\n   && !symbolic_operand (operands[1], DImode)\n   && !x86_64_immediate_operand (operands[1], DImode)",


    __builtin_constant_p
# 1740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && epilogue_completed
   && !symbolic_operand (operands[1], E_DImode)
   && !x86_64_immediate_operand (operands[1], E_DImode))
    ? (int)
# 1740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && epilogue_completed
   && !symbolic_operand (operands[1], E_DImode)
   && !x86_64_immediate_operand (operands[1], E_DImode))
    : -1 },
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& (TARGET_SHIFT1\n	    || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFT, SImode, operands)",






    __builtin_constant_p
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    ? (int)
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)) && (TARGET_AVX512DQ)",
    __builtin_constant_p (
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode)) &&
# 1308 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    ? (int) (
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode)) &&
# 1308 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    : -1 },
  { "(TARGET_XADD) && (TARGET_64BIT)",
    __builtin_constant_p (
# 685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_XADD]) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_XADD]) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512BF16) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 23483 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0)) &&
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 23483 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0)) &&
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (MULT, V2SFmode, operands)",

    __builtin_constant_p
# 374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MULT, E_V2SFmode, operands))
    ? (int)
# 374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MULT, E_V2SFmode, operands))
    : -1 },
# 2378 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW)",

    __builtin_constant_p
# 2378 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 2)) != 0)))
    ? (int)
# 2378 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 2)) != 0)))
    : -1 },
# 21014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_XSAVE",
    __builtin_constant_p
# 21014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0))
    ? (int)
# 21014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0))
    : -1 },
  { "((!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   && (rtx_equal_p (operands[0], operands[1])\n       || rtx_equal_p (operands[0], operands[2]))) && (TARGET_64BIT)",



    __builtin_constant_p (
# 9840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && (rtx_equal_p (operands[0], operands[1])
       || rtx_equal_p (operands[0], operands[2]))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && (rtx_equal_p (operands[0], operands[1])
       || rtx_equal_p (operands[0], operands[2]))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "((TARGET_DOUBLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == DImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode))",

    __builtin_constant_p (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 5536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && reload_completed && ix86_lea_for_add_ok (insn, operands)",
    __builtin_constant_p
# 5536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed && ix86_lea_for_add_ok (insn, operands))
    ? (int)
# 5536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed && ix86_lea_for_add_ok (insn, operands))
    : -1 },
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[4]) == REGNO (operands[0])\n   && REGNO (operands[5]) == REGNO (operands[3])\n   && peep2_reg_dead_p (4, operands[3])\n   && ((REGNO (operands[0]) == REGNO (operands[3]))\n       || peep2_reg_dead_p (2, operands[0]))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (QImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3), CCGOCmode)",
# 19740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode))
    ? (int)
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V32HImode, operands)) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V32HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V32HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "((IN_RANGE (exact_log2 (UINTVAL (operands[3])), 1, 31)) && (TARGET_64BIT)) && ( reload_completed)",
    __builtin_constant_p ((
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 8343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) ((
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 8343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 8921 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 8921 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 8921 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V8HImode)\n       == GET_MODE_NUNITS (V16QImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    : -1 },
# 5048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT\n   && SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH",

    __builtin_constant_p
# 5048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 5048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
  { "(TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)) && (TARGET_AVX512BW && TARGET_64BIT)",
    __builtin_constant_p (
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode)) &&
# 1309 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode)) &&
# 1309 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DFmode)\n       == GET_MODE_NUNITS (V16SFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V8SImode)\n       == GET_MODE_NUNITS (V8SFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    : -1 },
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (operands[2] == CONST0_RTX (V2DImode)\n       || !MEM_P (operands[1]))",


    __builtin_constant_p
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V2DImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V2DImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512BF16)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 23474 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 23474 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0)))
    : -1 },
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ptr_mode == DImode",
    __builtin_constant_p
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode)
    ? (int)
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode)
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, QImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (MINUS, HImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DFmode)\n       == GET_MODE_NUNITS (V4DImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V8DFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && X87_ENABLE_FLOAT (XFmode, HImode)\n   && !(SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)\n   && (TARGET_USE_HIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",



    __builtin_constant_p
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_HImode) == E_SImode) || (E_HImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_HImode) == E_SImode) || (E_HImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || QImode == SImode\n       || QImode == DImode)) && (TARGET_AVX512BW))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "((TARGET_64BIT && TARGET_STV) && (Pmode == SImode)) && ( reload_completed)",
    __builtin_constant_p ((
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) ((
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512F && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode))))
    : -1 },
# 4220 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || (TARGET_SSE2 && TARGET_SSE_MATH)",
    __builtin_constant_p
# 4220 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4220 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_SSE && 1 && 1) && (TARGET_SSE2)",
    __builtin_constant_p (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW || TARGET_MMX_WITH_SSE",
    __builtin_constant_p
# 898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int)
# 898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (MINUS, V32QImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V32QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V32QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_CLZERO) && (Pmode == DImode)",
    __builtin_constant_p (
# 21411 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 5)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 21411 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 5)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && !flag_trapping_math && !flag_rounding_math)",






    __builtin_constant_p
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V16QImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V16QImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V16QImode, operands))
    : -1 },
  { "(TARGET_SSE4_1 && TARGET_AVX512VL\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()) &&
# 18222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()) &&
# 18222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V32QImode)\n       == GET_MODE_NUNITS (V8SImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    : -1 },
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSSE3 && 1 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(ix86_match_ccmode (insn, CCmode)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 1426 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 1426 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || HImode != DImode))\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_HImode != E_DImode))
   && ix86_pre_reload_split ()) &&
# 4789 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_HImode != E_DImode))
   && ix86_pre_reload_split ()) &&
# 4789 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSE2\n   && (GET_MODE_NUNITS (V2DFmode)\n       == GET_MODE_NUNITS (V4SImode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 9202 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 9202 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (PLUS, V2SImode, operands)",

    __builtin_constant_p
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V2SImode, operands))
    ? (int)
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V2SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && 1) && (TARGET_AVX2)",
    __builtin_constant_p (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_PTWRITE) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21172 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 13)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21172 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 13)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || SImode != DImode))\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_SImode != E_DImode))
   && ix86_pre_reload_split ()) &&
# 4789 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_SImode != E_DImode))
   && ix86_pre_reload_split ()) &&
# 4789 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && TARGET_AVX512BW && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    : -1 },
  { "((TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 1964 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 1964 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (SS_PLUS, V8QImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_PLUS, E_V8QImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_PLUS, E_V8QImode, operands))
    : -1 },
  { "(TARGET_AVX512BW && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (HImode))) && (TARGET_AVX512VL && TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1) && (TARGET_AVX2)",

    __builtin_constant_p (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE\n   && (16 == 64 || TARGET_AVX512VL) && 1)",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_GFNI) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V8SFmode, operands)\n   && 1 && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_XOP || (TARGET_AVX512BW && TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19621 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || (((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19621 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || (((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(optimize_insn_for_size_p ()\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == DImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",

    __builtin_constant_p (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (XFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)",


    __builtin_constant_p
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0)))
    ? (int)
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0)))
    : -1 },
# 19811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_XOP || TARGET_AVX512VL",
    __builtin_constant_p
# 19811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0))
    ? (int)
# 19811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V8SFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX2) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 12448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSE3\n   && can_create_pseudo_p ()\n   && ((rtx_equal_p (operands[1], operands[3])\n	&& rtx_equal_p (operands[2], operands[4]))\n       || (rtx_equal_p (operands[1], operands[4])\n	   && rtx_equal_p (operands[2], operands[3])))) && (TARGET_SSE2)",





    __builtin_constant_p (
# 2435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && (!reload_in_progress && !reload_completed)
   && ((rtx_equal_p (operands[1], operands[3])
 && rtx_equal_p (operands[2], operands[4]))
       || (rtx_equal_p (operands[1], operands[4])
    && rtx_equal_p (operands[2], operands[3])))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 2435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && (!reload_in_progress && !reload_completed)
   && ((rtx_equal_p (operands[1], operands[3])
 && rtx_equal_p (operands[2], operands[4]))
       || (rtx_equal_p (operands[1], operands[4])
    && rtx_equal_p (operands[2], operands[3])))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 13748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_LP64",
    __builtin_constant_p
# 13748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 4)) != 0))
    ? (int)
# 13748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 4)) != 0))
    : -1 },
# 2193 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC",

    __builtin_constant_p
# 2193 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_FROM_VEC])
    ? (int)
# 2193 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_FROM_VEC])
    : -1 },
# 7123 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, QImode, operands)",
    __builtin_constant_p
# 7123 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands))
    ? (int)
# 7123 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands))
    : -1 },
  { "(TARGET_SSE && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX)",

    __builtin_constant_p (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SFmode)\n       == GET_MODE_NUNITS (V16HImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    : -1 },
# 6929 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (MINUS, SImode, operands)",
    __builtin_constant_p
# 6929 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    ? (int)
# 6929 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    : -1 },
  { "(TARGET_VAES) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 23377 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 18)) != 0)) &&
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 23377 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 18)) != 0)) &&
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_POPCNT\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 14792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)
   && ix86_pre_reload_split ()) &&
# 14795 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 14792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)
   && ix86_pre_reload_split ()) &&
# 14795 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSSE3 || TARGET_AVX || TARGET_XOP) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13041 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13041 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATE, SImode, operands)",
    __builtin_constant_p
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_SImode, operands))
    ? (int)
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_SImode, operands))
    : -1 },
# 7028 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, SImode, operands)",
    __builtin_constant_p
# 7028 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands))
    ? (int)
# 7028 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands))
    : -1 },
  { "(!TARGET_64BIT && (TARGET_80387 || TARGET_SSE)) && ( reload_completed)",
    __builtin_constant_p (
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))) &&
# 353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
( reload_completed))
    ? (int) (
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))) &&
# 353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
( reload_completed))
    : -1 },
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (SFmode)\n   && (!TARGET_FISTTP || TARGET_SSE_MATH)",

    __builtin_constant_p
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)",





    __builtin_constant_p
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_HImode, operands))
    ? (int)
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_HImode, operands))
    : -1 },
  { "(ix86_match_ccmode (insn, CCGOCmode)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_64BIT)",

    __builtin_constant_p (
# 5811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(!TARGET_X32\n   && !TARGET_INDIRECT_BRANCH_REGISTER\n   && peep2_reg_dead_p (2, operands[0])) && (word_mode == SImode)",


    __builtin_constant_p (
# 13238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && peep2_reg_dead_p (2, operands[0])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 13238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && peep2_reg_dead_p (2, operands[0])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (register_operand (operands[0], V1TImode)\n       || register_operand (operands[1], V1TImode))",


    __builtin_constant_p
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V1TImode)
       || register_operand (operands[1], E_V1TImode)))
    ? (int)
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V1TImode)
       || register_operand (operands[1], E_V1TImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V8DFmode, operands)\n   && 1 && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 21229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SHSTK || (flag_cf_protection & CF_RETURN)",
    __builtin_constant_p
# 21229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0) || (flag_cf_protection & CF_RETURN))
    ? (int)
# 21229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0) || (flag_cf_protection & CF_RETURN))
    : -1 },
# 1911 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX_WITH_SSE && TARGET_SSE4_1\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V8QImode))",


    __builtin_constant_p
# 1911 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V8QImode).coeffs[0])))
    ? (int)
# 1911 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V8QImode).coeffs[0])))
    : -1 },
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",
    __builtin_constant_p
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V64QImode)\n       == GET_MODE_NUNITS (V8DImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSSE3 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX512BW))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[4]) == REGNO (operands[0])\n   && REGNO (operands[5]) == REGNO (operands[3])\n   && peep2_reg_dead_p (4, operands[3])\n   && ((REGNO (operands[0]) == REGNO (operands[3]))\n       || peep2_reg_dead_p (2, operands[0]))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (DImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3), CCGOCmode)) && (TARGET_64BIT)",
# 399 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX && (32 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5692 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5692 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_ROUNDEVEN != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x0 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x0 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
  { "(TARGET_AVX\n   && (operands[2] == CONST0_RTX (V4DImode)\n       || !MEM_P (operands[1]))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4DImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4DImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[AX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",


    __builtin_constant_p (
# 17894 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 17894 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(~INTVAL (operands[2]) & ~(255 << 8))) && (TARGET_64BIT)",


    __builtin_constant_p (
# 9450 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~(255 << 8))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9450 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~(255 << 8))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(!TARGET_PARTIAL_REG_STALL\n   && TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)) && ( reload_completed)",

    __builtin_constant_p (
# 12519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0))) &&
# 12522 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 12519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0))) &&
# 12522 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BF16) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23474 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0)) &&
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23474 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0)) &&
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && 1)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1))
    : -1 },
# 11037 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && reload_completed\n   && REGNO (operands[0]) != REGNO (operands[1])",

    __builtin_constant_p
# 11037 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed
   && (rhs_regno(operands[0])) != (rhs_regno(operands[1])))
    ? (int)
# 11037 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed
   && (rhs_regno(operands[0])) != (rhs_regno(operands[1])))
    : -1 },
  { "(TARGET_MOVDIRI) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 37)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 37)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512VPOPCNTDQ) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 3171 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n   && find_constant_src (insn)",

    __builtin_constant_p
# 3171 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && find_constant_src (insn))
    ? (int)
# 3171 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && find_constant_src (insn))
    : -1 },
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NEG, QImode, operands)\n   && mode_signbit_p (QImode, operands[2])",

    __builtin_constant_p
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_QImode, operands)
   && mode_signbit_p (E_QImode, operands[2]))
    ? (int)
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_QImode, operands)
   && mode_signbit_p (E_QImode, operands[2]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && 1) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BW && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 19395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(TARGET_PUSH_MEMORY || optimize_insn_for_size_p ())\n   && !RTX_FRAME_RELATED_P (peep2_next_insn (0))",

    __builtin_constant_p
# 19395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_PUSH_MEMORY] || optimize_insn_for_size_p ())
   && !(((peep2_next_insn (0)))->frame_related))
    ? (int)
# 19395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_PUSH_MEMORY] || optimize_insn_for_size_p ())
   && !(((peep2_next_insn (0)))->frame_related))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DImode)\n       == GET_MODE_NUNITS (V16HImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DFmode)\n       == GET_MODE_NUNITS (V8DFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_MINUS, V32QImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && TARGET_AVX512VL) && (TARGET_SSE2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(peep2_reg_dead_p (2, operands[0])) && (TARGET_64BIT)",
    __builtin_constant_p (
# 18957 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (2, operands[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18957 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (2, operands[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 15143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VL && TARGET_AVX512BW",
    __builtin_constant_p
# 15143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))
    ? (int)
# 15143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))
    : -1 },
  { "(TARGET_CMPXCHG8B) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 585 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG8B]) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 585 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG8B]) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_PLUS, V16QImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V16QImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V16QImode, operands)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VBMI && (64 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(ix86_unary_operator_ok (MINUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && COMMUTATIVE_ARITH_P (operands[2])\n   && peep2_reg_dead_p (3, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (2),\n			 GET_CODE (operands[2]) == PLUS\n			 ? CCGOCmode : CCNOmode)) && (TARGET_64BIT)",






    __builtin_constant_p (
# 19762 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (2),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19762 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (2),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 8375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ\n   && INTVAL (operands[2]) % 2 == 0\n   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n   && (!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[4]))",



    __builtin_constant_p
# 8375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && ((operands[2])->u.hwint[0]) % 2 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[4])))
    ? (int)
# 8375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && ((operands[2])->u.hwint[0]) % 2 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[4])))
    : -1 },
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_64BIT\n    && TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode)\n    && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC)\n   || ((!TARGET_64BIT || TARGET_AVX512F)\n       && SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",




    __builtin_constant_p
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0)
    && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
    && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   || ((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
       && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0)
    && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
    && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   || ((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
       && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V2DFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "((ix86_binary_operator_ok (PLUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512BW) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 21422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 21422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 18464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_CMOVE\n   && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && can_create_pseudo_p ()\n   && optimize_insn_for_speed_p ()",




    __builtin_constant_p
# 18464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && (!reload_in_progress && !reload_completed)
   && optimize_insn_for_speed_p ())
    ? (int)
# 18464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && (!reload_in_progress && !reload_completed)
   && optimize_insn_for_speed_p ())
    : -1 },
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n       || TARGET_MIX_SSE_I387)",


    __builtin_constant_p
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
    ? (int)
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
    : -1 },
# 12887 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(peep2_reg_dead_p (3, operands[1])\n    || operands_match_p (operands[1], operands[3]))\n   && ! reg_overlap_mentioned_p (operands[3], operands[0])\n   && peep2_regno_dead_p (0, FLAGS_REG)",



    __builtin_constant_p
# 12887 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((peep2_reg_dead_p (3, operands[1])
    || operands_match_p (operands[1], operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 12887 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((peep2_reg_dead_p (3, operands[1])
    || operands_match_p (operands[1], operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 21284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(flag_cf_protection & CF_BRANCH)",
    __builtin_constant_p
# 21284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((flag_cf_protection & CF_BRANCH))
    ? (int)
# 21284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((flag_cf_protection & CF_BRANCH))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, QImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 15588 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && reload_completed\n   && (TARGET_AVX512VL || !EXT_REX_SSE_REG_P (operands[1]))",


    __builtin_constant_p
# 15588 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0) || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    ? (int)
# 15588 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0) || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    : -1 },
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && ix86_binary_operator_ok (PLUS, V16SImode, operands)",
    __builtin_constant_p
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SImode, operands))
    ? (int)
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SImode, operands))
    : -1 },
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && avx_vperm2f128_parallel (operands[3], V8SImode)",

    __builtin_constant_p
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && avx_vperm2f128_parallel (operands[3], E_V8SImode))
    ? (int)
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && avx_vperm2f128_parallel (operands[3], E_V8SImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VL && TARGET_AVX512BW)",
    __builtin_constant_p (
# 13500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || DImode != DImode))\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_DImode != E_DImode))
   && ix86_pre_reload_split ())
    ? (int)
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_DImode != E_DImode))
   && ix86_pre_reload_split ())
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V32QImode)\n       == GET_MODE_NUNITS (V16HImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && (16 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 23387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_VPCLMULQDQ",
    __builtin_constant_p
# 23387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 57)) != 0))
    ? (int)
# 23387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 57)) != 0))
    : -1 },
  { "(TARGET_AVX512BW && 1) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "((CONST_INT_P (operands[2])\n   && (DImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",




    __builtin_constant_p ((
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && 1 && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    : -1 },
  { "(!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())) && (TARGET_64BIT)",
    __builtin_constant_p (
# 19643 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19643 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (CONST_INT_P (operands[2])\n       ? (INTVAL (operands[2]) < GET_MODE_BITSIZE (SImode)\n	  && INTVAL (operands[2])\n	       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n       : !memory_operand (operands[1], SImode))\n   && ix86_pre_reload_split ()) && ( 1)",






    __builtin_constant_p (
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_SImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_SImode))
   && ix86_pre_reload_split ()) &&
# 12364 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_SImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_SImode))
   && ix86_pre_reload_split ()) &&
# 12364 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_binary_operator_ok (IOR, DImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",


    __builtin_constant_p (
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 9601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 9601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V4DImode == V16SFmode\n									      || V4DImode == V8DFmode\n									      || V4DImode == V8DImode\n									      || V4DImode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DImode == E_V16SFmode
               || E_V4DImode == E_V8DFmode
               || E_V4DImode == E_V8DImode
               || E_V4DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DImode == E_V16SFmode
               || E_V4DImode == E_V8DFmode
               || E_V4DImode == E_V8DImode
               || E_V4DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 16780 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_MMX_WITH_SSE && TARGET_SSSE3",
    __builtin_constant_p
# 16780 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 55)) != 0))
    ? (int)
# 16780 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 55)) != 0))
    : -1 },
# 11779 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 11779 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 11779 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VL\n   && (INTVAL (operands[3]) & 1) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && (INTVAL (operands[5]) & 1) == 0\n   && INTVAL (operands[5]) == INTVAL (operands[6]) - 1)",




    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14451 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14451 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 12984 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(peep2_reg_dead_p (3, operands[1])\n    || operands_match_p (operands[1], operands[3]))\n   && ! reg_overlap_mentioned_p (operands[3], operands[0])\n   && ! reg_overlap_mentioned_p (operands[3], operands[4])\n   && ! reg_set_p (operands[3], operands[4])\n   && peep2_regno_dead_p (0, FLAGS_REG)",





    __builtin_constant_p
# 12984 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((peep2_reg_dead_p (3, operands[1])
    || operands_match_p (operands[1], operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])
   && ! reg_overlap_mentioned_p (operands[3], operands[4])
   && ! reg_set_p (operands[3], operands[4])
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 12984 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((peep2_reg_dead_p (3, operands[1])
    || operands_match_p (operands[1], operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])
   && ! reg_overlap_mentioned_p (operands[3], operands[4])
   && ! reg_set_p (operands[3], operands[4])
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(peep2_reg_dead_p (3, operands[0])\n   && optimize_insn_for_size_p ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 2723 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (3, operands[0])
   && optimize_insn_for_size_p ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 2723 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (3, operands[0])
   && optimize_insn_for_size_p ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BW && (64 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512BW))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 7953 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 7953 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 7953 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE4_1) && (TARGET_AVX2)",
    __builtin_constant_p (
# 17455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 381 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 17455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 381 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 21753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_F16C || TARGET_AVX512VL",
    __builtin_constant_p
# 21753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0))
    ? (int)
# 21753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0))
    : -1 },
  { "(TARGET_CMPXCHG16B) && (TARGET_64BIT)",
    __builtin_constant_p (
# 585 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags2 & (1UL << 6)) != 0)) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 585 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags2 & (1UL << 6)) != 0)) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 8061 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_8BIT_IDIV\n   && TARGET_QIMODE_MATH\n   && can_create_pseudo_p ()\n   && !optimize_insn_for_size_p ()",



    __builtin_constant_p
# 8061 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 2)) != 0)
   && ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && (!reload_in_progress && !reload_completed)
   && !optimize_insn_for_size_p ())
    ? (int)
# 8061 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 2)) != 0)
   && ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && (!reload_in_progress && !reload_completed)
   && !optimize_insn_for_size_p ())
    : -1 },
  { "(TARGET_CMPXCHG) && (TARGET_64BIT && TARGET_CMPXCHG16B)",
    __builtin_constant_p (
# 542 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG]) &&
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 6)) != 0)))
    ? (int) (
# 542 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG]) &&
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 6)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V8SFmode, operands)\n   && 1 && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[AX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",


    __builtin_constant_p (
# 17894 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 17894 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((SImode == HImode\n       && TARGET_LCP_STALL)\n       || (!TARGET_USE_MOV0\n          && TARGET_SPLIT_LONG_MOVES\n          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))\n   && peep2_regno_dead_p (0, FLAGS_REG)",






    __builtin_constant_p
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_SImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (!ix86_tune_features[X86_TUNE_USE_MOV0]
          && ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_SImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (!ix86_tune_features[X86_TUNE_USE_MOV0]
          && ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn))
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_PLUS, V32QImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_PLUS, V8HImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V8HImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V8HImode, operands))
    : -1 },
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, QImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])",


    __builtin_constant_p
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    ? (int)
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    : -1 },
  { "(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH) && ( reload_completed)",
    __builtin_constant_p (
# 10344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 10346 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 10344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 10346 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "((rtx_equal_p (operands[0], operands[5])\n    && rtx_equal_p (operands[1], operands[6]))\n   || (rtx_equal_p (operands[0], operands[6])\n       && rtx_equal_p (operands[1], operands[5]))) && (TARGET_64BIT)",



    __builtin_constant_p (
# 620 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rtx_equal_p (operands[0], operands[5])
    && rtx_equal_p (operands[1], operands[6]))
   || (rtx_equal_p (operands[0], operands[6])
       && rtx_equal_p (operands[1], operands[5]))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 620 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rtx_equal_p (operands[0], operands[5])
    && rtx_equal_p (operands[1], operands[6]))
   || (rtx_equal_p (operands[0], operands[6])
       && rtx_equal_p (operands[1], operands[5]))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SImode)\n       == GET_MODE_NUNITS (V32QImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (4, operands[4])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[4], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (1),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)) && (TARGET_64BIT)",
# 12992 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 19938 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (4, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19938 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (4, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(ix86_unary_operator_ok (NEG, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 15542 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && reload_completed",
    __builtin_constant_p
# 15542 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed)
    ? (int)
# 15542 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (64 == 64 || TARGET_AVX512VL)\n   && avx_vpermilp_parallel (operands[2], V16SFmode)) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V16SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V16SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (PLUS, V4HImode, operands)",

    __builtin_constant_p
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V4HImode, operands))
    ? (int)
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V4HImode, operands))
    : -1 },
  { "(ix86_match_ccmode (insn, CCGOCmode)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 1353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 1353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX && 1\n   && avx_vpermilp_parallel (operands[2], V2DFmode)) && (TARGET_SSE2)",

    __builtin_constant_p (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V2DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V2DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 5060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_AVX512F && TARGET_SSE_MATH",
    __builtin_constant_p
# 5060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 5060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
# 1245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "!TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC",
    __builtin_constant_p
# 1245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    ? (int)
# 1245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    : -1 },
# 4512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_AVX\n   && TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && (!REG_P (operands[1])\n       || (!TARGET_AVX && REGNO (operands[0]) != REGNO (operands[1])))\n   && (!EXT_REX_SSE_REG_P (operands[0])\n       || TARGET_AVX512VL)",






    __builtin_constant_p
# 4512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 8)) != 0)
   && ix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && (!(((enum rtx_code) (operands[1])->code) == REG)
       || (!((ix86_isa_flags & (1UL << 8)) != 0) && (rhs_regno(operands[0])) != (rhs_regno(operands[1]))))
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int)
# 4512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 8)) != 0)
   && ix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && (!(((enum rtx_code) (operands[1])->code) == REG)
       || (!((ix86_isa_flags & (1UL << 8)) != 0) && (rhs_regno(operands[0])) != (rhs_regno(operands[1]))))
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_LWP) && (Pmode == DImode)",
    __builtin_constant_p (
# 21108 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 21108 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V8SFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SFmode)\n       == GET_MODE_NUNITS (V4DImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SFmode)\n       == GET_MODE_NUNITS (V16SImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 12793 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && !TARGET_XOP\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 12793 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((ix86_isa_flags & (1UL << 59)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 12793 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((ix86_isa_flags & (1UL << 59)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 9241 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   && reload_completed",

    __builtin_constant_p
# 9241 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && reload_completed)
    ? (int)
# 9241 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2\n   && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW)",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n   && (TARGET_SSE4_1 || !flag_trapping_math)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(ix86_match_ccmode (insn, CCNOmode)\n   && ix86_unary_operator_ok (NOT, DImode, operands)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && ix86_binary_operator_ok (MINUS, V16SImode, operands)",
    __builtin_constant_p
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SImode, operands))
    ? (int)
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SImode, operands))
    : -1 },
# 2657 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_LP64 && ix86_check_movabs (insn, 1)",
    __builtin_constant_p
# 2657 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 4)) != 0) && ix86_check_movabs (insn, 1))
    ? (int)
# 2657 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 4)) != 0) && ix86_check_movabs (insn, 1))
    : -1 },
  { "(TARGET_MOVDIR64B) && (Pmode == DImode)",
    __builtin_constant_p (
# 21500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 10)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 21500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 10)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX\n   && (operands[2] == CONST0_RTX (V16HImode)\n       || !MEM_P (operands[1]))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V16HImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V16HImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (SImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V16HImode)\n       == GET_MODE_NUNITS (V32QImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    : -1 },
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (XOR, HImode, operands)",
    __builtin_constant_p
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_HImode, operands))
    ? (int)
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_HImode, operands))
    : -1 },
# 2203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && TARGET_SSE2 && reload_completed",

    __builtin_constant_p
# 2203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed)
    ? (int)
# 2203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512CD) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 9375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   rtx_equal_p (operands[0], operands[1])",

    __builtin_constant_p
# 9375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1]))
    ? (int)
# 9375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1]))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && 1)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    : -1 },
# 17536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387",
    __builtin_constant_p
# 17536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0))
    ? (int)
# 17536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0))
    : -1 },
  { "(!TARGET_64BIT && TARGET_XSAVE) && (TARGET_XSAVES)",
    __builtin_constant_p (
# 20958 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 63)) != 0)))
    ? (int) (
# 20958 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 63)) != 0)))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DFmode)\n       == GET_MODE_NUNITS (V16SImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX && 1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 12503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && !TARGET_PARTIAL_REG_STALL",
    __builtin_constant_p
# 12503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    ? (int)
# 12503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    : -1 },
# 8138 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V4SFmode))",


    __builtin_constant_p
# 8138 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V4SFmode).coeffs[0])))
    ? (int)
# 8138 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V4SFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VL\n   && (INTVAL (operands[3]) & 3) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && INTVAL (operands[3]) == INTVAL (operands[5]) - 2\n   && INTVAL (operands[3]) == INTVAL (operands[6]) - 3\n   && (INTVAL (operands[7]) & 3) == 0\n   && INTVAL (operands[7]) == INTVAL (operands[8]) - 1\n   && INTVAL (operands[7]) == INTVAL (operands[9]) - 2\n   && INTVAL (operands[7]) == INTVAL (operands[10]) - 3)",
# 8151 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V2DFmode, operands)\n   && 1 && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_AVX512VNNI) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 23318 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 21)) != 0)) &&
# 405 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 23318 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 21)) != 0)) &&
# 405 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 4824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !SSE_FLOAT_MODE_P (GET_MODE (operands[1]))",


    __builtin_constant_p
# 4824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode)))
    ? (int)
# 4824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode)))
    : -1 },
  { "(INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == DImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",
    __builtin_constant_p (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SFmode)\n       == GET_MODE_NUNITS (V8SImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    : -1 },
# 22551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512IFMA",
    __builtin_constant_p
# 22551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 16)) != 0))
    ? (int)
# 22551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 16)) != 0))
    : -1 },
# 23422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VP2INTERSECT",
    __builtin_constant_p
# 23422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 3)) != 0))
    ? (int)
# 23422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 3)) != 0))
    : -1 },
  { "(TARGET_RDRND) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21182 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 44)) != 0)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21182 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 44)) != 0)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, SImode, operands)\n   && CONST_SCALAR_INT_P (operands[2])\n   && rtx_equal_p (operands[2], operands[3])) && (!TARGET_64BIT)",


    __builtin_constant_p (
# 6563 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6563 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && 1 && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_SSE2)))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX || (TARGET_AVX512VL && TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6113 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) || (((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6113 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) || (((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (CONST_INT_P (operands[2])\n       ? (INTVAL (operands[2]) < GET_MODE_BITSIZE (SImode)\n	  && INTVAL (operands[2])\n	       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n       : !memory_operand (operands[1], SImode))\n   && ix86_pre_reload_split ()",






    __builtin_constant_p
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_SImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_SImode))
   && ix86_pre_reload_split ())
    ? (int)
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_SImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_SImode))
   && ix86_pre_reload_split ())
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, TImode, operands)\n   && CONST_SCALAR_INT_P (operands[2])\n   && rtx_equal_p (operands[2], operands[3])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 6056 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_TImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6056 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_TImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 6715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "peep2_regno_dead_p (3, FLAGS_REG)",
    __builtin_constant_p
# 6715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (3, 17))
    ? (int)
# 6715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (3, 17))
    : -1 },
  { "(!SIBLING_CALL_P (insn)) && (word_mode == SImode)",
    __builtin_constant_p (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (64 == 64 || TARGET_AVX512VL)\n   && avx_vpermilp_parallel (operands[2], V8DFmode)) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V8DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V8DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512VBMI) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 22594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 22594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (SImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(ix86_binary_operator_ok (ASHIFTRT, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_FMA || TARGET_AVX512F)",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V2DImode)\n       == GET_MODE_NUNITS (V16QImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512VBMI && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(!TARGET_X32 && !TARGET_INDIRECT_BRANCH_REGISTER) && (word_mode == SImode)",
    __builtin_constant_p (
# 13324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0) && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 13324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0) && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1 && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11881 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11881 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, SImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])",


    __builtin_constant_p
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    ? (int)
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    : -1 },
# 11939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (ROTATE, SImode, operands)",
    __builtin_constant_p
# 11939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ROTATE, E_SImode, operands))
    ? (int)
# 11939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ROTATE, E_SImode, operands))
    : -1 },
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && ix86_binary_operator_ok (MINUS, V32HImode, operands)",
    __builtin_constant_p
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V32HImode, operands))
    ? (int)
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V32HImode, operands))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SImode)\n       == GET_MODE_NUNITS (V8DFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    : -1 },
  { "(!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",

    __builtin_constant_p (
# 18183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 18183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (operands[2] == CONST0_RTX (V2DFmode)\n       || !MEM_P (operands[1]))",


    __builtin_constant_p
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V2DFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V2DFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && XVECLEN (operands[0], 0) != (TARGET_64BIT ? 16 : 8) + 1",
    __builtin_constant_p
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (((((operands[0])->u.fld[0]).rt_rtvec))->num_elem) != (((ix86_isa_flags & (1UL << 1)) != 0) ? 16 : 8) + 1)
    ? (int)
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (((((operands[0])->u.fld[0]).rt_rtvec))->num_elem) != (((ix86_isa_flags & (1UL << 1)) != 0) ? 16 : 8) + 1)
    : -1 },
  { "(TARGET_MWAITX) && (Pmode == SImode)",
    __builtin_constant_p (
# 21399 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 11)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 21399 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 11)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)\n   && ix86_binary_operator_ok (UMAX, V8QImode, operands)",


    __builtin_constant_p
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (UMAX, E_V8QImode, operands))
    ? (int)
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (UMAX, E_V8QImode, operands))
    : -1 },
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && TARGET_CMOVE)\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512ER) && (TARGET_SSE2))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
# 3265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && (lra_in_progress || reload_completed\n       || !CONST_DOUBLE_P (operands[1])\n       || ((optimize_function_for_size_p (cfun)\n	    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n	   && standard_80387_constant_p (operands[1]) > 0\n	   && !memory_operand (operands[0], XFmode))\n       || (!TARGET_MEMORY_MISMATCH_STALL\n	   && memory_operand (operands[0], XFmode))\n       || !TARGET_HARD_XF_REGS)",
# 3275 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 3265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && standard_80387_constant_p (operands[1]) > 0
    && !memory_operand (operands[0], E_XFmode))
       || (!ix86_tune_features[X86_TUNE_MEMORY_MISMATCH_STALL]
    && memory_operand (operands[0], E_XFmode))
       || !(((target_flags & (1U << 1)) != 0))))
    ? (int)
# 3265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && standard_80387_constant_p (operands[1]) > 0
    && !memory_operand (operands[0], E_XFmode))
       || (!ix86_tune_features[X86_TUNE_MEMORY_MISMATCH_STALL]
    && memory_operand (operands[0], E_XFmode))
       || !(((target_flags & (1U << 1)) != 0))))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V8DImode)\n       || register_operand (operands[1], V8DImode))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8DImode)
       || register_operand (operands[1], E_V8DImode))) &&
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8DImode)
       || register_operand (operands[1], E_V8DImode))) &&
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && 1\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1
   && ix86_pre_reload_split ())
    ? (int)
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1
   && ix86_pre_reload_split ())
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SImode)\n       == GET_MODE_NUNITS (V8SImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    : -1 },
# 20060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!MEM_VOLATILE_P (operands[1])\n   && !MEM_VOLATILE_P (operands[2])\n   && rtx_equal_p (operands[1], operands[2])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])",



    __builtin_constant_p
# 20060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(((operands[1]))->volatil)
   && !(((operands[2]))->volatil)
   && rtx_equal_p (operands[1], operands[2])
   && !reg_overlap_mentioned_p (operands[0], operands[2]))
    ? (int)
# 20060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(((operands[1]))->volatil)
   && !(((operands[2]))->volatil)
   && rtx_equal_p (operands[1], operands[2])
   && !reg_overlap_mentioned_p (operands[0], operands[2]))
    : -1 },
# 8092 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && TARGET_USE_8BIT_IDIV\n   && TARGET_QIMODE_MATH\n   && can_create_pseudo_p ()\n   && !optimize_insn_for_size_p ()",




    __builtin_constant_p
# 8092 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 2)) != 0)
   && ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && (!reload_in_progress && !reload_completed)
   && !optimize_insn_for_size_p ())
    ? (int)
# 8092 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 2)) != 0)
   && ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && (!reload_in_progress && !reload_completed)
   && !optimize_insn_for_size_p ())
    : -1 },
  { "(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH) && ( reload_completed)",
    __builtin_constant_p (
# 10344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 10346 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 10344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 10346 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 8603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[2]))",

    __builtin_constant_p
# 8603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    ? (int)
# 8603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    : -1 },
# 6434 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (MINUS, SImode, operands)",

    __builtin_constant_p
# 6434 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    ? (int)
# 6434 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    : -1 },
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && 1\n   && avx_vpermilp_parallel (operands[2], V4SFmode)",

    __builtin_constant_p
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V4SFmode))
    ? (int)
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V4SFmode))
    : -1 },
# 15319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_cmodel == CM_LARGE_PIC && !TARGET_PECOFF\n   && GET_CODE (operands[2]) == CONST\n   && GET_CODE (XEXP (operands[2], 0)) == UNSPEC\n   && XINT (XEXP (operands[2], 0), 1) == UNSPEC_PLTOFF",



    __builtin_constant_p
# 15319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_cmodel == CM_LARGE_PIC && !0
   && ((enum rtx_code) (operands[2])->code) == CONST
   && ((enum rtx_code) ((((operands[2])->u.fld[0]).rt_rtx))->code) == UNSPEC
   && ((((((operands[2])->u.fld[0]).rt_rtx))->u.fld[1]).rt_int) == UNSPEC_PLTOFF)
    ? (int)
# 15319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_cmodel == CM_LARGE_PIC && !0
   && ((enum rtx_code) (operands[2])->code) == CONST
   && ((enum rtx_code) ((((operands[2])->u.fld[0]).rt_rtx))->code) == UNSPEC
   && ((((((operands[2])->u.fld[0]).rt_rtx))->u.fld[1]).rt_int) == UNSPEC_PLTOFF)
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_PLUS, V16QImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V16QImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V16QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_MINUS, V32QImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "((!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   && reload_completed) && (TARGET_64BIT)",

    __builtin_constant_p (
# 9241 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && reload_completed) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9241 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && reload_completed) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE && 1) && (TARGET_SSE2)",
    __builtin_constant_p (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 5118 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_SSE && TARGET_SSE_MATH",
    __builtin_constant_p
# 5118 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 5118 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
  { "(REGNO (operands[2]) == REGNO (operands[3])\n  && general_operand (operands[4], SImode)\n  && (general_reg_operand (operands[4], SImode)\n      || memory_operand (operands[4], SImode)\n      || immediate_operand (operands[4], SImode))\n  && !reg_overlap_mentioned_p (operands[3], operands[4])) && (ptr_mode == SImode)",





    __builtin_constant_p (
# 20651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[2])) == (rhs_regno(operands[3]))
  && general_operand (operands[4], E_SImode)
  && (general_reg_operand (operands[4], E_SImode)
      || memory_operand (operands[4], E_SImode)
      || immediate_operand (operands[4], E_SImode))
  && !reg_overlap_mentioned_p (operands[3], operands[4])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    ? (int) (
# 20651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[2])) == (rhs_regno(operands[3]))
  && general_operand (operands[4], E_SImode)
  && (general_reg_operand (operands[4], E_SImode)
      || memory_operand (operands[4], E_SImode)
      || immediate_operand (operands[4], E_SImode))
  && !reg_overlap_mentioned_p (operands[3], operands[4])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    : -1 },
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "CONST_INT_P (operands[2])\n   && (SImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, SImode, operands)\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX && 1) && (TARGET_AVX)",
    __builtin_constant_p (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (SSE_FLOAT_MODE_P (DFmode))",
    __builtin_constant_p (
# 198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3029 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))))
    ? (int) (
# 198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3029 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))))
    : -1 },
  { "((TARGET_FAST_PREFIX && !TARGET_PARTIAL_REG_STALL)\n    || optimize_function_for_size_p (cfun)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 9221 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_FAST_PREFIX] && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    || optimize_function_for_size_p ((cfun + 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9221 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_FAST_PREFIX] && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    || optimize_function_for_size_p ((cfun + 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ())
    ? (int)
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_SSE4_1 && !flag_trapping_math) && (TARGET_AVX)",
    __builtin_constant_p (
# 18497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 18497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (MINUS, V2DFmode, operands)\n   && 1 && 1) && (TARGET_SSE2)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 21446 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))",
    __builtin_constant_p
# 21446 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 21446 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (5, operands[4])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[4], operands[1])\n   && (DImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (4),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)) && (TARGET_64BIT)",
# 21461 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[4]) == REGNO (operands[0])\n   && REGNO (operands[5]) == REGNO (operands[3])\n   && peep2_reg_dead_p (4, operands[3])\n   && ((REGNO (operands[0]) == REGNO (operands[3]))\n       || peep2_reg_dead_p (2, operands[0]))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (SImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3), CCGOCmode)",
# 19740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode))
    ? (int)
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[4])) == (rhs_regno(operands[0]))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[3]))
   && peep2_reg_dead_p (4, operands[3])
   && (((rhs_regno(operands[0])) == (rhs_regno(operands[3])))
       || peep2_reg_dead_p (2, operands[0]))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3), E_CCGOCmode))
    : -1 },
  { "(TARGET_CMOVE && !(MEM_P (operands[2]) && MEM_P (operands[3]))) && (TARGET_64BIT)",
    __builtin_constant_p (
# 18433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (QImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512BW && (16 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 19479 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && (REGNO (operands[2]) != AX_REG\n       || satisfies_constraint_K (operands[3]))\n   && peep2_reg_dead_p (1, operands[2])",



    __builtin_constant_p
# 19479 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ((rhs_regno(operands[2])) != 0
       || satisfies_constraint_K (operands[3]))
   && peep2_reg_dead_p (1, operands[2]))
    ? (int)
# 19479 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ((rhs_regno(operands[2])) != 0
       || satisfies_constraint_K (operands[3]))
   && peep2_reg_dead_p (1, operands[2]))
    : -1 },
  { "(ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (IOR, DImode, operands)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (64 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[0]) != REGNO (operands[1])\n   && (SImode != QImode\n       || any_QIreg_operand (operands[1], QImode))",


    __builtin_constant_p
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_SImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode)))
    ? (int)
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_SImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V8SFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 5491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed && ix86_avoid_lea_for_add (insn, operands)",
    __builtin_constant_p
# 5491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_add (insn, operands))
    ? (int)
# 5491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_add (insn, operands))
    : -1 },
# 13012 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_2",
    __builtin_constant_p
# 13012 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0))
    ? (int)
# 13012 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0))
    : -1 },
  { "((ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",



    __builtin_constant_p ((
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSE4_2) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 12502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)) &&
# 424 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 12502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)) &&
# 424 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX2) && (Pmode == SImode)",
    __builtin_constant_p (
# 21971 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 21971 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_CEIL != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x2 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x2 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
  { "(TARGET_CMOVE && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && optimize_insn_for_speed_p ()) && (TARGET_64BIT)",


    __builtin_constant_p (
# 18513 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18513 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX\n   && reload_completed\n   && (TARGET_AVX512VL || !EXT_REX_SSE_REG_P (operands[1]))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 15588 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0) || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))) &&
# 15581 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 15588 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0) || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))) &&
# 15581 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATE, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()",



    __builtin_constant_p
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    ? (int)
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (EQ, V4HImode, operands)",

    __builtin_constant_p
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (EQ, E_V4HImode, operands))
    ? (int)
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (EQ, E_V4HImode, operands))
    : -1 },
# 6697 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "find_regno_note (peep2_next_insn (0), REG_UNUSED, REGNO (operands[0])) != 0",
    __builtin_constant_p
# 6697 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(find_regno_note (peep2_next_insn (0), REG_UNUSED, (rhs_regno(operands[0]))) != 0)
    ? (int)
# 6697 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(find_regno_note (peep2_next_insn (0), REG_UNUSED, (rhs_regno(operands[0]))) != 0)
    : -1 },
  { "(TARGET_AVX512BW && (64 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 16939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 16939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX\n   && (operands[2] == CONST0_RTX (V32QImode)\n       || !MEM_P (operands[1]))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V32QImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V32QImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "((unsigned HOST_WIDE_INT) INTVAL (operands[1])\n   == -(unsigned HOST_WIDE_INT) INTVAL (operands[2])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 760 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((unsigned long) ((operands[1])->u.hwint[0])
   == -(unsigned long) ((operands[2])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 760 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((unsigned long) ((operands[1])->u.hwint[0])
   == -(unsigned long) ((operands[2])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13466 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13466 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_SSE2) && (TARGET_SSE4_1)",
    __builtin_constant_p (
# 15271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 15236 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)))
    ? (int) (
# 15271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 15236 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V16SFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 20745 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SSE4_2 || TARGET_CRC32",
    __builtin_constant_p
# 20745 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 53)) != 0) || ((ix86_isa_flags & (1UL << 27)) != 0))
    ? (int)
# 20745 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 53)) != 0) || ((ix86_isa_flags & (1UL << 27)) != 0))
    : -1 },
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATERT, HImode, operands)",
    __builtin_constant_p
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_HImode, operands))
    ? (int)
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_HImode, operands))
    : -1 },
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (LSHIFTRT, HImode, operands)",
    __builtin_constant_p
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_HImode, operands))
    ? (int)
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_HImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_XOP || TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19650 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19650 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_BMI2 && INTVAL (operands[4]) == 8 * BITS_PER_UNIT\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_64BIT)",

    __builtin_constant_p (
# 7803 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[4])->u.hwint[0]) == 8 * (8)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7803 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[4])->u.hwint[0]) == 8 * (8)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE2) && ((TARGET_64BIT) && (TARGET_SSE4_1))",
    __builtin_constant_p (
# 15271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) && (
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 15236 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0))))
    ? (int) (
# 15271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) && (
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 15236 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX)))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 15448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_64BIT && TARGET_SSE4_1",
    __builtin_constant_p
# 15448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0))
    ? (int)
# 15448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_PLUS, V16QImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V16QImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V16QImode, operands)))
    : -1 },
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((TARGET_NOT_UNPAIRABLE\n	&& (!MEM_P (operands[0])\n	    || !memory_displacement_operand (operands[0], SImode)))\n       || (TARGET_NOT_VECTORMODE\n	   && long_memory_operand (operands[0], SImode)))\n   && peep2_regno_dead_p (0, FLAGS_REG)",






    __builtin_constant_p
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((ix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]
 && (!(((enum rtx_code) (operands[0])->code) == MEM)
     || !memory_displacement_operand (operands[0], E_SImode)))
       || (ix86_tune_features[X86_TUNE_NOT_VECTORMODE]
    && long_memory_operand (operands[0], E_SImode)))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((ix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]
 && (!(((enum rtx_code) (operands[0])->code) == MEM)
     || !memory_displacement_operand (operands[0], E_SImode)))
       || (ix86_tune_features[X86_TUNE_NOT_VECTORMODE]
    && long_memory_operand (operands[0], E_SImode)))
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_PLUS, V16HImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512VPOPCNTDQ) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 4412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 4412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V2DFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX && (16 == 64 || TARGET_AVX512VL)\n   && avx_vpermilp_parallel (operands[2], V4SFmode))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V4SFmode)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V4SFmode)))
    : -1 },
# 4498 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SPLIT_MEM_OPND_FOR_FP_CONVERTS\n   && optimize_insn_for_speed_p ()",

    __builtin_constant_p
# 4498 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS]
   && optimize_insn_for_speed_p ())
    ? (int)
# 4498 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS]
   && optimize_insn_for_speed_p ())
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_PLUS, V32HImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (Pmode == DImode)",
    __builtin_constant_p (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_MINUS, V16QImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V16QImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V16QImode, operands)))
    : -1 },
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_binary_operator_ok (IOR, DImode, operands)\n   && ix86_pre_reload_split ()",


    __builtin_constant_p
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_SSE && TARGET_SSE_MATH) && (TARGET_AVX512ER)",
    __builtin_constant_p (
# 2077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 331 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)))
    ? (int) (
# 2077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 331 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)))
    : -1 },
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (GET_MODE_NUNITS (V4SFmode)\n       == GET_MODE_NUNITS (V4SFmode))",


    __builtin_constant_p
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    ? (int)
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    : -1 },
  { "(TARGET_SSSE3) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 17048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 17042 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 17048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 17042 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX\n   && (V4DFmode != V4DFmode || !TARGET_AVX2 || operands[3] == const0_rtx)) && ( reload_completed)",

    __builtin_constant_p (
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V4DFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64]))) &&
# 20265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V4DFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64]))) &&
# 20265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
# 14007 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_BMI || TARGET_GENERIC)\n   && TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1])",



    __builtin_constant_p
# 14007 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 23)) != 0) || (ix86_tune == PROCESSOR_GENERIC))
   && ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1]))
    ? (int)
# 14007 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 23)) != 0) || (ix86_tune == PROCESSOR_GENERIC))
   && ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1]))
    : -1 },
  { "(TARGET_SSE) && (TARGET_AVX)",
    __builtin_constant_p (
# 21491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 21476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 21491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 21476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 8464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && INTVAL (operands[2]) % 4 == 0\n   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && INTVAL (operands[4]) == INTVAL (operands[5]) - 1",




    __builtin_constant_p
# 8464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) % 4 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[4])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 1)
    ? (int)
# 8464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) % 4 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[4])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 1)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSSE3 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 3191 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT || TARGET_SSE",
    __builtin_constant_p
# 3191 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))
    ? (int)
# 3191 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))
    : -1 },
  { "(TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && (TARGET_64BIT)",
    __builtin_constant_p (
# 15320 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 15320 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE3) && (TARGET_AVX)",
    __builtin_constant_p (
# 1353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)) &&
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)) &&
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && TARGET_AVX512VL\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
# 17073 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n       || TARGET_MIX_SSE_I387)\n   && flag_unsafe_math_optimizations",



    __builtin_constant_p
# 17073 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_unsafe_math_optimizations)
    ? (int)
# 17073 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_unsafe_math_optimizations)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4SFmode == V8SFmode)) && (TARGET_AVX512VL)))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V8SFmode)) &&
# 293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V8SFmode)) &&
# 293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_SSE && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_SSE2)",

    __builtin_constant_p (
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 4603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || SSE_FLOAT_MODE_P (SFmode)",
    __builtin_constant_p
# 4603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)))
    ? (int)
# 4603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)))
    : -1 },
# 5025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_AVX\n   && TARGET_SSE_PARTIAL_REG_DEPENDENCY && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && (!EXT_REX_SSE_REG_P (operands[0])\n       || TARGET_AVX512VL)",




    __builtin_constant_p
# 5025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 8)) != 0)
   && ix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int)
# 5025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 8)) != 0)
   && ix86_tune_features[X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V16HImode)\n       == GET_MODE_NUNITS (V4DFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX)))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 3944 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun))",
    __builtin_constant_p
# 3944 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0))))
    ? (int)
# 3944 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0))))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V4SFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_SSE4_1 && 1 && 1) && (TARGET_AVX2)",
    __builtin_constant_p (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BITALG) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 534 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 534 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_FMA || TARGET_AVX512F) && (TARGET_SSE2))",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && (V8SFmode == V8SFmode))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V8SFmode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V8SFmode)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX\n   && TARGET_AVX512VL\n   && (INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n       && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n       && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4)\n       && INTVAL (operands[6]) == (INTVAL (operands[10]) - 4)))",





    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 7684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 7684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4))))
    : -1 },
# 1044 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT || (TARGET_STV && TARGET_SSE2)",
    __builtin_constant_p
# 1044 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || (((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int)
# 1044 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || (((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 6186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ && TARGET_AVX512VL",
    __builtin_constant_p
# 6186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0))
    ? (int)
# 6186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode)))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_SSE && 1) && (TARGET_AVX)",
    __builtin_constant_p (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (4, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (SImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && (INTVAL (operands[3]) & 1) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && (INTVAL (operands[5]) & 1) == 0\n   && INTVAL (operands[5]) == INTVAL (operands[6]) - 1\n   && (INTVAL (operands[7]) & 1) == 0\n   && INTVAL (operands[7]) == INTVAL (operands[8]) - 1\n   && (INTVAL (operands[9]) & 1) == 0\n   && INTVAL (operands[9]) == INTVAL (operands[10]) - 1)",
# 19683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1
   && (((operands[7])->u.hwint[0]) & 1) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && (((operands[9])->u.hwint[0]) & 1) == 0
   && ((operands[9])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1
   && (((operands[7])->u.hwint[0]) & 1) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && (((operands[9])->u.hwint[0]) & 1) == 0
   && ((operands[9])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 1))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6176 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6176 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (HImode))",


    __builtin_constant_p
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0])))
    ? (int)
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0])))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (PLUS, V4DFmode, operands)\n   && 1 && 1) && (TARGET_AVX)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(!(fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",

    __builtin_constant_p (
# 18183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 18183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && 1 && (SFmode == V16SFmode\n							      || SFmode == V8DFmode\n							      || SFmode == V8DImode\n							      || SFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_SFmode == E_V16SFmode
             || E_SFmode == E_V8DFmode
             || E_SFmode == E_V8DImode
             || E_SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_SFmode == E_V16SFmode
             || E_SFmode == E_V8DFmode
             || E_SFmode == E_V8DImode
             || E_SFmode == E_V16SImode)))
    : -1 },
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1",

    __builtin_constant_p
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1)
    ? (int)
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && TARGET_AVX512VL) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13466 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13466 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && 1 && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 20327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(((!TARGET_FUSE_CMP_AND_BRANCH || optimize_insn_for_size_p ())\n     && incdec_operand (operands[3], GET_MODE (operands[3])))\n    || (!TARGET_FUSE_CMP_AND_BRANCH\n	&& INTVAL (operands[3]) == 128))\n   && ix86_match_ccmode (insn, CCGCmode)\n   && peep2_reg_dead_p (1, operands[2])",





    __builtin_constant_p
# 20327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((!(((ix86_isa_flags & (1UL << 1)) != 0) ? ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_64] : ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_32]) || optimize_insn_for_size_p ())
     && incdec_operand (operands[3], ((machine_mode) (operands[3])->mode)))
    || (!(((ix86_isa_flags & (1UL << 1)) != 0) ? ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_64] : ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_32])
 && ((operands[3])->u.hwint[0]) == 128))
   && ix86_match_ccmode (insn, E_CCGCmode)
   && peep2_reg_dead_p (1, operands[2]))
    ? (int)
# 20327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((!(((ix86_isa_flags & (1UL << 1)) != 0) ? ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_64] : ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_32]) || optimize_insn_for_size_p ())
     && incdec_operand (operands[3], ((machine_mode) (operands[3])->mode)))
    || (!(((ix86_isa_flags & (1UL << 1)) != 0) ? ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_64] : ix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH_32])
 && ((operands[3])->u.hwint[0]) == 128))
   && ix86_match_ccmode (insn, E_CCGCmode)
   && peep2_reg_dead_p (1, operands[2]))
    : -1 },
# 19039 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_target_stack_probe ()",
    __builtin_constant_p
# 19039 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_target_stack_probe ())
    ? (int)
# 19039 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_target_stack_probe ())
    : -1 },
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512CD",
    __builtin_constant_p
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0))
    ? (int)
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0))
    : -1 },
# 21132 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_LWP",
    __builtin_constant_p
# 21132 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0))
    ? (int)
# 21132 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0))
    : -1 },
# 20766 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && (TARGET_SSE4_2 || TARGET_CRC32)",
    __builtin_constant_p
# 20766 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (((ix86_isa_flags & (1UL << 53)) != 0) || ((ix86_isa_flags & (1UL << 27)) != 0)))
    ? (int)
# 20766 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (((ix86_isa_flags & (1UL << 53)) != 0) || ((ix86_isa_flags & (1UL << 27)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DFmode)\n       == GET_MODE_NUNITS (V32QImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    : -1 },
  { "((TARGET_SINGLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == SImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode))",

    __builtin_constant_p (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(INTVAL (operands[2]) == GET_MODE_BITSIZE (DImode)-1\n   && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)) && (TARGET_64BIT)",


    __builtin_constant_p (
# 11398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[2])->u.hwint[0]) == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && (ix86_tune_features[X86_TUNE_USE_CLTD] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[2])->u.hwint[0]) == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && (ix86_tune_features[X86_TUNE_USE_CLTD] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 5131 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((TARGET_64BIT && TARGET_AVX512F)\n    || TARGET_KEEPS_VECTOR_ALIGNED_STACK)\n   && TARGET_SSE2 && TARGET_SSE_MATH",


    __builtin_constant_p
# 5131 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0))
    || ((ix86_isa_flags & (1UL << 1)) != 0))
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 5131 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0))
    || ((ix86_isa_flags & (1UL << 1)) != 0))
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || DImode == SImode\n       || DImode == DImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V16QImode)\n       == GET_MODE_NUNITS (V8HImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && 1 && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    : -1 },
  { "(IN_RANGE (INTVAL (operands[2]), 1, 3)\n   /* Validate MODE for lea.  */\n   && ((!TARGET_PARTIAL_REG_STALL\n	&& (GET_MODE (operands[0]) == QImode\n	    || GET_MODE (operands[0]) == HImode))\n       || GET_MODE (operands[0]) == SImode\n       || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\n   && (rtx_equal_p (operands[0], operands[3])\n       || peep2_reg_dead_p (2, operands[0]))\n   /* We reorder load and the shift.  */\n   && !reg_overlap_mentioned_p (operands[0], operands[4])) && (word_mode == SImode)",
# 5285 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 20438 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (((operands[2])->u.hwint[0])) - (unsigned long) (1) <= (unsigned long) (3) - (unsigned long) (1))

   && ((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
 && (((machine_mode) (operands[0])->mode) == E_QImode
     || ((machine_mode) (operands[0])->mode) == E_HImode))
       || ((machine_mode) (operands[0])->mode) == E_SImode
       || (((ix86_isa_flags & (1UL << 1)) != 0) && ((machine_mode) (operands[0])->mode) == E_DImode))
   && (rtx_equal_p (operands[0], operands[3])
       || peep2_reg_dead_p (2, operands[0]))

   && !reg_overlap_mentioned_p (operands[0], operands[4])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 20438 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (((operands[2])->u.hwint[0])) - (unsigned long) (1) <= (unsigned long) (3) - (unsigned long) (1))

   && ((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
 && (((machine_mode) (operands[0])->mode) == E_QImode
     || ((machine_mode) (operands[0])->mode) == E_HImode))
       || ((machine_mode) (operands[0])->mode) == E_SImode
       || (((ix86_isa_flags & (1UL << 1)) != 0) && ((machine_mode) (operands[0])->mode) == E_DImode))
   && (rtx_equal_p (operands[0], operands[3])
       || peep2_reg_dead_p (2, operands[0]))

   && !reg_overlap_mentioned_p (operands[0], operands[4])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || SImode == SImode\n       || SImode == DImode)) && (TARGET_AVX)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE) && (TARGET_SSE2)))",
    __builtin_constant_p (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (AND, SImode, operands)",

    __builtin_constant_p
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_SImode, operands))
    ? (int)
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_SImode, operands))
    : -1 },
# 4925 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode)",

    __builtin_constant_p
# 4925 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
    ? (int)
# 4925 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
    : -1 },
  { "(TARGET_64BIT && !TARGET_PARTIAL_REG_STALL) && ( reload_completed)",
    __builtin_constant_p (
# 12503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]) &&
# 12505 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 12503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]) &&
# 12505 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V2DImode)\n       == GET_MODE_NUNITS (V8HImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && ix86_match_ccmode (peep2_next_insn (1),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)) && (TARGET_64BIT)",







    __builtin_constant_p (
# 19698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V2DFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
# 3921 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_FMA || TARGET_FMA4 || TARGET_AVX512VL",
    __builtin_constant_p
# 3921 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0))
    ? (int)
# 3921 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0))
    : -1 },
  { "(!(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_64BIT)",
    __builtin_constant_p (
# 7869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (HImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, HImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 3635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n   && (GET_MODE (operands[0]) == TFmode\n       || GET_MODE (operands[0]) == XFmode\n       || GET_MODE (operands[0]) == DFmode\n       || GET_MODE (operands[0]) == SFmode)\n   && ix86_standard_x87sse_constant_load_p (insn, operands[0])",





    __builtin_constant_p
# 3635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (((machine_mode) (operands[0])->mode) == E_TFmode
       || ((machine_mode) (operands[0])->mode) == E_XFmode
       || ((machine_mode) (operands[0])->mode) == E_DFmode
       || ((machine_mode) (operands[0])->mode) == E_SFmode)
   && ix86_standard_x87sse_constant_load_p (insn, operands[0]))
    ? (int)
# 3635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (((machine_mode) (operands[0])->mode) == E_TFmode
       || ((machine_mode) (operands[0])->mode) == E_XFmode
       || ((machine_mode) (operands[0])->mode) == E_DFmode
       || ((machine_mode) (operands[0])->mode) == E_SFmode)
   && ix86_standard_x87sse_constant_load_p (insn, operands[0]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && 1 && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 17002 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSSE3 && reload_completed\n   && SSE_REGNO_P (REGNO (operands[0]))",

    __builtin_constant_p
# 17002 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && reload_completed
   && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))
    ? (int)
# 17002 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && reload_completed
   && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))
    : -1 },
  { "(ix86_binary_operator_ok (ROTATERT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()) && ( 1)",



    __builtin_constant_p (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_MINUS, V64QImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX2 && (64 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 516 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 516 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512VL)))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V4SImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SImode, operands))
    : -1 },
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && (TARGET_3DNOW)",
    __builtin_constant_p (
# 2594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 2569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0)))
    ? (int) (
# 2594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 2569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0)))
    : -1 },
# 15452 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_SUN_TLS",
    __builtin_constant_p
# 15452 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && 0)
    ? (int)
# 15452 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && 0)
    : -1 },
  { "(TARGET_SSSE3) && (TARGET_AVX2)",
    __builtin_constant_p (
# 16733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 16733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 2954 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && peep2_reg_dead_p (2, operands[0])",

    __builtin_constant_p
# 2954 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (2, operands[0]))
    ? (int)
# 2954 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (2, operands[0]))
    : -1 },
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, HImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])",


    __builtin_constant_p
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    ? (int)
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    : -1 },
# 14417 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_BMI2",
    __builtin_constant_p
# 14417 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0))
    ? (int)
# 14417 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, HImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_PLUS, V16HImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && 1 && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    : -1 },
  { "((TARGET_BMI) && (TARGET_64BIT)) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p ((
# 13939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 13941 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) ((
# 13939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 13941 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_MINUS, V32HImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(REGNO (operands[0]) != REGNO (operands[1])\n   && (DImode != QImode\n       || any_QIreg_operand (operands[1], QImode))) && (TARGET_64BIT)",


    __builtin_constant_p (
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_DImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_DImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX2 && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 21502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 409 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 21502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 409 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 1031 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_QIMODE_MATH",
    __builtin_constant_p
# 1031 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_QIMODE_MATH])
    ? (int)
# 1031 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_QIMODE_MATH])
    : -1 },
# 8934 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n    && GET_MODE (operands[2]) != QImode\n    && ((ix86_match_ccmode (insn, CCZmode)\n    	 && !(INTVAL (operands[3]) & ~(255 << 8)))\n	|| (ix86_match_ccmode (insn, CCNOmode)\n	    && !(INTVAL (operands[3]) & ~(127 << 8))))",





    __builtin_constant_p
# 8934 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && ((machine_mode) (operands[2])->mode) != E_QImode
    && ((ix86_match_ccmode (insn, E_CCZmode)
      && !(((operands[3])->u.hwint[0]) & ~(255 << 8)))
 || (ix86_match_ccmode (insn, E_CCNOmode)
     && !(((operands[3])->u.hwint[0]) & ~(127 << 8)))))
    ? (int)
# 8934 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && ((machine_mode) (operands[2])->mode) != E_QImode
    && ((ix86_match_ccmode (insn, E_CCZmode)
      && !(((operands[3])->u.hwint[0]) & ~(255 << 8)))
 || (ix86_match_ccmode (insn, E_CCNOmode)
     && !(((operands[3])->u.hwint[0]) & ~(127 << 8)))))
    : -1 },
# 15116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && 1 && 1\n   && INTVAL (operands[2]) + 8 == INTVAL (operands[6])\n   && INTVAL (operands[3]) + 8 == INTVAL (operands[7])\n   && INTVAL (operands[4]) + 8 == INTVAL (operands[8])\n   && INTVAL (operands[5]) + 8 == INTVAL (operands[9])",





    __builtin_constant_p
# 15116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && 1 && 1
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[9])->u.hwint[0]))
    ? (int)
# 15116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && 1 && 1
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[9])->u.hwint[0]))
    : -1 },
  { "((TARGET_DOUBLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == SImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode))",

    __builtin_constant_p (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
# 17345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && (flag_fp_int_builtin_inexact || !flag_trapping_math)",

    __builtin_constant_p
# 17345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (flag_fp_int_builtin_inexact || !flag_trapping_math))
    ? (int)
# 17345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (flag_fp_int_builtin_inexact || !flag_trapping_math))
    : -1 },
  { "(ix86_unary_operator_ok (MINUS, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((ix86_binary_operator_ok (ASHIFT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",



    __builtin_constant_p ((
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 10717 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 10717 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 4709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n   && optimize_function_for_speed_p (cfun)",

    __builtin_constant_p
# 4709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && optimize_function_for_speed_p ((cfun + 0)))
    ? (int)
# 4709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && optimize_function_for_speed_p ((cfun + 0)))
    : -1 },
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && ((DImode != DImode) || TARGET_64BIT))",


    __builtin_constant_p
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    ? (int)
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && SImode != HImode \n       && ((SImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_SImode != E_HImode
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_SImode != E_HImode
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 13540 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_can_use_return_insn_p ()",
    __builtin_constant_p
# 13540 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_can_use_return_insn_p ())
    ? (int)
# 13540 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_can_use_return_insn_p ())
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (IOR, V2SImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (IOR, E_V2SImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (IOR, E_V2SImode, operands))
    : -1 },
  { "(TARGET_BMI2 && INTVAL (operands[3]) == 8 * BITS_PER_UNIT) && (TARGET_64BIT)",
    __builtin_constant_p (
# 14469 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[3])->u.hwint[0]) == 8 * (8)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14469 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[3])->u.hwint[0]) == 8 * (8)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && (64 == 64 || TARGET_AVX512VL)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && SImode != HImode \n       && ((SImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_SImode != E_HImode
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_SImode != E_HImode
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFTRT, QImode, operands)",
    __builtin_constant_p
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_QImode, operands))
    ? (int)
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_QImode, operands))
    : -1 },
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (V8SFmode != V4DFmode || !TARGET_AVX2 || operands[3] == const0_rtx)",

    __builtin_constant_p
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V8SFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64])))
    ? (int)
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V8SFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64])))
    : -1 },
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (MINUS, V4HImode, operands)",

    __builtin_constant_p
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V4HImode, operands))
    ? (int)
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V4HImode, operands))
    : -1 },
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (register_operand (operands[0], V8HImode)\n       || register_operand (operands[1], V8HImode))",


    __builtin_constant_p
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8HImode)
       || register_operand (operands[1], E_V8HImode)))
    ? (int)
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8HImode)
       || register_operand (operands[1], E_V8HImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BITALG) && (TARGET_AVX512BW))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_CEIL != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x2 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x2 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
# 9718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (IOR, QImode, operands)",
    __builtin_constant_p
# 9718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_QImode, operands))
    ? (int)
# 9718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_QImode, operands))
    : -1 },
  { "(TARGET_SSSE3) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 17048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 17042 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 17048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 17042 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && (16 == 64 || TARGET_AVX512VL) && 1) && (TARGET_SSE2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
# 1334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (MULT, V4HImode, operands)",

    __builtin_constant_p
# 1334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MULT, E_V4HImode, operands))
    ? (int)
# 1334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MULT, E_V4HImode, operands))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SImode)\n       == GET_MODE_NUNITS (V16HImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    : -1 },
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (IOR, HImode, operands)",
    __builtin_constant_p
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_HImode, operands))
    ? (int)
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_HImode, operands))
    : -1 },
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSSE3 || TARGET_AVX || TARGET_XOP",
    __builtin_constant_p
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0))
    ? (int)
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0))
    : -1 },
  { "(TARGET_AVX) && (TARGET_SSE2)",
    __builtin_constant_p (
# 18248 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 18248 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_ENQCMD) && (Pmode == DImode)",
    __builtin_constant_p (
# 21525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 7)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 21525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 7)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2\n   && TARGET_AVX512BW && TARGET_AVX512VL\n   && INTVAL (operands[2]) + 8 == INTVAL (operands[6])\n   && INTVAL (operands[3]) + 8 == INTVAL (operands[7])\n   && INTVAL (operands[4]) + 8 == INTVAL (operands[8])\n   && INTVAL (operands[5]) + 8 == INTVAL (operands[9]))",





    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[9])->u.hwint[0])))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[9])->u.hwint[0])))
    : -1 },
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_FLOAT (DFmode, SImode))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && ((SImode != DImode) || TARGET_64BIT))",


    __builtin_constant_p
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    ? (int)
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    : -1 },
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "((TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_POPCNT && TARGET_64BIT) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p (
# 14741 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14749 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) (
# 14741 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14749 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
# 16143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && flag_finite_math_only",

    __builtin_constant_p
# 16143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_finite_math_only)
    ? (int)
# 16143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_finite_math_only)
    : -1 },
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_unary_operator_ok (NOT, HImode, operands)",

    __builtin_constant_p
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_HImode, operands))
    ? (int)
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_HImode, operands))
    : -1 },
# 6301 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   && ((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n       < (HOST_WIDE_INT_1U << INTVAL (operands[2])))",


    __builtin_constant_p
# 6301 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && ((unsigned long) ((operands[3])->u.hwint[0])
       < (1UL << ((operands[2])->u.hwint[0]))))
    ? (int)
# 6301 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && ((unsigned long) ((operands[3])->u.hwint[0])
       < (1UL << ((operands[2])->u.hwint[0]))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (64 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512ER",
    __builtin_constant_p
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0))
    ? (int)
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0))
    : -1 },
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (PLUS, SImode, operands)",

    __builtin_constant_p
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    ? (int)
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_MINUS, V64QImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 14903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_MOVBE\n   && !(TARGET_USE_XCHGB || optimize_function_for_size_p (cfun))\n   && peep2_regno_dead_p (0, FLAGS_REG)",


    __builtin_constant_p
# 14903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0)
   && !(ix86_tune_features[X86_TUNE_USE_XCHGB] || optimize_function_for_size_p ((cfun + 0)))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 14903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0)
   && !(ix86_tune_features[X86_TUNE_USE_XCHGB] || optimize_function_for_size_p ((cfun + 0)))
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 8440 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && INTVAL (operands[2]) % 4 == 0\n   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && INTVAL (operands[4]) == INTVAL (operands[5]) - 1\n   && (!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[6]))",





    __builtin_constant_p
# 8440 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) % 4 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[4])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 1
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[6])))
    ? (int)
# 8440 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) % 4 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[4])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 1
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[6])))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_PLUS, V64QImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V8HImode)\n       == GET_MODE_NUNITS (V8HImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    : -1 },
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (IOR, HImode, operands)",

    __builtin_constant_p
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_HImode, operands))
    ? (int)
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_HImode, operands))
    : -1 },
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && X87_ENABLE_FLOAT (SFmode, HImode)\n   && !(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n   && (TARGET_USE_HIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",



    __builtin_constant_p
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_HImode) == E_SImode) || (E_HImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_HImode) == E_SImode) || (E_HImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
  { "(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n   && (TARGET_SSE4_1 || !flag_trapping_math)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 2343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX || TARGET_MMX_WITH_SSE",
    __builtin_constant_p
# 2343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int)
# 2343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512DQ))",
    __builtin_constant_p (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22310 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0))))
    ? (int) (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22310 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0))))
    : -1 },
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_64BIT",
    __builtin_constant_p
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "((TARGET_64BIT) && (TARGET_LZCNT)) && (TARGET_64BIT)",
    __builtin_constant_p ((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) ((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 8413 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ\n   && reload_completed\n   && (TARGET_AVX512VL\n       || REG_P (operands[0])\n       || !EXT_REX_SSE_REG_P (operands[1]))",




    __builtin_constant_p
# 8413 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    ? (int)
# 8413 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (DImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_DImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_DImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "word_mode == DImode",
    __builtin_constant_p
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)
    ? (int)
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V4DImode)\n       == GET_MODE_NUNITS (V8SFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    : -1 },
# 22594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VBMI",
    __builtin_constant_p
# 22594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0))
    ? (int)
# 22594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V4DFmode)\n       == GET_MODE_NUNITS (V4DFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_FMA || TARGET_AVX512F) && (TARGET_SSE2)",
    __builtin_constant_p (
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 4733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "((ix86_unary_operator_ok (PLUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VL && TARGET_AVX512F)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6122 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6122 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512BITALG) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 534 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 534 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_64BIT\n   && exact_log2 (UINTVAL (operands[3])) > 0) && ( reload_completed)",

    __builtin_constant_p (
# 8506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && exact_log2 (((unsigned long) ((operands[3])->u.hwint[0]))) > 0) &&
# 8509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 8506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && exact_log2 (((unsigned long) ((operands[3])->u.hwint[0]))) > 0) &&
# 8509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_SSE4_1 && 1 && 1\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1
   && ix86_pre_reload_split ()) &&
# 17622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1
   && ix86_pre_reload_split ()) &&
# 17622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DImode)\n       == GET_MODE_NUNITS (V32HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 21277 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SHSTK",
    __builtin_constant_p
# 21277 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0))
    ? (int)
# 21277 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0))
    : -1 },
  { "(!TARGET_X32\n   && !TARGET_INDIRECT_BRANCH_REGISTER\n   && peep2_reg_dead_p (2, operands[0])) && (word_mode == DImode)",


    __builtin_constant_p (
# 13238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && peep2_reg_dead_p (2, operands[0])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 13238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && peep2_reg_dead_p (2, operands[0])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (register_operand (operands[0], V4SFmode)\n       || register_operand (operands[1], V4SFmode))",


    __builtin_constant_p
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4SFmode)
       || register_operand (operands[1], E_V4SFmode)))
    ? (int)
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4SFmode)
       || register_operand (operands[1], E_V4SFmode)))
    : -1 },
# 656 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "REGNO (operands[0]) == REGNO (operands[2])",
    __builtin_constant_p
# 656 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rhs_regno(operands[0])) == (rhs_regno(operands[2])))
    ? (int)
# 656 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rhs_regno(operands[0])) == (rhs_regno(operands[2])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE2))",
    __builtin_constant_p (
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 9715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 9715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && ( reload_completed\n   && (TARGET_AVX512VL\n       || REG_P (operands[0])\n       || !EXT_REX_SSE_REG_P (operands[1])))",



    __builtin_constant_p (
# 9078 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 9087 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))))
    ? (int) (
# 9078 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 9087 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DFmode)\n       == GET_MODE_NUNITS (V64QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && X87_ENABLE_FLOAT (DFmode, HImode)\n   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n   && (TARGET_USE_HIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",



    __builtin_constant_p
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_HImode) == E_SImode) || (E_HImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_HImode) == E_SImode) || (E_HImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()",



    __builtin_constant_p
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    ? (int)
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    : -1 },
  { "(reload_completed\n   && (!REG_P (operands[1])\n       || REGNO (operands[0]) != REGNO (operands[1]))) && (TARGET_64BIT)",


    __builtin_constant_p (
# 9189 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (!(((enum rtx_code) (operands[1])->code) == REG)
       || (rhs_regno(operands[0])) != (rhs_regno(operands[1])))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9189 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (!(((enum rtx_code) (operands[1])->code) == REG)
       || (rhs_regno(operands[0])) != (rhs_regno(operands[1])))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (MINUS, QImode, operands)",
    __builtin_constant_p
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_QImode, operands))
    ? (int)
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE && ix86_binary_operator_ok (MINUS, V4SFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_AVX512F && TARGET_SSE_MATH) && (TARGET_64BIT)",
    __builtin_constant_p (
# 5060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5060 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 13419 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (1))\n   && !reg_mentioned_p (operands[0],\n			CALL_INSN_FUNCTION_USAGE (peep2_next_insn (1)))",


    __builtin_constant_p
# 13419 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((peep2_next_insn (1)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (1))->u.fld[7]).rt_rtx)))
    ? (int)
# 13419 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((peep2_next_insn (1)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (1))->u.fld[7]).rt_rtx)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "((TARGET_USE_BT\n   && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",



    __builtin_constant_p ((
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12179 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12179 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 5811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 5811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 5811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_XOP) && (TARGET_AVX)",
    __builtin_constant_p (
# 19949 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 19949 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V8DFmode, operands)\n   && 1",


    __builtin_constant_p
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && 1)
    ? (int)
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && 1)
    : -1 },
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "!TARGET_64BIT\n   && peep2_reg_dead_p (3, operands[2])\n   && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))",


    __builtin_constant_p
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (3, operands[2])
   && rtx_equal_p ((((operands[0])->u.fld[0]).rt_rtx), (((operands[3])->u.fld[0]).rt_rtx)))
    ? (int)
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (3, operands[2])
   && rtx_equal_p ((((operands[0])->u.fld[0]).rt_rtx), (((operands[3])->u.fld[0]).rt_rtx)))
    : -1 },
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (GET_MODE_NUNITS (V8HImode)\n       == GET_MODE_NUNITS (V4SFmode))",


    __builtin_constant_p
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    ? (int)
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    : -1 },
# 19938 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (4, operands[4])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[4], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (1),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19948 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19938 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (4, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19938 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (4, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && ix86_match_ccmode (peep2_next_insn (1),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
# 19704 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2 || TARGET_XOP",
    __builtin_constant_p
# 19704 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0))
    ? (int)
# 19704 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0))
    : -1 },
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (register_operand (operands[0], V16QImode)\n       || register_operand (operands[1], V16QImode))",


    __builtin_constant_p
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16QImode)
       || register_operand (operands[1], E_V16QImode)))
    ? (int)
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16QImode)
       || register_operand (operands[1], E_V16QImode)))
    : -1 },
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   /* Disable this splitter if avx512vl_vec_dup_gprv*[qhs]i insn is\n      available, because then we can broadcast from GPRs directly.\n      For V*[QH]I modes it requires both -mavx512vl and -mavx512bw,\n      for V*SI mode it requires just -mavx512vl.  */\n   && !(TARGET_AVX512VL\n	&& (TARGET_AVX512BW || SImode == SImode))\n   && reload_completed && GENERAL_REG_P (operands[1])",







    __builtin_constant_p
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)




   && !(((ix86_isa_flags & (1UL << 20)) != 0)
 && (((ix86_isa_flags & (1UL << 11)) != 0) || E_SImode == E_SImode))
   && reload_completed && ((((enum rtx_code) (operands[1])->code) == REG) && ((((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36)))))
    ? (int)
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)




   && !(((ix86_isa_flags & (1UL << 20)) != 0)
 && (((ix86_isa_flags & (1UL << 11)) != 0) || E_SImode == E_SImode))
   && reload_completed && ((((enum rtx_code) (operands[1])->code) == REG) && ((((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36)))))
    : -1 },
# 15625 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n    || (TARGET_80387 && X87_ENABLE_ARITH (DFmode)))\n   && COMMUTATIVE_ARITH_P (operands[3])\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",



    __builtin_constant_p
# 15625 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode)))
   && ((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 15625 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode)))
   && ((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BW && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSSE3 && 1 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(!TARGET_X32 && !TARGET_INDIRECT_BRANCH_REGISTER) && (word_mode == DImode)",
    __builtin_constant_p (
# 13324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0) && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 13324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0) && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
# 3337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && (lra_in_progress || reload_completed\n       || !CONST_DOUBLE_P (operands[1])\n       || ((optimize_function_for_size_p (cfun)\n	    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n	   && ((IS_STACK_MODE (DFmode)\n		&& standard_80387_constant_p (operands[1]) > 0)\n	       || (TARGET_SSE2 && TARGET_SSE_MATH\n		   && standard_sse_constant_p (operands[1], DFmode) == 1))\n	   && !memory_operand (operands[0], DFmode))\n       || ((TARGET_64BIT || !TARGET_MEMORY_MISMATCH_STALL)\n	   && memory_operand (operands[0], DFmode))\n       || !TARGET_HARD_DF_REGS)",
# 3350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 3337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && ((((((target_flags & (1U << 1)) != 0) && ((E_DFmode) == E_SFmode || (E_DFmode) == E_DFmode || (E_DFmode) == E_XFmode)) && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
  && standard_80387_constant_p (operands[1]) > 0)
        || (((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
     && standard_sse_constant_p (operands[1], E_DFmode) == 1))
    && !memory_operand (operands[0], E_DFmode))
       || ((((ix86_isa_flags & (1UL << 1)) != 0) || !ix86_tune_features[X86_TUNE_MEMORY_MISMATCH_STALL])
    && memory_operand (operands[0], E_DFmode))
       || !(((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))))
    ? (int)
# 3337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && ((((((target_flags & (1U << 1)) != 0) && ((E_DFmode) == E_SFmode || (E_DFmode) == E_DFmode || (E_DFmode) == E_XFmode)) && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
  && standard_80387_constant_p (operands[1]) > 0)
        || (((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
     && standard_sse_constant_p (operands[1], E_DFmode) == 1))
    && !memory_operand (operands[0], E_DFmode))
       || ((((ix86_isa_flags & (1UL << 1)) != 0) || !ix86_tune_features[X86_TUNE_MEMORY_MISMATCH_STALL])
    && memory_operand (operands[0], E_DFmode))
       || !(((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))))
    : -1 },
  { "(((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n   < (HOST_WIDE_INT_1U << INTVAL (operands[2]))) && (TARGET_64BIT)) && ( reload_completed)",

    __builtin_constant_p ((
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0]))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 6328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) ((
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0]))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 6328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 14726 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && INTVAL (operands[2]) + 4 == INTVAL (operands[6])\n   && INTVAL (operands[3]) + 4 == INTVAL (operands[7])\n   && INTVAL (operands[4]) + 4 == INTVAL (operands[8])\n   && INTVAL (operands[5]) + 4 == INTVAL (operands[9])\n   && INTVAL (operands[2]) + 8 == INTVAL (operands[10])\n   && INTVAL (operands[3]) + 8 == INTVAL (operands[11])\n   && INTVAL (operands[4]) + 8 == INTVAL (operands[12])\n   && INTVAL (operands[5]) + 8 == INTVAL (operands[13])\n   && INTVAL (operands[2]) + 12 == INTVAL (operands[14])\n   && INTVAL (operands[3]) + 12 == INTVAL (operands[15])\n   && INTVAL (operands[4]) + 12 == INTVAL (operands[16])\n   && INTVAL (operands[5]) + 12 == INTVAL (operands[17])",
# 14739 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p
# 14726 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[10])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[11])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[12])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[13])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 12 == ((operands[14])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 12 == ((operands[15])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 12 == ((operands[16])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 12 == ((operands[17])->u.hwint[0]))
    ? (int)
# 14726 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[10])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[11])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[12])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[13])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 12 == ((operands[14])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 12 == ((operands[15])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 12 == ((operands[16])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 12 == ((operands[17])->u.hwint[0]))
    : -1 },
  { "(ix86_binary_operator_ok (LSHIFTRT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && !(MEM_P (operands[1]) && MEM_P (operands[2])))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11863 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11863 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_AVX2) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 12448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 12448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V8SImode == V16SFmode\n									      || V8SImode == V8DFmode\n									      || V8SImode == V8DImode\n									      || V8SImode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SImode == E_V16SFmode
               || E_V8SImode == E_V8DFmode
               || E_V8SImode == E_V8DImode
               || E_V8SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SImode == E_V16SFmode
               || E_V8SImode == E_V8DFmode
               || E_V8SImode == E_V8DImode
               || E_V8SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_CMPXCHG) && (TARGET_64BIT || TARGET_CMPXCHG8B)",
    __builtin_constant_p (
# 542 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG]) &&
# 529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || ix86_arch_features[X86_ARCH_CMPXCHG8B]))
    ? (int) (
# 542 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG]) &&
# 529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || ix86_arch_features[X86_ARCH_CMPXCHG8B]))
    : -1 },
# 4696 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_AVX512F && TARGET_SSE_MATH",
    __builtin_constant_p
# 4696 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 4696 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
# 646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW_A",
    __builtin_constant_p
# 646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 3)) != 0))
    ? (int)
# 646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 3)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((((TARGET_AVX512VL) && (Pmode == DImode)) && (Pmode == DImode)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 17584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && !(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 17584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 17584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)) && ( reload_completed)",
    __builtin_constant_p (
# 3916 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0))) &&
# 3918 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 3916 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0))) &&
# 3918 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && 1 && 1",

    __builtin_constant_p
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1)
    ? (int)
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSSE3 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_SSE4_1) && ( reload_completed && SSE_REG_P (operands[0]))",
    __builtin_constant_p (
# 8278 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 8285 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed && ((((enum rtx_code) (operands[0])->code) == REG) && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))))
    ? (int) (
# 8278 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 8285 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed && ((((enum rtx_code) (operands[0])->code) == REG) && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE\n   && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode)))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_AVX512PF) && (Pmode == SImode)",
    __builtin_constant_p (
# 18973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 17)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 18973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 17)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_PLUS, V8HImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V8HImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V8HImode, operands)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V8DFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((QImode == HImode\n       && TARGET_LCP_STALL)\n       || (!TARGET_USE_MOV0\n          && TARGET_SPLIT_LONG_MOVES\n          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))\n   && peep2_regno_dead_p (0, FLAGS_REG)",






    __builtin_constant_p
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_QImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (!ix86_tune_features[X86_TUNE_USE_MOV0]
          && ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_QImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (!ix86_tune_features[X86_TUNE_USE_MOV0]
          && ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn))
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 8712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && ix86_match_ccmode\n	(insn,\n	 /* If we are going to emit testl instead of testq, and the operands[1]\n	    constant might have the SImode sign bit set, make sure the sign\n	    flag isn't tested, because the instruction will set the sign flag\n	    based on bit 31 rather than bit 63.  If it isn't CONST_INT,\n	    conservatively assume it might have bit 31 set.  */\n	 (satisfies_constraint_Z (operands[1])\n	  && (!CONST_INT_P (operands[1])\n	      || val_signbit_known_set_p (SImode, INTVAL (operands[1]))))\n	 ? CCZmode : CCNOmode)",
# 8724 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 8712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_match_ccmode
 (insn,





  (satisfies_constraint_Z (operands[1])
   && (!(((enum rtx_code) (operands[1])->code) == CONST_INT)
       || val_signbit_known_set_p (E_SImode, ((operands[1])->u.hwint[0]))))
  ? E_CCZmode : E_CCNOmode))
    ? (int)
# 8712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_match_ccmode
 (insn,





  (satisfies_constraint_Z (operands[1])
   && (!(((enum rtx_code) (operands[1])->code) == CONST_INT)
       || val_signbit_known_set_p (E_SImode, ((operands[1])->u.hwint[0]))))
  ? E_CCZmode : E_CCNOmode))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (AND, V4HImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (AND, E_V4HImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (AND, E_V4HImode, operands))
    : -1 },
# 20548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_PREFETCH_SSE",
    __builtin_constant_p
# 20548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(x86_prefetch_sse)
    ? (int)
# 20548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(x86_prefetch_sse)
    : -1 },
# 9672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_USE_BT\n   && ix86_binary_operator_ok (XOR, DImode, operands)\n   && IN_RANGE (exact_log2 (INTVAL (operands[2])), 31, 63)",


    __builtin_constant_p
# 9672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31)))
    ? (int)
# 9672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31)))
    : -1 },
# 3735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "SSE_FLOAT_MODE_P (DFmode)",
    __builtin_constant_p
# 3735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)))
    ? (int)
# 3735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)))
    : -1 },
# 19821 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[0]) == REGNO (operands[4])\n   && peep2_reg_dead_p (4, operands[0])\n   && (QImode != QImode\n       || immediate_operand (operands[2], SImode)\n       || any_QIreg_operand (operands[2], SImode))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && ix86_match_ccmode (peep2_next_insn (3),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19833 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19821 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (4, operands[0])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19821 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (4, operands[0])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SImode)\n       == GET_MODE_NUNITS (V16SFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    : -1 },
# 2435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE3\n   && can_create_pseudo_p ()\n   && ((rtx_equal_p (operands[1], operands[3])\n	&& rtx_equal_p (operands[2], operands[4]))\n       || (rtx_equal_p (operands[1], operands[4])\n	   && rtx_equal_p (operands[2], operands[3])))",





    __builtin_constant_p
# 2435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && (!reload_in_progress && !reload_completed)
   && ((rtx_equal_p (operands[1], operands[3])
 && rtx_equal_p (operands[2], operands[4]))
       || (rtx_equal_p (operands[1], operands[4])
    && rtx_equal_p (operands[2], operands[3]))))
    ? (int)
# 2435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && (!reload_in_progress && !reload_completed)
   && ((rtx_equal_p (operands[1], operands[3])
 && rtx_equal_p (operands[2], operands[4]))
       || (rtx_equal_p (operands[1], operands[4])
    && rtx_equal_p (operands[2], operands[3]))))
    : -1 },
  { "(INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == SImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",
    __builtin_constant_p (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_GNU2_TLS",
    __builtin_constant_p
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU2))
    ? (int)
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU2))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_PLUS, V32HImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 13383 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && !SIBLING_CALL_P (insn)",
    __builtin_constant_p
# 13383 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && !(((insn))->jump))
    ? (int)
# 13383 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && !(((insn))->jump))
    : -1 },
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[0]) != REGNO (operands[1])\n   && (QImode != QImode\n       || any_QIreg_operand (operands[1], QImode))",


    __builtin_constant_p
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_QImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode)))
    ? (int)
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_QImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode)))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V64QImode)\n       == GET_MODE_NUNITS (V32HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && (GET_MODE_NUNITS (V2DFmode)\n       == GET_MODE_NUNITS (V2DFmode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, QImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX2) && (TARGET_AVX)",
    __builtin_constant_p (
# 20163 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 20163 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 8013 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387",
    __builtin_constant_p
# 8013 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0))
    ? (int)
# 8013 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0))
    : -1 },
# 16519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n       || TARGET_MIX_SSE_I387)\n   && flag_finite_math_only\n   && flag_unsafe_math_optimizations",




    __builtin_constant_p
# 16519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_finite_math_only
   && flag_unsafe_math_optimizations)
    ? (int)
# 16519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_finite_math_only
   && flag_unsafe_math_optimizations)
    : -1 },
  { "(reload_completed) && (Pmode == SImode)",
    __builtin_constant_p (
# 4212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 4212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 1566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && (TARGET_USE_HIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",


    __builtin_constant_p
# 1566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 1566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (ix86_tune_features[X86_TUNE_USE_HIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
  { "((TARGET_CMOVE\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 18833 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 18833 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (XOR, SImode, operands)",

    __builtin_constant_p
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_SImode, operands))
    ? (int)
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_SImode, operands))
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",


    __builtin_constant_p (
# 17685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 17685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_SSE2\n   && (GET_MODE_NUNITS (V2DFmode)\n       == GET_MODE_NUNITS (V16QImode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || SImode == SImode\n       || SImode == DImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 9524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && !TARGET_BMI && TARGET_STV && TARGET_SSE2\n   && can_create_pseudo_p ()",

    __builtin_constant_p
# 9524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && !((ix86_isa_flags & (1UL << 23)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && (!reload_in_progress && !reload_completed))
    ? (int)
# 9524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && !((ix86_isa_flags & (1UL << 23)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && (!reload_in_progress && !reload_completed))
    : -1 },
# 16800 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3",
    __builtin_constant_p
# 16800 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 55)) != 0))
    ? (int)
# 16800 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 55)) != 0))
    : -1 },
# 10183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))",
    __builtin_constant_p
# 10183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 10183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_OPT_AGU\n   && peep2_regno_dead_p (0, FLAGS_REG)",

    __builtin_constant_p
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_OPT_AGU]
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_OPT_AGU]
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VPOPCNTDQ)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0)))
    : -1 },
# 14090 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_BMI && TARGET_64BIT",
    __builtin_constant_p
# 14090 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 14090 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
  { "((TARGET_SSE) && (TARGET_SSE2)) && ( reload_completed)",
    __builtin_constant_p ((
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 16072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 16072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (MINUS, V16HImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V16HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V16HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 17464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n   && flag_unsafe_math_optimizations",


    __builtin_constant_p
# 17464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!((ix86_fpmath & FPMATH_SSE) != 0) || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_unsafe_math_optimizations)
    ? (int)
# 17464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!((ix86_fpmath & FPMATH_SSE) != 0) || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_unsafe_math_optimizations)
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH\n       && DImode != HImode \n       && ((DImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_DImode != E_HImode
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_DImode != E_HImode
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
  { "(TARGET_FMA || TARGET_FMA4) && (TARGET_SSE2)",
    __builtin_constant_p (
# 4560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 4560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n    || (TARGET_SSE && (SFmode == TFmode)))\n   && reload_completed",


    __builtin_constant_p
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode == E_TFmode)))
   && reload_completed)
    ? (int)
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode == E_TFmode)))
   && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V8DFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE2) && (TARGET_AVX)",
    __builtin_constant_p (
# 7141 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 7141 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_CLZERO) && (Pmode == SImode)",
    __builtin_constant_p (
# 21411 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 5)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 21411 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 5)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (MINUS, SImode, operands)",

    __builtin_constant_p
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    ? (int)
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    : -1 },
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, HImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && 1) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 19821 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[0]) == REGNO (operands[4])\n   && peep2_reg_dead_p (4, operands[0])\n   && (HImode != QImode\n       || immediate_operand (operands[2], SImode)\n       || any_QIreg_operand (operands[2], SImode))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && ix86_match_ccmode (peep2_next_insn (3),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19833 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19821 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (4, operands[0])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19821 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (4, operands[0])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (AND, V2SImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (AND, E_V2SImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (AND, E_V2SImode, operands))
    : -1 },
# 11881 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && 1",
    __builtin_constant_p
# 11881 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1)
    ? (int)
# 11881 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1)
    : -1 },
  { "(TARGET_SSSE3) && (TARGET_SSE2)",
    __builtin_constant_p (
# 21095 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 21095 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (SImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, SImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX\n   && (operands[2] == CONST0_RTX (V4DFmode)\n       || !MEM_P (operands[1]))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4DFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4DFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && (32 == 64 || TARGET_AVX512VL)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "((TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && (((((((((((word_mode == SImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",


    __builtin_constant_p (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_PLUS, V8HImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V8HImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V8HImode, operands))
    : -1 },
# 2258 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_SSE4_1\n   && reload_completed",

    __builtin_constant_p
# 2258 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed)
    ? (int)
# 2258 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed)
    : -1 },
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFTRT, SImode, operands)",
    __builtin_constant_p
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    ? (int)
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (PLUS, V8SFmode, operands)\n   && 1 && 1) && (TARGET_AVX)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
# 1358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW",
    __builtin_constant_p
# 1358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0))
    ? (int)
# 1358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0))
    : -1 },
# 1439 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)\n   && ix86_binary_operator_ok (SMAX, V4HImode, operands)",


    __builtin_constant_p
# 1439 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (SMAX, E_V4HImode, operands))
    ? (int)
# 1439 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (SMAX, E_V4HImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 17156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && !flag_trapping_math",

    __builtin_constant_p
# 17156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && !flag_trapping_math)
    ? (int)
# 17156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && !flag_trapping_math)
    : -1 },
# 21172 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_PTWRITE",
    __builtin_constant_p
# 21172 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 13)) != 0))
    ? (int)
# 21172 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 13)) != 0))
    : -1 },
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (IOR, QImode, operands)",

    __builtin_constant_p
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_QImode, operands))
    ? (int)
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_QImode, operands))
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, DImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(REGNO (operands[0]) == REGNO (operands[2])) && (TARGET_64BIT)",
    __builtin_constant_p (
# 656 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rhs_regno(operands[0])) == (rhs_regno(operands[2]))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 656 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((rhs_regno(operands[0])) == (rhs_regno(operands[2]))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (((((TARGET_AVX512VL) && (Pmode == DImode)) && (Pmode == DImode)) && (TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 22139 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 22139 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 12688 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && IN_RANGE (exact_log2 (UINTVAL (operands[3]) + 1), 32, 63)",

    __builtin_constant_p
# 12688 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])) + 1)) - (unsigned long) (32) <= (unsigned long) (63) - (unsigned long) (32)))
    ? (int)
# 12688 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])) + 1)) - (unsigned long) (32) <= (unsigned long) (63) - (unsigned long) (32)))
    : -1 },
# 17412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && flag_unsafe_math_optimizations\n   && ix86_pre_reload_split ()",


    __builtin_constant_p
# 17412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_unsafe_math_optimizations
   && ix86_pre_reload_split ())
    ? (int)
# 17412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_unsafe_math_optimizations
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE && ix86_binary_operator_ok (PLUS, V4SFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    : -1 },
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (MINUS, HImode, operands)",

    __builtin_constant_p
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands))
    ? (int)
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands))
    : -1 },
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2 && 1\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1
   && ix86_pre_reload_split ())
    ? (int)
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1
   && ix86_pre_reload_split ())
    : -1 },
# 5772 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGCmode)",
    __builtin_constant_p
# 5772 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGCmode))
    ? (int)
# 5772 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGCmode))
    : -1 },
  { "(ix86_match_ccmode (insn, CCmode)\n   && ix86_binary_operator_ok (MINUS, DImode, operands)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)) && ( reload_completed)",


    __builtin_constant_p (
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))) &&
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))) &&
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX2 && 1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1) &&
# 516 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1) &&
# 516 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_SSE4_1 && !flag_trapping_math) && (TARGET_SSE2)",
    __builtin_constant_p (
# 18454 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 18454 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 10392 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NOT, QImode, operands)",
    __builtin_constant_p
# 10392 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_QImode, operands))
    ? (int)
# 10392 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 22246 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 22246 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",

    __builtin_constant_p (
# 17734 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 17734 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && (V8DImode == V16SFmode\n							      || V8DImode == V8DFmode\n							      || V8DImode == V8DImode\n							      || V8DImode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DImode == E_V16SFmode
             || E_V8DImode == E_V8DFmode
             || E_V8DImode == E_V8DImode
             || E_V8DImode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DImode == E_V16SFmode
             || E_V8DImode == E_V8DFmode
             || E_V8DImode == E_V8DImode
             || E_V8DImode == E_V16SImode)))
    : -1 },
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_unary_operator_ok (NOT, QImode, operands)",

    __builtin_constant_p
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_QImode, operands))
    ? (int)
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_QImode, operands))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V16HImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V16HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V16HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 20569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_3DNOW || TARGET_PRFCHW || TARGET_PREFETCHWT1",
    __builtin_constant_p
# 20569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 2)) != 0) || ((ix86_isa_flags & (1UL << 43)) != 0) || ((ix86_isa_flags & (1UL << 42)) != 0))
    ? (int)
# 20569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 2)) != 0) || ((ix86_isa_flags & (1UL << 43)) != 0) || ((ix86_isa_flags & (1UL << 42)) != 0))
    : -1 },
# 16939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && (16 == 64 || TARGET_AVX512VL)",
    __builtin_constant_p
# 16939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int)
# 16939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V4TImode)\n       || register_operand (operands[1], V4TImode))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4TImode)
       || register_operand (operands[1], E_V4TImode))) &&
# 216 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4TImode)
       || register_operand (operands[1], E_V4TImode))) &&
# 216 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 9886 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(INTVAL (operands[2]) & ~255)\n    && (INTVAL (operands[2]) & 128)",



    __builtin_constant_p
# 9886 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~255)
    && (((operands[2])->u.hwint[0]) & 128))
    ? (int)
# 9886 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~255)
    && (((operands[2])->u.hwint[0]) & 128))
    : -1 },
  { "(TARGET_CMOVE\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DImode)\n       == GET_MODE_NUNITS (V4DImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    : -1 },
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, HImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && TARGET_AVX512VL && TARGET_AVX512BW)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (operands[2] == CONST0_RTX (V8HImode)\n       || !MEM_P (operands[1]))",


    __builtin_constant_p
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V8HImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V8HImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_MINUS, V16HImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 3659 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n   && (standard_80387_constant_p (operands[1]) == 8\n       || standard_80387_constant_p (operands[1]) == 9)",


    __builtin_constant_p
# 3659 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (standard_80387_constant_p (operands[1]) == 8
       || standard_80387_constant_p (operands[1]) == 9))
    ? (int)
# 3659 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (standard_80387_constant_p (operands[1]) == 8
       || standard_80387_constant_p (operands[1]) == 9))
    : -1 },
  { "(TARGET_SSE4_1 && TARGET_AVX512BW && TARGET_AVX512VL\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()) &&
# 17622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 17619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()) &&
# 17622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && 1 && 1",
    __builtin_constant_p
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && 1)
    ? (int)
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && 1)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V4DFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (DImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",




    __builtin_constant_p (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && TARGET_FISTTP\n   && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || DImode != DImode))\n	&& TARGET_SSE_MATH)",




    __builtin_constant_p
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && (((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_DImode != E_DImode))
 && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && (((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_DImode != E_DImode))
 && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (4, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (HImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
  { "((TARGET_64BIT && TARGET_SSE) && (TARGET_SSE2)) && ( reload_completed)",
    __builtin_constant_p ((
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 16091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 16091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (register_operand (operands[0], V2DImode)\n       || register_operand (operands[1], V2DImode))",


    __builtin_constant_p
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V2DImode)
       || register_operand (operands[1], E_V2DImode)))
    ? (int)
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V2DImode)
       || register_operand (operands[1], E_V2DImode)))
    : -1 },
# 5635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCZmode)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 5635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCZmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 5635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCZmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_MINUS, V16QImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V16QImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V16QImode, operands))
    : -1 },
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (SMAX, V2SFmode, operands)",

    __builtin_constant_p
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SMAX, E_V2SFmode, operands))
    ? (int)
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SMAX, E_V2SFmode, operands))
    : -1 },
  { "(TARGET_AVX512DQ && 1) && (TARGET_AVX)",
    __builtin_constant_p (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 10424 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (!(MEM_P (operands[1]) && MEM_P (operands[2]))\n       || (TARGET_SSE3 && rtx_equal_p (operands[1], operands[2])))",


    __builtin_constant_p
# 10424 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
       || (((ix86_isa_flags & (1UL << 52)) != 0) && rtx_equal_p (operands[1], operands[2]))))
    ? (int)
# 10424 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
       || (((ix86_isa_flags & (1UL << 52)) != 0) && rtx_equal_p (operands[1], operands[2]))))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (XFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)\n   && can_create_pseudo_p ()",



    __builtin_constant_p
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))
   && (!reload_in_progress && !reload_completed))
    ? (int)
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))
   && (!reload_in_progress && !reload_completed))
    : -1 },
  { "(TARGET_BMI) && (TARGET_64BIT)",
    __builtin_constant_p (
# 14396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (MINUS, HImode, operands)",
    __builtin_constant_p
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_HImode, operands))
    ? (int)
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_HImode, operands))
    : -1 },
# 17599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && 1 && 1",
    __builtin_constant_p
# 17599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1)
    ? (int)
# 17599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1)
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (PLUS, V2DFmode, operands)\n   && 1 && 1) && (TARGET_SSE2)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || SImode == SImode\n       || SImode == DImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 23377 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_VAES",
    __builtin_constant_p
# 23377 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 18)) != 0))
    ? (int)
# 23377 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 18)) != 0))
    : -1 },
  { "(TARGET_SSE\n   && (GET_MODE_NUNITS (V2DImode)\n       == GET_MODE_NUNITS (V2DFmode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "((TARGET_MOVE_M1_VIA_OR || optimize_insn_for_size_p ())\n   && peep2_regno_dead_p (0, FLAGS_REG)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 20089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_MOVE_M1_VIA_OR] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 20089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_MOVE_M1_VIA_OR] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(SSE_FLOAT_MODE_P (SFmode)\n   && (!TARGET_FISTTP || TARGET_SSE_MATH)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n   || (TARGET_80387 && TARGET_CMOVE)",

    __builtin_constant_p
# 1646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))))
    ? (int)
# 1646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VBMI2)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 23004 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 23004 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)))
    : -1 },
# 21880 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2",
    __builtin_constant_p
# 21880 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))
    ? (int)
# 21880 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))
    : -1 },
# 13010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(peep2_reg_dead_p (4, operands[2])\n    || operands_match_p (operands[2], operands[4]))\n   && ! reg_overlap_mentioned_p (operands[4], operands[0])\n   && ! reg_overlap_mentioned_p (operands[4], operands[1])\n   && ! reg_overlap_mentioned_p (operands[4], operands[5])\n   && ! reg_set_p (operands[4], operands[5])\n   && refers_to_regno_p (FLAGS_REG, operands[1], (rtx *)NULL)\n   && peep2_regno_dead_p (0, FLAGS_REG)",







    __builtin_constant_p
# 13010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((peep2_reg_dead_p (4, operands[2])
    || operands_match_p (operands[2], operands[4]))
   && ! reg_overlap_mentioned_p (operands[4], operands[0])
   && ! reg_overlap_mentioned_p (operands[4], operands[1])
   && ! reg_overlap_mentioned_p (operands[4], operands[5])
   && ! reg_set_p (operands[4], operands[5])
   && refers_to_regno_p (17, operands[1], (rtx *)nullptr)
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 13010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((peep2_reg_dead_p (4, operands[2])
    || operands_match_p (operands[2], operands[4]))
   && ! reg_overlap_mentioned_p (operands[4], operands[0])
   && ! reg_overlap_mentioned_p (operands[4], operands[1])
   && ! reg_overlap_mentioned_p (operands[4], operands[5])
   && ! reg_set_p (operands[4], operands[5])
   && refers_to_regno_p (17, operands[1], (rtx *)nullptr)
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)))
    : -1 },
  { "(ix86_binary_operator_ok (XOR, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_DImode, operands)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_DImode, operands)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n    || (TARGET_SSE && (DFmode == TFmode)))\n   && reload_completed",


    __builtin_constant_p
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode == E_TFmode)))
   && reload_completed)
    ? (int)
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode == E_TFmode)))
   && reload_completed)
    : -1 },
# 1426 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCmode)",
    __builtin_constant_p
# 1426 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode))
    ? (int)
# 1426 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode))
    : -1 },
# 4412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && (64 == 64 || TARGET_AVX512VL)",
    __builtin_constant_p
# 4412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int)
# 4412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 11895 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 11895 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 11895 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2)))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V4DImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (MINUS, V4SImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 6898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, QImode, operands)",
    __builtin_constant_p
# 6898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands))
    ? (int)
# 6898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_F16C || TARGET_AVX512VL)",
    __builtin_constant_p (
# 81 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 81 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (MINUS, V8HImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V8HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V8HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_FMA4) && (TARGET_SSE2)",
    __builtin_constant_p (
# 4998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 30)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 4998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 30)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 12130 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_BT",
    __builtin_constant_p
# 12130 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT])
    ? (int)
# 12130 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT])
    : -1 },
  { "((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (CONST_INT_P (operands[2])\n       ? (INTVAL (operands[2]) < GET_MODE_BITSIZE (DImode)\n	  && INTVAL (operands[2])\n	       >= (optimize_function_for_size_p (cfun) ? 8 : 32))\n       : !memory_operand (operands[1], DImode))\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",






    __builtin_constant_p (
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_DImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_DImode))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 12356 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT)
       ? (((operands[2])->u.hwint[0]) < ((unsigned short) mode_to_bits (E_DImode).coeffs[0])
   && ((operands[2])->u.hwint[0])
        >= (optimize_function_for_size_p ((cfun + 0)) ? 8 : 32))
       : !memory_operand (operands[1], E_DImode))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && !(SSE_FLOAT_MODE_P (DFmode) && (!TARGET_FISTTP || TARGET_SSE_MATH))",

    __builtin_constant_p
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))))
    ? (int)
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))))
    : -1 },
# 19364 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "! TARGET_PARTIAL_REG_STALL && reload_completed\n   && (GET_MODE (operands[0]) == HImode\n       || (GET_MODE (operands[0]) == QImode\n	   && (TARGET_PROMOTE_QImode\n	       || optimize_insn_for_size_p ())))",




    __builtin_constant_p
# 19364 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && (((machine_mode) (operands[0])->mode) == E_HImode
       || (((machine_mode) (operands[0])->mode) == E_QImode
    && (ix86_tune_features[X86_TUNE_PROMOTE_QIMODE]
        || optimize_insn_for_size_p ()))))
    ? (int)
# 19364 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && (((machine_mode) (operands[0])->mode) == E_HImode
       || (((machine_mode) (operands[0])->mode) == E_QImode
    && (ix86_tune_features[X86_TUNE_PROMOTE_QIMODE]
        || optimize_insn_for_size_p ()))))
    : -1 },
  { "(/* Ensure that resulting mask is zero or sign extended operand.  */\n   INTVAL (operands[4]) >= 0\n   && ((INTVAL (operands[3]) > 0\n	&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n       || (SImode == DImode\n	   && INTVAL (operands[3]) > 32\n	   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\n   && ix86_match_ccmode (insn,\n			 /* If zero_extract mode precision is the same\n			    as len, the SF of the zero_extract\n			    comparison will be the most significant\n			    extracted bit, but this could be matched\n			    after splitting only for pos 0 len all bits\n			    trivial extractions.  Require CCZmode.  */\n			 (GET_MODE_PRECISION (SImode)\n			  == INTVAL (operands[3]))\n			 /* Otherwise, require CCZmode if we'd use a mask\n			    with the most significant bit set and can't\n			    widen it to wider mode.  *testdi_1 also\n			    requires CCZmode if the mask has bit\n			    31 set and all bits above it clear.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     >= 32)\n			 /* We can't widen also if val is not a REG.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     == GET_MODE_PRECISION (GET_MODE (operands[2]))\n			     && !register_operand (operands[2],\n						   GET_MODE (operands[2])))\n			 /* And we shouldn't widen if\n			    TARGET_PARTIAL_REG_STALL.  */\n			 || (TARGET_PARTIAL_REG_STALL\n			     && (INTVAL (operands[3]) + INTVAL (operands[4])\n				 >= (paradoxical_subreg_p (operands[2])\n				     && (GET_MODE_CLASS\n					  (GET_MODE (SUBREG_REG (operands[2])))\n					 == MODE_INT)\n				     ? GET_MODE_PRECISION\n					 (GET_MODE (SUBREG_REG (operands[2])))\n				     : GET_MODE_PRECISION\n					 (GET_MODE (operands[2])))))\n			 ? CCZmode : CCNOmode)) && ( 1)",
# 19411 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p (
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_SImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_SImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 8866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_SImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_SImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 8866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 12963 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[1]) == REGNO (operands[3])\n   && ! reg_overlap_mentioned_p (operands[3], operands[0])\n   && peep2_regno_dead_p (0, FLAGS_REG)",


    __builtin_constant_p
# 12963 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[1])) == (rhs_regno(operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 12963 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[1])) == (rhs_regno(operands[3]))
   && ! reg_overlap_mentioned_p (operands[3], operands[0])
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 17307 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && (flag_fp_int_builtin_inexact || !flag_trapping_math)\n   && ix86_pre_reload_split ()",


    __builtin_constant_p
# 17307 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (flag_fp_int_builtin_inexact || !flag_trapping_math)
   && ix86_pre_reload_split ())
    ? (int)
# 17307 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (flag_fp_int_builtin_inexact || !flag_trapping_math)
   && ix86_pre_reload_split ())
    : -1 },
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (MINUS, V8QImode, operands)",

    __builtin_constant_p
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V8QImode, operands))
    ? (int)
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V8QImode, operands))
    : -1 },
# 21482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_WBNOINVD",
    __builtin_constant_p
# 21482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 20)) != 0))
    ? (int)
# 21482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 20)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V16SFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 5048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT\n   && SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH",

    __builtin_constant_p
# 5048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 5048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
  { "(X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || DImode != DImode))\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_DImode != E_DImode))
   && ix86_pre_reload_split ()) &&
# 4789 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_DImode != E_DImode))
   && ix86_pre_reload_split ()) &&
# 4789 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && ix86_binary_operator_ok (MINUS, V64QImode, operands)",
    __builtin_constant_p
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V64QImode, operands))
    ? (int)
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V64QImode, operands))
    : -1 },
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (operands[2] == CONST0_RTX (V4SFmode)\n       || !MEM_P (operands[1]))",


    __builtin_constant_p
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4SFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4SFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 15654 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 15654 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 15654 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 17066 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && flag_unsafe_math_optimizations",

    __builtin_constant_p
# 17066 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_unsafe_math_optimizations)
    ? (int)
# 17066 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_unsafe_math_optimizations)
    : -1 },
# 9127 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (AND, SImode, operands)",
    __builtin_constant_p
# 9127 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (AND, E_SImode, operands))
    ? (int)
# 9127 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (AND, E_SImode, operands))
    : -1 },
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && X87_ENABLE_FLOAT (XFmode, SImode)\n   && !(SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)\n   && (TARGET_USE_SIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",



    __builtin_constant_p
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
# 17910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && ix86_pre_reload_split ()",
    __builtin_constant_p
# 17910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_pre_reload_split ())
    ? (int)
# 17910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_SSE && TARGET_64BIT) && (Pmode == SImode)",
    __builtin_constant_p (
# 22926 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 22926 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (MINUS, V16QImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V16QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (MINUS, E_V16QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F",
    __builtin_constant_p
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
    ? (int)
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
    : -1 },
# 15698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n    || (TARGET_80387 && X87_ENABLE_ARITH (DFmode)))\n   && !COMMUTATIVE_ARITH_P (operands[3])\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",



    __builtin_constant_p
# 15698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode)))
   && !((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 15698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode)))
   && !((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && (TARGET_AVX512DQ)",

    __builtin_constant_p (
# 1448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    ? (int) (
# 1448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && 1 && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)))
    : -1 },
  { "(!TARGET_64BIT && TARGET_XSAVE) && (TARGET_XSAVEC)",
    __builtin_constant_p (
# 20920 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 61)) != 0)))
    ? (int) (
# 20920 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 61)) != 0)))
    : -1 },
# 20051 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_PCLMUL",
    __builtin_constant_p
# 20051 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 39)) != 0))
    ? (int)
# 20051 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 39)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && (((TARGET_AVX512VL) && (Pmode == SImode)) && (Pmode == SImode))",
    __builtin_constant_p (
# 22092 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 22092 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
  { "((optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& (TARGET_SHIFT1\n	    || TARGET_DOUBLE_WITH_ADD)))\n   && ix86_match_ccmode (insn, CCGOCmode)) && (TARGET_64BIT)",





    __builtin_constant_p (
# 11152 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD])))
   && ix86_match_ccmode (insn, E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11152 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD])))
   && ix86_match_ccmode (insn, E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 11939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (ROTATERT, SImode, operands)",
    __builtin_constant_p
# 11939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ROTATERT, E_SImode, operands))
    ? (int)
# 11939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ROTATERT, E_SImode, operands))
    : -1 },
# 5679 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCZmode)\n   && ix86_binary_operator_ok (PLUS, SImode, operands)",

    __builtin_constant_p
# 5679 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCZmode)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    ? (int)
# 5679 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCZmode)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    : -1 },
# 663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW_A\n   && INTVAL (operands[3]) != INTVAL (operands[4])",

    __builtin_constant_p
# 663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 3)) != 0)
   && ((operands[3])->u.hwint[0]) != ((operands[4])->u.hwint[0]))
    ? (int)
# 663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 3)) != 0)
   && ((operands[3])->u.hwint[0]) != ((operands[4])->u.hwint[0]))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (HImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL && TARGET_AVX512BW)) && (TARGET_AVX512VL && TARGET_AVX512BW))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "((ix86_binary_operator_ok (ROTATERT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",



    __builtin_constant_p ((
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512BW))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& (TARGET_SHIFT1\n	    || (TARGET_DOUBLE_WITH_ADD && REG_P (operands[0])))))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFT, HImode, operands)",






    __builtin_constant_p
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_HImode, operands))
    ? (int)
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || (ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD] && (((enum rtx_code) (operands[0])->code) == REG)))))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFT, E_HImode, operands))
    : -1 },
  { "(!TARGET_PARTIAL_REG_STALL\n   || DImode == SImode\n   || optimize_function_for_size_p (cfun)) && (TARGET_64BIT)",


    __builtin_constant_p (
# 20344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   || E_DImode == E_SImode
   || optimize_function_for_size_p ((cfun + 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 20344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   || E_DImode == E_SImode
   || optimize_function_for_size_p ((cfun + 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 11747 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 11747 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 11747 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 8791 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && reload_completed\n   && (TARGET_AVX512VL\n       || REG_P (operands[0])\n       || !EXT_REX_SSE_REG_P (operands[1]))",




    __builtin_constant_p
# 8791 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    ? (int)
# 8791 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    : -1 },
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (PLUS, HImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
# 8506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && exact_log2 (UINTVAL (operands[3])) > 0",

    __builtin_constant_p
# 8506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && exact_log2 (((unsigned long) ((operands[3])->u.hwint[0]))) > 0)
    ? (int)
# 8506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && exact_log2 (((unsigned long) ((operands[3])->u.hwint[0]))) > 0)
    : -1 },
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (register_operand (operands[0], V4SImode)\n       || register_operand (operands[1], V4SImode))",


    __builtin_constant_p
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4SImode)
       || register_operand (operands[1], E_V4SImode)))
    ? (int)
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4SImode)
       || register_operand (operands[1], E_V4SImode)))
    : -1 },
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_LZCNT",
    __builtin_constant_p
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))
    ? (int)
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))
    : -1 },
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "CONST_INT_P (operands[2])\n   && (SImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, SImode, operands)\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_SImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
# 19112 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && flag_pic",
    __builtin_constant_p
# 19112 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && flag_pic)
    ? (int)
# 19112 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && flag_pic)
    : -1 },
# 9708 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (IOR, SImode, operands)",
    __builtin_constant_p
# 9708 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (IOR, E_SImode, operands))
    ? (int)
# 9708 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (IOR, E_SImode, operands))
    : -1 },
  { "(peep2_regno_dead_p (3, FLAGS_REG)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 6715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (3, 17)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6715 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (3, 17)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFTRT, HImode, operands)",
    __builtin_constant_p
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_HImode, operands))
    ? (int)
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_HImode, operands))
    : -1 },
  { "(SSE_FLOAT_MODE_P (DFmode)\n   && (!TARGET_FISTTP || TARGET_SSE_MATH)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(ix86_match_ccmode (insn, CCNOmode)\n   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   && rtx_equal_p (operands[0], operands[1])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 9945 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)

   && rtx_equal_p (operands[0], operands[1])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9945 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)

   && rtx_equal_p (operands[0], operands[1])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512DQ && (V8SFmode == V8SFmode)))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V8SFmode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8SFmode == E_V8SFmode))))
    : -1 },
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && (TARGET_SSE2)",
    __builtin_constant_p (
# 1143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 1143 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ)",
    __builtin_constant_p (
# 14343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 8508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    ? (int) (
# 14343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 8508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V16QImode)\n       == GET_MODE_NUNITS (V16QImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    : -1 },
  { "(TARGET_SSE) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 21491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 21477 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 21477 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 1344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && TARGET_SSE_UNALIGNED_STORE_OPTIMAL\n   && ix86_operands_ok_for_move_multiple (operands, false, DFmode)",

    __builtin_constant_p
# 1344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL]
   && ix86_operands_ok_for_move_multiple (operands, false, E_DFmode))
    ? (int)
# 1344 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL]
   && ix86_operands_ok_for_move_multiple (operands, false, E_DFmode))
    : -1 },
# 12536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_PARTIAL_REG_STALL\n   && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun))",

    __builtin_constant_p
# 12536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && (!ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 12536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && (!ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_MINUS, V32HImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX5124VNNIW)",
    __builtin_constant_p (
# 22609 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0)))
    ? (int) (
# 22609 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0)))
    : -1 },
  { "(reload_completed) && (TARGET_HIMODE_MATH)",
    __builtin_constant_p (
# 8320 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1047 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_HIMODE_MATH]))
    ? (int) (
# 8320 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1047 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_HIMODE_MATH]))
    : -1 },
  { "(TARGET_SSE4_2\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 18694 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)
   && ix86_pre_reload_split ()) &&
# 18697 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 18694 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)
   && ix86_pre_reload_split ()) &&
# 18697 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V2DFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (DImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",




    __builtin_constant_p (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 19759 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_XOP && !(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 19759 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 19759 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 302 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (PLUS, V2SFmode, operands)",

    __builtin_constant_p
# 302 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V2SFmode, operands))
    ? (int)
# 302 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V2SFmode, operands))
    : -1 },
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, SImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])",


    __builtin_constant_p
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    ? (int)
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2) && (TARGET_64BIT))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))))
    : -1 },
  { "(TARGET_BSWAP) && (TARGET_64BIT)",
    __builtin_constant_p (
# 14870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_arch_features[X86_ARCH_BSWAP]) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_arch_features[X86_ARCH_BSWAP]) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 9718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (XOR, QImode, operands)",
    __builtin_constant_p
# 9718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_QImode, operands))
    ? (int)
# 9718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_QImode, operands))
    : -1 },
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n       || TARGET_MIX_SSE_I387)",


    __builtin_constant_p
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
    ? (int)
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
    : -1 },
  { "((TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (MINUS, V1DImode, operands)) && (TARGET_SSE2)",

    __builtin_constant_p (
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V1DImode, operands)) &&
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (MINUS, E_V1DImode, operands)) &&
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512DQ && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)))
    : -1 },
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_FLOAT (DFmode, SImode))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(ix86_binary_operator_ok (ASHIFT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_64BIT && TARGET_FSGSBASE) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 31)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 31)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode)\n   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC",


    __builtin_constant_p
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    ? (int)
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (PLUS, V8HImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V8HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V8HImode, operands)) &&
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(!(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 7646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_MINUS, V8HImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V8HImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V8HImode, operands)))
    : -1 },
# 9520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE3 && INTVAL (operands[2]) + 2 == INTVAL (operands[3])",
    __builtin_constant_p
# 9520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && ((operands[2])->u.hwint[0]) + 2 == ((operands[3])->u.hwint[0]))
    ? (int)
# 9520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && ((operands[2])->u.hwint[0]) + 2 == ((operands[3])->u.hwint[0]))
    : -1 },
  { "((TARGET_SINGLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == DImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",

    __builtin_constant_p (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_SSE\n   && (GET_MODE_NUNITS (V2DFmode)\n       == GET_MODE_NUNITS (V4SFmode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 7684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && 1\n   && (INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n       && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n       && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4)\n       && INTVAL (operands[6]) == (INTVAL (operands[10]) - 4))",





    __builtin_constant_p
# 7684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && 1
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4)))
    ? (int)
# 7684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && 1
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSSE3 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(INTVAL (operands[2]) & ~(255 << 8))) && (TARGET_64BIT)",


    __builtin_constant_p (
# 9858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~(255 << 8))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~(255 << 8))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, QImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])",


    __builtin_constant_p
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    ? (int)
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && 1) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(~INTVAL (operands[2]) & ~255)\n    && !(INTVAL (operands[2]) & 128)) && (TARGET_64BIT)",



    __builtin_constant_p (
# 9478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~255)
    && !(((operands[2])->u.hwint[0]) & 128)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~255)
    && !(((operands[2])->u.hwint[0]) & 128)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE4_1 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX512BW))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 2497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE3",
    __builtin_constant_p
# 2497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0))
    ? (int)
# 2497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0))
    : -1 },
# 5570 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && TARGET_64BIT",
    __builtin_constant_p
# 5570 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 5570 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V2TImode)\n       || register_operand (operands[1], V2TImode))) && (TARGET_AVX)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V2TImode)
       || register_operand (operands[1], E_V2TImode))) &&
# 216 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V2TImode)
       || register_operand (operands[1], E_V2TImode))) &&
# 216 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_TRUNC != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x3 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x3 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
# 19566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(TARGET_READ_MODIFY || optimize_insn_for_size_p ())",
    __builtin_constant_p
# 19566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY] || optimize_insn_for_size_p ()))
    ? (int)
# 19566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY] || optimize_insn_for_size_p ()))
    : -1 },
# 20138 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && !TARGET_OPT_AGU\n   && REGNO (operands[0]) == REGNO (operands[2])\n   && peep2_regno_dead_p (0, FLAGS_REG)",


    __builtin_constant_p
# 20138 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_OPT_AGU]
   && (rhs_regno(operands[0])) == (rhs_regno(operands[2]))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20138 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_OPT_AGU]
   && (rhs_regno(operands[0])) == (rhs_regno(operands[2]))
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && 1",
    __builtin_constant_p
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1)
    ? (int)
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1)
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (4, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (DImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)) && (TARGET_64BIT)",
# 20232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFTRT, DImode, operands)) && (TARGET_64BIT)",





    __builtin_constant_p (
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX2 && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 21502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 409 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 21502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 409 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 14197 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_LZCNT && TARGET_64BIT",
    __builtin_constant_p
# 14197 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 14197 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
# 16820 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && TARGET_SSSE3\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",


    __builtin_constant_p
# 16820 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 55)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 16820 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 55)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (AND, HImode, operands)",

    __builtin_constant_p
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_HImode, operands))
    ? (int)
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_HImode, operands))
    : -1 },
# 15261 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_GNU_TLS",
    __builtin_constant_p
# 15261 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU))
    ? (int)
# 15261 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU))
    : -1 },
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, QImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])",


    __builtin_constant_p
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    ? (int)
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V32QImode)\n       || register_operand (operands[1], V32QImode))) && (TARGET_AVX)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V32QImode)
       || register_operand (operands[1], E_V32QImode))) &&
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V32QImode)
       || register_operand (operands[1], E_V32QImode))) &&
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_64BIT\n    && TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode)\n    && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC)\n   || ((!TARGET_64BIT || TARGET_AVX512F)\n       && SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",




    __builtin_constant_p
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0)
    && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
    && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   || ((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
       && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0)
    && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
    && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   || ((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
       && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 9781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (IOR, SImode, operands)",

    __builtin_constant_p
# 9781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_SImode, operands))
    ? (int)
# 9781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_SImode, operands))
    : -1 },
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CMOVE\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ())
    ? (int)
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_SSE4_1\n   && reload_completed) && (!TARGET_64BIT)",

    __builtin_constant_p (
# 2234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 2234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_FMA)",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0)))
    : -1 },
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(unsigned HOST_WIDE_INT) INTVAL (operands[3])\n   < (HOST_WIDE_INT_1U << INTVAL (operands[2]))",

    __builtin_constant_p
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0])))
    ? (int)
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0])))
    : -1 },
# 15625 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n    || (TARGET_80387 && X87_ENABLE_ARITH (SFmode)))\n   && COMMUTATIVE_ARITH_P (operands[3])\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",



    __builtin_constant_p
# 15625 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode)))
   && ((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 15625 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode)))
   && ((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (MINUS, V8SFmode, operands)\n   && 1 && 1) && (TARGET_AVX)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 850 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_FMA || TARGET_FMA4) && TARGET_MMX_WITH_SSE",
    __builtin_constant_p
# 850 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)) && (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int)
# 850 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)) && (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 15392 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_64BIT && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_FROM_VEC",
    __builtin_constant_p
# 15392 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_FROM_VEC])
    ? (int)
# 15392 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_FROM_VEC])
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "((CONST_INT_P (operands[2])\n   && (DImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",




    __builtin_constant_p ((
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_DImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(find_regno_note (peep2_next_insn (0), REG_UNUSED, REGNO (operands[0])) != 0) && (TARGET_64BIT)",
    __builtin_constant_p (
# 6697 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(find_regno_note (peep2_next_insn (0), REG_UNUSED, (rhs_regno(operands[0]))) != 0) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6697 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(find_regno_note (peep2_next_insn (0), REG_UNUSED, (rhs_regno(operands[0]))) != 0) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && (16 == 64 || TARGET_AVX512VL)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V8SImode)\n       || register_operand (operands[1], V8SImode))) && (TARGET_AVX)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8SImode)
       || register_operand (operands[1], E_V8SImode))) &&
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8SImode)
       || register_operand (operands[1], E_V8SImode))) &&
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 14775 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_POPCNT && TARGET_64BIT",
    __builtin_constant_p
# 14775 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 14775 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
# 2178 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE4_1",
    __builtin_constant_p
# 2178 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 38)) != 0))
    ? (int)
# 2178 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 38)) != 0))
    : -1 },
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && X87_ENABLE_FLOAT (DFmode, SImode)\n   && !(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n   && (TARGET_USE_SIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",



    __builtin_constant_p
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
  { "(!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode)\n   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC) && ( reload_completed)",


    __builtin_constant_p (
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 5081 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]) &&
# 5081 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_USE_FANCY_MATH_387\n   && flag_unsafe_math_optimizations\n   && ix86_pre_reload_split ()) && ( 1)",


    __builtin_constant_p (
# 17412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_unsafe_math_optimizations
   && ix86_pre_reload_split ()) &&
# 17416 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 17412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_unsafe_math_optimizations
   && ix86_pre_reload_split ()) &&
# 17416 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSSE3 && 1 && 1) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512CD) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (US_MINUS, V8QImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_MINUS, E_V8QImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_MINUS, E_V8QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ) && (TARGET_SSE2)))",
    __builtin_constant_p (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22310 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22310 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V2DFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BW && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (QImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL && TARGET_AVX512BW)) && (TARGET_AVX512VL && TARGET_AVX512BW))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V16SImode)\n       || register_operand (operands[1], V16SImode))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16SImode)
       || register_operand (operands[1], E_V16SImode))) &&
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16SImode)
       || register_operand (operands[1], E_V16SImode))) &&
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 1566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && (TARGET_USE_SIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",


    __builtin_constant_p
# 1566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 1566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
# 5517 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed && ix86_lea_for_add_ok (insn, operands)",
    __builtin_constant_p
# 5517 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_lea_for_add_ok (insn, operands))
    ? (int)
# 5517 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_lea_for_add_ok (insn, operands))
    : -1 },
# 21719 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "(TARGET_F16C || TARGET_AVX512VL) && 1",
    __builtin_constant_p
# 21719 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1)
    ? (int)
# 21719 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1)
    : -1 },
  { "(!(MEM_P (operands[1]) && MEM_P (operands[2]))) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 7869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, DImode, operands)\n   && CONST_SCALAR_INT_P (operands[2])\n   && rtx_equal_p (operands[2], operands[3])) && (!TARGET_64BIT)",


    __builtin_constant_p (
# 6056 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6056 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 9312 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (AND, QImode, operands)\n   && ix86_match_ccmode (insn,\n			 CONST_INT_P (operands[2])\n			 && INTVAL (operands[2]) >= 0 ? CCNOmode : CCZmode)",



    __builtin_constant_p
# 9312 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_QImode, operands)
   && ix86_match_ccmode (insn,
    (((enum rtx_code) (operands[2])->code) == CONST_INT)
    && ((operands[2])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    ? (int)
# 9312 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_QImode, operands)
   && ix86_match_ccmode (insn,
    (((enum rtx_code) (operands[2])->code) == CONST_INT)
    && ((operands[2])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    : -1 },
# 9315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_vec_interleave_v2df_operator_ok (operands, 1)",
    __builtin_constant_p
# 9315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_vec_interleave_v2df_operator_ok (operands, 1))
    ? (int)
# 9315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_vec_interleave_v2df_operator_ok (operands, 1))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && (!true\n       || QImode == SImode\n       || QImode == DImode))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_QImode == E_SImode
       || E_QImode == E_DImode)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_QImode == E_SImode
       || E_QImode == E_DImode)))
    : -1 },
  { "(ix86_match_ccmode (insn, CCNOmode)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 10423 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 10423 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()",



    __builtin_constant_p
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    ? (int)
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == DImode)",


    __builtin_constant_p (
# 17972 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 17972 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(reload_completed\n   && !reg_overlap_mentioned_p (operands[1], operands[2])) && (ptr_mode == DImode)",

    __builtin_constant_p (
# 20629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && !reg_overlap_mentioned_p (operands[1], operands[2])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    ? (int) (
# 20629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && !reg_overlap_mentioned_p (operands[1], operands[2])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    : -1 },
  { "(ix86_unary_operator_ok (NEG, DImode, operands)) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 9965 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_DImode, operands)) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9965 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_DImode, operands)) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 4939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SSE2\n   && TARGET_USE_VECTOR_CONVERTS\n   && optimize_function_for_speed_p (cfun)\n   && reload_completed\n   && (MEM_P (operands[1]) || TARGET_INTER_UNIT_MOVES_TO_VEC)\n   && (!EXT_REX_SSE_REG_P (operands[0])\n       || TARGET_AVX512VL)",






    __builtin_constant_p
# 4939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_tune_features[X86_TUNE_USE_VECTOR_CONVERTS]
   && optimize_function_for_speed_p ((cfun + 0))
   && reload_completed
   && ((((enum rtx_code) (operands[1])->code) == MEM) || ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int)
# 4939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_tune_features[X86_TUNE_USE_VECTOR_CONVERTS]
   && optimize_function_for_speed_p ((cfun + 0))
   && reload_completed
   && ((((enum rtx_code) (operands[1])->code) == MEM) || ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(! TARGET_PARTIAL_REG_STALL\n   && ix86_match_ccmode (insn, CCNOmode)\n   && REGNO (operands[2]) != AX_REG\n   && peep2_reg_dead_p (1, operands[2])) && (TARGET_64BIT)",



    __builtin_constant_p (
# 19520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_match_ccmode (insn, E_CCNOmode)
   && (rhs_regno(operands[2])) != 0
   && peep2_reg_dead_p (1, operands[2])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_match_ccmode (insn, E_CCNOmode)
   && (rhs_regno(operands[2])) != 0
   && peep2_reg_dead_p (1, operands[2])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (PLUS, QImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_MMX_WITH_SSE && TARGET_SSE4_1) && (TARGET_64BIT)",
    __builtin_constant_p (
# 1998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 1998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, HImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])",


    __builtin_constant_p
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    ? (int)
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V8DImode, operands)) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(reload_completed && ix86_avoid_lea_for_add (insn, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 5491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_add (insn, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_add (insn, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE4_1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 18365 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 18365 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512VL) && (TARGET_SSE2)",
    __builtin_constant_p (
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 9960 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 9960 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1 && TARGET_AVX512BW && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_64BIT && TARGET_GNU2_TLS) && (ptr_mode == DImode)",
    __builtin_constant_p (
# 15538 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU2)) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    ? (int) (
# 15538 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tls_dialect == TLS_DIALECT_GNU2)) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    : -1 },
# 9781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (XOR, SImode, operands)",

    __builtin_constant_p
# 9781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_SImode, operands))
    ? (int)
# 9781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && 1 && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(ix86_binary_operator_ok (LSHIFTRT, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11472 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 8395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ\n   && INTVAL (operands[2]) % 2 == 0\n   && INTVAL (operands[2]) == INTVAL (operands[3]) - 1",


    __builtin_constant_p
# 8395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && ((operands[2])->u.hwint[0]) % 2 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1)
    ? (int)
# 8395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && ((operands[2])->u.hwint[0]) % 2 == 0
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]) - 1)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_AVX2) && (Pmode == DImode)",
    __builtin_constant_p (
# 21971 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 21971 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (SImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL && TARGET_AVX512BW)) && (TARGET_AVX512VL && TARGET_AVX512BW))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(TARGET_SSE4_1) && (TARGET_AVX)",
    __builtin_constant_p (
# 21433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 366 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 21433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 366 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_FLOOR != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x1 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x1 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
# 19898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && REGNO (operands[0]) == REGNO (operands[4])\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (5, operands[5])\n   && (HImode != QImode\n       || immediate_operand (operands[2], SImode)\n       || any_QIreg_operand (operands[2], SImode))\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[5], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (4),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[5])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[5], operands[1])
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19898 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && (rhs_regno(operands[0])) == (rhs_regno(operands[4]))
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[5])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode))
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[5], operands[1])
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
# 19621 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_XOP || (TARGET_AVX512BW && TARGET_AVX512VL)",
    __builtin_constant_p
# 19621 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || (((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int)
# 19621 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) || (((ix86_isa_flags & (1UL << 11)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (SImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 9137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (AND, HImode, operands)",
    __builtin_constant_p
# 9137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_HImode, operands))
    ? (int)
# 9137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_HImode, operands))
    : -1 },
  { "(TARGET_AVX && 1 && 1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && 1) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && 1) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(!TARGET_X32\n   && !TARGET_INDIRECT_BRANCH_REGISTER\n   && SIBLING_CALL_P (peep2_next_insn (2))\n   && !reg_mentioned_p (operands[0],\n			CALL_INSN_FUNCTION_USAGE (peep2_next_insn (2)))) && (word_mode == SImode)",




    __builtin_constant_p (
# 13351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (2)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (2))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 13351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (2)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (2))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
# 208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "!TARGET_64BIT && reload_completed",
    __builtin_constant_p
# 208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed)
    ? (int)
# 208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (V4SFmode == V4SFmode))",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V4SFmode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V4SFmode)))
    : -1 },
  { "(TARGET_AVX512F\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 1448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 1448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_TRUNC != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x3 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x3 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (2, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 7078 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7078 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_SSE) && (TARGET_AVX512F)) && ( reload_completed)",
    __builtin_constant_p ((
# 1670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))) &&
# 1672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 1670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))) &&
# 1672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512DQ && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512VL) && (TARGET_AVX512BW))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12312 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 510 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12312 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 510 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (DFmode)\n   && (!TARGET_FISTTP || TARGET_SSE_MATH)",

    __builtin_constant_p
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode))
   && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 14879 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_MOVBE",
    __builtin_constant_p
# 14879 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0))
    ? (int)
# 14879 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0))
    : -1 },
# 2240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && reload_completed",
    __builtin_constant_p
# 2240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && reload_completed)
    ? (int)
# 2240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && reload_completed)
    : -1 },
# 20585 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_PREFETCHWT1",
    __builtin_constant_p
# 20585 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 42)) != 0))
    ? (int)
# 20585 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 42)) != 0))
    : -1 },
# 685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "TARGET_XADD",
    __builtin_constant_p
# 685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_XADD])
    ? (int)
# 685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_XADD])
    : -1 },
# 19328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "! TARGET_PARTIAL_REG_STALL && reload_completed\n   && ! TARGET_FAST_PREFIX\n   && optimize_insn_for_speed_p ()\n   /* Ensure that the operand will remain sign-extended immediate.  */\n   && ix86_match_ccmode (insn, INTVAL (operands[3]) >= 0 ? CCNOmode : CCZmode)",




    __builtin_constant_p
# 19328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && ! ix86_tune_features[X86_TUNE_FAST_PREFIX]
   && optimize_insn_for_speed_p ()

   && ix86_match_ccmode (insn, ((operands[3])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    ? (int)
# 19328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && ! ix86_tune_features[X86_TUNE_FAST_PREFIX]
   && optimize_insn_for_speed_p ()

   && ix86_match_ccmode (insn, ((operands[3])->u.hwint[0]) >= 0 ? E_CCNOmode : E_CCZmode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V2DFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && 1) && (TARGET_SSE2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
# 736 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "peep2_reg_dead_p (3, operands[0])\n   && (unsigned HOST_WIDE_INT) INTVAL (operands[2])\n      == -(unsigned HOST_WIDE_INT) INTVAL (operands[3])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])",



    __builtin_constant_p
# 736 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(peep2_reg_dead_p (3, operands[0])
   && (unsigned long) ((operands[2])->u.hwint[0])
      == -(unsigned long) ((operands[3])->u.hwint[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1]))
    ? (int)
# 736 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(peep2_reg_dead_p (3, operands[0])
   && (unsigned long) ((operands[2])->u.hwint[0])
      == -(unsigned long) ((operands[3])->u.hwint[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1]))
    : -1 },
# 13910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_CMOVE",
    __builtin_constant_p
# 13910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
    ? (int)
# 13910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
    : -1 },
# 21164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_FSGSBASE",
    __builtin_constant_p
# 21164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 31)) != 0))
    ? (int)
# 21164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 31)) != 0))
    : -1 },
# 14506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (INTVAL (operands[3]) & 1) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && (INTVAL (operands[5]) & 1) == 0\n   && INTVAL (operands[5]) == INTVAL (operands[6]) - 1\n   && (INTVAL (operands[7]) & 1) == 0\n   && INTVAL (operands[7]) == INTVAL (operands[8]) - 1\n   && (INTVAL (operands[9]) & 1) == 0\n   && INTVAL (operands[9]) == INTVAL (operands[10]) - 1",
# 14515 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p
# 14506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1
   && (((operands[7])->u.hwint[0]) & 1) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && (((operands[9])->u.hwint[0]) & 1) == 0
   && ((operands[9])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 1)
    ? (int)
# 14506 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1
   && (((operands[7])->u.hwint[0]) & 1) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && (((operands[9])->u.hwint[0]) & 1) == 0
   && ((operands[9])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 1)
    : -1 },
# 9433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   rtx_equal_p (operands[0], operands[1])\n   || rtx_equal_p (operands[0], operands[2])",


    __builtin_constant_p
# 9433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1])
   || rtx_equal_p (operands[0], operands[2]))
    ? (int)
# 9433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1])
   || rtx_equal_p (operands[0], operands[2]))
    : -1 },
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (PLUS, SImode, operands)",
    __builtin_constant_p
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_SImode, operands))
    ? (int)
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_SImode, operands))
    : -1 },
# 16519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n       || TARGET_MIX_SSE_I387)\n   && flag_finite_math_only\n   && flag_unsafe_math_optimizations",




    __builtin_constant_p
# 16519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_finite_math_only
   && flag_unsafe_math_optimizations)
    ? (int)
# 16519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_finite_math_only
   && flag_unsafe_math_optimizations)
    : -1 },
# 18942 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "peep2_regno_dead_p (0, FLAGS_REG)\n   && !reg_overlap_mentioned_p (operands[1], operands[0])",

    __builtin_constant_p
# 18942 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (0, 17)
   && !reg_overlap_mentioned_p (operands[1], operands[0]))
    ? (int)
# 18942 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (0, 17)
   && !reg_overlap_mentioned_p (operands[1], operands[0]))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && (!true\n       || DImode == SImode\n       || DImode == DImode))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_DImode == E_SImode
       || E_DImode == E_DImode)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_DImode == E_SImode
       || E_DImode == E_DImode)))
    : -1 },
  { "(TARGET_64BIT && reload_completed) && (TARGET_64BIT)",
    __builtin_constant_p (
# 2913 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 2913 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 21468 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_RDPID",
    __builtin_constant_p
# 21468 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 14)) != 0))
    ? (int)
# 21468 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 14)) != 0))
    : -1 },
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || SImode != DImode))\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_SImode != E_DImode))
   && ix86_pre_reload_split ())
    ? (int)
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_SImode != E_DImode))
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && INTVAL (operands[2]) + 4 == INTVAL (operands[6])\n   && INTVAL (operands[3]) + 4 == INTVAL (operands[7])\n   && INTVAL (operands[4]) + 4 == INTVAL (operands[8])\n   && INTVAL (operands[5]) + 4 == INTVAL (operands[9])\n   && INTVAL (operands[2]) + 8 == INTVAL (operands[10])\n   && INTVAL (operands[3]) + 8 == INTVAL (operands[11])\n   && INTVAL (operands[4]) + 8 == INTVAL (operands[12])\n   && INTVAL (operands[5]) + 8 == INTVAL (operands[13])\n   && INTVAL (operands[2]) + 12 == INTVAL (operands[14])\n   && INTVAL (operands[3]) + 12 == INTVAL (operands[15])\n   && INTVAL (operands[4]) + 12 == INTVAL (operands[16])\n   && INTVAL (operands[5]) + 12 == INTVAL (operands[17]))",
# 4802 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14726 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[10])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[11])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[12])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[13])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 12 == ((operands[14])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 12 == ((operands[15])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 12 == ((operands[16])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 12 == ((operands[17])->u.hwint[0])))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14726 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 8 == ((operands[10])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 8 == ((operands[11])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 8 == ((operands[12])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 8 == ((operands[13])->u.hwint[0])
   && ((operands[2])->u.hwint[0]) + 12 == ((operands[14])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 12 == ((operands[15])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 12 == ((operands[16])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 12 == ((operands[17])->u.hwint[0])))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (HImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL && TARGET_AVX512BW)) && (TARGET_AVX512VL && TARGET_AVX512BW))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13475 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(!TARGET_CMOVE) && ( reload_completed)",
    __builtin_constant_p (
# 13910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))) &&
# 13912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 13910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))) &&
# 13912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 20872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_FXSR",
    __builtin_constant_p
# 20872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 32)) != 0))
    ? (int)
# 20872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 32)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ) && (TARGET_SSE2))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_SSE) && (TARGET_SSE2)",
    __builtin_constant_p (
# 21482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 21465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 21482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 21465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX && 1\n   && avx_vpermilp_parallel (operands[2], V4DFmode)) && (TARGET_AVX)",

    __builtin_constant_p (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V4DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V4DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 83 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "TARGET_SSE2",
    __builtin_constant_p
# 83 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 51)) != 0))
    ? (int)
# 83 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 51)) != 0))
    : -1 },
  { "(TARGET_SSE2) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 17086 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 17086 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, SImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])",


    __builtin_constant_p
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    ? (int)
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0]))
    : -1 },
  { "(TARGET_64BIT\n  && general_operand (operands[3], DImode)\n  && (general_reg_operand (operands[3], DImode)\n      || memory_operand (operands[3], DImode)\n      || x86_64_zext_immediate_operand (operands[3], DImode)\n      || x86_64_immediate_operand (operands[3], DImode)\n      || (CONSTANT_P (operands[3])\n	  && (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[3]))))\n  && !reg_overlap_mentioned_p (operands[2], operands[3])) && (ptr_mode == SImode)",
# 6161 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p (
# 20696 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
  && general_operand (operands[3], E_DImode)
  && (general_reg_operand (operands[3], E_DImode)
      || memory_operand (operands[3], E_DImode)
      || x86_64_zext_immediate_operand (operands[3], E_DImode)
      || x86_64_immediate_operand (operands[3], E_DImode)
      || (((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_CONST_OBJ)
   && (!flag_pic || legitimate_pic_operand_p (operands[3]))))
  && !reg_overlap_mentioned_p (operands[2], operands[3])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    ? (int) (
# 20696 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
  && general_operand (operands[3], E_DImode)
  && (general_reg_operand (operands[3], E_DImode)
      || memory_operand (operands[3], E_DImode)
      || x86_64_zext_immediate_operand (operands[3], E_DImode)
      || x86_64_immediate_operand (operands[3], E_DImode)
      || (((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_CONST_OBJ)
   && (!flag_pic || legitimate_pic_operand_p (operands[3]))))
  && !reg_overlap_mentioned_p (operands[2], operands[3])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    : -1 },
  { "(TARGET_64BIT && TARGET_USE_BT\n   && ix86_binary_operator_ok (AND, DImode, operands)\n   && IN_RANGE (exact_log2 (~INTVAL (operands[2])), 31, 63)) && ( reload_completed)",


    __builtin_constant_p (
# 9075 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ((unsigned long) (exact_log2 (~((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31))) &&
# 9079 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 9075 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ((unsigned long) (exact_log2 (~((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31))) &&
# 9079 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (PLUS, QImode, operands)",
    __builtin_constant_p
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_QImode, operands))
    ? (int)
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_QImode, operands))
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_FLOOR != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x1 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x1 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V32HImode)\n       || register_operand (operands[1], V32HImode))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V32HImode)
       || register_operand (operands[1], E_V32HImode))) &&
# 213 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V32HImode)
       || register_operand (operands[1], E_V32HImode))) &&
# 213 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_64BIT\n   && peep2_reg_dead_p (2, operands[0])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 2954 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (2, operands[0])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 2954 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (2, operands[0])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_GFNI) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)) &&
# 387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SImode)\n       == GET_MODE_NUNITS (V16SImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    : -1 },
  { "(/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   rtx_equal_p (operands[0], operands[1])\n   || rtx_equal_p (operands[0], operands[2])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 9433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1])
   || rtx_equal_p (operands[0], operands[2])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1])
   || rtx_equal_p (operands[0], operands[2])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_64BIT && TARGET_SSE",
    __builtin_constant_p
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0))
    ? (int)
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0))
    : -1 },
  { "(TARGET_SSE4_1) && ( reload_completed)",
    __builtin_constant_p (
# 17328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 17330 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 17328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 17330 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1",
    __builtin_constant_p
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1)
    ? (int)
# 12069 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1)
    : -1 },
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VBMI && 1",
    __builtin_constant_p
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && 1)
    ? (int)
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && 1)
    : -1 },
  { "(TARGET_BMI2 && reload_completed) && (TARGET_64BIT)",
    __builtin_constant_p (
# 11919 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11919 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 7137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (PLUS, SImode, operands)",
    __builtin_constant_p
# 7137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    ? (int)
# 7137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    : -1 },
  { "(TARGET_SSE4_1 && 1\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1
   && ix86_pre_reload_split ()) &&
# 18222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1
   && ix86_pre_reload_split ()) &&
# 18222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (MINUS, V4DFmode, operands)\n   && 1 && 1) && (TARGET_AVX)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (DImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_DImode).coeffs[0]))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_DImode).coeffs[0]))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(reload_completed\n   && !reg_overlap_mentioned_p (operands[1], operands[2])) && (ptr_mode == SImode)",

    __builtin_constant_p (
# 20629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && !reg_overlap_mentioned_p (operands[1], operands[2])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    ? (int) (
# 20629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && !reg_overlap_mentioned_p (operands[1], operands[2])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode))
    : -1 },
# 92 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "TARGET_64BIT || TARGET_SSE2",
    __builtin_constant_p
# 92 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 51)) != 0))
    ? (int)
# 92 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 51)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && ix86_binary_operator_ok (PLUS, V4SFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && 1)",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    : -1 },
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && ix86_binary_operator_ok (PLUS, V8DImode, operands)",
    __builtin_constant_p
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DImode, operands))
    ? (int)
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DImode, operands))
    : -1 },
  { "(TARGET_SSE || TARGET_3DNOW_A) && (Pmode == DImode)",
    __builtin_constant_p (
# 2560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 2560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX && 1\n   && avx_vpermilp_parallel (operands[2], V8SFmode)) && (TARGET_AVX)",

    __builtin_constant_p (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V8SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V8SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 21699 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VL",
    __builtin_constant_p
# 21699 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))
    ? (int)
# 21699 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))
    : -1 },
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)\n   && ix86_binary_operator_ok (UMIN, V8QImode, operands)",


    __builtin_constant_p
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (UMIN, E_V8QImode, operands))
    ? (int)
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (UMIN, E_V8QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE4_1 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_AVX512VL) && (TARGET_AVX)",
    __builtin_constant_p (
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 9915 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 9915 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && (64 == 64 || TARGET_AVX512VL) && 1",
    __builtin_constant_p
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1)
    ? (int)
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1)
    : -1 },
# 340 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_3DNOW || TARGET_MMX_WITH_SSE)\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 340 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 340 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 2)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DFmode)\n       == GET_MODE_NUNITS (V16HImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V16HImode).coeffs[0])))
    : -1 },
# 14428 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ",
    __builtin_constant_p
# 14428 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0))
    ? (int)
# 14428 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0))
    : -1 },
# 17073 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n       || TARGET_MIX_SSE_I387)\n   && flag_unsafe_math_optimizations",



    __builtin_constant_p
# 17073 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_unsafe_math_optimizations)
    ? (int)
# 17073 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
   && flag_unsafe_math_optimizations)
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2])))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V16SFmode, operands)\n   && 1 && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "TARGET_64BIT || (TARGET_CMPXCHG8B && (TARGET_80387 || TARGET_SSE))",
    __builtin_constant_p
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || (ix86_arch_features[X86_ARCH_CMPXCHG8B] && (((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))))
    ? (int)
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 1)) != 0) || (ix86_arch_features[X86_ARCH_CMPXCHG8B] && (((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))))
    : -1 },
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (5, operands[4])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[4], operands[1])\n   && (HImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (4),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19873 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (!false\n       || QImode == SImode\n       || QImode == DImode)",



    __builtin_constant_p
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_QImode == E_SImode
       || E_QImode == E_DImode))
    ? (int)
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_QImode == E_SImode
       || E_QImode == E_DImode))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V16HImode)\n       == GET_MODE_NUNITS (V8SFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V16QImode)\n       == GET_MODE_NUNITS (V4SImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    : -1 },
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && (REGNO (operands[4]) == REGNO (operands[0])\n       || REGNO (operands[4]) == REGNO (operands[3]))\n   && (rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n			     ? 3 : 0], operands[5])\n       ? rtx_equal_p (operands[2], operands[6])\n       : rtx_equal_p (operands[2], operands[5])\n	 && rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n				  ? 3 : 0], operands[6]))\n   && peep2_reg_dead_p (4, operands[4])\n   && peep2_reg_dead_p (5, operands[REGNO (operands[4]) == REGNO (operands[0])\n				    ? 3 : 0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[3], operands[0])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[2])\n   && (HImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))",
# 19994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode)))
    ? (int)
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode)))
    : -1 },
# 21346 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_RTM",
    __builtin_constant_p
# 21346 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 46)) != 0))
    ? (int)
# 21346 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 46)) != 0))
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V16HImode)\n       == GET_MODE_NUNITS (V4DImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V4DImode).coeffs[0])))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, SImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7206 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V4DFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_SSE4_2) && (TARGET_AVX2)",
    __builtin_constant_p (
# 12502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)) &&
# 424 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 12502 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)) &&
# 424 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F && ix86_pre_reload_split ()) && ( 1)",
    __builtin_constant_p (
# 17910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_pre_reload_split ()) &&
# 17912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 17910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_pre_reload_split ()) &&
# 17912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (operands[2] == CONST0_RTX (V4SImode)\n       || !MEM_P (operands[1]))",


    __builtin_constant_p
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4SImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V4SImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH\n       && HImode != HImode \n       && ((HImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_HImode != E_HImode
       && ((E_HImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_HImode != E_HImode
       && ((E_HImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, DImode, operands)\n   && CONST_INT_P (operands[2])\n   /* Check that operands[6] is operands[2] zero extended from\n      DImode to TImode.  */\n   && ((DImode == SImode || INTVAL (operands[2]) >= 0)\n       ? (CONST_INT_P (operands[6])\n	  && UINTVAL (operands[6]) == (UINTVAL (operands[2])\n				       & GET_MODE_MASK (DImode)))\n       : (CONST_WIDE_INT_P (operands[6])\n	  && CONST_WIDE_INT_NUNITS (operands[6]) == 2\n	  && ((unsigned HOST_WIDE_INT) CONST_WIDE_INT_ELT (operands[6], 0)\n	      == UINTVAL (operands[2]))\n	  && CONST_WIDE_INT_ELT (operands[6], 1) == 0))) && (TARGET_64BIT)",
# 17266 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p (
# 6866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)


   && ((E_DImode == E_SImode || ((operands[2])->u.hwint[0]) >= 0)
       ? ((((enum rtx_code) (operands[6])->code) == CONST_INT)
   && ((unsigned long) ((operands[6])->u.hwint[0])) == (((unsigned long) ((operands[2])->u.hwint[0]))
           & mode_mask_array[E_DImode]))
       : ((((enum rtx_code) (operands[6])->code) == CONST_WIDE_INT)
   && ((int)((operands[6]))->u2.num_elem) == 2
   && ((unsigned long) ((operands[6])->u.hwiv.elem[0])
       == ((unsigned long) ((operands[2])->u.hwint[0])))
   && ((operands[6])->u.hwiv.elem[1]) == 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)


   && ((E_DImode == E_SImode || ((operands[2])->u.hwint[0]) >= 0)
       ? ((((enum rtx_code) (operands[6])->code) == CONST_INT)
   && ((unsigned long) ((operands[6])->u.hwint[0])) == (((unsigned long) ((operands[2])->u.hwint[0]))
           & mode_mask_array[E_DImode]))
       : ((((enum rtx_code) (operands[6])->code) == CONST_WIDE_INT)
   && ((int)((operands[6]))->u2.num_elem) == 2
   && ((unsigned long) ((operands[6])->u.hwiv.elem[0])
       == ((unsigned long) ((operands[2])->u.hwint[0])))
   && ((operands[6])->u.hwiv.elem[1]) == 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V64QImode)\n       || register_operand (operands[1], V64QImode))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V64QImode)
       || register_operand (operands[1], E_V64QImode))) &&
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V64QImode)
       || register_operand (operands[1], E_V64QImode))) &&
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(reload_completed) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 11832 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11832 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_GFNI",
    __builtin_constant_p
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0))
    ? (int)
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0))
    : -1 },
# 9158 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (AND, QImode, operands)",
    __builtin_constant_p
# 9158 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_QImode, operands))
    ? (int)
# 9158 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_QImode, operands))
    : -1 },
  { "(TARGET_AVX512VL && ix86_pre_reload_split ()) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 10968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ()) &&
# 10869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 10968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ()) &&
# 10869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX && 1) && (TARGET_SSE2)",
    __builtin_constant_p (
# 20891 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 20891 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_64BIT))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))))
    : -1 },
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (!false\n       || DImode == SImode\n       || DImode == DImode)",



    __builtin_constant_p
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_DImode == E_SImode
       || E_DImode == E_DImode))
    ? (int)
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_DImode == E_SImode
       || E_DImode == E_DImode))
    : -1 },
  { "(!(TARGET_PUSH_MEMORY || optimize_insn_for_size_p ())\n   && !RTX_FRAME_RELATED_P (peep2_next_insn (0))) && (TARGET_64BIT)",

    __builtin_constant_p (
# 19384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_PUSH_MEMORY] || optimize_insn_for_size_p ())
   && !(((peep2_next_insn (0)))->frame_related)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_PUSH_MEMORY] || optimize_insn_for_size_p ())
   && !(((peep2_next_insn (0)))->frame_related)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V2DFmode, operands)\n   && 1 && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_SSE2))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "((TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_64BIT) && ( reload_completed)",
    __builtin_constant_p (
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 2267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
( reload_completed))
    ? (int) (
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 2267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
( reload_completed))
    : -1 },
# 22512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))",
    __builtin_constant_p
# 22512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 22512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 2529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_SSE2 && reload_completed\n   && SSE_REGNO_P (REGNO (operands[1]))",

    __builtin_constant_p
# 2529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed
   && (((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))
    ? (int)
# 2529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed
   && (((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)))
    : -1 },
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   /* Disable this splitter if avx512vl_vec_dup_gprv*[qhs]i insn is\n      available, because then we can broadcast from GPRs directly.\n      For V*[QH]I modes it requires both -mavx512vl and -mavx512bw,\n      for V*SI mode it requires just -mavx512vl.  */\n   && !(TARGET_AVX512VL\n	&& (TARGET_AVX512BW || QImode == SImode))\n   && reload_completed && GENERAL_REG_P (operands[1])",







    __builtin_constant_p
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)




   && !(((ix86_isa_flags & (1UL << 20)) != 0)
 && (((ix86_isa_flags & (1UL << 11)) != 0) || E_QImode == E_SImode))
   && reload_completed && ((((enum rtx_code) (operands[1])->code) == REG) && ((((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36)))))
    ? (int)
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)




   && !(((ix86_isa_flags & (1UL << 20)) != 0)
 && (((ix86_isa_flags & (1UL << 11)) != 0) || E_QImode == E_SImode))
   && reload_completed && ((((enum rtx_code) (operands[1])->code) == REG) && ((((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36)))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && 1 && (DFmode == V16SFmode\n							      || DFmode == V8DFmode\n							      || DFmode == V8DImode\n							      || DFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_DFmode == E_V16SFmode
             || E_DFmode == E_V8DFmode
             || E_DFmode == E_V8DImode
             || E_DFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_DFmode == E_V16SFmode
             || E_DFmode == E_V8DFmode
             || E_DFmode == E_V8DImode
             || E_DFmode == E_V16SImode)))
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, SImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_MWAITX) && (Pmode == DImode)",
    __builtin_constant_p (
# 21399 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 11)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 21399 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 11)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 15599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "can_create_pseudo_p ()\n   && REG_P (operands[1])\n   && VECTOR_MODE_P (GET_MODE (operands[1]))\n   && ((TARGET_SSE && GET_MODE_SIZE (GET_MODE (operands[1])) == 16)\n       || (TARGET_AVX && GET_MODE_SIZE (GET_MODE (operands[1])) == 32)\n       || (TARGET_AVX512F && GET_MODE_SIZE (GET_MODE (operands[1])) == 64))\n   && (SImode == SImode || TARGET_64BIT || MEM_P (operands[0]))",






    __builtin_constant_p
# 15599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((!reload_in_progress && !reload_completed)
   && (((enum rtx_code) (operands[1])->code) == REG)
   && (((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_BOOL || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_INT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FLOAT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UFRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_ACCUM || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UACCUM)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 16)
       || (((ix86_isa_flags & (1UL << 8)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 32)
       || (((ix86_isa_flags & (1UL << 15)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 64))
   && (E_SImode == E_SImode || ((ix86_isa_flags & (1UL << 1)) != 0) || (((enum rtx_code) (operands[0])->code) == MEM)))
    ? (int)
# 15599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((!reload_in_progress && !reload_completed)
   && (((enum rtx_code) (operands[1])->code) == REG)
   && (((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_BOOL || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_INT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FLOAT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UFRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_ACCUM || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UACCUM)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 16)
       || (((ix86_isa_flags & (1UL << 8)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 32)
       || (((ix86_isa_flags & (1UL << 15)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 64))
   && (E_SImode == E_SImode || ((ix86_isa_flags & (1UL << 1)) != 0) || (((enum rtx_code) (operands[0])->code) == MEM)))
    : -1 },
  { "((/* Ensure that resulting mask is zero or sign extended operand.  */\n   INTVAL (operands[4]) >= 0\n   && ((INTVAL (operands[3]) > 0\n	&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n       || (DImode == DImode\n	   && INTVAL (operands[3]) > 32\n	   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\n   && ix86_match_ccmode (insn,\n			 /* If zero_extract mode precision is the same\n			    as len, the SF of the zero_extract\n			    comparison will be the most significant\n			    extracted bit, but this could be matched\n			    after splitting only for pos 0 len all bits\n			    trivial extractions.  Require CCZmode.  */\n			 (GET_MODE_PRECISION (DImode)\n			  == INTVAL (operands[3]))\n			 /* Otherwise, require CCZmode if we'd use a mask\n			    with the most significant bit set and can't\n			    widen it to wider mode.  *testdi_1 also\n			    requires CCZmode if the mask has bit\n			    31 set and all bits above it clear.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     >= 32)\n			 /* We can't widen also if val is not a REG.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     == GET_MODE_PRECISION (GET_MODE (operands[2]))\n			     && !register_operand (operands[2],\n						   GET_MODE (operands[2])))\n			 /* And we shouldn't widen if\n			    TARGET_PARTIAL_REG_STALL.  */\n			 || (TARGET_PARTIAL_REG_STALL\n			     && (INTVAL (operands[3]) + INTVAL (operands[4])\n				 >= (paradoxical_subreg_p (operands[2])\n				     && (GET_MODE_CLASS\n					  (GET_MODE (SUBREG_REG (operands[2])))\n					 == MODE_INT)\n				     ? GET_MODE_PRECISION\n					 (GET_MODE (SUBREG_REG (operands[2])))\n				     : GET_MODE_PRECISION\n					 (GET_MODE (operands[2])))))\n			 ? CCZmode : CCNOmode)) && (TARGET_64BIT)) && ( 1)",
# 15648 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p ((
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_DImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_DImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 8866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_DImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_DImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 8866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 5080 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && reload_completed\n   && SSE_REG_P (operands[2])",

    __builtin_constant_p
# 5080 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed
   && ((((enum rtx_code) (operands[2])->code) == REG) && (((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    ? (int)
# 5080 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed
   && ((((enum rtx_code) (operands[2])->code) == REG) && (((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[2])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    : -1 },
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT",
    __builtin_constant_p
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (V4DFmode != V4DFmode || !TARGET_AVX2 || operands[3] == const0_rtx)",

    __builtin_constant_p
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V4DFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64])))
    ? (int)
# 20262 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (E_V4DFmode != E_V4DFmode || !((ix86_isa_flags & (1UL << 9)) != 0) || operands[3] == (const_int_rtx[64])))
    : -1 },
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_binary_operator_ok (XOR, DImode, operands)\n   && ix86_pre_reload_split ()",


    __builtin_constant_p
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(peep2_reg_dead_p (3, operands[0])\n   && (unsigned HOST_WIDE_INT) INTVAL (operands[2])\n      == -(unsigned HOST_WIDE_INT) INTVAL (operands[3])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])) && (TARGET_64BIT)",



    __builtin_constant_p (
# 736 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(peep2_reg_dead_p (3, operands[0])
   && (unsigned long) ((operands[2])->u.hwint[0])
      == -(unsigned long) ((operands[3])->u.hwint[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 736 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(peep2_reg_dead_p (3, operands[0])
   && (unsigned long) ((operands[2])->u.hwint[0])
      == -(unsigned long) ((operands[3])->u.hwint[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12717 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 12717 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 12717 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (PLUS, V16SFmode, operands)\n   && 1 && 1) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && 1 && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_POPCNT) && (TARGET_64BIT)",
    __builtin_constant_p (
# 14721 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14721 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || SImode == SImode\n       || SImode == DImode)) && (TARGET_AVX512F)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_SImode == E_SImode
       || E_SImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && (REGNO (operands[4]) == REGNO (operands[0])\n       || REGNO (operands[4]) == REGNO (operands[3]))\n   && (rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n			     ? 3 : 0], operands[5])\n       ? rtx_equal_p (operands[2], operands[6])\n       : rtx_equal_p (operands[2], operands[5])\n	 && rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n				  ? 3 : 0], operands[6]))\n   && peep2_reg_dead_p (4, operands[4])\n   && peep2_reg_dead_p (5, operands[REGNO (operands[4]) == REGNO (operands[0])\n				    ? 3 : 0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[3], operands[0])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[2])\n   && (DImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))) && (TARGET_64BIT)",
# 363 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_DImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 11988 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_BMI2 && reload_completed",
    __builtin_constant_p
# 11988 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed)
    ? (int)
# 11988 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed)
    : -1 },
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && 1",


    __builtin_constant_p
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1)
    ? (int)
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1)
    : -1 },
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NOT, HImode, operands)",
    __builtin_constant_p
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_HImode, operands))
    ? (int)
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_HImode, operands))
    : -1 },
  { "((TARGET_64BIT && TARGET_STV) && (Pmode == DImode)) && ( reload_completed)",
    __builtin_constant_p ((
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) ((
# 1683 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 18391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "x86_64_immediate_operand (operands[2], VOIDmode)\n   && INTVAL (operands[2]) != -1\n   && INTVAL (operands[2]) != 2147483647",


    __builtin_constant_p
# 18391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(x86_64_immediate_operand (operands[2], E_VOIDmode)
   && ((operands[2])->u.hwint[0]) != -1
   && ((operands[2])->u.hwint[0]) != 2147483647)
    ? (int)
# 18391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(x86_64_immediate_operand (operands[2], E_VOIDmode)
   && ((operands[2])->u.hwint[0]) != -1
   && ((operands[2])->u.hwint[0]) != 2147483647)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_MINUS, V32HImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512F && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode)\n   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC",


    __builtin_constant_p
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    ? (int)
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    : -1 },
  { "(TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX)",
    __builtin_constant_p (
# 13372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 13372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, TImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 7151 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_TImode, operands)) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7151 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_TImode, operands)) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH) && (TARGET_64BIT)",
    __builtin_constant_p (
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 13440 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && SIBLING_CALL_P (peep2_next_insn (2))\n   && !reg_mentioned_p (operands[0],\n			CALL_INSN_FUNCTION_USAGE (peep2_next_insn (2)))",


    __builtin_constant_p
# 13440 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((peep2_next_insn (2)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (2))->u.fld[7]).rt_rtx)))
    ? (int)
# 13440 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((peep2_next_insn (2)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (2))->u.fld[7]).rt_rtx)))
    : -1 },
# 1646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n   || (TARGET_80387 && TARGET_CMOVE)",

    __builtin_constant_p
# 1646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))))
    ? (int)
# 1646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))))
    : -1 },
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && X87_ENABLE_FLOAT (SFmode, SImode)\n   && !(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n   && (TARGET_USE_SIMODE_FIOP\n       || optimize_function_for_size_p (cfun))",



    __builtin_constant_p
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 15754 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   && (ix86_tune_features[X86_TUNE_USE_SIMODE_FIOP]
       || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
# 3916 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)",
    __builtin_constant_p
# 3916 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0)))
    ? (int)
# 3916 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0)))
    : -1 },
  { "(ix86_unary_operator_ok (NEG, DImode, operands)\n   && mode_signbit_p (DImode, operands[2])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_DImode, operands)
   && mode_signbit_p (E_DImode, operands[2])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_DImode, operands)
   && mode_signbit_p (E_DImode, operands[2])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 9508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_BMI && TARGET_STV && TARGET_SSE2\n   && can_create_pseudo_p ()",

    __builtin_constant_p
# 9508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 23)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && (!reload_in_progress && !reload_completed))
    ? (int)
# 9508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 23)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && (!reload_in_progress && !reload_completed))
    : -1 },
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && TARGET_CMOVE)\n   || (SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DImode)\n       == GET_MODE_NUNITS (V8DImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512CD)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 12)) != 0)))
    : -1 },
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (PLUS, HImode, operands)",
    __builtin_constant_p
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_HImode, operands))
    ? (int)
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_HImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V4DFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 8892 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && reload_completed",

    __builtin_constant_p
# 8892 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && reload_completed)
    ? (int)
# 8892 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V4SFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(IN_RANGE (INTVAL (operands[2]), 1, 3)\n   /* Validate MODE for lea.  */\n   && ((!TARGET_PARTIAL_REG_STALL\n	&& (GET_MODE (operands[0]) == QImode\n	    || GET_MODE (operands[0]) == HImode))\n       || GET_MODE (operands[0]) == SImode\n       || (TARGET_64BIT && GET_MODE (operands[0]) == DImode))\n   && (rtx_equal_p (operands[0], operands[3])\n       || peep2_reg_dead_p (2, operands[0]))\n   /* We reorder load and the shift.  */\n   && !reg_overlap_mentioned_p (operands[0], operands[4])) && (word_mode == DImode)",
# 690 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 20438 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (((operands[2])->u.hwint[0])) - (unsigned long) (1) <= (unsigned long) (3) - (unsigned long) (1))

   && ((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
 && (((machine_mode) (operands[0])->mode) == E_QImode
     || ((machine_mode) (operands[0])->mode) == E_HImode))
       || ((machine_mode) (operands[0])->mode) == E_SImode
       || (((ix86_isa_flags & (1UL << 1)) != 0) && ((machine_mode) (operands[0])->mode) == E_DImode))
   && (rtx_equal_p (operands[0], operands[3])
       || peep2_reg_dead_p (2, operands[0]))

   && !reg_overlap_mentioned_p (operands[0], operands[4])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 20438 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (((operands[2])->u.hwint[0])) - (unsigned long) (1) <= (unsigned long) (3) - (unsigned long) (1))

   && ((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
 && (((machine_mode) (operands[0])->mode) == E_QImode
     || ((machine_mode) (operands[0])->mode) == E_HImode))
       || ((machine_mode) (operands[0])->mode) == E_SImode
       || (((ix86_isa_flags & (1UL << 1)) != 0) && ((machine_mode) (operands[0])->mode) == E_DImode))
   && (rtx_equal_p (operands[0], operands[3])
       || peep2_reg_dead_p (2, operands[0]))

   && !reg_overlap_mentioned_p (operands[0], operands[4])) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
# 6276 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)",
    __builtin_constant_p
# 6276 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    ? (int)
# 6276 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    : -1 },
  { "(TARGET_CMOVE\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 18833 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 18830 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 18833 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 6866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, SImode, operands)\n   && CONST_INT_P (operands[2])\n   /* Check that operands[6] is operands[2] zero extended from\n      SImode to DImode.  */\n   && ((SImode == SImode || INTVAL (operands[2]) >= 0)\n       ? (CONST_INT_P (operands[6])\n	  && UINTVAL (operands[6]) == (UINTVAL (operands[2])\n				       & GET_MODE_MASK (SImode)))\n       : (CONST_WIDE_INT_P (operands[6])\n	  && CONST_WIDE_INT_NUNITS (operands[6]) == 2\n	  && ((unsigned HOST_WIDE_INT) CONST_WIDE_INT_ELT (operands[6], 0)\n	      == UINTVAL (operands[2]))\n	  && CONST_WIDE_INT_ELT (operands[6], 1) == 0))",
# 6879 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 6866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)


   && ((E_SImode == E_SImode || ((operands[2])->u.hwint[0]) >= 0)
       ? ((((enum rtx_code) (operands[6])->code) == CONST_INT)
   && ((unsigned long) ((operands[6])->u.hwint[0])) == (((unsigned long) ((operands[2])->u.hwint[0]))
           & mode_mask_array[E_SImode]))
       : ((((enum rtx_code) (operands[6])->code) == CONST_WIDE_INT)
   && ((int)((operands[6]))->u2.num_elem) == 2
   && ((unsigned long) ((operands[6])->u.hwiv.elem[0])
       == ((unsigned long) ((operands[2])->u.hwint[0])))
   && ((operands[6])->u.hwiv.elem[1]) == 0)))
    ? (int)
# 6866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)


   && ((E_SImode == E_SImode || ((operands[2])->u.hwint[0]) >= 0)
       ? ((((enum rtx_code) (operands[6])->code) == CONST_INT)
   && ((unsigned long) ((operands[6])->u.hwint[0])) == (((unsigned long) ((operands[2])->u.hwint[0]))
           & mode_mask_array[E_SImode]))
       : ((((enum rtx_code) (operands[6])->code) == CONST_WIDE_INT)
   && ((int)((operands[6]))->u2.num_elem) == 2
   && ((unsigned long) ((operands[6])->u.hwiv.elem[0])
       == ((unsigned long) ((operands[2])->u.hwint[0])))
   && ((operands[6])->u.hwiv.elem[1]) == 0)))
    : -1 },
# 9825 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n       && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n       && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4)\n       && INTVAL (operands[6]) == (INTVAL (operands[10]) - 4)\n       && INTVAL (operands[3]) == (INTVAL (operands[11]) - 8)\n       && INTVAL (operands[4]) == (INTVAL (operands[12]) - 8)\n       && INTVAL (operands[5]) == (INTVAL (operands[13]) - 8)\n       && INTVAL (operands[6]) == (INTVAL (operands[14]) - 8)\n       && INTVAL (operands[3]) == (INTVAL (operands[15]) - 12)\n       && INTVAL (operands[4]) == (INTVAL (operands[16]) - 12)\n       && INTVAL (operands[5]) == (INTVAL (operands[17]) - 12)\n       && INTVAL (operands[6]) == (INTVAL (operands[18]) - 12))",
# 9838 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p
# 9825 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[11])->u.hwint[0]) - 8)
       && ((operands[4])->u.hwint[0]) == (((operands[12])->u.hwint[0]) - 8)
       && ((operands[5])->u.hwint[0]) == (((operands[13])->u.hwint[0]) - 8)
       && ((operands[6])->u.hwint[0]) == (((operands[14])->u.hwint[0]) - 8)
       && ((operands[3])->u.hwint[0]) == (((operands[15])->u.hwint[0]) - 12)
       && ((operands[4])->u.hwint[0]) == (((operands[16])->u.hwint[0]) - 12)
       && ((operands[5])->u.hwint[0]) == (((operands[17])->u.hwint[0]) - 12)
       && ((operands[6])->u.hwint[0]) == (((operands[18])->u.hwint[0]) - 12)))
    ? (int)
# 9825 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[11])->u.hwint[0]) - 8)
       && ((operands[4])->u.hwint[0]) == (((operands[12])->u.hwint[0]) - 8)
       && ((operands[5])->u.hwint[0]) == (((operands[13])->u.hwint[0]) - 8)
       && ((operands[6])->u.hwint[0]) == (((operands[14])->u.hwint[0]) - 8)
       && ((operands[3])->u.hwint[0]) == (((operands[15])->u.hwint[0]) - 12)
       && ((operands[4])->u.hwint[0]) == (((operands[16])->u.hwint[0]) - 12)
       && ((operands[5])->u.hwint[0]) == (((operands[17])->u.hwint[0]) - 12)
       && ((operands[6])->u.hwint[0]) == (((operands[18])->u.hwint[0]) - 12)))
    : -1 },
# 15429 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_X32",
    __builtin_constant_p
# 15429 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 58)) != 0))
    ? (int)
# 15429 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 58)) != 0))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_MINUS, V16HImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, SImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512DQ && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_LWP) && (Pmode == SImode)",
    __builtin_constant_p (
# 21108 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 21108 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 34)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_PLUS, V32HImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || HImode == SImode\n       || HImode == DImode)) && (TARGET_AVX512BW))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 9498 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 9498 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_pre_reload_split ())
    ? (int)
# 9498 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SFmode)\n       == GET_MODE_NUNITS (V32HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 11317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VL && ix86_pre_reload_split ()",
    __builtin_constant_p
# 11317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ())
    ? (int)
# 11317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ())
    : -1 },
  { "((SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n   || (TARGET_SSE && (DFmode == TFmode))) && ( reload_completed)",

    __builtin_constant_p (
# 10293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode == E_TFmode))) &&
# 10296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 10293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode == E_TFmode))) &&
# 10296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(ix86_binary_operator_ok (ASHIFT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()) && ( 1)",



    __builtin_constant_p (
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 10717 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 10712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 10717 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 21406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX",
    __builtin_constant_p
# 21406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))
    ? (int)
# 21406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))
    : -1 },
  { "((SSE_FLOAT_MODE_P (TFmode) && TARGET_SSE_MATH)\n   || (TARGET_SSE && (TFmode == TFmode))) && ( reload_completed)",

    __builtin_constant_p (
# 10293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_TFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode == E_TFmode))) &&
# 10296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 10293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_TFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode == E_TFmode))) &&
# 10296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 20104 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && XVECLEN (operands[0], 0) == (TARGET_64BIT ? 16 : 8) + 1",
    __builtin_constant_p
# 20104 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (((((operands[0])->u.fld[0]).rt_rtvec))->num_elem) == (((ix86_isa_flags & (1UL << 1)) != 0) ? 16 : 8) + 1)
    ? (int)
# 20104 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (((((operands[0])->u.fld[0]).rt_rtvec))->num_elem) == (((ix86_isa_flags & (1UL << 1)) != 0) ? 16 : 8) + 1)
    : -1 },
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (MINUS, QImode, operands)",

    __builtin_constant_p
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands))
    ? (int)
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands))
    : -1 },
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (!false\n       || SImode == SImode\n       || SImode == DImode)",



    __builtin_constant_p
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_SImode == E_SImode
       || E_SImode == E_DImode))
    ? (int)
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_SImode == E_SImode
       || E_SImode == E_DImode))
    : -1 },
  { "(TARGET_SSE\n   && GET_RTX_CLASS (GET_CODE (operands[3])) == RTX_COMM_COMPARE) && (TARGET_AVX)",

    __builtin_constant_p (
# 2875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_COMPARE) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 2875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_COMPARE) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && !symbolic_operand (operands[1], DImode)\n   && !x86_64_immediate_operand (operands[1], DImode)",


    __builtin_constant_p
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !symbolic_operand (operands[1], E_DImode)
   && !x86_64_immediate_operand (operands[1], E_DImode))
    ? (int)
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !symbolic_operand (operands[1], E_DImode)
   && !x86_64_immediate_operand (operands[1], E_DImode))
    : -1 },
# 12296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && !TARGET_USE_BT",
    __builtin_constant_p
# 12296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_USE_BT])
    ? (int)
# 12296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_USE_BT])
    : -1 },
  { "((!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   && ((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n       < (HOST_WIDE_INT_1U << INTVAL (operands[2])))) && ( reload_completed)",


    __builtin_constant_p (
# 6301 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && ((unsigned long) ((operands[3])->u.hwint[0])
       < (1UL << ((operands[2])->u.hwint[0])))) &&
# 6305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 6301 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
   && ((unsigned long) ((operands[3])->u.hwint[0])
       < (1UL << ((operands[2])->u.hwint[0])))) &&
# 6305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DImode)\n       == GET_MODE_NUNITS (V16SFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    : -1 },
  { "(!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_binary_operator_ok (AND, DImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",


    __builtin_constant_p (
# 9020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 9024 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 9020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 9024 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode))))
    : -1 },
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !(SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || HImode != DImode))\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_HImode != E_DImode))
   && ix86_pre_reload_split ())
    ? (int)
# 4783 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_HImode != E_DImode))
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (PLUS, V2DImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(reload_completed && ix86_avoid_lea_for_addr (insn, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 5162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_addr (insn, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_addr (insn, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V16SFmode, operands)\n   && 1",


    __builtin_constant_p
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && 1)
    ? (int)
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && 1)
    : -1 },
  { "(INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == SImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",
    __builtin_constant_p (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 21563 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_WAITPKG",
    __builtin_constant_p
# 21563 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 19)) != 0))
    ? (int)
# 21563 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 19)) != 0))
    : -1 },
# 7978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 7978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 7978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 22879 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX5124VNNIW",
    __builtin_constant_p
# 22879 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0))
    ? (int)
# 22879 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0))
    : -1 },
# 20767 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX && !TARGET_AVX2 && reload_completed",
    __builtin_constant_p
# 20767 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((ix86_isa_flags & (1UL << 9)) != 0) && reload_completed)
    ? (int)
# 20767 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((ix86_isa_flags & (1UL << 9)) != 0) && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && 1 && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V64QImode, operands)) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V64QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V64QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_LZCNT && TARGET_64BIT) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p (
# 14197 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14199 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) (
# 14197 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14199 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
  { "(!TARGET_PARTIAL_REG_STALL\n   && (!TARGET_ZERO_EXTEND_WITH_AND || optimize_function_for_size_p (cfun))) && ( reload_completed)",

    __builtin_constant_p (
# 12536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && (!ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] || optimize_function_for_size_p ((cfun + 0)))) &&
# 12539 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 12536 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && (!ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] || optimize_function_for_size_p ((cfun + 0)))) &&
# 12539 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V32HImode)\n       == GET_MODE_NUNITS (V16SFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && TARGET_AVX512VL\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_SSE2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_PLUS, V16HImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 9945 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   && rtx_equal_p (operands[0], operands[1])",


    __builtin_constant_p
# 9945 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)

   && rtx_equal_p (operands[0], operands[1]))
    ? (int)
# 9945 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)

   && rtx_equal_p (operands[0], operands[1]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V8SFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512BW && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V64QImode)\n       == GET_MODE_NUNITS (V8DFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    : -1 },
# 18651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_80387 && TARGET_CMOVE\n   && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && can_create_pseudo_p ()\n   && optimize_insn_for_speed_p ()",




    __builtin_constant_p
# 18651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && (!reload_in_progress && !reload_completed)
   && optimize_insn_for_speed_p ())
    ? (int)
# 18651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && (!reload_in_progress && !reload_completed)
   && optimize_insn_for_speed_p ())
    : -1 },
# 4027 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[1]) != REGNO (operands[2])\n   && peep2_reg_dead_p (2, operands[1])\n   && peep2_reg_dead_p (4, operands[2])\n   && !reg_mentioned_p (operands[2], operands[3])",



    __builtin_constant_p
# 4027 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[1])) != (rhs_regno(operands[2]))
   && peep2_reg_dead_p (2, operands[1])
   && peep2_reg_dead_p (4, operands[2])
   && !reg_mentioned_p (operands[2], operands[3]))
    ? (int)
# 4027 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[1])) != (rhs_regno(operands[2]))
   && peep2_reg_dead_p (2, operands[1])
   && peep2_reg_dead_p (4, operands[2])
   && !reg_mentioned_p (operands[2], operands[3]))
    : -1 },
# 9794 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 9794 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 9794 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V32HImode)\n       == GET_MODE_NUNITS (V32HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512BW && (64 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V32HImode)\n       == GET_MODE_NUNITS (V8DImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512VBMI) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0)) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_CMPXCHG) && (TARGET_64BIT)",
    __builtin_constant_p (
# 600 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG]) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 600 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(ix86_arch_features[X86_ARCH_CMPXCHG]) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && (GET_MODE_NUNITS (V4SFmode)\n       == GET_MODE_NUNITS (V2DFmode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 20149 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "pow2p_hwi (INTVAL (operands[1]))\n   && peep2_regno_dead_p (0, FLAGS_REG)",

    __builtin_constant_p
# 20149 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(pow2p_hwi (((operands[1])->u.hwint[0]))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20149 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(pow2p_hwi (((operands[1])->u.hwint[0]))
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V4DFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V4SImode)\n       == GET_MODE_NUNITS (V4SImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512VL) && (TARGET_AVX512DQ)",
    __builtin_constant_p (
# 8674 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 8666 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    ? (int) (
# 8674 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 8666 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    : -1 },
# 11416 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && INTVAL (operands[2]) == 31\n   && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)",


    __builtin_constant_p
# 11416 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((operands[2])->u.hwint[0]) == 31
   && (ix86_tune_features[X86_TUNE_USE_CLTD] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    ? (int)
# 11416 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((operands[2])->u.hwint[0]) == 31
   && (ix86_tune_features[X86_TUNE_USE_CLTD] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SImode)\n       == GET_MODE_NUNITS (V8DImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    : -1 },
  { "(TARGET_BMI2 && INTVAL (operands[4]) == 4 * BITS_PER_UNIT\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (!TARGET_64BIT)",

    __builtin_constant_p (
# 7803 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[4])->u.hwint[0]) == 4 * (8)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7803 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[4])->u.hwint[0]) == 4 * (8)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_MINUS, V8HImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V8HImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V8HImode, operands)))
    : -1 },
# 2077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && TARGET_SSE_MATH",
    __builtin_constant_p
# 2077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 2077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
# 12809 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && !TARGET_XOP ",
    __builtin_constant_p
# 12809 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((ix86_isa_flags & (1UL << 59)) != 0) )
    ? (int)
# 12809 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((ix86_isa_flags & (1UL << 59)) != 0) )
    : -1 },
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && (TARGET_SSE4_1\n	   || (ROUND_ROUNDEVEN != ROUND_ROUNDEVEN\n	       && (flag_fp_int_builtin_inexact || !flag_trapping_math))))",







    __builtin_constant_p
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x0 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    ? (int)
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && (((ix86_isa_flags & (1UL << 38)) != 0)
    || (0x0 != 0x0
        && (flag_fp_int_builtin_inexact || !flag_trapping_math)))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V2DImode == V16SFmode\n									      || V2DImode == V8DFmode\n									      || V2DImode == V8DImode\n									      || V2DImode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DImode == E_V16SFmode
               || E_V2DImode == E_V8DFmode
               || E_V2DImode == E_V8DImode
               || E_V2DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DImode == E_V16SFmode
               || E_V2DImode == E_V8DFmode
               || E_V2DImode == E_V8DImode
               || E_V2DImode == E_V16SImode)) &&
# 223 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && 1",
    __builtin_constant_p
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1)
    ? (int)
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1)
    : -1 },
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (LSHIFTRT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()",



    __builtin_constant_p
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    ? (int)
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    : -1 },
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_FMA",
    __builtin_constant_p
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0))
    ? (int)
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0))
    : -1 },
  { "((TARGET_LZCNT) && (TARGET_64BIT)) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p ((
# 14158 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14160 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) ((
# 14158 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14160 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && 1 && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_SSSE3 || TARGET_AVX || TARGET_XOP) && (TARGET_AVX2)",
    __builtin_constant_p (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13038 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13038 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == SImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode))",
    __builtin_constant_p (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20305 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_FMA) && (TARGET_SSE2)",
    __builtin_constant_p (
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 4670 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)\n   && can_create_pseudo_p ()",



    __builtin_constant_p
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))
   && (!reload_in_progress && !reload_completed))
    ? (int)
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))
   && (!reload_in_progress && !reload_completed))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || QImode == SImode\n       || QImode == DImode)) && (TARGET_AVX)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V2DImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DImode, operands))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (XOR, V2SImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (XOR, E_V2SImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (XOR, E_V2SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE))",
    __builtin_constant_p (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0))))
    ? (int) (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0))))
    : -1 },
# 14396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_BMI",
    __builtin_constant_p
# 14396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))
    ? (int)
# 14396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_PLUS, V16HImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_64BIT)",
    __builtin_constant_p (
# 5629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5629 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 4412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 4412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 20374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SLOW_IMUL_IMM32_MEM && optimize_insn_for_speed_p ()\n   && !satisfies_constraint_K (operands[2])",

    __builtin_constant_p
# 20374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM] && optimize_insn_for_speed_p ()
   && !satisfies_constraint_K (operands[2]))
    ? (int)
# 20374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM] && optimize_insn_for_speed_p ()
   && !satisfies_constraint_K (operands[2]))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1 && TARGET_AVX512VL\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11895 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11895 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20905 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20905 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (IOR, SImode, operands)",
    __builtin_constant_p
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_SImode, operands))
    ? (int)
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (IOR, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V4DFmode, operands)\n   && 1 && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1) &&
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 1330 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && TARGET_SSE_UNALIGNED_LOAD_OPTIMAL\n   && REGNO (operands[4]) == REGNO (operands[2])\n   && ix86_operands_ok_for_move_multiple (operands, true, DFmode)",


    __builtin_constant_p
# 1330 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL]
   && (rhs_regno(operands[4])) == (rhs_regno(operands[2]))
   && ix86_operands_ok_for_move_multiple (operands, true, E_DFmode))
    ? (int)
# 1330 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL]
   && (rhs_regno(operands[4])) == (rhs_regno(operands[2]))
   && ix86_operands_ok_for_move_multiple (operands, true, E_DFmode))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DImode)\n       == GET_MODE_NUNITS (V16SImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V16SImode).coeffs[0])))
    : -1 },
# 15401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && reload_completed",
    __builtin_constant_p
# 15401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed)
    ? (int)
# 15401 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed)
    : -1 },
  { "(ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()) && ( 1)",



    __builtin_constant_p (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2\n   && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 2278 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && optimize_insn_for_size_p ()\n   && LEGACY_INT_REG_P (operands[0])\n   && !x86_64_immediate_operand (operands[1], DImode)\n   && !x86_64_zext_immediate_operand (operands[1], DImode)\n   && !((UINTVAL (operands[1]) >> ctz_hwi (UINTVAL (operands[1])))\n        & ~(HOST_WIDE_INT) 0xffffffff)\n   && peep2_regno_dead_p (0, FLAGS_REG)",







    __builtin_constant_p
# 2278 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && optimize_insn_for_size_p ()
   && ((((enum rtx_code) (operands[0])->code) == REG) && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))))
   && !x86_64_immediate_operand (operands[1], E_DImode)
   && !x86_64_zext_immediate_operand (operands[1], E_DImode)
   && !((((unsigned long) ((operands[1])->u.hwint[0])) >> ctz_hwi (((unsigned long) ((operands[1])->u.hwint[0]))))
        & ~(long) 0xffffffff)
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 2278 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && optimize_insn_for_size_p ()
   && ((((enum rtx_code) (operands[0])->code) == REG) && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))))
   && !x86_64_immediate_operand (operands[1], E_DImode)
   && !x86_64_zext_immediate_operand (operands[1], E_DImode)
   && !((((unsigned long) ((operands[1])->u.hwint[0])) >> ctz_hwi (((unsigned long) ((operands[1])->u.hwint[0]))))
        & ~(long) 0xffffffff)
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_64BIT && TARGET_XSAVE) && (TARGET_XSAVES)",
    __builtin_constant_p (
# 20984 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20907 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 63)) != 0)))
    ? (int) (
# 20984 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0)) &&
# 20907 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 63)) != 0)))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V4SImode)\n       == GET_MODE_NUNITS (V16QImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && HImode != HImode \n       && ((HImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_HImode != E_HImode
       && ((E_HImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_HImode != E_HImode
       && ((E_HImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V64QImode)\n       == GET_MODE_NUNITS (V16SFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    : -1 },
# 10027 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_unary_operator_ok (NEG, SImode, operands)",
    __builtin_constant_p
# 10027 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_unary_operator_ok (NEG, E_SImode, operands))
    ? (int)
# 10027 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_unary_operator_ok (NEG, E_SImode, operands))
    : -1 },
  { "(TARGET_SSE2\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V4SImode))) && (TARGET_SSE4_1)",


    __builtin_constant_p (
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V4SImode).coeffs[0]))) &&
# 14167 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)))
    ? (int) (
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V4SImode).coeffs[0]))) &&
# 14167 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (DImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_DImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_DImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_GFNI)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22976 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 33)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (V8DImode == V16SFmode\n									      || V8DImode == V8DFmode\n									      || V8DImode == V8DImode\n									      || V8DImode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DImode == E_V16SFmode
               || E_V8DImode == E_V8DFmode
               || E_V8DImode == E_V8DImode
               || E_V8DImode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DImode == E_V16SFmode
               || E_V8DImode == E_V8DFmode
               || E_V8DImode == E_V8DImode
               || E_V8DImode == E_V16SImode)))
    : -1 },
# 21443 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_PKU",
    __builtin_constant_p
# 21443 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 40)) != 0))
    ? (int)
# 21443 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 40)) != 0))
    : -1 },
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATERT, QImode, operands)",
    __builtin_constant_p
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_QImode, operands))
    ? (int)
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE) && (TARGET_64BIT))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5227 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5227 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))))
    : -1 },
# 9450 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(~INTVAL (operands[2]) & ~(255 << 8))",


    __builtin_constant_p
# 9450 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~(255 << 8)))
    ? (int)
# 9450 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(~((operands[2])->u.hwint[0]) & ~(255 << 8)))
    : -1 },
  { "(TARGET_SSE3) && (Pmode == SImode)",
    __builtin_constant_p (
# 16295 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 16295 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 17562 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 17562 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 17562 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V8HImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V8HImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V8HImode, operands))
    : -1 },
# 22797 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX5124FMAPS",
    __builtin_constant_p
# 22797 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0))
    ? (int)
# 22797 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (SS_MINUS, V4HImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_MINUS, E_V4HImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (SS_MINUS, E_V4HImode, operands))
    : -1 },
  { "(TARGET_SSE2\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V2DImode))) && (TARGET_SSE4_1 && TARGET_64BIT)",


    __builtin_constant_p (
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V2DImode).coeffs[0]))) &&
# 14168 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V2DImode).coeffs[0]))) &&
# 14168 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V2DFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && 1) && (TARGET_SSE2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_MINUS, V32QImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL) && 1) && (TARGET_SSE2))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_AVX\n   && (operands[2] == CONST0_RTX (V8SFmode)\n       || !MEM_P (operands[1]))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V8SFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V8SFmode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_USE_FANCY_MATH_387\n   && (flag_fp_int_builtin_inexact || !flag_trapping_math)\n   && ix86_pre_reload_split ()) && ( 1)",


    __builtin_constant_p (
# 17307 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (flag_fp_int_builtin_inexact || !flag_trapping_math)
   && ix86_pre_reload_split ()) &&
# 17311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 17307 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && (flag_fp_int_builtin_inexact || !flag_trapping_math)
   && ix86_pre_reload_split ()) &&
# 17311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 3822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && reload_completed\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 3822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 3822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 9573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_BMI && ix86_match_ccmode (insn, CCNOmode)",
    __builtin_constant_p
# 9573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ix86_match_ccmode (insn, E_CCNOmode))
    ? (int)
# 9573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ix86_match_ccmode (insn, E_CCNOmode))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V8DFmode)\n       || register_operand (operands[1], V8DFmode))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8DFmode)
       || register_operand (operands[1], E_V8DFmode))) &&
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V8DFmode)
       || register_operand (operands[1], E_V8DFmode))) &&
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512DQ) && (TARGET_SSE2)",
    __builtin_constant_p (
# 22337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 22337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_PLUS, V16QImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V16QImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V16QImode, operands))
    : -1 },
# 3735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "SSE_FLOAT_MODE_P (SFmode)",
    __builtin_constant_p
# 3735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)))
    ? (int)
# 3735 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)))
    : -1 },
# 4458 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_VECTOR_FP_CONVERTS\n   && optimize_insn_for_speed_p ()\n   && reload_completed\n   && (!EXT_REX_SSE_REG_P (operands[0])\n       || TARGET_AVX512VL)",




    __builtin_constant_p
# 4458 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_VECTOR_FP_CONVERTS]
   && optimize_insn_for_speed_p ()
   && reload_completed
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int)
# 4458 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_VECTOR_FP_CONVERTS]
   && optimize_insn_for_speed_p ()
   && reload_completed
   && (!((((enum rtx_code) (operands[0])->code) == REG) && ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))
       || ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 11687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)",




    __builtin_constant_p
# 11687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode))
    ? (int)
# 11687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode))
    : -1 },
  { "(TARGET_AVX512F) && (Pmode == SImode)",
    __builtin_constant_p (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 22177 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && TARGET_FISTTP\n   && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || SImode != DImode))\n	&& TARGET_SSE_MATH)",




    __builtin_constant_p
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && (((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_SImode != E_DImode))
 && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && (((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_SImode != E_DImode))
 && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 1439 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)\n   && ix86_binary_operator_ok (SMIN, V4HImode, operands)",


    __builtin_constant_p
# 1439 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (SMIN, E_V4HImode, operands))
    ? (int)
# 1439 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (SMIN, E_V4HImode, operands))
    : -1 },
  { "(/* Ensure that resulting mask is zero or sign extended operand.  */\n   INTVAL (operands[4]) >= 0\n   && ((INTVAL (operands[3]) > 0\n	&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n       || (DImode == DImode\n	   && INTVAL (operands[3]) > 32\n	   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\n   && ix86_match_ccmode (insn,\n			 /* If zero_extract mode precision is the same\n			    as len, the SF of the zero_extract\n			    comparison will be the most significant\n			    extracted bit, but this could be matched\n			    after splitting only for pos 0 len all bits\n			    trivial extractions.  Require CCZmode.  */\n			 (GET_MODE_PRECISION (DImode)\n			  == INTVAL (operands[3]))\n			 /* Otherwise, require CCZmode if we'd use a mask\n			    with the most significant bit set and can't\n			    widen it to wider mode.  *testdi_1 also\n			    requires CCZmode if the mask has bit\n			    31 set and all bits above it clear.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     >= 32)\n			 /* We can't widen also if val is not a REG.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     == GET_MODE_PRECISION (GET_MODE (operands[2]))\n			     && !register_operand (operands[2],\n						   GET_MODE (operands[2])))\n			 /* And we shouldn't widen if\n			    TARGET_PARTIAL_REG_STALL.  */\n			 || (TARGET_PARTIAL_REG_STALL\n			     && (INTVAL (operands[3]) + INTVAL (operands[4])\n				 >= (paradoxical_subreg_p (operands[2])\n				     && (GET_MODE_CLASS\n					  (GET_MODE (SUBREG_REG (operands[2])))\n					 == MODE_INT)\n				     ? GET_MODE_PRECISION\n					 (GET_MODE (SUBREG_REG (operands[2])))\n				     : GET_MODE_PRECISION\n					 (GET_MODE (operands[2])))))\n			 ? CCZmode : CCNOmode)) && (TARGET_64BIT)",
# 1484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
    __builtin_constant_p (
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_DImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_DImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_DImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_DImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && (TARGET_USE_BT || reload_completed)",
    __builtin_constant_p
# 12230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tune_features[X86_TUNE_USE_BT] || reload_completed))
    ? (int)
# 12230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_tune_features[X86_TUNE_USE_BT] || reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V16SFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 19858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_XOP",
    __builtin_constant_p
# 19858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0))
    ? (int)
# 19858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0))
    : -1 },
  { "(ix86_binary_operator_ok (ASHIFT, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 10740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 10740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_PLUS, V64QImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode))))
    : -1 },
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && ix86_binary_operator_ok (MINUS, V4SFmode, operands)\n   && 1 && 1",

    __builtin_constant_p
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && 1 && 1)
    ? (int)
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && 1 && 1)
    : -1 },
# 19762 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && COMMUTATIVE_ARITH_P (operands[2])\n   && peep2_reg_dead_p (3, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (2),\n			 GET_CODE (operands[2]) == PLUS\n			 ? CCGOCmode : CCNOmode)",






    __builtin_constant_p
# 19762 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (2),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19762 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (3, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (2),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "word_mode == SImode",
    __builtin_constant_p
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)
    ? (int)
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)
    : -1 },
  { "(TARGET_SSSE3 && 1 && 1) && (TARGET_AVX2)",
    __builtin_constant_p (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 16840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && (INTVAL (operands[3])\n       == (GET_MODE_UNIT_SIZE (V8DImode) == 4 ? 0xFFF0 : 0xFC))) && (TARGET_AVX512DQ)",


    __builtin_constant_p (
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V8DImode) == 4 ? 0xFFF0 : 0xFC))) &&
# 8335 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    ? (int) (
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V8DImode) == 4 ? 0xFFF0 : 0xFC))) &&
# 8335 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V16SImode, operands)) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 8853 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ\n   && TARGET_AVX512VL\n   && (!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[2]))",


    __builtin_constant_p
# 8853 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && ((ix86_isa_flags & (1UL << 20)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    ? (int)
# 8853 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && ((ix86_isa_flags & (1UL << 20)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    : -1 },
# 12020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   && rtx_equal_p (operands[0], operands[1])",


    __builtin_constant_p
# 12020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && rtx_equal_p (operands[0], operands[1]))
    ? (int)
# 12020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && rtx_equal_p (operands[0], operands[1]))
    : -1 },
# 20037 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AES",
    __builtin_constant_p
# 20037 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 7)) != 0))
    ? (int)
# 20037 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 7)) != 0))
    : -1 },
  { "(TARGET_64BIT\n  && general_operand (operands[3], DImode)\n  && (general_reg_operand (operands[3], DImode)\n      || memory_operand (operands[3], DImode)\n      || x86_64_zext_immediate_operand (operands[3], DImode)\n      || x86_64_immediate_operand (operands[3], DImode)\n      || (CONSTANT_P (operands[3])\n	  && (!flag_pic || LEGITIMATE_PIC_OPERAND_P (operands[3]))))\n  && !reg_overlap_mentioned_p (operands[2], operands[3])) && (ptr_mode == DImode)",
# 20048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 20696 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
  && general_operand (operands[3], E_DImode)
  && (general_reg_operand (operands[3], E_DImode)
      || memory_operand (operands[3], E_DImode)
      || x86_64_zext_immediate_operand (operands[3], E_DImode)
      || x86_64_immediate_operand (operands[3], E_DImode)
      || (((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_CONST_OBJ)
   && (!flag_pic || legitimate_pic_operand_p (operands[3]))))
  && !reg_overlap_mentioned_p (operands[2], operands[3])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    ? (int) (
# 20696 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
  && general_operand (operands[3], E_DImode)
  && (general_reg_operand (operands[3], E_DImode)
      || memory_operand (operands[3], E_DImode)
      || x86_64_zext_immediate_operand (operands[3], E_DImode)
      || x86_64_immediate_operand (operands[3], E_DImode)
      || (((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_CONST_OBJ)
   && (!flag_pic || legitimate_pic_operand_p (operands[3]))))
  && !reg_overlap_mentioned_p (operands[2], operands[3])) &&
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_DImode))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V32QImode)\n       == GET_MODE_NUNITS (V8SFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V32QImode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V16QImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V16QImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V16QImode, operands))
    : -1 },
  { "(TARGET_USE_BT\n   && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()) && ( 1)",



    __builtin_constant_p (
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 12179 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 12179 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512PF) && (Pmode == DImode)",
    __builtin_constant_p (
# 18973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 17)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 18973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 17)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
# 9269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && ix86_match_ccmode\n	(insn,\n	 /* If we are going to emit andl instead of andq, and the operands[2]\n	    constant might have the SImode sign bit set, make sure the sign\n	    flag isn't tested, because the instruction will set the sign flag\n	    based on bit 31 rather than bit 63.  If it isn't CONST_INT,\n	    conservatively assume it might have bit 31 set.  */\n	 (satisfies_constraint_Z (operands[2])\n	  && (!CONST_INT_P (operands[2])\n	      || val_signbit_known_set_p (SImode, INTVAL (operands[2]))))\n	 ? CCZmode : CCNOmode)\n   && ix86_binary_operator_ok (AND, DImode, operands)",
# 9282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 9269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_match_ccmode
 (insn,





  (satisfies_constraint_Z (operands[2])
   && (!(((enum rtx_code) (operands[2])->code) == CONST_INT)
       || val_signbit_known_set_p (E_SImode, ((operands[2])->u.hwint[0]))))
  ? E_CCZmode : E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_DImode, operands))
    ? (int)
# 9269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_match_ccmode
 (insn,





  (satisfies_constraint_Z (operands[2])
   && (!(((enum rtx_code) (operands[2])->code) == CONST_INT)
       || val_signbit_known_set_p (E_SImode, ((operands[2])->u.hwint[0]))))
  ? E_CCZmode : E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_DImode, operands))
    : -1 },
# 20160 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && pow2p_hwi (INTVAL (operands[2]))\n   && REGNO (operands[0]) == REGNO (operands[1])\n   && peep2_regno_dead_p (0, FLAGS_REG)",



    __builtin_constant_p
# 20160 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && pow2p_hwi (((operands[2])->u.hwint[0]))
   && (rhs_regno(operands[0])) == (rhs_regno(operands[1]))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20160 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && pow2p_hwi (((operands[2])->u.hwint[0]))
   && (rhs_regno(operands[0])) == (rhs_regno(operands[1]))
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 21433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1",
    __builtin_constant_p
# 21433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0))
    ? (int)
# 21433 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0))
    : -1 },
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_unary_operator_ok (NOT, SImode, operands)",

    __builtin_constant_p
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_SImode, operands))
    ? (int)
# 10410 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || DImode == SImode\n       || DImode == DImode)) && (TARGET_AVX512F)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX5124FMAPS)",
    __builtin_constant_p (
# 22609 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0)))
    ? (int) (
# 22609 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0)))
    : -1 },
# 20358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && (!TARGET_PARTIAL_REG_STALL || SImode == SImode)",

    __builtin_constant_p
# 20358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || E_SImode == E_SImode))
    ? (int)
# 20358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || E_SImode == E_SImode))
    : -1 },
  { "(TARGET_SSE\n   && 1 && 1) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 586 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX_WITH_SSE && TARGET_SSE3\n   && INTVAL (operands[2]) != INTVAL (operands[3])",

    __builtin_constant_p
# 586 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 52)) != 0)
   && ((operands[2])->u.hwint[0]) != ((operands[3])->u.hwint[0]))
    ? (int)
# 586 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 52)) != 0)
   && ((operands[2])->u.hwint[0]) != ((operands[3])->u.hwint[0]))
    : -1 },
  { "(TARGET_POPCNT) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p (
# 14690 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)) &&
# 14698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) (
# 14690 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)) &&
# 14698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
# 7889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_QIMODE_MATH\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 7889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 7889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 9840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n   /* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   && (rtx_equal_p (operands[0], operands[1])\n       || rtx_equal_p (operands[0], operands[2]))",



    __builtin_constant_p
# 9840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && (rtx_equal_p (operands[0], operands[1])
       || rtx_equal_p (operands[0], operands[2])))
    ? (int)
# 9840 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))

   && (rtx_equal_p (operands[0], operands[1])
       || rtx_equal_p (operands[0], operands[2])))
    : -1 },
# 7333 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && ix86_binary_operator_ok (UNKNOWN, V4SFmode, operands)",
    __builtin_constant_p
# 7333 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (UNKNOWN, E_V4SFmode, operands))
    ? (int)
# 7333 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (UNKNOWN, E_V4SFmode, operands))
    : -1 },
  { "((TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 4882 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 12393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F && 1) && (TARGET_SSE2)",
    __builtin_constant_p (
# 5245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 5245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && TARGET_AVX512VL\n   && ix86_pre_reload_split ())",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()))
    : -1 },
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && ix86_binary_operator_ok (PLUS, V32HImode, operands)",
    __builtin_constant_p
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V32HImode, operands))
    ? (int)
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V32HImode, operands))
    : -1 },
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (EQ, V8QImode, operands)",

    __builtin_constant_p
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (EQ, E_V8QImode, operands))
    ? (int)
# 1556 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (EQ, E_V8QImode, operands))
    : -1 },
  { "((TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && ((((((((word_mode == SImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode))",


    __builtin_constant_p (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(ix86_binary_operator_ok (LSHIFTRT, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()) && ( 1)",



    __builtin_constant_p (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && 1",

    __builtin_constant_p
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1)
    ? (int)
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1)
    : -1 },
  { "(reload_completed) && (Pmode == DImode)",
    __builtin_constant_p (
# 4212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 4212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE3 && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 7619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 7619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 4659 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_64BIT || TARGET_AVX512F) && TARGET_SSE2 && TARGET_SSE_MATH",
    __builtin_constant_p
# 4659 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 4659 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || (SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)",
    __builtin_constant_p
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V32QImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V32QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V32QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_MINUS, V16QImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V16QImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V16QImode, operands)))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SFmode)\n       == GET_MODE_NUNITS (V64QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_MINUS, V16QImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V16QImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V16QImode, operands))
    : -1 },
  { "(TARGET_USE_BT) && (TARGET_64BIT)",
    __builtin_constant_p (
# 12130 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 12130 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH) && (TARGET_64BIT)",
    __builtin_constant_p (
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE2)))",
    __builtin_constant_p (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22365 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22365 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
# 1319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && TARGET_SSE_UNALIGNED_LOAD_OPTIMAL\n   && ix86_operands_ok_for_move_multiple (operands, true, DFmode)",

    __builtin_constant_p
# 1319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL]
   && ix86_operands_ok_for_move_multiple (operands, true, E_DFmode))
    ? (int)
# 1319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL]
   && ix86_operands_ok_for_move_multiple (operands, true, E_DFmode))
    : -1 },
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)",





    __builtin_constant_p
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    ? (int)
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    : -1 },
# 21492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_MOVDIRI",
    __builtin_constant_p
# 21492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 37)) != 0))
    ? (int)
# 21492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 37)) != 0))
    : -1 },
  { "((SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n   || (TARGET_SSE && (SFmode == TFmode))) && ( reload_completed)",

    __builtin_constant_p (
# 10293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode == E_TFmode))) &&
# 10296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 10293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode == E_TFmode))) &&
# 10296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(IN_RANGE (exact_log2 (UINTVAL (operands[3])), 1, 31)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(INTVAL (operands[0]) == GET_MODE_SIZE (word_mode)) && ((((((((word_mode == DImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode))",
    __builtin_constant_p (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[0])->u.hwint[0]) == ((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 2633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_LP64 && ix86_check_movabs (insn, 0)",
    __builtin_constant_p
# 2633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 4)) != 0) && ix86_check_movabs (insn, 0))
    ? (int)
# 2633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 4)) != 0) && ix86_check_movabs (insn, 0))
    : -1 },
  { "(TARGET_AVX512VBMI2) && (TARGET_AVX512VL && TARGET_AVX512BW)",
    __builtin_constant_p (
# 22284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 22284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX && XVECLEN (operands[0], 0) != (TARGET_64BIT ? 16 : 8) + 1) && ( epilogue_completed)",
    __builtin_constant_p (
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (((((operands[0])->u.fld[0]).rt_rtvec))->num_elem) != (((ix86_isa_flags & (1UL << 1)) != 0) ? 16 : 8) + 1) &&
# 20118 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( epilogue_completed))
    ? (int) (
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (((((operands[0])->u.fld[0]).rt_rtvec))->num_elem) != (((ix86_isa_flags & (1UL << 1)) != 0) ? 16 : 8) + 1) &&
# 20118 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( epilogue_completed))
    : -1 },
# 1374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW && ix86_binary_operator_ok (MULT, V4HImode, operands)",
    __builtin_constant_p
# 1374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0) && ix86_binary_operator_ok (MULT, E_V4HImode, operands))
    ? (int)
# 1374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0) && ix86_binary_operator_ok (MULT, E_V4HImode, operands))
    : -1 },
# 11152 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& (TARGET_SHIFT1\n	    || TARGET_DOUBLE_WITH_ADD)))\n   && ix86_match_ccmode (insn, CCGOCmode)",





    __builtin_constant_p
# 11152 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD])))
   && ix86_match_ccmode (insn, E_CCGOCmode))
    ? (int)
# 11152 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && (ix86_tune_features[X86_TUNE_SHIFT1]
     || ix86_tune_features[X86_TUNE_DOUBLE_WITH_ADD])))
   && ix86_match_ccmode (insn, E_CCGOCmode))
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_MINUS, V8HImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V8HImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V8HImode, operands))
    : -1 },
# 9189 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n   && (!REG_P (operands[1])\n       || REGNO (operands[0]) != REGNO (operands[1]))",


    __builtin_constant_p
# 9189 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (!(((enum rtx_code) (operands[1])->code) == REG)
       || (rhs_regno(operands[0])) != (rhs_regno(operands[1]))))
    ? (int)
# 9189 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (!(((enum rtx_code) (operands[1])->code) == REG)
       || (rhs_regno(operands[0])) != (rhs_regno(operands[1]))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX)))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 18955 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512PF",
    __builtin_constant_p
# 18955 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 17)) != 0))
    ? (int)
# 18955 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 17)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_PLUS, V64QImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V4SFmode)\n       == GET_MODE_NUNITS (V16QImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V16QImode).coeffs[0])))
    : -1 },
  { "(!TARGET_X32\n   && !TARGET_INDIRECT_BRANCH_REGISTER\n   && SIBLING_CALL_P (peep2_next_insn (1))\n   && !reg_mentioned_p (operands[0],\n			CALL_INSN_FUNCTION_USAGE (peep2_next_insn (1)))) && (word_mode == SImode)",




    __builtin_constant_p (
# 13334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (1)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (1))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    ? (int) (
# 13334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (1)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (1))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode))
    : -1 },
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && !(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 12748 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE2) && (TARGET_AVX2)",
    __builtin_constant_p (
# 19771 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 19771 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 4560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_FMA || TARGET_FMA4",
    __builtin_constant_p
# 4560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0))
    ? (int)
# 4560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V16SFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 14568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VL\n   && (INTVAL (operands[3]) & 3) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && INTVAL (operands[3]) == INTVAL (operands[5]) - 2\n   && INTVAL (operands[3]) == INTVAL (operands[6]) - 3\n   && (INTVAL (operands[7]) & 3) == 0\n   && INTVAL (operands[7]) == INTVAL (operands[8]) - 1\n   && INTVAL (operands[7]) == INTVAL (operands[9]) - 2\n   && INTVAL (operands[7]) == INTVAL (operands[10]) - 3",
# 14577 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p
# 14568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3)
    ? (int)
# 14568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3)
    : -1 },
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (IOR, SImode, operands)",

    __builtin_constant_p
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_SImode, operands))
    ? (int)
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (IOR, E_SImode, operands))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (MINUS, V8DFmode, operands)\n   && 1 && 1) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 19435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_XOP && !(MEM_P (operands[2]) && MEM_P (operands[3]))",
    __builtin_constant_p
# 19435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    ? (int)
# 19435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    : -1 },
# 15961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387 && X87_ENABLE_ARITH (SFmode))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 15961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 15961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 18583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && TARGET_CMOVE",
    __builtin_constant_p
# 18583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
    ? (int)
# 18583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
    : -1 },
# 1949 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_AVX512F\n   && (register_operand (operands[0], XImode)\n       || register_operand (operands[1], XImode))",


    __builtin_constant_p
# 1949 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_XImode)
       || register_operand (operands[1], E_XImode)))
    ? (int)
# 1949 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_XImode)
       || register_operand (operands[1], E_XImode)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW)",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX && (32 == 64 || TARGET_AVX512VL) && 1)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (32 == 64 || TARGET_AVX512VL)\n   && avx_vpermilp_parallel (operands[2], V8SFmode)) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V8SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V8SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V8SFmode)\n       == GET_MODE_NUNITS (V32QImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_MINUS, V64QImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(peep2_regno_dead_p (0, FLAGS_REG)\n   && !reg_overlap_mentioned_p (operands[1], operands[0])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 18942 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (0, 17)
   && !reg_overlap_mentioned_p (operands[1], operands[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18942 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_regno_dead_p (0, 17)
   && !reg_overlap_mentioned_p (operands[1], operands[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V8DFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX && 1 && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (QImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, QImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(!TARGET_64BIT && TARGET_CMOVE\n   && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && can_create_pseudo_p ()\n   && optimize_insn_for_speed_p ()) && (TARGET_64BIT)",




    __builtin_constant_p (
# 18464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && (!reload_in_progress && !reload_completed)
   && optimize_insn_for_speed_p ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18464 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && (!reload_in_progress && !reload_completed)
   && optimize_insn_for_speed_p ()) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512ER)",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)))
    : -1 },
  { "(reload_completed) && (word_mode == DImode)",
    __builtin_constant_p (
# 13622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 13622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "/* Ensure that resulting mask is zero or sign extended operand.  */\n   INTVAL (operands[4]) >= 0\n   && ((INTVAL (operands[3]) > 0\n	&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n       || (SImode == DImode\n	   && INTVAL (operands[3]) > 32\n	   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\n   && ix86_match_ccmode (insn,\n			 /* If zero_extract mode precision is the same\n			    as len, the SF of the zero_extract\n			    comparison will be the most significant\n			    extracted bit, but this could be matched\n			    after splitting only for pos 0 len all bits\n			    trivial extractions.  Require CCZmode.  */\n			 (GET_MODE_PRECISION (SImode)\n			  == INTVAL (operands[3]))\n			 /* Otherwise, require CCZmode if we'd use a mask\n			    with the most significant bit set and can't\n			    widen it to wider mode.  *testdi_1 also\n			    requires CCZmode if the mask has bit\n			    31 set and all bits above it clear.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     >= 32)\n			 /* We can't widen also if val is not a REG.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     == GET_MODE_PRECISION (GET_MODE (operands[2]))\n			     && !register_operand (operands[2],\n						   GET_MODE (operands[2])))\n			 /* And we shouldn't widen if\n			    TARGET_PARTIAL_REG_STALL.  */\n			 || (TARGET_PARTIAL_REG_STALL\n			     && (INTVAL (operands[3]) + INTVAL (operands[4])\n				 >= (paradoxical_subreg_p (operands[2])\n				     && (GET_MODE_CLASS\n					  (GET_MODE (SUBREG_REG (operands[2])))\n					 == MODE_INT)\n				     ? GET_MODE_PRECISION\n					 (GET_MODE (SUBREG_REG (operands[2])))\n				     : GET_MODE_PRECISION\n					 (GET_MODE (operands[2])))))\n			 ? CCZmode : CCNOmode)",
# 8865 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_SImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_SImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode))
    ? (int)
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_SImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_SImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && (32 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 9858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(INTVAL (operands[2]) & ~(255 << 8))",


    __builtin_constant_p
# 9858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~(255 << 8)))
    ? (int)
# 9858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~(255 << 8)))
    : -1 },
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((TARGET_NOT_UNPAIRABLE\n	&& (!MEM_P (operands[0])\n	    || !memory_displacement_operand (operands[0], QImode)))\n       || (TARGET_NOT_VECTORMODE\n	   && long_memory_operand (operands[0], QImode)))\n   && peep2_regno_dead_p (0, FLAGS_REG)",






    __builtin_constant_p
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((ix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]
 && (!(((enum rtx_code) (operands[0])->code) == MEM)
     || !memory_displacement_operand (operands[0], E_QImode)))
       || (ix86_tune_features[X86_TUNE_NOT_VECTORMODE]
    && long_memory_operand (operands[0], E_QImode)))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((ix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]
 && (!(((enum rtx_code) (operands[0])->code) == MEM)
     || !memory_displacement_operand (operands[0], E_QImode)))
       || (ix86_tune_features[X86_TUNE_NOT_VECTORMODE]
    && long_memory_operand (operands[0], E_QImode)))
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ && 1",
    __builtin_constant_p
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1)
    ? (int)
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1)
    : -1 },
# 20669 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && reload_completed\n   && !reg_overlap_mentioned_p (operands[1], operands[2])",


    __builtin_constant_p
# 20669 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && reload_completed
   && !reg_overlap_mentioned_p (operands[1], operands[2]))
    ? (int)
# 20669 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && reload_completed
   && !reg_overlap_mentioned_p (operands[1], operands[2]))
    : -1 },
# 20862 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_FXSR",
    __builtin_constant_p
# 20862 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 32)) != 0))
    ? (int)
# 20862 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 32)) != 0))
    : -1 },
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (!false\n       || HImode == SImode\n       || HImode == DImode)",



    __builtin_constant_p
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_HImode == E_SImode
       || E_HImode == E_DImode))
    ? (int)
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_HImode == E_SImode
       || E_HImode == E_DImode))
    : -1 },
# 18957 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "peep2_reg_dead_p (2, operands[0])",
    __builtin_constant_p
# 18957 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (2, operands[0]))
    ? (int)
# 18957 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (2, operands[0]))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SFmode)\n       == GET_MODE_NUNITS (V16SFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V16SFmode).coeffs[0])))
    : -1 },
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, HImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])",


    __builtin_constant_p
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    ? (int)
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    : -1 },
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V8DFmode, operands)\n   && 1",


    __builtin_constant_p
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && 1)
    ? (int)
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && 1)
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && (!true\n       || SImode == SImode\n       || SImode == DImode))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_SImode == E_SImode
       || E_SImode == E_DImode)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_SImode == E_SImode
       || E_SImode == E_DImode)))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DFmode)\n       == GET_MODE_NUNITS (V8DImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DFmode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    : -1 },
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATE, HImode, operands)",
    __builtin_constant_p
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_HImode, operands))
    ? (int)
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_HImode, operands))
    : -1 },
# 21510 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_TSXLDTRK",
    __builtin_constant_p
# 21510 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 17)) != 0))
    ? (int)
# 21510 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 17)) != 0))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (HImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (MINUS, HImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7354 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && TARGET_AVX512VL\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11779 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11779 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (64 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, DImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5983 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 5162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed && ix86_avoid_lea_for_addr (insn, operands)",
    __builtin_constant_p
# 5162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_addr (insn, operands))
    ? (int)
# 5162 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_avoid_lea_for_addr (insn, operands))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (QImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && (V16SFmode == V4SFmode || TARGET_AVX2)) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 5291 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (E_V16SFmode == E_V4SFmode || ((ix86_isa_flags & (1UL << 9)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 5291 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (E_V16SFmode == E_V4SFmode || ((ix86_isa_flags & (1UL << 9)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 18694 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_2\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 18694 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)
   && ix86_pre_reload_split ())
    ? (int)
# 18694 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 53)) != 0)
   && ix86_pre_reload_split ())
    : -1 },
# 21422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW",
    __builtin_constant_p
# 21422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))
    ? (int)
# 21422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, DImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6653 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (PLUS, V1DImode, operands)) && (TARGET_SSE2)",

    __builtin_constant_p (
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V1DImode, operands)) &&
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V1DImode, operands)) &&
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V4DImode)\n       == GET_MODE_NUNITS (V4DFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512BW\n   && (8\n       > GET_MODE_SIZE (QImode))) && (((TARGET_AVX512BW) && (TARGET_AVX512VL && TARGET_AVX512BW)) && (TARGET_AVX512VL && TARGET_AVX512BW))",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (8
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) && ((
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 2875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && GET_RTX_CLASS (GET_CODE (operands[3])) == RTX_COMM_COMPARE",

    __builtin_constant_p
# 2875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_COMPARE)
    ? (int)
# 2875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_COMPARE)
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (V8DFmode == V16SFmode\n									      || V8DFmode == V8DFmode\n									      || V8DFmode == V8DImode\n									      || V8DFmode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8DFmode == E_V16SFmode
               || E_V8DFmode == E_V8DFmode
               || E_V8DFmode == E_V8DImode
               || E_V8DFmode == E_V16SImode)))
    : -1 },
  { "(((INTVAL (operands[3]) & (8 * BITS_PER_UNIT)) == 0\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (8 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11299 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (8 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11299 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 11655 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && (optimize_function_for_size_p (cfun)\n       || !TARGET_PARTIAL_FLAG_REG_STALL\n       || (operands[2] == const1_rtx\n	   && TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)",






    __builtin_constant_p
# 11655 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (optimize_function_for_size_p ((cfun + 0))
       || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
       || (operands[2] == (const_int_rtx[64 +1])
    && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    ? (int)
# 11655 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (optimize_function_for_size_p ((cfun + 0))
       || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
       || (operands[2] == (const_int_rtx[64 +1])
    && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    : -1 },
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n   && (TARGET_SSE4_1 || !flag_trapping_math)",

    __builtin_constant_p
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math))
    ? (int)
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math))
    : -1 },
  { "(TARGET_XOP) && (TARGET_SSE2)",
    __builtin_constant_p (
# 19858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 19858 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && (register_operand (operands[0], V64SFmode)\n       || register_operand (operands[1], V64SFmode))) && (TARGET_AVX5124FMAPS)",


    __builtin_constant_p (
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SFmode)
       || register_operand (operands[1], E_V64SFmode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0)))
    ? (int) (
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SFmode)
       || register_operand (operands[1], E_V64SFmode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 0)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && (register_operand (operands[0], V64SImode)\n       || register_operand (operands[1], V64SImode))) && (TARGET_AVX5124VNNIW)",


    __builtin_constant_p (
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SImode)
       || register_operand (operands[1], E_V64SImode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0)))
    ? (int) (
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SImode)
       || register_operand (operands[1], E_V64SImode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 14469 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_BMI2 && INTVAL (operands[3]) == 4 * BITS_PER_UNIT",
    __builtin_constant_p
# 14469 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[3])->u.hwint[0]) == 4 * (8))
    ? (int)
# 14469 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && ((operands[3])->u.hwint[0]) == 4 * (8))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512F))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_SSE4_1\n   && reload_completed) && (TARGET_64BIT)",

    __builtin_constant_p (
# 2234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 2234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && reload_completed) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512VBMI2) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 22284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 22284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)) &&
# 3993 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F\n   && (INTVAL (operands[3])\n       == (GET_MODE_UNIT_SIZE (V8DFmode) == 4 ? 0xFFF0 : 0xFC))) && (TARGET_AVX512DQ)",


    __builtin_constant_p (
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V8DFmode) == 4 ? 0xFFF0 : 0xFC))) &&
# 8335 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    ? (int) (
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V8DFmode) == 4 ? 0xFFF0 : 0xFC))) &&
# 8335 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)))
    : -1 },
# 3203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_64BIT || TARGET_SSE)\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && (lra_in_progress || reload_completed\n       || !CONST_DOUBLE_P (operands[1])\n       || ((optimize_function_for_size_p (cfun)\n	    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n	   && standard_sse_constant_p (operands[1], TFmode) == 1\n	   && !memory_operand (operands[0], TFmode))\n       || (!TARGET_MEMORY_MISMATCH_STALL\n	   && memory_operand (operands[0], TFmode)))",
# 3213 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 3203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && standard_sse_constant_p (operands[1], E_TFmode) == 1
    && !memory_operand (operands[0], E_TFmode))
       || (!ix86_tune_features[X86_TUNE_MEMORY_MISMATCH_STALL]
    && memory_operand (operands[0], E_TFmode))))
    ? (int)
# 3203 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && standard_sse_constant_p (operands[1], E_TFmode) == 1
    && !memory_operand (operands[0], E_TFmode))
       || (!ix86_tune_features[X86_TUNE_MEMORY_MISMATCH_STALL]
    && memory_operand (operands[0], E_TFmode))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (AND, QImode, operands)",

    __builtin_constant_p
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_QImode, operands))
    ? (int)
# 9341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_QImode, operands))
    : -1 },
  { "(!(TARGET_READ_MODIFY || optimize_insn_for_size_p ())) && (TARGET_64BIT)",
    __builtin_constant_p (
# 19566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY] || optimize_insn_for_size_p ())) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19566 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY] || optimize_insn_for_size_p ())) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 2250 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && TARGET_64BIT && TARGET_SSE4_1",

    __builtin_constant_p
# 2250 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0))
    ? (int)
# 2250 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 38)) != 0))
    : -1 },
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && !(SSE_FLOAT_MODE_P (SFmode) && (!TARGET_FISTTP || TARGET_SSE_MATH))",

    __builtin_constant_p
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))))
    ? (int)
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))))
    : -1 },
  { "((INTVAL (operands[3]) & (8 * BITS_PER_UNIT)) == 0\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",

    __builtin_constant_p (
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (8 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (8 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_64BIT && TARGET_SSE) && (TARGET_AVX)) && ( reload_completed)",
    __builtin_constant_p ((
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))) &&
# 16091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))) &&
# 16091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V4SImode)\n       == GET_MODE_NUNITS (V8HImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    : -1 },
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && 1 && 1",

    __builtin_constant_p
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && 1 && 1)
    ? (int)
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && 1 && 1)
    : -1 },
# 5594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (PLUS, SImode, operands)",

    __builtin_constant_p
# 5594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    ? (int)
# 5594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_SImode, operands))
    : -1 },
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (PLUS, SImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_CMOVE) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 11351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 13791 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "epilogue_completed",
    __builtin_constant_p
# 13791 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(epilogue_completed)
    ? (int)
# 13791 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(epilogue_completed)
    : -1 },
# 14884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_MOVBE\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 14884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 14884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
  { "(TARGET_SHSTK || (flag_cf_protection & CF_RETURN)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 21229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0) || (flag_cf_protection & CF_RETURN)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 21229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 49)) != 0) || (flag_cf_protection & CF_RETURN)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V2DImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V2DImode, operands))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SImode)\n       == GET_MODE_NUNITS (V64QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512ER) && (TARGET_SSE2)",
    __builtin_constant_p (
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 19049 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 2133 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_MMX && !TARGET_SSE",
    __builtin_constant_p
# 2133 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) && !((ix86_isa_flags & (1UL << 50)) != 0))
    ? (int)
# 2133 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) && !((ix86_isa_flags & (1UL << 50)) != 0))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (US_MINUS, V4HImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_MINUS, E_V4HImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_MINUS, E_V4HImode, operands))
    : -1 },
  { "(ix86_unary_operator_ok (MINUS, SImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ()) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_BMI2 && reload_completed\n  && REGNO (operands[1]) == DX_REG) && (!TARGET_64BIT)",

    __builtin_constant_p (
# 7845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed
  && (rhs_regno(operands[1])) == 1) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed
  && (rhs_regno(operands[1])) == 1) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 16508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_FANCY_MATH_387\n   && flag_finite_math_only\n   && flag_unsafe_math_optimizations",


    __builtin_constant_p
# 16508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_finite_math_only
   && flag_unsafe_math_optimizations)
    ? (int)
# 16508 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 10)) == 0)
   && flag_finite_math_only
   && flag_unsafe_math_optimizations)
    : -1 },
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(!TARGET_64BIT\n    && TARGET_80387 && X87_ENABLE_FLOAT (XFmode, DImode)\n    && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC)\n   || ((!TARGET_64BIT || TARGET_AVX512F)\n       && SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)",




    __builtin_constant_p
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0)
    && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
    && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   || ((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
       && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 5094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((!((ix86_isa_flags & (1UL << 1)) != 0)
    && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
    && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
   || ((!((ix86_isa_flags & (1UL << 1)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0))
       && ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 9650 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_USE_BT\n   && ix86_binary_operator_ok (IOR, DImode, operands)\n   && IN_RANGE (exact_log2 (INTVAL (operands[2])), 31, 63)",


    __builtin_constant_p
# 9650 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31)))
    ? (int)
# 9650 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (IOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4DImode == V16SFmode\n							      || V4DImode == V8DFmode\n							      || V4DImode == V8DImode\n							      || V4DImode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DImode == E_V16SFmode
             || E_V4DImode == E_V8DFmode
             || E_V4DImode == E_V8DImode
             || E_V4DImode == E_V16SImode)) &&
# 378 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4DImode == E_V16SFmode
             || E_V4DImode == E_V8DFmode
             || E_V4DImode == E_V8DImode
             || E_V4DImode == E_V16SImode)) &&
# 378 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512DQ && (V8DImode == V16SFmode\n							      || V8DImode == V8DFmode\n							      || V8DImode == V8DImode\n							      || V8DImode == V16SImode)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DImode == E_V16SFmode
             || E_V8DImode == E_V8DFmode
             || E_V8DImode == E_V8DImode
             || E_V8DImode == E_V16SImode))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5379 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DImode == E_V16SFmode
             || E_V8DImode == E_V8DFmode
             || E_V8DImode == E_V8DImode
             || E_V8DImode == E_V16SImode))))
    : -1 },
# 18448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && TARGET_CMOVE && !(MEM_P (operands[2]) && MEM_P (operands[3]))",

    __builtin_constant_p
# 18448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    ? (int)
# 18448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !((((enum rtx_code) (operands[2])->code) == MEM) && (((enum rtx_code) (operands[3])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE) && (TARGET_64BIT)",
    __builtin_constant_p (
# 5227 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5227 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 10914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFT, QImode, operands)",
    __builtin_constant_p
# 10914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_QImode, operands))
    ? (int)
# 10914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V16SFmode, operands)\n   && 1 && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V8DFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, SImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V4DFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_MINUS, V32HImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_MINUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n   && (TARGET_SSE4_1 || !flag_trapping_math)",

    __builtin_constant_p
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math))
    ? (int)
# 17473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && (((ix86_isa_flags & (1UL << 38)) != 0) || !flag_trapping_math))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, DImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[6])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6148 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[6])->u.hwint[0])) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 2558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE3\n   && INTVAL (operands[2]) != INTVAL (operands[3])",

    __builtin_constant_p
# 2558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && ((operands[2])->u.hwint[0]) != ((operands[3])->u.hwint[0]))
    ? (int)
# 2558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && ((operands[2])->u.hwint[0]) != ((operands[3])->u.hwint[0]))
    : -1 },
  { "(TARGET_SSE && 1 && 1) && (TARGET_AVX)",
    __builtin_constant_p (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW && ix86_binary_operator_ok (EQ, V2SFmode, operands)",
    __builtin_constant_p
# 687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0) && ix86_binary_operator_ok (EQ, E_V2SFmode, operands))
    ? (int)
# 687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0) && ix86_binary_operator_ok (EQ, E_V2SFmode, operands))
    : -1 },
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (PLUS, V8QImode, operands)",

    __builtin_constant_p
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V8QImode, operands))
    ? (int)
# 1159 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (PLUS, E_V8QImode, operands))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (US_PLUS, V8QImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_PLUS, E_V8QImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_PLUS, E_V8QImode, operands))
    : -1 },
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (PLUS, QImode, operands)",

    __builtin_constant_p
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_QImode, operands))
    ? (int)
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_QImode, operands))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V16SImode, operands)) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SImode, operands)) &&
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V16SFmode, operands)\n   && 1",


    __builtin_constant_p
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && 1)
    ? (int)
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && 1)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || QImode == SImode\n       || QImode == DImode)) && (TARGET_AVX512BW)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_QImode == E_SImode
       || E_QImode == E_DImode)) &&
# 342 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 2516 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE3\n   && INTVAL (operands[3]) != INTVAL (operands[4])\n   && INTVAL (operands[5]) != INTVAL (operands[6])",


    __builtin_constant_p
# 2516 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && ((operands[3])->u.hwint[0]) != ((operands[4])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) != ((operands[6])->u.hwint[0]))
    ? (int)
# 2516 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && ((operands[3])->u.hwint[0]) != ((operands[4])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) != ((operands[6])->u.hwint[0]))
    : -1 },
  { "(ix86_binary_operator_ok (ROTATE, SImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()) && ( 1)",



    __builtin_constant_p (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_SImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 20492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && 1\n   && (INTVAL (operands[2]) == (INTVAL (operands[6]) - 4)\n       && INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n       && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n       && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4))",




    __builtin_constant_p
# 20492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1
   && (((operands[2])->u.hwint[0]) == (((operands[6])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)))
    ? (int)
# 20492 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1
   && (((operands[2])->u.hwint[0]) == (((operands[6])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)))
    : -1 },
# 15961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387 && X87_ENABLE_ARITH (DFmode))\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 15961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 15961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F && 1 && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && 1) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && 1) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_MINUS, V64QImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_MINUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 7646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])",


    __builtin_constant_p
# 7646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    ? (int)
# 7646 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    : -1 },
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && !flag_trapping_math && !flag_rounding_math)",






    __builtin_constant_p
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 13094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_MACHO\n  && !TARGET_64BIT\n  && !TARGET_INDIRECT_BRANCH_REGISTER\n  && SIBLING_CALL_P (insn)",



    __builtin_constant_p
# 13094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!0
  && !((ix86_isa_flags & (1UL << 1)) != 0)
  && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
  && (((insn))->jump))
    ? (int)
# 13094 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!0
  && !((ix86_isa_flags & (1UL << 1)) != 0)
  && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
  && (((insn))->jump))
    : -1 },
  { "((TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && (((((((((((word_mode == DImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode))",


    __builtin_constant_p (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V8SFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(ix86_binary_operator_ok (ASHIFTRT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFTRT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE && reload_completed) && ((((TARGET_64BIT) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",
    __builtin_constant_p (
# 1777 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) && (((
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 1777 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) && (((
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH",
    __builtin_constant_p
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    ? (int)
# 17239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    : -1 },
  { "((INTVAL (operands[3]) & (4 * BITS_PER_UNIT)) == 0\n   && ix86_pre_reload_split ()) && (!TARGET_64BIT)",

    __builtin_constant_p (
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (4 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (4 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && ix86_binary_operator_ok (PLUS, V4SFmode, operands)\n   && 1 && 1",

    __builtin_constant_p
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && 1 && 1)
    ? (int)
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && 1 && 1)
    : -1 },
  { "(TARGET_SSE2 && 1 && 1) && (TARGET_AVX)",
    __builtin_constant_p (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 3647 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n   && (GET_MODE (operands[0]) == TFmode\n       || GET_MODE (operands[0]) == XFmode\n       || GET_MODE (operands[0]) == DFmode)\n   && ix86_standard_x87sse_constant_load_p (insn, operands[0])",




    __builtin_constant_p
# 3647 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (((machine_mode) (operands[0])->mode) == E_TFmode
       || ((machine_mode) (operands[0])->mode) == E_XFmode
       || ((machine_mode) (operands[0])->mode) == E_DFmode)
   && ix86_standard_x87sse_constant_load_p (insn, operands[0]))
    ? (int)
# 3647 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (((machine_mode) (operands[0])->mode) == E_TFmode
       || ((machine_mode) (operands[0])->mode) == E_XFmode
       || ((machine_mode) (operands[0])->mode) == E_DFmode)
   && ix86_standard_x87sse_constant_load_p (insn, operands[0]))
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (MINUS, V4DImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && ( reload_completed)",
    __builtin_constant_p (
# 22512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 22514 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 22512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 22514 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(ix86_target_stack_probe ()) && (Pmode == SImode)",
    __builtin_constant_p (
# 19031 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_target_stack_probe ()) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 19031 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_target_stack_probe ()) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F)))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V8SFmode)\n       == GET_MODE_NUNITS (V8SFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SFmode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    : -1 },
# 20089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_MOVE_M1_VIA_OR || optimize_insn_for_size_p ())\n   && peep2_regno_dead_p (0, FLAGS_REG)",

    __builtin_constant_p
# 20089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_MOVE_M1_VIA_OR] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_MOVE_M1_VIA_OR] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_USE_8BIT_IDIV\n   && TARGET_QIMODE_MATH\n   && can_create_pseudo_p ()\n   && !optimize_insn_for_size_p ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 8061 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 2)) != 0)
   && ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && (!reload_in_progress && !reload_completed)
   && !optimize_insn_for_size_p ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 8061 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 2)) != 0)
   && ix86_tune_features[X86_TUNE_QIMODE_MATH]
   && (!reload_in_progress && !reload_completed)
   && !optimize_insn_for_size_p ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "Pmode == SImode",
    __builtin_constant_p
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)
    ? (int)
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V4DFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 21461 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_RDPID",
    __builtin_constant_p
# 21461 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 14)) != 0))
    ? (int)
# 21461 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 14)) != 0))
    : -1 },
  { "((TARGET_64BIT) && (Pmode == DImode)) && ( 1)",
    __builtin_constant_p ((
# 3023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 3025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 3023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 3025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && TARGET_AVX512VL) && (TARGET_AVX))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3449 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512ER))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19035 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 19035 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 14)) != 0))))
    : -1 },
# 18484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CMOVE && !TARGET_PARTIAL_REG_STALL",
    __builtin_constant_p
# 18484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    ? (int)
# 18484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "(TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && ( reload_completed)",
    __builtin_constant_p (
# 8267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 8269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 8267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 8269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 15020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "! TARGET_POPCNT",
    __builtin_constant_p
# 15020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ((ix86_isa_flags & (1UL << 41)) != 0))
    ? (int)
# 15020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ((ix86_isa_flags & (1UL << 41)) != 0))
    : -1 },
  { "(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)) && ( reload_completed)",
    __builtin_constant_p (
# 6276 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0))) &&
# 6278 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 6276 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0))) &&
# 6278 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (V4SFmode == V8SFmode)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V8SFmode)) &&
# 293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 6164 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V4SFmode == E_V8SFmode)) &&
# 293 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (US_PLUS, V4HImode, operands)",

    __builtin_constant_p
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_PLUS, E_V4HImode, operands))
    ? (int)
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (US_PLUS, E_V4HImode, operands))
    : -1 },
# 10212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "!TARGET_SSE2 && TARGET_SSE\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 10212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(!((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 10212 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(!((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 8485 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && reload_completed\n   && (TARGET_AVX512VL\n       || REG_P (operands[0])\n       || !EXT_REX_SSE_REG_P (operands[1]))",




    __builtin_constant_p
# 8485 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    ? (int)
# 8485 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && reload_completed
   && (((ix86_isa_flags & (1UL << 20)) != 0)
       || (((enum rtx_code) (operands[0])->code) == REG)
       || !((((enum rtx_code) (operands[1])->code) == REG) && ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52)))))
    : -1 },
  { "(optimize_insn_for_speed_p ()\n   && (!TARGET_PARTIAL_REG_STALL || DImode == SImode)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 20358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || E_DImode == E_SImode)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 20358 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || E_DImode == E_SImode)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V16HImode)\n       == GET_MODE_NUNITS (V8SImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V16HImode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_PLUS, V64QImode, operands)) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V64QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
# 7619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE3 && 1",
    __builtin_constant_p
# 7619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && 1)
    ? (int)
# 7619 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0) && 1)
    : -1 },
  { "(TARGET_AVX && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && ( reload_completed)",
    __builtin_constant_p (
# 21446 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 21448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 21446 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 21448 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_PLUS, V32QImode, operands)) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 17548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2 && 1 && 1",
    __builtin_constant_p
# 17548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1 && 1)
    ? (int)
# 17548 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1 && 1)
    : -1 },
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_FLOAT (SFmode, SImode))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && ((SImode != DImode) || TARGET_64BIT))",


    __builtin_constant_p
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    ? (int)
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_SImode) == E_SImode) || (E_SImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    : -1 },
# 4811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && !TARGET_FISTTP\n   && !(TARGET_64BIT && SSE_FLOAT_MODE_P (GET_MODE (operands[1])))",


    __builtin_constant_p
# 4811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((ix86_isa_flags & (1UL << 1)) != 0) && ((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))))
    ? (int)
# 4811 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && !(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !(((ix86_isa_flags & (1UL << 1)) != 0) && ((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (IOR, V4HImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (IOR, E_V4HImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (IOR, E_V4HImode, operands))
    : -1 },
  { "(TARGET_SLOW_IMUL_IMM32_MEM && optimize_insn_for_speed_p ()\n   && !satisfies_constraint_K (operands[2])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 20374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM] && optimize_insn_for_speed_p ()
   && !satisfies_constraint_K (operands[2])) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 20374 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM] && optimize_insn_for_speed_p ()
   && !satisfies_constraint_K (operands[2])) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 10210 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n   && reload_completed",

    __builtin_constant_p
# 10210 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && reload_completed)
    ? (int)
# 10210 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (MINUS, V4DFmode, operands)\n   && 1 && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && 1 && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 18822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CMOVE",
    __builtin_constant_p
# 18822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
    ? (int)
# 18822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
    : -1 },
# 11525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (LSHIFTRT, SImode, operands)",
    __builtin_constant_p
# 11525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    ? (int)
# 11525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (LSHIFTRT, E_SImode, operands))
    : -1 },
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (XFmode, DImode)\n   && TARGET_SSE2 && TARGET_INTER_UNIT_MOVES_TO_VEC",


    __builtin_constant_p
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    ? (int)
# 5077 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_XFmode) == E_XFmode || ((E_XFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC])
    : -1 },
# 5291 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && (V4SFmode == V4SFmode || TARGET_AVX2)",
    __builtin_constant_p
# 5291 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (E_V4SFmode == E_V4SFmode || ((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int)
# 5291 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (E_V4SFmode == E_V4SFmode || ((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "X87_FLOAT_MODE_P (GET_MODE (operands[1]))\n   && TARGET_FISTTP\n   && !((SSE_FLOAT_MODE_P (GET_MODE (operands[1]))\n	 && (TARGET_64BIT || HImode != DImode))\n	&& TARGET_SSE_MATH)",




    __builtin_constant_p
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && (((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_HImode != E_DImode))
 && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 4765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && ((((machine_mode) (operands[1])->mode)) == E_SFmode || (((machine_mode) (operands[1])->mode)) == E_DFmode || (((machine_mode) (operands[1])->mode)) == E_XFmode))
   && (((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0))
   && !((((((ix86_isa_flags & (1UL << 50)) != 0) && (((machine_mode) (operands[1])->mode)) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (((machine_mode) (operands[1])->mode)) == E_DFmode))
  && (((ix86_isa_flags & (1UL << 1)) != 0) || E_HImode != E_DImode))
 && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX)))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
  { "(TARGET_AVX512VL) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 10638 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 10624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 10638 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 10624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1903 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE && 1 && 1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(optimize_insn_for_size_p ()\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == DImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode))",

    __builtin_constant_p (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
# 13372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 13372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 13372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 8320 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed",
    __builtin_constant_p
# 8320 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed)
    ? (int)
# 8320 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed)
    : -1 },
  { "(TARGET_AVX512F && TARGET_64BIT) && (TARGET_SSE2)",
    __builtin_constant_p (
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && (GET_MODE_NUNITS (V4SImode)\n       == GET_MODE_NUNITS (V2DFmode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCmode)\n   && ix86_binary_operator_ok (MINUS, HImode, operands)",

    __builtin_constant_p
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands))
    ? (int)
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_HImode, operands))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V8DImode)\n       == GET_MODE_NUNITS (V64QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V8DImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 16733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSSE3",
    __builtin_constant_p
# 16733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0))
    ? (int)
# 16733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0))
    : -1 },
  { "(ix86_unary_operator_ok (MINUS, QImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSE3) && (Pmode == DImode)",
    __builtin_constant_p (
# 16295 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 16295 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && 1) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 20126 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && !TARGET_OPT_AGU\n   && REGNO (operands[0]) == REGNO (operands[1])\n   && peep2_regno_dead_p (0, FLAGS_REG)",


    __builtin_constant_p
# 20126 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_OPT_AGU]
   && (rhs_regno(operands[0])) == (rhs_regno(operands[1]))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20126 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && !ix86_tune_features[X86_TUNE_OPT_AGU]
   && (rhs_regno(operands[0])) == (rhs_regno(operands[1]))
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(TARGET_SSE && reload_completed) && (Pmode == DImode)",
    __builtin_constant_p (
# 3009 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 3009 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n							      || V8SFmode == V8DFmode\n							      || V8SFmode == V8DImode\n							      || V8SFmode == V16SImode)) && (TARGET_AVX)))",





    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
             || E_V8SFmode == E_V8DFmode
             || E_V8SFmode == E_V8DImode
             || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
  { "(ix86_unary_operator_ok (PLUS, QImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)",





    __builtin_constant_p
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_HImode, operands))
    ? (int)
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (LSHIFTRT, E_HImode, operands))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n       && DImode != HImode \n       && ((DImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_DImode != E_HImode
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_DImode != E_HImode
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
  { "(SIBLING_CALL_P (insn)) && (word_mode == DImode)",
    __builtin_constant_p (
# 13315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 13315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_USE_BT\n   && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (SImode)-1))\n      == GET_MODE_BITSIZE (SImode)-1\n   && ix86_pre_reload_split ()",



    __builtin_constant_p
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    ? (int)
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && ix86_pre_reload_split ())
    : -1 },
# 10740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFT, SImode, operands)",
    __builtin_constant_p
# 10740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    ? (int)
# 10740 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_SImode, operands))
    : -1 },
# 2400 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",


    __builtin_constant_p
# 2400 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 2)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 2400 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 2)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 18884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_CMOVE\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 18884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ())
    ? (int)
# 18884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && (((((TARGET_AVX512VL) && (Pmode == SImode)) && (Pmode == SImode)) && (TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 22139 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 22139 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (5, operands[4])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[4], operands[1])\n   && (SImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (4),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19873 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
  { "(TARGET_AVX512BW\n   && (4\n       > GET_MODE_SIZE (HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (4
       > ((unsigned short) mode_to_bytes (E_HImode).coeffs[0]))) &&
# 13481 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NEG, SImode, operands)",
    __builtin_constant_p
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_SImode, operands))
    ? (int)
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_SImode, operands))
    : -1 },
# 19267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "! TARGET_PARTIAL_REG_STALL && reload_completed\n   && ((GET_MODE (operands[0]) == HImode\n	&& ((optimize_function_for_speed_p (cfun) && !TARGET_FAST_PREFIX)\n            /* ??? next two lines just !satisfies_constraint_K (...) */\n	    || !CONST_INT_P (operands[2])\n	    || satisfies_constraint_K (operands[2])))\n       || (GET_MODE (operands[0]) == QImode\n	   && (TARGET_PROMOTE_QImode || optimize_function_for_size_p (cfun))))",







    __builtin_constant_p
# 19267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && ((((machine_mode) (operands[0])->mode) == E_HImode
 && ((optimize_function_for_speed_p ((cfun + 0)) && !ix86_tune_features[X86_TUNE_FAST_PREFIX])

     || !(((enum rtx_code) (operands[2])->code) == CONST_INT)
     || satisfies_constraint_K (operands[2])))
       || (((machine_mode) (operands[0])->mode) == E_QImode
    && (ix86_tune_features[X86_TUNE_PROMOTE_QIMODE] || optimize_function_for_size_p ((cfun + 0))))))
    ? (int)
# 19267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(! ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] && reload_completed
   && ((((machine_mode) (operands[0])->mode) == E_HImode
 && ((optimize_function_for_speed_p ((cfun + 0)) && !ix86_tune_features[X86_TUNE_FAST_PREFIX])

     || !(((enum rtx_code) (operands[2])->code) == CONST_INT)
     || satisfies_constraint_K (operands[2])))
       || (((machine_mode) (operands[0])->mode) == E_QImode
    && (ix86_tune_features[X86_TUNE_PROMOTE_QIMODE] || optimize_function_for_size_p ((cfun + 0))))))
    : -1 },
# 18497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1 && !flag_trapping_math",
    __builtin_constant_p
# 18497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math)
    ? (int)
# 18497 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !flag_trapping_math)
    : -1 },
  { "(pow2p_hwi (INTVAL (operands[1]))\n   && peep2_regno_dead_p (0, FLAGS_REG)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 20149 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(pow2p_hwi (((operands[1])->u.hwint[0]))
   && peep2_regno_dead_p (0, 17)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 20149 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(pow2p_hwi (((operands[1])->u.hwint[0]))
   && peep2_regno_dead_p (0, 17)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[AX_REG] || fixed_regs[CX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",


    __builtin_constant_p (
# 17972 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 17972 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[2] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 4603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || SSE_FLOAT_MODE_P (DFmode)",
    __builtin_constant_p
# 4603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)))
    ? (int)
# 4603 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || ((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V2DFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V2DFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(ix86_target_stack_probe ()) && (Pmode == DImode)",
    __builtin_constant_p (
# 19031 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_target_stack_probe ()) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 19031 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_target_stack_probe ()) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_SSSE3 || TARGET_AVX || TARGET_XOP) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13040 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 13048 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) || ((ix86_isa_flags & (1UL << 8)) != 0) || ((ix86_isa_flags & (1UL << 59)) != 0)) &&
# 13040 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW && 1) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11914 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11765 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, QImode, operands)\n   && ix86_pre_reload_split ()",

    __builtin_constant_p
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "((TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && ((((((((word_mode == DImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == DImode)) && (Pmode == SImode)) && (Pmode == SImode))",


    __builtin_constant_p (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_SSE2)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
# 13560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_SEH && !ix86_static_chain_on_stack",
    __builtin_constant_p
# 13560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!0 && !((cfun + 0)->machine->static_chain_on_stack))
    ? (int)
# 13560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!0 && !((cfun + 0)->machine->static_chain_on_stack))
    : -1 },
  { "(!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)) && ( reload_completed)",


    __builtin_constant_p (
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))) &&
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0))) &&
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_VPCLMULQDQ) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 23387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 57)) != 0)) &&
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 23387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 57)) != 0)) &&
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(ix86_unary_operator_ok (PLUS, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6770 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (PLUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 20018 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && (REGNO (operands[5]) == REGNO (operands[0])\n       || REGNO (operands[5]) == REGNO (operands[3]))\n   && REGNO (operands[5]) == REGNO (operands[4])\n   && (rtx_equal_p (operands[REGNO (operands[5]) == REGNO (operands[0])\n			     ? 3 : 0], operands[6])\n       ? (REG_P (operands[2])\n	  ? REG_P (operands[7]) && REGNO (operands[2]) == REGNO (operands[7])\n	  : rtx_equal_p (operands[2], operands[7]))\n       : (rtx_equal_p (operands[REGNO (operands[5]) == REGNO (operands[0])\n				? 3 : 0], operands[7])\n	  && REG_P (operands[2])\n	  && REGNO (operands[2]) == REGNO (operands[6])))\n   && peep2_reg_dead_p (4, operands[5])\n   && peep2_reg_dead_p (5, operands[REGNO (operands[5]) == REGNO (operands[0])\n				    ? 3 : 0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[3], operands[0])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[2])\n   && (HImode != QImode\n       || immediate_operand (operands[2], SImode)\n       || any_QIreg_operand (operands[2], SImode))",
# 20042 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 20018 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[5])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[5])) == (rhs_regno(operands[3])))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[4]))
   && (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[6])
       ? ((((enum rtx_code) (operands[2])->code) == REG)
   ? (((enum rtx_code) (operands[7])->code) == REG) && (rhs_regno(operands[2])) == (rhs_regno(operands[7]))
   : rtx_equal_p (operands[2], operands[7]))
       : (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
    ? 3 : 0], operands[7])
   && (((enum rtx_code) (operands[2])->code) == REG)
   && (rhs_regno(operands[2])) == (rhs_regno(operands[6]))))
   && peep2_reg_dead_p (4, operands[5])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode)))
    ? (int)
# 20018 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[5])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[5])) == (rhs_regno(operands[3])))
   && (rhs_regno(operands[5])) == (rhs_regno(operands[4]))
   && (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[6])
       ? ((((enum rtx_code) (operands[2])->code) == REG)
   ? (((enum rtx_code) (operands[7])->code) == REG) && (rhs_regno(operands[2])) == (rhs_regno(operands[7]))
   : rtx_equal_p (operands[2], operands[7]))
       : (rtx_equal_p (operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
    ? 3 : 0], operands[7])
   && (((enum rtx_code) (operands[2])->code) == REG)
   && (rhs_regno(operands[2])) == (rhs_regno(operands[6]))))
   && peep2_reg_dead_p (4, operands[5])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[5])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_HImode != E_QImode
       || immediate_operand (operands[2], E_SImode)
       || any_QIreg_operand (operands[2], E_SImode)))
    : -1 },
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ptr_mode == SImode",
    __builtin_constant_p
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode)
    ? (int)
# 1240 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ptr_mode == E_SImode)
    : -1 },
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "CONST_INT_P (operands[2])\n   && (HImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, HImode, operands)\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_HImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_HImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V4SFmode)\n       == GET_MODE_NUNITS (V4SImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SImode)\n       == GET_MODE_NUNITS (V32HImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SImode).coeffs[0])
       == (mode_to_nunits (E_V32HImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(CONST_INT_P (operands[2])\n   && (QImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, QImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",




    __builtin_constant_p (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ()) &&
# 7230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (SS_MINUS, V8HImode, operands)",

    __builtin_constant_p
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V8HImode, operands))
    ? (int)
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (SS_MINUS, E_V8HImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V4SImode == V16SFmode\n									      || V4SImode == V8DFmode\n									      || V4SImode == V8DImode\n									      || V4SImode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SImode == E_V16SFmode
               || E_V4SImode == E_V8DFmode
               || E_V4SImode == E_V8DImode
               || E_V4SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SImode == E_V16SFmode
               || E_V4SImode == E_V8DFmode
               || E_V4SImode == E_V8DImode
               || E_V4SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(TARGET_AVX512VL && ix86_pre_reload_split ()) && ( 1)",
    __builtin_constant_p (
# 11317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ()) &&
# 11319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 11317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ()) &&
# 11319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1\n   && (16 == 64 || TARGET_AVX512VL)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12668 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12668 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
  { "(TARGET_WAITPKG) && (Pmode == DImode)",
    __builtin_constant_p (
# 21553 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 19)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 21553 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 19)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512F && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NOT, SImode, operands)",
    __builtin_constant_p
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_SImode, operands))
    ? (int)
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX2 && TARGET_AVX512VL\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()) &&
# 18071 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) (
# 18068 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()) &&
# 18071 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
  { "(TARGET_SSE && ix86_binary_operator_ok (PLUS, V8DFmode, operands)\n   && 1 && 1) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DFmode, operands)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 15334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && !TARGET_64BIT\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 15334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((ix86_isa_flags & (1UL << 1)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 15334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((ix86_isa_flags & (1UL << 1)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (XOR, HImode, operands)",

    __builtin_constant_p
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_HImode, operands))
    ? (int)
# 9752 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (XOR, E_HImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && (16 == 64 || TARGET_AVX512VL) && 1)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    : -1 },
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VPOPCNTDQ",
    __builtin_constant_p
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0))
    ? (int)
# 22889 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 22)) != 0))
    : -1 },
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (4, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && (QImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (3),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19662 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (4, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (3),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512BITALG)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22933 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 22933 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)))
    : -1 },
  { "(TARGET_64BIT && TARGET_USE_BT\n   && ix86_binary_operator_ok (XOR, DImode, operands)\n   && IN_RANGE (exact_log2 (INTVAL (operands[2])), 31, 63)) && ( reload_completed)",


    __builtin_constant_p (
# 9672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31))) &&
# 9676 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 9672 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ((unsigned long) (exact_log2 (((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31))) &&
# 9676 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)",





    __builtin_constant_p
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_QImode, operands))
    ? (int)
# 11624 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (ASHIFTRT, E_QImode, operands))
    : -1 },
# 13709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT",
    __builtin_constant_p
# 13709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 13709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
# 12668 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE4_1\n   && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",


    __builtin_constant_p
# 12668 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 12668 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)
   && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (GET_MODE_NUNITS (V4SImode)\n       == GET_MODE_NUNITS (V4SFmode))",


    __builtin_constant_p
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    ? (int)
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V4SImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V4DFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V4DFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 3878 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE_MATH && (TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F)",
    __builtin_constant_p
# 3878 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_fpmath & FPMATH_SSE) != 0) && (((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int)
# 3878 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_fpmath & FPMATH_SSE) != 0) && (((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH\n       && SImode != HImode \n       && ((SImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_SImode != E_HImode
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_SImode != E_HImode
       && ((E_SImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && (!(SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)\n       || TARGET_MIX_SSE_I387)",


    __builtin_constant_p
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
    ? (int)
# 4852 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
       || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
    : -1 },
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (3, operands[0])\n   && peep2_reg_dead_p (5, operands[4])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[4], operands[1])\n   && (QImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))\n   && ix86_match_ccmode (peep2_next_insn (4),\n			 (GET_CODE (operands[3]) == PLUS\n			  || GET_CODE (operands[3]) == MINUS)\n			 ? CCGOCmode : CCNOmode)",
# 19873 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19860 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (3, operands[0])
   && peep2_reg_dead_p (5, operands[4])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[4], operands[1])
   && (E_QImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode))
   && ix86_match_ccmode (peep2_next_insn (4),
    (((enum rtx_code) (operands[3])->code) == PLUS
     || ((enum rtx_code) (operands[3])->code) == MINUS)
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
  { "(TARGET_ENQCMD) && (Pmode == SImode)",
    __builtin_constant_p (
# 21525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 7)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 21525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 7)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_SSE4A) && (TARGET_SSE2)",
    __builtin_constant_p (
# 17141 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 54)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 17141 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 54)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V4SFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && 1) &&
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 6113 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX || (TARGET_AVX512VL && TARGET_AVX512F)",
    __builtin_constant_p
# 6113 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) || (((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int)
# 6113 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) || (((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 18513 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CMOVE && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && optimize_insn_for_speed_p ()",


    __builtin_constant_p
# 18513 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    ? (int)
# 18513 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V16SFmode == V16SFmode\n									      || V16SFmode == V8DFmode\n									      || V16SFmode == V8DImode\n									      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V16SFmode == E_V16SFmode
               || E_V16SFmode == E_V8DFmode
               || E_V16SFmode == E_V8DImode
               || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(!(fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",

    __builtin_constant_p (
# 17734 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 17734 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (16 == 64 || TARGET_AVX512VL)) && (TARGET_SSE2))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20891 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20891 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
# 64 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "TARGET_SSE || TARGET_3DNOW_A",
    __builtin_constant_p
# 64 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
    ? (int)
# 64 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
    : -1 },
  { "((optimize_function_for_size_p (cfun)\n    || !TARGET_PARTIAL_FLAG_REG_STALL\n    || (operands[2] == const1_rtx\n	&& TARGET_SHIFT1))\n   && ix86_match_ccmode (insn, CCGOCmode)) && (TARGET_64BIT)",




    __builtin_constant_p (
# 11687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11687 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((optimize_function_for_size_p ((cfun + 0))
    || !ix86_tune_features[X86_TUNE_PARTIAL_FLAG_REG_STALL]
    || (operands[2] == (const_int_rtx[64 +1])
 && ix86_tune_features[X86_TUNE_SHIFT1]))
   && ix86_match_ccmode (insn, E_CCGOCmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCmode)\n   && ix86_binary_operator_ok (MINUS, SImode, operands)",

    __builtin_constant_p
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    ? (int)
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_SImode, operands))
    : -1 },
# 760 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "(unsigned HOST_WIDE_INT) INTVAL (operands[1])\n   == -(unsigned HOST_WIDE_INT) INTVAL (operands[2])",

    __builtin_constant_p
# 760 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((unsigned long) ((operands[1])->u.hwint[0])
   == -(unsigned long) ((operands[2])->u.hwint[0]))
    ? (int)
# 760 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
((unsigned long) ((operands[1])->u.hwint[0])
   == -(unsigned long) ((operands[2])->u.hwint[0]))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1 && TARGET_AVX512VL\n   && ix86_pre_reload_split ())",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 18219 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ix86_pre_reload_split ()))
    : -1 },
  { "(IN_RANGE (exact_log2 (UINTVAL (operands[3])), 1, 31)) && ( reload_completed)",
    __builtin_constant_p (
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1))) &&
# 8343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1))) &&
# 8343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 19643 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())",
    __builtin_constant_p
# 19643 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ()))
    ? (int)
# 19643 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ()))
    : -1 },
  { "(ix86_binary_operator_ok (ROTATERT, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (XOR, SImode, operands)",
    __builtin_constant_p
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_SImode, operands))
    ? (int)
# 9639 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (XOR, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && ix86_binary_operator_ok (PLUS, V16SFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (MINUS, V8SImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V8SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SFmode)\n       == GET_MODE_NUNITS (V8DImode))",


    __builtin_constant_p
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    ? (int)
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V8DImode).coeffs[0])))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && ix86_binary_operator_ok (US_PLUS, V32HImode, operands)) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && ix86_binary_operator_ok (US_PLUS, E_V32HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(ix86_match_ccmode (insn, CCZmode)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_64BIT)",

    __builtin_constant_p (
# 5635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCZmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5635 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCZmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 11847 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2 && 1",
    __builtin_constant_p
# 11847 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1)
    ? (int)
# 11847 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && 1)
    : -1 },
  { "(!TARGET_64BIT && TARGET_SSE2 && TARGET_SSE_MATH\n   && optimize_function_for_speed_p (cfun)) && ( reload_completed)",

    __builtin_constant_p (
# 4709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && optimize_function_for_speed_p ((cfun + 0))) &&
# 4712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 4709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && optimize_function_for_speed_p ((cfun + 0))) &&
# 4712 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F\n   && (!false\n       || HImode == SImode\n       || HImode == DImode)) && (TARGET_AVX)",



    __builtin_constant_p (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!false
       || E_HImode == E_SImode
       || E_HImode == E_DImode)) &&
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 12877 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && !TARGET_XOP",
    __builtin_constant_p
# 12877 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((ix86_isa_flags & (1UL << 59)) != 0))
    ? (int)
# 12877 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((ix86_isa_flags & (1UL << 59)) != 0))
    : -1 },
# 5529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_MMX_WITH_SSE",
    __builtin_constant_p
# 5529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int)
# 5529 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_SSE3\n   && can_create_pseudo_p ()\n   && ((rtx_equal_p (operands[1], operands[3])\n	&& rtx_equal_p (operands[2], operands[4]))\n       || (rtx_equal_p (operands[1], operands[4])\n	   && rtx_equal_p (operands[2], operands[3])))) && (TARGET_AVX)",





    __builtin_constant_p (
# 2435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && (!reload_in_progress && !reload_completed)
   && ((rtx_equal_p (operands[1], operands[3])
 && rtx_equal_p (operands[2], operands[4]))
       || (rtx_equal_p (operands[1], operands[4])
    && rtx_equal_p (operands[2], operands[3])))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 2435 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 52)) != 0)
   && (!reload_in_progress && !reload_completed)
   && ((rtx_equal_p (operands[1], operands[3])
 && rtx_equal_p (operands[2], operands[4]))
       || (rtx_equal_p (operands[1], operands[4])
    && rtx_equal_p (operands[2], operands[3])))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (GET_MODE_NUNITS (V2DImode)\n       == GET_MODE_NUNITS (V4SFmode))",


    __builtin_constant_p
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    ? (int)
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && 1 && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_64BIT\n   && !(fixed_regs[SI_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",


    __builtin_constant_p (
# 17685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 17685 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && !((this_target_hard_regs->x_fixed_regs)[4] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_SSE2\n   && 1 && 1) && (TARGET_AVX2)",

    __builtin_constant_p (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 21387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_MWAITX",
    __builtin_constant_p
# 21387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 11)) != 0))
    ? (int)
# 21387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 11)) != 0))
    : -1 },
  { "((TARGET_SSE4_1) && (TARGET_AVX)) && ( reload_completed)",
    __builtin_constant_p ((
# 17328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 366 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))) &&
# 17330 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 17328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 366 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))) &&
# 17330 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n   < (HOST_WIDE_INT_1U << INTVAL (operands[2]))) && ( reload_completed)",

    __builtin_constant_p (
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0]))) &&
# 6328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    ? (int) (
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0]))) &&
# 6328 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( reload_completed))
    : -1 },
# 18543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && TARGET_CMOVE && TARGET_AVOID_MEM_OPND_FOR_CMOVE\n   && (MEM_P (operands[2]) || MEM_P (operands[3]))\n   && optimize_insn_for_speed_p ()",



    __builtin_constant_p
# 18543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    ? (int)
# 18543 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && ix86_tune_features[X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE]
   && ((((enum rtx_code) (operands[2])->code) == MEM) || (((enum rtx_code) (operands[3])->code) == MEM))
   && optimize_insn_for_speed_p ())
    : -1 },
  { "(TARGET_AVX\n   && (operands[2] == CONST0_RTX (V8SImode)\n       || !MEM_P (operands[1]))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V8SImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V8SImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM))) &&
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (operands[2] == CONST0_RTX (V16QImode)\n       || !MEM_P (operands[1]))",


    __builtin_constant_p
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V16QImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 21546 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (operands[2] == (const_tiny_rtx[0][(int) (E_V16QImode)])
       || !(((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 14870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_BSWAP",
    __builtin_constant_p
# 14870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_arch_features[X86_ARCH_BSWAP])
    ? (int)
# 14870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_arch_features[X86_ARCH_BSWAP])
    : -1 },
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[0]) != REGNO (operands[1])\n   && (HImode != QImode\n       || any_QIreg_operand (operands[1], QImode))",


    __builtin_constant_p
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_HImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode)))
    ? (int)
# 19583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1]))
   && (E_HImode != E_QImode
       || any_QIreg_operand (operands[1], E_QImode)))
    : -1 },
# 22246 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F",
    __builtin_constant_p
# 22246 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))
    ? (int)
# 22246 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, DImode, operands)) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 7151 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7151 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1996 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_64BIT\n    && !(MEM_P (operands[0]) && MEM_P (operands[1])))\n   || (TARGET_SSE\n       && nonimmediate_or_sse_const_operand (operands[1], TImode)\n       && (register_operand (operands[0], TImode)\n	   || register_operand (operands[1], TImode)))",





    __builtin_constant_p
# 1996 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 1)) != 0)
    && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
   || (((ix86_isa_flags & (1UL << 50)) != 0)
       && nonimmediate_or_sse_const_operand (operands[1], E_TImode)
       && (register_operand (operands[0], E_TImode)
    || register_operand (operands[1], E_TImode))))
    ? (int)
# 1996 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 1)) != 0)
    && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
   || (((ix86_isa_flags & (1UL << 50)) != 0)
       && nonimmediate_or_sse_const_operand (operands[1], E_TImode)
       && (register_operand (operands[0], E_TImode)
    || register_operand (operands[1], E_TImode))))
    : -1 },
  { "(TARGET_SSE2 && 1) && (TARGET_AVX)",
    __builtin_constant_p (
# 5319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1) &&
# 396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 5319 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1) &&
# 396 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "((((TARGET_64BIT) && (TARGET_LZCNT)) && (TARGET_64BIT)) && (TARGET_LZCNT)) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p ((((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) ((((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0))) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
# 5503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && reload_completed && ix86_avoid_lea_for_add (insn, operands)",

    __builtin_constant_p
# 5503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && reload_completed && ix86_avoid_lea_for_add (insn, operands))
    ? (int)
# 5503 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && reload_completed && ix86_avoid_lea_for_add (insn, operands))
    : -1 },
# 12044 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n  && (TARGET_USE_XCHGB || optimize_function_for_size_p (cfun))",

    __builtin_constant_p
# 12044 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
  && (ix86_tune_features[X86_TUNE_USE_XCHGB] || optimize_function_for_size_p ((cfun + 0))))
    ? (int)
# 12044 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
  && (ix86_tune_features[X86_TUNE_USE_XCHGB] || optimize_function_for_size_p ((cfun + 0))))
    : -1 },
  { "((TARGET_SSE) && (TARGET_AVX)) && ( reload_completed)",
    __builtin_constant_p ((
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))) &&
# 16072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))) &&
# 16072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
# 10238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 && reload_completed",
    __builtin_constant_p
# 10238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && reload_completed)
    ? (int)
# 10238 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) && reload_completed)
    : -1 },
# 18495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CMOVE && !TARGET_PARTIAL_REG_STALL\n   && reload_completed",

    __builtin_constant_p
# 18495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && reload_completed)
    ? (int)
# 18495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)) && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && reload_completed)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && TARGET_AVX512VL\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 3465 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 18303 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "peep2_reg_dead_p (4, operands[7]) && peep2_reg_dead_p (4, operands[8])",
    __builtin_constant_p
# 18303 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (4, operands[7]) && peep2_reg_dead_p (4, operands[8]))
    ? (int)
# 18303 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(peep2_reg_dead_p (4, operands[7]) && peep2_reg_dead_p (4, operands[8]))
    : -1 },
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "IN_RANGE (exact_log2 (UINTVAL (operands[3])), 1, 31)",
    __builtin_constant_p
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1)))
    ? (int)
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned long) (exact_log2 (((unsigned long) ((operands[3])->u.hwint[0])))) - (unsigned long) (1) <= (unsigned long) (31) - (unsigned long) (1)))
    : -1 },
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((SImode == HImode\n       && TARGET_LCP_STALL)\n       || (TARGET_SPLIT_LONG_MOVES\n          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))",




    __builtin_constant_p
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_SImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn)))
    ? (int)
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_SImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn)))
    : -1 },
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "/* Ensure that resulting mask is zero or sign extended operand.  */\n   INTVAL (operands[4]) >= 0\n   && ((INTVAL (operands[3]) > 0\n	&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n       || (HImode == DImode\n	   && INTVAL (operands[3]) > 32\n	   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\n   && ix86_match_ccmode (insn,\n			 /* If zero_extract mode precision is the same\n			    as len, the SF of the zero_extract\n			    comparison will be the most significant\n			    extracted bit, but this could be matched\n			    after splitting only for pos 0 len all bits\n			    trivial extractions.  Require CCZmode.  */\n			 (GET_MODE_PRECISION (HImode)\n			  == INTVAL (operands[3]))\n			 /* Otherwise, require CCZmode if we'd use a mask\n			    with the most significant bit set and can't\n			    widen it to wider mode.  *testdi_1 also\n			    requires CCZmode if the mask has bit\n			    31 set and all bits above it clear.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     >= 32)\n			 /* We can't widen also if val is not a REG.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     == GET_MODE_PRECISION (GET_MODE (operands[2]))\n			     && !register_operand (operands[2],\n						   GET_MODE (operands[2])))\n			 /* And we shouldn't widen if\n			    TARGET_PARTIAL_REG_STALL.  */\n			 || (TARGET_PARTIAL_REG_STALL\n			     && (INTVAL (operands[3]) + INTVAL (operands[4])\n				 >= (paradoxical_subreg_p (operands[2])\n				     && (GET_MODE_CLASS\n					  (GET_MODE (SUBREG_REG (operands[2])))\n					 == MODE_INT)\n				     ? GET_MODE_PRECISION\n					 (GET_MODE (SUBREG_REG (operands[2])))\n				     : GET_MODE_PRECISION\n					 (GET_MODE (operands[2])))))\n			 ? CCZmode : CCNOmode)",
# 8865 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_HImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_HImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode))
    ? (int)
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_HImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_HImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1) && (TARGET_AVX2)",
    __builtin_constant_p (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCmode)\n   && ix86_binary_operator_ok (MINUS, QImode, operands)",

    __builtin_constant_p
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands))
    ? (int)
# 6684 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCmode)
   && ix86_binary_operator_ok (MINUS, E_QImode, operands))
    : -1 },
# 10436 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n   && ix86_unary_operator_ok (NOT, SImode, operands)",

    __builtin_constant_p
# 10436 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_SImode, operands))
    ? (int)
# 10436 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_unary_operator_ok (NOT, E_SImode, operands))
    : -1 },
# 1353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_match_ccmode (insn, CCGOCmode)",
    __builtin_constant_p
# 1353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode))
    ? (int)
# 1353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode))
    : -1 },
  { "(ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (MINUS, DImode, operands)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6418 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (MINUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 8743 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512DQ\n   && (!MEM_P (operands[0]) || rtx_equal_p (operands[0], operands[2]))",

    __builtin_constant_p
# 8743 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    ? (int)
# 8743 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)
   && (!(((enum rtx_code) (operands[0])->code) == MEM) || rtx_equal_p (operands[0], operands[2])))
    : -1 },
# 1405 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && TARGET_SSE2\n   && ix86_binary_operator_ok (MULT, V2SImode, operands)",


    __builtin_constant_p
# 1405 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (MULT, E_V2SImode, operands))
    ? (int)
# 1405 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (MULT, E_V2SImode, operands))
    : -1 },
# 284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "!TARGET_64BIT\n   && peep2_reg_dead_p (2, operands[0])\n   && rtx_equal_p (XEXP (operands[4], 0), XEXP (operands[2], 0))",


    __builtin_constant_p
# 284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (2, operands[0])
   && rtx_equal_p ((((operands[4])->u.fld[0]).rt_rtx), (((operands[2])->u.fld[0]).rt_rtx)))
    ? (int)
# 284 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (2, operands[0])
   && rtx_equal_p ((((operands[4])->u.fld[0]).rt_rtx), (((operands[2])->u.fld[0]).rt_rtx)))
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (PLUS, V8SImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V8SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((SSE_FLOAT_MODE_P (TFmode) && TARGET_SSE_MATH)\n    || (TARGET_SSE && (TFmode == TFmode)))\n   && reload_completed",


    __builtin_constant_p
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_TFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode == E_TFmode)))
   && reload_completed)
    ? (int)
# 10324 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_TFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode == E_TFmode)))
   && reload_completed)
    : -1 },
# 1281 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)\n   && ix86_binary_operator_ok (MULT, V4HImode, operands)",


    __builtin_constant_p
# 1281 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (MULT, E_V4HImode, operands))
    ? (int)
# 1281 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ix86_binary_operator_ok (MULT, E_V4HImode, operands))
    : -1 },
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_INTER_UNIT_MOVES_TO_VEC\n   && TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode)\n   && TARGET_SSE2 && optimize_function_for_speed_p (cfun)",


    __builtin_constant_p
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0)))
    ? (int)
# 4987 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_INTER_UNIT_MOVES_TO_VEC]
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode)
   && ((ix86_isa_flags & (1UL << 51)) != 0) && optimize_function_for_speed_p ((cfun + 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V8SImode == V16SFmode\n									      || V8SImode == V8DFmode\n									      || V8SImode == V8DImode\n									      || V8SImode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SImode == E_V16SFmode
               || E_V8SImode == E_V8DFmode
               || E_V8SImode == E_V8DImode
               || E_V8SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V8SImode == E_V16SFmode
               || E_V8SImode == E_V8DFmode
               || E_V8SImode == E_V8DImode
               || E_V8SImode == E_V16SImode)) &&
# 222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 20406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SLOW_IMUL_IMM8 && optimize_insn_for_speed_p ()\n   && satisfies_constraint_K (operands[2])",

    __builtin_constant_p
# 20406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM8] && optimize_insn_for_speed_p ()
   && satisfies_constraint_K (operands[2]))
    ? (int)
# 20406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM8] && optimize_insn_for_speed_p ()
   && satisfies_constraint_K (operands[2]))
    : -1 },
  { "((TARGET_POPCNT) && (TARGET_64BIT)) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p ((
# 14690 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) ((
# 14690 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 14698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V2DImode)\n       == GET_MODE_NUNITS (V4SImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    : -1 },
  { "(!(fixed_regs[AX_REG] || fixed_regs[DI_REG])\n   && ix86_check_no_addr_space (insn)) && (Pmode == SImode)",

    __builtin_constant_p (
# 17937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 17937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((this_target_hard_regs->x_fixed_regs)[0] || (this_target_hard_regs->x_fixed_regs)[5])
   && ix86_check_no_addr_space (insn)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX && (16 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && (REGNO (operands[4]) == REGNO (operands[0])\n       || REGNO (operands[4]) == REGNO (operands[3]))\n   && (rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n			     ? 3 : 0], operands[5])\n       ? rtx_equal_p (operands[2], operands[6])\n       : rtx_equal_p (operands[2], operands[5])\n	 && rtx_equal_p (operands[REGNO (operands[4]) == REGNO (operands[0])\n				  ? 3 : 0], operands[6]))\n   && peep2_reg_dead_p (4, operands[4])\n   && peep2_reg_dead_p (5, operands[REGNO (operands[4]) == REGNO (operands[0])\n				    ? 3 : 0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && !reg_overlap_mentioned_p (operands[0], operands[2])\n   && !reg_overlap_mentioned_p (operands[3], operands[0])\n   && !reg_overlap_mentioned_p (operands[3], operands[1])\n   && !reg_overlap_mentioned_p (operands[3], operands[2])\n   && (SImode != QImode\n       || immediate_operand (operands[2], QImode)\n       || any_QIreg_operand (operands[2], QImode))",
# 19994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode)))
    ? (int)
# 19974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rhs_regno(operands[4])) == (rhs_regno(operands[0]))
       || (rhs_regno(operands[4])) == (rhs_regno(operands[3])))
   && (rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0], operands[5])
       ? rtx_equal_p (operands[2], operands[6])
       : rtx_equal_p (operands[2], operands[5])
  && rtx_equal_p (operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
      ? 3 : 0], operands[6]))
   && peep2_reg_dead_p (4, operands[4])
   && peep2_reg_dead_p (5, operands[(rhs_regno(operands[4])) == (rhs_regno(operands[0]))
        ? 3 : 0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && !reg_overlap_mentioned_p (operands[0], operands[2])
   && !reg_overlap_mentioned_p (operands[3], operands[0])
   && !reg_overlap_mentioned_p (operands[3], operands[1])
   && !reg_overlap_mentioned_p (operands[3], operands[2])
   && (E_SImode != E_QImode
       || immediate_operand (operands[2], E_QImode)
       || any_QIreg_operand (operands[2], E_QImode)))
    : -1 },
# 9020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_binary_operator_ok (AND, DImode, operands)\n   && ix86_pre_reload_split ()",


    __builtin_constant_p
# 9020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 9020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512F && (V16SImode == V16SFmode\n									      || V16SImode == V8DFmode\n									      || V16SImode == V8DImode\n									      || V16SImode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SImode == E_V16SFmode
               || E_V16SImode == E_V8DFmode
               || E_V16SImode == E_V8DImode
               || E_V16SImode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SImode == E_V16SFmode
               || E_V16SImode == E_V8DFmode
               || E_V16SImode == E_V8DImode
               || E_V16SImode == E_V16SImode))))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX2)",

    __builtin_constant_p (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATERT, SImode, operands)",
    __builtin_constant_p
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_SImode, operands))
    ? (int)
# 11872 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_SImode, operands))
    : -1 },
  { "(!SIBLING_CALL_P (insn)) && (word_mode == DImode)",
    __builtin_constant_p (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!(((insn))->jump)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
# 9298 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_match_ccmode (insn, CCNOmode)\n   && ix86_binary_operator_ok (AND, SImode, operands)",

    __builtin_constant_p
# 9298 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_SImode, operands))
    ? (int)
# 9298 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)
   && ix86_binary_operator_ok (AND, E_SImode, operands))
    : -1 },
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(SSE_FLOAT_MODE_P (TFmode) && TARGET_SSE_MATH)\n   || (TARGET_SSE && (TFmode == TFmode))",

    __builtin_constant_p
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_TFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode == E_TFmode)))
    ? (int)
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_TFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_TFmode == E_TFmode)))
    : -1 },
# 1032 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_HIMODE_MATH",
    __builtin_constant_p
# 1032 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_HIMODE_MATH])
    ? (int)
# 1032 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_HIMODE_MATH])
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (16 == 64 || TARGET_AVX512VL)\n   && avx_vpermilp_parallel (operands[2], V2DFmode)) && (TARGET_SSE2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V2DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))
   && avx_vpermilp_parallel (operands[2], E_V2DFmode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_AVX512F && ix86_match_ccmode (insn, CCZmode)) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode)) &&
# 1309 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_match_ccmode (insn, E_CCZmode)) &&
# 1309 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_VPCLMULQDQ) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 23387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 57)) != 0)) &&
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 23387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 57)) != 0)) &&
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 10079 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_EXPAND_ABS",
    __builtin_constant_p
# 10079 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_EXPAND_ABS])
    ? (int)
# 10079 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_EXPAND_ABS])
    : -1 },
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n   || (TARGET_SSE && (SFmode == TFmode))",

    __builtin_constant_p
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode == E_TFmode)))
    ? (int)
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode == E_TFmode)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2\n   && TARGET_AVX512VL\n   && INTVAL (operands[2]) + 4 == INTVAL (operands[6])\n   && INTVAL (operands[3]) + 4 == INTVAL (operands[7])\n   && INTVAL (operands[4]) + 4 == INTVAL (operands[8])\n   && INTVAL (operands[5]) + 4 == INTVAL (operands[9]))",





    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14807 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0])))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14807 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((ix86_isa_flags & (1UL << 20)) != 0)
   && ((operands[2])->u.hwint[0]) + 4 == ((operands[6])->u.hwint[0])
   && ((operands[3])->u.hwint[0]) + 4 == ((operands[7])->u.hwint[0])
   && ((operands[4])->u.hwint[0]) + 4 == ((operands[8])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) + 4 == ((operands[9])->u.hwint[0])))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V16SFmode)\n       || register_operand (operands[1], V16SFmode))) && (TARGET_AVX512F)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16SFmode)
       || register_operand (operands[1], E_V16SFmode))) &&
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V16SFmode)
       || register_operand (operands[1], E_V16SFmode))) &&
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 10361 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_unary_operator_ok (NOT, DImode, operands)\n   && ix86_pre_reload_split ()",


    __builtin_constant_p
# 10361 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_unary_operator_ok (NOT, E_DImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 10361 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_unary_operator_ok (NOT, E_DImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (MINUS, V2DImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V2DImode, operands)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 3814 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && reload_completed\n   && REGNO (operands[0]) == REGNO (operands[1])",

    __builtin_constant_p
# 3814 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed
   && (rhs_regno(operands[0])) == (rhs_regno(operands[1])))
    ? (int)
# 3814 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && reload_completed
   && (rhs_regno(operands[0])) == (rhs_regno(operands[1])))
    : -1 },
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (GET_MODE_NUNITS (V16SFmode)\n       == GET_MODE_NUNITS (V8DFmode))",


    __builtin_constant_p
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    ? (int)
# 3208 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V16SFmode).coeffs[0])
       == (mode_to_nunits (E_V8DFmode).coeffs[0])))
    : -1 },
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BW && ix86_binary_operator_ok (PLUS, V64QImode, operands)",
    __builtin_constant_p
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V64QImode, operands))
    ? (int)
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V64QImode, operands))
    : -1 },
  { "(TARGET_AVX512DQ && 1) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 9708 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (XOR, SImode, operands)",
    __builtin_constant_p
# 9708 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (XOR, E_SImode, operands))
    ? (int)
# 9708 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (XOR, E_SImode, operands))
    : -1 },
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && !(SSE_FLOAT_MODE_P (XFmode) && (!TARGET_FISTTP || TARGET_SSE_MATH))",

    __builtin_constant_p
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))))
    ? (int)
# 4627 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && (!(((ix86_isa_flags & (1UL << 52)) != 0) && ((target_flags & (1U << 1)) != 0)) || ((ix86_fpmath & FPMATH_SSE) != 0))))
    : -1 },
  { "(TARGET_SSE4_1 && 1 && 1) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 17415 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSE && reload_completed) && (Pmode == SImode)",
    __builtin_constant_p (
# 3009 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 3009 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && reload_completed) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "((TARGET_64BIT) && (TARGET_BMI)) && (TARGET_64BIT)",
    __builtin_constant_p ((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) ((
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 14232 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && TARGET_64BIT)",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5570 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 5570 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && ix86_binary_operator_ok (MINUS, V4SFmode, operands)\n   && (16 == 64 || TARGET_AVX512VL) && 1)",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE) && (TARGET_SSE2))",
    __builtin_constant_p (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 317 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2265 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_BMI2) && (TARGET_64BIT)",
    __builtin_constant_p (
# 14417 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14417 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1972 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_AVX\n   && (register_operand (operands[0], OImode)\n       || register_operand (operands[1], OImode))",


    __builtin_constant_p
# 1972 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (register_operand (operands[0], E_OImode)
       || register_operand (operands[1], E_OImode)))
    ? (int)
# 1972 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && (register_operand (operands[0], E_OImode)
       || register_operand (operands[1], E_OImode)))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (MINUS, V64QImode, operands)) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V64QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (MINUS, E_V64QImode, operands)) &&
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && (16 == 64 || TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21524 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(optimize_insn_for_size_p ()\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == SImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == SImode)) && (Pmode == DImode)) && (Pmode == DImode))",

    __builtin_constant_p (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20315 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_size_p ()
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
# 10870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ASHIFT, HImode, operands)",
    __builtin_constant_p
# 10870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_HImode, operands))
    ? (int)
# 10870 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ASHIFT, E_HImode, operands))
    : -1 },
# 21709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_F16C",
    __builtin_constant_p
# 21709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 28)) != 0))
    ? (int)
# 21709 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 28)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && TARGET_AVX512VL\n   && !(MEM_P (operands[1]) && MEM_P (operands[2])))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11747 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11747 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))))
    : -1 },
# 12686 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))",
    __builtin_constant_p
# 12686 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 12686 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && HImode != HImode \n       && ((HImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_HImode != E_HImode
       && ((E_HImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_HImode != E_HImode
       && ((E_HImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 22482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SHA",
    __builtin_constant_p
# 22482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 48)) != 0))
    ? (int)
# 22482 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 48)) != 0))
    : -1 },
# 14810 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_POPCNT",
    __builtin_constant_p
# 14810 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0))
    ? (int)
# 14810 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 41)) != 0))
    : -1 },
# 20387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT\n   && TARGET_SLOW_IMUL_IMM32_MEM && optimize_insn_for_speed_p ()\n   && !satisfies_constraint_K (operands[2])",


    __builtin_constant_p
# 20387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM] && optimize_insn_for_speed_p ()
   && !satisfies_constraint_K (operands[2]))
    ? (int)
# 20387 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)
   && ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM32_MEM] && optimize_insn_for_speed_p ()
   && !satisfies_constraint_K (operands[2]))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))))
    : -1 },
# 6845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (PLUS, SImode, operands)",
    __builtin_constant_p
# 6845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands))
    ? (int)
# 6845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_SImode, operands))
    : -1 },
# 21491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE",
    __builtin_constant_p
# 21491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0))
    ? (int)
# 21491 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_SSE2))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
# 23318 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VNNI",
    __builtin_constant_p
# 23318 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 21)) != 0))
    ? (int)
# 23318 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 21)) != 0))
    : -1 },
# 23483 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BF16",
    __builtin_constant_p
# 23483 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0))
    ? (int)
# 23483 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 2)) != 0))
    : -1 },
  { "(/* FIXME: without this LRA can't reload this pattern, see PR82524.  */\n   rtx_equal_p (operands[0], operands[1])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 9375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   rtx_equal_p (operands[0], operands[1])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 15484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))",
    __builtin_constant_p
# 15484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 15484 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE2\n   && 1 && 1) && (TARGET_AVX512BW)",

    __builtin_constant_p (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11649 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && 1 && 1) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(ix86_match_ccmode (insn, CCGOCmode)\n   && ix86_binary_operator_ok (PLUS, DImode, operands)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5549 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCGOCmode)
   && ix86_binary_operator_ok (PLUS, E_DImode, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX) && (TARGET_AVX2)",
    __builtin_constant_p (
# 21406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)) &&
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 21406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)) &&
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "((TARGET_AVX512F\n   && (register_operand (operands[0], V64SImode)\n       || register_operand (operands[1], V64SImode))) && (TARGET_AVX5124VNNIW)) && ( reload_completed)",


    __builtin_constant_p ((
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SImode)
       || register_operand (operands[1], E_V64SImode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0))) &&
# 22622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 22618 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (register_operand (operands[0], E_V64SImode)
       || register_operand (operands[1], E_V64SImode))) &&
# 22601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 1)) != 0))) &&
# 22622 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4430 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)) &&
# 326 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX2 && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11847 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11847 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 16939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 16939 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 9393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 9393 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && (INTVAL (operands[3]) & 3) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && INTVAL (operands[3]) == INTVAL (operands[5]) - 2\n   && INTVAL (operands[3]) == INTVAL (operands[6]) - 3\n   && (INTVAL (operands[7]) & 3) == 0\n   && INTVAL (operands[7]) == INTVAL (operands[8]) - 1\n   && INTVAL (operands[7]) == INTVAL (operands[9]) - 2\n   && INTVAL (operands[7]) == INTVAL (operands[10]) - 3\n   && (INTVAL (operands[11]) & 3) == 0\n   && INTVAL (operands[11]) == INTVAL (operands[12]) - 1\n   && INTVAL (operands[11]) == INTVAL (operands[13]) - 2\n   && INTVAL (operands[11]) == INTVAL (operands[14]) - 3\n   && (INTVAL (operands[15]) & 3) == 0\n   && INTVAL (operands[15]) == INTVAL (operands[16]) - 1\n   && INTVAL (operands[15]) == INTVAL (operands[17]) - 2\n   && INTVAL (operands[15]) == INTVAL (operands[18]) - 3)",
# 9412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14644 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3
   && (((operands[11])->u.hwint[0]) & 3) == 0
   && ((operands[11])->u.hwint[0]) == ((operands[12])->u.hwint[0]) - 1
   && ((operands[11])->u.hwint[0]) == ((operands[13])->u.hwint[0]) - 2
   && ((operands[11])->u.hwint[0]) == ((operands[14])->u.hwint[0]) - 3
   && (((operands[15])->u.hwint[0]) & 3) == 0
   && ((operands[15])->u.hwint[0]) == ((operands[16])->u.hwint[0]) - 1
   && ((operands[15])->u.hwint[0]) == ((operands[17])->u.hwint[0]) - 2
   && ((operands[15])->u.hwint[0]) == ((operands[18])->u.hwint[0]) - 3))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14644 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3
   && (((operands[11])->u.hwint[0]) & 3) == 0
   && ((operands[11])->u.hwint[0]) == ((operands[12])->u.hwint[0]) - 1
   && ((operands[11])->u.hwint[0]) == ((operands[13])->u.hwint[0]) - 2
   && ((operands[11])->u.hwint[0]) == ((operands[14])->u.hwint[0]) - 3
   && (((operands[15])->u.hwint[0]) & 3) == 0
   && ((operands[15])->u.hwint[0]) == ((operands[16])->u.hwint[0]) - 1
   && ((operands[15])->u.hwint[0]) == ((operands[17])->u.hwint[0]) - 2
   && ((operands[15])->u.hwint[0]) == ((operands[18])->u.hwint[0]) - 3))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V4DFmode == V16SFmode\n									      || V4DFmode == V8DFmode\n									      || V4DFmode == V8DImode\n									      || V4DFmode == V16SImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V4DFmode == E_V16SFmode
               || E_V4DFmode == E_V8DFmode
               || E_V4DFmode == E_V8DImode
               || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_MOVBE\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && (TARGET_64BIT)",

    __builtin_constant_p (
# 14855 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14855 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 9)) != 0)
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_SSE2\n   && (GET_MODE_NUNITS (V2DFmode)\n       == GET_MODE_NUNITS (V8HImode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V2DFmode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0]))) &&
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V8HImode)\n       == GET_MODE_NUNITS (V4SImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V4SImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && (((TARGET_AVX512VL) && (Pmode == DImode)) && (Pmode == DImode))",
    __builtin_constant_p (
# 22092 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 22092 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && ((
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_SSE || TARGET_3DNOW_A) && (Pmode == SImode)",
    __builtin_constant_p (
# 2560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 2560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && (INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n       && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n       && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4)\n       && INTVAL (operands[6]) == (INTVAL (operands[10]) - 4)\n       && INTVAL (operands[3]) == (INTVAL (operands[11]) - 8)\n       && INTVAL (operands[4]) == (INTVAL (operands[12]) - 8)\n       && INTVAL (operands[5]) == (INTVAL (operands[13]) - 8)\n       && INTVAL (operands[6]) == (INTVAL (operands[14]) - 8)\n       && INTVAL (operands[3]) == (INTVAL (operands[15]) - 12)\n       && INTVAL (operands[4]) == (INTVAL (operands[16]) - 12)\n       && INTVAL (operands[5]) == (INTVAL (operands[17]) - 12)\n       && INTVAL (operands[6]) == (INTVAL (operands[18]) - 12)))",
# 1245 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 9825 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[11])->u.hwint[0]) - 8)
       && ((operands[4])->u.hwint[0]) == (((operands[12])->u.hwint[0]) - 8)
       && ((operands[5])->u.hwint[0]) == (((operands[13])->u.hwint[0]) - 8)
       && ((operands[6])->u.hwint[0]) == (((operands[14])->u.hwint[0]) - 8)
       && ((operands[3])->u.hwint[0]) == (((operands[15])->u.hwint[0]) - 12)
       && ((operands[4])->u.hwint[0]) == (((operands[16])->u.hwint[0]) - 12)
       && ((operands[5])->u.hwint[0]) == (((operands[17])->u.hwint[0]) - 12)
       && ((operands[6])->u.hwint[0]) == (((operands[18])->u.hwint[0]) - 12))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 9825 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) == (((operands[7])->u.hwint[0]) - 4)
       && ((operands[4])->u.hwint[0]) == (((operands[8])->u.hwint[0]) - 4)
       && ((operands[5])->u.hwint[0]) == (((operands[9])->u.hwint[0]) - 4)
       && ((operands[6])->u.hwint[0]) == (((operands[10])->u.hwint[0]) - 4)
       && ((operands[3])->u.hwint[0]) == (((operands[11])->u.hwint[0]) - 8)
       && ((operands[4])->u.hwint[0]) == (((operands[12])->u.hwint[0]) - 8)
       && ((operands[5])->u.hwint[0]) == (((operands[13])->u.hwint[0]) - 8)
       && ((operands[6])->u.hwint[0]) == (((operands[14])->u.hwint[0]) - 8)
       && ((operands[3])->u.hwint[0]) == (((operands[15])->u.hwint[0]) - 12)
       && ((operands[4])->u.hwint[0]) == (((operands[16])->u.hwint[0]) - 12)
       && ((operands[5])->u.hwint[0]) == (((operands[17])->u.hwint[0]) - 12)
       && ((operands[6])->u.hwint[0]) == (((operands[18])->u.hwint[0]) - 12))))
    : -1 },
  { "(!TARGET_64BIT && TARGET_CMOVE\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 18884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 18887 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 18884 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))
   && ix86_pre_reload_split ()) &&
# 18887 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && (TARGET_AVX)",
    __builtin_constant_p (
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && TARGET_64BIT) && (TARGET_SSE2))",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512VBMI && TARGET_AVX512VL)",
    __builtin_constant_p (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20908 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 20973 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 20908 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_SSE2 && (V8SFmode == V4SFmode || TARGET_AVX2)) && (TARGET_AVX)",
    __builtin_constant_p (
# 5291 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (E_V8SFmode == E_V4SFmode || ((ix86_isa_flags & (1UL << 9)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 5291 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (E_V8SFmode == E_V4SFmode || ((ix86_isa_flags & (1UL << 9)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V4DFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V4DFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "((TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && COMMUTATIVE_ARITH_P (operands[2])\n   && peep2_reg_dead_p (2, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (0),\n			 GET_CODE (operands[2]) == PLUS\n			 ? CCGOCmode : CCNOmode)) && (TARGET_64BIT)",






    __builtin_constant_p (
# 19792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (0),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 19792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (0),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 15599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "can_create_pseudo_p ()\n   && REG_P (operands[1])\n   && VECTOR_MODE_P (GET_MODE (operands[1]))\n   && ((TARGET_SSE && GET_MODE_SIZE (GET_MODE (operands[1])) == 16)\n       || (TARGET_AVX && GET_MODE_SIZE (GET_MODE (operands[1])) == 32)\n       || (TARGET_AVX512F && GET_MODE_SIZE (GET_MODE (operands[1])) == 64))\n   && (DImode == SImode || TARGET_64BIT || MEM_P (operands[0]))",






    __builtin_constant_p
# 15599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((!reload_in_progress && !reload_completed)
   && (((enum rtx_code) (operands[1])->code) == REG)
   && (((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_BOOL || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_INT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FLOAT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UFRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_ACCUM || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UACCUM)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 16)
       || (((ix86_isa_flags & (1UL << 8)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 32)
       || (((ix86_isa_flags & (1UL << 15)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 64))
   && (E_DImode == E_SImode || ((ix86_isa_flags & (1UL << 1)) != 0) || (((enum rtx_code) (operands[0])->code) == MEM)))
    ? (int)
# 15599 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((!reload_in_progress && !reload_completed)
   && (((enum rtx_code) (operands[1])->code) == REG)
   && (((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_BOOL || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_INT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FLOAT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_FRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UFRACT || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_ACCUM || ((enum mode_class) mode_class[((machine_mode) (operands[1])->mode)]) == MODE_VECTOR_UACCUM)
   && ((((ix86_isa_flags & (1UL << 50)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 16)
       || (((ix86_isa_flags & (1UL << 8)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 32)
       || (((ix86_isa_flags & (1UL << 15)) != 0) && ((unsigned short) mode_to_bytes (((machine_mode) (operands[1])->mode)).coeffs[0]) == 64))
   && (E_DImode == E_SImode || ((ix86_isa_flags & (1UL << 1)) != 0) || (((enum rtx_code) (operands[0])->code) == MEM)))
    : -1 },
  { "(ix86_unary_operator_ok (NOT, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_DImode, operands)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 10375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NOT, E_DImode, operands)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && avx_vperm2f128_parallel (operands[3], V4DFmode)",

    __builtin_constant_p
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && avx_vperm2f128_parallel (operands[3], E_V4DFmode))
    ? (int)
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && avx_vperm2f128_parallel (operands[3], E_V4DFmode))
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V8SImode)\n       == GET_MODE_NUNITS (V4DFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V8SImode).coeffs[0])
       == (mode_to_nunits (E_V4DFmode).coeffs[0])))
    : -1 },
# 15698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "((SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n    || (TARGET_80387 && X87_ENABLE_ARITH (SFmode)))\n   && !COMMUTATIVE_ARITH_P (operands[3])\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",



    __builtin_constant_p
# 15698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode)))
   && !((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 15698 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
    || (((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode)))
   && !((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && 1 && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_SSE2))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "(ix86_binary_operator_ok (ROTATERT, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATERT, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_64BIT) && (Pmode == SImode)) && ( 1)",
    __builtin_constant_p ((
# 3023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 3025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 3023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 3025 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (SImode))) && (TARGET_AVX512VL && TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_SImode).coeffs[0]))) &&
# 13473 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSSE3) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 16733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 16733 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSSE3 && 1 && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX2)",

    __builtin_constant_p (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 16753 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 55)) != 0) && 1 && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 21594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SERIALIZE",
    __builtin_constant_p
# 21594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 15)) != 0))
    ? (int)
# 21594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 15)) != 0))
    : -1 },
  { "(TARGET_AVX512BITALG) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 23397 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0)) &&
# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 15225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_cmodel == CM_LARGE_PIC && !TARGET_PECOFF\n   && GET_CODE (operands[3]) == CONST\n   && GET_CODE (XEXP (operands[3], 0)) == UNSPEC\n   && XINT (XEXP (operands[3], 0), 1) == UNSPEC_PLTOFF",



    __builtin_constant_p
# 15225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_cmodel == CM_LARGE_PIC && !0
   && ((enum rtx_code) (operands[3])->code) == CONST
   && ((enum rtx_code) ((((operands[3])->u.fld[0]).rt_rtx))->code) == UNSPEC
   && ((((((operands[3])->u.fld[0]).rt_rtx))->u.fld[1]).rt_int) == UNSPEC_PLTOFF)
    ? (int)
# 15225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_cmodel == CM_LARGE_PIC && !0
   && ((enum rtx_code) (operands[3])->code) == CONST
   && ((enum rtx_code) ((((operands[3])->u.fld[0]).rt_rtx))->code) == UNSPEC
   && ((((((operands[3])->u.fld[0]).rt_rtx))->u.fld[1]).rt_int) == UNSPEC_PLTOFF)
    : -1 },
# 9075 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_USE_BT\n   && ix86_binary_operator_ok (AND, DImode, operands)\n   && IN_RANGE (exact_log2 (~INTVAL (operands[2])), 31, 63)",


    __builtin_constant_p
# 9075 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ((unsigned long) (exact_log2 (~((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31)))
    ? (int)
# 9075 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_tune_features[X86_TUNE_USE_BT]
   && ix86_binary_operator_ok (AND, E_DImode, operands)
   && ((unsigned long) (exact_log2 (~((operands[2])->u.hwint[0]))) - (unsigned long) (31) <= (unsigned long) (63) - (unsigned long) (31)))
    : -1 },
  { "(TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && 1) && (TARGET_SSE2)",


    __builtin_constant_p (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && TARGET_CMOVE)\n   || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 18573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0)))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (32 == 64 || TARGET_AVX512VL) && (V8SFmode == V16SFmode\n									      || V8SFmode == V8DFmode\n									      || V8SFmode == V8DImode\n									      || V8SFmode == V16SImode)) && (TARGET_AVX)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8SFmode == E_V16SFmode
               || E_V8SFmode == E_V8DFmode
               || E_V8SFmode == E_V8DImode
               || E_V8SFmode == E_V16SImode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 14644 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (INTVAL (operands[3]) & 3) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && INTVAL (operands[3]) == INTVAL (operands[5]) - 2\n   && INTVAL (operands[3]) == INTVAL (operands[6]) - 3\n   && (INTVAL (operands[7]) & 3) == 0\n   && INTVAL (operands[7]) == INTVAL (operands[8]) - 1\n   && INTVAL (operands[7]) == INTVAL (operands[9]) - 2\n   && INTVAL (operands[7]) == INTVAL (operands[10]) - 3\n   && (INTVAL (operands[11]) & 3) == 0\n   && INTVAL (operands[11]) == INTVAL (operands[12]) - 1\n   && INTVAL (operands[11]) == INTVAL (operands[13]) - 2\n   && INTVAL (operands[11]) == INTVAL (operands[14]) - 3\n   && (INTVAL (operands[15]) & 3) == 0\n   && INTVAL (operands[15]) == INTVAL (operands[16]) - 1\n   && INTVAL (operands[15]) == INTVAL (operands[17]) - 2\n   && INTVAL (operands[15]) == INTVAL (operands[18]) - 3",
# 14661 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p
# 14644 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3
   && (((operands[11])->u.hwint[0]) & 3) == 0
   && ((operands[11])->u.hwint[0]) == ((operands[12])->u.hwint[0]) - 1
   && ((operands[11])->u.hwint[0]) == ((operands[13])->u.hwint[0]) - 2
   && ((operands[11])->u.hwint[0]) == ((operands[14])->u.hwint[0]) - 3
   && (((operands[15])->u.hwint[0]) & 3) == 0
   && ((operands[15])->u.hwint[0]) == ((operands[16])->u.hwint[0]) - 1
   && ((operands[15])->u.hwint[0]) == ((operands[17])->u.hwint[0]) - 2
   && ((operands[15])->u.hwint[0]) == ((operands[18])->u.hwint[0]) - 3)
    ? (int)
# 14644 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0]) & 3) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && ((operands[3])->u.hwint[0]) == ((operands[5])->u.hwint[0]) - 2
   && ((operands[3])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 3
   && (((operands[7])->u.hwint[0]) & 3) == 0
   && ((operands[7])->u.hwint[0]) == ((operands[8])->u.hwint[0]) - 1
   && ((operands[7])->u.hwint[0]) == ((operands[9])->u.hwint[0]) - 2
   && ((operands[7])->u.hwint[0]) == ((operands[10])->u.hwint[0]) - 3
   && (((operands[11])->u.hwint[0]) & 3) == 0
   && ((operands[11])->u.hwint[0]) == ((operands[12])->u.hwint[0]) - 1
   && ((operands[11])->u.hwint[0]) == ((operands[13])->u.hwint[0]) - 2
   && ((operands[11])->u.hwint[0]) == ((operands[14])->u.hwint[0]) - 3
   && (((operands[15])->u.hwint[0]) & 3) == 0
   && ((operands[15])->u.hwint[0]) == ((operands[16])->u.hwint[0]) - 1
   && ((operands[15])->u.hwint[0]) == ((operands[17])->u.hwint[0]) - 2
   && ((operands[15])->u.hwint[0]) == ((operands[18])->u.hwint[0]) - 3)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL) && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_SSE2)))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))))
    : -1 },
  { "(TARGET_SSE\n   && (GET_MODE_NUNITS (V8HImode)\n       == GET_MODE_NUNITS (V2DFmode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V8HImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512VBMI2) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23004 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 480 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 23004 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 480 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (V16SImode == V16SFmode\n									      || V16SImode == V8DFmode\n									      || V16SImode == V8DImode\n									      || V16SImode == V16SImode))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SImode == E_V16SFmode
               || E_V16SImode == E_V8DFmode
               || E_V16SImode == E_V8DImode
               || E_V16SImode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V16SImode == E_V16SFmode
               || E_V16SImode == E_V8DFmode
               || E_V16SImode == E_V8DImode
               || E_V16SImode == E_V16SImode)))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (XOR, V4HImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (XOR, E_V4HImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (XOR, E_V4HImode, operands))
    : -1 },
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((HImode == HImode\n       && TARGET_LCP_STALL)\n       || (!TARGET_USE_MOV0\n          && TARGET_SPLIT_LONG_MOVES\n          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))\n   && peep2_regno_dead_p (0, FLAGS_REG)",






    __builtin_constant_p
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_HImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (!ix86_tune_features[X86_TUNE_USE_MOV0]
          && ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 19406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_HImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (!ix86_tune_features[X86_TUNE_USE_MOV0]
          && ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn))
   && peep2_regno_dead_p (0, 17))
    : -1 },
  { "(ix86_binary_operator_ok (ROTATE, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 13394 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT && SIBLING_CALL_P (insn)",
    __builtin_constant_p
# 13394 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((insn))->jump))
    ? (int)
# 13394 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && (((insn))->jump))
    : -1 },
  { "(TARGET_SSE2) && (Pmode == SImode)",
    __builtin_constant_p (
# 16228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 16228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V16HImode, operands)) && (TARGET_AVX2)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V16HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V16HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)))
    : -1 },
# 2011 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)",

    __builtin_constant_p
# 2011 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0)))
    ? (int)
# 2011 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0)))
    : -1 },
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (ROTATE, QImode, operands)",
    __builtin_constant_p
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_QImode, operands))
    ? (int)
# 11997 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_QImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && 1) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE && 1 && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1 && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
# 15682 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && !COMMUTATIVE_ARITH_P (operands[3])",

    __builtin_constant_p
# 15682 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH))
    ? (int)
# 15682 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && !((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH))
    : -1 },
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && (TARGET_MMX)",
    __builtin_constant_p (
# 2594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 2568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0)))
    ? (int) (
# 2594 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 2568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 36)) != 0)))
    : -1 },
  { "(ix86_match_ccmode (insn, CCNOmode)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_64BIT)",

    __builtin_constant_p (
# 9794 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9794 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_match_ccmode (insn, E_CCNOmode)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_FMA || TARGET_FMA4 || TARGET_AVX512F) && (TARGET_SSE2)",
    __builtin_constant_p (
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 4471 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0) || ((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations)\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && DImode != HImode \n       && ((DImode != DImode) || TARGET_64BIT)\n       && !flag_trapping_math && !flag_rounding_math)",







    __builtin_constant_p
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_DImode != E_HImode
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations)
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && E_DImode != E_HImode
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
  { "(TARGET_AVX512F) && (SSE_FLOAT_MODE_P (SFmode))",
    __builtin_constant_p (
# 198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3029 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))))
    ? (int) (
# 198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 3029 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode))))
    : -1 },
# 3509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(MEM_P (operands[0]) && MEM_P (operands[1]))\n   && (lra_in_progress || reload_completed\n       || !CONST_DOUBLE_P (operands[1])\n       || ((optimize_function_for_size_p (cfun)\n	    || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))\n	   && ((IS_STACK_MODE (SFmode)\n		&& standard_80387_constant_p (operands[1]) > 0)\n	       || (TARGET_SSE && TARGET_SSE_MATH\n		   && standard_sse_constant_p (operands[1], SFmode) == 1)))\n       || memory_operand (operands[0], SFmode)\n       || !TARGET_HARD_SF_REGS)",
# 3520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
    __builtin_constant_p
# 3509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && ((((((target_flags & (1U << 1)) != 0) && ((E_SFmode) == E_SFmode || (E_SFmode) == E_DFmode || (E_SFmode) == E_XFmode)) && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
  && standard_80387_constant_p (operands[1]) > 0)
        || (((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
     && standard_sse_constant_p (operands[1], E_SFmode) == 1)))
       || memory_operand (operands[0], E_SFmode)
       || !(((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 36)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))))
    ? (int)
# 3509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))
   && (lra_in_progress || reload_completed
       || !(((enum rtx_code) (operands[1])->code) == CONST_DOUBLE)
       || ((optimize_function_for_size_p ((cfun + 0))
     || (ix86_cmodel == CM_LARGE || ix86_cmodel == CM_LARGE_PIC))
    && ((((((target_flags & (1U << 1)) != 0) && ((E_SFmode) == E_SFmode || (E_SFmode) == E_DFmode || (E_SFmode) == E_XFmode)) && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)) || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387))))
  && standard_80387_constant_p (operands[1]) > 0)
        || (((ix86_isa_flags & (1UL << 50)) != 0) && ((ix86_fpmath & FPMATH_SSE) != 0)
     && standard_sse_constant_p (operands[1], E_SFmode) == 1)))
       || memory_operand (operands[0], E_SFmode)
       || !(((target_flags & (1U << 1)) != 0) || ((ix86_isa_flags & (1UL << 36)) != 0) || ((ix86_isa_flags & (1UL << 50)) != 0))))
    : -1 },
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
  { "!TARGET_64BIT\n   && peep2_reg_dead_p (4, operands[2])\n   && rtx_equal_p (XEXP (operands[0], 0), XEXP (operands[3], 0))",


    __builtin_constant_p
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (4, operands[2])
   && rtx_equal_p ((((operands[0])->u.fld[0]).rt_rtx), (((operands[3])->u.fld[0]).rt_rtx)))
    ? (int)
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sync.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && peep2_reg_dead_p (4, operands[2])
   && rtx_equal_p ((((operands[0])->u.fld[0]).rt_rtx), (((operands[3])->u.fld[0]).rt_rtx)))
    : -1 },
  { "(reload_completed && ix86_lea_for_add_ok (insn, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 5517 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_lea_for_add_ok (insn, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 5517 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed && ix86_lea_for_add_ok (insn, operands)) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(!TARGET_OPT_AGU\n   && peep2_regno_dead_p (0, FLAGS_REG)) && (TARGET_64BIT)",

    __builtin_constant_p (
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_OPT_AGU]
   && peep2_regno_dead_p (0, 17)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 20116 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_OPT_AGU]
   && peep2_regno_dead_p (0, 17)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 3179 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "reload_completed\n   && (GET_MODE (operands[0]) == TFmode\n       || GET_MODE (operands[0]) == XFmode\n       || GET_MODE (operands[0]) == DFmode)",



    __builtin_constant_p
# 3179 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (((machine_mode) (operands[0])->mode) == E_TFmode
       || ((machine_mode) (operands[0])->mode) == E_XFmode
       || ((machine_mode) (operands[0])->mode) == E_DFmode))
    ? (int)
# 3179 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
   && (((machine_mode) (operands[0])->mode) == E_TFmode
       || ((machine_mode) (operands[0])->mode) == E_XFmode
       || ((machine_mode) (operands[0])->mode) == E_DFmode))
    : -1 },
  { "(TARGET_AVX && 1\n   && avx_vpermilp_parallel (operands[2], V16SFmode)) && (TARGET_AVX512F)",

    __builtin_constant_p (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V16SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 20371 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && 1
   && avx_vpermilp_parallel (operands[2], E_V16SFmode)) &&
# 273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (register_operand (operands[0], V2DFmode)\n       || register_operand (operands[1], V2DFmode))",


    __builtin_constant_p
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V2DFmode)
       || register_operand (operands[1], E_V2DFmode)))
    ? (int)
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V2DFmode)
       || register_operand (operands[1], E_V2DFmode)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE\n   && 1 && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode))",




    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode)))
    : -1 },
  { "((ix86_binary_operator_ok (ROTATE, DImode, operands)\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",



    __builtin_constant_p ((
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 11781 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (ROTATE, E_DImode, operands)
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11786 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "((TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))) && ( reload_completed)",

    __builtin_constant_p (
# 2158 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 2161 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
( reload_completed))
    ? (int) (
# 2158 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM))) &&
# 2161 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
( reload_completed))
    : -1 },
# 21366 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CLWB",
    __builtin_constant_p
# 21366 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 26)) != 0))
    ? (int)
# 21366 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 26)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_SSE && (32 == 64 || TARGET_AVX512VL) && (V4DFmode == V16SFmode\n							      || V4DFmode == V8DFmode\n							      || V4DFmode == V8DImode\n							      || V4DFmode == V16SImode)) && (TARGET_AVX)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1784 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4DFmode == E_V16SFmode
             || E_V4DFmode == E_V8DFmode
             || E_V4DFmode == E_V8DImode
             || E_V4DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))))
    : -1 },
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   /* Disable this splitter if avx512vl_vec_dup_gprv*[qhs]i insn is\n      available, because then we can broadcast from GPRs directly.\n      For V*[QH]I modes it requires both -mavx512vl and -mavx512bw,\n      for V*SI mode it requires just -mavx512vl.  */\n   && !(TARGET_AVX512VL\n	&& (TARGET_AVX512BW || HImode == SImode))\n   && reload_completed && GENERAL_REG_P (operands[1])",







    __builtin_constant_p
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)




   && !(((ix86_isa_flags & (1UL << 20)) != 0)
 && (((ix86_isa_flags & (1UL << 11)) != 0) || E_HImode == E_SImode))
   && reload_completed && ((((enum rtx_code) (operands[1])->code) == REG) && ((((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36)))))
    ? (int)
# 20744 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)




   && !(((ix86_isa_flags & (1UL << 20)) != 0)
 && (((ix86_isa_flags & (1UL << 11)) != 0) || E_HImode == E_SImode))
   && reload_completed && ((((enum rtx_code) (operands[1])->code) == REG) && ((((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (0) <= (unsigned long) (7) - (unsigned long) (0))) || ((unsigned long) (((rhs_regno(operands[1])))) - (unsigned long) (36) <= (unsigned long) (43) - (unsigned long) (36)))))
    : -1 },
# 7041 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!(MEM_P (operands[0]) && MEM_P (operands[1]))",
    __builtin_constant_p
# 7041 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 7041 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((TARGET_NOT_UNPAIRABLE\n	&& (!MEM_P (operands[0])\n	    || !memory_displacement_operand (operands[0], HImode)))\n       || (TARGET_NOT_VECTORMODE\n	   && long_memory_operand (operands[0], HImode)))\n   && peep2_regno_dead_p (0, FLAGS_REG)",






    __builtin_constant_p
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((ix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]
 && (!(((enum rtx_code) (operands[0])->code) == MEM)
     || !memory_displacement_operand (operands[0], E_HImode)))
       || (ix86_tune_features[X86_TUNE_NOT_VECTORMODE]
    && long_memory_operand (operands[0], E_HImode)))
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 19455 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((ix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]
 && (!(((enum rtx_code) (operands[0])->code) == MEM)
     || !memory_displacement_operand (operands[0], E_HImode)))
       || (ix86_tune_features[X86_TUNE_NOT_VECTORMODE]
    && long_memory_operand (operands[0], E_HImode)))
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 19611 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "REGNO (operands[0]) != REGNO (operands[1])",
    __builtin_constant_p
# 19611 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1])))
    ? (int)
# 19611 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((rhs_regno(operands[0])) != (rhs_regno(operands[1])))
    : -1 },
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (LSHIFTRT, QImode, operands)",
    __builtin_constant_p
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_QImode, operands))
    ? (int)
# 11569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (LSHIFTRT, E_QImode, operands))
    : -1 },
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NEG, QImode, operands)",
    __builtin_constant_p
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_QImode, operands))
    ? (int)
# 10014 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_QImode, operands))
    : -1 },
# 10384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_unary_operator_ok (NOT, SImode, operands)",
    __builtin_constant_p
# 10384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_unary_operator_ok (NOT, E_SImode, operands))
    ? (int)
# 10384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_unary_operator_ok (NOT, E_SImode, operands))
    : -1 },
# 9137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (AND, SImode, operands)",
    __builtin_constant_p
# 9137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_SImode, operands))
    ? (int)
# 9137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (AND, E_SImode, operands))
    : -1 },
# 11525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)",
    __builtin_constant_p
# 11525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    ? (int)
# 11525 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12739 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12739 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V32HImode)\n       == GET_MODE_NUNITS (V64QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V32HImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(reload_completed) && ( cfun->machine->function_return_type != indirect_branch_keep)",
    __builtin_constant_p (
# 13604 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 13606 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( (cfun + 0)->machine->function_return_type != indirect_branch_keep))
    ? (int) (
# 13604 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 13606 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( (cfun + 0)->machine->function_return_type != indirect_branch_keep))
    : -1 },
# 8019 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_ARITH (SFmode))\n    || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 8019 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode))
    || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 8019 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode))
    || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 5535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_MMX_WITH_SSE && TARGET_AVX512VL",
    __builtin_constant_p
# 5535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 20)) != 0))
    ? (int)
# 5535 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)) && ((ix86_isa_flags & (1UL << 20)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_F16C || TARGET_AVX512VL) && TARGET_AVX512VL)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21719 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 21719 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
((((ix86_isa_flags & (1UL << 28)) != 0) || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_CMOVE) && (TARGET_64BIT)",
    __builtin_constant_p (
# 18822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18822 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_arch_features[X86_ARCH_CMOV] || ((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 44)) != 0))) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DImode)\n       == GET_MODE_NUNITS (V32QImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DImode).coeffs[0])
       == (mode_to_nunits (E_V32QImode).coeffs[0])))
    : -1 },
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && TARGET_64BIT",
    __builtin_constant_p
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    ? (int)
# 5259 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0))
    : -1 },
  { "(TARGET_AVX512VBMI && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && 1) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && 1) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(!TARGET_X32\n   && !TARGET_INDIRECT_BRANCH_REGISTER\n   && SIBLING_CALL_P (peep2_next_insn (2))\n   && !reg_mentioned_p (operands[0],\n			CALL_INSN_FUNCTION_USAGE (peep2_next_insn (2)))) && (word_mode == DImode)",




    __builtin_constant_p (
# 13351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (2)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (2))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    ? (int) (
# 13351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 58)) != 0)
   && !(ix86_indirect_branch_register || (cfun + 0)->machine->indirect_branch_type != indirect_branch_keep)
   && (((peep2_next_insn (2)))->jump)
   && !reg_mentioned_p (operands[0],
   (((peep2_next_insn (2))->u.fld[7]).rt_rtx))) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode))
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 7028 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7028 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 20070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "GET_MODE_SIZE (GET_MODE (operands[0])) <= UNITS_PER_WORD\n   && (! TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n   && peep2_regno_dead_p (0, FLAGS_REG)",


    __builtin_constant_p
# 20070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned short) mode_to_bytes (((machine_mode) (operands[0])->mode)).coeffs[0]) <= (((ix86_isa_flags & (1UL << 1)) != 0) ? 8 : 4)
   && (! ix86_tune_features[X86_TUNE_USE_MOV0] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17))
    ? (int)
# 20070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((unsigned short) mode_to_bytes (((machine_mode) (operands[0])->mode)).coeffs[0]) <= (((ix86_isa_flags & (1UL << 1)) != 0) ? 8 : 4)
   && (! ix86_tune_features[X86_TUNE_USE_MOV0] || optimize_insn_for_size_p ())
   && peep2_regno_dead_p (0, 17))
    : -1 },
# 22933 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512BITALG",
    __builtin_constant_p
# 22933 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0))
    ? (int)
# 22933 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 10)) != 0))
    : -1 },
# 10210 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH\n   && reload_completed",

    __builtin_constant_p
# 10210 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && reload_completed)
    ? (int)
# 10210 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
   && reload_completed)
    : -1 },
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && (GET_MODE_NUNITS (V4DFmode)\n       == GET_MODE_NUNITS (V8SFmode))",


    __builtin_constant_p
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    ? (int)
# 3225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V8SFmode).coeffs[0])))
    : -1 },
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX2\n   && (GET_MODE_NUNITS (V4DFmode)\n       == GET_MODE_NUNITS (V8SImode))",


    __builtin_constant_p
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    ? (int)
# 12978 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0)
   && ((mode_to_nunits (E_V4DFmode).coeffs[0])
       == (mode_to_nunits (E_V8SImode).coeffs[0])))
    : -1 },
  { "(reload_completed) && (TARGET_64BIT)",
    __builtin_constant_p (
# 11832 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 11832 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "((TARGET_DOUBLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -2*GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && (((((((((((word_mode == DImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",


    __builtin_constant_p (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20237 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_SLOW_IMUL_IMM8 && optimize_insn_for_speed_p ()\n   && satisfies_constraint_K (operands[2])) && (TARGET_64BIT)",

    __builtin_constant_p (
# 20406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM8] && optimize_insn_for_speed_p ()
   && satisfies_constraint_K (operands[2])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 20406 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_SLOW_IMUL_IMM8] && optimize_insn_for_speed_p ()
   && satisfies_constraint_K (operands[2])) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH)\n	|| TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\n    && (flag_fp_int_builtin_inexact || !flag_trapping_math))\n   || (SSE_FLOAT_MODE_P (XFmode) && TARGET_SSE_MATH\n       && !flag_trapping_math && !flag_rounding_math)",






    __builtin_constant_p
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && !flag_trapping_math && !flag_rounding_math))
    ? (int)
# 17187 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 10)) == 0)
    && (!(((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
 || ((ix86_fpmath & (FPMATH_SSE | FPMATH_387)) == (FPMATH_SSE | FPMATH_387)))
    && flag_unsafe_math_optimizations
    && (flag_fp_int_builtin_inexact || !flag_trapping_math))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_XFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_XFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && !flag_trapping_math && !flag_rounding_math))
    : -1 },
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_FLOAT (SFmode, DImode))\n   || (SSE_FLOAT_MODE_P (SFmode) && TARGET_SSE_MATH\n       && ((DImode != DImode) || TARGET_64BIT))",


    __builtin_constant_p
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    ? (int)
# 4874 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_SFmode) == E_XFmode || ((E_SFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
   || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_SFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_SFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)
       && ((E_DImode != E_DImode) || ((ix86_isa_flags & (1UL << 1)) != 0))))
    : -1 },
  { "(((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",



    __builtin_constant_p ((
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12432 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 12432 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_MINUS, V16HImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V16HImode, operands)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F\n   && (INTVAL (operands[3])\n       == (GET_MODE_UNIT_SIZE (V16SFmode) == 4 ? 0xFFF0 : 0xFC))",


    __builtin_constant_p
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V16SFmode) == 4 ? 0xFFF0 : 0xFC)))
    ? (int)
# 14263 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (((operands[3])->u.hwint[0])
       == (mode_to_unit_size (E_V16SFmode) == 4 ? 0xFFF0 : 0xFC)))
    : -1 },
  { "((ix86_binary_operator_ok (MINUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (PLUS, V8SFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1732 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (PLUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE\n   && (GET_MODE_NUNITS (V16QImode)\n       == GET_MODE_NUNITS (V2DFmode))) && (TARGET_SSE2)",


    __builtin_constant_p (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V2DFmode).coeffs[0]))) &&
# 311 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387\n   && COMMUTATIVE_ARITH_P (operands[3])",

    __builtin_constant_p
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && ((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH))
    ? (int)
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0)
   && ((rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_ARITH))
    : -1 },
  { "(TARGET_WAITPKG) && (Pmode == SImode)",
    __builtin_constant_p (
# 21553 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 19)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 21553 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags2 & (1UL << 19)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 1875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V4HImode))",



    __builtin_constant_p
# 1875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V4HImode).coeffs[0])))
    ? (int)
# 1875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V4HImode).coeffs[0])))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && (!true\n       || DImode == SImode\n       || DImode == DImode)) && (TARGET_AVX))",



    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13076 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && (!true
       || E_DImode == E_SImode
       || E_DImode == E_DImode)) &&
# 345 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_SSE\n   && GET_RTX_CLASS (GET_CODE (operands[3])) == RTX_COMM_COMPARE) && (TARGET_SSE2)",

    __builtin_constant_p (
# 2875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_COMPARE) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    ? (int) (
# 2875 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (rtx_class[(int) (((enum rtx_code) (operands[3])->code))]) == RTX_COMM_COMPARE) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)))
    : -1 },
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "Pmode == DImode",
    __builtin_constant_p
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)
    ? (int)
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_PLUS, V32QImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_PLUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
  { "((TARGET_AVX512VL && ix86_pre_reload_split ()) && (TARGET_AVX512BW)) && ( 1)",
    __builtin_constant_p ((
# 10968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ()) &&
# 10869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 10970 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    ? (int) ((
# 10968 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ix86_pre_reload_split ()) &&
# 10869 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))) &&
# 10970 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 2215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && !(MEM_P (operands[0]) && MEM_P (operands[1]))",

    __builtin_constant_p
# 2215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    ? (int)
# 2215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && !((((enum rtx_code) (operands[0])->code) == MEM) && (((enum rtx_code) (operands[1])->code) == MEM)))
    : -1 },
  { "(TARGET_SSE) && (TARGET_SSE2 && TARGET_64BIT)",
    __builtin_constant_p (
# 1423 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 1423 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1412 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 1597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_SAHF",
    __builtin_constant_p
# 1597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 47)) != 0))
    ? (int)
# 1597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 47)) != 0))
    : -1 },
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE\n   && (GET_MODE_NUNITS (V16QImode)\n       == GET_MODE_NUNITS (V4SFmode))",


    __builtin_constant_p
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    ? (int)
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && ((mode_to_nunits (E_V16QImode).coeffs[0])
       == (mode_to_nunits (E_V4SFmode).coeffs[0])))
    : -1 },
  { "((TARGET_BMI || TARGET_GENERIC)\n   && TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1])) && (TARGET_64BIT)",



    __builtin_constant_p (
# 14007 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 23)) != 0) || (ix86_tune == PROCESSOR_GENERIC))
   && ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 14007 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((ix86_isa_flags & (1UL << 23)) != 0) || (ix86_tune == PROCESSOR_GENERIC))
   && ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_64BIT && TARGET_SSE) && (TARGET_AVX)",
    __builtin_constant_p (
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 16089 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "CONST_INT_P (operands[2])\n   && (QImode != DImode\n       || INTVAL (operands[2]) != HOST_WIDE_INT_C (-0x80000000))\n   && ix86_binary_operator_ok (PLUS, QImode, operands)\n   && ix86_pre_reload_split ()",




    __builtin_constant_p
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    ? (int)
# 7224 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((enum rtx_code) (operands[2])->code) == CONST_INT)
   && (E_QImode != E_DImode
       || ((operands[2])->u.hwint[0]) != -0x80000000L)
   && ix86_binary_operator_ok (PLUS, E_QImode, operands)
   && ix86_pre_reload_split ())
    : -1 },
  { "(TARGET_AVX512F\n   && (GET_MODE_NUNITS (V64QImode)\n       == GET_MODE_NUNITS (V64QImode))) && (TARGET_AVX512BW)",


    __builtin_constant_p (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 12961 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ((mode_to_nunits (E_V64QImode).coeffs[0])
       == (mode_to_nunits (E_V64QImode).coeffs[0]))) &&
# 651 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V4DImode)\n       || register_operand (operands[1], V4DImode))) && (TARGET_AVX)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4DImode)
       || register_operand (operands[1], E_V4DImode))) &&
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4DImode)
       || register_operand (operands[1], E_V4DImode))) &&
# 215 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
# 4925 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_64BIT\n   && TARGET_80387 && X87_ENABLE_FLOAT (DFmode, DImode)",

    __builtin_constant_p
# 4925 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
    ? (int)
# 4925 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)
   && ((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode || ((E_DFmode) == E_DFmode && (E_DImode) == E_SImode) || (E_DImode) == E_HImode))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (US_MINUS, V32QImode, operands)) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (US_MINUS, E_V32QImode, operands)) &&
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
# 21024 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_XSAVE",
    __builtin_constant_p
# 21024 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0))
    ? (int)
# 21024 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 60)) != 0))
    : -1 },
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512F && ix86_binary_operator_ok (MINUS, V8DImode, operands)",
    __builtin_constant_p
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DImode, operands))
    ? (int)
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (MINUS, E_V8DImode, operands))
    : -1 },
  { "(TARGET_USE_BT\n   && (INTVAL (operands[2]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 12174 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_tune_features[X86_TUNE_USE_BT]
   && (((operands[2])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512DQ && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 12058 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 369 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V16SFmode, operands)\n   && (64 == 64 || TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V16SFmode, operands)
   && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, SImode, operands)) && (!TARGET_64BIT)",
    __builtin_constant_p (
# 6520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6520 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 14451 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX512VL\n   && (INTVAL (operands[3]) & 1) == 0\n   && INTVAL (operands[3]) == INTVAL (operands[4]) - 1\n   && (INTVAL (operands[5]) & 1) == 0\n   && INTVAL (operands[5]) == INTVAL (operands[6]) - 1",




    __builtin_constant_p
# 14451 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1)
    ? (int)
# 14451 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)
   && (((operands[3])->u.hwint[0]) & 1) == 0
   && ((operands[3])->u.hwint[0]) == ((operands[4])->u.hwint[0]) - 1
   && (((operands[5])->u.hwint[0]) & 1) == 0
   && ((operands[5])->u.hwint[0]) == ((operands[6])->u.hwint[0]) - 1)
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, DImode, operands)\n   && CONST_SCALAR_INT_P (operands[2])\n   && rtx_equal_p (operands[2], operands[3])) && (TARGET_64BIT)",


    __builtin_constant_p (
# 6563 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6563 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_DImode, operands)
   && ((((enum rtx_code) (operands[2])->code) == CONST_INT) || (((enum rtx_code) (operands[2])->code) == CONST_WIDE_INT))
   && rtx_equal_p (operands[2], operands[3])) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_SSE && (16 == 64 || TARGET_AVX512VL) && (V4SFmode == V16SFmode\n									      || V4SFmode == V8DFmode\n									      || V4SFmode == V8DImode\n									      || V4SFmode == V16SImode)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 2173 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V4SFmode == E_V16SFmode
               || E_V4SFmode == E_V8DFmode
               || E_V4SFmode == E_V8DImode
               || E_V4SFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V8HImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V8HImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V8HImode, operands))
    : -1 },
  { "(TARGET_SSE) && ( reload_completed)",
    __builtin_constant_p (
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 16072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) (
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 16072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20343 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX512BW))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(!TARGET_64BIT && TARGET_STV && TARGET_SSE2\n   && ix86_binary_operator_ok (XOR, DImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",


    __builtin_constant_p (
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 9601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 9597 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0) && ((target_flags & (1U << 26)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)
   && ix86_binary_operator_ok (XOR, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 9601 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "((TARGET_SSE4_1) && (TARGET_SSE2)) && ( reload_completed)",
    __builtin_constant_p ((
# 17296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 17298 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    ? (int) ((
# 17296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))) &&
# 17298 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
( reload_completed))
    : -1 },
  { "(TARGET_AVX512VBMI2) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 23098 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 480 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 23098 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 19)) != 0)) &&
# 480 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "((TARGET_SINGLE_PUSH || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == -GET_MODE_SIZE (word_mode)\n   && ix86_red_zone_size == 0) && ((((((((word_mode == SImode) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (Pmode == SImode)) && (word_mode == SImode)) && (Pmode == SImode)) && (Pmode == SImode))",


    __builtin_constant_p (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    ? (int) (
# 20225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_SINGLE_PUSH] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == -((unsigned short) mode_to_bytes (word_mode).coeffs[0])
   && ((cfun + 0)->machine->frame.red_zone_size) == 0) && (((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode)))
    : -1 },
  { "(TARGET_64BIT) && (Pmode == DImode)",
    __builtin_constant_p (
# 15340 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    ? (int) (
# 15340 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode))
    : -1 },
  { "(TARGET_AVX512VP2INTERSECT) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 23413 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 3)) != 0)) &&
# 23405 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 23413 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags2 & (1UL << 3)) != 0)) &&
# 23405 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(reload_completed\n    && (!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && !(INTVAL (operands[2]) & ~255)\n    && (INTVAL (operands[2]) & 128)) && (TARGET_64BIT)",



    __builtin_constant_p (
# 9886 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~255)
    && (((operands[2])->u.hwint[0]) & 128)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9886 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(reload_completed
    && (!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL] || optimize_function_for_size_p ((cfun + 0)))
    && !(((operands[2])->u.hwint[0]) & ~255)
    && (((operands[2])->u.hwint[0]) & 128)) &&
# 1020 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 21192 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_RDSEED",
    __builtin_constant_p
# 21192 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 45)) != 0))
    ? (int)
# 21192 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 45)) != 0))
    : -1 },
  { "(TARGET_BMI2 && reload_completed\n  && REGNO (operands[1]) == DX_REG) && (TARGET_64BIT)",

    __builtin_constant_p (
# 7845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed
  && (rhs_regno(operands[1])) == 1) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 7845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 24)) != 0) && reload_completed
  && (rhs_regno(operands[1])) == 1) &&
# 1083 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512DQ) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 6228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 6228 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0)) &&
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "((TARGET_USE_BT || optimize_function_for_size_p (cfun))\n   && (INTVAL (operands[3]) & (GET_MODE_BITSIZE (DImode)-1))\n      == GET_MODE_BITSIZE (DImode)-1\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)",



    __builtin_constant_p (
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 12427 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_USE_BT] || optimize_function_for_size_p ((cfun + 0)))
   && (((operands[3])->u.hwint[0]) & (((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1))
      == ((unsigned short) mode_to_bits (E_DImode).coeffs[0])-1
   && ix86_pre_reload_split ()) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 15699 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && !TARGET_SSE4_1",
    __builtin_constant_p
# 15699 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((ix86_isa_flags & (1UL << 38)) != 0))
    ? (int)
# 15699 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && !((ix86_isa_flags & (1UL << 38)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && 1 && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_SSE2))",





    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && 1 && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0))))
    : -1 },
  { "((ix86_unary_operator_ok (MINUS, DImode, operands)\n   && ix86_pre_reload_split ()) && (TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 7395 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_DImode, operands)
   && ix86_pre_reload_split ()) &&
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 7398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_AVX512F && ix86_binary_operator_ok (PLUS, V4SImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11551 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SImode, operands)) &&
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_3DNOW\n   && INTVAL (operands[3]) != INTVAL (operands[4])\n   && INTVAL (operands[5]) != INTVAL (operands[6])",


    __builtin_constant_p
# 569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0)
   && ((operands[3])->u.hwint[0]) != ((operands[4])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) != ((operands[6])->u.hwint[0]))
    ? (int)
# 569 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 2)) != 0)
   && ((operands[3])->u.hwint[0]) != ((operands[4])->u.hwint[0])
   && ((operands[5])->u.hwint[0]) != ((operands[6])->u.hwint[0]))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && ix86_pre_reload_split ())",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_pre_reload_split ()))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 17910 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && ix86_pre_reload_split ()))
    : -1 },
  { "((TARGET_DOUBLE_POP || optimize_insn_for_size_p ())\n   && INTVAL (operands[0]) == 2*GET_MODE_SIZE (word_mode)) && (((((((((((word_mode == DImode) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode)) && (word_mode == DImode)) && (Pmode == DImode)) && (Pmode == DImode))",

    __builtin_constant_p (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    ? (int) (
# 20267 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_DOUBLE_POP] || optimize_insn_for_size_p ())
   && ((operands[0])->u.hwint[0]) == 2*((unsigned short) mode_to_bytes (word_mode).coeffs[0])) && ((((((((((
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1235 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(word_mode == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_DImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V8SFmode, operands)\n   && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_binary_operator_ok (MINUS, SImode, operands)\n   && CONST_INT_P (operands[2])\n   && INTVAL (operands[2]) == INTVAL (operands[3])",


    __builtin_constant_p
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    ? (int)
# 6495 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_SImode, operands)
   && (((enum rtx_code) (operands[2])->code) == CONST_INT)
   && ((operands[2])->u.hwint[0]) == ((operands[3])->u.hwint[0]))
    : -1 },
  { "(TARGET_AVX512F\n   && ix86_binary_operator_ok (MINUS, V8SFmode, operands)\n   && 1) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)
   && ix86_binary_operator_ok (MINUS, E_V8SFmode, operands)
   && 1) &&
# 678 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512VL && TARGET_AVX512BW))",
    __builtin_constant_p (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 13500 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_FMA || TARGET_FMA4)",
    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4332 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4332 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (32 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW) && (TARGET_AVX2))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 11663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)) &&
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 9)) != 0))))
    : -1 },
# 11398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "INTVAL (operands[2]) == GET_MODE_BITSIZE (SImode)-1\n   && (TARGET_USE_CLTD || optimize_function_for_size_p (cfun))\n   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)",


    __builtin_constant_p
# 11398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[2])->u.hwint[0]) == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && (ix86_tune_features[X86_TUNE_USE_CLTD] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    ? (int)
# 11398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((operands[2])->u.hwint[0]) == ((unsigned short) mode_to_bits (E_SImode).coeffs[0])-1
   && (ix86_tune_features[X86_TUNE_USE_CLTD] || optimize_function_for_size_p ((cfun + 0)))
   && ix86_binary_operator_ok (ASHIFTRT, E_SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && 1 && (V16SFmode == V16SFmode\n							      || V16SFmode == V8DFmode\n							      || V16SFmode == V8DImode\n							      || V16SFmode == V16SImode)) && (TARGET_AVX512F))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 5269 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && (E_V16SFmode == E_V16SFmode
             || E_V16SFmode == E_V8DFmode
             || E_V16SFmode == E_V8DImode
             || E_V16SFmode == E_V16SImode)) &&
# 283 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0))))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512VBMI && (32 == 64 || TARGET_AVX512VL)) && (TARGET_AVX512VL))",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 20207 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 18)) != 0) && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))) &&
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 16199 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_64BIT && TARGET_SSE2",
    __builtin_constant_p
# 16199 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))
    ? (int)
# 16199 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))
    : -1 },
  { "(TARGET_BMI && ix86_match_ccmode (insn, CCNOmode)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 9573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 9573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 23)) != 0) && ix86_match_ccmode (insn, E_CCNOmode)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_AVX512F && (64 == 64 || TARGET_AVX512VL) && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode)))
    : -1 },
  { "(TARGET_64BIT) && (Pmode == SImode)",
    __builtin_constant_p (
# 15340 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    ? (int) (
# 15340 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)) &&
# 1230 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_pmode == PMODE_DI ? E_DImode : E_SImode) == E_SImode))
    : -1 },
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V4SImode, operands)",
    __builtin_constant_p
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SImode, operands))
    ? (int)
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SImode, operands))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && ix86_binary_operator_ok (PLUS, V4SFmode, operands)\n   && 1 && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (PLUS, E_V4SFmode, operands)
   && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (32 == 64 || TARGET_AVX512VL) && 1) && (TARGET_AVX))",


    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2198 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (32 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0))))
    : -1 },
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)\n   || (TARGET_SSE && (DFmode == TFmode))",

    __builtin_constant_p
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode == E_TFmode)))
    ? (int)
# 10282 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0))
   || (((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode == E_TFmode)))
    : -1 },
# 9477 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && ix86_vec_interleave_v2df_operator_ok (operands, 0)",
    __builtin_constant_p
# 9477 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_vec_interleave_v2df_operator_ok (operands, 0))
    ? (int)
# 9477 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_vec_interleave_v2df_operator_ok (operands, 0))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && (16 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && ix86_binary_operator_ok (SS_PLUS, V8HImode, operands))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V8HImode, operands)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 11584 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && ix86_binary_operator_ok (SS_PLUS, E_V8HImode, operands)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && (TARGET_AVX512DQ && (V8DFmode == V16SFmode\n							      || V8DFmode == V8DFmode\n							      || V8DFmode == V8DImode\n							      || V8DFmode == V16SImode)))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 6154 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && (E_V8DFmode == E_V16SFmode
             || E_V8DFmode == E_V8DFmode
             || E_V8DFmode == E_V8DImode
             || E_V8DFmode == E_V16SImode))))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE2 && TARGET_AVX512VL && TARGET_AVX512BW)",
    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14009 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 14009 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2 && 1 && 1",
    __builtin_constant_p
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1)
    ? (int)
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1)
    : -1 },
  { "(ix86_binary_operator_ok (MINUS, HImode, operands)\n   && ix86_pre_reload_split ()) && ( 1)",

    __builtin_constant_p (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 7297 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (MINUS, E_HImode, operands)
   && ix86_pre_reload_split ()) &&
# 7300 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 12519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "!TARGET_PARTIAL_REG_STALL\n   && TARGET_ZERO_EXTEND_WITH_AND && optimize_function_for_speed_p (cfun)",

    __builtin_constant_p
# 12519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0)))
    ? (int)
# 12519 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
   && ix86_tune_features[X86_TUNE_ZERO_EXTEND_WITH_AND] && optimize_function_for_speed_p ((cfun + 0)))
    : -1 },
  { "(TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (QImode))) && (TARGET_AVX512VL)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13478 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (PLUS, V32QImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V32QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V32QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F) && ((TARGET_AVX512F && (V2DFmode == V16SFmode\n									      || V2DFmode == V8DFmode\n									      || V2DFmode == V8DImode\n									      || V2DFmode == V16SImode)) && (TARGET_AVX512VL)))",



    __builtin_constant_p (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    ? (int) (
# 188 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 2937 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && (E_V2DFmode == E_V16SFmode
               || E_V2DFmode == E_V8DFmode
               || E_V2DFmode == E_V8DImode
               || E_V2DFmode == E_V16SImode)) &&
# 225 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))))
    : -1 },
  { "(/* Ensure that resulting mask is zero or sign extended operand.  */\n   INTVAL (operands[4]) >= 0\n   && ((INTVAL (operands[3]) > 0\n	&& INTVAL (operands[3]) + INTVAL (operands[4]) <= 32)\n       || (HImode == DImode\n	   && INTVAL (operands[3]) > 32\n	   && INTVAL (operands[3]) + INTVAL (operands[4]) == 64))\n   && ix86_match_ccmode (insn,\n			 /* If zero_extract mode precision is the same\n			    as len, the SF of the zero_extract\n			    comparison will be the most significant\n			    extracted bit, but this could be matched\n			    after splitting only for pos 0 len all bits\n			    trivial extractions.  Require CCZmode.  */\n			 (GET_MODE_PRECISION (HImode)\n			  == INTVAL (operands[3]))\n			 /* Otherwise, require CCZmode if we'd use a mask\n			    with the most significant bit set and can't\n			    widen it to wider mode.  *testdi_1 also\n			    requires CCZmode if the mask has bit\n			    31 set and all bits above it clear.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     >= 32)\n			 /* We can't widen also if val is not a REG.  */\n			 || (INTVAL (operands[3]) + INTVAL (operands[4])\n			     == GET_MODE_PRECISION (GET_MODE (operands[2]))\n			     && !register_operand (operands[2],\n						   GET_MODE (operands[2])))\n			 /* And we shouldn't widen if\n			    TARGET_PARTIAL_REG_STALL.  */\n			 || (TARGET_PARTIAL_REG_STALL\n			     && (INTVAL (operands[3]) + INTVAL (operands[4])\n				 >= (paradoxical_subreg_p (operands[2])\n				     && (GET_MODE_CLASS\n					  (GET_MODE (SUBREG_REG (operands[2])))\n					 == MODE_INT)\n				     ? GET_MODE_PRECISION\n					 (GET_MODE (SUBREG_REG (operands[2])))\n				     : GET_MODE_PRECISION\n					 (GET_MODE (operands[2])))))\n			 ? CCZmode : CCNOmode)) && ( 1)",
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
    __builtin_constant_p (
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_HImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_HImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 8866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) (
# 8824 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(
   ((operands[4])->u.hwint[0]) >= 0
   && ((((operands[3])->u.hwint[0]) > 0
 && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) <= 32)
       || (E_HImode == E_DImode
    && ((operands[3])->u.hwint[0]) > 32
    && ((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0]) == 64))
   && ix86_match_ccmode (insn,






    (((unsigned short) mode_to_precision (E_HImode).coeffs[0])
     == ((operands[3])->u.hwint[0]))





    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        >= 32)

    || (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
        == ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
        && !register_operand (operands[2],
         ((machine_mode) (operands[2])->mode)))


    || (ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL]
        && (((operands[3])->u.hwint[0]) + ((operands[4])->u.hwint[0])
     >= (paradoxical_subreg_p (operands[2])
         && (((enum mode_class) mode_class[((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)])

      == MODE_INT)
         ? ((unsigned short) mode_to_precision (((machine_mode) ((((operands[2])->u.fld[0]).rt_rtx))->mode)).coeffs[0])

         : ((unsigned short) mode_to_precision (((machine_mode) (operands[2])->mode)).coeffs[0])
                              )))
    ? E_CCZmode : E_CCNOmode)) &&
# 8866 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V32HImode, operands)) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V32HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V32HImode, operands)) &&
# 349 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(((INTVAL (operands[3]) & (4 * BITS_PER_UNIT)) == 0\n   && ix86_pre_reload_split ()) && (!TARGET_64BIT)) && ( 1)",

    __builtin_constant_p ((
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (4 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11299 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    ? (int) ((
# 11296 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((operands[3])->u.hwint[0]) & (4 * (8))) == 0
   && ix86_pre_reload_split ()) &&
# 1082 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(!((ix86_isa_flags & (1UL << 1)) != 0))) &&
# 11299 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( 1))
    : -1 },
# 21573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_WAITPKG",
    __builtin_constant_p
# 21573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 19)) != 0))
    ? (int)
# 21573 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags2 & (1UL << 19)) != 0))
    : -1 },
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "optimize_insn_for_speed_p ()\n   && ((QImode == HImode\n       && TARGET_LCP_STALL)\n       || (TARGET_SPLIT_LONG_MOVES\n          && get_attr_length (insn) >= ix86_cur_cost ()->large_insn))",




    __builtin_constant_p
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_QImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn)))
    ? (int)
# 19422 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(optimize_insn_for_speed_p ()
   && ((E_QImode == E_HImode
       && ix86_tune_features[X86_TUNE_LCP_STALL])
       || (ix86_tune_features[X86_TUNE_SPLIT_LONG_MOVES]
          && get_attr_length (insn) >= (optimize_insn_for_size_p () ? &ix86_size_cost: ix86_cost)->large_insn)))
    : -1 },
  { "(TARGET_SSE2\n   && ((unsigned) exact_log2 (INTVAL (operands[3]))\n       < GET_MODE_NUNITS (V16QImode))) && (TARGET_SSE4_1)",


    __builtin_constant_p (
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V16QImode).coeffs[0]))) &&
# 14166 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)))
    ? (int) (
# 14186 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((unsigned) exact_log2 (((operands[3])->u.hwint[0]))
       < (mode_to_nunits (E_V16QImode).coeffs[0]))) &&
# 14166 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0)))
    : -1 },
# 21375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_CLFLUSHOPT",
    __builtin_constant_p
# 21375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 25)) != 0))
    ? (int)
# 21375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 25)) != 0))
    : -1 },
  { "(TARGET_AVX512BW\n   && (2\n       > GET_MODE_SIZE (QImode))) && (TARGET_AVX512VL && TARGET_AVX512BW)",


    __builtin_constant_p (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 13558 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)
   && (2
       > ((unsigned short) mode_to_bytes (E_QImode).coeffs[0]))) &&
# 13476 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0) && ((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_AVX512VL) && (TARGET_SSE)",
    __builtin_constant_p (
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 7710 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)))
    ? (int) (
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 20)) != 0)) &&
# 7710 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)))
    : -1 },
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (NEG, HImode, operands)\n   && mode_signbit_p (HImode, operands[2])",

    __builtin_constant_p
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_HImode, operands)
   && mode_signbit_p (E_HImode, operands[2]))
    ? (int)
# 10067 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (NEG, E_HImode, operands)
   && mode_signbit_p (E_HImode, operands[2]))
    : -1 },
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && ix86_binary_operator_ok (IOR, V8QImode, operands)",

    __builtin_constant_p
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (IOR, E_V8QImode, operands))
    ? (int)
# 1632 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && ix86_binary_operator_ok (IOR, E_V8QImode, operands))
    : -1 },
  { "((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n   < (HOST_WIDE_INT_1U << INTVAL (operands[2]))) && (TARGET_64BIT)",

    __builtin_constant_p (
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0]))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6325 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((unsigned long) ((operands[3])->u.hwint[0])
   < (1UL << ((operands[2])->u.hwint[0]))) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 7078 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && peep2_reg_dead_p (2, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])",


    __builtin_constant_p
# 7078 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1]))
    ? (int)
# 7078 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1]))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE && ix86_binary_operator_ok (MINUS, V4SFmode, operands)\n   && 1 && (V4SFmode == V16SFmode\n							      || V4SFmode == V8DFmode\n							      || V4SFmode == V8DImode\n							      || V4SFmode == V16SImode))",




    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 1702 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && ix86_binary_operator_ok (MINUS, E_V4SFmode, operands)
   && 1 && (E_V4SFmode == E_V16SFmode
             || E_V4SFmode == E_V8DFmode
             || E_V4SFmode == E_V8DImode
             || E_V4SFmode == E_V16SImode)))
    : -1 },
# 9221 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_FAST_PREFIX && !TARGET_PARTIAL_REG_STALL)\n    || optimize_function_for_size_p (cfun)",

    __builtin_constant_p
# 9221 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_FAST_PREFIX] && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    || optimize_function_for_size_p ((cfun + 0)))
    ? (int)
# 9221 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_FAST_PREFIX] && !ix86_tune_features[X86_TUNE_PARTIAL_REG_STALL])
    || optimize_function_for_size_p ((cfun + 0)))
    : -1 },
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_AVX\n   && avx_vperm2f128_parallel (operands[3], V8SFmode)",

    __builtin_constant_p
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && avx_vperm2f128_parallel (operands[3], E_V8SFmode))
    ? (int)
# 21072 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)
   && avx_vperm2f128_parallel (operands[3], E_V8SFmode))
    : -1 },
# 1816 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "TARGET_SSE2 && reload_completed\n   && SSE_REGNO_P (REGNO (operands[0]))",

    __builtin_constant_p
# 1816 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed
   && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))
    ? (int)
# 1816 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && reload_completed
   && (((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (20) <= (unsigned long) (27) - (unsigned long) (20)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (44) <= (unsigned long) (51) - (unsigned long) (44)) || ((unsigned long) (((rhs_regno(operands[0])))) - (unsigned long) (52) <= (unsigned long) (67) - (unsigned long) (52))))
    : -1 },
# 8019 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_80387 && X87_ENABLE_ARITH (DFmode))\n    || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",

    __builtin_constant_p
# 8019 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode))
    || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 8019 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((((target_flags & (1U << 1)) != 0) && (flag_unsafe_math_optimizations || flag_excess_precision == EXCESS_PRECISION_FAST || (E_DFmode) == E_XFmode))
    || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "ix86_unary_operator_ok (MINUS, SImode, operands)",
    __builtin_constant_p
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_SImode, operands))
    ? (int)
# 6912 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_unary_operator_ok (MINUS, E_SImode, operands))
    : -1 },
  { "(ix86_binary_operator_ok (PLUS, DImode, operands)) && (TARGET_64BIT)",
    __builtin_constant_p (
# 6845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 6845 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(ix86_binary_operator_ok (PLUS, E_DImode, operands)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && (TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n   && (16 == 64 || TARGET_AVX512VL))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) &&
# 12091 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 38)) != 0) && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))
   && (16 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
# 11928 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_64BIT && TARGET_BMI2",
    __builtin_constant_p
# 11928 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 24)) != 0))
    ? (int)
# 11928 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 24)) != 0))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_SSE2 && (64 == 64 || TARGET_AVX512VL) && TARGET_AVX512BW\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))) && (TARGET_AVX512BW))",

    __builtin_constant_p (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    ? (int) (
# 69 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && (64 == 64 || ((ix86_isa_flags & (1UL << 20)) != 0)) && ((ix86_isa_flags & (1UL << 11)) != 0)
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM))) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0))))
    : -1 },
  { "(TARGET_SSE\n   && (register_operand (operands[0], V4DFmode)\n       || register_operand (operands[1], V4DFmode))) && (TARGET_AVX)",


    __builtin_constant_p (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4DFmode)
       || register_operand (operands[1], E_V4DFmode))) &&
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && (register_operand (operands[0], E_V4DFmode)
       || register_operand (operands[1], E_V4DFmode))) &&
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(x86_64_immediate_operand (operands[2], VOIDmode)\n   && INTVAL (operands[2]) != -1\n   && INTVAL (operands[2]) != 2147483647) && (TARGET_64BIT)",


    __builtin_constant_p (
# 18391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(x86_64_immediate_operand (operands[2], E_VOIDmode)
   && ((operands[2])->u.hwint[0]) != -1
   && ((operands[2])->u.hwint[0]) != 2147483647) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 18391 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(x86_64_immediate_operand (operands[2], E_VOIDmode)
   && ((operands[2])->u.hwint[0]) != -1
   && ((operands[2])->u.hwint[0]) != 2147483647) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
  { "(TARGET_AVX512BW && ix86_binary_operator_ok (PLUS, V16QImode, operands)) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V16QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 11565 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0) && ix86_binary_operator_ok (PLUS, E_V16QImode, operands)) &&
# 229 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
# 19792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "(TARGET_READ_MODIFY_WRITE || optimize_insn_for_size_p ())\n   && COMMUTATIVE_ARITH_P (operands[2])\n   && peep2_reg_dead_p (2, operands[0])\n   && !reg_overlap_mentioned_p (operands[0], operands[1])\n   && ix86_match_ccmode (peep2_next_insn (0),\n			 GET_CODE (operands[2]) == PLUS\n			 ? CCGOCmode : CCNOmode)",






    __builtin_constant_p
# 19792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (0),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode))
    ? (int)
# 19792 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
((ix86_tune_features[X86_TUNE_READ_MODIFY_WRITE] || optimize_insn_for_size_p ())
   && ((rtx_class[(int) (((enum rtx_code) (operands[2])->code))]) == RTX_COMM_ARITH)
   && peep2_reg_dead_p (2, operands[0])
   && !reg_overlap_mentioned_p (operands[0], operands[1])
   && ix86_match_ccmode (peep2_next_insn (0),
    ((enum rtx_code) (operands[2])->code) == PLUS
    ? E_CCGOCmode : E_CCNOmode))
    : -1 },
  { "(TARGET_SSE2) && (TARGET_64BIT)",
    __builtin_constant_p (
# 15271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    ? (int) (
# 15271 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)) &&
# 1023 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 1)) != 0)))
    : -1 },
# 2444 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE)\n   && (TARGET_SSE || TARGET_3DNOW_A)\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",


    __builtin_constant_p
# 2444 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 2444 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0)))
   && (((ix86_isa_flags & (1UL << 50)) != 0) || ((ix86_isa_flags & (1UL << 3)) != 0))
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
  { "(TARGET_AVX512DQ && 1) && (TARGET_AVX512VL)",
    __builtin_constant_p (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    ? (int) (
# 22294 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 13)) != 0) && 1) &&
# 327 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0)))
    : -1 },
  { "(TARGET_AVX512F) && ((TARGET_AVX512F && 1 && (V2DFmode == V16SFmode\n							      || V2DFmode == V8DFmode\n							      || V2DFmode == V8DImode\n							      || V2DFmode == V16SImode)) && (TARGET_AVX512VL))",



    __builtin_constant_p (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    ? (int) (
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/subst.md"
(((ix86_isa_flags & (1UL << 15)) != 0)) && (
# 4579 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0) && 1 && (E_V2DFmode == E_V16SFmode
             || E_V2DFmode == E_V8DFmode
             || E_V2DFmode == E_V8DImode
             || E_V2DFmode == E_V16SImode)) &&
# 3994 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 20)) != 0))))
    : -1 },
  { "(TARGET_SSE2 && 1 && 1) && (TARGET_AVX512BW)",
    __builtin_constant_p (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    ? (int) (
# 15956 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && 1 && 1) &&
# 457 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 11)) != 0)))
    : -1 },
  { "(TARGET_SSE2 && ix86_binary_operator_ok (PLUS, V8DImode, operands)) && (TARGET_AVX512F)",
    __builtin_constant_p (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    ? (int) (
# 11509 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0) && ix86_binary_operator_ok (PLUS, E_V8DImode, operands)) &&
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 15)) != 0)))
    : -1 },
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
  { "TARGET_80387 || (SSE_FLOAT_MODE_P (DFmode) && TARGET_SSE_MATH)",
    __builtin_constant_p
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    ? (int)
# 10156 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((target_flags & (1U << 1)) != 0) || (((((ix86_isa_flags & (1UL << 50)) != 0) && (E_DFmode) == E_SFmode) || (((ix86_isa_flags & (1UL << 51)) != 0) && (E_DFmode) == E_DFmode)) && ((ix86_fpmath & FPMATH_SSE) != 0)))
    : -1 },
  { "(TARGET_LZCNT) && ( TARGET_AVOID_FALSE_DEP_FOR_BMI && epilogue_completed\n   && optimize_function_for_speed_p (cfun)\n   && !reg_mentioned_p (operands[0], operands[1]))",


    __builtin_constant_p (
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    ? (int) (
# 14233 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
(((ix86_isa_flags & (1UL << 35)) != 0)) &&
# 14253 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.md"
( ix86_tune_features[X86_TUNE_AVOID_FALSE_DEP_FOR_BMI] && epilogue_completed
   && optimize_function_for_speed_p ((cfun + 0))
   && !reg_mentioned_p (operands[0], operands[1])))
    : -1 },
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE2\n   && (GET_MODE_NUNITS (V4SFmode)\n       == GET_MODE_NUNITS (V8HImode))",


    __builtin_constant_p
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    ? (int)
# 12995 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 51)) != 0)
   && ((mode_to_nunits (E_V4SFmode).coeffs[0])
       == (mode_to_nunits (E_V8HImode).coeffs[0])))
    : -1 },
  { "(TARGET_SSE\n   && 1 && 1) && (TARGET_AVX)",

    __builtin_constant_p (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 2222 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)
   && 1 && 1) &&
# 274 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_FMA || TARGET_FMA4) && (TARGET_AVX)",
    __builtin_constant_p (
# 4560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    ? (int) (
# 4560 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 29)) != 0) || ((ix86_isa_flags & (1UL << 30)) != 0)) &&
# 279 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 8)) != 0)))
    : -1 },
  { "(TARGET_SSE) && (TARGET_SSE4A)",
    __builtin_constant_p (
# 1423 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1413 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 54)) != 0)))
    ? (int) (
# 1423 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0)) &&
# 1413 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 54)) != 0)))
    : -1 },
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
  { "TARGET_SSE && 1\n   && !(MEM_P (operands[1]) && MEM_P (operands[2]))",

    __builtin_constant_p
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    ? (int)
# 13273 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/sse.md"
(((ix86_isa_flags & (1UL << 50)) != 0) && 1
   && !((((enum rtx_code) (operands[1])->code) == MEM) && (((enum rtx_code) (operands[2])->code) == MEM)))
    : -1 },
# 2353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
  { "(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE",
    __builtin_constant_p
# 2353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 50)) != 0))
    ? (int)
# 2353 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
((((ix86_isa_flags & (1UL << 36)) != 0) || (((ix86_isa_flags & (1UL << 1)) != 0) && ((ix86_isa_flags & (1UL << 51)) != 0))) && ((ix86_isa_flags & (1UL << 50)) != 0))
    : -1 },

};


int
main(void)
{
  unsigned int i;
  const char *p;
  puts ("(define_conditions [");

  for (i = 0; i < (sizeof (insn_conditions) / sizeof ((insn_conditions)[0])); i++)
    {
      printf ("  (%d \"", insn_conditions[i].value);
      for (p = insn_conditions[i].expr; *p; p++)
        {
          switch (*p)
      {
      case '\\':
      case '\"': putchar ('\\'); break;
      default: break;
      }
          putchar (*p);
        }
      puts ("\")");
    }

  puts ("])");
  fflush (
# 2383 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md" 3 4
         stdout
# 2383 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
               );
return ferror (
# 2384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md" 3 4
              stdout
# 2384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
                    ) != 0 ? 
# 2384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md" 3 4
                             1 
# 2384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
                                             : 
# 2384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md" 3 4
                                               0
# 2384 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/mmx.md"
                                                                ;
}
