# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
# 1 "/home/giulianob/gcc_git_gnu/build_temp/gcc//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
# 21 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
# 1 "./config.h" 1





# 1 "./auto-host.h" 1
# 7 "./config.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
extern "C" {
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
}
# 9 "./config.h" 2
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 44 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 865 "/usr/include/stdio.h" 2 3 4
# 873 "/usr/include/stdio.h" 3 4
}
# 47 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 187 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 209 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h" 1
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 110 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 174 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int isalnum (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalnum; }
extern __inline __attribute__ ((__gnu_inline__)) int isalpha (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalpha; }
extern __inline __attribute__ ((__gnu_inline__)) int iscntrl (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _IScntrl; }
extern __inline __attribute__ ((__gnu_inline__)) int isdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISdigit; }
extern __inline __attribute__ ((__gnu_inline__)) int islower (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISlower; }
extern __inline __attribute__ ((__gnu_inline__)) int isgraph (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISgraph; }
extern __inline __attribute__ ((__gnu_inline__)) int isprint (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISprint; }
extern __inline __attribute__ ((__gnu_inline__)) int ispunct (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISpunct; }
extern __inline __attribute__ ((__gnu_inline__)) int isspace (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISspace; }
extern __inline __attribute__ ((__gnu_inline__)) int isupper (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISupper; }
extern __inline __attribute__ ((__gnu_inline__)) int isxdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISxdigit; }

extern __inline __attribute__ ((__gnu_inline__)) int isblank (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISblank; }
# 206 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) tolower (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_tolower_loc ())[__c] : __c;
}

extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) toupper (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_toupper_loc ())[__c] : __c;
}
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h" 2
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/cstring" 1 3
# 39 "/usr/include/c++/10/cstring" 3
       
# 40 "/usr/include/c++/10/cstring" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 1 3
# 262 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 284 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 522 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h" 1 3
# 523 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/cpu_defines.h" 1 3
# 526 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3
# 42 "/usr/include/c++/10/cstring" 2 3
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4
}
# 43 "/usr/include/c++/10/cstring" 2 3
# 71 "/usr/include/c++/10/cstring" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 122 "/usr/include/c++/10/cstring" 3

}
}
# 236 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/c++/10/new" 1 3
# 38 "/usr/include/c++/10/new" 3
       
# 39 "/usr/include/c++/10/new" 3


# 1 "/usr/include/c++/10/exception" 1 3
# 33 "/usr/include/c++/10/exception" 3
       
# 34 "/usr/include/c++/10/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception.h" 1 3
# 34 "/usr/include/c++/10/bits/exception.h" 3
       
# 35 "/usr/include/c++/10/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/10/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/10/exception" 2 3

extern "C++" {

namespace std
{






  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 105 "/usr/include/c++/10/exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 137 "/usr/include/c++/10/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/10/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/10/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception_defines.h" 1 3
# 38 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/typeinfo" 1 3
# 32 "/usr/include/c++/10/typeinfo" 3
       
# 33 "/usr/include/c++/10/typeinfo" 3



# 1 "/usr/include/c++/10/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/10/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/10/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/10/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/10/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/10/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/usr/include/c++/10/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }



    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/new" 1 3
# 41 "/usr/include/c++/10/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;






  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 118 "/usr/include/c++/10/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 145 "/usr/include/c++/10/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };



    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }




    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }


  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 213 "/usr/include/c++/10/bits/exception_ptr.h" 3
      return exception_ptr();

    }


}

}

#pragma GCC visibility pop
# 148 "/usr/include/c++/10/exception" 2 3
# 1 "/usr/include/c++/10/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/10/bits/nested_exception.h" 3
#pragma GCC visibility push(default)






# 1 "/usr/include/c++/10/bits/move.h" 1 3
# 38 "/usr/include/c++/10/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}

# 1 "/usr/include/c++/10/type_traits" 1 3
# 32 "/usr/include/c++/10/type_traits" 3
       
# 33 "/usr/include/c++/10/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "/usr/include/c++/10/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template <typename _Type>
    struct __type_identity
    { using type = _Type; };

  template<typename _Tp>
    using __type_identity_t = typename __type_identity<_Tp>::type;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 188 "/usr/include/c++/10/type_traits" 3
  template<typename>
    struct is_reference;
  template<typename>
    struct is_function;
  template<typename>
    struct is_void;
  template<typename>
    struct __is_array_unknown_bounds;




  template <typename _Tp, size_t = sizeof(_Tp)>
    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)
    { return {}; }

  template <typename _TypeIdentity,
      typename _NestedType = typename _TypeIdentity::type>
    constexpr typename __or_<
      is_reference<_NestedType>,
      is_function<_NestedType>,
      is_void<_NestedType>,
      __is_array_unknown_bounds<_NestedType>
    >::type __is_complete_or_unbounded(_TypeIdentity)
    { return {}; }






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };

  template<typename>
    struct remove_cv;


  template<typename _Tp>
    using __remove_cv_t = typename remove_cv<_Tp>::type;

  template<typename>
    struct is_const;



  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };
# 284 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 364 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public __not_<is_function<_Tp>>::type { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public is_function<_Tp>::type { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename _Tp>
    struct is_function
    : public __bool_constant<!is_const<const _Tp>::value> { };

  template<typename _Tp>
    struct is_function<_Tp&>
    : public false_type { };

  template<typename _Tp>
    struct is_function<_Tp&&>
    : public false_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { } __attribute__ ((__deprecated__ ("use '" "std::is_null_pointer" "' instead")));




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __not_<is_fundamental<_Tp>>::type { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename _Tp, typename... _Types>
    using __is_one_of = __or_<is_same<_Tp, _Types>...>;


  template<typename _Tp>
    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,
   signed char, signed short, signed int, signed long,
   signed long long

   , signed __int128
# 604 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,
   unsigned char, unsigned short, unsigned int, unsigned long,
   unsigned long long

   , unsigned __int128
# 623 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_standard_integer
      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;


  template<typename...> using __void_t = void;



  template<typename _Tp, typename = void>
    struct __is_referenceable
    : public false_type
    { };

  template<typename _Tp>
    struct __is_referenceable<_Tp, __void_t<_Tp&>>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct
   
    is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 770 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __is_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public false_type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl<true, _Tp, _Args...>
    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<true, _Tp, _Arg>
    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<true, _Tp>
    : public __bool_constant<noexcept(_Tp())>
    { };

  template<typename _Tp, size_t _Num>
    struct __is_nt_constructible_impl<true, _Tp[_Num]>
    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>
    { };
# 1001 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),
       _Tp, _Args...>;


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
    : public __bool_constant<__is_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_assignable_impl
    : public __and_<__bool_constant<__is_assignable(_Tp, _Up)>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __is_nothrow_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<__is_constructible_impl<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<__is_copy_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<__is_move_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<__is_destructible_safe<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename _Tp, typename _Up>
    struct is_same

    : public integral_constant<bool, __is_same_as(_Tp, _Up)>



    { };
# 1410 "/usr/include/c++/10/type_traits" 3
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    {
      typedef typename is_void<_To>::type type;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };


  template<typename _ToElementType, typename _FromElementType>
    using __is_array_convertible
      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_nt_convertible_helper
    : is_void<_To>
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_nt_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1>
 static
 __bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      using type = decltype(__test<_From, _To>(0));
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct __is_nothrow_convertible
    : public __is_nt_convertible_helper<_From, _To>::type
    { };
# 1508 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<volatile _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const volatile _Tp>
    { using type = _Tp; };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1730 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };






  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1806 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1884 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };






  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 1932 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2067 "/usr/include/c++/10/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2106 "/usr/include/c++/10/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef __remove_cv_t<_Up> __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };


  template<typename _Tp>
    using __decay_t = typename decay<_Tp>::type;

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };


  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;

  template<typename... _Cond>
    using _Require = __enable_if_t<__and_<_Cond...>::value>;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      using __cond_t
 = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());



    template<typename _Tp, typename _Up>
      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>
      _S_test(int);
# 2239 "/usr/include/c++/10/type_traits" 3
    template<typename, typename>
      static __failure_type
      _S_test_2(...);

    template<typename _Tp, typename _Up>
      static decltype(_S_test_2<_Tp, _Up>(0))
      _S_test(...);
  };


  template<>
    struct common_type<>
    { };


  template<typename _Tp0>
    struct common_type<_Tp0>
    : public common_type<_Tp0, _Tp0>
    { };


  template<typename _Tp1, typename _Tp2,
    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>
    struct __common_type_impl
    {


      using type = common_type<_Dp1, _Dp2>;
    };

  template<typename _Tp1, typename _Tp2>
    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>
    : private __do_common_type_impl
    {


      using type = decltype(_S_test<_Tp1, _Tp2>(0));
    };


  template<typename _Tp1, typename _Tp2>
    struct common_type<_Tp1, _Tp2>
    : public __common_type_impl<_Tp1, _Tp2>::type
    { };

  template<typename...>
    struct __common_type_pack
    { };

  template<typename, typename, typename = void>
    struct __common_type_fold;


  template<typename _Tp1, typename _Tp2, typename... _Rp>
    struct common_type<_Tp1, _Tp2, _Rp...>
    : public __common_type_fold<common_type<_Tp1, _Tp2>,
    __common_type_pack<_Rp...>>
    { };




  template<typename _CTp, typename... _Rp>
    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,
         __void_t<typename _CTp::type>>
    : public common_type<typename _CTp::type, _Rp...>
    { };


  template<typename _CTp, typename _Rp>
    struct __common_type_fold<_CTp, _Rp, void>
    { };

  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };


  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef __remove_cvref_t<_Arg> _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_reference<_Arg>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;





  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2624 "/usr/include/c++/10/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };

  template<typename _Tp>
   
    inline
    _Require<__not_<__is_tuple_like<_Tp>>,
      is_move_constructible<_Tp>,
      is_move_assignable<_Tp>>
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
   
    inline
    __enable_if_t<__is_swappable<_Tp>::value>
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;







  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl : false_type { };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:


      static typename _Result::type _S_get();

      template<typename _Tp>
 static void _S_conv(_Tp);


      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>
 static true_type
 _S_test(int);

      template<typename _Tp>
 static false_type
 _S_test(...);

    public:
      using type = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  struct __nonesuchbase {};
  struct __nonesuch : private __nonesuchbase {
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
#pragma GCC diagnostic pop
# 3455 "/usr/include/c++/10/type_traits" 3

}
# 58 "/usr/include/c++/10/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 138 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 179 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
   
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type



    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)

    {




      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
   
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type



    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "/usr/include/c++/10/bits/nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };



  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }





  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }




  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }




  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 149 "/usr/include/c++/10/exception" 2 3
# 42 "/usr/include/c++/10/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 126 "/usr/include/c++/10/new" 3
 void* operator new(std::size_t)
  __attribute__((__externally_visible__));
 void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

 void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
 void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 174 "/usr/include/c++/10/new" 3
 inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
 inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 230 "/usr/include/c++/10/new" 3
#pragma GCC visibility pop
# 237 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/c++/10/utility" 1 3
# 58 "/usr/include/c++/10/utility" 3
       
# 59 "/usr/include/c++/10/utility" 3
# 69 "/usr/include/c++/10/utility" 3
# 1 "/usr/include/c++/10/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/10/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 85 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 70 "/usr/include/c++/10/utility" 2 3
# 1 "/usr/include/c++/10/bits/stl_pair.h" 1 3
# 69 "/usr/include/c++/10/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 80 "/usr/include/c++/10/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();




  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };
# 210 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 256 "/usr/include/c++/10/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;



      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 288 "/usr/include/c++/10/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }



      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>

        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
      is_assignable<_T2&, const _U2&>>::value,
      pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
      is_assignable<_T2&, _U2&&>>::value,
      pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }


      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>

        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };
# 464 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }
# 487 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 524 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 564 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 583 "/usr/include/c++/10/bits/stl_pair.h" 3

}
# 71 "/usr/include/c++/10/utility" 2 3





# 1 "/usr/include/c++/10/initializer_list" 1 3
# 33 "/usr/include/c++/10/initializer_list" 3
       
# 34 "/usr/include/c++/10/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };







  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }







  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 77 "/usr/include/c++/10/utility" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };







  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }





  template<size_t... _Indexes> struct _Index_tuple { };
# 307 "/usr/include/c++/10/utility" 3
  template<size_t _Num>
    struct _Build_index_tuple
    {






      using __type = _Index_tuple<__integer_pack(_Num)...>;

    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence



      = integer_sequence<_Tp, __integer_pack(_Num)...>;





  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 473 "/usr/include/c++/10/utility" 3

}
# 238 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 259 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 36 "/usr/include/c++/10/stdlib.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 75 "/usr/include/c++/10/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 826 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/10/cstdlib" 2 3

# 1 "/usr/include/c++/10/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/10/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/10/bits/std_abs.h" 3
# 46 "/usr/include/c++/10/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/10/cstdlib" 2 3
# 121 "/usr/include/c++/10/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/10/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/10/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/10/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 260 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2







# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 295 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 296 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 196 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 300 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 307 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) throw () __attribute__ ((__nonnull__ (1)));







extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 338 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 339 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 62 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 148 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 168 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 178 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 214 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 293 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 304 "/usr/include/fcntl.h" 3 4
}
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 397 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/wait.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern "C" {
# 77 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);
# 100 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 121 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);






struct rusage;






extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) throw ();




extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) throw ();



}
# 398 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 1 3 4
# 113 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4
extern "C" {



int memfd_create (const char *__name, unsigned int __flags) throw ();



int mlock2 (const void *__addr, size_t __length, unsigned int __flags) throw ();





int pkey_alloc (unsigned int __flags, unsigned int __access_rights) throw ();



int pkey_set (int __key, unsigned int __access_rights) throw ();



int pkey_get (int __key) throw ();



int pkey_free (int __key) throw ();



int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) throw ();

}
# 114 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 2 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4




extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 70 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (const void *__addr, size_t __len) throw ();


extern int munlock (const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 133 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);

}
# 429 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/resource.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/resource.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,





  __RLIMIT_RTTIME = 15,


  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 131 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 3 4
struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };


    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };
# 180 "/usr/include/x86_64-linux-gnu/bits/resource.h" 2 3 4







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};


extern "C" {




extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
      const struct rlimit *__new_limit,
      struct rlimit *__old_limit) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) throw ();



}
# 25 "/usr/include/x86_64-linux-gnu/sys/resource.h" 2 3 4






extern "C" {
# 42 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;





extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) throw ();
# 61 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) throw ();






extern int setrlimit (__rlimit_resource_t __resource,
        const struct rlimit *__rlimits) throw ();
# 81 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) throw ();




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) throw ();





extern int getpriority (__priority_which_t __which, id_t __who) throw ();



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     throw ();

}
# 441 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/times.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/times.h" 3 4
extern "C" {


struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;

    clock_t tms_cutime;
    clock_t tms_cstime;
  };






extern clock_t times (struct tms *__buffer) throw ();

}
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 521 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4

# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 2 3 4
# 526 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const wchar_t * __restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) wcstoimax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const wchar_t *
          __restrict __nptr,
          wchar_t **
          __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) wcstoumax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4
}
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2




# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 576 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 599 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 40 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 600 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 671 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"

# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
extern "C" {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 2


typedef unsigned int hashval_t;




typedef hashval_t (*htab_hash) (const void *);






typedef int (*htab_eq) (const void *, const void *);



typedef void (*htab_del) (void *);





typedef int (*htab_trav) (void **, void *);





typedef void *(*htab_alloc) (size_t, size_t);


typedef void (*htab_free) (void *);



typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);
typedef void (*htab_free_with_arg) (void *, void *);
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
struct htab {

  htab_hash hash_f;


  htab_eq eq_f;


  htab_del del_f;


  void **entries;


  size_t size;


  size_t n_elements;


  size_t n_deleted;



  unsigned int searches;



  unsigned int collisions;


  htab_alloc alloc_f;
  htab_free free_f;


  void *alloc_arg;
  htab_alloc_with_arg alloc_with_arg_f;
  htab_free_with_arg free_with_arg_f;



  unsigned int size_prime_index;
};

typedef struct htab *htab_t;


enum insert_option {NO_INSERT, INSERT};



extern htab_t htab_create_alloc (size_t, htab_hash,
                                    htab_eq, htab_del,
                                    htab_alloc, htab_free);

extern htab_t htab_create_alloc_ex (size_t, htab_hash,
                                      htab_eq, htab_del,
                                      void *, htab_alloc_with_arg,
                                      htab_free_with_arg);

extern htab_t htab_create_typed_alloc (size_t, htab_hash, htab_eq, htab_del,
     htab_alloc, htab_alloc, htab_free);


extern htab_t htab_create (size_t, htab_hash, htab_eq, htab_del);
extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);

extern void htab_set_functions_ex (htab_t, htab_hash,
                                       htab_eq, htab_del,
                                       void *, htab_alloc_with_arg,
                                       htab_free_with_arg);

extern void htab_delete (htab_t);
extern void htab_empty (htab_t);

extern void * htab_find (htab_t, const void *);
extern void ** htab_find_slot (htab_t, const void *, enum insert_option);
extern void * htab_find_with_hash (htab_t, const void *, hashval_t);
extern void ** htab_find_slot_with_hash (htab_t, const void *,
       hashval_t, enum insert_option);
extern void htab_clear_slot (htab_t, void **);
extern void htab_remove_elt (htab_t, const void *);
extern void htab_remove_elt_with_hash (htab_t, const void *, hashval_t);

extern void htab_traverse (htab_t, htab_trav, void *);
extern void htab_traverse_noresize (htab_t, htab_trav, void *);

extern size_t htab_size (htab_t);
extern size_t htab_elements (htab_t);
extern double htab_collisions (htab_t);


extern htab_hash htab_hash_pointer;


extern htab_eq htab_eq_pointer;


extern hashval_t htab_hash_string (const void *);


extern hashval_t iterative_hash (const void *, size_t, hashval_t);




}
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 2


extern "C" {
# 84 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
extern int filename_cmp (const char *s1, const char *s2);


extern int filename_ncmp (const char *s1, const char *s2,
     size_t n);

extern hashval_t filename_hash (const void *s);

extern int filename_eq (const void *s1, const void *s2);

extern int canonical_filename_eq (const char *a, const char *b);


}
# 672 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 683 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/dlfcn.h" 1 3 4
# 24 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 1 3 4
# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4

# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4
extern "C" {


extern void _dl_mcount_wrapper_check (void *__selfpc) throw ();

}
# 28 "/usr/include/dlfcn.h" 2 3 4
# 44 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;







extern "C" {



extern void *dlopen (const char *__file, int __mode) throw ();



extern int dlclose (void *__handle) throw () __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      const char *__restrict __name) throw () __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) throw ();



extern void *dlvsym (void *__restrict __handle,
       const char *__restrict __name,
       const char *__restrict __version)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) throw ();





typedef struct
{
  const char *dli_fname;
  void *dli_fbase;
  const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (const void *__address, Dl_info *__info)
     throw () __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) throw () __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     throw () __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;





  __extension__ union
  {
    Dl_serpath dls_serpath[0];
    Dl_serpath __dls_serpath_pad[1];
  };



} Dl_serinfo;



}
# 684 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2




# 1 "/usr/include/x86_64-linux-gnu/gmp.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
# 1 "/usr/include/c++/10/iosfwd" 1 3 4
# 36 "/usr/include/c++/10/iosfwd" 3 4
       
# 37 "/usr/include/c++/10/iosfwd" 3


# 1 "/usr/include/c++/10/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/10/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/10/bits/stringfwd.h" 3


# 1 "/usr/include/c++/10/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/10/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/10/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/10/bits/memoryfwd.h" 3
  template<typename>
    class allocator;


  template<>
    class allocator<void>;




  template<typename, typename>
    struct uses_allocator;





}
# 41 "/usr/include/c++/10/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;







  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

}


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;
# 93 "/usr/include/c++/10/bits/stringfwd.h" 3
  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 40 "/usr/include/c++/10/iosfwd" 2 3
# 1 "/usr/include/c++/10/bits/postypes.h" 1 3
# 38 "/usr/include/c++/10/bits/postypes.h" 3
       
# 39 "/usr/include/c++/10/bits/postypes.h" 3

# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4







# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4





typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();







extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
__attribute__ ((__leaf__)) btowc (int __c) throw ()
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) wctob (wint_t __wc) throw ()
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
__attribute__ ((__leaf__)) mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ()

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }




extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) throw () __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 671 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;






extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 726 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 781 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 807 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 817 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 856 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/include/c++/10/cwchar" 2 3
# 62 "/usr/include/c++/10/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/10/cwchar" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 234 "/usr/include/c++/10/cwchar" 3

}
}







namespace __gnu_cxx
{





  using ::wcstold;
# 260 "/usr/include/c++/10/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 280 "/usr/include/c++/10/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/10/bits/postypes.h" 2 3
# 68 "/usr/include/c++/10/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/10/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/10/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/10/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/10/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      fpos(const fpos&) = default;
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;



      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 245 "/usr/include/c++/10/bits/postypes.h" 3
  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/10/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 35 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 1 "/usr/include/c++/10/cstdio" 1 3 4
# 39 "/usr/include/c++/10/cstdio" 3 4
       
# 40 "/usr/include/c++/10/cstdio" 3
# 96 "/usr/include/c++/10/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/10/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/10/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 36 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 55 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 56 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 57 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 141 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
typedef unsigned long int mp_limb_t;
typedef long int mp_limb_signed_t;


typedef unsigned long int mp_bitcnt_t;




typedef struct
{
  int _mp_alloc;

  int _mp_size;


  mp_limb_t *_mp_d;
} __mpz_struct;




typedef __mpz_struct MP_INT;
typedef __mpz_struct mpz_t[1];

typedef mp_limb_t * mp_ptr;
typedef const mp_limb_t * mp_srcptr;







typedef long int mp_size_t;
typedef long int mp_exp_t;


typedef struct
{
  __mpz_struct _mp_num;
  __mpz_struct _mp_den;
} __mpq_struct;

typedef __mpq_struct MP_RAT;
typedef __mpq_struct mpq_t[1];

typedef struct
{
  int _mp_prec;



  int _mp_size;


  mp_exp_t _mp_exp;
  mp_limb_t *_mp_d;
} __mpf_struct;


typedef __mpf_struct mpf_t[1];


typedef enum
{
  GMP_RAND_ALG_DEFAULT = 0,
  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT
} gmp_randalg_t;


typedef struct
{
  mpz_t _mp_seed;
  gmp_randalg_t _mp_alg;
  union {
    void *_mp_lc;
  } _mp_algdata;
} __gmp_randstate_struct;
typedef __gmp_randstate_struct gmp_randstate_t[1];



typedef const __mpz_struct *mpz_srcptr;
typedef __mpz_struct *mpz_ptr;
typedef const __mpf_struct *mpf_srcptr;
typedef __mpf_struct *mpf_ptr;
typedef const __mpq_struct *mpq_srcptr;
typedef __mpq_struct *mpq_ptr;
# 472 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern "C" {
using std::FILE;



 void __gmp_set_memory_functions (void *(*) (size_t),
          void *(*) (void *, size_t, size_t),
          void (*) (void *, size_t)) noexcept;


 void __gmp_get_memory_functions (void *(**) (size_t),
          void *(**) (void *, size_t, size_t),
          void (**) (void *, size_t)) noexcept;


 extern const int __gmp_bits_per_limb;


 extern int __gmp_errno;


 extern const char * const __gmp_version;






 void __gmp_randinit (gmp_randstate_t, gmp_randalg_t, ...);


 void __gmp_randinit_default (gmp_randstate_t);


 void __gmp_randinit_lc_2exp (gmp_randstate_t, mpz_srcptr, unsigned long int, mp_bitcnt_t);


 int __gmp_randinit_lc_2exp_size (gmp_randstate_t, mp_bitcnt_t);


 void __gmp_randinit_mt (gmp_randstate_t);


 void __gmp_randinit_set (gmp_randstate_t, const __gmp_randstate_struct *);


 void __gmp_randseed (gmp_randstate_t, mpz_srcptr);


 void __gmp_randseed_ui (gmp_randstate_t, unsigned long int);


 void __gmp_randclear (gmp_randstate_t);


 unsigned long __gmp_urandomb_ui (gmp_randstate_t, unsigned long);


 unsigned long __gmp_urandomm_ui (gmp_randstate_t, unsigned long);





 int __gmp_asprintf (char **, const char *, ...);



 int __gmp_fprintf (FILE *, const char *, ...);
# 554 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 int __gmp_printf (const char *, ...);


 int __gmp_snprintf (char *, size_t, const char *, ...);


 int __gmp_sprintf (char *, const char *, ...);



 int __gmp_vasprintf (char **, const char *, va_list);




 int __gmp_vfprintf (FILE *, const char *, va_list);




 int __gmp_vprintf (const char *, va_list);




 int __gmp_vsnprintf (char *, size_t, const char *, va_list);




 int __gmp_vsprintf (char *, const char *, va_list);







 int __gmp_fscanf (FILE *, const char *, ...);



 int __gmp_scanf (const char *, ...);


 int __gmp_sscanf (const char *, const char *, ...);



 int __gmp_vfscanf (FILE *, const char *, va_list);




 int __gmp_vscanf (const char *, va_list);




 int __gmp_vsscanf (const char *, const char *, va_list);







 void *__gmpz_realloc (mpz_ptr, mp_size_t);



 void __gmpz_abs (mpz_ptr, mpz_srcptr);



 void __gmpz_add (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_add_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_addmul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_addmul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_and (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_array_init (mpz_ptr, mp_size_t, mp_size_t);


 void __gmpz_bin_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_bin_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_cdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_cdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_cdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_clear (mpz_ptr);


 void __gmpz_clears (mpz_ptr, ...);


 void __gmpz_clrbit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_cmp (mpz_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_cmp_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmp_si (mpz_srcptr, signed long int) noexcept __attribute__ ((__pure__));


 int __gmpz_cmp_ui (mpz_srcptr, unsigned long int) noexcept __attribute__ ((__pure__));


 int __gmpz_cmpabs (mpz_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_cmpabs_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmpabs_ui (mpz_srcptr, unsigned long int) noexcept __attribute__ ((__pure__));


 void __gmpz_com (mpz_ptr, mpz_srcptr);


 void __gmpz_combit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_congruent_p (mpz_srcptr, mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 int __gmpz_congruent_ui_p (mpz_srcptr, unsigned long, unsigned long) __attribute__ ((__pure__));


 void __gmpz_divexact (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_divexact_ui (mpz_ptr, mpz_srcptr, unsigned long);


 int __gmpz_divisible_p (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_divisible_ui_p (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_divisible_2exp_p (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 void __gmpz_dump (mpz_srcptr);


 void *__gmpz_export (void *, size_t *, int, size_t, int, size_t, mpz_srcptr);


 void __gmpz_fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_2fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_mfac_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_primorial_ui (mpz_ptr, unsigned long int);


 void __gmpz_fdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_fdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_fib_ui (mpz_ptr, unsigned long int);


 void __gmpz_fib2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_fits_sint_p (mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_fits_slong_p (mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_fits_sshort_p (mpz_srcptr) noexcept __attribute__ ((__pure__));



 int __gmpz_fits_uint_p (mpz_srcptr) noexcept __attribute__ ((__pure__));




 int __gmpz_fits_ulong_p (mpz_srcptr) noexcept __attribute__ ((__pure__));




 int __gmpz_fits_ushort_p (mpz_srcptr) noexcept __attribute__ ((__pure__));



 void __gmpz_gcd (mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_gcd_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_gcdext (mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 double __gmpz_get_d (mpz_srcptr) __attribute__ ((__pure__));


 double __gmpz_get_d_2exp (signed long int *, mpz_srcptr);


 long int __gmpz_get_si (mpz_srcptr) noexcept __attribute__ ((__pure__));


 char *__gmpz_get_str (char *, int, mpz_srcptr);



 unsigned long int __gmpz_get_ui (mpz_srcptr) noexcept __attribute__ ((__pure__));




 mp_limb_t __gmpz_getlimbn (mpz_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));



 mp_bitcnt_t __gmpz_hamdist (mpz_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpz_import (mpz_ptr, size_t, int, size_t, int, size_t, const void *);


 void __gmpz_init (mpz_ptr) noexcept;


 void __gmpz_init2 (mpz_ptr, mp_bitcnt_t);


 void __gmpz_inits (mpz_ptr, ...) noexcept;


 void __gmpz_init_set (mpz_ptr, mpz_srcptr);


 void __gmpz_init_set_d (mpz_ptr, double);


 void __gmpz_init_set_si (mpz_ptr, signed long int);


 int __gmpz_init_set_str (mpz_ptr, const char *, int);


 void __gmpz_init_set_ui (mpz_ptr, unsigned long int);



 size_t __gmpz_inp_raw (mpz_ptr, FILE *);




 size_t __gmpz_inp_str (mpz_ptr, FILE *, int);



 int __gmpz_invert (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_ior (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_jacobi (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));




 int __gmpz_kronecker_si (mpz_srcptr, long) __attribute__ ((__pure__));


 int __gmpz_kronecker_ui (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_si_kronecker (long, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_ui_kronecker (unsigned long, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpz_lcm (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_lcm_ui (mpz_ptr, mpz_srcptr, unsigned long);




 void __gmpz_lucnum_ui (mpz_ptr, unsigned long int);


 void __gmpz_lucnum2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_millerrabin (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_mod (mpz_ptr, mpz_srcptr, mpz_srcptr);




 void __gmpz_mul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_mul_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 void __gmpz_mul_si (mpz_ptr, mpz_srcptr, long int);


 void __gmpz_mul_ui (mpz_ptr, mpz_srcptr, unsigned long int);



 void __gmpz_neg (mpz_ptr, mpz_srcptr);



 void __gmpz_nextprime (mpz_ptr, mpz_srcptr);



 size_t __gmpz_out_raw (FILE *, mpz_srcptr);




 size_t __gmpz_out_str (FILE *, int, mpz_srcptr);



 int __gmpz_perfect_power_p (mpz_srcptr) __attribute__ ((__pure__));



 int __gmpz_perfect_square_p (mpz_srcptr) __attribute__ ((__pure__));




 mp_bitcnt_t __gmpz_popcount (mpz_srcptr) noexcept __attribute__ ((__pure__));



 void __gmpz_pow_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_powm (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_sec (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_ui (mpz_ptr, mpz_srcptr, unsigned long int, mpz_srcptr);


 int __gmpz_probab_prime_p (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_random (mpz_ptr, mp_size_t);


 void __gmpz_random2 (mpz_ptr, mp_size_t);


 void __gmpz_realloc2 (mpz_ptr, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_remove (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_root (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rootrem (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rrandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_scan0 (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 mp_bitcnt_t __gmpz_scan1 (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 void __gmpz_set (mpz_ptr, mpz_srcptr);


 void __gmpz_set_d (mpz_ptr, double);


 void __gmpz_set_f (mpz_ptr, mpf_srcptr);



 void __gmpz_set_q (mpz_ptr, mpq_srcptr);



 void __gmpz_set_si (mpz_ptr, signed long int);


 int __gmpz_set_str (mpz_ptr, const char *, int);


 void __gmpz_set_ui (mpz_ptr, unsigned long int);


 void __gmpz_setbit (mpz_ptr, mp_bitcnt_t);



 size_t __gmpz_size (mpz_srcptr) noexcept __attribute__ ((__pure__));



 size_t __gmpz_sizeinbase (mpz_srcptr, int) noexcept __attribute__ ((__pure__));


 void __gmpz_sqrt (mpz_ptr, mpz_srcptr);


 void __gmpz_sqrtrem (mpz_ptr, mpz_ptr, mpz_srcptr);


 void __gmpz_sub (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_sub_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_ui_sub (mpz_ptr, unsigned long int, mpz_srcptr);


 void __gmpz_submul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_submul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_swap (mpz_ptr, mpz_ptr) noexcept;


 unsigned long int __gmpz_tdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_tdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_tdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 int __gmpz_tstbit (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 void __gmpz_ui_pow_ui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_urandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 void __gmpz_urandomm (mpz_ptr, gmp_randstate_t, mpz_srcptr);



 void __gmpz_xor (mpz_ptr, mpz_srcptr, mpz_srcptr);


 mp_srcptr __gmpz_limbs_read (mpz_srcptr);


 mp_ptr __gmpz_limbs_write (mpz_ptr, mp_size_t);


 mp_ptr __gmpz_limbs_modify (mpz_ptr, mp_size_t);


 void __gmpz_limbs_finish (mpz_ptr, mp_size_t);


 mpz_srcptr __gmpz_roinit_n (mpz_ptr, mp_srcptr, mp_size_t);







 void __gmpq_abs (mpq_ptr, mpq_srcptr);



 void __gmpq_add (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_canonicalize (mpq_ptr);


 void __gmpq_clear (mpq_ptr);


 void __gmpq_clears (mpq_ptr, ...);


 int __gmpq_cmp (mpq_srcptr, mpq_srcptr) __attribute__ ((__pure__));


 int __gmpq_cmp_si (mpq_srcptr, long, unsigned long) __attribute__ ((__pure__));


 int __gmpq_cmp_ui (mpq_srcptr, unsigned long int, unsigned long int) __attribute__ ((__pure__));


 int __gmpq_cmp_z (mpq_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpq_div (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_div_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);


 int __gmpq_equal (mpq_srcptr, mpq_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpq_get_num (mpz_ptr, mpq_srcptr);


 void __gmpq_get_den (mpz_ptr, mpq_srcptr);


 double __gmpq_get_d (mpq_srcptr) __attribute__ ((__pure__));


 char *__gmpq_get_str (char *, int, mpq_srcptr);


 void __gmpq_init (mpq_ptr);


 void __gmpq_inits (mpq_ptr, ...);



 size_t __gmpq_inp_str (mpq_ptr, FILE *, int);



 void __gmpq_inv (mpq_ptr, mpq_srcptr);


 void __gmpq_mul (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_mul_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);



 void __gmpq_neg (mpq_ptr, mpq_srcptr);




 size_t __gmpq_out_str (FILE *, int, mpq_srcptr);



 void __gmpq_set (mpq_ptr, mpq_srcptr);


 void __gmpq_set_d (mpq_ptr, double);


 void __gmpq_set_den (mpq_ptr, mpz_srcptr);


 void __gmpq_set_f (mpq_ptr, mpf_srcptr);


 void __gmpq_set_num (mpq_ptr, mpz_srcptr);


 void __gmpq_set_si (mpq_ptr, signed long int, unsigned long int);


 int __gmpq_set_str (mpq_ptr, const char *, int);


 void __gmpq_set_ui (mpq_ptr, unsigned long int, unsigned long int);


 void __gmpq_set_z (mpq_ptr, mpz_srcptr);


 void __gmpq_sub (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_swap (mpq_ptr, mpq_ptr) noexcept;





 void __gmpf_abs (mpf_ptr, mpf_srcptr);


 void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_add_ui (mpf_ptr, mpf_srcptr, unsigned long int);

 void __gmpf_ceil (mpf_ptr, mpf_srcptr);


 void __gmpf_clear (mpf_ptr);


 void __gmpf_clears (mpf_ptr, ...);


 int __gmpf_cmp (mpf_srcptr, mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_cmp_z (mpf_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_cmp_d (mpf_srcptr, double) __attribute__ ((__pure__));


 int __gmpf_cmp_si (mpf_srcptr, signed long int) noexcept __attribute__ ((__pure__));


 int __gmpf_cmp_ui (mpf_srcptr, unsigned long int) noexcept __attribute__ ((__pure__));


 void __gmpf_div (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_div_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_div_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_dump (mpf_srcptr);


 int __gmpf_eq (mpf_srcptr, mpf_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 int __gmpf_fits_sint_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_slong_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_sshort_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_uint_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_ulong_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_ushort_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_floor (mpf_ptr, mpf_srcptr);


 double __gmpf_get_d (mpf_srcptr) __attribute__ ((__pure__));


 double __gmpf_get_d_2exp (signed long int *, mpf_srcptr);


 mp_bitcnt_t __gmpf_get_default_prec (void) noexcept __attribute__ ((__pure__));


 mp_bitcnt_t __gmpf_get_prec (mpf_srcptr) noexcept __attribute__ ((__pure__));


 long __gmpf_get_si (mpf_srcptr) noexcept __attribute__ ((__pure__));


 char *__gmpf_get_str (char *, mp_exp_t *, int, size_t, mpf_srcptr);


 unsigned long __gmpf_get_ui (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_init (mpf_ptr);


 void __gmpf_init2 (mpf_ptr, mp_bitcnt_t);


 void __gmpf_inits (mpf_ptr, ...);


 void __gmpf_init_set (mpf_ptr, mpf_srcptr);


 void __gmpf_init_set_d (mpf_ptr, double);


 void __gmpf_init_set_si (mpf_ptr, signed long int);


 int __gmpf_init_set_str (mpf_ptr, const char *, int);


 void __gmpf_init_set_ui (mpf_ptr, unsigned long int);



 size_t __gmpf_inp_str (mpf_ptr, FILE *, int);



 int __gmpf_integer_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_mul (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_mul_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_mul_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_neg (mpf_ptr, mpf_srcptr);



 size_t __gmpf_out_str (FILE *, int, size_t, mpf_srcptr);



 void __gmpf_pow_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_random2 (mpf_ptr, mp_size_t, mp_exp_t);


 void __gmpf_reldiff (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_set (mpf_ptr, mpf_srcptr);


 void __gmpf_set_d (mpf_ptr, double);


 void __gmpf_set_default_prec (mp_bitcnt_t) noexcept;


 void __gmpf_set_prec (mpf_ptr, mp_bitcnt_t);


 void __gmpf_set_prec_raw (mpf_ptr, mp_bitcnt_t) noexcept;


 void __gmpf_set_q (mpf_ptr, mpq_srcptr);


 void __gmpf_set_si (mpf_ptr, signed long int);


 int __gmpf_set_str (mpf_ptr, const char *, int);


 void __gmpf_set_ui (mpf_ptr, unsigned long int);


 void __gmpf_set_z (mpf_ptr, mpz_srcptr);


 size_t __gmpf_size (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_sqrt (mpf_ptr, mpf_srcptr);


 void __gmpf_sqrt_ui (mpf_ptr, unsigned long int);


 void __gmpf_sub (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_sub_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_swap (mpf_ptr, mpf_ptr) noexcept;


 void __gmpf_trunc (mpf_ptr, mpf_srcptr);


 void __gmpf_ui_div (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_ui_sub (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_urandomb (mpf_t, gmp_randstate_t, mp_bitcnt_t);
# 1465 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 mp_limb_t __gmpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) noexcept;



 mp_limb_t __gmpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);



 int __gmpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));




 int __gmpn_zero_p (mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));



 void __gmpn_divexact_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divexact_by3c (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divrem (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_divrem_1 (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_divrem_2 (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr);


 mp_limb_t __gmpn_div_qr_1 (mp_ptr, mp_limb_t *, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_div_qr_2 (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);


 mp_size_t __gmpn_gcd (mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 mp_limb_t __gmpn_gcd_11 (mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_gcd_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_gcdext_1 (mp_limb_signed_t *, mp_limb_signed_t *, mp_limb_t, mp_limb_t);


 mp_size_t __gmpn_gcdext (mp_ptr, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 size_t __gmpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);


 mp_bitcnt_t __gmpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));


 mp_limb_t __gmpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_limb_t __gmpn_mod_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_sqr (mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_neg (mp_ptr, mp_srcptr, mp_size_t);



 void __gmpn_com (mp_ptr, mp_srcptr, mp_size_t);


 int __gmpn_perfect_square_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_perfect_power_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_popcount (mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));


 mp_size_t __gmpn_pow_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);



 mp_limb_t __gmpn_preinv_mod_1 (mp_srcptr, mp_size_t, mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


 void __gmpn_random (mp_ptr, mp_size_t);


 void __gmpn_random2 (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_bitcnt_t __gmpn_scan0 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_scan1 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_size_t __gmpn_set_str (mp_ptr, const unsigned char *, size_t, int);


 size_t __gmpn_sizeinbase (mp_srcptr, mp_size_t, int);


 mp_size_t __gmpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) noexcept;



 mp_limb_t __gmpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_tdiv_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 void __gmpn_and_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_andn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nand_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_ior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_iorn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xnor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_copyi (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_copyd (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_zero (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_cnd_add_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 mp_limb_t __gmpn_cnd_sub_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_sec_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_add_1_itch (mp_size_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_sec_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_sub_1_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_cnd_swap (mp_limb_t, volatile mp_limb_t *, volatile mp_limb_t *, mp_size_t);


 void __gmpn_sec_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_mul_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_sqr (mp_ptr, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_sqr_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_powm (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_bitcnt_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_powm_itch (mp_size_t, mp_bitcnt_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_tabselect (volatile mp_limb_t *, volatile const mp_limb_t *, mp_size_t, mp_size_t, mp_size_t);


 mp_limb_t __gmpn_sec_div_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_qr_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));

 void __gmpn_sec_div_r (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_r_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_sec_invert (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_bitcnt_t, mp_ptr);

 mp_size_t __gmpn_sec_invert_itch (mp_size_t) __attribute__ ((__pure__));
# 1714 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = ((__gmp_w->_mp_size) >= 0 ? (__gmp_w->_mp_size) : -(__gmp_w->_mp_size));
}
# 1738 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_uint_p (mpz_srcptr __gmp_z) noexcept
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffff * 2U + 1U)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ulong_p (mpz_srcptr __gmp_z) noexcept
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffffffffffffL * 2UL + 1UL)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ushort_p (mpz_srcptr __gmp_z) noexcept
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fff * 2 + 1)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

unsigned long
__gmpz_get_ui (mpz_srcptr __gmp_z) noexcept
{
  mp_ptr __gmp_p = __gmp_z->_mp_d;
  mp_size_t __gmp_n = __gmp_z->_mp_size;
  mp_limb_t __gmp_l = __gmp_p[0];






  return (__gmp_n != 0 ? __gmp_l : 0);
# 1794 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpz_getlimbn (mpz_srcptr __gmp_z, mp_size_t __gmp_n) noexcept
{
  mp_limb_t __gmp_result = 0;
  if (__builtin_expect ((__gmp_n >= 0 && __gmp_n < ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size))) != 0, 1))
    __gmp_result = __gmp_z->_mp_d[__gmp_n];
  return __gmp_result;
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = - __gmp_w->_mp_size;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_perfect_square_p (mpz_srcptr __gmp_a)
{
  mp_size_t __gmp_asize;
  int __gmp_result;

  __gmp_asize = __gmp_a->_mp_size;
  __gmp_result = (__gmp_asize >= 0);
  if (__builtin_expect ((__gmp_asize > 0) != 0, 1))
    __gmp_result = __gmpn_perfect_square_p (__gmp_a->_mp_d, __gmp_asize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_bitcnt_t
__gmpz_popcount (mpz_srcptr __gmp_u) noexcept
{
  mp_size_t __gmp_usize;
  mp_bitcnt_t __gmp_result;

  __gmp_usize = __gmp_u->_mp_size;
  __gmp_result = (__gmp_usize < 0 ? ~ (static_cast<mp_bitcnt_t> (0)) : (static_cast<mp_bitcnt_t> (0)));
  if (__builtin_expect ((__gmp_usize > 0) != 0, 1))
    __gmp_result = __gmpn_popcount (__gmp_u->_mp_d, __gmp_usize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

void
__gmpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  __gmpz_tdiv_q (__gmp_w, (&((__gmp_u)->_mp_num)), (&((__gmp_u)->_mp_den)));
}




extern __inline__ __attribute__ ((__gnu_inline__))

size_t
__gmpz_size (mpz_srcptr __gmp_z) noexcept
{
  return ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size));
}






extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = ((__gmp_w->_mp_num._mp_size) >= 0 ? (__gmp_w->_mp_num._mp_size) : -(__gmp_w->_mp_num._mp_size));
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = - __gmp_w->_mp_num._mp_size;
}
# 2136 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_add_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x + 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)) == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) noexcept
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x + (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_r) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x + 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_r) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_cmp (mp_srcptr __gmp_xp, mp_srcptr __gmp_yp, mp_size_t __gmp_size) noexcept
{
  int __gmp_result;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_y; (__gmp_result) = 0; __gmp_i = (__gmp_size); while (--__gmp_i >= 0) { __gmp_x = (__gmp_xp)[__gmp_i]; __gmp_y = (__gmp_yp)[__gmp_i]; if (__gmp_x != __gmp_y) { (__gmp_result) = (__gmp_x > __gmp_y ? 1 : -1); break; } } } while (0);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_zero_p (mp_srcptr __gmp_p, mp_size_t __gmp_n) noexcept
{

    do {
      if (__gmp_p[--__gmp_n] != 0)
 return 0;
    } while (__gmp_n != 0);
  return 1;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_sub_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x - 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)), __gmp_x == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) noexcept
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x - (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_x) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x - 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_x) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_neg (mp_ptr __gmp_rp, mp_srcptr __gmp_up, mp_size_t __gmp_n)
{
  while (*__gmp_up == 0)
    {
      *__gmp_rp = 0;
      if (!--__gmp_n)
 return 0;
      ++__gmp_up; ++__gmp_rp;
    }

  *__gmp_rp = (- *__gmp_up) & ((~ (static_cast<mp_limb_t> (0))) >> 0);

  if (--__gmp_n)
    __gmpn_com (++__gmp_rp, ++__gmp_up, __gmp_n);

  return 1;
}



}
# 2285 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 std::ostream& operator<< (std::ostream &, mpz_srcptr);
 std::ostream& operator<< (std::ostream &, mpq_srcptr);
 std::ostream& operator<< (std::ostream &, mpf_srcptr);
 std::istream& operator>> (std::istream &, mpz_ptr);
 std::istream& operator>> (std::istream &, mpq_ptr);
 std::istream& operator>> (std::istream &, mpf_ptr);
# 2316 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
enum
{
  GMP_ERROR_NONE = 0,
  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,
  GMP_ERROR_DIVISION_BY_ZERO = 2,
  GMP_ERROR_SQRT_OF_NEGATIVE = 4,
  GMP_ERROR_INVALID_ARGUMENT = 8
};
# 689 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 1
# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"

# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern "C" {





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 2
# 55 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char * const *) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);



extern int writeargv (char * const *, FILE *);



extern int countargv (char * const *);
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));




extern const char *dos_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));





extern const char *unix_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));



extern char *lrealpath (const char *);



extern int is_valid_fd (int fd);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));
# 157 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 193 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 205 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char * getpwd (void);
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));





extern char *make_relative_prefix_ignore_links (const char *, const char *,
      const char *) __attribute__ ((__malloc__));




extern const char *choose_tmpdir (void) __attribute__ ((__returns_nonnull__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));




extern char *make_temp_file_with_prefix (const char *, const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int) __attribute__ ((__returns_nonnull__));




extern int signo_max (void);
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1))) __attribute__ ((warn_unused_result));





extern void *xrealloc (void *, size_t) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (2))) __attribute__ ((warn_unused_result));




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1, 2))) __attribute__ ((warn_unused_result));



extern char *xstrdup (const char *) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));


extern double physmem_total (void);
extern double physmem_available (void);


extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);
# 391 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase) __attribute__ ((__returns_nonnull__));
# 528 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);
# 543 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
                      const char *executable,
                                           char * const *argv,
                                           char * const *env,
                              const char *outname,
        const char *errname, int *err);





extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);






extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);







extern FILE *pex_read_output (struct pex_obj *, int binary);







extern FILE *pex_read_err (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);




extern void pex_free (struct pex_obj *);
# 618 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 637 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);



extern void *bsearch_r (const void *, const void *,
   size_t, size_t,
   int (*)(const void *, const void *, void *),
   void *);
# 661 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xasprintf (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xvasprintf (const char *, va_list) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));
# 722 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void setproctitle (const char *name, ...);


extern void stack_limit_increase (unsigned long);
# 735 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 762 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
}
# 693 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 763 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern void fancy_abort (const char *, int, const char *)
      __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
# 894 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        




        






        




        


        
# 963 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        






        
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        
# 1073 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        


        



        
# 1091 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        






       
# 1107 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        



       
# 1224 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h" 1
# 77 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
typedef long __gcc_host_wide_int__;
# 141 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline unsigned long
least_bit_hwi (unsigned long x)
{
  return (x & -x);
}



static inline bool
pow2_or_zerop (unsigned long x)
{
  return least_bit_hwi (x) == x;
}



static inline bool
pow2p_hwi (unsigned long x)
{
  return x && pow2_or_zerop (x);
}
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline int
clz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_clzl (x);





}

static inline int
ctz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_ctzl (x);





}

static inline int
ffs_hwi (unsigned long x)
{

  return __builtin_ffsl (x);





}

static inline int
popcount_hwi (unsigned long x)
{

  return __builtin_popcountl (x);





}

static inline int
floor_log2 (unsigned long x)
{
  return 64 - 1 - clz_hwi (x);
}

static inline int
ceil_log2 (unsigned long x)
{
  return x == 0 ? 0 : floor_log2 (x - 1) + 1;
}

static inline int
exact_log2 (unsigned long x)
{
  return pow2p_hwi (x) ? ctz_hwi (x) : -1;
}







extern long abs_hwi (long);
extern unsigned long absu_hwi (long);
extern long gcd (long, long);
extern long pos_mul_hwi (long, long);
extern long mul_hwi (long, long);
extern long least_common_multiple (long, long);



static inline int
ctz_or_zero (unsigned long x)
{
  return ffs_hwi (x) - 1;
}



static inline long
sext_hwi (long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else

    {






      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 291, __FUNCTION__), 0 : 0));
      int shift = 64 - prec;
      return ((long) ((unsigned long) src << shift)) >> shift;
    }
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
}


static inline unsigned long
zext_hwi (unsigned long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else
    {
      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 314, __FUNCTION__), 0 : 0));
      return src & ((1UL << prec) - 1);
    }
}



inline long
abs_hwi (long x)
{
  ((void)(!(x != (long) (1UL << (64 - 1))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 324, __FUNCTION__), 0 : 0));
  return x >= 0 ? x : -x;
}



inline unsigned long
absu_hwi (long x)
{
  return x >= 0 ? (unsigned long)x : -(unsigned long)x;
}
# 1225 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

typedef int sort_r_cmp_fn (const void *, const void *, void *);
void qsort_chk (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_sort_r (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_qsort (void *, size_t, size_t, int (*)(const void *, const void *));
void gcc_stablesort (void *, size_t, size_t,
       int (*)(const void *, const void *));
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 1
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int64_t gcov_type;
typedef uint64_t gcov_type_unsigned;

struct bitmap_obstack;
class bitmap_head;
typedef class bitmap_head *bitmap;
typedef const class bitmap_head *const_bitmap;
struct simple_bitmap_def;
typedef struct simple_bitmap_def *sbitmap;
typedef const struct simple_bitmap_def *const_sbitmap;
struct rtx_def;
typedef struct rtx_def *rtx;
typedef const struct rtx_def *const_rtx;
class scalar_mode;
class scalar_int_mode;
class scalar_float_mode;
class complex_mode;
class fixed_size_mode;
template<typename> class opt_mode;
typedef opt_mode<scalar_mode> opt_scalar_mode;
typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;
typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;
template<typename> struct pod_mode;
typedef pod_mode<scalar_mode> scalar_mode_pod;
typedef pod_mode<scalar_int_mode> scalar_int_mode_pod;
typedef pod_mode<fixed_size_mode> fixed_size_mode_pod;




struct rtx_def;
  struct rtx_expr_list;
  struct rtx_insn_list;
  struct rtx_sequence;
  struct rtx_insn;
    struct rtx_debug_insn;
    struct rtx_nonjump_insn;
    struct rtx_jump_insn;
    struct rtx_call_insn;
    struct rtx_jump_table_data;
    struct rtx_barrier;
    struct rtx_code_label;
    struct rtx_note;

struct rtvec_def;
typedef struct rtvec_def *rtvec;
typedef const struct rtvec_def *const_rtvec;
struct hwivec_def;
typedef struct hwivec_def *hwivec;
typedef const struct hwivec_def *const_hwivec;
union tree_node;
typedef union tree_node *tree;
typedef const union tree_node *const_tree;
struct gimple;
typedef gimple *gimple_seq;
struct gimple_stmt_iterator;




struct gcond;
struct gdebug;
struct ggoto;
struct glabel;
struct gswitch;
struct gassign;
struct gasm;
struct gcall;
struct gtransaction;
struct greturn;
struct gbind;
struct gcatch;
struct geh_filter;
struct geh_mnt;
struct geh_else;
struct gresx;
struct geh_dispatch;
struct gphi;
struct gtry;
struct gomp_atomic_load;
struct gomp_atomic_store;
struct gomp_continue;
struct gomp_critical;
struct gomp_ordered;
struct gomp_for;
struct gomp_parallel;
struct gomp_task;
struct gomp_sections;
struct gomp_single;
struct gomp_target;
struct gomp_teams;




struct symtab_node;
  struct cgraph_node;
  struct varpool_node;
struct cgraph_edge;

union section;
typedef union section section;
struct gcc_options;
struct cl_target_option;
struct cl_optimization;
struct cl_option;
struct cl_decoded_option;
struct cl_option_handlers;
struct diagnostic_context;
class pretty_printer;
class diagnostic_event_id_t;

template<typename T> struct array_traits;



template<typename T, typename Traits = array_traits<T>,
  bool has_constant_size = Traits::has_constant_size>
class bitmap_view;


typedef unsigned char addr_space_t;






enum ir_type {
  IR_GIMPLE,
  IR_RTL_CFGRTL,
  IR_RTL_CFGLAYOUT
};






struct cpp_reader;
struct cpp_token;




enum tls_model {
  TLS_MODEL_NONE,
  TLS_MODEL_EMULATED,
  TLS_MODEL_REAL,
  TLS_MODEL_GLOBAL_DYNAMIC = TLS_MODEL_REAL,
  TLS_MODEL_LOCAL_DYNAMIC,
  TLS_MODEL_INITIAL_EXEC,
  TLS_MODEL_LOCAL_EXEC
};


enum offload_abi {
  OFFLOAD_ABI_UNSET,
  OFFLOAD_ABI_LP64,
  OFFLOAD_ABI_ILP32
};


enum profile_update {
  PROFILE_UPDATE_SINGLE,
  PROFILE_UPDATE_ATOMIC,
  PROFILE_UPDATE_PREFER_ATOMIC
};


enum profile_reproducibility {
    PROFILE_REPRODUCIBILITY_SERIAL,
    PROFILE_REPRODUCIBILITY_PARALLEL_RUNS,
    PROFILE_REPRODUCIBILITY_MULTITHREADED
};



enum unwind_info_type
{
  UI_NONE,
  UI_SJLJ,
  UI_DWARF2,
  UI_TARGET,
  UI_SEH
};


enum node_frequency {


  NODE_FREQUENCY_UNLIKELY_EXECUTED,


  NODE_FREQUENCY_EXECUTED_ONCE,

  NODE_FREQUENCY_NORMAL,


  NODE_FREQUENCY_HOT
};


enum optimization_type {

  OPTIMIZE_FOR_SPEED,


  OPTIMIZE_FOR_BOTH,


  OPTIMIZE_FOR_SIZE
};


enum pad_direction {

  PAD_NONE,




  PAD_UPWARD,




  PAD_DOWNWARD
};




enum var_init_status
{
  VAR_INIT_STATUS_UNKNOWN,
  VAR_INIT_STATUS_UNINITIALIZED,
  VAR_INIT_STATUS_INITIALIZED
};



enum warn_strict_overflow_code
{



  WARN_STRICT_OVERFLOW_ALL = 1,




  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,


  WARN_STRICT_OVERFLOW_COMPARISON = 3,


  WARN_STRICT_OVERFLOW_MISC = 4,


  WARN_STRICT_OVERFLOW_MAGNITUDE = 5
};







typedef int alias_set_type;

class edge_def;
typedef class edge_def *edge;
typedef const class edge_def *const_edge;
struct basic_block_def;
typedef struct basic_block_def *basic_block;
typedef const struct basic_block_def *const_basic_block;
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int reg_class_t;

class rtl_opt_pass;

namespace gcc {
  class context;
}

typedef std::pair <tree, tree> tree_pair;
typedef std::pair <const char *, int> string_int_pair;


template <typename ValueType>
struct kv_pair
{
  const char *const name;
  const ValueType value;
};



template<typename T>
struct iterator_range
{
public:
  iterator_range (const T &begin, const T &end)
    : m_begin (begin), m_end (end) {}

  T begin () const { return m_begin; }
  T end () const { return m_end; }

private:
  T m_begin;
  T m_end;
};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
enum function_class {
  function_c94,
  function_c99_misc,
  function_c99_math_complex,
  function_sincos,
  function_c11_misc,
  function_c2x_misc
};



enum symbol_visibility
{
  VISIBILITY_DEFAULT,
  VISIBILITY_PROTECTED,
  VISIBILITY_HIDDEN,
  VISIBILITY_INTERNAL
};



enum flt_eval_method
{
  FLT_EVAL_METHOD_UNPREDICTABLE = -1,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT = 0,
  FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE = 1,
  FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE = 2,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 = 16
};

enum excess_precision_type
{
  EXCESS_PRECISION_TYPE_IMPLICIT,
  EXCESS_PRECISION_TYPE_STANDARD,
  EXCESS_PRECISION_TYPE_FAST
};



typedef void (*gt_pointer_operator) (void *, void *);


typedef unsigned char uchar;




# 1 "./insn-modes.h" 1






enum machine_mode
{
  E_VOIDmode,






  E_BLKmode,






  E_CCmode,






  E_CCGCmode,






  E_CCGOCmode,






  E_CCNOmode,






  E_CCGZmode,






  E_CCAmode,






  E_CCCmode,






  E_CCOmode,






  E_CCPmode,






  E_CCSmode,






  E_CCZmode,






  E_CCFPmode,






  E_BImode,






  E_QImode,






  E_HImode,






  E_SImode,






  E_DImode,






  E_TImode,






  E_OImode,






  E_XImode,






  E_P2QImode,






  E_P2HImode,






  E_POImode,






  E_QQmode,






  E_HQmode,






  E_SQmode,






  E_DQmode,






  E_TQmode,






  E_UQQmode,






  E_UHQmode,






  E_USQmode,






  E_UDQmode,






  E_UTQmode,






  E_HAmode,






  E_SAmode,






  E_DAmode,






  E_TAmode,






  E_UHAmode,






  E_USAmode,






  E_UDAmode,






  E_UTAmode,






  E_SFmode,






  E_DFmode,






  E_XFmode,






  E_TFmode,






  E_SDmode,






  E_DDmode,






  E_TDmode,






  E_CQImode,






  E_CP2QImode,






  E_CHImode,






  E_CP2HImode,






  E_CSImode,






  E_CDImode,






  E_CTImode,






  E_CPOImode,






  E_COImode,






  E_CXImode,






  E_SCmode,






  E_DCmode,






  E_XCmode,






  E_TCmode,






  E_V2QImode,






  E_V4QImode,






  E_V2HImode,






  E_V1SImode,






  E_V8QImode,






  E_V4HImode,






  E_V2SImode,






  E_V1DImode,






  E_V12QImode,






  E_V6HImode,






  E_V14QImode,






  E_V16QImode,






  E_V8HImode,






  E_V4SImode,






  E_V2DImode,






  E_V1TImode,






  E_V32QImode,






  E_V16HImode,






  E_V8SImode,






  E_V4DImode,






  E_V2TImode,






  E_V64QImode,






  E_V32HImode,






  E_V16SImode,






  E_V8DImode,






  E_V4TImode,






  E_V128QImode,






  E_V64HImode,






  E_V32SImode,






  E_V16DImode,






  E_V8TImode,






  E_V64SImode,






  E_V2SFmode,






  E_V4SFmode,






  E_V2DFmode,






  E_V8SFmode,






  E_V4DFmode,






  E_V2TFmode,






  E_V16SFmode,






  E_V8DFmode,






  E_V4TFmode,






  E_V32SFmode,






  E_V16DFmode,






  E_V8TFmode,






  E_V64SFmode,






  E_V32DFmode,






  E_V16TFmode,






  MAX_MACHINE_MODE,

  MIN_MODE_RANDOM = E_VOIDmode,
  MAX_MODE_RANDOM = E_BLKmode,

  MIN_MODE_CC = E_CCmode,
  MAX_MODE_CC = E_CCFPmode,

  MIN_MODE_INT = E_QImode,
  MAX_MODE_INT = E_XImode,

  MIN_MODE_PARTIAL_INT = E_P2QImode,
  MAX_MODE_PARTIAL_INT = E_POImode,

  MIN_MODE_FRACT = E_QQmode,
  MAX_MODE_FRACT = E_TQmode,

  MIN_MODE_UFRACT = E_UQQmode,
  MAX_MODE_UFRACT = E_UTQmode,

  MIN_MODE_ACCUM = E_HAmode,
  MAX_MODE_ACCUM = E_TAmode,

  MIN_MODE_UACCUM = E_UHAmode,
  MAX_MODE_UACCUM = E_UTAmode,

  MIN_MODE_FLOAT = E_SFmode,
  MAX_MODE_FLOAT = E_TFmode,

  MIN_MODE_DECIMAL_FLOAT = E_SDmode,
  MAX_MODE_DECIMAL_FLOAT = E_TDmode,

  MIN_MODE_COMPLEX_INT = E_CQImode,
  MAX_MODE_COMPLEX_INT = E_CXImode,

  MIN_MODE_COMPLEX_FLOAT = E_SCmode,
  MAX_MODE_COMPLEX_FLOAT = E_TCmode,

  MIN_MODE_VECTOR_BOOL = E_VOIDmode,
  MAX_MODE_VECTOR_BOOL = E_VOIDmode,

  MIN_MODE_VECTOR_INT = E_V2QImode,
  MAX_MODE_VECTOR_INT = E_V64SImode,

  MIN_MODE_VECTOR_FRACT = E_VOIDmode,
  MAX_MODE_VECTOR_FRACT = E_VOIDmode,

  MIN_MODE_VECTOR_UFRACT = E_VOIDmode,
  MAX_MODE_VECTOR_UFRACT = E_VOIDmode,

  MIN_MODE_VECTOR_ACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_ACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_UACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_UACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_FLOAT = E_V2SFmode,
  MAX_MODE_VECTOR_FLOAT = E_V16TFmode,

  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
# 450 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h"
enum signop {
  SIGNED,
  UNSIGNED
};
# 451 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 1
# 314 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T> class generic_wide_int;
template <int N> class fixed_wide_int_storage;
class wide_int_storage;





typedef generic_wide_int <wide_int_storage> wide_int;
typedef generic_wide_int < fixed_wide_int_storage <((64 + 4 + 64 - 1) & ~(64 - 1))> > offset_int;
typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64)> > widest_int;


typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64) * 2> > widest2_int;



template <bool SE, bool HDP = true>
class wide_int_ref_storage;

typedef generic_wide_int <wide_int_ref_storage <false> > wide_int_ref;
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{
# 358 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  enum overflow_type {
    OVF_NONE = 0,
    OVF_UNDERFLOW = -1,
    OVF_OVERFLOW = 1,


    OVF_UNKNOWN = 2
  };


  enum precision_type {



    FLEXIBLE_PRECISION,


    VAR_PRECISION,



    CONST_PRECISION
  };
# 403 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> struct int_traits;




  template <typename T1, typename T2,
     enum precision_type P1 = int_traits <T1>::precision_type,
     enum precision_type P2 = int_traits <T2>::precision_type>
  struct binary_traits;





  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef widest_int result_type;

  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, CONST_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T2>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, FLEXIBLE_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, CONST_PRECISION>
  {
    static_assert ((int_traits <T1>::precision == int_traits <T2>::precision), "int_traits <T1>::precision == int_traits <T2>::precision");


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };
}


namespace wi
{
  template <typename T>
  unsigned int get_precision (const T &);

  template <typename T1, typename T2>
  unsigned int get_binary_precision (const T1 &, const T2 &);

  template <typename T1, typename T2>
  void copy (T1 &, const T2 &);
# 512 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> bool fits_shwi_p (const T &);
  template <typename T> bool fits_uhwi_p (const T &);
  template <typename T> bool neg_p (const T &, signop = SIGNED);

  template <typename T>
  long sign_mask (const T &);

  template <typename T1, typename T2> bool eq_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ne_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool lt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool lts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ltu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool le_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool les_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool leu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool gts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gtu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ge_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool ges_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool geu_p (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmp (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  int cmps (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmpu (const T1 &, const T2 &);

  template <typename T> typename wi::binary_traits <T, T>::result_type bit_not (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &, overflow_type *);
  template <typename T> typename wi::binary_traits <T, T>::result_type abs (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type ext (const T &, unsigned int, signop);
  template <typename T> typename wi::binary_traits <T, T>::result_type sext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type zext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type set_bit (const T &, unsigned int);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type min (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type max (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smax (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umax (const T1 &, const T2 &);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_xor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul_high (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_ceil (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type divmod_trunc (const T1 &, const T2 &, signop,
    typename wi::binary_traits <T1, T2>::result_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type gcd (const T1 &, const T2 &, signop = UNSIGNED);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop,
        typename wi::binary_traits <T1, T2>::result_type *);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type arshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rshift (const T1 &, const T2 &, signop sgn);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrotate (const T1 &, const T2 &, unsigned int = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rrotate (const T1 &, const T2 &, unsigned int = 0);







  bool only_sign_bit_p (const wide_int_ref &, unsigned int);
  bool only_sign_bit_p (const wide_int_ref &);
  int clz (const wide_int_ref &);
  int clrsb (const wide_int_ref &);
  int ctz (const wide_int_ref &);
  int exact_log2 (const wide_int_ref &);
  int floor_log2 (const wide_int_ref &);
  int ffs (const wide_int_ref &);
  int popcount (const wide_int_ref &);
  int parity (const wide_int_ref &);

  template <typename T>
  unsigned long extract_uhwi (const T &, unsigned int, unsigned int);

  template <typename T>
  unsigned int min_precision (const T &, signop);

  static inline void accumulate_overflow (overflow_type &, overflow_type);
}

namespace wi
{


  class storage_ref
  {
  public:
    storage_ref () {}
    storage_ref (const long *, unsigned int, unsigned int);

    const long *val;
    unsigned int len;
    unsigned int precision;



    unsigned int get_len () const;
    unsigned int get_precision () const;
    const long *get_val () const;
  };
}

inline::wi::storage_ref::storage_ref (const long *val_in,
          unsigned int len_in,
          unsigned int precision_in)
  : val (val_in), len (len_in), precision (precision_in)
{
}

inline unsigned int
wi::storage_ref::get_len () const
{
  return len;
}

inline unsigned int
wi::storage_ref::get_precision () const
{
  return precision;
}

inline const long *
wi::storage_ref::get_val () const
{
  return val;
}
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename storage>
class generic_wide_int : public storage
{
public:
  generic_wide_int ();

  template <typename T>
  generic_wide_int (const T &);

  template <typename T>
  generic_wide_int (const T &, unsigned int);


  long to_shwi (unsigned int) const;
  long to_shwi () const;
  unsigned long to_uhwi (unsigned int) const;
  unsigned long to_uhwi () const;
  long to_short_addr () const;


  long sign_mask () const;
  long elt (unsigned int) const;
  long sext_elt (unsigned int) const;
  unsigned long ulow () const;
  unsigned long uhigh () const;
  long slow () const;
  long shigh () const;

  template <typename T>
  generic_wide_int &operator = (const T &);
# 754 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> generic_wide_int &operator &= (const T &c) { return (*this = wi::bit_and (*this, c)); }
  template <typename T> generic_wide_int &operator |= (const T &c) { return (*this = wi::bit_or (*this, c)); }
  template <typename T> generic_wide_int &operator ^= (const T &c) { return (*this = wi::bit_xor (*this, c)); }
  template <typename T> generic_wide_int &operator += (const T &c) { return (*this = wi::add (*this, c)); }
  template <typename T> generic_wide_int &operator -= (const T &c) { return (*this = wi::sub (*this, c)); }
  template <typename T> generic_wide_int &operator *= (const T &c) { return (*this = wi::mul (*this, c)); }
  template <typename T> generic_wide_int &operator <<= (const T &c) { return (*this = wi::lshift (*this, c)); }
  template <typename T> generic_wide_int &operator >>= (const T &c) { return (*this = *this >> c); }
  generic_wide_int &operator ++ () { *this += 1; return *this; }
  generic_wide_int &operator -- () { *this += -1; return *this; }






  void dump () const;

  static const bool is_sign_extended
    = wi::int_traits <generic_wide_int <storage> >::is_sign_extended;
};

template <typename storage>
inline generic_wide_int <storage>::generic_wide_int () {}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x)
  : storage (x)
{
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x,
           unsigned int precision)
  : storage (x, precision)
{
}



template <typename storage>
inline long
generic_wide_int <storage>::to_shwi (unsigned int precision) const
{
  if (precision < 64)
    return sext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::to_shwi () const
{
  if (is_sign_extended)
    return this->get_val ()[0];
  else
    return to_shwi (this->get_precision ());
}




template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi (unsigned int precision) const
{
  if (precision < 64)
    return zext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi () const
{
  return to_uhwi (this->get_precision ());
}





template <typename storage>
inline long
generic_wide_int <storage>::to_short_addr () const
{
  return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::sign_mask () const
{
  unsigned int len = this->get_len ();
  ((void)(!(len > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 855, __FUNCTION__), 0 : 0));

  unsigned long high = this->get_val ()[len - 1];
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      int excess = len * 64 - precision;
      if (excess > 0)
 high <<= excess;
    }
  return (long) (high) < 0 ? -1 : 0;
}



template <typename storage>
inline long
generic_wide_int <storage>::slow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline long
generic_wide_int <storage>::shigh () const
{
  return this->get_val ()[this->get_len () - 1];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::ulow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::uhigh () const
{
  return this->get_val ()[this->get_len () - 1];
}


template <typename storage>
inline long
generic_wide_int <storage>::elt (unsigned int i) const
{
  if (i >= this->get_len ())
    return sign_mask ();
  else
    return this->get_val ()[i];
}



template <typename storage>
inline long
generic_wide_int <storage>::sext_elt (unsigned int i) const
{
  long elt_i = elt (i);
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      unsigned int lsb = i * 64;
      if (precision - lsb < 64)
 elt_i = sext_hwi (elt_i, precision - lsb);
    }
  return elt_i;
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage> &
generic_wide_int <storage>::operator = (const T &x)
{
  storage::operator = (x);
  return *this;
}


template <typename storage>
void
generic_wide_int <storage>::dump () const
{
  unsigned int len = this->get_len ();
  const long *val = this->get_val ();
  unsigned int precision = this->get_precision ();
  fprintf (
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "[");
  if (len * 64 < precision)
    fprintf (
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "...,");
  for (unsigned int i = 0; i < len - 1; ++i)
    fprintf (
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "%#" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                    "l" "x" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                            ",", val[len - 1 - i]);
  fprintf (
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "%#" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                  "l" "x" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                          "], precision = %d\n",
    val[0], precision);
}

namespace wi
{
  template <typename storage>
  struct int_traits < generic_wide_int <storage> >
    : public wi::int_traits <storage>
  {
    static unsigned int get_precision (const generic_wide_int <storage> &);
    static wi::storage_ref decompose (long *, unsigned int,
          const generic_wide_int <storage> &);
  };
}

template <typename storage>
inline unsigned int
wi::int_traits < generic_wide_int <storage> >::
get_precision (const generic_wide_int <storage> &x)
{
  return x.get_precision ();
}

template <typename storage>
inline wi::storage_ref
wi::int_traits < generic_wide_int <storage> >::
decompose (long *, unsigned int precision,
    const generic_wide_int <storage> &x)
{
  ((void)(!(precision == x.get_precision ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 984, __FUNCTION__), 0 : 0));
  return wi::storage_ref (x.get_val (), x.get_len (), precision);
}




template <bool SE, bool HDP>
class wide_int_ref_storage : public wi::storage_ref
{
private:


  long scratch[2];

public:
  wide_int_ref_storage () {}

  wide_int_ref_storage (const wi::storage_ref &);

  template <typename T>
  wide_int_ref_storage (const T &);

  template <typename T>
  wide_int_ref_storage (const T &, unsigned int);
};


template <bool SE, bool HDP>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const wi::storage_ref &x)
  : storage_ref (x)
{}




template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::wide_int_ref_storage (const T &x)
  : storage_ref (wi::int_traits <T>::decompose (scratch,
      wi::get_precision (x), x))
{
}


template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const T &x, unsigned int precision)
  : storage_ref (wi::int_traits <T>::decompose (scratch, precision, x))
{
}

namespace wi
{
  template <bool SE, bool HDP>
  struct int_traits <wide_int_ref_storage <SE, HDP> >
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = HDP;
    static const bool is_sign_extended = SE;
  };
}

namespace wi
{
  unsigned int force_to_size (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         signop sgn);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool = true);
}


class wide_int_storage
{
private:
  long val[((160 + 64) / 64)];
  unsigned int len;
  unsigned int precision;

public:
  wide_int_storage ();
  template <typename T>
  wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  wide_int_storage &operator = (const T &);

  static wide_int from (const wide_int_ref &, unsigned int, signop);
  static wide_int from_array (const long *, unsigned int,
         unsigned int, bool = true);
  static wide_int create (unsigned int);


  wide_int bswap () const;
};

namespace wi
{
  template <>
  struct int_traits <wide_int_storage>
  {
    static const enum precision_type precision_type = VAR_PRECISION;

    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    template <typename T1, typename T2>
    static wide_int get_binary_result (const T1 &, const T2 &);
  };
}

inline wide_int_storage::wide_int_storage () {}





template <typename T>
inline wide_int_storage::wide_int_storage (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
}

template <typename T>
inline wide_int_storage&
wide_int_storage::operator = (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
  return *this;
}

inline unsigned int
wide_int_storage::get_precision () const
{
  return precision;
}

inline const long *
wide_int_storage::get_val () const
{
  return val;
}

inline unsigned int
wide_int_storage::get_len () const
{
  return len;
}

inline long *
wide_int_storage::write_val ()
{
  return val;
}

inline void
wide_int_storage::set_len (unsigned int l, bool is_sign_extended)
{
  len = l;
  if (!is_sign_extended && len * 64 > precision)
    val[len - 1] = sext_hwi (val[len - 1],
        precision % 64);
}



inline wide_int
wide_int_storage::from (const wide_int_ref &x, unsigned int precision,
   signop sgn)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, precision, sgn));
  return result;
}




inline wide_int
wide_int_storage::from_array (const long *val, unsigned int len,
         unsigned int precision, bool need_canon_p)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::from_array (result.write_val (), val, len, precision,
      need_canon_p));
  return result;
}


inline wide_int
wide_int_storage::create (unsigned int precision)
{
  wide_int x;
  x.precision = precision;
  return x;
}

template <typename T1, typename T2>
inline wide_int
wi::int_traits <wide_int_storage>::get_binary_result (const T1 &x, const T2 &y)
{

  static_assert ((wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION), "wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION")
                                                                ;
  if (wi::int_traits <T1>::precision_type == FLEXIBLE_PRECISION)
    return wide_int::create (wi::get_precision (y));
  else
    return wide_int::create (wi::get_precision (x));
}


template <int N>
class fixed_wide_int_storage
{
private:
  long val[(N + 64 + 1) / 64];
  unsigned int len;

public:
  fixed_wide_int_storage ();
  template <typename T>
  fixed_wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  static generic_wide_int < fixed_wide_int_storage <N> > from (const wide_int_ref &, signop);
  static generic_wide_int < fixed_wide_int_storage <N> > from_array (const long *, unsigned int,
     bool = true);
};

namespace wi
{
  template <int N>
  struct int_traits < fixed_wide_int_storage <N> >
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static const unsigned int precision = N;
    template <typename T1, typename T2>
    static generic_wide_int < fixed_wide_int_storage <N> > get_binary_result (const T1 &, const T2 &);
  };
}

template <int N>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage () {}


template <int N>
template <typename T>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage (const T &x)
{


  typename wi::binary_traits <T, generic_wide_int < fixed_wide_int_storage <N> > >::result_type *assertion __attribute__ ((__unused__));
  wi::copy (*this, generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > (x, N));
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_precision () const
{
  return N;
}

template <int N>
inline const long *
fixed_wide_int_storage <N>::get_val () const
{
  return val;
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_len () const
{
  return len;
}

template <int N>
inline long *
fixed_wide_int_storage <N>::write_val ()
{
  return val;
}

template <int N>
inline void
fixed_wide_int_storage <N>::set_len (unsigned int l, bool)
{
  len = l;

  static_assert ((N % 64 == 0), "N % HOST_BITS_PER_WIDE_INT == 0");
}


template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from (const wide_int_ref &x, signop sgn)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, N, sgn));
  return result;
}




template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from_array (const long *val,
     unsigned int len,
     bool need_canon_p)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::from_array (result.write_val (), val, len,
      N, need_canon_p));
  return result;
}

template <int N>
template <typename T1, typename T2>
inline generic_wide_int < fixed_wide_int_storage <N> >
wi::int_traits < fixed_wide_int_storage <N> >::
get_binary_result (const T1 &, const T2 &)
{
  return generic_wide_int < fixed_wide_int_storage <N> > ();
}


class trailing_wide_int_storage
{
private:


  unsigned int m_precision;


  unsigned char *m_len;



  long *m_val;

public:
  trailing_wide_int_storage (unsigned int, unsigned char *, long *);


  unsigned int get_len () const;
  unsigned int get_precision () const;
  const long *get_val () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  trailing_wide_int_storage &operator = (const T &);
};

typedef generic_wide_int <trailing_wide_int_storage> trailing_wide_int;


namespace wi
{
  template <>
  struct int_traits <trailing_wide_int_storage>
    : public int_traits <wide_int_storage> {};
}





template <int N>
struct trailing_wide_ints
{
private:

  unsigned short m_precision;


  unsigned char m_max_len;


  unsigned char m_len[N];



  long m_val[1];

public:
  typedef generic_wide_int <wide_int_ref_storage <wi::int_traits <trailing_wide_int_storage>::is_sign_extended, wi::int_traits <trailing_wide_int_storage>::host_dependent_precision> > const_reference;

  void set_precision (unsigned int);
  unsigned int get_precision () const { return m_precision; }
  trailing_wide_int operator [] (unsigned int);
  const_reference operator [] (unsigned int) const;
  static size_t extra_size (unsigned int);
  size_t extra_size () const { return extra_size (m_precision); }
};

inline trailing_wide_int_storage::
trailing_wide_int_storage (unsigned int precision, unsigned char *len,
      long *val)
  : m_precision (precision), m_len (len), m_val (val)
{
}

inline unsigned int
trailing_wide_int_storage::get_len () const
{
  return *m_len;
}

inline unsigned int
trailing_wide_int_storage::get_precision () const
{
  return m_precision;
}

inline const long *
trailing_wide_int_storage::get_val () const
{
  return m_val;
}

inline long *
trailing_wide_int_storage::write_val ()
{
  return m_val;
}

inline void
trailing_wide_int_storage::set_len (unsigned int len, bool is_sign_extended)
{
  *m_len = len;
  if (!is_sign_extended && len * 64 > m_precision)
    m_val[len - 1] = sext_hwi (m_val[len - 1],
          m_precision % 64);
}

template <typename T>
inline trailing_wide_int_storage &
trailing_wide_int_storage::operator = (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, m_precision);
  wi::copy (*this, xi);
  return *this;
}



template <int N>
inline void
trailing_wide_ints <N>::set_precision (unsigned int precision)
{
  m_precision = precision;
  m_max_len = ((precision + 64 - 1)
        / 64);
}


template <int N>
inline trailing_wide_int
trailing_wide_ints <N>::operator [] (unsigned int index)
{
  return trailing_wide_int_storage (m_precision, &m_len[index],
        &m_val[index * m_max_len]);
}

template <int N>
inline typename trailing_wide_ints <N>::const_reference
trailing_wide_ints <N>::operator [] (unsigned int index) const
{
  return wi::storage_ref (&m_val[index * m_max_len],
     m_len[index], m_precision);
}



template <int N>
inline size_t
trailing_wide_ints <N>::extra_size (unsigned int precision)
{
  unsigned int max_len = ((precision + 64 - 1)
     / 64);
  return (N * max_len - 1) * sizeof (long);
}
# 1503 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{

  template <typename T, bool signed_p>
  struct primitive_int_traits
  {
    static const enum precision_type precision_type = FLEXIBLE_PRECISION;
    static const bool host_dependent_precision = true;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (T);
    static wi::storage_ref decompose (long *, unsigned int, T);
  };
}

template <typename T, bool signed_p>
inline unsigned int
wi::primitive_int_traits <T, signed_p>::get_precision (T)
{
  return sizeof (T) * 8;
}

template <typename T, bool signed_p>
inline wi::storage_ref
wi::primitive_int_traits <T, signed_p>::decompose (long *scratch,
         unsigned int precision, T x)
{
  scratch[0] = x;
  if (signed_p || scratch[0] >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}


namespace wi
{
  template <>
  struct int_traits <unsigned char>
    : public primitive_int_traits <unsigned char, false> {};

  template <>
  struct int_traits <unsigned short>
    : public primitive_int_traits <unsigned short, false> {};

  template <>
  struct int_traits <int>
    : public primitive_int_traits <int, true> {};

  template <>
  struct int_traits <unsigned int>
    : public primitive_int_traits <unsigned int, false> {};

  template <>
  struct int_traits <long>
    : public primitive_int_traits <long, true> {};

  template <>
  struct int_traits <unsigned long>
    : public primitive_int_traits <unsigned long, false> {};


  template <>
  struct int_traits <long long>
    : public primitive_int_traits <long long, true> {};

  template <>
  struct int_traits <unsigned long long>
    : public primitive_int_traits <unsigned long long, false> {};

}

namespace wi
{


  class hwi_with_prec
  {
  public:
    hwi_with_prec () {}
    hwi_with_prec (long, unsigned int, signop);
    long val;
    unsigned int precision;
    signop sgn;
  };

  hwi_with_prec shwi (long, unsigned int);
  hwi_with_prec uhwi (unsigned long, unsigned int);

  hwi_with_prec minus_one (unsigned int);
  hwi_with_prec zero (unsigned int);
  hwi_with_prec one (unsigned int);
  hwi_with_prec two (unsigned int);
}

inline wi::hwi_with_prec::hwi_with_prec (long v, unsigned int p,
      signop s)
  : precision (p), sgn (s)
{
  if (precision < 64)
    val = sext_hwi (v, precision);
  else
    val = v;
}


inline wi::hwi_with_prec
wi::shwi (long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, SIGNED);
}


inline wi::hwi_with_prec
wi::uhwi (unsigned long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, UNSIGNED);
}


inline wi::hwi_with_prec
wi::minus_one (unsigned int precision)
{
  return wi::shwi (-1, precision);
}


inline wi::hwi_with_prec
wi::zero (unsigned int precision)
{
  return wi::shwi (0, precision);
}


inline wi::hwi_with_prec
wi::one (unsigned int precision)
{
  return wi::shwi (1, precision);
}


inline wi::hwi_with_prec
wi::two (unsigned int precision)
{
  return wi::shwi (2, precision);
}

namespace wi
{


  template<typename T, precision_type = int_traits<T>::precision_type>
  struct ints_for
  {
    static int zero (const T &) { return 0; }
  };

  template<typename T>
  struct ints_for<T, VAR_PRECISION>
  {
    static hwi_with_prec zero (const T &);
  };
}

template<typename T>
inline wi::hwi_with_prec
wi::ints_for<T, wi::VAR_PRECISION>::zero (const T &x)
{
  return wi::zero (wi::get_precision (x));
}

namespace wi
{
  template <>
  struct int_traits <wi::hwi_with_prec>
  {
    static const enum precision_type precision_type = VAR_PRECISION;


    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (const wi::hwi_with_prec &);
    static wi::storage_ref decompose (long *, unsigned int,
          const wi::hwi_with_prec &);
  };
}

inline unsigned int
wi::int_traits <wi::hwi_with_prec>::get_precision (const wi::hwi_with_prec &x)
{
  return x.precision;
}

inline wi::storage_ref
wi::int_traits <wi::hwi_with_prec>::
decompose (long *scratch, unsigned int precision,
    const wi::hwi_with_prec &x)
{
  ((void)(!(precision == x.precision) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 1700, __FUNCTION__), 0 : 0));
  scratch[0] = x.val;
  if (x.sgn == SIGNED || x.val >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}






namespace wi
{
  bool eq_p_large (const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  bool lts_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  bool ltu_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  int cmps_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  int cmpu_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  unsigned int sext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int zext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int set_bit_large (long *, const long *,
         unsigned int, unsigned int, unsigned int);
  unsigned int lshift_large (long *, const long *,
        unsigned int, unsigned int, unsigned int);
  unsigned int lrshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int arshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int and_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int and_not_large (long *, const long *,
         unsigned int, const long *,
         unsigned int, unsigned int);
  unsigned int or_large (long *, const long *, unsigned int,
    const long *, unsigned int, unsigned int);
  unsigned int or_not_large (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int);
  unsigned int xor_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int add_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int sub_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int mul_internal (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int, signop,
        overflow_type *, bool);
  unsigned int divmod_internal (long *, unsigned int *,
    long *, const long *,
    unsigned int, unsigned int,
    const long *,
    unsigned int, unsigned int,
    signop, overflow_type *);
}


template <typename T>
inline unsigned int
wi::get_precision (const T &x)
{
  return wi::int_traits <T>::get_precision (x);
}



template <typename T1, typename T2>
inline unsigned int
wi::get_binary_precision (const T1 &x, const T2 &y)
{
  return get_precision (wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::
   get_binary_result (x, y));
}


template <typename T1, typename T2>
inline void
wi::copy (T1 &x, const T2 &y)
{
  long *xval = x.write_val ();
  const long *yval = y.get_val ();
  unsigned int len = y.get_len ();
  unsigned int i = 0;
  do
    xval[i] = yval[i];
  while (++i < len);
  x.set_len (len, y.is_sign_extended);
}


template <typename T>
inline bool
wi::fits_shwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.len == 1;
}



template <typename T>
inline bool
wi::fits_uhwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (xi.precision <= 64)
    return true;
  if (xi.len == 1)
    return xi.slow () >= 0;
  return xi.len == 2 && xi.uhigh () == 0;
}



template <typename T>
inline bool
wi::neg_p (const T &x, signop sgn)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (sgn == UNSIGNED)
    return false;
  return xi.sign_mask () < 0;
}


template <typename T>
inline long
wi::sign_mask (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.sign_mask ();
}


template <typename T1, typename T2>
inline bool
wi::eq_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (xi.is_sign_extended && yi.is_sign_extended)
    {

      if (xi.len != yi.len)
 return false;
      unsigned int i = 0;
      do
 if (xi.val[i] != yi.val[i])
   return false;
      while (++i != xi.len);
      return true;
    }
  if (__builtin_expect (yi.len == 1, true))
    {

      if (xi.len != 1)
 return false;


      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return xi.val[0] == 0;

      unsigned long diff = xi.val[0] ^ yi.val[0];
      int excess = 64 - precision;
      if (excess > 0)
 diff <<= excess;
      return diff == 0;
    }
  return eq_p_large (xi.val, xi.len, yi.val, yi.len, precision);
}


template <typename T1, typename T2>
inline bool
wi::ne_p (const T1 &x, const T2 &y)
{
  return !eq_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::lts_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi);

      if (wi::fits_shwi_p (xi))
 return xi.to_shwi () < yi.to_shwi ();


      if (neg_p (xi))
 return true;


      return false;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return !neg_p (yi);
  return lts_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::ltu_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    return xi.len == 1 && xi.to_uhwi () < (unsigned long) yi.val[0];
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    return yi.len != 1 || yi.to_uhwi () > (unsigned long) xi.val[0];



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl;
    }
  return ltu_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::lt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return lts_p (x, y);
  else
    return ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::les_p (const T1 &x, const T2 &y)
{
  return !lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::leu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::le_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return les_p (x, y);
  else
    return leu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::gts_p (const T1 &x, const T2 &y)
{
  return lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gtu_p (const T1 &x, const T2 &y)
{
  return ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return gts_p (x, y);
  else
    return gtu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ges_p (const T1 &x, const T2 &y)
{
  return !lts_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::geu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ge_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return ges_p (x, y);
  else
    return geu_p (x, y);
}



template <typename T1, typename T2>
inline int
wi::cmps (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi) ? -1 : !(xi.len == 1 && xi.val[0] == 0);

      if (wi::fits_shwi_p (xi))
 {
   long xl = xi.to_shwi ();
   long yl = yi.to_shwi ();
   return xl < yl ? -1 : xl > yl;
 }


      if (neg_p (xi))
 return -1;


      return 1;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return neg_p (yi) ? 1 : -1;
  return cmps_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmpu (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    {

      if (xi.len != 1)
 return 1;

      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.val[0];
      return xl < yl ? -1 : xl > yl;
    }
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    {

      if (yi.len != 1)
 return -1;

      unsigned long xl = xi.val[0];
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }
  return cmpu_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmp (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return cmps (x, y);
  else
    return cmpu (x, y);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::bit_not (const T &x)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, get_precision (result));
  for (unsigned int i = 0; i < xi.len; ++i)
    val[i] = ~xi.val[i];
  result.set_len (xi.len);
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x)
{
  return sub (0, x);
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x, overflow_type *overflow)
{
  *overflow = only_sign_bit_p (x) ? OVF_OVERFLOW : OVF_NONE;
  return sub (0, x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::abs (const T &x)
{
  return neg_p (x) ? neg (x) : typename wi::binary_traits <T, T>::result_type (x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::sext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);

  if (offset <= 64)
    {
      val[0] = sext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (sext_large (val, xi.val, xi.len, precision, offset));
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::zext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (offset >= precision)
    {
      wi::copy (result, xi);
      return result;
    }



  if (offset < 64)
    {
      val[0] = zext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (zext_large (val, xi.val, xi.len, precision, offset), true);
  return result;
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::ext (const T &x, unsigned int offset, signop sgn)
{
  return sgn == SIGNED ? sext (x, offset) : zext (x, offset);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::set_bit (const T &x, unsigned int bit)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () | (1UL << bit);
      result.set_len (1);
    }
  else
    result.set_len (set_bit_large (val, xi.val, xi.len, precision, bit));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::min (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::le_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, UNSIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::max (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::ge_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, UNSIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_large (val, xi.val, xi.len, yi.val, yi.len,
          precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_not_large (val, xi.val, xi.len, yi.val, yi.len,
       precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_large (val, xi.val, xi.len,
         yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_not_large (val, xi.val, xi.len, yi.val, yi.len,
      precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_xor (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () ^ yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (xor_large (val, xi.val, xi.len,
          yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () + yi.ulow ();
      result.set_len (1);
    }
# 2441 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (resultl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      if (sgn == SIGNED)
 {
   if ((((resultl ^ xl) & (resultl ^ yl))
        >> (precision - 1)) & 1)
     {
       if (xl > resultl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < resultl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       < (xl << (64 - precision)))
   ? OVF_OVERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () - yi.ulow ();
      result.set_len (1);
    }
# 2527 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (xl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      if (sgn == SIGNED)
 {
   if ((((xl ^ yl) & (resultl ^ xl)) >> (precision - 1)) & 1)
     {
       if (xl > yl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < yl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       > (xl << (64 - precision)))
   ? OVF_UNDERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () * yi.ulow ();
      result.set_len (1);
    }
  else
    result.set_len (mul_internal (val, xi.val, xi.len, yi.val, yi.len,
      precision, UNSIGNED, 0, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, overflow, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, SIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, UNSIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul_high (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, 0, true));
  return result;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  quotient.set_len (divmod_internal (quotient_val, 0, 0, xi.val, xi.len,
         precision,
         yi.val, yi.len, yi.precision,
         sgn, overflow));
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return quotient - 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return quotient + 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_ceil (const T1 &x, const T2 &y)
{
  return div_ceil (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return quotient - 1;
       else
  return quotient + 1;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return quotient + 1;
 }
    }
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::divmod_trunc (const T1 &x, const T2 &y, signop sgn,
    typename wi::binary_traits <T1, T2>::result_type *remainder_ptr)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn, 0));
  remainder.set_len (remainder_len);

  *remainder_ptr = remainder;
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::gcd (const T1 &a, const T2 &b, signop sgn)
{
  T1 x, y, z;

  x = wi::abs (a);
  y = wi::abs (b);

  while (gt_p (x, 0, sgn))
    {
      z = mod_trunc (y, x, sgn);
      y = x;
      x = z;
    }

  return y;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (remainder);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  divmod_internal (0, &remainder_len, remainder_val,
     xi.val, xi.len, precision,
     yi.val, yi.len, yi.precision, sgn, overflow);
  remainder.set_len (remainder_len);

  return remainder;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return remainder + y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_floor (const T1 &x, const T2 &y)
{
  return mod_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return remainder - y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return remainder + y;
       else
  return remainder - y;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return remainder - y;
 }
    }
  return remainder;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn)
{
  return wi::mod_trunc (x, y, sgn) == 0;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn,
     typename wi::binary_traits <T1, T2>::result_type *res)
{
  typename wi::binary_traits <T1, T2>::result_type remainder;
  typename wi::binary_traits <T1, T2>::result_type quotient
    = divmod_trunc (x, y, sgn, &remainder);
  if (remainder == 0)
    {
      *res = quotient;
      return true;
    }
  return false;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3054 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? ((__builtin_constant_p (shift < 64 - 1) && (shift < 64 - 1))
      && xi.len == 1
      && ((unsigned long) (xi.val[0]) - (unsigned long) (0) <= (unsigned long) ((~((long) (1UL << (64 - 1)))) >> shift) - (unsigned long) (0)))
   : precision <= 64)
 {
   val[0] = xi.ulow () << shift;
   result.set_len (1);
 }
      else
 result.set_len (lshift_large (val, xi.val, xi.len,
          precision, shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lrshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3098 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? (shift < 64
      && xi.len == 1
      && xi.val[0] >= 0)
   : xi.precision <= 64)
 {
   val[0] = xi.to_uhwi () >> shift;
   result.set_len (1);
 }
      else
 result.set_len (lrshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::arshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = sign_mask (x);
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
      if (xi.precision <= 64)
 {
   val[0] = sext_hwi (xi.ulow () >> shift, xi.precision - shift);
   result.set_len (1, true);
 }
      else
 result.set_len (arshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::rshift (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == UNSIGNED)
    return lrshift (x, y);
  else
    return arshift (x, y);
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::lrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::rrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}



inline int
wi::parity (const wide_int_ref &x)
{
  return popcount (x) & 1;
}


template <typename T>
inline unsigned long
wi::extract_uhwi (const T &x, unsigned int bitpos, unsigned int width)
{
  unsigned precision = get_precision (x);
  if (precision < bitpos + width)
    precision = bitpos + width;
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (width == 0)
    return 0;

  unsigned int start = bitpos / 64;
  unsigned int shift = bitpos % 64;
  unsigned long res = xi.elt (start);
  res >>= shift;
  if (shift + width > 64)
    {
      unsigned long upper = xi.elt (start + 1);
      res |= upper << (-shift % 64);
    }
  return zext_hwi (res, width);
}


template <typename T>
inline unsigned int
wi::min_precision (const T &x, signop sgn)
{
  if (sgn == SIGNED)
    return get_precision (x) - clrsb (x);
  else
    return get_precision (x) - clz (x);
}
# 3248 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator < (const T1 &x, const T2 &y) { return wi::lts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator <= (const T1 &x, const T2 &y) { return wi::les_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator > (const T1 &x, const T2 &y) { return wi::gts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator >= (const T1 &x, const T2 &y) { return wi::ges_p (x, y); }
# 3287 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator ~ (const generic_wide_int<T> &x) { return wi::bit_not (x); }
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator - (const generic_wide_int<T> &x) { return wi::neg (x); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator == (const T1 &x, const T2 &y) { return wi::eq_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator != (const T1 &x, const T2 &y) { return wi::ne_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator & (const T1 &x, const T2 &y) { return wi::bit_and (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator | (const T1 &x, const T2 &y) { return wi::bit_or (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator ^ (const T1 &x, const T2 &y) { return wi::bit_xor (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator + (const T1 &x, const T2 &y) { return wi::add (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator - (const T1 &x, const T2 &y) { return wi::sub (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator * (const T1 &x, const T2 &y) { return wi::mul (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T1>::operator_result operator << (const T1 &x, const T2 &y) { return wi::lshift (x, y); }






template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator >> (const T1 &x, const T2 &y)
{
  return wi::arshift (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator / (const T1 &x, const T2 &y)
{
  return wi::sdiv_trunc (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator % (const T1 &x, const T2 &y)
{
  return wi::smod_trunc (x, y);
}

template<typename T>
void
gt_ggc_mx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *, void (*) (void *, void *), void *)
{
}

template<int N>
void
gt_ggc_mx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *, void (*) (void *, void *), void *)
{
}

namespace wi
{



  struct never_used1 {};
  struct never_used2 {};

  wide_int min_value (unsigned int, signop);
  wide_int min_value (never_used1 *);
  wide_int min_value (never_used2 *);
  wide_int max_value (unsigned int, signop);
  wide_int max_value (never_used1 *);
  wide_int max_value (never_used2 *);



  wide_int from_buffer (const unsigned char *, unsigned int);


  void to_mpz (const wide_int_ref &, mpz_t, signop);


  wide_int mask (unsigned int, bool, unsigned int);
  wide_int shifted_mask (unsigned int, unsigned int, bool, unsigned int);
  wide_int set_bit_in_zero (unsigned int, unsigned int);
  wide_int insert (const wide_int &x, const wide_int &y, unsigned int,
     unsigned int);
  wide_int round_down_for_mask (const wide_int &, const wide_int &);
  wide_int round_up_for_mask (const wide_int &, const wide_int &);

  wide_int mod_inv (const wide_int &a, const wide_int &b);

  template <typename T>
  T mask (unsigned int, bool);

  template <typename T>
  T shifted_mask (unsigned int, unsigned int, bool);

  template <typename T>
  T set_bit_in_zero (unsigned int);

  unsigned int mask (long *, unsigned int, bool, unsigned int);
  unsigned int shifted_mask (long *, unsigned int, unsigned int,
        bool, unsigned int);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool);
}



inline wide_int
wi::mask (unsigned int width, bool negate_p, unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (mask (result.write_val (), width, negate_p, precision));
  return result;
}




inline wide_int
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p,
    unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (shifted_mask (result.write_val (), start, width, negate_p,
    precision));
  return result;
}



inline wide_int
wi::set_bit_in_zero (unsigned int bit, unsigned int precision)
{
  return shifted_mask (bit, 1, false, precision);
}



template <typename T>
inline T
wi::mask (unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (mask (result.write_val (), width, negate_p,
   wi::int_traits <T>::precision));
  return result;
}




template <typename T>
inline T
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (shifted_mask (result.write_val (), start, width,
    negate_p,
    wi::int_traits <T>::precision));
  return result;
}



template <typename T>
inline T
wi::set_bit_in_zero (unsigned int bit)
{
  return shifted_mask <T> (bit, 1, false);
}



static inline void
wi::accumulate_overflow (wi::overflow_type &overflow,
    wi::overflow_type suboverflow)
{
  if (!suboverflow)
    return;
  if (!overflow)
    overflow = suboverflow;
  else if (overflow != suboverflow)
    overflow = wi::OVF_UNKNOWN;
}
# 452 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h"
extern void print_dec (const wide_int_ref &wi, char *buf, signop sgn);
extern void print_dec (const wide_int_ref &wi, FILE *file, signop sgn);
extern void print_decs (const wide_int_ref &wi, char *buf);
extern void print_decs (const wide_int_ref &wi, FILE *file);
extern void print_decu (const wide_int_ref &wi, char *buf);
extern void print_decu (const wide_int_ref &wi, FILE *file);
extern void print_hex (const wide_int_ref &wi, char *buf);
extern void print_hex (const wide_int_ref &wi, FILE *file);
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename T> struct poly_int_pod;
template<unsigned int N, typename T> class poly_int;
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T, wi::precision_type = wi::int_traits<T>::precision_type>
struct poly_coeff_traits;

template<typename T>
struct poly_coeff_traits<T, wi::FLEXIBLE_PRECISION>
{
  typedef T result;
  typedef T int_type;
  static const int signedness = (T (0) >= T (-1));
  static const int precision = sizeof (T) * 8;
  static const T max_value = (signedness
         ? ((T (1) << (precision - 2))
     + ((T (1) << (precision - 2)) - 1))
         : T (-1));
  static const int rank = sizeof (T) * 2 + !signedness;
};

template<typename T>
struct poly_coeff_traits<T, wi::VAR_PRECISION>
{
  typedef T result;
  typedef int int_type;
  static const int signedness = -1;
  static const int precision = (((160 + 64) / 64) * 64);
  static const int rank = 0x7fffffff;
};

template<typename T>
struct poly_coeff_traits<T, wi::CONST_PRECISION>
{
  typedef typename wi::binary_traits <T, T>::result_type result;
  typedef int int_type;

  static const int signedness = 1;
  static const int precision = wi::int_traits<T>::precision;
  static const int rank = precision * 2 / 8;
};


template<typename T1, typename T2>
struct poly_coeff_pair_traits
{
# 118 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  static const bool lossless_p = (poly_coeff_traits<T1>::signedness
      == poly_coeff_traits<T2>::signedness
      ? (poly_coeff_traits<T1>::precision
         >= poly_coeff_traits<T2>::precision)
      : (poly_coeff_traits<T1>::signedness == 1
         && poly_coeff_traits<T2>::signedness == 0
         && (poly_coeff_traits<T1>::precision
      > poly_coeff_traits<T2>::precision)));





  static const int result_kind
    = ((poly_coeff_traits<T1>::rank <= poly_coeff_traits<long>::rank
 && poly_coeff_traits<T2>::rank <= poly_coeff_traits<long>::rank)
       ? 0
       : (poly_coeff_traits<T1>::rank <= poly_coeff_traits<unsigned long>::rank
   && poly_coeff_traits<T2>::rank <= poly_coeff_traits<unsigned long>::rank)
       ? 1 : 2);

};



template<typename T1, typename T2, typename T3,
  bool lossless_p = poly_coeff_pair_traits<T1, T2>::lossless_p>
struct if_lossless;
template<typename T1, typename T2, typename T3>
struct if_lossless<T1, T2, T3, true>
{
  typedef T3 type;
};
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T>
struct poly_int_traits
{
  static const bool is_poly = false;
  static const unsigned int num_coeffs = 1;
  typedef T coeff_type;
  typedef typename poly_coeff_traits<T>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int_pod<N, C> >
{
  static const bool is_poly = true;
  static const unsigned int num_coeffs = N;
  typedef C coeff_type;
  typedef typename poly_coeff_traits<C>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int<N, C> > : poly_int_traits<poly_int_pod<N, C> >
{
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_nonpoly {};
template<typename T1, typename T2>
struct if_nonpoly<T1, T2, false>
{
  typedef T2 type;
};



template<typename T1, typename T2, typename T3,
  bool is_poly1 = poly_int_traits<T1>::is_poly,
  bool is_poly2 = poly_int_traits<T2>::is_poly>
struct if_nonpoly2 {};
template<typename T1, typename T2, typename T3>
struct if_nonpoly2<T1, T2, T3, false, false>
{
  typedef T3 type;
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_poly {};
template<typename T1, typename T2>
struct if_poly<T1, T2, true>
{
  typedef T2 type;
};
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2 = T1,
  int result_kind = poly_coeff_pair_traits<T1, T2>::result_kind>
struct poly_result;


template<typename T1, typename T2>
struct poly_result<T1, T2, 0>
{
  typedef long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 1>
{
  typedef unsigned long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 2>
{
  typedef typename wi::binary_traits <T1, T2>::result_type type;


  typedef const T1 &cast;
};
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename C>
struct poly_int_pod
{
public:
  template<typename Ca>
  poly_int_pod &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int_pod &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int_pod &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator *= (const Ca &);

  poly_int_pod &operator <<= (unsigned int);

  bool is_constant () const;

  template<typename T>
  typename if_lossless<T, C, bool>::type is_constant (T *) const;

  C to_constant () const;

  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, unsigned int,
         signop);
  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, signop);

  bool to_shwi (poly_int_pod<N, long> *) const;
  bool to_uhwi (poly_int_pod<N, unsigned long> *) const;
  poly_int<N, long> force_shwi () const;
  poly_int<N, unsigned long> force_uhwi () const;





  C coeffs[N];
};

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator = (const Ca &a)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = a) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (a)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::is_constant () const
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (this->coeffs[i] != 0)
 return false;
  return true;
}




template<unsigned int N, typename C>
template<typename T>
inline typename if_lossless<T, C, bool>::type
poly_int_pod<N, C>::is_constant (T *const_value) const
{
  if (is_constant ())
    {
      *const_value = this->coeffs[0];
      return true;
    }
  return false;
}







template<unsigned int N, typename C>
inline C
poly_int_pod<N, C>::to_constant () const
{
  ((void)(!(is_constant ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 504, __FUNCTION__), 0 : 0));
  return this->coeffs[0];
}





template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a,
     unsigned int bitsize, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], bitsize, sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], bitsize, sgn))));
  return r;
}




template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], sgn))));
  return r;
}





template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_shwi (poly_int_pod<N, long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_shwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_shwi ();
  return true;
}






template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_uhwi (poly_int_pod<N, unsigned long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_uhwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_uhwi ();
  return true;
}




template<unsigned int N, typename C>
inline poly_int<N, long>
poly_int_pod<N, C>::force_shwi () const
{
  poly_int_pod<N, long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_shwi ();
  return r;
}




template<unsigned int N, typename C>
inline poly_int<N, unsigned long>
poly_int_pod<N, C>::force_uhwi () const
{
  poly_int_pod<N, unsigned long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_uhwi ();
  return r;
}
# 611 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename C>
class poly_int : public poly_int_pod<N, C>
{
public:
  poly_int () {}

  template<typename Ca>
  poly_int (const poly_int<N, Ca> &);
  template<typename Ca>
  poly_int (const poly_int_pod<N, Ca> &);
  template<typename C0>
  poly_int (const C0 &);
  template<typename C0, typename C1>
  poly_int (const C0 &, const C1 &);

  template<typename Ca>
  poly_int &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator *= (const Ca &);

  poly_int &operator <<= (unsigned int);
};

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename C0>
inline
poly_int<N, C>::poly_int (const C0 &c0)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename C0, typename C1>
inline
poly_int<N, C>::poly_int (const C0 &c0, const C1 &c1)
{
  static_assert ((N >= 2), "N >= 2");
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[1] = c1) : (void) ((*this).coeffs[1].~C (), new (&(*this).coeffs[1]) C (c1)));
  for (unsigned int i = 2; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] = a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator = (const Ca &a)
{
  this->coeffs[0] = a;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      this->coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0]);
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int<N, C>&
poly_int<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const Ca &a, const Cb &b, const Cc &c)
{
  return a >= b && a <= c;
}

template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const poly_int_pod<N, Ca> &a, const Cb &b, const Cc &c)
{
  for (unsigned int i = 0; i < N; i++)
    if (a.coeffs[i] < b || a.coeffs[i] > c)
      return false;
  return true;
}

namespace wi {


template<unsigned int N>
inline poly_int<N, hwi_with_prec>
shwi (const poly_int_pod<N, long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::shwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::shwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N>
inline poly_int<N, hwi_with_prec>
uhwi (const poly_int_pod<N, unsigned long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::uhwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::uhwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
sext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sext (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
zext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::zext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::zext (a.coeffs[i], precision))));
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator + (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) + b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) + b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator + (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) + b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) + b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator + (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a + NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a + NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator - (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) - b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) - b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator - (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) - b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) - b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator - (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a - NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a - NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator - (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCa (a.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::neg (a.coeffs[0], overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::neg (a.coeffs[0], overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i], &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i], &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator ~ (const poly_int_pod<N, Ca> &a)
{
  if (N >= 2)
    return -1 - a;
  return ~a.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator * (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) * b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) * b)));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator * (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a) * b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a) * b.coeffs[i])));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a, b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a, b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::mul (a.coeffs[0], b, sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::mul (a.coeffs[0], b, sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b, sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b, sgn, &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator << (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) << b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) << b)));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
lshift (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::lshift (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::lshift (a.coeffs[i], b))));
  return r;
}
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b0, const Cb &b1)
{
  if (a1 != b1)







    return (a1 < b1
     ? b0 <= a0 && (a0 - b0) % (b1 - a1) == 0
     : b0 >= a0 && (b0 - a0) % (a1 - b1) == 0);
  return a0 == b0;
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b)
{
  if (a1 != 0)






    return (a1 < 0
     ? b <= a0 && (a0 - b) % a1 == 0
     : b >= a0 && (b - a0) % a1 == 0);
  return a0 == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_eq (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b.coeffs[0], b.coeffs[1]);
  return a.coeffs[0] == b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_eq (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b);
  return a.coeffs[0] == b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_eq (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (b.coeffs[0], b.coeffs[1], a);
  return a == b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_eq (const Ca &a, const Cb &b)
{
  return a == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_ne (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != b.coeffs[i])
 return true;
  return a.coeffs[0] != b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_ne (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != 0)
 return true;
  return a.coeffs[0] != b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_ne (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] != 0)
 return true;
  return a != b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_ne (const Ca &a, const Cb &b)
{
  return a != b;
}
# 1312 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_le (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] <= b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_le (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] <= b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_le (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a <= b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_le (const Ca &a, const Cb &b)
{
  return a <= b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_lt (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] < b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_lt (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] < b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_lt (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a < b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_lt (const Ca &a, const Cb &b)
{
  return a < b;
}
# 1414 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2>
inline bool
ordered_p (const T1 &a, const T2 &b)
{
  return ((poly_int_traits<T1>::num_coeffs == 1
    && poly_int_traits<T2>::num_coeffs == 1)
   || (!maybe_lt (b, a))
   || (!maybe_lt (a, b)));
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1439, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_min (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1453, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1467, __FUNCTION__), 0 : 0));
      return b;
    }
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1487, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_max (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1501, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1515, __FUNCTION__), 0 : 0));
      return a;
    }
}




template<unsigned int N, typename Ca>
inline Ca
constant_lower_bound (const poly_int_pod<N, Ca> &a)
{
  ((void)(!((!maybe_lt (a, typename poly_int_traits<Ca>::int_type (0)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1527, __FUNCTION__), 0 : 0));
  return a.coeffs[0];
}



template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_lower_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (a, b)))
    return a.coeffs[0];
  return b;
}




template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_upper_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a.coeffs[0];
  return b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
lower_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return lower_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}

template<typename Ca, typename Cb>
inline typename poly_result<typename if_nonpoly<Ca>::type, typename if_nonpoly<Cb>::type>::type
lower_bound (const Ca &a, const Cb &b)
{
  return a < b ? a : b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
upper_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return upper_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
coeff_gcd (const poly_int_pod<N, Ca> &a)
{

  unsigned int i;
  for (i = N - 1; i > 0; --i)
    if (a.coeffs[i] != 0)
      break;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[i];
  for (unsigned int j = 0; j < i; ++j)
    if (a.coeffs[j] != 0)
      r = gcd (r, C (a.coeffs[j]));
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
common_multiple (const poly_int_pod<N, Ca> &a, Cb b)
{
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type xgcd = coeff_gcd (a);
  return a * (least_common_multiple (xgcd, b) / xgcd);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
common_multiple (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return common_multiple (b, a);
}
# 1692 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, Cb>::type>
force_common_multiple (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return common_multiple (a, b.coeffs[0]);
  if (a.is_constant ())
    return common_multiple (a.coeffs[0], b);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Ca>::int_type ICa;

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] != ICa (0))
      {
 C lcm = least_common_multiple (NCa (a.coeffs[i]), NCb (b.coeffs[i]));
 C amul = lcm / a.coeffs[i];
 C bmul = lcm / b.coeffs[i];
 for (unsigned int j = 0; j < N; ++j)
   ((void)(!(a.coeffs[j] * amul == b.coeffs[j] * bmul) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1714, __FUNCTION__), 0 : 0));
 return a * amul;
      }
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1717, __FUNCTION__));
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline int
compare_sizes_for_sort (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b)
{
  for (unsigned int i = N; i-- > 0; )
    if (a.coeffs[i] != b.coeffs[i])
      return a.coeffs[i] < b.coeffs[i] ? -1 : 1;
  return 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_p (const poly_int_pod<N, Ca> &value, Cb align)
{
  for (unsigned int i = 1; i < N; i++)
    if ((value.coeffs[i] & (align - 1)) != 0)
      return false;
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_up (const poly_int_pod<N, Ca> &value, Cb align,
       poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value + (-value.coeffs[0] & (align - 1));
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_down (const poly_int_pod<N, Ca> &value, Cb align,
  poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value - (value.coeffs[0] & (align - 1));
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_up (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b,
       Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_up (a, align, &aligned_a)
   && can_align_up (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_down (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b,
         Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_down (a, align, &aligned_a)
   && can_align_down (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1827, __FUNCTION__), 0 : 0));
  return value + (-value.coeffs[0] & (align - 1));
}
# 1838 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1842, __FUNCTION__), 0 : 0));
  return value - (value.coeffs[0] & (align - 1));
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_lower_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)


    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] - (value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] - (value.coeffs[i] & (align - 1))))))
                                             ;
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_upper_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] + (-value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] + (-value.coeffs[i] & (align - 1))))))
                                              ;
  return r;
}
# 1886 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1890, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}
# 1910 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1914, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
known_misalignment (const poly_int_pod<N, Ca> &value, Cb align, Cm *misalign)
{
  ((void)(!(align != 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1934, __FUNCTION__), 0 : 0));
  if (!can_align_p (value, align))
    return false;
  *misalign = value.coeffs[0] & (align - 1);
  return true;
}





template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
force_get_misalignment (const poly_int_pod<N, Ca> &a, Cb align)
{
  ((void)(!(can_align_p (a, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1949, __FUNCTION__), 0 : 0));
  return a.coeffs[0] & (align - 1);
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
known_alignment (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[0];
  for (unsigned int i = 1; i < N; ++i)
    r |= a.coeffs[i];
  return r & -r;
}




template<unsigned int N, typename Ca, typename Cb, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_ior_p (const poly_int_pod<N, Ca> &a, Cb b, Cr *result)
{


  typedef typename poly_int_traits<Ca>::int_type int_type;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if ((-(a.coeffs[i] & -a.coeffs[i]) & b) != int_type (0))
 return false;
  *result = a;
  result->coeffs[0] |= b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
constant_multiple_p (const poly_int_pod<N, Ca> &a, Cb b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  if (NCa (a.coeffs[0]) % NCb (b) != 0 || !a.is_constant ())
    return false;
  *multiple = NCa (a.coeffs[0]) / NCb (b);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
constant_multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type int_type;



  if (NCa (a) % NCb (b.coeffs[0]) != 0
      || (a != int_type (0) && !b.is_constant ()))
    return false;
  *multiple = NCa (a) / NCb (b.coeffs[0]);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
constant_multiple_p (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;

  if (NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0)
    return false;

  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    if (b.coeffs[i] == ICb (0)
 ? a.coeffs[i] != ICa (0)
 : (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0
    || NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != r))
      return false;

  *multiple = r;
  return true;
}



template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b)
{
  return a % b == 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b)
{
  for (unsigned int i = 0; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  return true;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_int_traits<Ca>::int_type int_type;



  return a % b.coeffs[0] == 0 && (a == int_type (0) || b.is_constant ());
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0]);
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type tmp;
  return constant_multiple_p (a, b, &tmp);
}




template<typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b, Cm *multiple)
{
  if (a % b != 0)
    return false;
  *multiple = a / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b, poly_int_pod<N, Cm> *multiple)
{
  if (!multiple_p (a, b))
    return false;
  for (unsigned int i = 0; i < N; ++i)
    multiple->coeffs[i] = a.coeffs[i] / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;



  if (a % b.coeffs[0] != 0 || (NCa (a) != 0 && !b.is_constant ()))
    return false;
  *multiple = a / b.coeffs[0];
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     poly_int_pod<N, Cm> *multiple)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0], multiple);
  return constant_multiple_p (a, b, multiple);
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
exact_div (const poly_int_pod<N, Ca> &a, Cb b)
{
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    {
      ((void)(!(a.coeffs[i] % b == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2162, __FUNCTION__), 0 : 0));
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = a.coeffs[i] / b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (a.coeffs[i] / b)));
    }
  return r;
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
exact_div (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return exact_div (a, b.coeffs[0]);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Cb>::int_type int_type;

  ((void)(!(a.coeffs[0] % b.coeffs[0] == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2182, __FUNCTION__), 0 : 0));
  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    ((void)(!(b.coeffs[i] == int_type (0) ? a.coeffs[i] == int_type (0) : (a.coeffs[i] % b.coeffs[i] == 0 && NCa (a.coeffs[i]) / NCb (b.coeffs[i]) == r)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2185, __FUNCTION__), 0 : 0))


                                                      ;

  return r;
}
# 2201 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly2<Cb, Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b, Cq *quotient)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  Cq q = NCa (a.coeffs[0]) / NCb (b);
  if (!a.is_constant ())
    return false;
  *quotient = q;
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient)
{


  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  C q = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
# 2277 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  bool rem_p = NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0;
  for (unsigned int i = 1; i < N; ++i)
    {
      if (b.coeffs[i] == ICb (0))
 {

   if (a.coeffs[i] != ICa (0))
     return false;
 }
      else
 {
   if (q == 0)
     {

       if (a.coeffs[i] != ICa (0))
  {


    C neg_abs_a = (a.coeffs[i] < 0 ? a.coeffs[i] : -a.coeffs[i]);
    C neg_abs_b = (b.coeffs[i] < 0 ? b.coeffs[i] : -b.coeffs[i]);
    if (neg_abs_a < neg_abs_b)
      return false;
    rem_p = true;
  }
     }
   else
     {

       if (NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != q)
  return false;
       if (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0)
  rem_p = true;
     }
 }
    }




  if (rem_p && (!ordered_p (a, ICa (0)) || !ordered_p (b, ICb (0))))
    return false;

  *quotient = q;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a - *quotient * b;
  return true;
}
# 2345 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient)
{

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  for (unsigned int i = 0; i < N; ++i)
    quotient->coeffs[i] = a.coeffs[i] / b;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a.coeffs[0] % b;
  return true;
}







template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline bool
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   poly_int_pod<N, Cq> *quotient)
{
  if (b.is_constant ())
    return can_div_trunc_p (a, b.coeffs[0], quotient);
  if (!can_div_trunc_p (a, b, &quotient->coeffs[0]))
    return false;
  for (unsigned int i = 1; i < N; ++i)
    quotient->coeffs[i] = 0;
  return true;
}
# 2401 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_away_from_zero_p (const poly_int_pod<N, Ca> &a,
     const poly_int_pod<N, Cb> &b,
     Cq *quotient)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  if (maybe_ne (*quotient * b, a))
    *quotient += (*quotient < 0 ? -1 : 1);
  return true;
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file, signop sgn)
{
  if (value.is_constant ())
    print_dec (value.coeffs[0], file, sgn);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_dec (value.coeffs[i], file, sgn);
   fputc (i == N - 1 ? ']' : ',', file);
 }
    }
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file)
{
  static_assert ((poly_coeff_traits<C>::signedness >= 0), "poly_coeff_traits<C>::signedness >= 0");
  print_dec (value, file,
      poly_coeff_traits<C>::signedness ? SIGNED : UNSIGNED);
}



template<unsigned int N, typename C>
void
print_hex (const poly_int_pod<N, C> &value, FILE *file)
{
  if (value.is_constant ())
    print_hex (value.coeffs[0], file);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_hex (value.coeffs[i], file);
   fputc (i == N - 1 ? ']' : ',', file);
 }
    }
}
# 2482 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2,
  typename Res = typename poly_result<typename poly_int_traits<typename poly_result<typename poly_int_traits<T1>::coeff_type, typename poly_int_traits<T2>::coeff_type>::type>::coeff_type, typename poly_int_traits<unsigned long>::coeff_type>::type
                               >
struct poly_span_traits
{
  template<typename T>
  static const T &cast (const T &x) { return x; }
};

template<typename T1, typename T2>
struct poly_span_traits<T1, T2, unsigned long>
{
  template<typename T>
  static typename if_nonpoly<T, unsigned long>::type
  cast (const T &x) { return x; }

  template<unsigned int N, typename T>
  static poly_int<N, unsigned long>
  cast (const poly_int_pod<N, T> &x) { return x; }
};




template<typename T>
inline bool
known_size_p (const T &a)
{
  return maybe_ne (a, typename poly_int_traits<T>::int_type (-1));
}





template<typename T1, typename T2, typename T3>
inline bool
maybe_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  if ((!maybe_le (pos, val)))
    return false;
  if (!known_size_p (size))
    return true;
  if ((poly_int_traits<T1>::num_coeffs > 1
       || poly_int_traits<T2>::num_coeffs > 1)
      && maybe_lt (val, pos))


    return true;
  return maybe_lt (start_span::cast (val) - start_span::cast (pos),
     size_span::cast (size));
}





template<typename T1, typename T2, typename T3>
inline bool
known_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  return (known_size_p (size)
   && (!maybe_lt (val, pos))
   && (!maybe_le (size_span::cast (size), start_span::cast (val) - start_span::cast (pos)))
                                );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_maybe_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  if (maybe_in_range_p (pos2, pos1, size1))
    return maybe_ne (size2, typename poly_int_traits<T4>::int_type (0));
  if (maybe_in_range_p (pos1, pos2, size2))
    return maybe_ne (size1, typename poly_int_traits<T2>::int_type (0));
  return false;
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_known_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T2> size1_span;
  typedef poly_span_traits<T4, T4> size2_span;
# 2593 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  return (known_size_p (size1)
   && known_size_p (size2)
   && (!maybe_le (size1_span::cast (size1), start_span::cast (pos2) - start_span::cast (lower_bound (pos1, pos2))))


   && (!maybe_le (size2_span::cast (size2), start_span::cast (pos1) - start_span::cast (lower_bound (pos1, pos2))))

                                  );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
known_subrange_p (const T1 &pos1, const T2 &size1,
    const T3 &pos2, const T4 &size2)
{
  typedef typename poly_int_traits<T2>::coeff_type C2;
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T4> size_span;
  return ((!maybe_le (size1, typename poly_int_traits<T2>::int_type (0)))
   && (poly_coeff_traits<C2>::signedness > 0
       || known_size_p (size1))
   && known_size_p (size2)
   && (!maybe_lt (pos1, pos2))
   && (!maybe_lt (size2, size1))
   && (!maybe_lt (size_span::cast (size2) - size_span::cast (size1), start_span::cast (pos1) - start_span::cast (pos2)))
                                                           );
}





template<typename T>
inline typename if_nonpoly<T, bool>::type
endpoint_representable_p (const T &pos, const T &size)
{
  return (!known_size_p (size)
   || pos <= poly_coeff_traits<T>::max_value - size);
}

template<unsigned int N, typename C>
inline bool
endpoint_representable_p (const poly_int_pod<N, C> &pos,
     const poly_int_pod<N, C> &size)
{
  if (known_size_p (size))
    for (unsigned int i = 0; i < N; ++i)
      if (pos.coeffs[i] > poly_coeff_traits<C>::max_value - size.coeffs[i])
 return false;
  return true;
}

template<unsigned int N, typename C>
void
gt_ggc_mx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *, void (*) (void *, void *), void *)
{
}
# 467 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h"
typedef poly_int_pod<1, unsigned short> poly_uint16_pod;
typedef poly_int_pod<1, long> poly_int64_pod;
typedef poly_int_pod<1,
       unsigned long> poly_uint64_pod;
typedef poly_int_pod<1, offset_int> poly_offset_int_pod;
typedef poly_int_pod<1, wide_int> poly_wide_int_pod;
typedef poly_int_pod<1, widest_int> poly_widest_int_pod;

typedef poly_int<1, unsigned short> poly_uint16;
typedef poly_int<1, long> poly_int64;
typedef poly_int<1, unsigned long> poly_uint64;
typedef poly_int<1, offset_int> poly_offset_int;
typedef poly_int<1, wide_int> poly_wide_int;
typedef poly_int<1, wide_int_ref> poly_wide_int_ref;
typedef poly_int<1, widest_int> poly_widest_int;
# 468 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "./insn-modes-inline.h" 1
# 10 "./insn-modes-inline.h"
inline __attribute__((__always_inline__))



poly_uint16
mode_size_inline (machine_mode mode)
{
  extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 18, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 2;
    case E_CP2QImode: return 4;
    case E_CHImode: return 4;
    case E_CP2HImode: return 8;
    case E_CSImode: return 8;
    case E_CDImode: return 16;
    case E_CTImode: return 32;
    case E_CPOImode: return 64;
    case E_COImode: return 64;
    case E_CXImode: return 128;
    case E_SCmode: return 8;
    case E_DCmode: return 16;
    case E_TCmode: return 32;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 4;
    case E_V1SImode: return 4;
    case E_V8QImode: return 8;
    case E_V4HImode: return 8;
    case E_V2SImode: return 8;
    case E_V1DImode: return 8;
    case E_V12QImode: return 12;
    case E_V6HImode: return 12;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 16;
    case E_V4SImode: return 16;
    case E_V2DImode: return 16;
    case E_V1TImode: return 16;
    case E_V32QImode: return 32;
    case E_V16HImode: return 32;
    case E_V8SImode: return 32;
    case E_V4DImode: return 32;
    case E_V2TImode: return 32;
    case E_V64QImode: return 64;
    case E_V32HImode: return 64;
    case E_V16SImode: return 64;
    case E_V8DImode: return 64;
    case E_V4TImode: return 64;
    case E_V128QImode: return 128;
    case E_V64HImode: return 128;
    case E_V32SImode: return 128;
    case E_V16DImode: return 128;
    case E_V8TImode: return 128;
    case E_V64SImode: return 256;
    case E_V2SFmode: return 8;
    case E_V4SFmode: return 16;
    case E_V2DFmode: return 16;
    case E_V8SFmode: return 32;
    case E_V4DFmode: return 32;
    case E_V2TFmode: return 32;
    case E_V16SFmode: return 64;
    case E_V8DFmode: return 64;
    case E_V4TFmode: return 64;
    case E_V32SFmode: return 128;
    case E_V16DFmode: return 128;
    case E_V8TFmode: return 128;
    case E_V64SFmode: return 256;
    case E_V32DFmode: return 256;
    case E_V16TFmode: return 256;
    default: return mode_size[mode];
    }
}


inline __attribute__((__always_inline__))



poly_uint16
mode_nunits_inline (machine_mode mode)
{
  extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 1;
    case E_CCGCmode: return 1;
    case E_CCGOCmode: return 1;
    case E_CCNOmode: return 1;
    case E_CCGZmode: return 1;
    case E_CCAmode: return 1;
    case E_CCCmode: return 1;
    case E_CCOmode: return 1;
    case E_CCPmode: return 1;
    case E_CCSmode: return 1;
    case E_CCZmode: return 1;
    case E_CCFPmode: return 1;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 1;
    case E_SImode: return 1;
    case E_DImode: return 1;
    case E_TImode: return 1;
    case E_OImode: return 1;
    case E_XImode: return 1;
    case E_P2QImode: return 1;
    case E_P2HImode: return 1;
    case E_POImode: return 1;
    case E_QQmode: return 1;
    case E_HQmode: return 1;
    case E_SQmode: return 1;
    case E_DQmode: return 1;
    case E_TQmode: return 1;
    case E_UQQmode: return 1;
    case E_UHQmode: return 1;
    case E_USQmode: return 1;
    case E_UDQmode: return 1;
    case E_UTQmode: return 1;
    case E_HAmode: return 1;
    case E_SAmode: return 1;
    case E_DAmode: return 1;
    case E_TAmode: return 1;
    case E_UHAmode: return 1;
    case E_USAmode: return 1;
    case E_UDAmode: return 1;
    case E_UTAmode: return 1;
    case E_SFmode: return 1;
    case E_DFmode: return 1;
    case E_XFmode: return 1;
    case E_TFmode: return 1;
    case E_SDmode: return 1;
    case E_DDmode: return 1;
    case E_TDmode: return 1;
    case E_CQImode: return 2;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 2;
    case E_CSImode: return 2;
    case E_CDImode: return 2;
    case E_CTImode: return 2;
    case E_CPOImode: return 2;
    case E_COImode: return 2;
    case E_CXImode: return 2;
    case E_SCmode: return 2;
    case E_DCmode: return 2;
    case E_XCmode: return 2;
    case E_TCmode: return 2;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 2;
    case E_V1SImode: return 1;
    case E_V8QImode: return 8;
    case E_V4HImode: return 4;
    case E_V2SImode: return 2;
    case E_V1DImode: return 1;
    case E_V12QImode: return 12;
    case E_V6HImode: return 6;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 8;
    case E_V4SImode: return 4;
    case E_V2DImode: return 2;
    case E_V1TImode: return 1;
    case E_V32QImode: return 32;
    case E_V16HImode: return 16;
    case E_V8SImode: return 8;
    case E_V4DImode: return 4;
    case E_V2TImode: return 2;
    case E_V64QImode: return 64;
    case E_V32HImode: return 32;
    case E_V16SImode: return 16;
    case E_V8DImode: return 8;
    case E_V4TImode: return 4;
    case E_V128QImode: return 128;
    case E_V64HImode: return 64;
    case E_V32SImode: return 32;
    case E_V16DImode: return 16;
    case E_V8TImode: return 8;
    case E_V64SImode: return 64;
    case E_V2SFmode: return 2;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 2;
    case E_V8SFmode: return 8;
    case E_V4DFmode: return 4;
    case E_V2TFmode: return 2;
    case E_V16SFmode: return 16;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 4;
    case E_V32SFmode: return 32;
    case E_V16DFmode: return 16;
    case E_V8TFmode: return 8;
    case E_V64SFmode: return 64;
    case E_V32DFmode: return 32;
    case E_V16TFmode: return 16;
    default: return mode_nunits[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_inner_inline (machine_mode mode)
{
  extern const unsigned char mode_inner[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 269, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return E_VOIDmode;
    case E_BLKmode: return E_BLKmode;
    case E_CCmode: return E_CCmode;
    case E_CCGCmode: return E_CCGCmode;
    case E_CCGOCmode: return E_CCGOCmode;
    case E_CCNOmode: return E_CCNOmode;
    case E_CCGZmode: return E_CCGZmode;
    case E_CCAmode: return E_CCAmode;
    case E_CCCmode: return E_CCCmode;
    case E_CCOmode: return E_CCOmode;
    case E_CCPmode: return E_CCPmode;
    case E_CCSmode: return E_CCSmode;
    case E_CCZmode: return E_CCZmode;
    case E_CCFPmode: return E_CCFPmode;
    case E_BImode: return E_BImode;
    case E_QImode: return E_QImode;
    case E_HImode: return E_HImode;
    case E_SImode: return E_SImode;
    case E_DImode: return E_DImode;
    case E_TImode: return E_TImode;
    case E_OImode: return E_OImode;
    case E_XImode: return E_XImode;
    case E_P2QImode: return E_P2QImode;
    case E_P2HImode: return E_P2HImode;
    case E_POImode: return E_POImode;
    case E_QQmode: return E_QQmode;
    case E_HQmode: return E_HQmode;
    case E_SQmode: return E_SQmode;
    case E_DQmode: return E_DQmode;
    case E_TQmode: return E_TQmode;
    case E_UQQmode: return E_UQQmode;
    case E_UHQmode: return E_UHQmode;
    case E_USQmode: return E_USQmode;
    case E_UDQmode: return E_UDQmode;
    case E_UTQmode: return E_UTQmode;
    case E_HAmode: return E_HAmode;
    case E_SAmode: return E_SAmode;
    case E_DAmode: return E_DAmode;
    case E_TAmode: return E_TAmode;
    case E_UHAmode: return E_UHAmode;
    case E_USAmode: return E_USAmode;
    case E_UDAmode: return E_UDAmode;
    case E_UTAmode: return E_UTAmode;
    case E_SFmode: return E_SFmode;
    case E_DFmode: return E_DFmode;
    case E_XFmode: return E_XFmode;
    case E_TFmode: return E_TFmode;
    case E_SDmode: return E_SDmode;
    case E_DDmode: return E_DDmode;
    case E_TDmode: return E_TDmode;
    case E_CQImode: return E_QImode;
    case E_CP2QImode: return E_P2QImode;
    case E_CHImode: return E_HImode;
    case E_CP2HImode: return E_P2HImode;
    case E_CSImode: return E_SImode;
    case E_CDImode: return E_DImode;
    case E_CTImode: return E_TImode;
    case E_CPOImode: return E_POImode;
    case E_COImode: return E_OImode;
    case E_CXImode: return E_XImode;
    case E_SCmode: return E_SFmode;
    case E_DCmode: return E_DFmode;
    case E_XCmode: return E_XFmode;
    case E_TCmode: return E_TFmode;
    case E_V2QImode: return E_QImode;
    case E_V4QImode: return E_QImode;
    case E_V2HImode: return E_HImode;
    case E_V1SImode: return E_SImode;
    case E_V8QImode: return E_QImode;
    case E_V4HImode: return E_HImode;
    case E_V2SImode: return E_SImode;
    case E_V1DImode: return E_DImode;
    case E_V12QImode: return E_QImode;
    case E_V6HImode: return E_HImode;
    case E_V14QImode: return E_QImode;
    case E_V16QImode: return E_QImode;
    case E_V8HImode: return E_HImode;
    case E_V4SImode: return E_SImode;
    case E_V2DImode: return E_DImode;
    case E_V1TImode: return E_TImode;
    case E_V32QImode: return E_QImode;
    case E_V16HImode: return E_HImode;
    case E_V8SImode: return E_SImode;
    case E_V4DImode: return E_DImode;
    case E_V2TImode: return E_TImode;
    case E_V64QImode: return E_QImode;
    case E_V32HImode: return E_HImode;
    case E_V16SImode: return E_SImode;
    case E_V8DImode: return E_DImode;
    case E_V4TImode: return E_TImode;
    case E_V128QImode: return E_QImode;
    case E_V64HImode: return E_HImode;
    case E_V32SImode: return E_SImode;
    case E_V16DImode: return E_DImode;
    case E_V8TImode: return E_TImode;
    case E_V64SImode: return E_SImode;
    case E_V2SFmode: return E_SFmode;
    case E_V4SFmode: return E_SFmode;
    case E_V2DFmode: return E_DFmode;
    case E_V8SFmode: return E_SFmode;
    case E_V4DFmode: return E_DFmode;
    case E_V2TFmode: return E_TFmode;
    case E_V16SFmode: return E_SFmode;
    case E_V8DFmode: return E_DFmode;
    case E_V4TFmode: return E_TFmode;
    case E_V32SFmode: return E_SFmode;
    case E_V16DFmode: return E_DFmode;
    case E_V8TFmode: return E_TFmode;
    case E_V64SFmode: return E_SFmode;
    case E_V32DFmode: return E_DFmode;
    case E_V16TFmode: return E_TFmode;
    default: return mode_inner[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_unit_size_inline (machine_mode mode)
{
  extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 396, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 1;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 4;
    case E_CSImode: return 4;
    case E_CDImode: return 8;
    case E_CTImode: return 16;
    case E_CPOImode: return 32;
    case E_COImode: return 32;
    case E_CXImode: return 64;
    case E_SCmode: return 4;
    case E_DCmode: return 8;
    case E_TCmode: return 16;
    case E_V2QImode: return 1;
    case E_V4QImode: return 1;
    case E_V2HImode: return 2;
    case E_V1SImode: return 4;
    case E_V8QImode: return 1;
    case E_V4HImode: return 2;
    case E_V2SImode: return 4;
    case E_V1DImode: return 8;
    case E_V12QImode: return 1;
    case E_V6HImode: return 2;
    case E_V14QImode: return 1;
    case E_V16QImode: return 1;
    case E_V8HImode: return 2;
    case E_V4SImode: return 4;
    case E_V2DImode: return 8;
    case E_V1TImode: return 16;
    case E_V32QImode: return 1;
    case E_V16HImode: return 2;
    case E_V8SImode: return 4;
    case E_V4DImode: return 8;
    case E_V2TImode: return 16;
    case E_V64QImode: return 1;
    case E_V32HImode: return 2;
    case E_V16SImode: return 4;
    case E_V8DImode: return 8;
    case E_V4TImode: return 16;
    case E_V128QImode: return 1;
    case E_V64HImode: return 2;
    case E_V32SImode: return 4;
    case E_V16DImode: return 8;
    case E_V8TImode: return 16;
    case E_V64SImode: return 4;
    case E_V2SFmode: return 4;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 8;
    case E_V8SFmode: return 4;
    case E_V4DFmode: return 8;
    case E_V2TFmode: return 16;
    case E_V16SFmode: return 4;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 16;
    case E_V32SFmode: return 4;
    case E_V16DFmode: return 8;
    case E_V8TFmode: return 16;
    case E_V64SFmode: return 4;
    case E_V32DFmode: return 8;
    case E_V16TFmode: return 16;
    default: return mode_unit_size[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned short
mode_unit_precision_inline (machine_mode mode)
{
  extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 521, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4*(8);
    case E_CCGCmode: return 4*(8);
    case E_CCGOCmode: return 4*(8);
    case E_CCNOmode: return 4*(8);
    case E_CCGZmode: return 4*(8);
    case E_CCAmode: return 4*(8);
    case E_CCCmode: return 4*(8);
    case E_CCOmode: return 4*(8);
    case E_CCPmode: return 4*(8);
    case E_CCSmode: return 4*(8);
    case E_CCZmode: return 4*(8);
    case E_CCFPmode: return 4*(8);
    case E_BImode: return 1;
    case E_QImode: return 1*(8);
    case E_HImode: return 2*(8);
    case E_SImode: return 4*(8);
    case E_DImode: return 8*(8);
    case E_TImode: return 16*(8);
    case E_OImode: return 32*(8);
    case E_XImode: return 64*(8);
    case E_P2QImode: return 16;
    case E_P2HImode: return 32;
    case E_POImode: return 160;
    case E_QQmode: return 1*(8);
    case E_HQmode: return 2*(8);
    case E_SQmode: return 4*(8);
    case E_DQmode: return 8*(8);
    case E_TQmode: return 16*(8);
    case E_UQQmode: return 1*(8);
    case E_UHQmode: return 2*(8);
    case E_USQmode: return 4*(8);
    case E_UDQmode: return 8*(8);
    case E_UTQmode: return 16*(8);
    case E_HAmode: return 2*(8);
    case E_SAmode: return 4*(8);
    case E_DAmode: return 8*(8);
    case E_TAmode: return 16*(8);
    case E_UHAmode: return 2*(8);
    case E_USAmode: return 4*(8);
    case E_UDAmode: return 8*(8);
    case E_UTAmode: return 16*(8);
    case E_SFmode: return 4*(8);
    case E_DFmode: return 8*(8);
    case E_XFmode: return 80;
    case E_TFmode: return 16*(8);
    case E_SDmode: return 4*(8);
    case E_DDmode: return 8*(8);
    case E_TDmode: return 16*(8);
    case E_CQImode: return 1*(8);
    case E_CP2QImode: return 16;
    case E_CHImode: return 2*(8);
    case E_CP2HImode: return 32;
    case E_CSImode: return 4*(8);
    case E_CDImode: return 8*(8);
    case E_CTImode: return 16*(8);
    case E_CPOImode: return 160;
    case E_COImode: return 32*(8);
    case E_CXImode: return 64*(8);
    case E_SCmode: return 4*(8);
    case E_DCmode: return 8*(8);
    case E_XCmode: return 80;
    case E_TCmode: return 16*(8);
    case E_V2QImode: return 1*(8);
    case E_V4QImode: return 1*(8);
    case E_V2HImode: return 2*(8);
    case E_V1SImode: return 4*(8);
    case E_V8QImode: return 1*(8);
    case E_V4HImode: return 2*(8);
    case E_V2SImode: return 4*(8);
    case E_V1DImode: return 8*(8);
    case E_V12QImode: return 1*(8);
    case E_V6HImode: return 2*(8);
    case E_V14QImode: return 1*(8);
    case E_V16QImode: return 1*(8);
    case E_V8HImode: return 2*(8);
    case E_V4SImode: return 4*(8);
    case E_V2DImode: return 8*(8);
    case E_V1TImode: return 16*(8);
    case E_V32QImode: return 1*(8);
    case E_V16HImode: return 2*(8);
    case E_V8SImode: return 4*(8);
    case E_V4DImode: return 8*(8);
    case E_V2TImode: return 16*(8);
    case E_V64QImode: return 1*(8);
    case E_V32HImode: return 2*(8);
    case E_V16SImode: return 4*(8);
    case E_V8DImode: return 8*(8);
    case E_V4TImode: return 16*(8);
    case E_V128QImode: return 1*(8);
    case E_V64HImode: return 2*(8);
    case E_V32SImode: return 4*(8);
    case E_V16DImode: return 8*(8);
    case E_V8TImode: return 16*(8);
    case E_V64SImode: return 4*(8);
    case E_V2SFmode: return 4*(8);
    case E_V4SFmode: return 4*(8);
    case E_V2DFmode: return 8*(8);
    case E_V8SFmode: return 4*(8);
    case E_V4DFmode: return 8*(8);
    case E_V2TFmode: return 16*(8);
    case E_V16SFmode: return 4*(8);
    case E_V8DFmode: return 8*(8);
    case E_V4TFmode: return 16*(8);
    case E_V32SFmode: return 4*(8);
    case E_V16DFmode: return 8*(8);
    case E_V8TFmode: return 16*(8);
    case E_V64SFmode: return 4*(8);
    case E_V32DFmode: return 8*(8);
    case E_V16TFmode: return 16*(8);
    default: return mode_unit_precision[mode];
    }
}
# 469 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
typedef opt_mode<machine_mode> opt_machine_mode;

extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_inner[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_wider[NUM_MACHINE_MODES];
extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];

template<typename T>
struct mode_traits
{
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
  enum from_int { dummy = MAX_MACHINE_MODE };

};

template<>
struct mode_traits<machine_mode>
{

  typedef machine_mode from_int;
};
# 89 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern const char * const mode_name[NUM_MACHINE_MODES];




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mode-classes.def" 1
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 2

enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FRACT, MODE_UFRACT, MODE_ACCUM, MODE_UACCUM, MODE_FLOAT, MODE_DECIMAL_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_BOOL, MODE_VECTOR_INT, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM, MODE_VECTOR_UACCUM, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };






extern const unsigned char mode_class[NUM_MACHINE_MODES];
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
class opt_mode
{
public:
  enum from_int { dummy = MAX_MACHINE_MODE };

  inline __attribute__ ((always_inline)) constexpr opt_mode () : m_mode (E_VOIDmode) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (const T &m) : m_mode (m) {}
  template<typename U>
  inline __attribute__ ((always_inline)) constexpr opt_mode (const U &m) : m_mode (T (m)) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (from_int m) : m_mode (machine_mode (m)) {}

  machine_mode else_void () const;
  machine_mode else_blk () const { return else_mode (((void) 0, E_BLKmode)); }
  machine_mode else_mode (machine_mode) const;
  T require () const;

  bool exists () const;
  template<typename U> bool exists (U *) const;

  bool operator== (const T &m) const { return m_mode == m; }
  bool operator!= (const T &m) const { return m_mode != m; }

private:
  machine_mode m_mode;
};




template<typename T>
inline __attribute__ ((always_inline)) machine_mode
opt_mode<T>::else_void () const
{
  return m_mode;
}



template<typename T>
inline machine_mode
opt_mode<T>::else_mode (machine_mode fallback) const
{
  return m_mode == E_VOIDmode ? fallback : m_mode;
}



template<typename T>
inline T
opt_mode<T>::require () const
{
  ((void)(!(m_mode != E_VOIDmode) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 293, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m_mode);
}



template<typename T>
inline __attribute__ ((always_inline)) bool
opt_mode<T>::exists () const
{
  return m_mode != E_VOIDmode;
}



template<typename T>
template<typename U>
inline bool
opt_mode<T>::exists (U *mode) const
{
  if (m_mode != E_VOIDmode)
    {
      *mode = T (typename mode_traits<T>::from_int (m_mode));
      return true;
    }
  return false;
}



template<typename T>
struct pod_mode
{
  typedef typename mode_traits<T>::from_int from_int;
  typedef typename T::measurement_type measurement_type;

  machine_mode m_mode;
  inline __attribute__ ((always_inline)) constexpr
  operator machine_mode () const { return m_mode; }

  inline __attribute__ ((always_inline)) constexpr
  operator T () const { return from_int (m_mode); }

  inline __attribute__ ((always_inline)) pod_mode &operator = (const T &m) { m_mode = m; return *this; }
};



template<typename T>
inline bool
is_a (machine_mode m)
{
  return T::includes_p (m);
}

template<typename T, typename U>
inline bool
is_a (const opt_mode<U> &m)
{
  return T::includes_p (m.else_void ());
}



template<typename T>
inline T
as_a (machine_mode m)
{
  ((void)(!(T::includes_p (m)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 361, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m);
}

template<typename T, typename U>
inline T
as_a (const opt_mode<U> &m)
{
  return as_a <T> (m.else_void ());
}



template<typename T>
inline opt_mode<T>
dyn_cast (machine_mode m)
{
  if (T::includes_p (m))
    return T (typename mode_traits<T>::from_int (m));
  return opt_mode<T> ();
}

template<typename T, typename U>
inline opt_mode<T>
dyn_cast (const opt_mode<U> &m)
{
  return dyn_cast <T> (m.else_void ());
}




template<typename T, typename U>
inline bool
is_a (machine_mode m, U *result)
{
  if (T::includes_p (m))
    {
      *result = T (typename mode_traits<T>::from_int (m));
      return true;
    }
  return false;
}


class scalar_int_mode
{
public:
  typedef mode_traits<scalar_int_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_int_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_int_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_INT || ((enum mode_class) mode_class[m]) == MODE_PARTIAL_INT);
}


class scalar_float_mode
{
public:
  typedef mode_traits<scalar_float_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_float_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_float_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_float_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_FLOAT || ((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT);
}


class scalar_mode
{
public:
  typedef mode_traits<scalar_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_mode::includes_p (machine_mode m)
{
  switch (((enum mode_class) mode_class[m]))
    {
    case MODE_INT:
    case MODE_PARTIAL_INT:
    case MODE_FRACT:
    case MODE_UFRACT:
    case MODE_ACCUM:
    case MODE_UACCUM:
    case MODE_FLOAT:
    case MODE_DECIMAL_FLOAT:
      return true;
    default:
      return false;
    }
}


class complex_mode
{
public:
  typedef mode_traits<complex_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) complex_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  complex_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
complex_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_COMPLEX_INT || ((enum mode_class) mode_class[m]) == MODE_COMPLEX_FLOAT);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bytes (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_size_inline (mode) : mode_size[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bits (machine_mode mode)
{
  return mode_to_bytes (mode) * (8);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_precision (machine_mode mode)
{
  return mode_precision[mode];
}



inline __attribute__ ((always_inline)) scalar_mode
mode_to_inner (machine_mode mode)
{

  return scalar_mode::from_int (__builtin_constant_p (mode)
    ? mode_inner_inline (mode)
    : mode_inner[mode]);



}



inline __attribute__ ((always_inline)) unsigned char
mode_to_unit_size (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_size_inline (mode) : mode_unit_size[mode]);



}



inline __attribute__ ((always_inline)) unsigned short
mode_to_unit_precision (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_precision_inline (mode) : mode_unit_precision[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_nunits (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_nunits_inline (mode) : mode_nunits[mode]);



}






inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_SIZE (machine_mode mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode).coeffs[0];
}







inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_BITSIZE (machine_mode mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode).coeffs[0];
}
# 679 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_PRECISION (machine_mode mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode).coeffs[0];
}



extern const unsigned char mode_ibit[NUM_MACHINE_MODES];



extern const unsigned char mode_fbit[NUM_MACHINE_MODES];





extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];
# 737 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_NUNITS (machine_mode mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode).coeffs[0];
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_WIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_wider[m]);
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_2XWIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_2xwider[m]);
}


extern const unsigned char mode_complex[NUM_MACHINE_MODES];






class fixed_size_mode
{
public:
  typedef mode_traits<fixed_size_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) fixed_size_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const complex_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
fixed_size_mode::includes_p (machine_mode mode)
{
  return mode_to_bytes (mode).is_constant ();
}
# 841 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern opt_machine_mode mode_for_size (poly_uint64, enum mode_class, int);





inline opt_scalar_int_mode
int_mode_for_size (poly_uint64 size, int limit)
{
  return dyn_cast <scalar_int_mode> (mode_for_size (size, MODE_INT, limit));
}




inline opt_scalar_float_mode
float_mode_for_size (poly_uint64 size)
{
  return dyn_cast <scalar_float_mode> (mode_for_size (size, MODE_FLOAT, 0));
}



inline opt_scalar_float_mode
decimal_float_mode_for_size (unsigned int size)
{
  return dyn_cast <scalar_float_mode>
    (mode_for_size (size, MODE_DECIMAL_FLOAT, 0));
}

extern machine_mode smallest_mode_for_size (poly_uint64, enum mode_class);




inline scalar_int_mode
smallest_int_mode_for_size (poly_uint64 size)
{
  return as_a <scalar_int_mode> (smallest_mode_for_size (size, MODE_INT));
}

extern opt_scalar_int_mode int_mode_for_mode (machine_mode);
extern opt_machine_mode bitwise_mode_for_mode (machine_mode);
extern opt_machine_mode mode_for_vector (scalar_mode, poly_uint64);
extern opt_machine_mode related_vector_mode (machine_mode, scalar_mode,
          poly_uint64 = 0);
extern opt_machine_mode related_int_vector_mode (machine_mode);


class bit_field_mode_iterator
{
public:
  bit_field_mode_iterator (long, long,
      poly_int64, poly_int64,
      unsigned int, bool);
  bool next_mode (scalar_int_mode *);
  bool prefer_smaller_modes ();

private:
  opt_scalar_int_mode m_mode;


  long m_bitsize;
  long m_bitpos;
  poly_int64 m_bitregion_start;
  poly_int64 m_bitregion_end;
  unsigned int m_align;
  bool m_volatilep;
  int m_count;
};



extern bool get_best_mode (int, int, poly_uint64, poly_uint64, unsigned int,
      unsigned long, bool, scalar_int_mode *);



extern unsigned short mode_base_align[NUM_MACHINE_MODES];

extern unsigned get_mode_alignment (machine_mode);





extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];
# 939 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
inline T
get_narrowest_mode (T mode)
{
  return typename mode_traits<T>::from_int
    (class_narrowest_mode[((enum mode_class) mode_class[mode])]);
}




extern scalar_int_mode byte_mode;
extern scalar_int_mode word_mode;
extern scalar_int_mode ptr_mode;


extern void init_adjust_machine_modes (void);
# 964 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline bool
HWI_COMPUTABLE_MODE_P (machine_mode mode)
{
  machine_mode mme = mode;
  return ((((enum mode_class) mode_class[mme]) == MODE_INT || ((enum mode_class) mode_class[mme]) == MODE_PARTIAL_INT)
   && mode_to_precision (mme).coeffs[0] <= 64);
}

inline bool
HWI_COMPUTABLE_MODE_P (scalar_int_mode mode)
{
  return GET_MODE_PRECISION (mode) <= 64;
}

struct int_n_data_t {

  unsigned int bitsize;
  scalar_int_mode_pod m;

};



extern bool int_n_enabled_p[1];
extern const int_n_data_t int_n_data[1];




template<typename T>
inline bool
is_int_mode (machine_mode mode, T *int_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_INT)
    {
      *int_mode = scalar_int_mode (scalar_int_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_float_mode (machine_mode mode, T *float_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_FLOAT)
    {
      *float_mode = scalar_float_mode (scalar_float_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_int_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_INT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_float_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_FLOAT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




inline bool
is_narrower_int_mode (machine_mode mode, scalar_int_mode limit)
{
  scalar_int_mode int_mode;
  return (is_a <scalar_int_mode> (mode, &int_mode)
   && GET_MODE_PRECISION (int_mode) < GET_MODE_PRECISION (limit));
}

namespace mode_iterator
{


  template<typename T>
  inline void
  start (opt_mode<T> *iter, enum mode_class mclass)
  {
    if (((machine_mode) class_narrowest_mode[mclass]) == E_VOIDmode)
      *iter = opt_mode<T> ();
    else
      *iter = as_a<T> (((machine_mode) class_narrowest_mode[mclass]));
  }

  inline void
  start (machine_mode *iter, enum mode_class mclass)
  {
    *iter = ((machine_mode) class_narrowest_mode[mclass]);
  }



  template<typename T>
  inline bool
  iterate_p (opt_mode<T> *iter)
  {
    return iter->exists ();
  }

  inline bool
  iterate_p (machine_mode *iter)
  {
    return *iter != E_VOIDmode;
  }




  template<typename T>
  inline void
  get_wider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_WIDER_MODE (iter->require ());
  }

  inline void
  get_wider (machine_mode *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).else_void ();
  }




  template<typename T>
  inline void
  get_known_wider (T *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).require ();
  }




  template<typename T>
  inline void
  get_2xwider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (iter->require ());
  }

  inline void
  get_2xwider (machine_mode *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (*iter).else_void ();
  }
}
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
void
gt_ggc_mx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *, void (*) (void *, void *), void *)
{
}
# 470 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h" 1
# 49 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
struct double_int
{







  static double_int from_uhwi (unsigned long cst);
  static double_int from_shwi (long cst);
  static double_int from_pair (long high, unsigned long low);



  static double_int from_buffer (const unsigned char *buffer, int len);





  static double_int mask (unsigned prec);
  static double_int max_value (unsigned int prec, bool uns);
  static double_int min_value (unsigned int prec, bool uns);



  double_int &operator ++ ();
  double_int &operator -- ();
  double_int &operator *= (double_int);
  double_int &operator += (double_int);
  double_int &operator -= (double_int);
  double_int &operator &= (double_int);
  double_int &operator ^= (double_int);
  double_int &operator |= (double_int);





  long to_shwi () const;
  unsigned long to_uhwi () const;



  bool fits_uhwi () const;
  bool fits_shwi () const;
  bool fits_hwi (bool uns) const;



  int trailing_zeros () const;
  int popcount () const;



  bool multiple_of (double_int, bool, double_int *) const;







  double_int set_bit (unsigned) const;
  double_int mul_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int wide_mul_with_sign (double_int, bool unsigned_p,
     double_int *higher, bool *overflow) const;
  double_int add_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int sub_with_overflow (double_int, bool *overflow) const;
  double_int neg_with_overflow (bool *overflow) const;

  double_int operator * (double_int) const;
  double_int operator + (double_int) const;
  double_int operator - (double_int) const;
  double_int operator - () const;
  double_int operator ~ () const;
  double_int operator & (double_int) const;
  double_int operator | (double_int) const;
  double_int operator ^ (double_int) const;
  double_int and_not (double_int) const;

  double_int lshift (long count) const;
  double_int lshift (long count, unsigned int prec, bool arith) const;
  double_int rshift (long count) const;
  double_int rshift (long count, unsigned int prec, bool arith) const;
  double_int alshift (long count, unsigned int prec) const;
  double_int arshift (long count, unsigned int prec) const;
  double_int llshift (long count, unsigned int prec) const;
  double_int lrshift (long count, unsigned int prec) const;
  double_int lrotate (long count, unsigned int prec) const;
  double_int rrotate (long count, unsigned int prec) const;





  double_int div (double_int, bool, unsigned) const;
  double_int sdiv (double_int, unsigned) const;
  double_int udiv (double_int, unsigned) const;
  double_int mod (double_int, bool, unsigned) const;
  double_int smod (double_int, unsigned) const;
  double_int umod (double_int, unsigned) const;
  double_int divmod_with_overflow (double_int, bool, unsigned,
       double_int *, bool *) const;
  double_int divmod (double_int, bool, unsigned, double_int *) const;
  double_int sdivmod (double_int, unsigned, double_int *) const;
  double_int udivmod (double_int, unsigned, double_int *) const;



  double_int ext (unsigned prec, bool uns) const;
  double_int zext (unsigned prec) const;
  double_int sext (unsigned prec) const;



  bool is_zero () const;
  bool is_one () const;
  bool is_minus_one () const;
  bool is_negative () const;

  int cmp (double_int b, bool uns) const;
  int ucmp (double_int b) const;
  int scmp (double_int b) const;

  bool ult (double_int b) const;
  bool ule (double_int b) const;
  bool ugt (double_int b) const;
  bool slt (double_int b) const;
  bool sle (double_int b) const;
  bool sgt (double_int b) const;

  double_int max (double_int b, bool uns);
  double_int smax (double_int b);
  double_int umax (double_int b);

  double_int min (double_int b, bool uns);
  double_int smin (double_int b);
  double_int umin (double_int b);

  bool operator == (double_int cst2) const;
  bool operator != (double_int cst2) const;



  unsigned long low;
  long high;

};
# 207 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_shwi (long cst)
{
  double_int r;
  r.low = (unsigned long) cst;
  r.high = cst < 0 ? -1 : 0;
  return r;
}
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_uhwi (unsigned long cst)
{
  double_int r;
  r.low = cst;
  r.high = 0;
  return r;
}

inline double_int
double_int::from_pair (long high, unsigned long low)
{
  double_int r;
  r.low = low;
  r.high = high;
  return r;
}

inline double_int &
double_int::operator ++ ()
{
  *this += (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator -- ()
{
  *this -= (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator &= (double_int b)
{
  *this = *this & b;
  return *this;
}

inline double_int &
double_int::operator ^= (double_int b)
{
  *this = *this ^ b;
  return *this;
}

inline double_int &
double_int::operator |= (double_int b)
{
  *this = *this | b;
  return *this;
}




inline long
double_int::to_shwi () const
{
  return (long) low;
}




inline unsigned long
double_int::to_uhwi () const
{
  return low;
}



inline bool
double_int::fits_uhwi () const
{
  return high == 0;
}





inline double_int
double_int::operator ~ () const
{
  double_int result;
  result.low = ~low;
  result.high = ~high;
  return result;
}



inline double_int
double_int::operator | (double_int b) const
{
  double_int result;
  result.low = low | b.low;
  result.high = high | b.high;
  return result;
}



inline double_int
double_int::operator & (double_int b) const
{
  double_int result;
  result.low = low & b.low;
  result.high = high & b.high;
  return result;
}



inline double_int
double_int::and_not (double_int b) const
{
  double_int result;
  result.low = low & ~b.low;
  result.high = high & ~b.high;
  return result;
}



inline double_int
double_int::operator ^ (double_int b) const
{
  double_int result;
  result.low = low ^ b.low;
  result.high = high ^ b.high;
  return result;
}

void dump_double_int (FILE *, double_int, bool);
# 376 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline bool
double_int::is_zero () const
{
  return low == 0 && high == 0;
}



inline bool
double_int::is_one () const
{
  return low == 1 && high == 0;
}



inline bool
double_int::is_minus_one () const
{
  return low == -1UL && high == -1;
}



inline bool
double_int::is_negative () const
{
  return high < 0;
}



inline bool
double_int::operator == (double_int cst2) const
{
  return low == cst2.low && high == cst2.high;
}



inline bool
double_int::operator != (double_int cst2) const
{
  return low != cst2.low || high != cst2.high;
}



inline int
double_int::popcount () const
{
  return popcount_hwi (high) + popcount_hwi (low);
}





void mpz_set_double_int (mpz_t, double_int, bool);
double_int mpz_get_double_int (const_tree, mpz_t, bool);


namespace wi
{
  template <>
  struct int_traits <double_int>
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = true;
    static const unsigned int precision = (2 * 64);
    static unsigned int get_precision (const double_int &);
    static wi::storage_ref decompose (long *, unsigned int,
          const double_int &);
  };
}

inline unsigned int
wi::int_traits <double_int>::get_precision (const double_int &)
{
  return precision;
}

inline wi::storage_ref
wi::int_traits <double_int>::decompose (long *scratch, unsigned int p,
     const double_int &x)
{
  ((void)(!(precision == p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h", 462, __FUNCTION__), 0 : 0));
  scratch[0] = x.low;
  if ((x.high == 0 && scratch[0] >= 0) || (x.high == -1 && scratch[0] < 0))
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = x.high;
  return wi::storage_ref (scratch, 2, precision);
}
# 471 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h" 1
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h"
struct align_flags_tuple
{



  int log;
  int maxskip;


  void normalize ()
  {
    int n = (1 << log);
    if (maxskip > n)
      maxskip = n - 1;
  }


  int get_value ()
  {
    return maxskip + 1;
  }
};




class align_flags
{
public:

  align_flags (int log0 = 0, int maxskip0 = 0, int log1 = 0, int maxskip1 = 0)
  {
    levels[0].log = log0;
    levels[0].maxskip = maxskip0;
    levels[1].log = log1;
    levels[1].maxskip = maxskip1;
    normalize ();
  }


  void normalize ()
  {
    for (unsigned i = 0; i < 2; i++)
      levels[i].normalize ();
  }


  static align_flags max (const align_flags f0, const align_flags f1)
    {
      int log0 = ((f0.levels[0].log) > (f1.levels[0].log) ? (f0.levels[0].log) : (f1.levels[0].log));
      int maxskip0 = ((f0.levels[0].maxskip) > (f1.levels[0].maxskip) ? (f0.levels[0].maxskip) : (f1.levels[0].maxskip));
      int log1 = ((f0.levels[1].log) > (f1.levels[1].log) ? (f0.levels[1].log) : (f1.levels[1].log));
      int maxskip1 = ((f0.levels[1].maxskip) > (f1.levels[1].maxskip) ? (f0.levels[1].maxskip) : (f1.levels[1].maxskip));
      return align_flags (log0, maxskip0, log1, maxskip1);
    }

  align_flags_tuple levels[2];
};
# 472 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
enum real_value_class {
  rvc_zero,
  rvc_normal,
  rvc_inf,
  rvc_nan
};







struct real_value {



  unsigned int cl : 2;

  unsigned int decimal : 1;

  unsigned int sign : 1;

  unsigned int signalling : 1;


  unsigned int canonical : 1;

  unsigned int uexp : (32 - 6);

  unsigned long sig[((128 + (8 * 8)) / (8 * 8))];
};
# 80 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern char test_real_width
  [sizeof (struct real_value) <= (((128 + (8 * 8)) + 32)/64 + (((128 + (8 * 8)) + 32)%64 ? 1 : 0)) * sizeof (long) ? 1 : -1];
# 118 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
struct real_format
{

  void (*encode) (const struct real_format *, long *,
    const struct real_value *);
  void (*decode) (const struct real_format *, struct real_value *,
    const long *);


  int b;


  int p;


  int pnan;


  int emin;


  int emax;



  int signbit_ro;



  int signbit_rw;
# 158 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
  int ieee_bits;


  bool round_towards_zero;
  bool has_sign_dependent_rounding;


  bool has_nans;
  bool has_inf;
  bool has_denorm;
  bool has_signed_zero;
  bool qnan_msb_set;
  bool canonical_nan_lsbs_set;
  const char *name;
};







extern const struct real_format *
  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1
         + MAX_MODE_DECIMAL_FLOAT - MIN_MODE_DECIMAL_FLOAT + 1];
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
class format_helper
{
public:
  format_helper (const real_format *format) : m_format (format) {}
  template<typename T> format_helper (const T &);
  const real_format *operator-> () const { return m_format; }
  operator const real_format *() const { return m_format; }

  bool decimal_p () const { return m_format && m_format->b == 10; }
  bool can_represent_integral_type_p (tree type) const;

private:
  const real_format *m_format;
};

template<typename T>
inline format_helper::format_helper (const T &m)
  : m_format (m == ((void) 0, E_VOIDmode) ? 0 : (real_format_for_mode[(((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT) ? (((m) - MIN_MODE_DECIMAL_FLOAT) + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) : ((enum mode_class) mode_class[m]) == MODE_FLOAT ? ((m) - MIN_MODE_FLOAT) : ((fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/real.h", 234, __FUNCTION__)), 0)]))
{}
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern bool HONOR_NANS (machine_mode);
extern bool HONOR_NANS (const_tree);
extern bool HONOR_NANS (const_rtx);


extern bool HONOR_SNANS (machine_mode);
extern bool HONOR_SNANS (const_tree);
extern bool HONOR_SNANS (const_rtx);



extern bool HONOR_INFINITIES (machine_mode);
extern bool HONOR_INFINITIES (const_tree);
extern bool HONOR_INFINITIES (const_rtx);



extern bool HONOR_SIGNED_ZEROS (machine_mode);
extern bool HONOR_SIGNED_ZEROS (const_tree);
extern bool HONOR_SIGNED_ZEROS (const_rtx);



extern bool HONOR_SIGN_DEPENDENT_ROUNDING (machine_mode);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_tree);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_rtx);


extern bool real_arithmetic (struct real_value *, int, const struct real_value *,
        const struct real_value *);


extern bool real_compare (int, const struct real_value *, const struct real_value *);


extern bool real_isinf (const struct real_value *);


extern bool real_isnan (const struct real_value *);


extern bool real_issignaling_nan (const struct real_value *);


extern bool real_isfinite (const struct real_value *);


extern bool real_isneg (const struct real_value *);


extern bool real_isnegzero (const struct real_value *);


extern bool real_identical (const struct real_value *, const struct real_value *);
extern bool real_equal (const struct real_value *, const struct real_value *);
extern bool real_less (const struct real_value *, const struct real_value *);


extern void real_convert (struct real_value *, format_helper,
     const struct real_value *);


extern bool exact_real_truncate (format_helper, const struct real_value *);


extern void real_to_decimal (char *, const struct real_value *, size_t,
        size_t, int);



extern void real_to_decimal_for_mode (char *, const struct real_value *, size_t,
          size_t, int, machine_mode);


extern void real_to_hexadecimal (char *, const struct real_value *,
     size_t, size_t, int);


extern long real_to_integer (const struct real_value *);



extern int real_from_string (struct real_value *, const char *);

extern void real_from_string3 (struct real_value *, const char *, format_helper);

extern long real_to_target (long *, const struct real_value *, format_helper);

extern void real_from_target (struct real_value *, const long *,
         format_helper);

extern void real_inf (struct real_value *);

extern bool real_nan (struct real_value *, const char *, int, format_helper);

extern void real_maxval (struct real_value *, int, machine_mode);

extern void real_2expN (struct real_value *, int, format_helper);

extern unsigned int real_hash (const struct real_value *);



extern const struct real_format ieee_single_format;
extern const struct real_format mips_single_format;
extern const struct real_format motorola_single_format;
extern const struct real_format spu_single_format;
extern const struct real_format ieee_double_format;
extern const struct real_format mips_double_format;
extern const struct real_format motorola_double_format;
extern const struct real_format ieee_extended_motorola_format;
extern const struct real_format ieee_extended_intel_96_format;
extern const struct real_format ieee_extended_intel_96_round_53_format;
extern const struct real_format ieee_extended_intel_128_format;
extern const struct real_format ibm_extended_format;
extern const struct real_format mips_extended_format;
extern const struct real_format ieee_quad_format;
extern const struct real_format mips_quad_format;
extern const struct real_format vax_f_format;
extern const struct real_format vax_d_format;
extern const struct real_format vax_g_format;
extern const struct real_format real_internal_format;
extern const struct real_format decimal_single_format;
extern const struct real_format decimal_double_format;
extern const struct real_format decimal_quad_format;
extern const struct real_format ieee_half_format;
extern const struct real_format arm_half_format;
extern const struct real_format arm_bfloat_half_format;
# 418 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern struct real_value real_value_truncate (format_helper, struct real_value);

extern struct real_value real_value_negate (const struct real_value *);
extern struct real_value real_value_abs (const struct real_value *);

extern int significand_size (format_helper);

extern struct real_value real_from_string2 (const char *, format_helper);
# 443 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern int real_exponent (const struct real_value *);


extern void real_ldexp (struct real_value *, const struct real_value *, int);





extern struct real_value dconst0;
extern struct real_value dconst1;
extern struct real_value dconst2;
extern struct real_value dconstm1;
extern struct real_value dconsthalf;
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern const struct real_value * dconst_e_ptr (void);


extern const struct real_value *dconst_third_ptr (void);
extern const struct real_value *dconst_quarter_ptr (void);
extern const struct real_value *dconst_sixth_ptr (void);
extern const struct real_value *dconst_ninth_ptr (void);


extern const struct real_value * dconst_sqrt2_ptr (void);



struct real_value real_value_from_int_cst (const_tree, const_tree);


extern rtx const_double_from_real_value (struct real_value, machine_mode);


extern bool exact_real_inverse (format_helper, struct real_value *);




bool real_can_shorten_arithmetic (machine_mode, machine_mode);


extern tree build_real (tree, struct real_value);


extern tree build_real_truncate (tree, struct real_value);


extern bool real_powi (struct real_value *, format_helper,
         const struct real_value *, long);


extern void real_trunc (struct real_value *, format_helper,
   const struct real_value *);
extern void real_floor (struct real_value *, format_helper,
   const struct real_value *);
extern void real_ceil (struct real_value *, format_helper,
         const struct real_value *);
extern void real_round (struct real_value *, format_helper,
   const struct real_value *);
extern void real_roundeven (struct real_value *, format_helper,
       const struct real_value *);


extern void real_copysign (struct real_value *, const struct real_value *);


extern bool real_isinteger (const struct real_value *, format_helper);
extern bool real_isinteger (const struct real_value *, long *);


extern bool real_nextafter (struct real_value *, format_helper,
       const struct real_value *, const struct real_value *);




extern void get_max_float (const struct real_format *, char *, size_t, bool);



extern wide_int real_to_integer (const struct real_value *, bool *, int);
extern void real_from_integer (struct real_value *, format_helper,
          const wide_int_ref &, signop);




extern void build_sinatan_real (struct real_value *, tree);
# 475 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
struct fixed_value
{
  double_int data;
  scalar_mode_pod mode;
};
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
extern struct fixed_value fconst0[18];
extern struct fixed_value fconst1[8];
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
extern rtx const_fixed_from_fixed_value (struct fixed_value, machine_mode);



extern struct fixed_value fixed_from_double_int (double_int, scalar_mode);



static inline rtx
const_fixed_from_double_int (double_int payload,
        scalar_mode mode)
{
  return
    const_fixed_from_fixed_value (fixed_from_double_int (payload, mode),
                                  mode);
}


extern void fixed_from_string (struct fixed_value *, const char *,
          scalar_mode);


extern tree build_fixed (tree, struct fixed_value);


extern bool fixed_convert (struct fixed_value *, scalar_mode,
      const struct fixed_value *, bool);


extern bool fixed_convert_from_int (struct fixed_value *, scalar_mode,
        double_int, bool, bool);


extern bool fixed_convert_from_real (struct fixed_value *, scalar_mode,
         const struct real_value *, bool);


extern void real_convert_from_fixed (struct real_value *, scalar_mode,
         const struct fixed_value *);


extern bool fixed_identical (const struct fixed_value *, const struct fixed_value *);


extern unsigned int fixed_hash (const struct fixed_value *);







extern void fixed_to_decimal (char *str, const struct fixed_value *, size_t);


extern bool fixed_arithmetic (struct fixed_value *, int, const struct fixed_value *,
         const struct fixed_value *, bool);


extern bool fixed_compare (int, const struct fixed_value *,
      const struct fixed_value *);


extern bool fixed_isneg (const struct fixed_value *);
# 476 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 1
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h" 1
# 61 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h"
struct function;


extern void statistics_early_init (void);
extern void statistics_init (void);
extern void statistics_fini (void);
extern void statistics_fini_pass (void);
extern void statistics_counter_event (struct function *, const char *, int);
extern void statistics_histogram_event (struct function *, const char *, int);
# 247 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
# 1 "./gtype-desc.h" 1
# 31 "./gtype-desc.h"
extern void gt_ggc_mx_line_maps (void *);



extern void gt_ggc_mx_cpp_token (void *);



extern void gt_ggc_mx_cpp_macro (void *);



extern void gt_ggc_mx_string_concat (void *);



extern void gt_ggc_mx_string_concat_db (void *);



extern void gt_ggc_mx_hash_map_location_hash_string_concat__ (void *);



extern void gt_ggc_mx_bitmap_head (void *);



extern void gt_ggc_mx_rtx_def (void *);



extern void gt_ggc_mx_rtvec_def (void *);



extern void gt_ggc_mx_gimple (void *);



extern void gt_ggc_mx_symtab_node (void *);



extern void gt_ggc_mx_cgraph_edge (void *);



extern void gt_ggc_mx_section (void *);



extern void gt_ggc_mx_cl_target_option (void *);



extern void gt_ggc_mx_cl_optimization (void *);



extern void gt_ggc_mx_edge_def (void *);



extern void gt_ggc_mx_basic_block_def (void *);



extern void gt_ggc_mx_stack_local_entry (void *);



extern void gt_ggc_mx_machine_function (void *);



extern void gt_ggc_mx_bitmap_element (void *);



extern void gt_ggc_mx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_ggc_mx_coverage_data (void *);



extern void gt_ggc_mx_mem_attrs (void *);



extern void gt_ggc_mx_reg_attrs (void *);



extern void gt_ggc_mx_object_block (void *);



extern void gt_ggc_mx_vec_rtx_va_gc_ (void *);



extern void gt_ggc_mx_real_value (void *);



extern void gt_ggc_mx_fixed_value (void *);



extern void gt_ggc_mx_constant_descriptor_rtx (void *);



extern void gt_ggc_mx_function (void *);



extern void gt_ggc_mx_target_rtl (void *);



extern void gt_ggc_mx_cgraph_rtl_info (void *);



extern void gt_ggc_mx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_ggc_mx_ptr_info_def (void *);



extern void gt_ggc_mx_range_info_def (void *);



extern void gt_ggc_mx_die_struct (void *);



extern void gt_ggc_mx_vec_constructor_elt_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_va_gc_ (void *);



extern void gt_ggc_mx_lang_type (void *);



extern void gt_ggc_mx_lang_decl (void *);



extern void gt_ggc_mx_tree_statement_list_node (void *);



extern void gt_ggc_mx_target_globals (void *);



extern void gt_ggc_mx_lang_tree_node (void *);



extern void gt_ggc_mx_tree_map (void *);



extern void gt_ggc_mx_tree_decl_map (void *);



extern void gt_ggc_mx_tree_int_map (void *);



extern void gt_ggc_mx_tree_vec_map (void *);



extern void gt_ggc_mx_vec_alias_pair_va_gc_ (void *);



extern void gt_ggc_mx_libfunc_entry (void *);



extern void gt_ggc_mx_hash_table_libfunc_hasher_ (void *);



extern void gt_ggc_mx_target_libfuncs (void *);



extern void gt_ggc_mx_sequence_stack (void *);



extern void gt_ggc_mx_vec_rtx_insn__va_gc_ (void *);



extern void gt_ggc_mx_call_site_record_d (void *);



extern void gt_ggc_mx_vec_uchar_va_gc_ (void *);



extern void gt_ggc_mx_vec_call_site_record_va_gc_ (void *);



extern void gt_ggc_mx_gimple_df (void *);



extern void gt_ggc_mx_dw_fde_node (void *);



extern void gt_ggc_mx_rtx_constant_pool (void *);



extern void gt_ggc_mx_frame_space (void *);



extern void gt_ggc_mx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_ggc_mx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_ggc_mx_stack_usage (void *);



extern void gt_ggc_mx_eh_status (void *);



extern void gt_ggc_mx_control_flow_graph (void *);



extern void gt_ggc_mx_loops (void *);



extern void gt_ggc_mx_language_function (void *);



extern void gt_ggc_mx_hash_set_tree_ (void *);



extern void gt_ggc_mx_types_used_by_vars_entry (void *);



extern void gt_ggc_mx_hash_table_used_type_hasher_ (void *);



extern void gt_ggc_mx_nb_iter_bound (void *);



extern void gt_ggc_mx_loop_exit (void *);



extern void gt_ggc_mx_loop (void *);



extern void gt_ggc_mx_control_iv (void *);



extern void gt_ggc_mx_vec_loop_p_va_gc_ (void *);



extern void gt_ggc_mx_niter_desc (void *);



extern void gt_ggc_mx_hash_table_loop_exit_hasher_ (void *);



extern void gt_ggc_mx_vec_basic_block_va_gc_ (void *);



extern void gt_ggc_mx_rtl_bb_info (void *);



extern void gt_ggc_mx_vec_edge_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_ggc_mx_section_hash_entry (void *);



extern void gt_ggc_mx_lto_file_decl_data (void *);



extern void gt_ggc_mx_ipa_replace_map (void *);



extern void gt_ggc_mx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_ggc_mx_ipa_param_adjustments (void *);



extern void gt_ggc_mx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_ggc_mx_cgraph_simd_clone (void *);



extern void gt_ggc_mx_cgraph_function_version_info (void *);



extern void gt_ggc_mx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_ggc_mx_cgraph_indirect_call_info (void *);



extern void gt_ggc_mx_asm_node (void *);



extern void gt_ggc_mx_symbol_table (void *);



extern void gt_ggc_mx_hash_table_section_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_asmname_hasher_ (void *);



extern void gt_ggc_mx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_ggc_mx_constant_descriptor_tree (void *);



extern void gt_ggc_mx_hash_map_alias_set_hash_int_ (void *);



extern void gt_ggc_mx_alias_set_entry (void *);



extern void gt_ggc_mx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_ggc_mx_hash_table_function_version_hasher_ (void *);



extern void gt_ggc_mx_lto_in_decl_state (void *);



extern void gt_ggc_mx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_ipa_node_params (void *);



extern void gt_ggc_mx_ipa_edge_args (void *);



extern void gt_ggc_mx_ipa_agg_replacement_value (void *);



extern void gt_ggc_mx_ipa_fn_summary (void *);



extern void gt_ggc_mx_odr_type_d (void *);



extern void gt_ggc_mx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_ggc_mx_param_access (void *);



extern void gt_ggc_mx_vec_param_access__va_gc_ (void *);



extern void gt_ggc_mx_isra_func_summary (void *);



extern void gt_ggc_mx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_ggc_mx_ipa_sra_function_summaries (void *);



extern void gt_ggc_mx_typeinfo (void *);



extern void gt_ggc_mx_dw_cfi_node (void *);



extern void gt_ggc_mx_dw_loc_descr_node (void *);



extern void gt_ggc_mx_dw_loc_list_struct (void *);



extern void gt_ggc_mx_dw_discr_list_node (void *);



extern void gt_ggc_mx_dw_cfa_location (void *);



extern void gt_ggc_mx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_ggc_mx_addr_table_entry (void *);



extern void gt_ggc_mx_indirect_string_node (void *);



extern void gt_ggc_mx_dwarf_file_data (void *);



extern void gt_ggc_mx_hash_map_char__tree_ (void *);



extern void gt_ggc_mx_dw_cfi_row (void *);



extern void gt_ggc_mx_reg_saved_in_data (void *);



extern void gt_ggc_mx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_indirect_string_hasher_ (void *);



extern void gt_ggc_mx_comdat_type_node (void *);



extern void gt_ggc_mx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_ggc_mx_dw_line_info_table (void *);



extern void gt_ggc_mx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_ggc_mx_limbo_die_struct (void *);



extern void gt_ggc_mx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_die_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_ggc_mx_variable_value_struct (void *);



extern void gt_ggc_mx_hash_table_variable_value_hasher_ (void *);



extern void gt_ggc_mx_hash_table_block_die_hasher_ (void *);



extern void gt_ggc_mx_var_loc_node (void *);



extern void gt_ggc_mx_var_loc_list_def (void *);



extern void gt_ggc_mx_call_arg_loc_node (void *);



extern void gt_ggc_mx_hash_table_decl_loc_hasher_ (void *);



extern void gt_ggc_mx_cached_dw_loc_list_def (void *);



extern void gt_ggc_mx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_ggc_mx_vec_pubname_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_ggc_mx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_addr_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_ggc_mx_inline_entry_data (void *);



extern void gt_ggc_mx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_ggc_mx_temp_slot (void *);



extern void gt_ggc_mx_initial_value_struct (void *);



extern void gt_ggc_mx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_const_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_reg_attr_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_double_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_fixed_hasher_ (void *);



extern void gt_ggc_mx_eh_region_d (void *);



extern void gt_ggc_mx_eh_landing_pad_d (void *);



extern void gt_ggc_mx_eh_catch_d (void *);



extern void gt_ggc_mx_vec_eh_region_va_gc_ (void *);



extern void gt_ggc_mx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_ggc_mx_hash_map_gimple__int_ (void *);



extern void gt_ggc_mx_hash_table_insn_cache_hasher_ (void *);



extern void gt_ggc_mx_temp_slot_address_entry (void *);



extern void gt_ggc_mx_hash_table_temp_address_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_hash_tree_ (void *);



extern void gt_ggc_mx_test_struct (void *);



extern void gt_ggc_mx_test_of_length (void *);



extern void gt_ggc_mx_test_other (void *);



extern void gt_ggc_mx_test_of_union (void *);



extern void gt_ggc_mx_example_base (void *);



extern void gt_ggc_mx_test_node (void *);



extern void gt_ggc_mx_user_struct (void *);



extern void gt_ggc_mx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_ggc_mx_string_pool_data (void *);



extern void gt_ggc_mx_type_hash (void *);



extern void gt_ggc_mx_hash_table_type_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_cl_option_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_section_hasher_ (void *);



extern void gt_ggc_mx_hash_table_object_block_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_clone_hasher_ (void *);



extern void gt_ggc_mx_tm_restart_node (void *);



extern void gt_ggc_mx_hash_map_tree_tree_ (void *);



extern void gt_ggc_mx_hash_table_ssa_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_restart_hasher_ (void *);



extern void gt_ggc_mx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_ggc_mx_scev_info_str (void *);



extern void gt_ggc_mx_hash_table_scev_info_hasher_ (void *);



extern void gt_ggc_mx_ssa_operand_memory_d (void *);



extern void gt_ggc_mx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_ggc_mx_omp_declare_variant_base_entry (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_ggc_mx_hash_table_dllimport_hasher_ (void *);



extern void gt_ggc_mx_hash_map_char__unsigned_ (void *);



extern void gt_ggc_mx_vec_gimple__va_gc_ (void *);



extern void gt_ggc_mx_int_range_1_ (void *);



extern void gt_ggc_mx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_ggc_mx_ipa_bits (void *);



extern void gt_ggc_mx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_bits__va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_vr_va_gc_ (void *);



extern void gt_ggc_mx_ipcp_transformation (void *);



extern void gt_ggc_mx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_ggc_mx_ipa_node_params_t (void *);



extern void gt_ggc_mx_ipa_edge_args_sum_t (void *);



extern void gt_ggc_mx_function_summary_ipcp_transformation__ (void *);



extern void gt_ggc_mx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_state_hasher_ (void *);



extern void gt_ggc_mx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_ggc_mx_vec_condition_va_gc_ (void *);



extern void gt_ggc_mx_vec_size_time_entry_va_gc_ (void *);



extern void gt_ggc_mx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_ggc_mx_tree_type_map (void *);



extern void gt_ggc_mx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_ggc_mx_vec_odr_type_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_value_annotation_hasher_ (void *);



extern void gt_ggc_mx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_ggc_mx_tree_entity_vec_map (void *);



extern void gt_ggc_mx_hash_table_dummy_type_hasher_ (void *);



extern void gt_ggc_mx_parm_attr_d (void *);



extern void gt_ggc_mx_vec_parm_attr_va_gc_ (void *);



extern void gt_ggc_mx_stmt_group (void *);



extern void gt_ggc_mx_elab_info (void *);



extern void gt_ggc_mx_range_check_info_d (void *);



extern void gt_ggc_mx_vec_range_check_info_va_gc_ (void *);



extern void gt_ggc_mx_loop_info_d (void *);



extern void gt_ggc_mx_vec_loop_info_va_gc_ (void *);



extern void gt_ggc_mx_gnat_binding_level (void *);



extern void gt_ggc_mx_packable_type_hash (void *);



extern void gt_ggc_mx_hash_table_packable_type_hasher_ (void *);



extern void gt_ggc_mx_pad_type_hash (void *);



extern void gt_ggc_mx_hash_table_pad_type_hasher_ (void *);



extern void gt_ggc_mx_c_label_vars (void *);



extern void gt_ggc_mx_c_binding (void *);



extern void gt_ggc_mx_c_scope (void *);



extern void gt_ggc_mx_c_goto_bindings (void *);



extern void gt_ggc_mx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_ggc_mx_c_inline_static (void *);



extern void gt_ggc_mx_sorted_fields_type (void *);



extern void gt_ggc_mx_vec_const_char_p_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_ggc_mx_align_stack (void *);



extern void gt_ggc_mx_vec_pending_weak_va_gc_ (void *);



extern void gt_ggc_mx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_ggc_mx_opt_stack (void *);



extern void gt_ggc_mx_c_parser (void *);



extern void gt_ggc_mx_vec_c_token_va_gc_ (void *);



extern void gt_ggc_mx_binding_table_s (void *);



extern void gt_ggc_mx_binding_entry_s (void *);



extern void gt_ggc_mx_cxx_binding (void *);



extern void gt_ggc_mx_cp_binding_level (void *);



extern void gt_ggc_mx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_ggc_mx_cp_token_cache (void *);



extern void gt_ggc_mx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_ggc_mx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_ggc_mx_saved_scope (void *);



extern void gt_ggc_mx_cxx_int_tree_map (void *);



extern void gt_ggc_mx_named_label_entry (void *);



extern void gt_ggc_mx_hash_table_named_label_hash_ (void *);



extern void gt_ggc_mx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_ggc_mx_tree_pair_s (void *);



extern void gt_ggc_mx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_named_decl_hash_ (void *);



extern void gt_ggc_mx_tinst_level (void *);



extern void gt_ggc_mx_tree_check (void *);



extern void gt_ggc_mx_vec_cp_token_va_gc_ (void *);



extern void gt_ggc_mx_cp_lexer (void *);



extern void gt_ggc_mx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser_context (void *);



extern void gt_ggc_mx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser (void *);



extern void gt_ggc_mx_hash_map_tree_int_ (void *);



extern void gt_ggc_mx_constexpr_fundef (void *);



extern void gt_ggc_mx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_ggc_mx_constexpr_call (void *);



extern void gt_ggc_mx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_ggc_mx_sat_entry (void *);



extern void gt_ggc_mx_hash_table_sat_hasher_ (void *);



extern void gt_ggc_mx_coroutine_info (void *);



extern void gt_ggc_mx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_ggc_mx_source_location_table_entry (void *);



extern void gt_ggc_mx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_ggc_mx_named_label_use_entry (void *);



extern void gt_ggc_mx_vec_incomplete_var_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_typename_hasher_ (void *);



extern void gt_ggc_mx_hash_table_mangled_decl_hash_ (void *);



extern void gt_ggc_mx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_int_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_conv_type_hasher_ (void *);



extern void gt_ggc_mx_subsumption_entry (void *);



extern void gt_ggc_mx_hash_table_subsumption_hasher_ (void *);



extern void gt_ggc_mx_pending_template (void *);



extern void gt_ggc_mx_spec_entry (void *);



extern void gt_ggc_mx_hash_table_spec_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_ggc_mx_vec_tinfo_s_va_gc_ (void *);



extern void gt_ggc_mx_vec_deferred_access_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_cplus_array_hasher_ (void *);



extern void gt_ggc_mx_hash_table_list_hasher_ (void *);



extern void gt_ggc_mx_pending_abstract_type (void *);



extern void gt_ggc_mx_hash_table_abstract_type_hasher_ (void *);



extern void gt_ggc_mx_Statement (void *);



extern void gt_ggc_mx_binding_level (void *);



extern void gt_ggc_mx_d_label_use_entry (void *);



extern void gt_ggc_mx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_ggc_mx_hash_table_module_hasher_ (void *);



extern void gt_ggc_mx_module_htab_entry (void *);



extern void gt_ggc_mx_hash_table_module_decl_hasher_ (void *);



extern void gt_ggc_mx_objc_map_private (void *);



extern void gt_ggc_mx_hashed_entry (void *);



extern void gt_ggc_mx_hashed_attribute (void *);



extern void gt_ggc_mx_imp_entry (void *);



extern void gt_ggc_mx_string_descriptor (void *);



extern void gt_ggc_mx_hash_table_objc_string_hasher_ (void *);



extern void gt_ggc_mx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_ggc_mx_vec_msgref_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_ivarref_entry_va_gc_ (void *);
# 1388 "./gtype-desc.h"
extern void gt_pch_nx_line_maps (void *);



extern void gt_pch_nx_cpp_token (void *);



extern void gt_pch_nx_cpp_macro (void *);



extern void gt_pch_nx_string_concat (void *);



extern void gt_pch_nx_string_concat_db (void *);



extern void gt_pch_nx_hash_map_location_hash_string_concat__ (void *);



extern void gt_pch_nx_bitmap_head (void *);



extern void gt_pch_nx_rtx_def (void *);



extern void gt_pch_nx_rtvec_def (void *);



extern void gt_pch_nx_gimple (void *);



extern void gt_pch_nx_symtab_node (void *);



extern void gt_pch_nx_cgraph_edge (void *);



extern void gt_pch_nx_section (void *);



extern void gt_pch_nx_cl_target_option (void *);



extern void gt_pch_nx_cl_optimization (void *);



extern void gt_pch_nx_edge_def (void *);



extern void gt_pch_nx_basic_block_def (void *);



extern void gt_pch_nx_stack_local_entry (void *);



extern void gt_pch_nx_machine_function (void *);



extern void gt_pch_nx_bitmap_element (void *);



extern void gt_pch_nx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_pch_nx_coverage_data (void *);



extern void gt_pch_nx_mem_attrs (void *);



extern void gt_pch_nx_reg_attrs (void *);



extern void gt_pch_nx_object_block (void *);



extern void gt_pch_nx_vec_rtx_va_gc_ (void *);



extern void gt_pch_nx_real_value (void *);



extern void gt_pch_nx_fixed_value (void *);



extern void gt_pch_nx_constant_descriptor_rtx (void *);



extern void gt_pch_nx_function (void *);



extern void gt_pch_nx_target_rtl (void *);



extern void gt_pch_nx_cgraph_rtl_info (void *);



extern void gt_pch_nx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_pch_nx_ptr_info_def (void *);



extern void gt_pch_nx_range_info_def (void *);



extern void gt_pch_nx_die_struct (void *);



extern void gt_pch_nx_vec_constructor_elt_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_va_gc_ (void *);



extern void gt_pch_nx_lang_type (void *);



extern void gt_pch_nx_lang_decl (void *);



extern void gt_pch_nx_tree_statement_list_node (void *);



extern void gt_pch_nx_target_globals (void *);



extern void gt_pch_nx_lang_tree_node (void *);



extern void gt_pch_nx_tree_map (void *);



extern void gt_pch_nx_tree_decl_map (void *);



extern void gt_pch_nx_tree_int_map (void *);



extern void gt_pch_nx_tree_vec_map (void *);



extern void gt_pch_nx_vec_alias_pair_va_gc_ (void *);



extern void gt_pch_nx_libfunc_entry (void *);



extern void gt_pch_nx_hash_table_libfunc_hasher_ (void *);



extern void gt_pch_nx_target_libfuncs (void *);



extern void gt_pch_nx_sequence_stack (void *);



extern void gt_pch_nx_vec_rtx_insn__va_gc_ (void *);



extern void gt_pch_nx_call_site_record_d (void *);



extern void gt_pch_nx_vec_uchar_va_gc_ (void *);



extern void gt_pch_nx_vec_call_site_record_va_gc_ (void *);



extern void gt_pch_nx_gimple_df (void *);



extern void gt_pch_nx_dw_fde_node (void *);



extern void gt_pch_nx_rtx_constant_pool (void *);



extern void gt_pch_nx_frame_space (void *);



extern void gt_pch_nx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_pch_nx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_pch_nx_stack_usage (void *);



extern void gt_pch_nx_eh_status (void *);



extern void gt_pch_nx_control_flow_graph (void *);



extern void gt_pch_nx_loops (void *);



extern void gt_pch_nx_language_function (void *);



extern void gt_pch_nx_hash_set_tree_ (void *);



extern void gt_pch_nx_types_used_by_vars_entry (void *);



extern void gt_pch_nx_hash_table_used_type_hasher_ (void *);



extern void gt_pch_nx_nb_iter_bound (void *);



extern void gt_pch_nx_loop_exit (void *);



extern void gt_pch_nx_loop (void *);



extern void gt_pch_nx_control_iv (void *);



extern void gt_pch_nx_vec_loop_p_va_gc_ (void *);



extern void gt_pch_nx_niter_desc (void *);



extern void gt_pch_nx_hash_table_loop_exit_hasher_ (void *);



extern void gt_pch_nx_vec_basic_block_va_gc_ (void *);



extern void gt_pch_nx_rtl_bb_info (void *);



extern void gt_pch_nx_vec_edge_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_pch_nx_section_hash_entry (void *);



extern void gt_pch_nx_lto_file_decl_data (void *);



extern void gt_pch_nx_ipa_replace_map (void *);



extern void gt_pch_nx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_pch_nx_ipa_param_adjustments (void *);



extern void gt_pch_nx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_pch_nx_cgraph_simd_clone (void *);



extern void gt_pch_nx_cgraph_function_version_info (void *);



extern void gt_pch_nx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_pch_nx_cgraph_indirect_call_info (void *);



extern void gt_pch_nx_asm_node (void *);



extern void gt_pch_nx_symbol_table (void *);



extern void gt_pch_nx_hash_table_section_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_asmname_hasher_ (void *);



extern void gt_pch_nx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_pch_nx_constant_descriptor_tree (void *);



extern void gt_pch_nx_hash_map_alias_set_hash_int_ (void *);



extern void gt_pch_nx_alias_set_entry (void *);



extern void gt_pch_nx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_pch_nx_hash_table_function_version_hasher_ (void *);



extern void gt_pch_nx_lto_in_decl_state (void *);



extern void gt_pch_nx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_pch_nx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_pch_nx_ipa_node_params (void *);



extern void gt_pch_nx_ipa_edge_args (void *);



extern void gt_pch_nx_ipa_agg_replacement_value (void *);



extern void gt_pch_nx_ipa_fn_summary (void *);



extern void gt_pch_nx_odr_type_d (void *);



extern void gt_pch_nx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_pch_nx_param_access (void *);



extern void gt_pch_nx_vec_param_access__va_gc_ (void *);



extern void gt_pch_nx_isra_func_summary (void *);



extern void gt_pch_nx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_pch_nx_ipa_sra_function_summaries (void *);



extern void gt_pch_nx_typeinfo (void *);



extern void gt_pch_nx_dw_cfi_node (void *);



extern void gt_pch_nx_dw_loc_descr_node (void *);



extern void gt_pch_nx_dw_loc_list_struct (void *);



extern void gt_pch_nx_dw_discr_list_node (void *);



extern void gt_pch_nx_dw_cfa_location (void *);



extern void gt_pch_nx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_pch_nx_addr_table_entry (void *);



extern void gt_pch_nx_indirect_string_node (void *);



extern void gt_pch_nx_dwarf_file_data (void *);



extern void gt_pch_nx_hash_map_char__tree_ (void *);



extern void gt_pch_nx_dw_cfi_row (void *);



extern void gt_pch_nx_reg_saved_in_data (void *);



extern void gt_pch_nx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_pch_nx_hash_table_indirect_string_hasher_ (void *);



extern void gt_pch_nx_comdat_type_node (void *);



extern void gt_pch_nx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_pch_nx_dw_line_info_table (void *);



extern void gt_pch_nx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_pch_nx_limbo_die_struct (void *);



extern void gt_pch_nx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_die_hasher_ (void *);



extern void gt_pch_nx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_pch_nx_variable_value_struct (void *);



extern void gt_pch_nx_hash_table_variable_value_hasher_ (void *);



extern void gt_pch_nx_hash_table_block_die_hasher_ (void *);



extern void gt_pch_nx_var_loc_node (void *);



extern void gt_pch_nx_var_loc_list_def (void *);



extern void gt_pch_nx_call_arg_loc_node (void *);



extern void gt_pch_nx_hash_table_decl_loc_hasher_ (void *);



extern void gt_pch_nx_cached_dw_loc_list_def (void *);



extern void gt_pch_nx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_pch_nx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_pch_nx_vec_pubname_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_pch_nx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_hash_table_addr_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_pch_nx_inline_entry_data (void *);



extern void gt_pch_nx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_pch_nx_temp_slot (void *);



extern void gt_pch_nx_initial_value_struct (void *);



extern void gt_pch_nx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_pch_nx_hash_table_const_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_reg_attr_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_double_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_fixed_hasher_ (void *);



extern void gt_pch_nx_eh_region_d (void *);



extern void gt_pch_nx_eh_landing_pad_d (void *);



extern void gt_pch_nx_eh_catch_d (void *);



extern void gt_pch_nx_vec_eh_region_va_gc_ (void *);



extern void gt_pch_nx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_pch_nx_hash_map_gimple__int_ (void *);



extern void gt_pch_nx_hash_table_insn_cache_hasher_ (void *);



extern void gt_pch_nx_temp_slot_address_entry (void *);



extern void gt_pch_nx_hash_table_temp_address_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_hash_tree_ (void *);



extern void gt_pch_nx_test_struct (void *);



extern void gt_pch_nx_test_of_length (void *);



extern void gt_pch_nx_test_other (void *);



extern void gt_pch_nx_test_of_union (void *);



extern void gt_pch_nx_example_base (void *);



extern void gt_pch_nx_test_node (void *);



extern void gt_pch_nx_user_struct (void *);



extern void gt_pch_nx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_pch_nx_string_pool_data (void *);



extern void gt_pch_nx_type_hash (void *);



extern void gt_pch_nx_hash_table_type_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_cl_option_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_section_hasher_ (void *);



extern void gt_pch_nx_hash_table_object_block_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_clone_hasher_ (void *);



extern void gt_pch_nx_tm_restart_node (void *);



extern void gt_pch_nx_hash_map_tree_tree_ (void *);



extern void gt_pch_nx_hash_table_ssa_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_restart_hasher_ (void *);



extern void gt_pch_nx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_pch_nx_scev_info_str (void *);



extern void gt_pch_nx_hash_table_scev_info_hasher_ (void *);



extern void gt_pch_nx_ssa_operand_memory_d (void *);



extern void gt_pch_nx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_pch_nx_omp_declare_variant_base_entry (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_pch_nx_hash_table_dllimport_hasher_ (void *);



extern void gt_pch_nx_hash_map_char__unsigned_ (void *);



extern void gt_pch_nx_vec_gimple__va_gc_ (void *);



extern void gt_pch_nx_int_range_1_ (void *);



extern void gt_pch_nx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_pch_nx_ipa_bits (void *);



extern void gt_pch_nx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_bits__va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_vr_va_gc_ (void *);



extern void gt_pch_nx_ipcp_transformation (void *);



extern void gt_pch_nx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_pch_nx_ipa_node_params_t (void *);



extern void gt_pch_nx_ipa_edge_args_sum_t (void *);



extern void gt_pch_nx_function_summary_ipcp_transformation__ (void *);



extern void gt_pch_nx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_state_hasher_ (void *);



extern void gt_pch_nx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_pch_nx_vec_condition_va_gc_ (void *);



extern void gt_pch_nx_vec_size_time_entry_va_gc_ (void *);



extern void gt_pch_nx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_pch_nx_tree_type_map (void *);



extern void gt_pch_nx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_pch_nx_vec_odr_type_va_gc_ (void *);



extern void gt_pch_nx_hash_table_value_annotation_hasher_ (void *);



extern void gt_pch_nx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_pch_nx_tree_entity_vec_map (void *);



extern void gt_pch_nx_hash_table_dummy_type_hasher_ (void *);



extern void gt_pch_nx_parm_attr_d (void *);



extern void gt_pch_nx_vec_parm_attr_va_gc_ (void *);



extern void gt_pch_nx_stmt_group (void *);



extern void gt_pch_nx_elab_info (void *);



extern void gt_pch_nx_range_check_info_d (void *);



extern void gt_pch_nx_vec_range_check_info_va_gc_ (void *);



extern void gt_pch_nx_loop_info_d (void *);



extern void gt_pch_nx_vec_loop_info_va_gc_ (void *);



extern void gt_pch_nx_gnat_binding_level (void *);



extern void gt_pch_nx_packable_type_hash (void *);



extern void gt_pch_nx_hash_table_packable_type_hasher_ (void *);



extern void gt_pch_nx_pad_type_hash (void *);



extern void gt_pch_nx_hash_table_pad_type_hasher_ (void *);



extern void gt_pch_nx_c_label_vars (void *);



extern void gt_pch_nx_c_binding (void *);



extern void gt_pch_nx_c_scope (void *);



extern void gt_pch_nx_c_goto_bindings (void *);



extern void gt_pch_nx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_pch_nx_c_inline_static (void *);



extern void gt_pch_nx_sorted_fields_type (void *);



extern void gt_pch_nx_vec_const_char_p_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_pch_nx_align_stack (void *);



extern void gt_pch_nx_vec_pending_weak_va_gc_ (void *);



extern void gt_pch_nx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_pch_nx_opt_stack (void *);



extern void gt_pch_nx_c_parser (void *);



extern void gt_pch_nx_vec_c_token_va_gc_ (void *);



extern void gt_pch_nx_binding_table_s (void *);



extern void gt_pch_nx_binding_entry_s (void *);



extern void gt_pch_nx_cxx_binding (void *);



extern void gt_pch_nx_cp_binding_level (void *);



extern void gt_pch_nx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_pch_nx_cp_token_cache (void *);



extern void gt_pch_nx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_pch_nx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_pch_nx_saved_scope (void *);



extern void gt_pch_nx_cxx_int_tree_map (void *);



extern void gt_pch_nx_named_label_entry (void *);



extern void gt_pch_nx_hash_table_named_label_hash_ (void *);



extern void gt_pch_nx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_pch_nx_tree_pair_s (void *);



extern void gt_pch_nx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_pch_nx_hash_table_named_decl_hash_ (void *);



extern void gt_pch_nx_tinst_level (void *);



extern void gt_pch_nx_tree_check (void *);



extern void gt_pch_nx_vec_cp_token_va_gc_ (void *);



extern void gt_pch_nx_cp_lexer (void *);



extern void gt_pch_nx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser_context (void *);



extern void gt_pch_nx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser (void *);



extern void gt_pch_nx_hash_map_tree_int_ (void *);



extern void gt_pch_nx_constexpr_fundef (void *);



extern void gt_pch_nx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_pch_nx_constexpr_call (void *);



extern void gt_pch_nx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_pch_nx_sat_entry (void *);



extern void gt_pch_nx_hash_table_sat_hasher_ (void *);



extern void gt_pch_nx_coroutine_info (void *);



extern void gt_pch_nx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_pch_nx_source_location_table_entry (void *);



extern void gt_pch_nx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_pch_nx_named_label_use_entry (void *);



extern void gt_pch_nx_vec_incomplete_var_va_gc_ (void *);



extern void gt_pch_nx_hash_table_typename_hasher_ (void *);



extern void gt_pch_nx_hash_table_mangled_decl_hash_ (void *);



extern void gt_pch_nx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_int_va_gc_ (void *);



extern void gt_pch_nx_hash_table_conv_type_hasher_ (void *);



extern void gt_pch_nx_subsumption_entry (void *);



extern void gt_pch_nx_hash_table_subsumption_hasher_ (void *);



extern void gt_pch_nx_pending_template (void *);



extern void gt_pch_nx_spec_entry (void *);



extern void gt_pch_nx_hash_table_spec_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_pch_nx_vec_tinfo_s_va_gc_ (void *);



extern void gt_pch_nx_vec_deferred_access_va_gc_ (void *);



extern void gt_pch_nx_hash_table_cplus_array_hasher_ (void *);



extern void gt_pch_nx_hash_table_list_hasher_ (void *);



extern void gt_pch_nx_pending_abstract_type (void *);



extern void gt_pch_nx_hash_table_abstract_type_hasher_ (void *);



extern void gt_pch_nx_Statement (void *);



extern void gt_pch_nx_binding_level (void *);



extern void gt_pch_nx_d_label_use_entry (void *);



extern void gt_pch_nx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_pch_nx_hash_table_module_hasher_ (void *);



extern void gt_pch_nx_module_htab_entry (void *);



extern void gt_pch_nx_hash_table_module_decl_hasher_ (void *);



extern void gt_pch_nx_objc_map_private (void *);



extern void gt_pch_nx_hashed_entry (void *);



extern void gt_pch_nx_hashed_attribute (void *);



extern void gt_pch_nx_imp_entry (void *);



extern void gt_pch_nx_string_descriptor (void *);



extern void gt_pch_nx_hash_table_objc_string_hasher_ (void *);



extern void gt_pch_nx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_pch_nx_vec_msgref_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_ivarref_entry_va_gc_ (void *);





extern void gt_pch_p_9line_maps
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_token
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_macro
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13string_concat
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_concat_db
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_map_location_hash_string_concat__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11bitmap_head
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9rtvec_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_edge
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7section
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cl_target_option
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cl_optimization
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8edge_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15basic_block_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17stack_local_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16machine_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14bitmap_element
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34generic_wide_int_wide_int_storage_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13coverage_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9mem_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9reg_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12object_block
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14vec_rtx_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10real_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11fixed_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23constant_descriptor_rtx
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10target_rtl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cgraph_rtl_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_decl_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_type_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12ptr_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14range_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_constructor_elt_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_tree_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_decl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24tree_statement_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14target_globals
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14lang_tree_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_decl_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_int_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_alias_pair_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13libfunc_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_libfunc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15target_libfuncs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14sequence_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_rtx_insn__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18call_site_record_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16vec_uchar_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_call_site_record_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9gimple_df
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_fde_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17rtx_constant_pool
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11frame_space
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_callee_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_dalloc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11stack_usage
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18control_flow_graph
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_5loops
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17language_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14hash_set_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24types_used_by_vars_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_used_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13nb_iter_bound
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9loop_exit
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_4loop
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10control_iv
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_loop_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10niter_desc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_loop_exit_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_basic_block_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11rtl_bb_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_edge_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_ref_t_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18section_hash_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18lto_file_decl_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_replace_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ipa_replace_map__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21ipa_param_adjustments
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_ipa_param_performed_split_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cgraph_simd_clone
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28cgraph_function_version_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cgraph_edge_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25cgraph_indirect_call_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8asm_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12symbol_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_section_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_asmname_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_symtab_node__symbol_priority_map_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24constant_descriptor_tree
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_map_alias_set_hash_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15alias_set_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_alias_set_entry__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_function_version_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17lto_in_decl_state
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_ipa_bit_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_ipa_vr_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_node_params
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13ipa_edge_args
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25ipa_agg_replacement_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14ipa_fn_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10odr_type_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_ipa_adjusted_param_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12param_access
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_param_access__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17isra_func_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_isra_param_desc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26ipa_sra_function_summaries
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8typeinfo
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_cfi_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17dw_loc_descr_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_loc_list_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_discr_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dw_cfa_location
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_cfi_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16addr_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20indirect_string_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dwarf_file_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20hash_map_char__tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10dw_cfi_row
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17reg_saved_in_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_fde_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_indirect_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16comdat_type_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_line_info_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_line_info_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_dw_attr_node_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16limbo_die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dwarf_file_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_die_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21variable_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_variable_value_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_block_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12var_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16var_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17call_arg_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_loc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22cached_dw_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_dw_loc_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30vec_dw_line_info_table__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_pubname_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_macinfo_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_dw_ranges_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_ranges_by_label_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_die_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_addr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_map_tree_sym_off_pair_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17inline_entry_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36hash_table_inline_entry_data_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9temp_slot
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20initial_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_temp_slot_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_const_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_wide_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_poly_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_reg_attr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_const_double_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_const_fixed_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11eh_region_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16eh_landing_pad_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10eh_catch_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_eh_region_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_eh_landing_pad_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21hash_map_gimple__int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_insn_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23temp_slot_address_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_temp_address_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_tree_hash_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11test_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14test_of_length
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10test_other
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13test_of_union
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9test_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11user_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_libfunc_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_pool_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_type_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_poly_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_cl_option_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_decl_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_37hash_table_tree_vec_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_section_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_object_block_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_tree_descriptor_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_rtx_desc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_tm_clone_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15tm_restart_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19hash_map_tree_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_ssa_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_restart_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_mem_addr_template_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13scev_info_str
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_scev_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20ssa_operand_memory_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_omp_declare_variant_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30omp_declare_variant_base_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_omp_declare_variant_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_table_omp_declare_variant_alt_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_dllimport_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_char__unsigned_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_gimple__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12int_range_1_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_ipa_agg_jf_item_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8ipa_bits
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_ipa_param_descriptor_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_bits__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_ipa_vr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipcp_transformation
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ipa_jump_func_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_39vec_ipa_polymorphic_call_context_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17ipa_node_params_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipa_edge_args_sum_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38function_summary_ipcp_transformation__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_wrapper_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_decl_state_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_expr_eval_op_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_condition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_size_time_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44fast_function_summary_ipa_fn_summary__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_type_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_type_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_odr_type_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_value_annotation_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_Entity_Id_va_gc_atomic_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19tree_entity_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dummy_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11parm_attr_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_parm_attr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10stmt_group
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9elab_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18range_check_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_range_check_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11loop_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_loop_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18gnat_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18packable_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_packable_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13pad_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_pad_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12c_label_vars
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9c_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7c_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_goto_bindings
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_c_goto_bindings_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_inline_static
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18sorted_fields_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_const_char_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_gc_vec_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11align_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_pending_weak_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_pending_redefinition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9opt_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8c_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_c_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_table_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_entry_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cxx_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cp_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_cp_class_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14cp_token_cache
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32vec_deferred_access_check_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_cxx_saved_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11saved_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cxx_int_tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17named_label_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_named_label_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_cxx_int_tree_map_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tree_pair_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_pair_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_named_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tinst_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10tree_check
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_cp_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8cp_lexer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_cp_default_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cp_parser_context
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38vec_cp_unparsed_functions_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cp_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18hash_map_tree_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16constexpr_fundef
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_constexpr_fundef_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14constexpr_call
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_constexpr_call_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9sat_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22hash_table_sat_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14coroutine_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_coroutine_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27source_location_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44hash_table_source_location_table_entry_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21named_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_incomplete_var_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_typename_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_mangled_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_pending_noexcept_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_tree_int_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_conv_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17subsumption_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_subsumption_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16pending_template
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10spec_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_spec_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_map_tree_tree_pair_p_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_tinfo_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_deferred_access_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cplus_array_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21pending_abstract_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_abstract_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9Statement
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17d_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_map_Statement__d_label_entry_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25hash_table_module_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17module_htab_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_module_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16objc_map_private
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12hashed_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16hashed_attribute
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9imp_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17string_descriptor
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_objc_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ident_data_tuple_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_msgref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_prot_list_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ivarref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 2




typedef void (*gt_note_pointers) (void *, void *, gt_pointer_operator,
      void *);






typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,
       void *);


extern int gt_pch_note_object (void *, void *, gt_note_pointers);



extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);


extern void gt_clear_caches ();


typedef void (*gt_pointer_walker) (void *);



struct ggc_root_tab {
  void *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
};


extern const struct ggc_root_tab * const gt_ggc_rtab[];
extern const struct ggc_root_tab * const gt_ggc_deletable_rtab[];
extern const struct ggc_root_tab * const gt_pch_scalar_rtab[];
# 91 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
extern int ggc_set_mark (const void *);




extern int ggc_marked_p (const void *);


extern void gt_pch_n_S (const void *);
extern void gt_ggc_m_S (const void *);




extern void init_stringpool (void);


extern void init_ggc (void);





extern bool ggc_protect_identifiers;


extern void gt_pch_save (FILE *f);





extern void *ggc_internal_alloc (size_t, void (*)(void *), size_t,
     size_t )
     __attribute__ ((__malloc__));

inline void *
ggc_internal_alloc (size_t s )
{
  return ggc_internal_alloc (s, nullptr, 0, 1 );
}

extern size_t ggc_round_alloc_size (size_t requested_size);


extern void *ggc_internal_cleared_alloc (size_t, void (*)(void *),
      size_t, size_t
      ) __attribute__ ((__malloc__));

inline void *
ggc_internal_cleared_alloc (size_t s )
{
  return ggc_internal_cleared_alloc (s, nullptr, 0, 1 );
}


extern void *ggc_realloc (void *, size_t );


extern void ggc_free (void *);

extern void dump_ggc_loc_statistics ();





template<typename T>
void
finalize (void *p)
{
  static_cast<T *> (p)->~T ();
}

template<typename T>
inline bool
need_finalization_p ()
{

  return !__has_trivial_destructor (T);



}

template<typename T>
inline T *
ggc_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), finalize<T>, 0, 1
       ));
  else
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
       ));
}





template<typename T>
inline T *
ggc_alloc_no_dtor ()
{
  return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
            ));
}

template<typename T>
inline T *
ggc_cleared_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T),
        finalize<T>, 0, 1
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T), nullptr, 0, 1
        ));
}

template<typename T>
inline T *
ggc_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), finalize<T>,
       sizeof (T), c ));
  else
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), nullptr, 0, 0
       ));
}

template<typename T>
inline T *
ggc_cleared_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T),
        finalize<T>,
        sizeof (T), c
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T), nullptr,
        0, 0 ));
}

inline void *
ggc_alloc_atomic (size_t s )
{
    return ggc_internal_alloc (s );
}



template <typename T>
inline void
ggc_delete (T *ptr)
{
  ptr->~T ();
  ggc_free (ptr);
}




extern const char *ggc_alloc_string (const char *contents, int length
                                     );






extern void ggc_collect (void);


extern void ggc_trim (void);


extern void ggc_grow (void);



extern void ggc_register_root_tab (const struct ggc_root_tab *);


extern void gt_pch_restore (FILE *f);




extern void ggc_print_statistics (void);

extern void stringpool_statistics (void);


extern void init_ggc_heuristics (void);


extern void report_heap_memory_use (void);







inline struct rtx_def *
ggc_alloc_rtx_def_stat (size_t s )
{
  return (struct rtx_def *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_cleared_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_cleared_alloc (s );
}

inline gimple *
ggc_alloc_cleared_gimple_statement_stat (size_t s )
{
  return (gimple *) ggc_internal_cleared_alloc (s );
}

inline void
gt_ggc_mx (const char *s)
{
  ((const_cast<char *> (s)) != nullptr && ((void *) (const_cast<char *> (s))) != (void *) 1 && ! ggc_set_mark (const_cast<char *> (s)));
}

inline void
gt_pch_nx (const char *)
{
}

inline void
gt_ggc_mx (int)
{
}

inline void
gt_pch_nx (int)
{
}

inline void
gt_pch_nx (unsigned int)
{
}
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void ggc_free (void *);
extern size_t ggc_round_alloc_size (size_t requested_size);
extern void *ggc_realloc (void *, size_t );
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void dump_vec_loc_statistics (void);


extern htab_t vec_mem_usage_hash;




struct vec_prefix
{




  void register_overhead (void *, size_t, size_t );
  void release_overhead (void *, size_t, size_t, bool );
  static unsigned calculate_allocation (vec_prefix *, unsigned, bool);
  static unsigned calculate_allocation_1 (unsigned, unsigned);







  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;

  unsigned m_alloc : 31;
  unsigned m_using_auto_storage : 1;
  unsigned m_num;
};





inline unsigned
vec_prefix::calculate_allocation (vec_prefix *pfx, unsigned reserve,
      bool exact)
{
  if (exact)
    return (pfx ? pfx->m_num : 0) + reserve;
  else if (!pfx)
    return ((4) > (reserve) ? (4) : (reserve));
  return calculate_allocation_1 (pfx->m_alloc, pfx->m_num + reserve);
}

template<typename, typename, typename> struct vec;






struct vl_embed { };
struct vl_ptr { };
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
struct va_heap
{


  typedef vl_ptr default_layout;

  template<typename T>
  static void reserve (vec<T, va_heap, vl_embed> *&, unsigned, bool
         );

  template<typename T>
  static void release (vec<T, va_heap, vl_embed> *&);
};







template<typename T>
inline void
va_heap::reserve (vec<T, va_heap, vl_embed> *&v, unsigned reserve, bool exact
    )
{
  size_t elt_size = sizeof (T);
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  ((void)(!(alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 282, __FUNCTION__), 0 : 0));

  if (0 && v)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), false);

  size_t size = vec<T, va_heap, vl_embed>::embedded_size (alloc);
  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, va_heap, vl_embed> *> (xrealloc (v, size));
  v->embedded_init (alloc, nelem);

  if (0)
    v->m_vecpfx.register_overhead (v, alloc, elt_size );
}



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfree-nonheap-object"




template<typename T>
void
va_heap::release (vec<T, va_heap, vl_embed> *&v)
{
  size_t elt_size = sizeof (T);
  if (v == nullptr)
    return;

  if (0)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), true);
  ::free (v);
  v = nullptr;
}


#pragma GCC diagnostic pop





struct va_gc
{




  typedef vl_embed default_layout;

  template<typename T, typename A>
  static void reserve (vec<T, A, vl_embed> *&, unsigned, bool
         );

  template<typename T, typename A>
  static void release (vec<T, A, vl_embed> *&v);
};




template<typename T, typename A>
inline void
va_gc::release (vec<T, A, vl_embed> *&v)
{
  if (v)
    ::ggc_free (v);
  v = nullptr;
}







template<typename T, typename A>
void
va_gc::reserve (vec<T, A, vl_embed> *&v, unsigned reserve, bool exact
  )
{
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  if (!alloc)
    {
      ::ggc_free (v);
      v = nullptr;
      return;
    }


  size_t size = vec<T, A, vl_embed>::embedded_size (alloc);


  size = ::ggc_round_alloc_size (size);


  size_t vec_offset = sizeof (vec_prefix);
  size_t elt_size = sizeof (T);
  alloc = (size - vec_offset) / elt_size;


  size = vec_offset + alloc * elt_size;

  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, A, vl_embed> *> (::ggc_realloc (v, size
              ));
  v->embedded_init (alloc, nelem);
}





struct va_gc_atomic : va_gc
{
};
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T,
         typename A = va_heap,
         typename L = typename A::default_layout>
struct vec
{
};
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
void
debug_helper (vec<T> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
                  stderr
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                        );
    }
}






template<typename T>
void
debug_helper (vec<T, va_gc> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
                  stderr
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                        );
    }
}
# 501 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
inline void
vec_default_construct (T *dst, unsigned n)
{
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
  for ( ; n; ++dst, --n)
    ::new (static_cast<void*>(dst)) T ();
}



template <typename T>
inline void
vec_copy_construct (T *dst, const T *src, unsigned n)
{
  for ( ; n; ++dst, ++src, --n)
    ::new (static_cast<void*>(dst)) T (*src);
}







struct vnull
{
  template <typename T, typename A, typename L>
  constexpr operator vec<T, A, L> () { return vec<T, A, L>(); }
};
extern vnull vNULL;
# 574 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
struct vec<T, A, vl_embed>
{
public:
  unsigned allocated (void) const { return m_vecpfx.m_alloc; }
  unsigned length (void) const { return m_vecpfx.m_num; }
  bool is_empty (void) const { return m_vecpfx.m_num == 0; }
  T *address (void) { return m_vecdata; }
  const T *address (void) const { return m_vecdata; }
  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return address () + length (); }
  const T *end () const { return address () + length (); }
  const T &operator[] (unsigned) const;
  T &operator[] (unsigned);
  T &last (void);
  bool space (unsigned) const;
  bool iterate (unsigned, T *) const;
  bool iterate (unsigned, T **) const;
  vec *copy () const;
  void splice (const vec &);
  void splice (const vec *src);
  T *quick_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void quick_insert (unsigned, const T &);
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  static size_t embedded_size (unsigned);
  void embedded_init (unsigned, unsigned = 0, unsigned = 0);
  void quick_grow (unsigned len);
  void quick_grow_cleared (unsigned len);


  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;



  vec_prefix m_vecpfx;
  T m_vecdata[1];
};
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec_safe_space (const vec<T, A, vl_embed> *v, unsigned nelems)
{
  return v ? v->space (nelems) : nelems == 0;
}



template<typename T, typename A>
inline unsigned
vec_safe_length (const vec<T, A, vl_embed> *v)
{
  return v ? v->length () : 0;
}



template<typename T, typename A>
inline T *
vec_safe_address (vec<T, A, vl_embed> *v)
{
  return v ? v->address () : nullptr;
}



template<typename T, typename A>
inline bool
vec_safe_is_empty (vec<T, A, vl_embed> *v)
{
  return v ? v->is_empty () : true;
}



template<typename T, typename A>
inline bool
vec_safe_reserve (vec<T, A, vl_embed> *&v, unsigned nelems, bool exact = false
    )
{
  bool extend = nelems ? !vec_safe_space (v, nelems) : false;
  if (extend)
    A::reserve (v, nelems, exact );
  return extend;
}

template<typename T, typename A>
inline bool
vec_safe_reserve_exact (vec<T, A, vl_embed> *&v, unsigned nelems
   )
{
  return vec_safe_reserve (v, nelems, true );
}





template<typename T, typename A>
inline void
vec_alloc (vec<T, A, vl_embed> *&v, unsigned nelems )
{
  v = nullptr;
  vec_safe_reserve (v, nelems, false );
}




template<typename T, typename A>
inline void
vec_free (vec<T, A, vl_embed> *&v)
{
  A::release (v);
}



template<typename T, typename A>
inline void
vec_safe_grow (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  ((void)(!(len >= oldlen) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 729, __FUNCTION__), 0 : 0));
  vec_safe_reserve_exact (v, len - oldlen );
  v->quick_grow (len);
}



template<typename T, typename A>
inline void
vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  vec_safe_grow (v, len );
  vec_default_construct (v->address () + oldlen, len - oldlen);
}




template<typename T>
inline void
vec_safe_grow_cleared (vec<T, va_heap, vl_ptr> *&v,
         unsigned len )
{
  v->safe_grow_cleared (len );
}




template<typename T>
inline bool
vec_safe_reserve (vec<T, va_heap, vl_ptr> *&v, unsigned nelems, bool exact = false
    )
{
  return v->reserve (nelems, exact);
}



template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T **ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}

template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T *ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline T *
vec_safe_push (vec<T, A, vl_embed> *&v, const T &obj )
{
  vec_safe_reserve (v, 1, false );
  return v->quick_push (obj);
}




template<typename T, typename A>
inline void
vec_safe_insert (vec<T, A, vl_embed> *&v, unsigned ix, const T &obj
   )
{
  vec_safe_reserve (v, 1, false );
  v->quick_insert (ix, obj);
}



template<typename T, typename A>
inline void
vec_safe_truncate (vec<T, A, vl_embed> *v, unsigned size)
{
  if (v)
    v->truncate (size);
}



template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec_safe_copy (vec<T, A, vl_embed> *src )
{
  return src ? src->copy () : nullptr;
}



template<typename T, typename A>
inline void
vec_safe_splice (vec<T, A, vl_embed> *&dst, const vec<T, A, vl_embed> *src
   )
{
  unsigned src_len = vec_safe_length (src);
  if (src_len)
    {
      vec_safe_reserve_exact (dst, vec_safe_length (dst) + src_len
         );
      dst->splice (*src);
    }
}




template<typename T, typename A>
inline bool
vec_safe_contains (vec<T, A, vl_embed> *v, const T &search)
{
  return v ? v->contains (search) : false;
}




template<typename T, typename A>
inline const T &
vec<T, A, vl_embed>::operator[] (unsigned ix) const
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 870, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}

template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::operator[] (unsigned ix)
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 878, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::last (void)
{
  ((void)(!(m_vecpfx.m_num > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 889, __FUNCTION__), 0 : 0));
  return (*this)[m_vecpfx.m_num - 1];
}
# 900 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::space (unsigned nelems) const
{
  return m_vecpfx.m_alloc - m_vecpfx.m_num >= nelems;
}
# 915 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T *ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = m_vecdata[ix];
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}
# 941 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T **ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = (const_cast<T *> ((&m_vecdata[ix])));
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec<T, A, vl_embed>::copy (void) const
{
  vec<T, A, vl_embed> *new_vec = nullptr;
  unsigned len = length ();
  if (len)
    {
      vec_alloc (new_vec, len );
      new_vec->embedded_init (len, len);
      vec_copy_construct (new_vec->address (), m_vecdata, len);
    }
  return new_vec;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> &src)
{
  unsigned len = src.length ();
  if (len)
    {
      ((void)(!(space (len)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 986, __FUNCTION__), 0 : 0));
      vec_copy_construct (end (), src.address (), len);
      m_vecpfx.m_num += len;
    }
}

template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> *src)
{
  if (src)
    splice (*src);
}






template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::quick_push (const T &obj)
{
  ((void)(!(space (1)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1009, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[m_vecpfx.m_num++];
  *slot = obj;
  return slot;
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::pop (void)
{
  ((void)(!(length () > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1022, __FUNCTION__), 0 : 0));
  return m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::truncate (unsigned size)
{
  ((void)(!(length () >= size) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1034, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = size;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_insert (unsigned ix, const T &obj)
{
  ((void)(!(length () < allocated ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1046, __FUNCTION__), 0 : 0));
  ((void)(!(ix <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1047, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot + 1, slot, (m_vecpfx.m_num++ - ix) * sizeof (T));
  *slot = obj;
}






template<typename T, typename A>
inline void
vec<T, A, vl_embed>::ordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1062, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot, slot + 1, (--m_vecpfx.m_num - ix) * sizeof (T));
}
# 1105 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline void
vec<T, A, vl_embed>::unordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1109, __FUNCTION__), 0 : 0));
  m_vecdata[ix] = m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::block_remove (unsigned ix, unsigned len)
{
  ((void)(!(ix + len <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1121, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  m_vecpfx.m_num -= len;
  memmove (slot, slot + len, (m_vecpfx.m_num - ix) * sizeof (T));
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::qsort (int (*cmp) (const void *, const void *))
{
  if (length () > 1)
    gcc_qsort (address (), length (), sizeof (T), cmp);
}




template<typename T, typename A>
inline void
vec<T, A, vl_embed>::sort (int (*cmp) (const void *, const void *, void *),
      void *data)
{
  if (length () > 1)
    gcc_sort_r (address (), length (), sizeof (T), cmp, data);
}





template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *))
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *,
          void *), void *data)
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p, data);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::contains (const T &search) const
{
  unsigned int len = length ();
  for (unsigned int i = 0; i < len; i++)
    if ((*this)[i] == search)
      return true;

  return false;
}






template<typename T, typename A>
unsigned
vec<T, A, vl_embed>::lower_bound (T obj, bool (*lessthan)(const T &, const T &))
  const
{
  unsigned int len = length ();
  unsigned int half, middle;
  unsigned int first = 0;
  while (len > 0)
    {
      half = len / 2;
      middle = first;
      middle += half;
      T middle_elem = (*this)[middle];
      if (lessthan (middle_elem, obj))
 {
   first = middle;
   ++first;
   len = len - half - 1;
 }
      else
 len = half;
    }
  return first;
}
# 1280 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline size_t
vec<T, A, vl_embed>::embedded_size (unsigned alloc)
{
  struct alignas (T) U { char data[sizeof (T)]; };
  typedef vec<U, A, vl_embed> vec_embedded;
  typedef typename std::conditional<std::is_standard_layout<T>::value,
        vec, vec_embedded>::type vec_stdlayout;
  static_assert (sizeof (vec_stdlayout) == sizeof (vec), "");
  static_assert (alignof (vec_stdlayout) == alignof (vec), "");
  return 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        __builtin_offsetof (
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        vec_stdlayout
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        , 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        m_vecdata
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        ) 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                                            + alloc * sizeof (T);
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::embedded_init (unsigned alloc, unsigned num, unsigned aut)
{
  m_vecpfx.m_alloc = alloc;
  m_vecpfx.m_using_auto_storage = aut;
  m_vecpfx.m_num = num;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow (unsigned len)
{
  ((void)(!(length () <= len && len <= m_vecpfx.m_alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1314, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = len;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow_cleared (unsigned len)
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  quick_grow (len);
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}



template<typename T>
void
gt_ggc_mx (vec<T, va_gc> *v)
{
  extern void gt_ggc_mx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_ggc_mx ((*v)[i]);
}

template<typename T>
void
gt_ggc_mx (vec<T, va_gc_atomic, vl_embed> *v __attribute__ ((__unused__)))
{


}




template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v)
{
  extern void gt_pch_nx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx ((*v)[i]);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T *, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  for (unsigned i = 0; i < v->length (); i++)
    op (&((*v)[i]), cookie);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  extern void gt_pch_nx (T *, gt_pointer_operator, void *);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx (&((*v)[i]), op, cookie);
}
# 1410 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
struct vec<T, va_heap, vl_ptr>
{
public:


  void create (unsigned nelems );
  void release (void);


  bool exists (void) const
  { return m_vec != nullptr; }

  bool is_empty (void) const
  { return m_vec ? m_vec->is_empty () : true; }

  unsigned length (void) const
  { return m_vec ? m_vec->length () : 0; }

  T *address (void)
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  const T *address (void) const
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return begin () + length (); }
  const T *end () const { return begin () + length (); }
  const T &operator[] (unsigned ix) const
  { return (*m_vec)[ix]; }

  bool operator!=(const vec &other) const
  { return !(*this == other); }

  bool operator==(const vec &other) const
  { return address () == other.address (); }

  T &operator[] (unsigned ix)
  { return (*m_vec)[ix]; }

  T &last (void)
  { return m_vec->last (); }

  bool space (int nelems) const
  { return m_vec ? m_vec->space (nelems) : nelems == 0; }

  bool iterate (unsigned ix, T *p) const;
  bool iterate (unsigned ix, T **p) const;
  vec copy () const;
  bool reserve (unsigned, bool = false );
  bool reserve_exact (unsigned );
  void splice (const vec &);
  void safe_splice (const vec & );
  T *quick_push (const T &);
  T *safe_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void safe_grow (unsigned );
  void safe_grow_cleared (unsigned );
  void quick_grow (unsigned);
  void quick_grow_cleared (unsigned);
  void quick_insert (unsigned, const T &);
  void safe_insert (unsigned, const T & );
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  void reverse (void);

  bool using_auto_storage () const;



  vec<T, va_heap, vl_embed> *m_vec;
};
# 1500 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, size_t N = 0>
class auto_vec : public vec<T, va_heap>
{
public:
  auto_vec ()
  {
    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  auto_vec (size_t s)
  {
    if (s > N)
      {
 this->create (s);
 return;
      }

    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  ~auto_vec ()
  {
    this->release ();
  }

private:
  vec<T, va_heap, vl_embed> m_auto;
  T m_data[((N - 1) > (1) ? (N - 1) : (1))];
};



template<typename T>
class auto_vec<T, 0> : public vec<T, va_heap>
{
public:
  auto_vec () { this->m_vec = nullptr; }
  auto_vec (size_t n) { this->create (n); }
  ~auto_vec () { this->release (); }
};






template<typename T>
inline void
vec_alloc (vec<T> *&v, unsigned nelems )
{
  v = new vec<T>;
  v->create (nelems );
}





class auto_string_vec : public auto_vec <char *>
{
 public:
  ~auto_string_vec ();
};
# 1578 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
class auto_delete_vec : public auto_vec <T *>
{
 public:
  auto_delete_vec () {}
  auto_delete_vec (size_t s) : auto_vec <T *> (s) {}

  ~auto_delete_vec ();

private:
  auto_delete_vec<T> (const auto_delete_vec<T>&) = delete; void operator= (const auto_delete_vec<T> &) = delete;
};



template<typename T>
inline void
vec_check_alloc (vec<T, va_heap> *&vec, unsigned nelems )
{
  if (!vec)
    vec_alloc (vec, nelems );
}




template<typename T>
inline void
vec_free (vec<T> *&v)
{
  if (v == nullptr)
    return;

  v->release ();
  delete v;
  v = nullptr;
}
# 1624 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T *ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1647 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T **ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1686 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
inline
auto_string_vec::~auto_string_vec ()
{
  int i;
  char *str;
  for (i = 0; (*this).iterate ((i), &(str)); ++(i))
    free (str);
}




template <typename T>
inline
auto_delete_vec<T>::~auto_delete_vec ()
{
  int i;
  T *item;
  for (i = 0; (*this).iterate ((i), &(item)); ++(i))
    delete item;
}




template<typename T>
inline vec<T, va_heap, vl_ptr>
vec<T, va_heap, vl_ptr>::copy (void) const
{
  vec<T, va_heap, vl_ptr> new_vec = vNULL;
  if (length ())
    new_vec.m_vec = m_vec->copy ();
  return new_vec;
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve (unsigned nelems, bool exact )
{
  if (space (nelems))
    return false;




  vec<T, va_heap, vl_embed> *oldvec = m_vec;
  unsigned int oldsize = 0;
  bool handle_auto_vec = m_vec && using_auto_storage ();
  if (handle_auto_vec)
    {
      m_vec = nullptr;
      oldsize = oldvec->length ();
      nelems += oldsize;
    }

  va_heap::reserve (m_vec, nelems, exact );
  if (handle_auto_vec)
    {
      vec_copy_construct (m_vec->address (), oldvec->address (), oldsize);
      m_vec->m_vecpfx.m_num = oldsize;
    }

  return true;
}







template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve_exact (unsigned nelems )
{
  return reserve (nelems, true );
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::create (unsigned nelems )
{
  m_vec = nullptr;
  if (nelems > 0)
    reserve_exact (nelems );
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::release (void)
{
  if (!m_vec)
    return;

  if (using_auto_storage ())
    {
      m_vec->m_vecpfx.m_num = 0;
      return;
    }

  va_heap::release (m_vec);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::splice (const vec<T, va_heap, vl_ptr> &src)
{
  if (src.length ())
    m_vec->splice (*(src.m_vec));
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_splice (const vec<T, va_heap, vl_ptr> &src
          )
{
  if (src.length ())
    {
      reserve_exact (src.length ());
      splice (src);
    }
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::quick_push (const T &obj)
{
  return m_vec->quick_push (obj);
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::safe_push (const T &obj )
{
  reserve (1, false );
  return quick_push (obj);
}




template<typename T>
inline T &
vec<T, va_heap, vl_ptr>::pop (void)
{
  return m_vec->pop ();
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::truncate (unsigned size)
{
  if (m_vec)
    m_vec->truncate (size);
  else
    ((void)(!(size == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1885, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow (unsigned len )
{
  unsigned oldlen = length ();
  ((void)(!(oldlen <= len) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1898, __FUNCTION__), 0 : 0));
  reserve_exact (len - oldlen );
  if (m_vec)
    m_vec->quick_grow (len);
  else
    ((void)(!(len == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1903, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow_cleared (unsigned len )
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  safe_grow (len );
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1930, __FUNCTION__), 0 : 0));
  m_vec->quick_grow (len);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow_cleared (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1943, __FUNCTION__), 0 : 0));
  m_vec->quick_grow_cleared (len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_insert (unsigned ix, const T &obj)
{
  m_vec->quick_insert (ix, obj);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_insert (unsigned ix, const T &obj )
{
  reserve (1, false );
  quick_insert (ix, obj);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::ordered_remove (unsigned ix)
{
  m_vec->ordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::unordered_remove (unsigned ix)
{
  m_vec->unordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::block_remove (unsigned ix, unsigned len)
{
  m_vec->block_remove (ix, len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::qsort (int (*cmp) (const void *, const void *))
{
  if (m_vec)
    m_vec->qsort (cmp);
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::sort (int (*cmp) (const void *, const void *,
        void *), void *data)
{
  if (m_vec)
    m_vec->sort (cmp, data);
}





template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *))
{
  if (m_vec)
    return m_vec->bsearch (key, cmp);
  return nullptr;
}




template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *,
           void *), void *data)
{
  if (m_vec)
    return m_vec->bsearch (key, cmp, data);
  return nullptr;
}







template<typename T>
inline unsigned
vec<T, va_heap, vl_ptr>::lower_bound (T obj,
          bool (*lessthan)(const T &, const T &))
    const
{
  return m_vec ? m_vec->lower_bound (obj, lessthan) : 0;
}




template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::contains (const T &search) const
{
  return m_vec ? m_vec->contains (search) : false;
}



template<typename T>
inline void
vec<T, va_heap, vl_ptr>::reverse (void)
{
  unsigned l = length ();
  T *ptr = address ();

  for (unsigned i = 0; i < l / 2; i++)
    std::swap (ptr[i], ptr[l - i - 1]);
}

template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::using_auto_storage () const
{
  return m_vec->m_vecpfx.m_using_auto_storage;
}



template<typename T>
inline void
release_vec_vec (vec<vec<T> > &vec)
{
  for (unsigned i = 0; i < vec.length (); i++)
    vec[i].release ();

  vec.release ();
}


        
# 249 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 250 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
hashval_t iterative_hash_host_wide_int (long, hashval_t);
hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);

namespace inchash
{

class hash
{
 public:


  hash (hashval_t seed = 0)
  {
    val = seed;
    bits = 0;
  }


  hashval_t end ()
  {
    return val;
  }


  void add_int (unsigned v)
  {
    val = iterative_hash_hashval_t (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_int (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_int (v.coeffs[i]);
  }


  void add_hwi (long v)
  {
    val = iterative_hash_host_wide_int (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_hwi (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_hwi (v.coeffs[i]);
  }


  template<typename T>
  void add_wide_int (const generic_wide_int<T> &x)
  {
    add_int (x.get_len ());
    for (unsigned i = 0; i < x.get_len (); i++)
      add_hwi (x.sext_elt (i));
  }


  void add_ptr (const void *ptr)
  {
    add (&ptr, sizeof (ptr));
  }


  void add (const void *data, size_t len)
  {
    val = iterative_hash (data, len, val);
  }


  void merge_hash (hashval_t other)
  {
    val = iterative_hash_hashval_t (other, val);
  }


  void merge (hash &other)
  {
    merge_hash (other.val);
  }

  template<class T> void add_object(T &obj)
  {
    add (&obj, sizeof(T));
  }



  void add_flag (bool flag)
  {
    bits = (bits << 1) | flag;
  }

  void commit_flag ()
  {
    add_int (bits);
    bits = 0;
  }





  void add_commutative (hash &a, hash &b)
  {
    if (a.end() > b.end())
      {
 merge (b);
 merge (a);
      }
    else
      {
 merge (a);
 merge (b);
      }
  }

 private:
  hashval_t val;
  unsigned bits;
};

}
# 174 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
inline
hashval_t
iterative_hash_hashval_t (hashval_t val, hashval_t val2)
{

  hashval_t a = 0x9e3779b9;

  { a -= val; a -= val2; a ^= (val2>>13); val -= val2; val -= a; val ^= (a<< 8); val2 -= a; val2 -= val; val2 ^= ((val&0xffffffff)>>13); a -= val; a -= val2; a ^= ((val2&0xffffffff)>>12); val -= val2; val -= a; val = (val ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>> 5)) & 0xffffffff; a -= val; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; val -= val2; val -= a; val = (val ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>>15)) & 0xffffffff; };
  return val2;
}



inline
hashval_t
iterative_hash_host_wide_int (long val, hashval_t val2)
{
  if (sizeof (long) == sizeof (hashval_t))
    return iterative_hash_hashval_t (val, val2);
  else
    {
      hashval_t a = (hashval_t) val;


      int zero = 0;
      hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 8 + zero));
      { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
      if (sizeof (long) > 2 * sizeof (hashval_t))
 {
   hashval_t a = (hashval_t) (val >> (sizeof (hashval_t) * 16 + zero));
   hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 24 + zero));
   { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
 }
      return val2;
    }
}
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h"
enum mem_alloc_origin
{
  HASH_TABLE_ORIGIN,
  HASH_MAP_ORIGIN,
  HASH_SET_ORIGIN,
  VEC_ORIGIN,
  BITMAP_ORIGIN,
  GGC_ORIGIN,
  ALLOC_POOL_ORIGIN,
  MEM_ALLOC_ORIGIN_LENGTH
};


static const char * mem_alloc_origin_names[] = { "Hash tables", "Hash maps",
  "Hash sets", "Heap vectors", "Bitmaps", "GGC memory", "Allocation pool" };
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h"
template <typename Type>
struct typed_free_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_free_remove <Type>::remove (Type *p)
{
  free (p);
}



template <typename Type>
struct typed_delete_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_delete_remove <Type>::remove (Type *p)
{
  delete p;
}



template <typename Type>
struct typed_noop_remove
{
  static inline void remove (Type &);
};




template <typename Type>
inline void
typed_noop_remove <Type>::remove (Type &)
{
}







template <typename Type, Type Empty, Type Deleted = Empty>
struct int_hash : typed_noop_remove <Type>
{
  typedef Type value_type;
  typedef Type compare_type;

  static inline hashval_t hash (value_type);
  static inline bool equal (value_type existing, value_type candidate);
  static inline void mark_deleted (Type &);
  static const bool empty_zero_p = Empty == 0;
  static inline void mark_empty (Type &);
  static inline bool is_deleted (Type);
  static inline bool is_empty (Type);
};

template <typename Type, Type Empty, Type Deleted>
inline hashval_t
int_hash <Type, Empty, Deleted>::hash (value_type x)
{
  return x;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::equal (value_type x, value_type y)
{
  return x == y;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_deleted (Type &x)
{
  ((void)(!(Empty != Deleted) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h", 115, __FUNCTION__), 0 : 0));
  x = Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_empty (Type &x)
{
  x = Empty;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_deleted (Type x)
{
  return Empty != Deleted && x == Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_empty (Type x)
{
  return x == Empty;
}





template <typename Type>
struct pointer_hash
{
  typedef Type *value_type;
  typedef Type *compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &existing,
       const compare_type &candidate);
  static inline void mark_deleted (Type *&);
  static const bool empty_zero_p = true;
  static inline void mark_empty (Type *&);
  static inline bool is_deleted (Type *);
  static inline bool is_empty (Type *);
};

template <typename Type>
inline hashval_t
pointer_hash <Type>::hash (const value_type &candidate)
{


  return (hashval_t) ((intptr_t)candidate >> 3);
}

template <typename Type>
inline bool
pointer_hash <Type>::equal (const value_type &existing,
      const compare_type &candidate)
{
  return existing == candidate;
}

template <typename Type>
inline void
pointer_hash <Type>::mark_deleted (Type *&e)
{
  e = reinterpret_cast<Type *> (1);
}

template <typename Type>
inline void
pointer_hash <Type>::mark_empty (Type *&e)
{
  e = nullptr;
}

template <typename Type>
inline bool
pointer_hash <Type>::is_deleted (Type *e)
{
  return e == reinterpret_cast<Type *> (1);
}

template <typename Type>
inline bool
pointer_hash <Type>::is_empty (Type *e)
{
  return e == nullptr;
}




struct string_hash : pointer_hash <const char>
{
  static inline hashval_t hash (const char *);
  static inline bool equal (const char *, const char *);
};

inline hashval_t
string_hash::hash (const char *id)
{
  return htab_hash_string (id);
}

inline bool
string_hash::equal (const char *id1, const char *id2)
{
  return strcmp (id1, id2) == 0;
}



template<typename T>
struct ggc_remove
{
  static void remove (T &) {}

  static void
  ggc_mx (T &p)
  {
    extern void gt_ggc_mx (T &);
    gt_ggc_mx (p);
  }


  static void
  ggc_maybe_mx (T &p)
  {
    ggc_mx (p);
  }

  static void
  pch_nx (T &p)
  {
    extern void gt_pch_nx (T &);
    gt_pch_nx (p);
  }

  static void
  pch_nx (T &p, gt_pointer_operator op, void *cookie)
  {
    op (&p, cookie);
  }
};




template<typename T>
struct ggc_cache_remove : ggc_remove<T>
{

  static void ggc_maybe_mx (T &) {}

  static int
  keep_cache_entry (T &e)
  {
    return ggc_marked_p (e) ? -1 : 0;
  }
};




template <typename T>
struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T *> {};




template <typename T>
struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};




template <typename T>
struct delete_ptr_hash : pointer_hash <T>, typed_delete_remove <T> {};




template <typename T>
struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};





template <typename T>
struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};




struct nofree_string_hash : string_hash, typed_noop_remove <const char *> {};




template <typename T1, typename T2>
struct pair_hash
{
  typedef std::pair <typename T1::value_type,
       typename T2::value_type> value_type;
  typedef std::pair <typename T1::compare_type,
       typename T2::compare_type> compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &, const compare_type &);
  static inline void remove (value_type &);
  static inline void mark_deleted (value_type &);
  static const bool empty_zero_p = T1::empty_zero_p;
  static inline void mark_empty (value_type &);
  static inline bool is_deleted (const value_type &);
  static inline bool is_empty (const value_type &);
};

template <typename T1, typename T2>
inline hashval_t
pair_hash <T1, T2>::hash (const value_type &x)
{
  return iterative_hash_hashval_t (T1::hash (x.first), T2::hash (x.second));
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::equal (const value_type &x, const compare_type &y)
{
  return T1::equal (x.first, y.first) && T2::equal (x.second, y.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::remove (value_type &x)
{
  T1::remove (x.first);
  T2::remove (x.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_deleted (value_type &x)
{
  T1::mark_deleted (x.first);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_empty (value_type &x)
{
  T1::mark_empty (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_deleted (const value_type &x)
{
  return T1::is_deleted (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_empty (const value_type &x)
{
  return T1::is_empty (x.first);
}

template <typename T> struct default_hash_traits : T {};

template <typename T>
struct default_hash_traits <T *> : ggc_ptr_hash <T> {};
# 253 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h"
template <typename H, typename Value>
struct simple_hashmap_traits
{
  typedef typename H::value_type key_type;
  static const bool maybe_mx = true;
  static inline hashval_t hash (const key_type &);
  static inline bool equal_keys (const key_type &, const key_type &);
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = H::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename H, typename Value>
inline hashval_t
simple_hashmap_traits <H, Value>::hash (const key_type &h)
{
  return H::hash (h);
}

template <typename H, typename Value>
inline bool
simple_hashmap_traits <H, Value>::equal_keys (const key_type &k1,
           const key_type &k2)
{
  return H::equal (k1, k2);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::remove (T &entry)
{
  H::remove (entry.m_key);
  entry.m_value.~Value ();
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_empty (const T &entry)
{
  return H::is_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_deleted (const T &entry)
{
  return H::is_deleted (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_empty (T &entry)
{
  H::mark_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_deleted (T &entry)
{
  H::mark_deleted (entry.m_key);
}

template <typename H, typename Value>
struct simple_cache_map_traits: public simple_hashmap_traits<H,Value>
{
  static const bool maybe_mx = false;
};






template <typename Value>
struct unbounded_hashmap_traits
{
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = default_hash_traits <Value>::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::remove (T &entry)
{
  default_hash_traits <Value>::remove (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_empty (const T &entry)
{
  return default_hash_traits <Value>::is_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_deleted (const T &entry)
{
  return default_hash_traits <Value>::is_deleted (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_empty (T &entry)
{
  default_hash_traits <Value>::mark_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_deleted (T &entry)
{
  default_hash_traits <Value>::mark_deleted (entry.m_value);
}





template <typename Key, typename Value>
struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>
{
  typedef Key key_type;
  static inline hashval_t hash (Key);
  static inline bool equal_keys (Key, Key);
};

template <typename Key, typename Value>
inline hashval_t
unbounded_int_hashmap_traits <Key, Value>::hash (Key k)
{
  return k;
}

template <typename Key, typename Value>
inline bool
unbounded_int_hashmap_traits <Key, Value>::equal_keys (Key k1, Key k2)
{
  return k1 == k2;
}
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

template<typename, typename, typename> class hash_map;
template<typename, bool, typename> class hash_set;




template <typename Type>
struct xcallocator
{
  static Type *data_alloc (size_t count);
  static void data_free (Type *memory);
};




template <typename Type>
inline Type *
xcallocator <Type>::data_alloc (size_t count)
{
  return static_cast <Type *> (xcalloc (count, sizeof (Type)));
}




template <typename Type>
inline void
xcallocator <Type>::data_free (Type *memory)
{
  return ::free (memory);
}




struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;
  hashval_t shift;
};

extern struct prime_ent const prime_tab[];


extern unsigned int hash_table_sanitize_eq_limit;



extern unsigned int hash_table_higher_prime_index (unsigned long n)
   __attribute__ ((__pure__));

extern __attribute__ ((__noreturn__)) __attribute__ ((__cold__)) void hashtab_chk_error ();
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
inline hashval_t
mul_mod (hashval_t x, hashval_t y, hashval_t inv, int shift)
{
   hashval_t t1, t2, t3, t4, q, r;

   t1 = ((uint64_t)x * inv) >> 32;
   t2 = x - t1;
   t3 = t2 >> 1;
   t4 = t1 + t3;
   q = t4 >> shift;
   r = x - (q * y);

   return r;
}



inline hashval_t
hash_table_mod1 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 343, __FUNCTION__), 0 : 0));
  return mul_mod (hash, p->prime, p->inv, p->shift);
}



inline hashval_t
hash_table_mod2 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 353, __FUNCTION__), 0 : 0));
  return 1 + mul_mod (hash, p->prime - 2, p->inv_m2, p->shift);
}

class mem_usage;
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template <typename Descriptor, bool Lazy = false,
   template<typename Type> class Allocator = xcallocator>
class hash_table
{
  typedef typename Descriptor::value_type value_type;
  typedef typename Descriptor::compare_type compare_type;

public:
  explicit hash_table (size_t, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  explicit hash_table (const hash_table &, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  ~hash_table ();


  static hash_table *
  create_ggc (size_t n, bool sanitize_eq_and_hash = true )
  {
    hash_table *table = ggc_alloc<hash_table> ();
    new (table) hash_table (n, true, sanitize_eq_and_hash, 0,
       HASH_TABLE_ORIGIN );
    return table;
  }


  size_t size () const { return m_size; }


  size_t elements () const { return m_n_elements - m_n_deleted; }


  size_t elements_with_deleted () const { return m_n_elements; }


  void empty () { if (elements ()) empty_slow (); }


  bool is_empty () const { return elements () == 0; }




  void clear_slot (value_type *);




  value_type &find_with_hash (const compare_type &, hashval_t);


  value_type &find (const value_type &value)
    {
      return find_with_hash (value, Descriptor::hash (value));
    }

  value_type *find_slot (const value_type &value, insert_option insert)
    {
      return find_slot_with_hash (value, Descriptor::hash (value), insert);
    }
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
  value_type *find_slot_with_hash (const compare_type &comparable,
       hashval_t hash, enum insert_option insert);




  void remove_elt_with_hash (const compare_type &, hashval_t);



  void remove_elt (const value_type &value)
    {
      remove_elt_with_hash (value, Descriptor::hash (value));
    }




  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse_noresize (Argument argument);



  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse (Argument argument);

  class iterator
  {
  public:
    iterator () : m_slot (nullptr), m_limit (nullptr) {}

    iterator (value_type *slot, value_type *limit) :
      m_slot (slot), m_limit (limit) {}

    inline value_type &operator * () { return *m_slot; }
    void slide ();
    inline iterator &operator ++ ();
    bool operator != (const iterator &other) const
      {
 return m_slot != other.m_slot || m_limit != other.m_limit;
      }

  private:
    value_type *m_slot;
    value_type *m_limit;
  };

  iterator begin () const
    {
      if (Lazy && m_entries == nullptr)
 return iterator ();
      iterator iter (m_entries, m_entries + m_size);
      iter.slide ();
      return iter;
    }

  iterator end () const { return iterator (); }

  double collisions () const
    {
      return m_searches ? static_cast <double> (m_collisions) / m_searches : 0;
    }

private:

  void operator= (hash_table&);

  template<typename T> friend void gt_ggc_mx (hash_table<T> *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *);
  template<typename T> friend void
    hashtab_entry_note_pointers (void *, void *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void
  gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *,
           gt_pointer_operator, void *);

  template<typename T> friend void gt_cleare_cache (hash_table<T> *);

  void empty_slow ();

  value_type *alloc_entries (size_t n ) const;
  value_type *find_empty_slot_for_expand (hashval_t);
  void verify (const compare_type &comparable, hashval_t hash);
  bool too_empty_p (unsigned int);
  void expand ();
  static bool is_deleted (value_type &v)
  {
    return Descriptor::is_deleted (v);
  }

  static bool is_empty (value_type &v)
  {
    return Descriptor::is_empty (v);
  }

  static void mark_deleted (value_type &v)
  {
    Descriptor::mark_deleted (v);
  }

  static void mark_empty (value_type &v)
  {
    Descriptor::mark_empty (v);
  }


  typename Descriptor::value_type *m_entries;

  size_t m_size;


  size_t m_n_elements;


  size_t m_n_deleted;



  unsigned int m_searches;



  unsigned int m_collisions;



  unsigned int m_size_prime_index;


  bool m_ggc;


  bool m_sanitize_eq_and_hash;





  static const bool m_gather_mem_stats = false;

};




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
template<typename Key, typename Value,
  typename Traits = simple_hashmap_traits<default_hash_traits<Key>,
       Value> >
class hash_map;





class mem_location
{
public:

  inline
  mem_location () {}


  inline
  mem_location (mem_alloc_origin origin, bool ggc,
  const char *filename = nullptr, int line = 0,
  const char *function = nullptr):
    m_filename (filename), m_function (function), m_line (line), m_origin
    (origin), m_ggc (ggc) {}


  inline
  mem_location (mem_location &other): m_filename (other.m_filename),
    m_function (other.m_function), m_line (other.m_line),
    m_origin (other.m_origin), m_ggc (other.m_ggc) {}





  hashval_t
  hash ()
  {
    inchash::hash hash;

    hash.add_ptr (m_filename);
    hash.add_ptr (m_function);
    hash.add_int (m_line);

    return hash.end ();
  }


  int
  equal (const mem_location &other)
  {
    return m_filename == other.m_filename && m_function == other.m_function
      && m_line == other.m_line;
  }


  inline const char *
  get_trimmed_filename ()
  {
    const char *s1 = m_filename;
    const char *s2;

    while ((s2 = strstr (s1, "gcc/")))
      s1 = s2 + 4;

    return s1;
  }

  inline char *
  to_string ()
  {
    unsigned l = strlen (get_trimmed_filename ()) + strlen (m_function)
      + 30;

    char *s = ((char *) xmalloc (sizeof (char) * (l)));
    sprintf (s, "%s:%i (%s)", get_trimmed_filename (),
      m_line, m_function);

    s[((48) < (l - 1) ? (48) : (l - 1))] = '\0';

    return s;
  }


  static const char *
  get_origin_name (mem_alloc_origin origin)
  {
    return mem_alloc_origin_names[(unsigned) origin];
  }


  const char *m_filename;

  const char *m_function;

  int m_line;

  mem_alloc_origin m_origin;

  bool m_ggc;
};


class mem_usage
{
public:

  mem_usage (): m_allocated (0), m_times (0), m_peak (0), m_instances (1) {}


  mem_usage (size_t allocated, size_t times, size_t peak, size_t instances = 0):
    m_allocated (allocated), m_times (times), m_peak (peak),
    m_instances (instances) {}


  inline void
  register_overhead (size_t size)
  {
    m_allocated += size;
    m_times++;

    if (m_peak < m_allocated)
      m_peak = m_allocated;
  }


  inline void
  release_overhead (size_t size)
  {
    ((void)(!(size <= m_allocated) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h", 153, __FUNCTION__), 0 : 0));

    m_allocated -= size;
  }


  mem_usage
  operator+ (const mem_usage &second)
  {
    return mem_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_instances + second.m_instances);
  }


  inline bool
  operator== (const mem_usage &second) const
  {
    return (m_allocated == second.m_allocated
     && m_peak == second.m_peak
     && m_times == second.m_times);
  }


  inline bool
  operator< (const mem_usage &second) const
  {
    if (*this == second)
      return false;

    return (m_allocated == second.m_allocated ?
     (m_peak == second.m_peak ? m_times < second.m_times
      : m_peak < second.m_peak) : m_allocated < second.m_allocated);
  }


  static int
  compare (const void *first, const void *second)
  {
    typedef std::pair<mem_location *, mem_usage *> mem_pair_t;

    const mem_pair_t f = *(const mem_pair_t *)first;
    const mem_pair_t s = *(const mem_pair_t *)second;

    if (*f.second == *s.second)
      return 0;

    return *f.second < *s.second ? 1 : -1;
  }


  inline void
  dump (mem_location *loc, const mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s " "%" "9" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                             "l" "u" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                             "%c" ":%5.1f%%"
      "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
     "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
     "%c" "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
              "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
              "%c" ":%5.1f%%%10s\n",
      location_string, (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)(((m_peak) < 10 * 1024 ? (m_peak) : ((m_peak) < 10 * (1024 * 1024) ? (m_peak) / 1024 : (m_peak) / (1024 * 1024)))), ((m_peak) < 10 * 1024 ? ' ' : ((m_peak) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_times, total.m_times), loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  inline void
  dump_footer () const
  {
    fprintf (
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%s" "%" "53" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                         "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                         "%c" "%" "26" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                                   "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                                   "%c" "\n", "Total",
      (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')));
  }


  static inline float
  get_percent (size_t nominator, size_t denominator)
  {
    return denominator == 0 ? 0.0f : nominator * 100.0 / denominator;
  }


  static inline void
  print_dash_line (size_t count = 140)
  {
    while (count--)
      fputc ('-', 
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                 stderr
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                       );
    fputc ('\n', 
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                stderr
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                      );
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s %11s%16s%10s%17s\n", name, "Leak", "Peak",
      "Times", "Type");
  }


  size_t m_allocated;

  size_t m_times;

  size_t m_peak;

  size_t m_instances;
};



template <class T>
class mem_usage_pair
{
public:
  mem_usage_pair (T *usage_, size_t allocated_): usage (usage_),
  allocated (allocated_) {}

  T *usage;
  size_t allocated;
};


template <class T>
class mem_alloc_description
{
public:
  struct mem_location_hash : nofree_ptr_hash <mem_location>
  {
    static hashval_t
    hash (value_type l)
    {
      inchash::hash hstate;

      hstate.add_ptr ((const void *)l->m_filename);
      hstate.add_ptr (l->m_function);
      hstate.add_int (l->m_line);

      return hstate.end ();
    }

    static bool
    equal (value_type l1, value_type l2)
    {
      return (l1->m_filename == l2->m_filename
       && l1->m_function == l2->m_function
       && l1->m_line == l2->m_line);
    }
  };


  typedef hash_map <mem_location_hash, T *> mem_map_t;
  typedef hash_map <const void *, mem_usage_pair<T> > reverse_mem_map_t;
  typedef hash_map <const void *, std::pair<T *, size_t> > reverse_object_map_t;
  typedef std::pair <mem_location *, T *> mem_list_t;


  mem_alloc_description ();


  ~mem_alloc_description ();


  bool contains_descriptor_for_instance (const void *ptr);


  T *get_descriptor_for_instance (const void *ptr);



  T *register_descriptor (const void *ptr, mem_location *location);





  T *register_descriptor (const void *ptr, mem_alloc_origin origin,
     bool ggc, const char *name, int line,
     const char *function);



  T *register_instance_overhead (size_t size, const void *ptr);




  void register_object_overhead (T *usage, size_t size, const void *ptr);




  T *release_instance_overhead (void *ptr, size_t size,
    bool remove_from_map = false);


  void release_object_overhead (void *ptr);





  void unregister_descriptor (void *ptr);


  T get_sum (mem_alloc_origin origin);





  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length);



  void dump (mem_alloc_origin origin);


  reverse_object_map_t *m_reverse_object_map;

private:


  T *register_overhead (size_t size, mem_alloc_origin origin, const char *name,
   int line, const char *function, const void *ptr);


  mem_location m_location;


  mem_map_t *m_map;


  reverse_mem_map_t *m_reverse_map;
};



template <class T>
inline bool
mem_alloc_description<T>::contains_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr);
}



template <class T>
inline T*
mem_alloc_description<T>::get_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr) ? (*m_reverse_map->get (ptr)).usage : nullptr;
}




template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_location *location)
{
  T *usage = nullptr;

  T **slot = m_map->get (location);
  if (slot)
    {
      delete location;
      usage = *slot;
      usage->m_instances++;
    }
  else
    {
      usage = new T ();
      m_map->put (location, usage);
    }

  if (!m_reverse_map->get (ptr))
    m_reverse_map->put (ptr, mem_usage_pair<T> (usage, 0));

  return usage;
}






template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_alloc_origin origin,
            bool ggc,
            const char *filename,
            int line,
            const char *function)
{
  mem_location *l = new mem_location (origin, ggc, filename, line, function);
  return register_descriptor (ptr, l);
}




template <class T>
inline T*
mem_alloc_description<T>::register_instance_overhead (size_t size,
            const void *ptr)
{
  mem_usage_pair <T> *slot = m_reverse_map->get (ptr);
  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->register_overhead (size);

  return usage;
}





template <class T>
void
mem_alloc_description<T>::register_object_overhead (T *usage, size_t size,
          const void *ptr)
{


  m_reverse_object_map->put (ptr, std::pair<T *, size_t> (usage, size));
}




template <class T>
inline T*
mem_alloc_description<T>::register_overhead (size_t size,
          mem_alloc_origin origin,
          const char *filename,
          int line,
          const char *function,
          const void *ptr)
{
  T *usage = register_descriptor (ptr, origin, filename, line, function);
  usage->register_overhead (size);

  return usage;
}



template <class T>
inline T *
mem_alloc_description<T>::release_instance_overhead (void *ptr, size_t size,
           bool remove_from_map)
{
  mem_usage_pair<T> *slot = m_reverse_map->get (ptr);

  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->release_overhead (size);

  if (remove_from_map)
    m_reverse_map->remove (ptr);

  return usage;
}



template <class T>
inline void
mem_alloc_description<T>::release_object_overhead (void *ptr)
{
  std::pair <T *, size_t> *entry = m_reverse_object_map->get (ptr);
  entry->first->release_overhead (entry->second);
  m_reverse_object_map->remove (ptr);
}





template <class T>
inline void
mem_alloc_description<T>::unregister_descriptor (void *ptr)
{
  m_reverse_map->remove (ptr);
}



template <class T>
inline
mem_alloc_description<T>::mem_alloc_description ()
{
  m_map = new mem_map_t (13, false, false, false);
  m_reverse_map = new reverse_mem_map_t (13, false, false, false);
  m_reverse_object_map = new reverse_object_map_t (13, false, false, false);
}



template <class T>
inline
mem_alloc_description<T>::~mem_alloc_description ()
{
  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    {
      delete (*it).first;
      delete (*it).second;
    }

  delete m_map;
  delete m_reverse_map;
  delete m_reverse_object_map;
}






template <class T>
inline
typename mem_alloc_description<T>::mem_list_t *
mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length)
{


  size_t element_size = sizeof (mem_list_t);
  mem_list_t *list = ((mem_list_t *) xcalloc ((m_map->elements ()), sizeof (mem_list_t)));
  unsigned i = 0;

  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    if ((*it).first->m_origin == origin)
      list[i++] = std::pair<mem_location*, T*> (*it);

  gcc_qsort (list, i, element_size, T::compare);
  *length = i;

  return list;
}



template <class T>
inline T
mem_alloc_description<T>::get_sum (mem_alloc_origin origin)
{
  unsigned length;
  mem_list_t *list = get_list (origin, &length);
  T sum;

  for (unsigned i = 0; i < length; i++)
    sum = sum + *list[i].second;

  free ((void*) (list));

  return sum;
}




template <class T>
inline void
mem_alloc_description<T>::dump (mem_alloc_origin origin)
{
  unsigned length;

  fprintf (
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");

  mem_list_t *list = get_list (origin, &length);
  T total = get_sum (origin);

  T::print_dash_line ();
  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  for (int i = length - 1; i >= 0; i--)
    list[i].second->dump (list[i].first, total);
  T::print_dash_line ();

  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  total.dump_footer ();
  T::print_dash_line ();

  free ((void*) (list));

  fprintf (
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");
}
# 595 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h" 1
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h"
const size_t default_hash_map_size = 13;
template<typename KeyId, typename Value,
  typename Traits
                                        >
class hash_map
{
  typedef typename Traits::key_type Key;
  struct hash_entry
  {
    Key m_key;
    Value m_value;

    typedef hash_entry value_type;
    typedef Key compare_type;

    static hashval_t hash (const hash_entry &e)
      {
        return Traits::hash (e.m_key);
      }

    static bool equal (const hash_entry &a, const Key &b)
        {
   return Traits::equal_keys (a.m_key, b);
        }

    static void remove (hash_entry &e) { Traits::remove (e); }

    static void mark_deleted (hash_entry &e) { Traits::mark_deleted (e); }

    static bool is_deleted (const hash_entry &e)
      {
        return Traits::is_deleted (e);
      }

    static const bool empty_zero_p = Traits::empty_zero_p;
    static void mark_empty (hash_entry &e) { Traits::mark_empty (e); }
    static bool is_empty (const hash_entry &e) { return Traits::is_empty (e); }

    static void ggc_mx (hash_entry &e)
      {
 gt_ggc_mx (e.m_key);
 gt_ggc_mx (e.m_value);
      }

    static void ggc_maybe_mx (hash_entry &e)
      {
 if (Traits::maybe_mx)
   ggc_mx (e);
      }

    static void pch_nx (hash_entry &e)
      {
 gt_pch_nx (e.m_key);
 gt_pch_nx (e.m_value);
      }

    static void pch_nx (hash_entry &e, gt_pointer_operator op, void *c)
      {
 pch_nx_helper (e.m_key, op, c);
 pch_nx_helper (e.m_value, op, c);
      }

    static int keep_cache_entry (hash_entry &e)
      {
 return ggc_marked_p (e.m_key);
      }

  private:
    template<typename T>
    static void
      pch_nx_helper (T &x, gt_pointer_operator op, void *cookie)
 {
   gt_pch_nx (&x, op, cookie);
 }

    static void
      pch_nx_helper (int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (unsigned int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (bool, gt_pointer_operator, void *)
 {
 }

    template<typename T>
      static void
      pch_nx_helper (T *&x, gt_pointer_operator op, void *cookie)
 {
   op (&x, cookie);
 }
  };

public:
  explicit hash_map (size_t n = default_hash_map_size, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (n, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN )
  {
  }

  explicit hash_map (const hash_map &h, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (h.m_table, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN ) {}


  static hash_map *create_ggc (size_t size = default_hash_map_size,
          bool gather_mem_stats = 0
          )
    {
      hash_map *map = ggc_alloc<hash_map> ();
      new (map) hash_map (size, true, true, gather_mem_stats );
      return map;
    }





  bool put (const Key &k, const Value &v)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = hash_entry::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *) &e->m_value) Value (v);
 }
      else
 e->m_value = v;

      return !ins;
    }




  Value *get (const Key &k)
    {
      hash_entry &e = m_table.find_with_hash (k, Traits::hash (k));
      return Traits::is_empty (e) ? nullptr : &e.m_value;
    }





  Value &get_or_insert (const Key &k, bool *existed = nullptr)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = Traits::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *)&e->m_value) Value ();
 }

      if (existed != nullptr)
 *existed = !ins;

      return e->m_value;
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       const Value &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f ((*iter).m_key, (*iter).m_value, a);
    }

  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       Value *, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 if (!f ((*iter).m_key, &(*iter).m_value, a))
   break;
    }

  size_t elements () const { return m_table.elements (); }

  void empty () { m_table.empty(); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<hash_entry>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
    {
      ++m_iter;
      return *this;
    }




    class reference_pair {
    public:
      const Key &first;
      Value &second;

      reference_pair (const Key &key, Value &value) : first (key), second (value) {}

      template <typename K, typename V>
      operator std::pair<K, V> () const { return std::pair<K, V> (first, second); }
    };

    reference_pair operator* ()
    {
      hash_entry &e = *m_iter;
      return reference_pair (e.m_key, e.m_value);
    }

    bool
    operator != (const iterator &other) const
    {
      return m_iter != other.m_iter;
    }

  private:
    typename hash_table<hash_entry>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }

private:

  template<typename T, typename U, typename V> friend void gt_ggc_mx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void gt_cleare_cache (hash_map<T, U, V> *);

  hash_table<hash_entry> m_table;
};



template<typename K, typename V, typename H>
static inline void
gt_ggc_mx (hash_map<K, V, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_cleare_cache (hash_map<K, V, H> *h)
{
  if (h)
    gt_cleare_cache (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}

enum hm_alloc { hm_heap = false, hm_ggc = true };
template<bool ggc, typename K, typename V, typename H>
inline hash_map<K,V,H> *
hash_map_maybe_create (hash_map<K,V,H> *&h,
         size_t size = default_hash_map_size)
{
  if (!h)
    {
      if (ggc)
 h = hash_map<K,V,H>::create_ggc (size);
      else
 h = new hash_map<K,V,H> (size);
    }
  return h;
}


template<typename K, typename V, typename H>
inline V*
hash_map_safe_get (hash_map<K,V,H> *h, const K& k)
{
  return h ? h->get (k) : nullptr;
}


template<bool ggc, typename K, typename V, typename H>
inline V&
hash_map_safe_get_or_insert (hash_map<K,V,H> *&h, const K& k, bool *e = nullptr,
        size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->get_or_insert (k, e);
}


template<bool ggc, typename K, typename V, typename H>
inline bool
hash_map_safe_put (hash_map<K,V,H> *&h, const K& k, const V& v,
     size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->put (k, v);
}
# 596 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

extern mem_alloc_description<mem_usage>& hash_table_usage (void);


extern void dump_hash_table_loc_statistics (void);

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (size_t size, bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (0), m_n_deleted (0), m_searches (0), m_collisions (0),
  m_ggc (ggc), m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  unsigned int size_prime_index;

  size_prime_index = hash_table_higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
          , 0,0,0);

  if (Lazy)
    m_entries = nullptr;
  else
    m_entries = alloc_entries (size );
  m_size = size;
  m_size_prime_index = size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (const hash_table &h,
           bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (h.m_n_elements), m_n_deleted (h.m_n_deleted),
  m_searches (0), m_collisions (0), m_ggc (ggc),
  m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  size_t size = h.m_size;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
       , 0,0,0);

  if (Lazy && h.m_entries == nullptr)
    m_entries = nullptr;
  else
    {
      value_type *nentries = alloc_entries (size );
      for (size_t i = 0; i < size; ++i)
 {
   value_type &entry = h.m_entries[i];
   if (is_deleted (entry))
     mark_deleted (nentries[i]);
   else if (!is_empty (entry))
     new ((void*) (nentries + i)) value_type (entry);
 }
      m_entries = nentries;
    }
  m_size = size;
  m_size_prime_index = h.m_size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::~hash_table ()
{
  if (!Lazy || m_entries)
    {
      for (size_t i = m_size - 1; i < m_size; i--)
 if (!is_empty (m_entries[i]) && !is_deleted (m_entries[i]))
   Descriptor::remove (m_entries[i]);

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);
      if (m_gather_mem_stats)
 hash_table_usage ().release_instance_overhead (this,
             sizeof (value_type)
             * m_size, true);
    }
  else if (m_gather_mem_stats)
    hash_table_usage ().unregister_descriptor (this);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::alloc_entries (size_t n ) const
{
  value_type *nentries;

  if (m_gather_mem_stats)
    hash_table_usage ().register_instance_overhead (sizeof (value_type) * n, this);

  if (!m_ggc)
    nentries = Allocator <value_type> ::data_alloc (n);
  else
    nentries = ::ggc_cleared_vec_alloc<value_type> (n );

  ((void)(!(nentries != nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 715, __FUNCTION__), 0 : 0));
  if (!Descriptor::empty_zero_p)
    for (size_t i = 0; i < n; i++)
      mark_empty (nentries[i]);

  return nentries;
}
# 730 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::find_empty_slot_for_expand (hashval_t hash)
{
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  size_t size = m_size;
  value_type *slot = m_entries + index;
  hashval_t hash2;

  if (is_empty (*slot))
    return slot;
  ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 743, __FUNCTION__), 0 : 0));

  hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      index += hash2;
      if (index >= size)
        index -= size;

      slot = m_entries + index;
      if (is_empty (*slot))
        return slot;
      ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 755, __FUNCTION__), 0 : 0));
    }
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline bool
hash_table<Descriptor, Lazy, Allocator>::too_empty_p (unsigned int elts)
{
  return elts * 8 < m_size && m_size > 32;
}
# 776 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::expand ()
{
  value_type *oentries = m_entries;
  unsigned int oindex = m_size_prime_index;
  size_t osize = size ();
  value_type *olimit = oentries + osize;
  size_t elts = elements ();



  unsigned int nindex;
  size_t nsize;
  if (elts * 2 > osize || too_empty_p (elts))
    {
      nindex = hash_table_higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
  else
    {
      nindex = oindex;
      nsize = osize;
    }

  value_type *nentries = alloc_entries (nsize);

  if (m_gather_mem_stats)
    hash_table_usage ().release_instance_overhead (this, sizeof (value_type)
          * osize);

  m_entries = nentries;
  m_size = nsize;
  m_size_prime_index = nindex;
  m_n_elements -= m_n_deleted;
  m_n_deleted = 0;

  value_type *p = oentries;
  do
    {
      value_type &x = *p;

      if (!is_empty (x) && !is_deleted (x))
        {
          value_type *q = find_empty_slot_for_expand (Descriptor::hash (x));
   new ((void*) q) value_type (x);
        }

      p++;
    }
  while (p < olimit);

  if (!m_ggc)
    Allocator <value_type> ::data_free (oentries);
  else
    ggc_free (oentries);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::empty_slow ()
{
  size_t size = m_size;
  size_t nsize = size;
  value_type *entries = m_entries;

  for (size_t i = size - 1; i < size; i--)
    if (!is_empty (entries[i]) && !is_deleted (entries[i]))
      Descriptor::remove (entries[i]);


  if (size > 1024*1024 / sizeof (value_type))
    nsize = 1024 / sizeof (value_type);
  else if (too_empty_p (m_n_elements))
    nsize = m_n_elements * 2;

  if (nsize != size)
    {
      unsigned int nindex = hash_table_higher_prime_index (nsize);

      nsize = prime_tab[nindex].prime;

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);

      m_entries = alloc_entries (nsize);
      m_size = nsize;
      m_size_prime_index = nindex;
    }
  else if (Descriptor::empty_zero_p)
    memset ((void *) entries, 0, size * sizeof (value_type));
  else
    for (size_t i = 0; i < size; i++)
      mark_empty (entries[i]);

  m_n_deleted = 0;
  m_n_elements = 0;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::clear_slot (value_type *slot)
{
  ((void)(!(!(slot < m_entries || slot >= m_entries + size () || is_empty (*slot) || is_deleted (*slot))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 890, __FUNCTION__), 0 : 0))
                                                      ;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type &
hash_table<Descriptor, Lazy, Allocator>
::find_with_hash (const compare_type &comparable, hashval_t hash)
{
  m_searches++;
  size_t size = m_size;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);

  if (Lazy && m_entries == nullptr)
    m_entries = alloc_entries (size);


  if (m_sanitize_eq_and_hash)
    verify (comparable, hash);


  value_type *entry = &m_entries[index];
  if (is_empty (*entry)
      || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
    return *entry;

  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
        index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry)
          || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
 return *entry;
    }
}
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy, Allocator>
::find_slot_with_hash (const compare_type &comparable, hashval_t hash,
         enum insert_option insert)
{
  if (Lazy && m_entries == nullptr)
    {
      if (insert == INSERT)
 m_entries = alloc_entries (m_size);
      else
 return nullptr;
    }
  if (insert == INSERT && m_size * 3 <= m_n_elements * 4)
    expand ();


  if (m_sanitize_eq_and_hash)
    verify (comparable, hash);


  m_searches++;
  value_type *first_deleted_slot = nullptr;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  value_type *entry = &m_entries[index];
  size_t size = m_size;
  if (is_empty (*entry))
    goto empty_entry;
  else if (is_deleted (*entry))
    first_deleted_slot = &m_entries[index];
  else if (Descriptor::equal (*entry, comparable))
    return &m_entries[index];

  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
 index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry))
 goto empty_entry;
      else if (is_deleted (*entry))
 {
   if (!first_deleted_slot)
     first_deleted_slot = &m_entries[index];
 }
      else if (Descriptor::equal (*entry, comparable))
 return &m_entries[index];
    }

 empty_entry:
  if (insert == NO_INSERT)
    return nullptr;

  if (first_deleted_slot)
    {
      m_n_deleted--;
      mark_empty (*first_deleted_slot);
      return first_deleted_slot;
    }

  m_n_elements++;
  return &m_entries[index];
}




template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::verify (const compare_type &comparable, hashval_t hash)
{
  for (size_t i = 0; i < ((hash_table_sanitize_eq_limit) < (m_size) ? (hash_table_sanitize_eq_limit) : (m_size)); i++)
    {
      value_type *entry = &m_entries[i];
      if (!is_empty (*entry) && !is_deleted (*entry)
   && hash != Descriptor::hash (*entry)
   && Descriptor::equal (*entry, comparable))
 hashtab_chk_error ();
    }
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::remove_elt_with_hash (const compare_type &comparable, hashval_t hash)
{
  value_type *slot = find_slot_with_hash (comparable, hash, NO_INSERT);
  if (slot == nullptr)
    return;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
   template<typename Type> class Allocator>
template<typename Argument,
  int (*Callback)
  (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
  Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse_noresize (Argument argument)
{
  if (Lazy && m_entries == nullptr)
    return;

  value_type *slot = m_entries;
  value_type *limit = slot + size ();

  do
    {
      value_type &x = *slot;

      if (!is_empty (x) && !is_deleted (x))
        if (! Callback (slot, argument))
          break;
    }
  while (++slot < limit);
}




template <typename Descriptor, bool Lazy,
   template <typename Type> class Allocator>
template <typename Argument,
   int (*Callback)
   (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
   Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse (Argument argument)
{
  if (too_empty_p (elements ()) && (!Lazy || m_entries))
    expand ();

  traverse_noresize <Argument, Callback> (argument);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::iterator::slide ()
{
  for ( ; m_slot < m_limit; ++m_slot )
    {
      value_type &x = *m_slot;
      if (!is_empty (x) && !is_deleted (x))
        return;
    }
  m_slot = nullptr;
  m_limit = nullptr;
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::iterator &
hash_table<Descriptor, Lazy, Allocator>::iterator::operator ++ ()
{
  ++m_slot;
  slide ();
  return *this;
}
# 1146 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename E>
static inline void
gt_ggc_mx (hash_table<E> *h)
{
  typedef hash_table<E> table;

  if (!((h->m_entries) != nullptr && ((void *) (h->m_entries)) != (void *) 1 && ! ggc_set_mark (h->m_entries)))
    return;

  for (size_t i = 0; i < h->m_size; i++)
    {
      if (table::is_empty (h->m_entries[i])
   || table::is_deleted (h->m_entries[i]))
 continue;



      E::ggc_maybe_mx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
hashtab_entry_note_pointers (void *obj, void *h, gt_pointer_operator op,
        void *cookie)
{
  hash_table<D> *map = static_cast<hash_table<D> *> (h);
  ((void)(!(map->m_entries == obj) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1173, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < map->m_size; i++)
    {
      typedef hash_table<D> table;
      if (table::is_empty (map->m_entries[i])
   || table::is_deleted (map->m_entries[i]))
 continue;

      D::pch_nx (map->m_entries[i], op, cookie);
    }
}

template<typename D>
static void
gt_pch_nx (hash_table<D> *h)
{
  bool success
    = gt_pch_note_object (h->m_entries, h, hashtab_entry_note_pointers<D>);
  ((void)(!(success) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1191, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < h->m_size; i++)
    {
      if (hash_table<D>::is_empty (h->m_entries[i])
   || hash_table<D>::is_deleted (h->m_entries[i]))
 continue;

      D::pch_nx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
gt_pch_nx (hash_table<D> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_entries, cookie);
}

template<typename H>
inline void
gt_cleare_cache (hash_table<H> *h)
{
  typedef hash_table<H> table;
  if (!h)
    return;

  for (typename table::iterator iter = h->begin (); iter != h->end (); ++iter)
    if (!table::is_empty (*iter) && !table::is_deleted (*iter))
      {
 int res = H::keep_cache_entry (*iter);
 if (res == 0)
   h->clear_slot (&*iter);
 else if (res != -1)
   H::ggc_mx (*iter);
      }
}
# 477 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename KeyId, bool Lazy = false,
  typename Traits = default_hash_traits<KeyId> >
class hash_set
{
public:
  typedef typename Traits::value_type Key;
  explicit hash_set (size_t n = 13, bool ggc = false )
    : m_table (n, ggc, true, 0, HASH_SET_ORIGIN ) {}



  static hash_set *
  create_ggc (size_t n)
    {
      hash_set *set = ggc_alloc<hash_set> ();
      new (set) hash_set (n, true);
      return set;
    }




  bool add (const Key &k)
    {
      Key *e = m_table.find_slot_with_hash (k, Traits::hash (k), INSERT);
      bool existed = !Traits::is_empty (*e);
      if (!existed)
 new (e) Key (k);

      return existed;
    }



  bool contains (const Key &k)
    {
      if (Lazy)
 return (m_table.find_slot_with_hash (k, Traits::hash (k), NO_INSERT)
  != nullptr);
      Key &e = m_table.find_with_hash (k, Traits::hash (k));
      return !Traits::is_empty (e);
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::value_type &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<Traits, Lazy>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f (*iter, a);
    }



  size_t elements () const { return m_table.elements (); }



  void empty () { m_table.empty (); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<Traits,
       Lazy>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
      {
 ++m_iter;
 return *this;
      }

    Key
    operator* ()
      {
 return *m_iter;
      }

    bool
    operator != (const iterator &other) const
      {
 return m_iter != other.m_iter;
      }

  private:
    typename hash_table<Traits, Lazy>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }


private:

  template<typename T, typename U>
  friend void gt_ggc_mx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);

  hash_table<Traits, Lazy> m_table;
};
# 161 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename T>
void
debug_helper (hash_set<T> &ref)
{
  for (typename hash_set<T>::iterator it = ref.begin ();
       it != ref.end (); ++it)
    {
      debug_slim (*it);
      fputc ('\n', 
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 3 4
                  stderr
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
                        );
    }
}
# 191 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename K, typename H>
static inline void
gt_ggc_mx (hash_set<K, false, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}
# 478 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h" 1
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int linenum_type;


typedef long long linenum_arith_t;



inline int compare (linenum_type lhs, linenum_type rhs)
{


  linenum_arith_t diff = (linenum_arith_t)lhs - (linenum_arith_t)rhs;
  if (diff)
    return diff > 0 ? 1 : -1;
  return 0;
}


enum lc_reason
{
  LC_ENTER = 0,
  LC_LEAVE,
  LC_RENAME,
  LC_RENAME_VERBATIM,
  LC_ENTER_MACRO,

  LC_HWM
};
# 291 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int location_t;




const unsigned int LINE_MAP_MAX_COLUMN_NUMBER = (1U << 12);




const location_t LINE_MAP_MAX_LOCATION_WITH_PACKED_RANGES = 0x50000000;




const location_t LINE_MAP_MAX_LOCATION_WITH_COLS = 0x60000000;


const location_t LINE_MAP_MAX_LOCATION = 0x70000000;
# 319 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct source_range
{
  location_t m_start;
  location_t m_finish;






  static source_range from_location (location_t loc)
  {
    source_range result;
    result.m_start = loc;
    result.m_finish = loc;
    return result;
  }


  static source_range from_locations (location_t start,
          location_t finish)
  {
    source_range result;
    result.m_start = start;
    result.m_finish = finish;
    return result;
  }
};


typedef void *(*line_map_realloc) (void *, size_t);



typedef size_t (*line_map_round_alloc_size_func) (size_t);
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map {
  location_t start_location;


};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map_ordinary : public line_map {





  enum lc_reason reason : 8;





  unsigned char sysp;



  unsigned int m_column_and_range_bits : 8;
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  unsigned int m_range_bits : 8;



  const char *to_file;
  linenum_type to_line;




  location_t included_from;


};



const location_t MAX_LOCATION_T = 0x7FFFFFFF;

struct cpp_hashnode;






struct line_map_macro : public line_map {



  unsigned int n_tokens;




  struct cpp_hashnode *
   


    macro;
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  location_t * macro_locations;






  location_t expansion;


};
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
inline bool
IS_ORDINARY_LOC (location_t loc)
{
  return loc < LINE_MAP_MAX_LOCATION;
}

inline bool
IS_ADHOC_LOC (location_t loc)
{
  return loc > MAX_LOCATION_T;
}

inline bool
IS_MACRO_LOC (location_t loc)
{
  return !IS_ORDINARY_LOC (loc) && !IS_ADHOC_LOC (loc);
}



inline bool
MAP_ORDINARY_P (const line_map *map)
{
  return IS_ORDINARY_LOC (map->start_location);
}



bool
linemap_macro_expansion_map_p (const line_map *);





inline line_map_ordinary *
linemap_check_ordinary (line_map *map)
{
  do { if (! (MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 604, __FUNCTION__); } while (0);
  return (line_map_ordinary *)map;
}





inline const line_map_ordinary *
linemap_check_ordinary (const line_map *map)
{
  do { if (! (MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 615, __FUNCTION__); } while (0);
  return (const line_map_ordinary *)map;
}




inline line_map_macro *linemap_check_macro (line_map *map)
{
  do { if (! (!MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 624, __FUNCTION__); } while (0);
  return (line_map_macro *)map;
}




inline const line_map_macro *
linemap_check_macro (const line_map *map)
{
  do { if (! (!MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 634, __FUNCTION__); } while (0);
  return (const line_map_macro *)map;
}



inline location_t
MAP_START_LOCATION (const line_map *map)
{
  return map->start_location;
}



inline linenum_type
ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}






inline unsigned char
ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}



inline const char *
ORDINARY_MAP_FILE_NAME (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}



inline cpp_hashnode *
MACRO_MAP_MACRO (const line_map_macro *macro_map)
{
  return macro_map->macro;
}




inline unsigned int
MACRO_MAP_NUM_MACRO_TOKENS (const line_map_macro *macro_map)
{
  return macro_map->n_tokens;
}




inline location_t *
MACRO_MAP_LOCATIONS (const line_map_macro *macro_map)
{
  return macro_map->macro_locations;
}



inline location_t
MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map_macro *macro_map)
{
  return macro_map->expansion;
}
# 714 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct maps_info_ordinary {



  line_map_ordinary * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};

struct maps_info_macro {


  line_map_macro * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};



struct location_adhoc_data {
  location_t locus;
  source_range src_range;
  void * data;
};

struct htab;
# 765 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct location_adhoc_data_map {
  struct htab * htab;
  location_t curr_loc;
  unsigned int allocated;
  struct location_adhoc_data *data;
};


class line_maps {
public:

  ~line_maps ();

  maps_info_ordinary info_ordinary;

  maps_info_macro info_macro;


  unsigned int depth;


  bool trace_includes;


  location_t highest_location;


  location_t highest_line;



  unsigned int max_column_hint;


  line_map_realloc reallocator;



  line_map_round_alloc_size_func round_alloc_size;

  struct location_adhoc_data_map location_adhoc_data_map;



  location_t builtin_location;


  bool seen_line_directive;


  unsigned int default_range_bits;

  unsigned int num_optimized_ranges;
  unsigned int num_unoptimized_ranges;
};



inline unsigned int
LINEMAPS_ALLOCATED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int &
LINEMAPS_ALLOCATED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int
LINEMAPS_USED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}



inline unsigned int &
LINEMAPS_USED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}




inline unsigned int &
LINEMAPS_CACHE (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.cache;
  else
    return set->info_ordinary.cache;
}


inline line_map *
LINEMAPS_MAP_AT (const line_maps *set, bool map_kind, int index)
{
  if (map_kind)
    return &set->info_macro.maps[index];
  else
    return &set->info_ordinary.maps[index];
}




inline line_map *
LINEMAPS_LAST_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_USED (set, map_kind) - 1);
}




inline line_map *
LINEMAPS_LAST_ALLOCATED_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_ALLOCATED (set, map_kind) - 1);
}



inline line_map_ordinary *
LINEMAPS_ORDINARY_MAPS (const line_maps *set)
{
  return set->info_ordinary.maps;
}


inline line_map_ordinary *
LINEMAPS_ORDINARY_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, false))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 919, __FUNCTION__); } while (0)
                                                        ;
  return (line_map_ordinary *)LINEMAPS_MAP_AT (set, false, index);
}



inline unsigned int
LINEMAPS_ORDINARY_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, false);
}


inline unsigned int
LINEMAPS_ORDINARY_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, false);
}



inline unsigned int &
LINEMAPS_ORDINARY_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_MAP (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_ALLOCATED_MAP (set, false);
}



inline line_map_macro *
LINEMAPS_MACRO_MAPS (const line_maps *set)
{
  return set->info_macro.maps;
}


inline line_map_macro *
LINEMAPS_MACRO_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, true))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 975, __FUNCTION__); } while (0)
                                                       ;
  return (line_map_macro *)LINEMAPS_MAP_AT (set, true, index);
}



inline unsigned int
LINEMAPS_MACRO_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, true);
}


inline unsigned int
LINEMAPS_MACRO_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, true);
}



inline unsigned int &
LINEMAPS_MACRO_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, true);
}


inline line_map_macro *
LINEMAPS_LAST_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_MAP (set, true);
}



inline location_t
LINEMAPS_MACRO_LOWEST_LOCATION (const line_maps *set)
{
  return LINEMAPS_MACRO_USED (set)
         ? MAP_START_LOCATION (LINEMAPS_LAST_MACRO_MAP (set))
         : MAX_LOCATION_T + 1;
}


inline line_map_macro *
LINEMAPS_LAST_ALLOCATED_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_ALLOCATED_MAP (set, true);
}

extern location_t get_combined_adhoc_loc (line_maps *, location_t,
       source_range, void *);
extern void *get_data_from_adhoc_loc (const line_maps *, location_t);
extern location_t get_location_from_adhoc_loc (const line_maps *,
            location_t);

extern source_range get_range_from_loc (line_maps *set, location_t loc);




bool
pure_location_p (line_maps *set, location_t loc);




extern location_t get_pure_location (line_maps *set, location_t loc);



inline location_t
COMBINE_LOCATION_DATA (class line_maps *set,
         location_t loc,
         source_range src_range,
         void *block)
{
  return get_combined_adhoc_loc (set, loc, src_range, block);
}

extern void rebuild_location_adhoc_htab (class line_maps *);





extern void linemap_init (class line_maps *set,
     location_t builtin_location);



extern void linemap_check_files_exited (class line_maps *);







extern location_t linemap_line_start
(class line_maps *set, linenum_type to_line, unsigned int max_column_hint);
# 1092 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
extern const line_map *linemap_add
  (class line_maps *, enum lc_reason, unsigned int sysp,
   const char *to_file, linenum_type to_line);







extern const line_map *linemap_lookup
  (const line_maps *, location_t);



bool linemap_tracks_macro_expansion_locs_p (class line_maps *);


const char* linemap_map_get_macro_name (const line_map_macro *);
# 1121 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
int linemap_location_in_system_header_p (class line_maps *,
      location_t);



bool linemap_location_from_macro_expansion_p (const line_maps *,
           location_t);



bool linemap_location_from_macro_definition_p (class line_maps *,
            location_t);






extern location_t linemap_macro_map_loc_unwind_toward_spelling
  (line_maps *set, const line_map_macro *macro_map, location_t location);




const location_t RESERVED_LOCATION_COUNT = 2;


inline linenum_type
SOURCE_LINE (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   >> ord_map->m_column_and_range_bits) + ord_map->to_line;
}


inline linenum_type
SOURCE_COLUMN (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   & ((1 << ord_map->m_column_and_range_bits) - 1)) >> ord_map->m_range_bits;
}


inline location_t
linemap_included_from (const line_map_ordinary *ord_map)
{
  return ord_map->included_from;
}


const line_map_ordinary *linemap_included_from_linemap
  (line_maps *set, const line_map_ordinary *map);



inline bool
MAIN_FILE_P (const line_map_ordinary *ord_map)
{
  return ord_map->included_from == 0;
}





extern location_t
linemap_position_for_column (class line_maps *, unsigned int);



location_t
linemap_position_for_line_and_column (line_maps *set,
          const line_map_ordinary *,
          linenum_type, unsigned int);




location_t
linemap_position_for_loc_and_offset (class line_maps *set,
         location_t loc,
         unsigned int offset);


inline const char *
LINEMAP_FILE (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}


inline linenum_type
LINEMAP_LINE (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}





inline unsigned char
LINEMAP_SYSP (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}





int linemap_compare_locations (class line_maps *set,
          location_t pre,
          location_t post);




inline bool
linemap_location_before_p (class line_maps *set,
      location_t loc_a,
      location_t loc_b)
{
  return linemap_compare_locations (set, loc_a, loc_b) >= 0;
}

typedef struct
{

  const char *file;


  int line;

  int column;

  void *data;


  bool sysp;
} expanded_location;

class range_label;
# 1279 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
enum range_display_kind
{

  SHOW_RANGE_WITH_CARET,



  SHOW_RANGE_WITHOUT_CARET,





  SHOW_LINES_WITHOUT_RANGE
};





struct location_range
{
  location_t m_loc;

  enum range_display_kind m_range_display_kind;


  const range_label *m_label;
};
# 1320 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
template <typename T, int NUM_EMBEDDED>
class semi_embedded_vec
{
 public:
  semi_embedded_vec ();
  ~semi_embedded_vec ();

  unsigned int count () const { return m_num; }
  T& operator[] (int idx);
  const T& operator[] (int idx) const;

  void push (const T&);
  void truncate (int len);

 private:
  int m_num;
  T m_embedded[NUM_EMBEDDED];
  int m_alloc;
  T *m_extra;
};




template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::semi_embedded_vec ()
: m_num (0), m_alloc (0), m_extra (nullptr)
{
}



template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::~semi_embedded_vec ()
{
  free ((void*) (m_extra));
}



template <typename T, int NUM_EMBEDDED>
T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx)
{
  do { if (! (idx < m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1364, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != nullptr)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1369, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
const T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx) const
{
  do { if (! (idx < m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1380, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != nullptr)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1385, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::push (const T& value)
{
  int idx = m_num++;
  if (idx < NUM_EMBEDDED)
    m_embedded[idx] = value;
  else
    {

      idx -= NUM_EMBEDDED;
      if (nullptr == m_extra)
 {
   do { if (! (m_alloc == 0)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1405, __FUNCTION__); } while (0);
   m_alloc = 16;
   m_extra = ((T *) xmalloc (sizeof (T) * (m_alloc)));
 }
      else if (idx >= m_alloc)
 {
   do { if (! (m_alloc > 0)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1411, __FUNCTION__); } while (0);
   m_alloc *= 2;
   m_extra = ((T *) xrealloc ((void *) (m_extra), sizeof (T) * (m_alloc)));
 }
      do { if (! (m_extra)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1415, __FUNCTION__); } while (0);
      do { if (! (idx < m_alloc)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1416, __FUNCTION__); } while (0);
      m_extra[idx] = value;
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::truncate (int len)
{
  do { if (! (len <= m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1427, __FUNCTION__); } while (0);
  m_num = len;
}

class fixit_hint;
class diagnostic_path;
# 1609 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class rich_location
{
 public:



  rich_location (line_maps *set, location_t loc,
   const range_label *label = nullptr);


  ~rich_location ();


  location_t get_loc () const { return get_loc (0); }
  location_t get_loc (unsigned int idx) const;

  void
  add_range (location_t loc,
      enum range_display_kind range_display_kind
        = SHOW_RANGE_WITHOUT_CARET,
      const range_label *label = nullptr);

  void
  set_range (unsigned int idx, location_t loc,
      enum range_display_kind range_display_kind);

  unsigned int get_num_locations () const { return m_ranges.count (); }

  const location_range *get_range (unsigned int idx) const;
  location_range *get_range (unsigned int idx);

  expanded_location get_expanded_location (unsigned int idx);

  void
  override_column (int column);







  void
  add_fixit_insert_before (const char *new_content);


  void
  add_fixit_insert_before (location_t where,
      const char *new_content);



  void
  add_fixit_insert_after (const char *new_content);


  void
  add_fixit_insert_after (location_t where,
     const char *new_content);




  void
  add_fixit_remove ();



  void
  add_fixit_remove (location_t where);


  void
  add_fixit_remove (source_range src_range);




  void
  add_fixit_replace (const char *new_content);



  void
  add_fixit_replace (location_t where,
       const char *new_content);



  void
  add_fixit_replace (source_range src_range,
       const char *new_content);

  unsigned int get_num_fixit_hints () const { return m_fixit_hints.count (); }
  fixit_hint *get_fixit_hint (int idx) const { return m_fixit_hints[idx]; }
  fixit_hint *get_last_fixit_hint () const;
  bool seen_impossible_fixit_p () const { return m_seen_impossible_fixit; }
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  void fixits_cannot_be_auto_applied ()
  {
    m_fixits_cannot_be_auto_applied = true;
  }

  bool fixits_can_be_auto_applied_p () const
  {
    return !m_fixits_cannot_be_auto_applied;
  }


  const diagnostic_path *get_path () const { return m_path; }
  void set_path (const diagnostic_path *path) { m_path = path; }

private:
  bool reject_impossible_fixit (location_t where);
  void stop_supporting_fixits ();
  void maybe_add_fixit (location_t start,
   location_t next_loc,
   const char *new_content);

public:
  static const int STATICALLY_ALLOCATED_RANGES = 3;

protected:
  line_maps *m_line_table;
  semi_embedded_vec <location_range, STATICALLY_ALLOCATED_RANGES> m_ranges;

  int m_column_override;

  bool m_have_expanded_location;
  expanded_location m_expanded_location;

  static const int MAX_STATIC_FIXIT_HINTS = 2;
  semi_embedded_vec <fixit_hint *, MAX_STATIC_FIXIT_HINTS> m_fixit_hints;

  bool m_seen_impossible_fixit;
  bool m_fixits_cannot_be_auto_applied;

  const diagnostic_path *m_path;
};





class label_text
{
public:
  label_text ()
  : m_buffer (nullptr), m_caller_owned (false)
  {}

  void maybe_free ()
  {
    if (m_caller_owned)
      free (m_buffer);
  }



  static label_text borrow (const char *buffer)
  {
    return label_text (const_cast <char *> (buffer), false);
  }


  static label_text take (char *buffer)
  {
    return label_text (buffer, true);
  }


  char *take_or_copy ()
  {
    if (m_caller_owned)
      return m_buffer;
    else
      return xstrdup (m_buffer);
  }

  char *m_buffer;
  bool m_caller_owned;

private:
  label_text (char *buffer, bool owned)
  : m_buffer (buffer), m_caller_owned (owned)
  {}
};
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class range_label
{
 public:
  virtual ~range_label () {}




  virtual label_text get_text (unsigned range_idx) const = 0;
};
# 1848 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class fixit_hint
{
 public:
  fixit_hint (location_t start,
       location_t next_loc,
       const char *new_content);
  ~fixit_hint () { free (m_bytes); }

  bool affects_line_p (const char *file, int line) const;
  location_t get_start_loc () const { return m_start; }
  location_t get_next_loc () const { return m_next_loc; }
  bool maybe_append (location_t start,
       location_t next_loc,
       const char *new_content);

  const char *get_string () const { return m_bytes; }
  size_t get_length () const { return m_len; }

  bool insertion_p () const { return m_start == m_next_loc; }

  bool ends_with_newline_p () const;

 private:




  location_t m_start;
  location_t m_next_loc;
  char *m_bytes;
  size_t m_len;
};





enum location_resolution_kind
{
  LRK_MACRO_EXPANSION_POINT,
  LRK_SPELLING_LOCATION,
  LRK_MACRO_DEFINITION_LOCATION
};
# 1940 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_resolve_location (class line_maps *,
         location_t loc,
         enum location_resolution_kind lrk,
         const line_map_ordinary **loc_map);
# 1952 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_toward_expansion (class line_maps *,
         location_t loc,
         const line_map **loc_map);
# 1970 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_to_first_non_reserved_loc (class line_maps *,
           location_t loc,
           const line_map **map);





expanded_location linemap_expand_location (class line_maps *,
        const line_map *,
        location_t loc);



struct linemap_stats
{
  long num_ordinary_maps_allocated;
  long num_ordinary_maps_used;
  long ordinary_maps_allocated_size;
  long ordinary_maps_used_size;
  long num_expanded_macros;
  long num_macro_tokens;
  long num_macro_maps_used;
  long macro_maps_allocated_size;
  long macro_maps_used_size;
  long macro_maps_locations_size;
  long duplicated_macro_maps_locations_size;
  long adhoc_table_size;
  long adhoc_table_entries_used;
};





bool linemap_get_file_highest_location (class line_maps * set,
     const char *file_name,
     location_t *loc);



void linemap_get_statistics (line_maps *, struct linemap_stats *);



void linemap_dump_location (line_maps *, location_t, FILE *);




void linemap_dump (FILE *, line_maps *, unsigned, bool);




void line_table_dump (FILE *, line_maps *, unsigned int, unsigned int);



enum location_aspect
{
  LOCATION_ASPECT_CARET,
  LOCATION_ASPECT_START,
  LOCATION_ASPECT_FINISH
};







extern expanded_location
linemap_client_expand_location_to_spelling_point (location_t,
        enum location_aspect);
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h" 2

extern class line_maps *line_table;
extern class line_maps *saved_line_table;
# 37 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
static_assert ((((location_t) 1) < RESERVED_LOCATION_COUNT), "BUILTINS_LOCATION < RESERVED_LOCATION_COUNT");

extern bool is_location_from_builtin_token (location_t);
extern expanded_location expand_location (location_t);

extern int location_compute_display_column (expanded_location exploc,
         int tabstop);




class char_span
{
 public:
  char_span (const char *ptr, size_t n_elts) : m_ptr (ptr), m_n_elts (n_elts) {}


  operator bool() const { return m_ptr; }



  size_t length () const { return m_n_elts; }

  const char *get_buffer () const { return m_ptr; }

  char operator[] (int idx) const
  {
    ((void)(!(idx >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 64, __FUNCTION__), 0 : 0));
    ((void)(!((size_t)idx < m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 65, __FUNCTION__), 0 : 0));
    return m_ptr[idx];
  }

  char_span subspan (int offset, int n_elts) const
  {
    ((void)(!(offset >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 71, __FUNCTION__), 0 : 0));
    ((void)(!(offset < (int)m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 72, __FUNCTION__), 0 : 0));
    ((void)(!(n_elts >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 73, __FUNCTION__), 0 : 0));
    ((void)(!(offset + n_elts <= (int)m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 74, __FUNCTION__), 0 : 0));
    return char_span (m_ptr + offset, n_elts);
  }

  char *xstrdup () const
  {
    return ::xstrndup (m_ptr, m_n_elts);
  }

 private:
  const char *m_ptr;
  size_t m_n_elts;
};

extern char_span location_get_source_line (const char *file_path, int line);

extern bool location_missing_trailing_newline (const char *file_path);
extern expanded_location
expand_location_to_spelling_point (location_t,
       enum location_aspect aspect
         = LOCATION_ASPECT_CARET);
extern location_t expansion_point_location_if_in_system_header (location_t);
extern location_t expansion_point_location (location_t);

extern location_t input_location;
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
static inline int
in_system_header_at (location_t loc)
{
  return linemap_location_in_system_header_p (line_table, loc);
}




static inline bool
from_macro_expansion_at (location_t loc)
{
  return linemap_location_from_macro_expansion_p (line_table, loc);
}





static inline bool
from_macro_definition_at (location_t loc)
{
  return linemap_location_from_macro_definition_p (line_table, loc);
}

static inline location_t
get_pure_location (location_t loc)
{
  return get_pure_location (line_table, loc);
}



static inline location_t
get_start (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_start;
}



static inline location_t
get_finish (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_finish;
}

extern location_t make_location (location_t caret,
     location_t start, location_t finish);
extern location_t make_location (location_t caret, source_range src_range);

void dump_line_table_statistics (void);

void dump_location_info (FILE *stream);

void diagnostics_file_cache_fini (void);

void diagnostics_file_cache_forcibly_evict_file (const char *file_path);

class string_concat
{
public:
  string_concat (int num, location_t *locs);

  int m_num;
  location_t * m_locs;
};

struct location_hash : int_hash <location_t, ((location_t) 0)> { };

class string_concat_db
{
 public:
  string_concat_db ();
  void record_string_concatenation (int num, location_t *locs);

  bool get_string_concatenation (location_t loc,
     int *out_num,
     location_t **out_locs);

 private:
  static location_t get_key_loc (location_t loc);




  friend void ::gt_ggc_mx_string_concat_db (void *x_p);
  friend void ::gt_pch_nx_string_concat_db (void *x_p);
  friend void ::gt_pch_p_16string_concat_db (void *this_obj, void *x_p,
          gt_pointer_operator op,
          void *cookie);

  hash_map <location_hash, string_concat *> *m_table;
};
# 479 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h" 1
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
struct is_a_helper
{
  template <typename U>
  static inline bool test (U *p);
  template <typename U>
  static inline T cast (U *p);
};
# 168 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
template <typename U>
inline T
is_a_helper <T>::cast (U *p)
{
  return reinterpret_cast <T> (p);
}
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T, typename U>
inline bool
is_a (U *p)
{
  return is_a_helper<T>::test (p);
}




template <typename T, typename U>
inline T
as_a (U *p)
{
  ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 197, __FUNCTION__), 0 : 0));
  return is_a_helper <T>::cast (p);
}




template <typename T, typename U>
inline T
safe_as_a (U *p)
{
  if (p)
    {
      ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 210, __FUNCTION__), 0 : 0));
      return is_a_helper <T>::cast (p);
    }
  else
    return nullptr;
}




template <typename T, typename U>
inline T
dyn_cast (U *p)
{
  if (is_a <T> (p))
    return is_a_helper <T>::cast (p);
  else
    return static_cast <T> (0);
}



template <typename T, typename U>
inline T
safe_dyn_cast (U *p)
{
  return p ? dyn_cast <T> (p) : 0;
}
# 480 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/memory-block.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/memory-block.h"
class memory_block_pool
{
public:

  static const size_t block_size = 64 * 1024;

  static const size_t freelist_size = 1024 * 1024 / block_size;

  memory_block_pool ();

  static inline void *allocate () __attribute__ ((__malloc__));
  static inline void release (void *);
  static void trim (int nblocks = freelist_size);
  void reduce_free_list (int);

private:

  static memory_block_pool instance;

  struct block_list
  {
    block_list *m_next;
  };


  block_list *m_blocks;
};


inline void *
memory_block_pool::allocate ()
{
  if (instance.m_blocks == nullptr)
    return ((char *) xmalloc (sizeof (char) * (block_size)));

  void *result = instance.m_blocks;
  instance.m_blocks = instance.m_blocks->m_next;
  ;
  return result;
}


inline void
memory_block_pool::release (void *uncast_block)
{
  block_list *block = new (uncast_block) block_list;
  block->m_next = instance.m_blocks;
  instance.m_blocks = block;

 


                             ;
}

extern void *mempool_obstack_chunk_alloc (size_t) __attribute__ ((__malloc__));
extern void mempool_obstack_chunk_free (void *);
# 481 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
struct function;
struct profile_count;
class sreal;



enum profile_quality {

  UNINITIALIZED_PROFILE,





  GUESSED_LOCAL,




  GUESSED_GLOBAL0,


  GUESSED_GLOBAL0_ADJUSTED,






  GUESSED,


  AFDO,




  ADJUSTED,



  PRECISE
};

extern const char *profile_quality_as_string (enum profile_quality);
extern bool parse_profile_quality (const char *value,
       profile_quality *quality);






bool slow_safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res);



inline bool
safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)
{

  uint64_t tmp;
  if (!__builtin_mul_overflow (a, b, &tmp)
      && !__builtin_add_overflow (tmp, c/2, &tmp))
    {
      *res = tmp / c;
      return true;
    }
  if (c == 1)
    {
      *res = (uint64_t) -1;
      return false;
    }
# 106 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  return slow_safe_scale_64bit (a, b, c, res);
}
# 146 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
class profile_probability
{
  static const int n_bits = 29;


  static const uint32_t max_probability = (uint32_t) 1 << (n_bits - 2);
  static const uint32_t uninitialized_probability
   = ((uint32_t) 1 << (n_bits - 1)) - 1;

  uint32_t m_val : 29;
  enum profile_quality m_quality : 3;

  friend struct profile_count;
public:
  profile_probability (): m_val (uninitialized_probability),
    m_quality (GUESSED)
  {}

  profile_probability (uint32_t val, profile_quality quality):
    m_val (val), m_quality (quality)
  {}


  static profile_probability never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = PRECISE;
      return ret;
    }

  static profile_probability guessed_never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = GUESSED;
      return ret;
    }

  static profile_probability very_unlikely ()
    {

      profile_probability r = guessed_always ().apply_scale (1, 2000);
      r.m_val--;
      return r;
    }

  static profile_probability unlikely ()
    {

      profile_probability r = guessed_always ().apply_scale (1, 5);
      r.m_val--;
      return r;
    }

  static profile_probability even ()
    {
      return guessed_always ().apply_scale (1, 2);
    }

  static profile_probability very_likely ()
    {
      return always () - very_unlikely ();
    }

  static profile_probability likely ()
    {
      return always () - unlikely ();
    }

  static profile_probability guessed_always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = GUESSED;
      return ret;
    }

  static profile_probability always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = PRECISE;
      return ret;
    }



  static profile_probability uninitialized ()
    {
      profile_probability c;
      c.m_val = uninitialized_probability;
      c.m_quality = GUESSED;
      return c;
    }


  bool initialized_p () const
    {
      return m_val != uninitialized_probability;
    }


  bool reliable_p () const
    {
      return m_quality >= ADJUSTED;
    }



  static profile_probability from_reg_br_prob_base (int v)
    {
      profile_probability ret;
      ((void)(!(v >= 0 && v <= 10000) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 259, __FUNCTION__), 0 : 0));
      ret.m_val = (((v * (uint64_t) max_probability) + (10000) / 2) / (10000));
      ret.m_quality = GUESSED;
      return ret;
    }


  profile_probability adjusted () const
    {
      profile_probability ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = ADJUSTED;
      return ret;
    }

  int to_reg_br_prob_base () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 277, __FUNCTION__), 0 : 0));
      return (((m_val * (uint64_t) 10000) + (max_probability) / 2) / (max_probability));
    }


  static profile_probability from_reg_br_prob_note (int v)
    {
      profile_probability ret;
      ret.m_val = ((unsigned int)v) / 8;
      ret.m_quality = (enum profile_quality)(v & 7);
      return ret;
    }

  int to_reg_br_prob_note () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 292, __FUNCTION__), 0 : 0));
      int ret = m_val * 8 + m_quality;
      ((void)(!(from_reg_br_prob_note (ret) == *this) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 294, __FUNCTION__), 0 : 0));
      return ret;
    }


  static profile_probability probability_in_gcov_type
     (gcov_type val1, gcov_type val2)
    {
      profile_probability ret;
      ((void)(!(val1 >= 0 && val2 > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 303, __FUNCTION__), 0 : 0));
      if (val1 > val2)
 ret.m_val = max_probability;
      else
 {
   uint64_t tmp;
   safe_scale_64bit (val1, max_probability, val2, &tmp);
   ((void)(!(tmp <= max_probability) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 310, __FUNCTION__), 0 : 0));
   ret.m_val = tmp;
 }
      ret.m_quality = PRECISE;
      return ret;
    }


  bool operator== (const profile_probability &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }

  profile_probability operator+ (const profile_probability &other) const
    {
      if (other == never ())
 return *this;
      if (*this == never ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();

      profile_probability ret;
      ret.m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_probability &operator+= (const profile_probability &other)
    {
      if (other == never ())
 return *this;
      if (*this == never ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_probability operator- (const profile_probability &other) const
    {
      if (*this == never ()
   || other == never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_probability &operator-= (const profile_probability &other)
    {
      if (*this == never ()
   || other == never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_probability operator* (const profile_probability &other) const
    {
      if (*this == never ()
   || other == never ())
 return never ();
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;
      ret.m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
      return ret;
    }

  profile_probability &operator*= (const profile_probability &other)
    {
      if (*this == never ()
   || other == never ())
 return *this = never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
 }
      return *this;
    }

  profile_probability operator/ (const profile_probability &other) const
    {
      if (*this == never ())
 return never ();
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;

      if (m_val >= other.m_val)
 {
   ret.m_val = max_probability;
          ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (GUESSED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (GUESSED))
                  ;
   return ret;
 }
      else if (!m_val)
 ret.m_val = 0;
      else
 {
   ((void)(!(other.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 432, __FUNCTION__), 0 : 0));
   ret.m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
 }
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
      return ret;
    }

  profile_probability &operator/= (const profile_probability &other)
    {
      if (*this == never ())
 return *this = never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {


   if (m_val > other.m_val)
     {
       m_val = max_probability;
              m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (GUESSED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (GUESSED))
                  ;
       return *this;
     }
   else if (!m_val)
     ;
   else
     {
       ((void)(!(other.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 462, __FUNCTION__), 0 : 0));
       m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
     }
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
 }
      return *this;
    }
# 487 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  profile_probability split (const profile_probability &cprob)
    {
      profile_probability ret = *this * cprob;





      if (!(*this == always ()))
        *this = (*this - ret) / ret.invert ();
      return ret;
    }

  gcov_type apply (gcov_type val) const
    {
      if (*this == uninitialized ())
 return val / 2;
      return (((val * m_val) + (max_probability) / 2) / (max_probability));
    }


  profile_probability invert () const
    {
      return always() - *this;
    }


  profile_probability guessed () const
    {
      profile_probability ret = *this;
      ret.m_quality = GUESSED;
      return ret;
    }


  profile_probability afdo () const
    {
      profile_probability ret = *this;
      ret.m_quality = AFDO;
      return ret;
    }


  profile_probability apply_scale (int64_t num, int64_t den) const
    {
      if (*this == never ())
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_probability ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_probability) ? (tmp) : (max_probability));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }
# 560 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  bool probably_reliable_p () const
    {
      if (m_quality >= ADJUSTED)
 return true;
      if (!initialized_p ())
 return false;
      return m_val < max_probability / 100
      || m_val > max_probability - max_probability / 100;
    }


  bool verify () const
    {
      ((void)(!(m_quality != UNINITIALIZED_PROFILE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 573, __FUNCTION__), 0 : 0));
      if (m_val == uninitialized_probability)
 return m_quality == GUESSED;
      else if (m_quality < GUESSED)
 return false;
      return m_val <= max_probability;
    }



  bool operator< (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val < other.m_val;
    }

  bool operator> (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }

  bool operator<= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val <= other.m_val;
    }

  bool operator>= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val >= other.m_val;
    }


  uint32_t value () const { return m_val; }


  enum profile_quality quality () const { return m_quality; }


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_probability other) const;


  bool differs_lot_from_p (profile_probability other) const;




  profile_probability combine_with_count (profile_count count1,
       profile_probability other,
       profile_count count2) const;


  sreal to_sreal () const;

  static profile_probability stream_in (class lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 690 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
struct profile_count
{
public:




  static const int n_bits = 61;
  static const uint64_t max_count = ((uint64_t) 1 << n_bits) - 2;
private:
  static const uint64_t uninitialized_count = ((uint64_t) 1 << n_bits) - 1;
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  uint64_t m_val : n_bits;

  enum profile_quality m_quality : 3;
public:




  bool compatible_p (const profile_count other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return true;
      if (*this == zero ()
   || other == zero ())
 return true;


      if (ipa ().nonzero_p ()
   && !(other.ipa () == other))
 return false;
      if (other.ipa ().nonzero_p ()
   && !(ipa () == *this))
 return false;

      return ipa_p () == other.ipa_p ();
    }


  static profile_count zero ()
    {
      return from_gcov_type (0);
    }

  static profile_count adjusted_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = ADJUSTED;
      return c;
    }

  static profile_count guessed_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = GUESSED;
      return c;
    }

  static profile_count one ()
    {
      return from_gcov_type (1);
    }



  static profile_count uninitialized ()
    {
      profile_count c;
      c.m_val = uninitialized_count;
      c.m_quality = GUESSED_LOCAL;
      return c;
    }


  gcov_type to_gcov_type () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 778, __FUNCTION__), 0 : 0));
      return m_val;
    }


  bool initialized_p () const
    {
      return m_val != uninitialized_count;
    }


  bool reliable_p () const
    {
      return m_quality >= ADJUSTED;
    }


  bool ipa_p () const
    {
      return !initialized_p () || m_quality >= GUESSED_GLOBAL0;
    }


  bool precise_p () const
    {
      return m_quality == PRECISE;
    }


  uint32_t value () const { return m_val; }


  enum profile_quality quality () const { return m_quality; }





  bool ok_for_merging (profile_count other) const
    {
      if (m_quality < ADJUSTED
   || other.m_quality < ADJUSTED)
 return true;
      return !(other < *this);
    }



  profile_count merge (profile_count other) const
    {
      if (*this == other || !other.initialized_p ()
   || m_quality > other.m_quality)
 return *this;
      if (other.m_quality > m_quality
   || other > *this)
 return other;
      return *this;
    }


  bool operator== (const profile_count &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }

  profile_count operator+ (const profile_count &other) const
    {
      if (other == zero ())
 return *this;
      if (*this == zero ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();

      profile_count ret;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 853, __FUNCTION__), 0 : 0));
      ret.m_val = m_val + other.m_val;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_count &operator+= (const profile_count &other)
    {
      if (other == zero ())
 return *this;
      if (*this == zero ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 872, __FUNCTION__), 0 : 0));
   m_val += other.m_val;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_count operator- (const profile_count &other) const
    {
      if (*this == zero () || other == zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 885, __FUNCTION__), 0 : 0));
      profile_count ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_count &operator-= (const profile_count &other)
    {
      if (*this == zero () || other == zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 900, __FUNCTION__), 0 : 0));
   m_val = m_val >= other.m_val ? m_val - other.m_val: 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }


  bool verify () const
    {
      ((void)(!(m_quality != UNINITIALIZED_PROFILE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 910, __FUNCTION__), 0 : 0));
      return m_val != uninitialized_count || m_quality == GUESSED_LOCAL;
    }



  bool operator< (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return !(other == zero ());
      if (other == zero ())
 return false;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 924, __FUNCTION__), 0 : 0));
      return m_val < other.m_val;
    }

  bool operator> (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return false;
      if (other == zero ())
 return !(*this == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 936, __FUNCTION__), 0 : 0));
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }

  bool operator< (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 942, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 943, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val < (uint64_t) other;
    }

  bool operator> (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 949, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 950, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val > (uint64_t) other;
    }

  bool operator<= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return true;
      if (other == zero ())
 return (*this == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 962, __FUNCTION__), 0 : 0));
      return m_val <= other.m_val;
    }

  bool operator>= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (other == zero ())
 return true;
      if (*this == zero ())
 return (other == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 974, __FUNCTION__), 0 : 0));
      return m_val >= other.m_val;
    }

  bool operator<= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 980, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 981, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val <= (uint64_t) other;
    }

  bool operator>= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 987, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 988, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val >= (uint64_t) other;
    }




  bool nonzero_p () const
    {
      return initialized_p () && m_val != 0;
    }


  profile_count force_nonzero () const
    {
      if (!initialized_p ())
 return *this;
      profile_count ret = *this;
      if (ret.m_val == 0)
 {
   ret.m_val = 1;
          ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
 }
      return ret;
    }

  profile_count max (profile_count other) const
    {
      profile_count val = *this;


      if (ipa ().nonzero_p () || other.ipa ().nonzero_p ())
 {
   val = ipa ();
   other = other.ipa ();
 }
      if (!initialized_p ())
 return other;
      if (!other.initialized_p ())
 return *this;
      if (*this == zero ())
 return other;
      if (other == zero ())
 return *this;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1032, __FUNCTION__), 0 : 0));
      if (val.m_val < other.m_val || (m_val == other.m_val
          && val.m_quality < other.m_quality))
 return other;
      return *this;
    }



  profile_count apply_probability (int prob) const
    {
      ((void)(!(prob >= 0 && prob <= 10000) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1043, __FUNCTION__), 0 : 0));
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      ret.m_val = (((m_val * prob) + (10000) / 2) / (10000));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }


  profile_count apply_probability (profile_probability prob) const
    {
      if (*this == zero ())
 return *this;
      if (prob == profile_probability::never ())
 return zero ();
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, prob.m_val, profile_probability::max_probability,
   &tmp);
      ret.m_val = tmp;
      ret.m_quality = ((m_quality) < (prob.m_quality) ? (m_quality) : (prob.m_quality));
      return ret;
    }


  profile_count apply_scale (int64_t num, int64_t den) const
    {
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      uint64_t tmp;

      ((void)(!(num >= 0 && den > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1082, __FUNCTION__), 0 : 0));
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_count) ? (tmp) : (max_count));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }

  profile_count apply_scale (profile_count num, profile_count den) const
    {
      if (*this == zero ())
 return *this;
      if (num == zero ())
 return num;
      if (!initialized_p () || !num.initialized_p () || !den.initialized_p ())
 return uninitialized ();
      if (num == den)
 return *this;
      ((void)(!(den.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1099, __FUNCTION__), 0 : 0));

      profile_count ret;
      uint64_t val;
      safe_scale_64bit (m_val, num.m_val, den.m_val, &val);
      ret.m_val = ((val) < (max_count) ? (val) : (max_count));
      ret.m_quality = ((((((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) < (num.m_quality) ? (((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) : (num.m_quality))) < (den.m_quality) ? (((((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) < (num.m_quality) ? (((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) : (num.m_quality))) : (den.m_quality))
                                         ;


      if (num.ipa_p ())
 ret.m_quality = ((ret.m_quality) > (num == num.ipa () ? GUESSED : num.m_quality) ? (ret.m_quality) : (num == num.ipa () ? GUESSED : num.m_quality))
                                                    ;
      return ret;
    }


  profile_count guessed_local () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_LOCAL;
      return ret;
    }


  profile_count global0 () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_GLOBAL0;
      return ret;
    }



  profile_count global0adjusted () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_GLOBAL0_ADJUSTED;
      return ret;
    }


  profile_count guessed () const
    {
      profile_count ret = *this;
      ret.m_quality = ((ret.m_quality) < (GUESSED) ? (ret.m_quality) : (GUESSED));
      return ret;
    }



  profile_count ipa () const
    {
      if (m_quality > GUESSED_GLOBAL0_ADJUSTED)
 return *this;
      if (m_quality == GUESSED_GLOBAL0)
 return zero ();
      if (m_quality == GUESSED_GLOBAL0_ADJUSTED)
 return adjusted_zero ();
      return uninitialized ();
    }


  profile_count afdo () const
    {
      profile_count ret = *this;
      ret.m_quality = AFDO;
      return ret;
    }



  profile_probability probability_in (const profile_count overall) const
    {
      if (*this == zero ()
   && !(overall == zero ()))
 return profile_probability::never ();
      if (!initialized_p () || !overall.initialized_p ()
   || !overall.m_val)
 return profile_probability::uninitialized ();
      if (*this == overall && m_quality == PRECISE)
 return profile_probability::always ();
      profile_probability ret;
      ((void)(!(compatible_p (overall)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1188, __FUNCTION__), 0 : 0));

      if (overall.m_val < m_val)
 {
   ret.m_val = profile_probability::max_probability;
   ret.m_quality = GUESSED;
   return ret;
 }
      else
 ret.m_val = (((m_val * profile_probability::max_probability) + (overall.m_val) / 2) / (overall.m_val))
                   ;
      ret.m_quality = ((((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (GUESSED) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (GUESSED))) < (ADJUSTED) ? (((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (GUESSED) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (GUESSED))) : (ADJUSTED))
                       ;
      return ret;
    }

  int to_frequency (struct function *fun) const;
  int to_cgraph_frequency (profile_count entry_bb_count) const;
  sreal to_sreal_scale (profile_count in, bool *known = nullptr) const;


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_count other) const;




  static void adjust_for_ipa_scaling (profile_count *num, profile_count *den);






  profile_count combine_with_ipa_count (profile_count ipa);


  profile_count combine_with_ipa_count_within
   (profile_count ipa, profile_count ipa2);




  static profile_count from_gcov_type (gcov_type v,
           profile_quality quality = PRECISE);


  static profile_count stream_in (class lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h" 2
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
enum tree_dump_index
{
  TDI_none,
  TDI_cgraph,
  TDI_inheritance,
  TDI_clones,
  TDI_original,
  TDI_gimple,
  TDI_nested,
  TDI_lto_stream_out,
  TDI_profile_report,

  TDI_lang_all,
  TDI_tree_all,
  TDI_rtl_all,
  TDI_ipa_all,

  TDI_end
};



enum dump_kind
{
  DK_none,
  DK_lang,
  DK_tree,
  DK_rtl,
  DK_ipa
};






enum dump_flag
{

  TDF_NONE = 0,


  TDF_ADDRESS = (1 << 0),


  TDF_SLIM = (1 << 1),


  TDF_RAW = (1 << 2),


  TDF_DETAILS = (1 << 3),


  TDF_STATS = (1 << 4),


  TDF_BLOCKS = (1 << 5),


  TDF_VOPS = (1 << 6),


  TDF_LINENO = (1 << 7),


  TDF_UID = (1 << 8),


  TDF_STMTADDR = (1 << 9),


  TDF_GRAPH = (1 << 10),



  TDF_MEMSYMS = (1 << 11),


  TDF_RHS_ONLY = (1 << 12),


  TDF_ASMNAME = (1 << 13),


  TDF_EH = (1 << 14),


  TDF_NOUID = (1 << 15),


  TDF_ALIAS = (1 << 16),


  TDF_ENUMERATE_LOCALS = (1 << 17),


  TDF_CSELIB = (1 << 18),


  TDF_SCEV = (1 << 19),


  TDF_GIMPLE = (1 << 20),


  TDF_FOLDING = (1 << 21),





  MSG_OPTIMIZED_LOCATIONS = (1 << 22),


  MSG_MISSED_OPTIMIZATION = (1 << 23),


  MSG_NOTE = (1 << 24),


  MSG_ALL_KINDS = (MSG_OPTIMIZED_LOCATIONS
     | MSG_MISSED_OPTIMIZATION
     | MSG_NOTE),
# 178 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
  MSG_PRIORITY_USER_FACING = (1 << 25),


  MSG_PRIORITY_INTERNALS = (1 << 26),





  MSG_PRIORITY_REEMITTED = (1 << 27),


  MSG_ALL_PRIORITIES = (MSG_PRIORITY_USER_FACING
   | MSG_PRIORITY_INTERNALS
   | MSG_PRIORITY_REEMITTED),


  TDF_COMPARE_DEBUG = (1 << 28),


  TDF_ERROR = (1 << 26),


  TDF_ALL_VALUES = (1 << 29) - 1
};



typedef enum dump_flag dump_flags_t;

static inline dump_flags_t
operator| (dump_flags_t lhs, dump_flags_t rhs)
{
  return (dump_flags_t)((int)lhs | (int)rhs);
}

static inline dump_flags_t
operator& (dump_flags_t lhs, dump_flags_t rhs)
{
  return (dump_flags_t)((int)lhs & (int)rhs);
}

static inline dump_flags_t
operator~ (dump_flags_t flags)
{
  return (dump_flags_t)~((int)flags);
}

static inline dump_flags_t &
operator|= (dump_flags_t &lhs, dump_flags_t rhs)
{
  lhs = (dump_flags_t)((int)lhs | (int)rhs);
  return lhs;
}

static inline dump_flags_t &
operator&= (dump_flags_t &lhs, dump_flags_t rhs)
{
  lhs = (dump_flags_t)((int)lhs & (int)rhs);
  return lhs;
}





enum optgroup_flag
{
  OPTGROUP_NONE = 0,


  OPTGROUP_IPA = (1 << 1),


  OPTGROUP_LOOP = (1 << 2),


  OPTGROUP_INLINE = (1 << 3),


  OPTGROUP_OMP = (1 << 4),


  OPTGROUP_VEC = (1 << 5),


  OPTGROUP_OTHER = (1 << 6),

  OPTGROUP_ALL = (OPTGROUP_IPA | OPTGROUP_LOOP | OPTGROUP_INLINE
    | OPTGROUP_OMP | OPTGROUP_VEC | OPTGROUP_OTHER)
};

typedef enum optgroup_flag optgroup_flags_t;

static inline optgroup_flags_t
operator| (optgroup_flags_t lhs, optgroup_flags_t rhs)
{
  return (optgroup_flags_t)((int)lhs | (int)rhs);
}

static inline optgroup_flags_t &
operator|= (optgroup_flags_t &lhs, optgroup_flags_t rhs)
{
  lhs = (optgroup_flags_t)((int)lhs | (int)rhs);
  return lhs;
}


struct dump_file_info
{

  const char *suffix;

  const char *swtch;

  const char *glob;

  const char *pfilename;

  const char *alt_filename;

  FILE *pstream;

  FILE *alt_stream;

  dump_kind dkind;

  dump_flags_t pflags;

  dump_flags_t alt_flags;

  optgroup_flags_t optgroup_flags;

  int pstate;

  int alt_state;

  int num;


  bool owns_strings;


  bool graph_dump_initialized;
};







class dump_user_location_t
{
 public:

  dump_user_location_t () : m_count (), m_loc (((location_t) 0)) {}


  dump_user_location_t (const gimple *stmt);


  dump_user_location_t (const rtx_insn *insn);



  static dump_user_location_t
  from_location_t (location_t loc)
  {
    return dump_user_location_t (profile_count (), loc);
  }



  static dump_user_location_t
  from_function_decl (tree fndecl);

  profile_count get_count () const { return m_count; }
  location_t get_location_t () const { return m_loc; }

 private:

  dump_user_location_t (profile_count count, location_t loc)
    : m_count (count), m_loc (loc)
  {}

  profile_count m_count;
  location_t m_loc;
};




class dump_impl_location_t
{
public:
  dump_impl_location_t (

   const char *file = __builtin_FILE (),
   int line = __builtin_LINE (),
   const char *function = __builtin_FUNCTION ()





  )
  : m_file (file), m_line (line), m_function (function)
  {}

  const char *m_file;
  int m_line;
  const char *m_function;
};
# 404 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
class dump_metadata_t
{
 public:
  dump_metadata_t (dump_flags_t dump_flags,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_dump_flags (dump_flags),
    m_impl_location (impl_location)
  {
  }

  dump_flags_t get_dump_flags () const { return m_dump_flags; }

  const dump_impl_location_t &
  get_impl_location () const { return m_impl_location; }

 private:
  dump_flags_t m_dump_flags;
  dump_impl_location_t m_impl_location;
};
# 436 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
class dump_location_t
{
 public:

  dump_location_t (const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_user_location (dump_user_location_t ()),
    m_impl_location (impl_location)
  {
  }


  dump_location_t (const gimple *stmt,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_user_location (dump_user_location_t (stmt)),
    m_impl_location (impl_location)
  {
  }


  dump_location_t (const rtx_insn *insn,
     const dump_impl_location_t &impl_location
     = dump_impl_location_t ())
  : m_user_location (dump_user_location_t (insn)),
    m_impl_location (impl_location)
  {
  }


  dump_location_t (const dump_user_location_t &user_location,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_user_location (user_location),
    m_impl_location (impl_location)
  {
  }



  static dump_location_t
  from_location_t (location_t loc,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  {
    return dump_location_t (dump_user_location_t::from_location_t (loc),
       impl_location);
  }

  const dump_user_location_t &
  get_user_location () const { return m_user_location; }

  const dump_impl_location_t &
  get_impl_location () const { return m_impl_location; }

  location_t get_location_t () const
  {
    return m_user_location.get_location_t ();
  }

  profile_count get_count () const { return m_user_location.get_count (); }

 private:
  dump_user_location_t m_user_location;
  dump_impl_location_t m_impl_location;
};


extern FILE *dump_begin (int, dump_flags_t *, int part=-1);
extern void dump_end (int, FILE *);
extern int opt_info_switch_p (const char *);
extern const char *dump_flag_name (int);
extern const kv_pair<optgroup_flags_t> optgroup_options[];
extern dump_flags_t
parse_dump_option (const char *, const char **);


extern FILE *dump_file;
extern dump_flags_t dump_flags;
extern const char *dump_file_name;

extern bool dumps_are_enabled;

extern void set_dump_file (FILE *new_dump_file);


static inline bool
dump_enabled_p (void)
{
  return dumps_are_enabled;
}
# 563 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
extern void dump_printf (const dump_metadata_t &, const char *, ...)
  __attribute__ ((__format__ (__gcc_dump_printf__, 2 ,3))) __attribute__ ((__nonnull__ (2)));

extern void dump_printf_loc (const dump_metadata_t &, const dump_user_location_t &,
        const char *, ...)
  __attribute__ ((__format__ (__gcc_dump_printf__, 3 ,0))) __attribute__ ((__nonnull__ (3)));
extern void dump_function (int phase, tree fn);
extern void dump_basic_block (dump_flags_t, basic_block, int);
extern void dump_generic_expr_loc (const dump_metadata_t &,
       const dump_user_location_t &,
       dump_flags_t, tree);
extern void dump_generic_expr (const dump_metadata_t &, dump_flags_t, tree);
extern void dump_gimple_stmt_loc (const dump_metadata_t &,
      const dump_user_location_t &,
      dump_flags_t, gimple *, int);
extern void dump_gimple_stmt (const dump_metadata_t &, dump_flags_t, gimple *, int);
extern void dump_gimple_expr_loc (const dump_metadata_t &,
      const dump_user_location_t &,
      dump_flags_t, gimple *, int);
extern void dump_gimple_expr (const dump_metadata_t &, dump_flags_t, gimple *, int);
extern void dump_symtab_node (const dump_metadata_t &, symtab_node *);

template<unsigned int N, typename C>
void dump_dec (const dump_metadata_t &, const poly_int<N, C> &);
extern void dump_dec (dump_flags_t, const poly_wide_int &, signop);
extern void dump_hex (dump_flags_t, const poly_wide_int &);

extern void dumpfile_ensure_any_optinfo_are_flushed ();




extern unsigned int get_dump_scope_depth ();
extern void dump_begin_scope (const char *name,
         const dump_user_location_t &user_location,
         const dump_impl_location_t &impl_location);
extern void dump_end_scope ();







class auto_dump_scope
{
 public:
  auto_dump_scope (const char *name,
     const dump_user_location_t &user_location,
     const dump_impl_location_t &impl_location
     = dump_impl_location_t ())
  {
    if (dump_enabled_p ())
      dump_begin_scope (name, user_location, impl_location);
  }
  ~auto_dump_scope ()
  {
    if (dump_enabled_p ())
      dump_end_scope ();
  }
};
# 640 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
extern void dump_function (int phase, tree fn);
extern void print_combine_total_stats (void);
extern bool enable_rtl_dump_file (void);


extern void dump_node (const_tree, dump_flags_t, FILE *);


extern void dump_combine_total_stats (FILE *);

extern void dump_bb (FILE *, basic_block, int, dump_flags_t);

class opt_pass;

namespace gcc {




class dump_manager
{
public:

  dump_manager ();
  ~dump_manager ();





  unsigned int
  dump_register (const char *suffix, const char *swtch, const char *glob,
   dump_kind dkind, optgroup_flags_t optgroup_flags,
   bool take_ownership);



  void
  register_dumps ();


  struct dump_file_info *
  get_dump_file_info (int phase) const;

  struct dump_file_info *
  get_dump_file_info_by_switch (const char *swtch) const;



  char *
  get_dump_file_name (int phase, int part = -1) const;

  char *
  get_dump_file_name (struct dump_file_info *dfi, int part = -1) const;

  void
  dump_switch_p (const char *arg);






  int
  dump_start (int phase, dump_flags_t *flag_ptr);



  void
  dump_finish (int phase);

  FILE *
  dump_begin (int phase, dump_flags_t *flag_ptr, int part);


  int
  dump_initialized_p (int phase) const;


  const char *
  dump_flag_name (int phase) const;

  void register_pass (opt_pass *pass);

private:

  int
  dump_phase_enabled_p (int phase) const;

  int
  dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob);

  int
  dump_enable_all (dump_kind dkind, dump_flags_t flags, const char *filename);

  int
  opt_info_enable_passes (optgroup_flags_t optgroup_flags, dump_flags_t flags,
     const char *filename);

  bool update_dfi_for_opt_info (dump_file_info *dfi) const;

private:


  int m_next_dump;
  struct dump_file_info *m_extra_dump_files;
  size_t m_extra_dump_files_in_use;
  size_t m_extra_dump_files_alloced;



  optgroup_flags_t m_optgroup_flags;
  dump_flags_t m_optinfo_flags;
  char *m_optinfo_filename;


  friend bool ::enable_rtl_dump_file (void);


  friend int ::opt_info_switch_p (const char *arg);

};

}
# 482 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "./options.h" 1





# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_info_type
{
  NO_DEBUG,
  DBX_DEBUG,
  DWARF2_DEBUG,
  XCOFF_DEBUG,
  VMS_DEBUG,
  VMS_AND_DWARF2_DEBUG

};

enum debug_info_levels
{
  DINFO_LEVEL_NONE,
  DINFO_LEVEL_TERSE,
  DINFO_LEVEL_NORMAL,
  DINFO_LEVEL_VERBOSE
};
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_info_usage
{
  DINFO_USAGE_DFN,
  DINFO_USAGE_DIR_USE,
  DINFO_USAGE_IND_USE,
  DINFO_USAGE_NUM_ENUMS
};
# 83 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_struct_file
{
  DINFO_STRUCT_FILE_NONE,
  DINFO_STRUCT_FILE_BASE,

  DINFO_STRUCT_FILE_SYS,

  DINFO_STRUCT_FILE_ANY
};



enum dwarf_gnat_encodings
{
  DWARF_GNAT_ENCODINGS_ALL = 0,



  DWARF_GNAT_ENCODINGS_GDB = 1,


  DWARF_GNAT_ENCODINGS_MINIMAL = 2

};



enum ivar_visibility
{
  IVAR_VISIBILITY_PRIVATE,
  IVAR_VISIBILITY_PROTECTED,
  IVAR_VISIBILITY_PUBLIC,
  IVAR_VISIBILITY_PACKAGE
};


enum stack_reuse_level
{
  SR_NONE,
  SR_NAMED_VARS,
  SR_ALL
};


enum live_patching_level
{
  LIVE_PATCHING_NONE = 0,
  LIVE_PATCHING_INLINE_ONLY_STATIC,
  LIVE_PATCHING_INLINE_CLONE
};


enum reorder_blocks_algorithm
{
  REORDER_BLOCKS_ALGORITHM_SIMPLE,
  REORDER_BLOCKS_ALGORITHM_STC
};


enum ira_algorithm
{
  IRA_ALGORITHM_CB,
  IRA_ALGORITHM_PRIORITY
};


enum ira_region
{
  IRA_REGION_ONE,
  IRA_REGION_ALL,
  IRA_REGION_MIXED,



  IRA_REGION_AUTODETECT
};


enum excess_precision
{
  EXCESS_PRECISION_DEFAULT,
  EXCESS_PRECISION_FAST,
  EXCESS_PRECISION_STANDARD
};


enum permitted_flt_eval_methods
{
  PERMITTED_FLT_EVAL_METHODS_DEFAULT,
  PERMITTED_FLT_EVAL_METHODS_TS_18661,
  PERMITTED_FLT_EVAL_METHODS_C11
};
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum stack_check_type
{

  NO_STACK_CHECK = 0,



  GENERIC_STACK_CHECK,




  STATIC_BUILTIN_STACK_CHECK,



  FULL_BUILTIN_STACK_CHECK
};


enum callgraph_info_type
{

  NO_CALLGRAPH_INFO = 0,


  CALLGRAPH_INFO_NAKED = 1,


  CALLGRAPH_INFO_STACK_USAGE = 2,


  CALLGRAPH_INFO_DYNAMIC_ALLOC = 4
};


enum fp_contract_mode {
  FP_CONTRACT_OFF = 0,
  FP_CONTRACT_ON = 1,
  FP_CONTRACT_FAST = 2
};


enum scalar_storage_order_kind {
  SSO_NATIVE = 0,
  SSO_BIG_ENDIAN,
  SSO_LITTLE_ENDIAN
};


enum vect_cost_model {
  VECT_COST_MODEL_UNLIMITED = 0,
  VECT_COST_MODEL_CHEAP = 1,
  VECT_COST_MODEL_DYNAMIC = 2,
  VECT_COST_MODEL_DEFAULT = 3
};


enum sanitize_code {

  SANITIZE_ADDRESS = 1UL << 0,
  SANITIZE_USER_ADDRESS = 1UL << 1,
  SANITIZE_KERNEL_ADDRESS = 1UL << 2,

  SANITIZE_THREAD = 1UL << 3,

  SANITIZE_LEAK = 1UL << 4,

  SANITIZE_SHIFT_BASE = 1UL << 5,
  SANITIZE_SHIFT_EXPONENT = 1UL << 6,
  SANITIZE_DIVIDE = 1UL << 7,
  SANITIZE_UNREACHABLE = 1UL << 8,
  SANITIZE_VLA = 1UL << 9,
  SANITIZE_NULL = 1UL << 10,
  SANITIZE_RETURN = 1UL << 11,
  SANITIZE_SI_OVERFLOW = 1UL << 12,
  SANITIZE_BOOL = 1UL << 13,
  SANITIZE_ENUM = 1UL << 14,
  SANITIZE_FLOAT_DIVIDE = 1UL << 15,
  SANITIZE_FLOAT_CAST = 1UL << 16,
  SANITIZE_BOUNDS = 1UL << 17,
  SANITIZE_ALIGNMENT = 1UL << 18,
  SANITIZE_NONNULL_ATTRIBUTE = 1UL << 19,
  SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1UL << 20,
  SANITIZE_OBJECT_SIZE = 1UL << 21,
  SANITIZE_VPTR = 1UL << 22,
  SANITIZE_BOUNDS_STRICT = 1UL << 23,
  SANITIZE_POINTER_OVERFLOW = 1UL << 24,
  SANITIZE_BUILTIN = 1UL << 25,
  SANITIZE_POINTER_COMPARE = 1UL << 26,
  SANITIZE_POINTER_SUBTRACT = 1UL << 27,
  SANITIZE_SHIFT = SANITIZE_SHIFT_BASE | SANITIZE_SHIFT_EXPONENT,
  SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE
         | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN
         | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM
         | SANITIZE_BOUNDS | SANITIZE_ALIGNMENT
         | SANITIZE_NONNULL_ATTRIBUTE
         | SANITIZE_RETURNS_NONNULL_ATTRIBUTE
         | SANITIZE_OBJECT_SIZE | SANITIZE_VPTR
         | SANITIZE_POINTER_OVERFLOW | SANITIZE_BUILTIN,
  SANITIZE_UNDEFINED_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST
      | SANITIZE_BOUNDS_STRICT
};


enum incremental_link {
  INCREMENTAL_LINK_NONE,

  INCREMENTAL_LINK_NOLTO,

  INCREMENTAL_LINK_LTO
};


enum sanitize_coverage_code {

  SANITIZE_COV_TRACE_PC = 1 << 0,

  SANITIZE_COV_TRACE_CMP = 1 << 1
};


enum vtv_priority {
  VTV_NO_PRIORITY = 0,
  VTV_STANDARD_PRIORITY = 1,
  VTV_PREINIT_PRIORITY = 2
};


enum lto_partition_model {
  LTO_PARTITION_NONE = 0,
  LTO_PARTITION_ONE = 1,
  LTO_PARTITION_BALANCED = 2,
  LTO_PARTITION_1TO1 = 3,
  LTO_PARTITION_MAX = 4
};


enum lto_linker_output {
  LTO_LINKER_OUTPUT_UNKNOWN,
  LTO_LINKER_OUTPUT_REL,
  LTO_LINKER_OUTPUT_NOLTOREL,
  LTO_LINKER_OUTPUT_DYN,
  LTO_LINKER_OUTPUT_PIE,
  LTO_LINKER_OUTPUT_EXEC
};



enum gfc_init_local_real
{
  GFC_INIT_REAL_OFF = 0,
  GFC_INIT_REAL_ZERO,
  GFC_INIT_REAL_NAN,
  GFC_INIT_REAL_SNAN,
  GFC_INIT_REAL_INF,
  GFC_INIT_REAL_NEG_INF
};



enum gfc_fcoarray
{
  GFC_FCOARRAY_NONE = 0,
  GFC_FCOARRAY_SINGLE,
  GFC_FCOARRAY_LIB
};




enum gfc_convert
{
  GFC_FLAG_CONVERT_NATIVE = 0,
  GFC_FLAG_CONVERT_SWAP,
  GFC_FLAG_CONVERT_BIG,
  GFC_FLAG_CONVERT_LITTLE
};



enum cf_protection_level
{
  CF_NONE = 0,
  CF_BRANCH = 1 << 0,
  CF_RETURN = 1 << 1,
  CF_FULL = CF_BRANCH | CF_RETURN,
  CF_SET = 1 << 2,
  CF_CHECK = 1 << 3
};


enum parloops_schedule_type
{
  PARLOOPS_SCHEDULE_STATIC = 0,
  PARLOOPS_SCHEDULE_DYNAMIC,
  PARLOOPS_SCHEDULE_GUIDED,
  PARLOOPS_SCHEDULE_AUTO,
  PARLOOPS_SCHEDULE_RUNTIME
};
# 7 "./options.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h"
enum stringop_alg
{






# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/stringop.def" 1
# 20 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/stringop.def"

no_stringop,

libcall,

rep_prefix_1_byte,

rep_prefix_4_byte,

rep_prefix_8_byte,

loop_1_byte,

loop,

unrolled_loop,

vector_loop,
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h" 2
last_alg



};


enum calling_abi
{
  SYSV_ABI = 0,
  MS_ABI = 1
};

enum fpmath_unit
{
  FPMATH_387 = 1,
  FPMATH_SSE = 2
};

enum tls_dialect
{
  TLS_DIALECT_GNU,
  TLS_DIALECT_GNU2,
  TLS_DIALECT_SUN
};

enum cmodel {
  CM_32,
  CM_SMALL,
  CM_KERNEL,
  CM_MEDIUM,
  CM_LARGE,
  CM_SMALL_PIC,
  CM_MEDIUM_PIC,
  CM_LARGE_PIC
};

enum pmode {
  PMODE_SI,
  PMODE_DI
};

enum ix86_align_data {
  ix86_align_data_type_compat,
  ix86_align_data_type_abi,
  ix86_align_data_type_cacheline
};

enum asm_dialect {
  ASM_ATT,
  ASM_INTEL
};

enum ix86_veclibabi {
  ix86_veclibabi_type_none,
  ix86_veclibabi_type_svml,
  ix86_veclibabi_type_acml
};

enum stack_protector_guard {
  SSP_TLS,
  SSP_GLOBAL
};

enum prefer_vector_width {
    PVW_NONE,
    PVW_AVX128,
    PVW_AVX256,
    PVW_AVX512
};






enum indirect_branch {
  indirect_branch_unset = 0,
  indirect_branch_keep,
  indirect_branch_thunk,
  indirect_branch_thunk_inline,
  indirect_branch_thunk_extern
};

enum instrument_return {
  instrument_return_none = 0,
  instrument_return_call,
  instrument_return_nop5
};
# 9 "./options.h" 2




struct gcc_options



{




  long x_ix86_stack_protector_guard_offset;





  addr_space_t x_ix86_stack_protector_guard_reg;





  int x_recip_mask;





  long x_function_entry_patch_area_size;





  long x_function_entry_patch_area_start;





  long x_ix86_isa_flags;





  long x_ix86_isa_flags2;





  long x_ix86_isa_flags2_explicit;





  long x_ix86_isa_flags_explicit;





  bool x_dump_base_name_prefixed;





  bool x_exit_after_options;





  bool x_flag_disable_hsa;





  bool x_flag_dump_all_passed;





  bool x_flag_opts_finished;





  bool x_flag_stack_usage_info;





  bool x_flag_warn_unused_result;





  bool x_in_lto_p;





  bool x_use_gnu_debug_info_extensions;





  char * x_help_enum_printed;





  char * x_help_printed;





  const char * x_aux_base_name;





  const char * x_flag_parallel_jobs;





  const char * x_main_input_basename;





  const char * x_main_input_filename;





  const char * x_split_outputs;





  enum debug_info_levels x_debug_info_level;





  enum debug_info_type x_write_symbols;





  enum debug_struct_file x_debug_struct_generic[DINFO_USAGE_NUM_ENUMS];





  enum debug_struct_file x_debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS];





  enum dwarf_gnat_encodings x_gnat_encodings;





  enum incremental_link x_flag_incremental_link;





  enum stack_check_type x_flag_stack_check;





  int x_flag_complex_method;





  int x_flag_debug_asm;





  int x_flag_dump_rtl_in_asm;





  int x_flag_gen_aux_info;





  int x_flag_generate_lto;





  int x_flag_generate_offload;





  int x_flag_print_asm_name;





  int x_flag_shlib;





  int x_ix86_target_flags;





  int x_main_input_baselength;





  int x_optimize;





  int x_optimize_debug;





  int x_optimize_fast;





  int x_optimize_size;





  int x_recip_mask_explicit;





  int x_rtl_dump_and_exit;





  int x_target_flags;





  unsigned int x_flag_sanitize;





  unsigned int x_flag_sanitize_coverage;





  unsigned int x_flag_sanitize_recover;





  unsigned int x_help_columns;





  unsigned int x_initial_max_fld_align;





  void * x_flag_instrument_functions_exclude_files;





  void * x_flag_instrument_functions_exclude_functions;





  int x_help_flag;





  int x_no_sysroot_suffix;





  int x_param_align_loop_iterations;





  int x_param_align_threshold;





  int x_param_analyzer_bb_explosion_factor;





  int x_param_analyzer_max_enodes_for_full_dump;





  int x_param_analyzer_max_enodes_per_program_point;





  int x_param_analyzer_max_recursion_depth;





  int x_param_analyzer_max_svalue_depth;





  int x_param_analyzer_min_snodes_for_call_summary;





  int x_param_asan_globals;





  int x_param_asan_protect_allocas;





  int x_param_asan_instrument_reads;





  int x_param_asan_instrument_writes;





  int x_param_asan_instrumentation_with_call_threshold;





  int x_param_asan_memintrin;





  int x_param_asan_stack;





  int x_param_asan_use_after_return;





  int x_param_avg_loop_niter;





  int x_param_avoid_fma_max_bits;





  int x_param_balance_partitions;





  int x_param_builtin_expect_probability;





  int x_param_builtin_string_cmp_inline_length;





  int x_param_case_values_threshold;





  int x_param_comdat_sharing_probability;





  int x_param_cxx_max_namespaces_for_diagnostic_help;





  int x_param_dse_max_alias_queries_per_store;





  int x_param_dse_max_object_size;





  int x_param_early_inlining_insns;





  int x_param_fsm_maximum_phi_arguments;





  int x_param_fsm_scale_path_blocks;





  int x_param_fsm_scale_path_stmts;





  int x_param_gcse_after_reload_critical_fraction;





  int x_param_gcse_after_reload_partial_fraction;





  int x_param_gcse_cost_distance_ratio;





  int x_param_gcse_unrestricted_cost;





  int x_param_ggc_min_expand;





  int x_param_ggc_min_heapsize;





  int x_param_gimple_fe_computed_hot_bb_threshold;





  int x_param_graphite_allow_codegen_errors;





  int x_param_graphite_max_arrays_per_scop;





  int x_param_graphite_max_nb_scop_params;





  int x_param_hash_table_verification_limit;





  int x_param_hot_bb_count_fraction;





  int x_param_hot_bb_count_ws_permille;





  int x_param_hot_bb_frequency_fraction;





  int x_param_inline_heuristics_hint_percent;





  int x_param_inline_min_speedup;





  int x_param_inline_unit_growth;





  int x_param_integer_share_limit;





  int x_param_ipa_cp_eval_threshold;





  int x_param_ipa_cp_loop_hint_bonus;





  int x_param_ipa_cp_max_recursive_depth;





  int x_param_ipa_cp_min_recursive_probability;





  int x_param_ipa_cp_recursion_penalty;





  int x_param_ipa_cp_single_call_penalty;





  int x_param_ipa_cp_unit_growth;





  int x_param_ipa_cp_value_list_size;





  int x_param_ipa_max_aa_steps;





  int x_param_ipa_max_agg_items;





  int x_param_ipa_max_param_expr_ops;





  int x_param_ipa_max_switch_predicate_bounds;





  int x_param_ipa_sra_max_replacements;





  int x_param_ipa_sra_ptr_growth_factor;





  int x_param_ira_loop_reserved_regs;





  int x_param_ira_max_conflict_table_size;





  int x_param_ira_max_loops_num;





  int x_param_iv_always_prune_cand_set_bound;





  int x_param_iv_consider_all_candidates_bound;





  int x_param_iv_max_considered_uses;





  int x_param_jump_table_max_growth_ratio_for_size;





  int x_param_jump_table_max_growth_ratio_for_speed;





  int x_param_l1_cache_line_size;





  int x_param_l1_cache_size;





  int x_param_l2_cache_size;





  int x_param_large_function_growth;





  int x_param_large_function_insns;





  int x_param_stack_frame_growth;





  int x_param_large_stack_frame;





  int x_param_large_unit_insns;





  int x_param_lim_expensive;





  int x_param_logical_op_non_short_circuit;





  int x_param_loop_block_tile_size;





  int x_param_loop_interchange_max_num_stmts;





  int x_param_loop_interchange_stride_ratio;





  int x_param_loop_invariant_max_bbs_in_loop;





  int x_param_loop_max_datarefs_for_datadeps;





  int x_param_loop_versioning_max_inner_insns;





  int x_param_loop_versioning_max_outer_insns;





  int x_param_lra_inheritance_ebb_probability_cutoff;





  int x_param_lra_max_considered_reload_pseudos;





  int x_param_max_partition_size;





  int x_param_max_lto_streaming_parallelism;





  int x_param_min_partition_size;





  int x_param_lto_partitions;





  int x_param_max_average_unrolled_insns;





  int x_param_max_combine_insns;





  int x_param_max_unroll_iterations;





  int x_param_max_completely_peel_times;





  int x_param_max_completely_peeled_insns;





  int x_param_max_crossjump_edges;





  int x_param_max_cse_insns;





  int x_param_max_cse_path_length;





  int x_param_max_cselib_memory_locations;





  int x_param_max_debug_marker_count;





  int x_param_max_delay_slot_insn_search;





  int x_param_max_delay_slot_live_search;





  int x_param_max_dse_active_local_stores;





  int x_param_early_inliner_max_iterations;





  int x_param_max_fields_for_field_sensitive;





  int x_param_max_find_base_term_values;





  int x_param_max_fsm_thread_length;





  int x_param_max_fsm_thread_path_insns;





  int x_param_max_fsm_thread_paths;





  int x_param_max_gcse_insertion_ratio;





  int x_param_max_gcse_memory;





  int x_param_max_goto_duplication_insns;





  int x_param_max_grow_copy_bb_insns;





  int x_param_max_hoist_depth;





  int x_param_max_inline_insns_auto;





  int x_param_max_inline_insns_recursive_auto;





  int x_param_max_inline_insns_recursive;





  int x_param_max_inline_insns_single;





  int x_param_max_inline_insns_size;





  int x_param_max_inline_insns_small;





  int x_param_max_inline_recursive_depth_auto;





  int x_param_max_inline_recursive_depth;





  int x_param_max_isl_operations;





  int x_param_max_iterations_computation_cost;





  int x_param_max_iterations_to_track;





  int x_param_max_jump_thread_duplication_stmts;





  int x_param_max_last_value_rtl;





  int x_param_max_loop_header_insns;





  int x_param_max_modulo_backtrack_attempts;





  int x_param_max_partial_antic_length;





  int x_param_max_peel_branches;





  int x_param_max_peel_times;





  int x_param_max_peeled_insns;





  int x_param_max_pending_list_length;





  int x_param_max_pipeline_region_blocks;





  int x_param_max_pipeline_region_insns;





  int x_param_max_pow_sqrt_depth;





  int x_param_max_predicted_iterations;





  int x_param_max_reload_search_insns;





  int x_param_max_rtl_if_conversion_insns;





  int x_param_max_rtl_if_conversion_predictable_cost;





  int x_param_max_rtl_if_conversion_unpredictable_cost;





  int x_param_max_sched_extend_regions_iters;





  int x_param_max_sched_insn_conflict_delay;





  int x_param_max_sched_ready_insns;





  int x_param_max_sched_region_blocks;





  int x_param_max_sched_region_insns;





  int x_param_max_slsr_candidate_scan;





  int x_param_max_speculative_devirt_maydefs;





  int x_param_max_ssa_name_query_depth;





  int x_param_max_stores_to_merge;





  int x_param_max_stores_to_sink;





  int x_param_max_tail_merge_comparisons;





  int x_param_max_tail_merge_iterations;





  int x_param_max_tracked_strlens;





  int x_param_max_tree_if_conversion_phi_args;





  int x_param_max_unroll_times;





  int x_param_max_unrolled_insns;





  int x_param_max_unswitch_insns;





  int x_param_max_unswitch_level;





  int x_param_max_variable_expansions;





  int x_param_max_vartrack_expr_depth;





  int x_param_max_vartrack_reverse_op_size;





  int x_param_max_vartrack_size;





  int x_param_max_vrp_switch_assertions;





  int x_param_min_crossjump_insns;





  int x_param_min_inline_recursive_probability;





  int x_param_min_insn_to_prefetch_ratio;





  int x_param_min_loop_cond_split_prob;





  int x_param_min_nondebug_insn_uid;





  int x_param_min_size_for_stack_sharing;





  int x_param_min_spec_prob;





  int x_param_min_vect_loop_bound;





  int x_param_parloops_chunk_size;





  int x_param_parloops_min_per_thread;





  int x_param_parloops_schedule;





  int x_param_partial_inlining_entry_probability;





  int x_param_predictable_branch_outcome;





  int x_param_prefetch_dynamic_strides;





  int x_param_prefetch_latency;





  int x_param_prefetch_min_insn_to_mem_ratio;





  int x_param_prefetch_minimum_stride;





  int x_param_profile_func_internal_id;





  int x_param_promote_statics;





  int x_param_rpo_vn_max_loop_depth;





  int x_param_sccvn_max_alias_queries_per_access;





  int x_param_scev_max_expr_complexity;





  int x_param_scev_max_expr_size;





  int x_param_sched_autopref_queue_depth;





  int x_param_sched_mem_true_dep_cost;





  int x_param_sched_pressure_algorithm;





  int x_param_sched_spec_prob_cutoff;





  int x_param_sched_state_edge_prob_cutoff;





  int x_param_selsched_insns_to_rename;





  int x_param_selsched_max_lookahead;





  int x_param_selsched_max_sched_times;





  int x_param_simultaneous_prefetches;





  int x_param_sink_frequency_threshold;





  int x_param_slp_max_insns_in_bb;





  int x_param_sms_dfa_history;





  int x_param_sms_loop_average_count_threshold;





  int x_param_sms_max_ii_factor;





  int x_param_sms_min_sc;





  int x_param_sra_max_propagations;





  int x_param_sra_max_scalarization_size_size;





  int x_param_sra_max_scalarization_size_speed;





  int x_param_ssa_name_def_chain_limit;





  int x_param_ssp_buffer_size;





  int x_param_stack_clash_protection_guard_size;





  int x_param_stack_clash_protection_probe_interval;





  int x_param_store_merging_allow_unaligned;





  int x_param_store_merging_max_size;





  int x_param_switch_conversion_branch_ratio;





  int x_param_tm_max_aggregate_size;





  int x_param_tracer_dynamic_coverage_feedback;





  int x_param_tracer_dynamic_coverage;





  int x_param_tracer_max_code_growth;





  int x_param_tracer_min_branch_probability_feedback;





  int x_param_tracer_min_branch_probability;





  int x_param_tracer_min_branch_ratio;





  int x_param_tree_reassoc_width;





  int x_param_tsan_distinguish_volatile;





  int x_param_tsan_instrument_func_entry_exit;





  int x_param_uninit_control_dep_attempts;





  int x_param_uninlined_function_insns;





  int x_param_uninlined_function_time;





  int x_param_uninlined_function_thunk_insns;





  int x_param_uninlined_function_thunk_time;





  int x_param_unlikely_bb_count_fraction;





  int x_param_unroll_jam_max_unroll;





  int x_param_unroll_jam_min_percent;





  int x_param_use_after_scope_direct_emission_threshold;





  int x_param_use_canonical_types;





  int x_param_vect_epilogues_nomask;





  int x_param_vect_max_peeling_for_alignment;





  int x_param_vect_max_version_for_alias_checks;





  int x_param_vect_max_version_for_alignment_checks;





  int x_param_vect_partial_vector_usage;





  int x_flag_preprocess_only;





  int x_warn_abi;





  int x_warn_abi_tag;





  int x_warn_absolute_value;





  int x_warn_address;





  int x_warn_address_of_packed_member;





  int x_warn_aggregate_return;





  int x_warn_aggressive_loop_optimizations;





  int x_warn_aliasing;





  int x_warn_align_commons;





  int x_warn_aligned_new;





  long x_warn_alloc_size_limit;





  int x_warn_alloc_zero;





  int x_warn_alloca;





  long x_warn_alloca_limit;





  int x_warn_ampersand;





  int x_warn_analyzer_double_fclose;





  int x_warn_analyzer_double_free;





  int x_warn_analyzer_exposure_through_output_file;





  int x_warn_analyzer_file_leak;





  int x_warn_analyzer_free_of_non_heap;





  int x_warn_analyzer_malloc_leak;





  int x_warn_analyzer_null_argument;





  int x_warn_analyzer_null_dereference;





  int x_warn_analyzer_possible_null_argument;





  int x_warn_analyzer_possible_null_dereference;





  int x_warn_analyzer_stale_setjmp_buffer;





  int x_warn_analyzer_tainted_array_index;





  int x_warn_analyzer_too_complex;





  int x_warn_analyzer_unsafe_call_within_signal_handler;





  int x_warn_analyzer_use_after_free;





  int x_warn_analyzer_use_of_pointer_in_stale_stack_frame;





  int x_warn_arith_conv;





  int x_warn_array_bounds;





  int x_warn_array_temporaries;





  int x_warn_assign_intercept;





  int x_warn_attribute_alias;





  int x_warn_attribute_warning;





  int x_warn_attributes;





  int x_warn_bad_function_cast;





  int x_warn_bool_compare;





  int x_warn_bool_op;





  int x_warn_builtin_declaraion_mismatch;





  int x_cpp_warn_builtin_macro_redefined;





  int x_warn_cxx_compat;





  int x_warn_cxx11_compat;





  int x_warn_cxx14_compat;





  int x_warn_cxx17_compat;





  int x_warn_cxx20_compat;





  int x_warn_c_binding_type;





  int x_warn_c11_c2x_compat;





  int x_warn_c90_c99_compat;





  int x_warn_c99_c11_compat;





  int x_warn_cannot_profile;





  int x_warn_cast_align;





  int x_warn_cast_function_type;





  int x_warn_cast_qual;





  int x_warn_cast_result;





  int x_warn_catch_value;





  int x_warn_char_subscripts;





  int x_warn_character_truncation;





  int x_warn_class_conversion;





  int x_warn_class_memaccess;





  int x_warn_clobbered;





  int x_warn_comma_subscript;





  int x_cpp_warn_comment;





  int x_warn_compare_reals;





  int x_warn_conditionally_supported;





  int x_warn_conversion;





  int x_warn_conversion_extra;





  int x_warn_conversion_null;





  int x_warn_coverage_mismatch;





  int x_warn_cpp;





  int x_warn_ctor_dtor_privacy;





  int x_warn_dangling_else;





  int x_cpp_warn_date_time;





  int x_warn_declaration_after_statement;





  int x_warn_delete_incomplete;





  int x_warn_delnonvdtor;





  int x_warn_deprecated;





  int x_warn_deprecated_copy;





  int x_warn_deprecated_decl;





  int x_warn_designated_init;





  int x_warn_disabled_optimization;





  int x_warn_discarded_array_qualifiers;





  int x_warn_discarded_qualifiers;





  int x_warn_div_by_zero;





  int x_warn_do_subscript;





  int x_warn_double_promotion;





  int x_warn_duplicate_decl_specifier;





  int x_warn_duplicated_branches;





  int x_warn_duplicated_cond;





  int x_warn_ecpp;





  int x_warn_empty_body;





  int x_cpp_warn_endif_labels;





  int x_warn_enum_compare;





  int x_warn_enum_conversion;





  int x_warnings_are_errors;





  int x_cpp_warn_expansion_to_defined;





  int x_extra_warnings;





  int x_warn_extra_semi;





  int x_flag_fatal_errors;





  int x_warn_float_conversion;





  int x_warn_float_equal;





  int x_warn_format_contains_nul;





  int x_warn_format_diag;





  int x_warn_format_extra_args;





  int x_warn_format_nonliteral;





  int x_warn_format_overflow;





  int x_warn_format_security;





  int x_warn_format_signedness;





  int x_warn_format_trunc;





  int x_warn_format_y2k;





  int x_warn_format_zero_length;





  int x_warn_format;





  int x_warn_frame_address;





  long x_warn_frame_larger_than_size;





  int x_warn_free_nonheap_object;





  int x_flag_warn_frontend_loop_interchange;





  int x_warn_function_elimination;





  int x_warn_if_not_aligned;





  int x_warn_ignored_attributes;





  int x_warn_ignored_qualifiers;





  int x_warn_implicit;





  int x_warn_implicit_fallthrough;





  int x_warn_implicit_function_declaration;





  int x_warn_implicit_int;





  int x_warn_implicit_interface;





  int x_warn_implicit_procedure;





  int x_warn_inaccessible_base;





  int x_warn_incompatible_pointer_types;





  int x_warn_inh_var_ctor;





  int x_warn_init_list;





  int x_warn_init_self;





  int x_warn_inline;





  int x_warn_int_conversion;





  int x_warn_int_in_bool_context;





  int x_warn_int_to_pointer_cast;





  int x_warn_integer_division;





  int x_warn_intrinsic_shadow;





  int x_warn_intrinsics_std;





  int x_warn_invalid_memory_model;





  int x_warn_invalid_offsetof;





  int x_cpp_warn_invalid_pch;





  int x_warn_jump_misses_init;





  long x_warn_larger_than_size;





  int x_warn_line_truncation;





  int x_cpp_warn_literal_suffix;





  int x_warn_logical_not_paren;





  int x_warn_logical_op;





  int x_warn_long_long;





  int x_warn_lto_type_mismatch;





  int x_warn_main;





  int x_warn_maybe_uninitialized;





  int x_warn_memset_elt_size;





  int x_warn_memset_transposed_args;





  int x_warn_misleading_indentation;





  int x_warn_mismatched_tags;





  int x_warn_missing_attributes;





  int x_warn_missing_braces;





  int x_warn_missing_declarations;





  int x_warn_missing_field_initializers;





  int x_cpp_warn_missing_include_dirs;





  int x_warn_missing_parameter_type;





  int x_warn_missing_profile;





  int x_warn_missing_prototypes;





  int x_cpp_warn_multichar;





  int x_warn_multiple_inheritance;





  int x_warn_multistatement_macros;





  int x_warn_namespaces;





  int x_warn_narrowing;





  int x_warn_nested_externs;





  int x_warn_noexcept;





  int x_warn_noexcept_type;





  int x_warn_nontemplate_friend;





  int x_warn_nonvdtor;





  int x_warn_nonnull;





  int x_warn_nonnull_compare;





  int x_cpp_warn_normalize;





  int x_warn_null_dereference;





  int x_warn_odr_violations;





  int x_warn_old_style_cast;





  int x_warn_old_style_declaration;





  int x_warn_old_style_definition;





  int x_warn_openmp_simd;





  int x_warn_overflow;





  int x_warn_overlength_strings;





  int x_warn_overloaded_virtual;





  int x_warn_override_init;





  int x_warn_override_init_side_effects;





  int x_warn_overwrite_recursive;





  int x_warn_packed;





  int x_warn_packed_bitfield_compat;





  int x_warn_packed_not_aligned;





  int x_warn_padded;





  int x_warn_parentheses;





  int x_pedantic;





  int x_warn_pessimizing_move;





  int x_warn_placement_new;





  int x_warn_pmf2ptr;





  int x_warn_pointer_arith;





  int x_warn_pointer_compare;





  int x_warn_pointer_sign;





  int x_warn_pointer_to_int_cast;





  int x_warn_pragmas;





  int x_warn_prio_ctor_dtor;





  int x_warn_property_assign_default;





  int x_warn_protocol;





  int x_warn_psabi;





  int x_warn_real_q_constant;





  int x_warn_realloc_lhs;





  int x_warn_realloc_lhs_all;





  int x_warn_redundant_decls;





  int x_warn_redundant_move;





  int x_warn_redundant_tags;





  int x_warn_register;





  int x_warn_reorder;





  int x_warn_restrict;





  int x_warn_return_local_addr;





  int x_warn_return_type;





  int x_warn_scalar_storage_order;





  int x_warn_selector;





  int x_warn_sequence_point;





  int x_warn_shadow;





  int x_warn_shadow_ivar;





  int x_warn_shadow_compatible_local;





  int x_warn_shadow_local;





  int x_warn_shift_count_negative;





  int x_warn_shift_count_overflow;





  int x_warn_shift_negative_value;





  int x_warn_shift_overflow;





  int x_warn_sign_compare;





  int x_warn_sign_conversion;





  int x_warn_sign_promo;





  int x_warn_sized_deallocation;





  int x_warn_sizeof_array_argument;





  int x_warn_sizeof_pointer_div;





  int x_warn_sizeof_pointer_memaccess;





  int x_warn_stack_protect;





  long x_warn_stack_usage;





  int x_warn_strict_aliasing;





  int x_warn_strict_null_sentinel;





  int x_warn_strict_overflow;





  int x_warn_strict_prototypes;





  int x_warn_strict_selector_match;





  int x_warn_string_compare;





  int x_warn_stringop_overflow;





  int x_warn_stringop_truncation;





  int x_warn_subobject_linkage;





  int x_warn_suggest_attribute_cold;





  int x_warn_suggest_attribute_const;





  int x_warn_suggest_attribute_format;





  int x_warn_suggest_attribute_malloc;





  int x_warn_suggest_attribute_noreturn;





  int x_warn_suggest_attribute_pure;





  int x_warn_suggest_final_methods;





  int x_warn_suggest_final_types;





  int x_warn_override;





  int x_warn_surprising;





  int x_warn_switch;





  int x_warn_switch_bool;





  int x_warn_switch_default;





  int x_warn_switch_enum;





  int x_warn_switch_outside_range;





  int x_warn_switch_unreachable;





  int x_warn_sync_nand;





  int x_warn_synth;





  int x_warn_system_headers;





  int x_warn_tabs;





  int x_warn_target_lifetime;





  int x_warn_tautological_compare;





  int x_warn_templates;





  int x_warn_terminate;





  int x_warn_traditional;





  int x_warn_traditional_conversion;





  int x_warn_trampolines;





  int x_cpp_warn_trigraphs;





  int x_warn_type_limits;





  int x_warn_undeclared_selector;





  int x_cpp_warn_undef;





  int x_warn_undefined_do_loop;





  int x_warn_underflow;





  int x_warn_uninitialized;





  int x_warn_unknown_pragmas;





  int x_warn_unsuffixed_float_constants;





  int x_warn_unused;





  int x_warn_unused_but_set_parameter;





  int x_warn_unused_but_set_variable;





  int x_warn_unused_const_variable;





  int x_warn_unused_dummy_argument;





  int x_warn_unused_function;





  int x_warn_unused_label;





  int x_warn_unused_local_typedefs;





  int x_cpp_warn_unused_macros;





  int x_warn_unused_parameter;





  int x_warn_unused_result;





  int x_warn_unused_value;





  int x_warn_unused_variable;





  int x_warn_use_without_only;





  int x_warn_useless_cast;





  int x_warn_varargs;





  int x_cpp_warn_variadic_macros;





  int x_warn_vector_operation_performance;





  int x_warn_virtual_inheritance;





  int x_warn_virtual_move_assign;





  int x_warn_vla;





  long x_warn_vla_limit;





  int x_warn_volatile;





  int x_warn_volatile_register_var;





  int x_warn_write_strings;





  int x_warn_zero_as_null_pointer_constant;





  int x_warn_zero_length_bounds;





  int x_warn_zerotrip;





  const char *x_aux_info_file_name;





  int x_flag_dump_callgraph;





  int x_flag_lto_dump_defined;





  int x_flag_lto_dump_demangle;





  const char *x_flag_dump_body;





  const char *x_flag_dump_level;





  const char *x_dump_base_name;





  const char *x_dump_base_ext;





  const char *x_dump_dir_name;





  int x_flag_pic;





  int x_flag_pie;





  int x_flag_abi_compat_version;





  int x_flag_abi_version;





  int x_flag_access_control;





  const char *x_ada_specs_parent;





  int x_flag_aggressive_function_elimination;





  int x_flag_aggressive_loop_optimizations;





  int x_flag_align_commons;





  int x_flag_align_functions;





  const char *x_str_align_functions;





  int x_flag_align_jumps;





  const char *x_str_align_jumps;





  int x_flag_align_labels;





  const char *x_str_align_labels;





  int x_flag_align_loops;





  const char *x_str_align_loops;





  int x_aligned_new_threshold;





  int x_flag_all_intrinsics;





  int x_flag_allocation_dce;





  int x_flag_allow_argument_mismatch;





  int x_flag_allow_invalid_boz;





  int x_flag_allow_leading_underscore;





  int x_flag_allow_parameterless_variadic_functions;





  int x_flag_store_data_races;





  int x_flag_analyzer;





  int x_flag_analyzer_call_summaries;





  const char *x_flag_analyzer_checker;





  int x_flag_analyzer_fine_grained;





  int x_flag_analyzer_show_duplicate_count;





  int x_flag_analyzer_state_merge;





  int x_flag_analyzer_state_purge;





  int x_flag_analyzer_transitivity;





  int x_flag_analyzer_verbose_edges;





  int x_flag_analyzer_verbose_state_changes;





  int x_analyzer_verbosity;





  void *x_common_deferred_options;





  int x_flag_no_asm;





  int x_flag_assert;





  int x_flag_associative_math;





  int x_flag_assume_phsa;





  int x_flag_asynchronous_unwind_tables;





  int x_flag_auto_inc_dec;





  int x_flag_auto_profile;





  const char *x_auto_profile_file;





  int x_flag_automatic;





  int x_flag_backslash;





  int x_flag_backtrace;





  int x_flag_blas_matmul_limit;





  int x_flag_bounds_check;





  int x_flag_branch_on_count_reg;





  int x_flag_branch_probabilities;





  int x_flag_building_libgcc;





  int x_flag_building_libphobos_tests;





  int x_flag_no_builtin;





  int x_flag_c_prototypes;





  int x_flag_c_prototypes_external;





  int x_flag_caller_saves;





  int x_flag_callgraph_info;





  enum cf_protection_level x_flag_cf_protection;





  int x_flag_char8_t;





  int x_flag_check_new;





  int x_flag_checking;





  enum gfc_fcoarray x_flag_coarray;





  int x_flag_code_hoisting;





  int x_flag_combine_stack_adjustments;





  int x_flag_no_common;





  int x_flag_compare_debug;





  const char *x_flag_compare_debug_opt;





  int x_flag_compare_elim_after_reload;





  int x_flag_concepts;





  int x_concepts_diagnostics_max_depth;





  int x_flag_concepts_ts;





  int x_flag_conserve_stack;





  int x_constexpr_cache_depth;





  int x_max_constexpr_depth;





  int x_constexpr_loop_limit;





  long x_constexpr_ops_limit;





  enum gfc_convert x_flag_convert;





  int x_flag_coroutines;





  int x_flag_cprop_registers;





  int x_flag_cray_pointer;





  int x_flag_crossjumping;





  int x_flag_cse_follow_jumps;





  int x_flag_cx_fortran_rules;





  int x_flag_cx_limited_range;





  int x_flag_data_sections;





  int x_flag_dce;





  int x_flag_debug_types_section;





  int x_flag_dec;





  int x_flag_dec_blank_format_item;





  int x_flag_dec_char_conversions;





  int x_flag_dec_format_defaults;





  int x_flag_dec_include;





  int x_flag_dec_intrinsic_ints;





  int x_flag_dec_math;





  int x_flag_dec_static;





  int x_flag_dec_structure;





  int x_flag_declone_ctor_dtor;





  int x_flag_default_double;





  int x_flag_default_integer;





  int x_flag_default_real_10;





  int x_flag_default_real_16;





  int x_flag_default_real_8;





  int x_flag_defer_pop;





  int x_flag_delayed_branch;





  int x_flag_delete_dead_exceptions;





  int x_flag_delete_null_pointer_checks;





  int x_flag_devirtualize;





  int x_flag_ltrans_devirtualize;





  int x_flag_devirtualize_speculatively;





  int x_flag_diagnostics_show_color;





  int x_flag_diagnostics_generate_patch;





  int x_diagnostics_minimum_margin_width;





  int x_flag_diagnostics_parseable_fixits;





  int x_flag_diagnostics_path_format;





  int x_flag_diagnostics_show_caret;





  int x_flag_diagnostics_show_cwe;





  int x_flag_diagnostics_show_labels;





  int x_flag_diagnostics_show_line_numbers;





  int x_flag_diagnostics_show_option;





  int x_flag_diagnostics_show_path_depths;





  int x_flag_diagnostics_show_template_tree;





  int x_flag_diagnostics_show_urls;





  int x_flag_dollar_ok;





  int x_flag_dse;





  int x_flag_dump_ada_spec;





  int x_flag_dump_ada_spec_slim;





  int x_flag_dump_analyzer;





  int x_flag_dump_analyzer_callgraph;





  int x_flag_dump_analyzer_exploded_graph;





  int x_flag_dump_analyzer_exploded_nodes;





  int x_flag_dump_analyzer_exploded_nodes_2;





  int x_flag_dump_analyzer_exploded_nodes_3;





  int x_flag_dump_analyzer_state_purge;





  int x_flag_dump_analyzer_stderr;





  int x_flag_dump_analyzer_supergraph;





  const char *x_flag_dump_final_insns;





  int x_flag_dump_fortran_global;





  int x_flag_dump_fortran_optimized;





  int x_flag_dump_fortran_original;





  const char *x_flag_dump_go_spec;





  int x_flag_dump_locations;





  int x_flag_dump_noaddr;





  int x_flag_dump_passes;





  int x_flag_dump_scos;





  int x_flag_dump_unnumbered;





  int x_flag_dump_unnumbered_links;





  int x_flag_dwarf2_cfi_asm;





  int x_flag_early_inlining;





  int x_flag_elide_constructors;





  int x_flag_elide_type;





  int x_flag_debug_only_used_symbols;





  int x_flag_eliminate_unused_debug_types;





  int x_flag_emit_class_debug_always;





  int x_flag_enforce_eh_specs;





  int x_flag_exceptions;





  enum excess_precision x_flag_excess_precision;





  int x_flag_expensive_optimizations;





  int x_flag_ext_numeric_literals;





  int x_flag_extern_tls_init;





  int x_flag_external_blas;





  int x_flag_f2c;





  int x_flag_fat_lto_objects;





  int x_flag_finite_loops;





  int x_flag_finite_math_only;





  int x_flag_fixed_line_length;





  int x_flag_float_store;





  int x_flag_forward_propagate;





  enum fp_contract_mode x_flag_fp_contract_mode;





  int x_flag_fp_int_builtin_inexact;





  int x_flag_free_line_length;





  int x_flag_frontend_loop_interchange;





  int x_flag_frontend_optimize;





  int x_flag_no_function_cse;





  int x_flag_function_sections;





  int x_flag_gcse;





  int x_flag_gcse_after_reload;





  int x_flag_gcse_las;





  int x_flag_gcse_lm;





  int x_flag_gcse_sm;





  int x_flag_gimple;





  int x_flag_no_gnu_keywords;





  int x_flag_next_runtime;





  int x_flag_tm;





  int x_flag_gnu_unique;





  int x_flag_gnu89_inline;





  int x_go_check_divide_overflow;





  int x_go_check_divide_zero;





  int x_go_compiling_runtime;





  int x_go_debug_escape_level;





  const char *x_go_debug_escape_hash;





  int x_go_debug_optimization;





  int x_flag_graphite;





  int x_flag_graphite_identity;





  int x_flag_guess_branch_prob;





  int x_flag_hoist_adjacent_loads;





  int x_flag_no_ident;





  int x_flag_if_conversion;





  int x_flag_if_conversion2;





  int x_flag_implement_inlines;





  int x_flag_implicit_inline_templates;





  int x_flag_implicit_none;





  int x_flag_implicit_templates;





  int x_flag_indirect_inlining;





  int x_flag_inhibit_size_directive;





  int x_flag_init_derived;





  enum gfc_init_local_real x_flag_init_real;





  int x_flag_no_inline;





  int x_flag_inline_arg_packing;





  int x_flag_inline_atomics;





  int x_flag_inline_functions;





  int x_flag_inline_functions_called_once;





  int x_flag_inline_matmul_limit;





  int x_flag_inline_small_functions;





  int x_flag_instrument_function_entry_exit;





  int x_flag_integer4_kind;





  int x_flag_invariants;





  int x_flag_ipa_bit_cp;





  int x_flag_ipa_cp;





  int x_flag_ipa_cp_clone;





  int x_flag_ipa_icf;





  int x_flag_ipa_icf_functions;





  int x_flag_ipa_icf_variables;





  int x_flag_ipa_profile;





  int x_flag_ipa_pta;





  int x_flag_ipa_pure_const;





  int x_flag_ipa_ra;





  int x_flag_ipa_reference;





  int x_flag_ipa_reference_addressable;





  int x_flag_ipa_sra;





  int x_flag_ipa_stack_alignment;





  int x_flag_ipa_vrp;





  enum ira_algorithm x_flag_ira_algorithm;





  int x_flag_ira_hoist_pressure;





  int x_flag_ira_loop_pressure;





  enum ira_region x_flag_ira_region;





  int x_flag_ira_share_save_slots;





  int x_flag_ira_share_spill_slots;





  int x_flag_ira_verbose;





  int x_flag_isolate_erroneous_paths_attribute;





  int x_flag_isolate_erroneous_paths_dereference;





  enum ivar_visibility x_default_ivar_visibility;





  int x_flag_ivopts;





  int x_flag_jump_tables;





  int x_flag_keep_gc_roots_live;





  int x_flag_keep_inline_dllexport;





  int x_flag_keep_inline_functions;





  int x_flag_keep_static_consts;





  int x_flag_keep_static_functions;





  int x_flag_large_source_files;





  int x_flag_lax_vector_conversions;





  int x_flag_leading_underscore;





  int x_flag_lifetime_dse;





  int x_flag_limit_function_alignment;





  enum lto_linker_output x_flag_lto_linker_output;





  enum live_patching_level x_flag_live_patching;





  int x_flag_live_range_shrinkage;





  int x_flag_local_ivars;





  int x_flag_loop_interchange;





  int x_flag_loop_nest_optimize;





  int x_flag_loop_parallelize_all;





  int x_flag_unroll_jam;





  int x_flag_lra_remat;





  int x_flag_lto_compression_level;





  enum lto_partition_model x_flag_lto_partition;





  int x_flag_lto_report;





  int x_flag_lto_report_wpa;





  const char *x_flag_lto;





  int x_flag_ltrans;





  const char *x_ltrans_output_list;





  int x_flag_errno_math;





  int x_flag_max_array_constructor;





  int x_flag_max_errors;





  int x_flag_max_stack_var_size;





  int x_flag_max_subrecord_length;





  int x_mem_report;





  int x_mem_report_wpa;





  int x_flag_merge_constants;





  int x_flag_merge_debug_strings;





  int x_flag_module_private;





  int x_flag_moduleinfo;





  int x_flag_modulo_sched;





  int x_flag_modulo_sched_allow_regmoves;





  int x_flag_move_loop_invariants;





  int x_flag_ms_extensions;





  int x_flag_new_inheriting_ctors;





  int x_flag_new_ttp;





  int x_flag_nil_receivers;





  int x_flag_non_call_exceptions;





  int x_flag_no_nonansi_builtin;





  int x_flag_nothrow_opt;





  int x_flag_objc_abi;





  int x_flag_objc_call_cxx_cdtors;





  int x_flag_objc_direct_dispatch;





  int x_flag_objc_exceptions;





  int x_flag_objc_gc;





  int x_flag_objc_nilcheck;





  int x_flag_objc_sjlj_exceptions;





  int x_flag_objc1_only;





  enum offload_abi x_flag_offload_abi;





  int x_flag_omit_frame_pointer;





  int x_flag_openacc;





  const char *x_flag_openacc_dims;





  int x_flag_openmp;





  int x_flag_openmp_simd;





  int x_flag_opt_info;





  int x_flag_optimize_sibling_calls;





  int x_flag_optimize_strlen;





  int x_flag_pack_derived;





  int x_flag_pack_struct;





  int x_flag_pad_source;





  int x_flag_partial_inlining;





  int x_flag_pcc_struct_return;





  int x_flag_peel_loops;





  int x_flag_no_peephole;





  int x_flag_peephole2;





  int x_flag_permissive;





  enum permitted_flt_eval_methods x_flag_permitted_flt_eval_methods;





  int x_flag_plan9_extensions;





  int x_flag_plt;





  int x_post_ipa_mem_report;





  int x_flag_postconditions;





  const char *x_flag_pre_include;





  int x_pre_ipa_mem_report;





  int x_flag_preconditions;





  int x_flag_predictive_commoning;





  int x_flag_prefetch_loop_arrays;





  int x_flag_pretty_templates;





  int x_flag_printf_return_value;





  int x_profile_flag;





  int x_profile_abs_path_flag;





  int x_profile_arc_flag;





  int x_flag_profile_correction;





  const char *x_profile_data_prefix;





  const char *x_flag_profile_exclude_files;





  const char *x_flag_profile_filter_files;





  const char *x_profile_note_location;





  int x_flag_profile_partial_training;





  const char *x_profile_prefix_path;





  int x_flag_profile_reorder_functions;





  int x_profile_report;





  enum profile_reproducibility x_flag_profile_reproducible;





  enum profile_update x_flag_profile_update;





  int x_flag_profile_use;





  int x_flag_profile_values;





  int x_flag_protect_parens;





  int x_flag_range_check;





  int x_flag_real4_kind;





  int x_flag_real8_kind;





  int x_flag_realloc_lhs;





  int x_flag_reciprocal_math;





  int x_flag_record_gcc_switches;





  int x_flag_record_marker;





  int x_flag_recursive;





  int x_flag_ree;





  int x_flag_rename_registers;





  int x_flag_reorder_blocks;





  enum reorder_blocks_algorithm x_flag_reorder_blocks_algorithm;





  int x_flag_reorder_blocks_and_partition;





  int x_flag_reorder_functions;





  int x_flag_repack_arrays;





  int x_flag_replace_objc_classes;





  int x_flag_report_bug;





  int x_go_require_return_statement;





  int x_flag_rerun_cse_after_loop;





  int x_flag_resched_modulo_sched;





  int x_flag_rounding_math;





  int x_flag_rtti;





  int x_flag_sanitize_address_use_after_scope;





  int x_flag_sanitize_undefined_trap_on_error;





  int x_flag_save_optimization_record;





  int x_flag_sched_critical_path_heuristic;





  int x_flag_sched_dep_count_heuristic;





  int x_flag_sched_group_heuristic;





  int x_flag_schedule_interblock;





  int x_flag_sched_last_insn_heuristic;





  int x_flag_sched_pressure;





  int x_flag_sched_rank_heuristic;





  int x_flag_schedule_speculative;





  int x_flag_sched_spec_insn_heuristic;





  int x_flag_schedule_speculative_load;





  int x_flag_schedule_speculative_load_dangerous;





  int x_flag_sched_stalled_insns;





  int x_flag_sched_stalled_insns_dep;





  int x_sched_verbose_param;





  int x_flag_sched2_use_superblocks;





  int x_flag_schedule_fusion;





  int x_flag_schedule_insns;





  int x_flag_schedule_insns_after_reload;





  int x_flag_second_underscore;





  int x_flag_section_anchors;





  int x_flag_sel_sched_pipelining;





  int x_flag_sel_sched_pipelining_outer_loops;





  int x_flag_sel_sched_reschedule_pipelined;





  int x_flag_selective_scheduling;





  int x_flag_selective_scheduling2;





  const char *x_flag_self_test;





  int x_flag_semantic_interposition;





  int x_flag_short_enums;





  int x_flag_short_wchar;





  int x_flag_show_column;





  int x_flag_shrink_wrap;





  int x_flag_shrink_wrap_separate;





  int x_flag_sign_zero;





  int x_flag_signaling_nans;





  int x_flag_signed_bitfields;





  int x_flag_signed_char;





  int x_flag_signed_zeros;





  enum vect_cost_model x_flag_simd_cost_model;





  int x_flag_single_precision_constant;





  int x_flag_sized_deallocation;





  int x_flag_split_ivs_in_unroller;





  int x_flag_split_loops;





  int x_flag_split_paths;





  int x_flag_split_stack;





  int x_flag_split_wide_types;





  int x_flag_split_wide_types_early;





  int x_flag_ssa_backprop;





  int x_flag_ssa_phiopt;





  enum scalar_storage_order_kind x_default_sso;





  int x_flag_stack_arrays;





  int x_flag_stack_clash_protection;





  int x_flag_stack_protect;





  enum stack_reuse_level x_flag_stack_reuse;





  int x_flag_stack_usage;





  int x_flag_detailed_statistics;





  int x_flag_stdarg_opt;





  int x_flag_store_merging;





  int x_flag_strict_aliasing;





  int x_flag_strict_enums;





  int x_flag_strict_volatile_bitfields;





  int x_flag_strong_eval_order;





  int x_flag_switch_errors;





  int x_flag_sync_libcalls;





  int x_flag_syntax_only;





  int x_flag_tail_call_workaround;





  int x_template_backtrace_limit;





  int x_flag_test_coverage;





  int x_flag_test_forall_temp;





  int x_flag_thread_jumps;





  int x_flag_threadsafe_statics;





  int x_time_report;





  int x_time_report_details;





  enum tls_model x_flag_tls_default;





  int x_flag_toplevel_reorder;





  int x_flag_tracer;





  int x_flag_trampolines;





  int x_flag_trapping_math;





  int x_flag_trapv;





  int x_flag_tree_bit_ccp;





  int x_flag_tree_builtin_call_dce;





  int x_flag_tree_ccp;





  int x_flag_tree_ch;





  int x_flag_tree_coalesce_vars;





  int x_flag_tree_copy_prop;





  int x_flag_tree_cselim;





  int x_flag_tree_dce;





  int x_flag_tree_dom;





  int x_flag_tree_dse;





  int x_flag_tree_forwprop;





  int x_flag_tree_fre;





  int x_flag_tree_loop_distribute_patterns;





  int x_flag_tree_loop_distribution;





  int x_flag_tree_loop_if_convert;





  int x_flag_tree_loop_im;





  int x_flag_tree_loop_ivcanon;





  int x_flag_tree_loop_optimize;





  int x_flag_tree_loop_vectorize;





  int x_flag_tree_live_range_split;





  int x_flag_tree_parallelize_loops;





  int x_flag_tree_partial_pre;





  int x_flag_tree_phiprop;





  int x_flag_tree_pre;





  int x_flag_tree_pta;





  int x_flag_tree_reassoc;





  int x_flag_tree_scev_cprop;





  int x_flag_tree_sink;





  int x_flag_tree_slp_vectorize;





  int x_flag_tree_slsr;





  int x_flag_tree_sra;





  int x_flag_tree_switch_conversion;





  int x_flag_tree_tail_merge;





  int x_flag_tree_ter;





  int x_flag_tree_vrp;





  int x_flag_unconstrained_commons;





  int x_flag_underscoring;





  int x_flag_unit_at_a_time;





  int x_flag_unroll_all_loops;





  int x_flag_cunroll_grow_size;





  int x_flag_unroll_loops;





  int x_flag_unsafe_math_optimizations;





  int x_flag_unswitch_loops;





  int x_flag_unwind_tables;





  int x_flag_use_cxa_atexit;





  int x_flag_use_cxa_get_exception_ptr;





  int x_flag_use_linker_plugin;





  int x_flag_var_tracking;





  int x_flag_var_tracking_assignments;





  int x_flag_var_tracking_assignments_toggle;





  int x_flag_var_tracking_uninit;





  int x_flag_variable_expansion_in_unroller;





  enum vect_cost_model x_flag_vect_cost_model;





  int x_flag_verbose_asm;





  int x_flag_version_loops_for_strides;





  int x_flag_visibility_ms_compat;





  enum symbol_visibility x_default_visibility;





  int x_flag_value_profile_transformations;





  enum vtv_priority x_flag_vtable_verify;





  int x_flag_vtv_counts;





  int x_flag_vtv_debug;





  int x_flag_weak;





  int x_flag_web;





  int x_flag_whole_program;





  int x_flag_working_directory;





  const char *x_flag_wpa;





  int x_flag_wrapv;





  int x_flag_wrapv_pointer;





  int x_flag_zero_initialized_in_bss;





  int x_flag_zero_link;





  int x_dwarf2out_as_loc_support;





  int x_dwarf2out_as_locview_support;





  int x_debug_column_info;





  int x_flag_describe_dies;





  int x_dwarf_version;





  int x_flag_gen_declaration;





  int x_debug_generate_pub_sections;





  int x_flag_lto_gimple_stats;





  int x_debug_inline_points;





  int x_debug_internal_reset_location_views;





  int x_dwarf_record_gcc_switches;





  int x_dwarf_split_debug_info;





  int x_debug_nonbind_markers_p;





  int x_dwarf_strict;





  int x_flag_gtoggle;





  int x_debug_variable_location_views;





  int x_flag_lto_dump_tool_help;





  const char *x_imultiarch;





  const char *x_plugindir_string;





  int x_flag_lto_dump_list;





  enum calling_abi x_ix86_abi;





  enum pmode x_ix86_pmode;





  enum ix86_align_data x_ix86_align_data_type;





  int x_flag_android;





  const char *x_ix86_arch_string;





  enum asm_dialect x_ix86_asm_dialect;





  int x_linux_libc;





  int x_ix86_branch_cost;





  int x_flag_cet_switch;





  enum cmodel x_ix86_cmodel;





  int x_flag_dispatch_scheduler;





  int x_ix86_dump_tunes;





  int x_flag_fentry;





  const char *x_fentry_name;





  const char *x_fentry_section;





  int x_ix86_force_drap;





  int x_flag_force_indirect_call;





  enum fpmath_unit x_ix86_fpmath;





  enum indirect_branch x_ix86_function_return;





  int x_ix86_incoming_stack_boundary_arg;





  int x_ix86_indirect_branch_register;





  enum indirect_branch x_ix86_indirect_branch;





  enum instrument_return x_ix86_instrument_return;





  int x_ix86_section_threshold;





  int x_flag_manual_endbr;





  const char *x_ix86_tune_memcpy_strategy;





  const char *x_ix86_tune_memset_strategy;





  int x_ix86_tune_no_default;





  int x_flag_nop_mcount;





  enum prefer_vector_width x_prefer_vector_width_type;





  int x_ix86_preferred_stack_boundary_arg;





  const char *x_ix86_recip_name;





  int x_flag_record_mcount;





  int x_ix86_flag_record_return;





  int x_ix86_regparm;





  int x_flag_skip_rax_setup;





  int x_ix86_sse2avx;





  const char *x_ix86_stack_protector_guard_offset_str;





  const char *x_ix86_stack_protector_guard_reg_str;





  const char *x_ix86_stack_protector_guard_symbol_str;





  enum stack_protector_guard x_ix86_stack_protector_guard;





  int x_ix86_force_align_arg_pointer;





  enum stringop_alg x_ix86_stringop_alg;





  enum tls_dialect x_ix86_tls_dialect;





  const char *x_ix86_tune_ctrl_string;





  const char *x_ix86_tune_string;





  enum ix86_veclibabi x_ix86_veclibabi_type;





  int x_flag_lto_name_sort;





  const char *x_asm_file_name;





  int x_flag_lto_dump_objects;





  int x_pass_exit_codes;





  int x_flag_pedantic_errors;





  int x_use_pipes;





  const char *x_print_file_name;





  int x_print_multi_directory;





  int x_print_multi_lib;





  int x_print_multi_os_directory;





  int x_print_multiarch;





  const char *x_print_prog_name;





  int x_print_search_dirs;





  int x_print_sysroot;





  int x_print_sysroot_headers_suffix;





  int x_flag_lto_print_value;





  int x_quiet_flag;





  int x_flag_lto_reverse_sort;





  int x_flag_lto_size_sort;





  const char *x_flag_lto_dump_symbol;





  int x_report_times;





  int x_flag_lto_tree_stats;





  int x_flag_lto_dump_type_stats;





  int x_flag_undef;





  int x_verbose_flag;





  int x_version_flag;





  int x_inhibit_warnings;





  const char *x_wrapper_string;



  int x_VAR_malign_functions_;



  int x_VAR_malign_jumps_;



  int x_VAR_malign_loops_;



  int x_VAR_mmitigate_rop;



  int x_VAR_mmpx;



  int x_VAR_mpc32;



  int x_VAR_mpc64;



  int x_VAR_mpc80;



  int x_VAR_mpcommit;



  bool frontend_set_flag_associative_math;


  bool frontend_set_flag_cx_limited_range;


  bool frontend_set_flag_excess_precision;


  bool frontend_set_flag_finite_math_only;


  bool frontend_set_flag_errno_math;


  bool frontend_set_flag_reciprocal_math;


  bool frontend_set_flag_rounding_math;


  bool frontend_set_flag_signaling_nans;


  bool frontend_set_flag_signed_zeros;


  bool frontend_set_flag_trapping_math;


  bool frontend_set_flag_unsafe_math_optimizations;


};
extern struct gcc_options global_options;
extern const struct gcc_options global_options_init;
extern struct gcc_options global_options_set;







struct cl_optimization
{
  const char *x_str_align_functions;
  const char *x_str_align_jumps;
  const char *x_str_align_labels;
  const char *x_str_align_loops;
  int x_param_align_loop_iterations;
  int x_param_align_threshold;
  int x_param_asan_protect_allocas;
  int x_param_asan_instrument_reads;
  int x_param_asan_instrument_writes;
  int x_param_asan_instrumentation_with_call_threshold;
  int x_param_asan_memintrin;
  int x_param_asan_stack;
  int x_param_asan_use_after_return;
  int x_param_avg_loop_niter;
  int x_param_avoid_fma_max_bits;
  int x_param_builtin_expect_probability;
  int x_param_builtin_string_cmp_inline_length;
  int x_param_case_values_threshold;
  int x_param_comdat_sharing_probability;
  int x_param_dse_max_alias_queries_per_store;
  int x_param_dse_max_object_size;
  int x_param_early_inlining_insns;
  int x_param_fsm_maximum_phi_arguments;
  int x_param_fsm_scale_path_blocks;
  int x_param_fsm_scale_path_stmts;
  int x_param_gcse_after_reload_critical_fraction;
  int x_param_gcse_after_reload_partial_fraction;
  int x_param_gcse_cost_distance_ratio;
  int x_param_gcse_unrestricted_cost;
  int x_param_graphite_max_arrays_per_scop;
  int x_param_graphite_max_nb_scop_params;
  int x_param_inline_heuristics_hint_percent;
  int x_param_inline_min_speedup;
  int x_param_inline_unit_growth;
  int x_param_ipa_cp_eval_threshold;
  int x_param_ipa_cp_loop_hint_bonus;
  int x_param_ipa_cp_max_recursive_depth;
  int x_param_ipa_cp_min_recursive_probability;
  int x_param_ipa_cp_recursion_penalty;
  int x_param_ipa_cp_single_call_penalty;
  int x_param_ipa_cp_unit_growth;
  int x_param_ipa_cp_value_list_size;
  int x_param_ipa_max_aa_steps;
  int x_param_ipa_max_agg_items;
  int x_param_ipa_max_param_expr_ops;
  int x_param_ipa_max_switch_predicate_bounds;
  int x_param_ipa_sra_max_replacements;
  int x_param_ipa_sra_ptr_growth_factor;
  int x_param_ira_loop_reserved_regs;
  int x_param_ira_max_conflict_table_size;
  int x_param_ira_max_loops_num;
  int x_param_iv_always_prune_cand_set_bound;
  int x_param_iv_consider_all_candidates_bound;
  int x_param_iv_max_considered_uses;
  int x_param_jump_table_max_growth_ratio_for_size;
  int x_param_jump_table_max_growth_ratio_for_speed;
  int x_param_l1_cache_line_size;
  int x_param_l1_cache_size;
  int x_param_l2_cache_size;
  int x_param_large_function_growth;
  int x_param_large_function_insns;
  int x_param_stack_frame_growth;
  int x_param_large_stack_frame;
  int x_param_large_unit_insns;
  int x_param_lim_expensive;
  int x_param_loop_block_tile_size;
  int x_param_loop_interchange_max_num_stmts;
  int x_param_loop_interchange_stride_ratio;
  int x_param_loop_invariant_max_bbs_in_loop;
  int x_param_loop_max_datarefs_for_datadeps;
  int x_param_loop_versioning_max_inner_insns;
  int x_param_loop_versioning_max_outer_insns;
  int x_param_lra_inheritance_ebb_probability_cutoff;
  int x_param_lra_max_considered_reload_pseudos;
  int x_param_max_average_unrolled_insns;
  int x_param_max_combine_insns;
  int x_param_max_unroll_iterations;
  int x_param_max_completely_peel_times;
  int x_param_max_completely_peeled_insns;
  int x_param_max_crossjump_edges;
  int x_param_max_cse_insns;
  int x_param_max_cse_path_length;
  int x_param_max_cselib_memory_locations;
  int x_param_max_debug_marker_count;
  int x_param_max_delay_slot_insn_search;
  int x_param_max_delay_slot_live_search;
  int x_param_max_dse_active_local_stores;
  int x_param_early_inliner_max_iterations;
  int x_param_max_find_base_term_values;
  int x_param_max_fsm_thread_length;
  int x_param_max_fsm_thread_path_insns;
  int x_param_max_fsm_thread_paths;
  int x_param_max_gcse_insertion_ratio;
  int x_param_max_gcse_memory;
  int x_param_max_goto_duplication_insns;
  int x_param_max_grow_copy_bb_insns;
  int x_param_max_hoist_depth;
  int x_param_max_inline_insns_auto;
  int x_param_max_inline_insns_recursive_auto;
  int x_param_max_inline_insns_recursive;
  int x_param_max_inline_insns_single;
  int x_param_max_inline_insns_size;
  int x_param_max_inline_insns_small;
  int x_param_max_inline_recursive_depth_auto;
  int x_param_max_inline_recursive_depth;
  int x_param_max_isl_operations;
  int x_param_max_iterations_computation_cost;
  int x_param_max_iterations_to_track;
  int x_param_max_jump_thread_duplication_stmts;
  int x_param_max_last_value_rtl;
  int x_param_max_loop_header_insns;
  int x_param_max_modulo_backtrack_attempts;
  int x_param_max_partial_antic_length;
  int x_param_max_peel_branches;
  int x_param_max_peel_times;
  int x_param_max_peeled_insns;
  int x_param_max_pending_list_length;
  int x_param_max_pipeline_region_blocks;
  int x_param_max_pipeline_region_insns;
  int x_param_max_pow_sqrt_depth;
  int x_param_max_predicted_iterations;
  int x_param_max_reload_search_insns;
  int x_param_max_rtl_if_conversion_insns;
  int x_param_max_rtl_if_conversion_predictable_cost;
  int x_param_max_rtl_if_conversion_unpredictable_cost;
  int x_param_max_sched_extend_regions_iters;
  int x_param_max_sched_insn_conflict_delay;
  int x_param_max_sched_ready_insns;
  int x_param_max_sched_region_blocks;
  int x_param_max_sched_region_insns;
  int x_param_max_slsr_candidate_scan;
  int x_param_max_speculative_devirt_maydefs;
  int x_param_max_stores_to_merge;
  int x_param_max_stores_to_sink;
  int x_param_max_tail_merge_comparisons;
  int x_param_max_tail_merge_iterations;
  int x_param_max_tracked_strlens;
  int x_param_max_tree_if_conversion_phi_args;
  int x_param_max_unroll_times;
  int x_param_max_unrolled_insns;
  int x_param_max_unswitch_insns;
  int x_param_max_unswitch_level;
  int x_param_max_variable_expansions;
  int x_param_max_vartrack_expr_depth;
  int x_param_max_vartrack_reverse_op_size;
  int x_param_max_vartrack_size;
  int x_param_max_vrp_switch_assertions;
  int x_param_min_crossjump_insns;
  int x_param_min_inline_recursive_probability;
  int x_param_min_insn_to_prefetch_ratio;
  int x_param_min_loop_cond_split_prob;
  int x_param_min_size_for_stack_sharing;
  int x_param_min_spec_prob;
  int x_param_min_vect_loop_bound;
  int x_param_parloops_chunk_size;
  int x_param_parloops_min_per_thread;
  int x_param_parloops_schedule;
  int x_param_partial_inlining_entry_probability;
  int x_param_predictable_branch_outcome;
  int x_param_prefetch_dynamic_strides;
  int x_param_prefetch_latency;
  int x_param_prefetch_min_insn_to_mem_ratio;
  int x_param_prefetch_minimum_stride;
  int x_param_rpo_vn_max_loop_depth;
  int x_param_sccvn_max_alias_queries_per_access;
  int x_param_scev_max_expr_complexity;
  int x_param_scev_max_expr_size;
  int x_param_sched_autopref_queue_depth;
  int x_param_sched_mem_true_dep_cost;
  int x_param_sched_pressure_algorithm;
  int x_param_sched_spec_prob_cutoff;
  int x_param_sched_state_edge_prob_cutoff;
  int x_param_selsched_insns_to_rename;
  int x_param_selsched_max_lookahead;
  int x_param_selsched_max_sched_times;
  int x_param_simultaneous_prefetches;
  int x_param_sink_frequency_threshold;
  int x_param_slp_max_insns_in_bb;
  int x_param_sms_dfa_history;
  int x_param_sms_loop_average_count_threshold;
  int x_param_sms_max_ii_factor;
  int x_param_sms_min_sc;
  int x_param_sra_max_propagations;
  int x_param_sra_max_scalarization_size_size;
  int x_param_sra_max_scalarization_size_speed;
  int x_param_ssa_name_def_chain_limit;
  int x_param_ssp_buffer_size;
  int x_param_stack_clash_protection_guard_size;
  int x_param_stack_clash_protection_probe_interval;
  int x_param_store_merging_allow_unaligned;
  int x_param_store_merging_max_size;
  int x_param_switch_conversion_branch_ratio;
  int x_param_tm_max_aggregate_size;
  int x_param_tracer_dynamic_coverage_feedback;
  int x_param_tracer_dynamic_coverage;
  int x_param_tracer_max_code_growth;
  int x_param_tracer_min_branch_probability_feedback;
  int x_param_tracer_min_branch_probability;
  int x_param_tracer_min_branch_ratio;
  int x_param_tree_reassoc_width;
  int x_param_uninit_control_dep_attempts;
  int x_param_uninlined_function_insns;
  int x_param_uninlined_function_time;
  int x_param_uninlined_function_thunk_insns;
  int x_param_uninlined_function_thunk_time;
  int x_param_unlikely_bb_count_fraction;
  int x_param_unroll_jam_max_unroll;
  int x_param_unroll_jam_min_percent;
  int x_param_use_after_scope_direct_emission_threshold;
  int x_param_vect_epilogues_nomask;
  int x_param_vect_max_peeling_for_alignment;
  int x_param_vect_max_version_for_alias_checks;
  int x_param_vect_max_version_for_alignment_checks;
  int x_param_vect_partial_vector_usage;
  int x_flag_sched_stalled_insns;
  int x_flag_sched_stalled_insns_dep;
  int x_flag_tree_parallelize_loops;
  enum excess_precision x_flag_excess_precision;
  enum fp_contract_mode x_flag_fp_contract_mode;
  enum ira_algorithm x_flag_ira_algorithm;
  enum ira_region x_flag_ira_region;
  enum live_patching_level x_flag_live_patching;
  enum reorder_blocks_algorithm x_flag_reorder_blocks_algorithm;
  enum vect_cost_model x_flag_simd_cost_model;
  enum stack_reuse_level x_flag_stack_reuse;
  enum vect_cost_model x_flag_vect_cost_model;
  unsigned char x_optimize;
  unsigned char x_optimize_size;
  unsigned char x_optimize_debug;
  unsigned char x_optimize_fast;
  signed char x_warn_inline;
  signed char x_flag_aggressive_loop_optimizations;
  signed char x_flag_align_functions;
  signed char x_flag_align_jumps;
  signed char x_flag_align_labels;
  signed char x_flag_align_loops;
  signed char x_flag_allocation_dce;
  signed char x_flag_store_data_races;
  signed char x_flag_associative_math;
  signed char x_flag_assume_phsa;
  signed char x_flag_asynchronous_unwind_tables;
  signed char x_flag_auto_inc_dec;
  signed char x_flag_branch_on_count_reg;
  signed char x_flag_branch_probabilities;
  signed char x_flag_caller_saves;
  signed char x_flag_code_hoisting;
  signed char x_flag_combine_stack_adjustments;
  signed char x_flag_compare_elim_after_reload;
  signed char x_flag_conserve_stack;
  signed char x_flag_cprop_registers;
  signed char x_flag_crossjumping;
  signed char x_flag_cse_follow_jumps;
  signed char x_flag_cx_fortran_rules;
  signed char x_flag_cx_limited_range;
  signed char x_flag_dce;
  signed char x_flag_defer_pop;
  signed char x_flag_delayed_branch;
  signed char x_flag_delete_dead_exceptions;
  signed char x_flag_delete_null_pointer_checks;
  signed char x_flag_devirtualize;
  signed char x_flag_devirtualize_speculatively;
  signed char x_flag_dse;
  signed char x_flag_early_inlining;
  signed char x_flag_exceptions;
  signed char x_flag_expensive_optimizations;
  signed char x_flag_finite_loops;
  signed char x_flag_finite_math_only;
  signed char x_flag_float_store;
  signed char x_flag_forward_propagate;
  signed char x_flag_fp_int_builtin_inexact;
  signed char x_flag_no_function_cse;
  signed char x_flag_gcse;
  signed char x_flag_gcse_after_reload;
  signed char x_flag_gcse_las;
  signed char x_flag_gcse_lm;
  signed char x_flag_gcse_sm;
  signed char x_flag_graphite;
  signed char x_flag_graphite_identity;
  signed char x_flag_guess_branch_prob;
  signed char x_flag_hoist_adjacent_loads;
  signed char x_flag_if_conversion;
  signed char x_flag_if_conversion2;
  signed char x_flag_indirect_inlining;
  signed char x_flag_no_inline;
  signed char x_flag_inline_atomics;
  signed char x_flag_inline_functions;
  signed char x_flag_inline_functions_called_once;
  signed char x_flag_inline_small_functions;
  signed char x_flag_ipa_bit_cp;
  signed char x_flag_ipa_cp;
  signed char x_flag_ipa_cp_clone;
  signed char x_flag_ipa_icf;
  signed char x_flag_ipa_icf_functions;
  signed char x_flag_ipa_icf_variables;
  signed char x_flag_ipa_profile;
  signed char x_flag_ipa_pta;
  signed char x_flag_ipa_pure_const;
  signed char x_flag_ipa_ra;
  signed char x_flag_ipa_reference;
  signed char x_flag_ipa_reference_addressable;
  signed char x_flag_ipa_sra;
  signed char x_flag_ipa_stack_alignment;
  signed char x_flag_ipa_vrp;
  signed char x_flag_ira_hoist_pressure;
  signed char x_flag_ira_loop_pressure;
  signed char x_flag_ira_share_save_slots;
  signed char x_flag_ira_share_spill_slots;
  signed char x_flag_isolate_erroneous_paths_attribute;
  signed char x_flag_isolate_erroneous_paths_dereference;
  signed char x_flag_ivopts;
  signed char x_flag_jump_tables;
  signed char x_flag_keep_gc_roots_live;
  signed char x_flag_lifetime_dse;
  signed char x_flag_limit_function_alignment;
  signed char x_flag_live_range_shrinkage;
  signed char x_flag_loop_interchange;
  signed char x_flag_loop_nest_optimize;
  signed char x_flag_loop_parallelize_all;
  signed char x_flag_unroll_jam;
  signed char x_flag_lra_remat;
  signed char x_flag_errno_math;
  signed char x_flag_modulo_sched;
  signed char x_flag_modulo_sched_allow_regmoves;
  signed char x_flag_move_loop_invariants;
  signed char x_flag_non_call_exceptions;
  signed char x_flag_nothrow_opt;
  signed char x_flag_omit_frame_pointer;
  signed char x_flag_opt_info;
  signed char x_flag_optimize_sibling_calls;
  signed char x_flag_optimize_strlen;
  signed char x_flag_pack_struct;
  signed char x_flag_partial_inlining;
  signed char x_flag_peel_loops;
  signed char x_flag_no_peephole;
  signed char x_flag_peephole2;
  signed char x_flag_plt;
  signed char x_flag_predictive_commoning;
  signed char x_flag_prefetch_loop_arrays;
  signed char x_flag_printf_return_value;
  signed char x_flag_profile_partial_training;
  signed char x_flag_profile_reorder_functions;
  signed char x_flag_reciprocal_math;
  signed char x_flag_ree;
  signed char x_flag_pcc_struct_return;
  signed char x_flag_rename_registers;
  signed char x_flag_reorder_blocks;
  signed char x_flag_reorder_blocks_and_partition;
  signed char x_flag_reorder_functions;
  signed char x_flag_rerun_cse_after_loop;
  signed char x_flag_resched_modulo_sched;
  signed char x_flag_rounding_math;
  signed char x_flag_rtti;
  signed char x_flag_save_optimization_record;
  signed char x_flag_sched_critical_path_heuristic;
  signed char x_flag_sched_dep_count_heuristic;
  signed char x_flag_sched_group_heuristic;
  signed char x_flag_schedule_interblock;
  signed char x_flag_sched_last_insn_heuristic;
  signed char x_flag_sched_pressure;
  signed char x_flag_sched_rank_heuristic;
  signed char x_flag_schedule_speculative;
  signed char x_flag_sched_spec_insn_heuristic;
  signed char x_flag_schedule_speculative_load;
  signed char x_flag_schedule_speculative_load_dangerous;
  signed char x_flag_sched2_use_superblocks;
  signed char x_flag_schedule_fusion;
  signed char x_flag_schedule_insns;
  signed char x_flag_schedule_insns_after_reload;
  signed char x_flag_section_anchors;
  signed char x_flag_sel_sched_pipelining;
  signed char x_flag_sel_sched_pipelining_outer_loops;
  signed char x_flag_sel_sched_reschedule_pipelined;
  signed char x_flag_selective_scheduling;
  signed char x_flag_selective_scheduling2;
  signed char x_flag_short_enums;
  signed char x_flag_short_wchar;
  signed char x_flag_shrink_wrap;
  signed char x_flag_shrink_wrap_separate;
  signed char x_flag_signaling_nans;
  signed char x_flag_signed_zeros;
  signed char x_flag_single_precision_constant;
  signed char x_flag_split_ivs_in_unroller;
  signed char x_flag_split_loops;
  signed char x_flag_split_paths;
  signed char x_flag_split_wide_types;
  signed char x_flag_split_wide_types_early;
  signed char x_flag_ssa_backprop;
  signed char x_flag_ssa_phiopt;
  signed char x_flag_stack_clash_protection;
  signed char x_flag_stack_protect;
  signed char x_flag_stdarg_opt;
  signed char x_flag_store_merging;
  signed char x_flag_strict_aliasing;
  signed char x_flag_strict_enums;
  signed char x_flag_strict_volatile_bitfields;
  signed char x_flag_thread_jumps;
  signed char x_flag_threadsafe_statics;
  signed char x_flag_toplevel_reorder;
  signed char x_flag_tracer;
  signed char x_flag_trapping_math;
  signed char x_flag_trapv;
  signed char x_flag_tree_bit_ccp;
  signed char x_flag_tree_builtin_call_dce;
  signed char x_flag_tree_ccp;
  signed char x_flag_tree_ch;
  signed char x_flag_tree_coalesce_vars;
  signed char x_flag_tree_copy_prop;
  signed char x_flag_tree_cselim;
  signed char x_flag_tree_dce;
  signed char x_flag_tree_dom;
  signed char x_flag_tree_dse;
  signed char x_flag_tree_forwprop;
  signed char x_flag_tree_fre;
  signed char x_flag_tree_loop_distribute_patterns;
  signed char x_flag_tree_loop_distribution;
  signed char x_flag_tree_loop_if_convert;
  signed char x_flag_tree_loop_im;
  signed char x_flag_tree_loop_ivcanon;
  signed char x_flag_tree_loop_optimize;
  signed char x_flag_tree_loop_vectorize;
  signed char x_flag_tree_live_range_split;
  signed char x_flag_tree_partial_pre;
  signed char x_flag_tree_phiprop;
  signed char x_flag_tree_pre;
  signed char x_flag_tree_pta;
  signed char x_flag_tree_reassoc;
  signed char x_flag_tree_scev_cprop;
  signed char x_flag_tree_sink;
  signed char x_flag_tree_slp_vectorize;
  signed char x_flag_tree_slsr;
  signed char x_flag_tree_sra;
  signed char x_flag_tree_switch_conversion;
  signed char x_flag_tree_tail_merge;
  signed char x_flag_tree_ter;
  signed char x_flag_tree_vrp;
  signed char x_flag_unconstrained_commons;
  signed char x_flag_unroll_all_loops;
  signed char x_flag_cunroll_grow_size;
  signed char x_flag_unroll_loops;
  signed char x_flag_unsafe_math_optimizations;
  signed char x_flag_unswitch_loops;
  signed char x_flag_unwind_tables;
  signed char x_flag_var_tracking;
  signed char x_flag_var_tracking_assignments;
  signed char x_flag_var_tracking_assignments_toggle;
  signed char x_flag_var_tracking_uninit;
  signed char x_flag_variable_expansion_in_unroller;
  signed char x_flag_version_loops_for_strides;
  signed char x_flag_value_profile_transformations;
  signed char x_flag_web;
  signed char x_flag_wrapv;
  signed char x_flag_wrapv_pointer;
};


struct cl_target_option
{
  long x_ix86_isa_flags2_explicit;
  long x_ix86_isa_flags_explicit;
  const char *x_ix86_arch_string;
  const char *x_ix86_recip_name;
  const char *x_ix86_tune_ctrl_string;
  const char *x_ix86_tune_memcpy_strategy;
  const char *x_ix86_tune_memset_strategy;
  const char *x_ix86_tune_string;
  long x_ix86_stack_protector_guard_offset;
  addr_space_t x_ix86_stack_protector_guard_reg;
          int x_target_flags;
  long x_ix86_isa_flags;
  long x_ix86_isa_flags2;
  enum fpmath_unit x_ix86_fpmath;
          int x_ix86_target_flags;
  enum prefer_vector_width x_prefer_vector_width_type;
  enum asm_dialect x_ix86_asm_dialect;
  enum calling_abi x_ix86_abi;
  enum cmodel x_ix86_cmodel;
  enum ix86_veclibabi x_ix86_veclibabi_type;
  enum pmode x_ix86_pmode;
  enum stack_protector_guard x_ix86_stack_protector_guard;
  enum stringop_alg x_ix86_stringop_alg;
  enum tls_dialect x_ix86_tls_dialect;
  int x_ix86_branch_cost;
  int x_ix86_dump_tunes;
  int x_ix86_force_align_arg_pointer;
  int x_ix86_force_drap;
  int x_ix86_incoming_stack_boundary_arg;
  int x_ix86_preferred_stack_boundary_arg;
  int x_ix86_regparm;
  int x_ix86_section_threshold;
  int x_ix86_sse2avx;
  int x_ix86_tune_no_default;
  int x_recip_mask_explicit;
  int x_recip_mask;
  unsigned char arch;
  unsigned char arch_specified;
  unsigned char branch_cost;
  unsigned char prefetch_sse;
  unsigned char schedule;
  unsigned char tune;
  unsigned char tune_defaulted;
};



extern void cl_optimization_save (struct cl_optimization *, struct gcc_options *);


extern void cl_optimization_restore (struct gcc_options *, struct cl_optimization *);


extern void cl_optimization_print (FILE *, int, struct cl_optimization *);


extern void cl_optimization_print_diff (FILE *, int, cl_optimization *ptr1, cl_optimization *ptr2);


extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *);


extern void cl_target_option_restore (struct gcc_options *, struct cl_target_option *);


extern void cl_target_option_print (FILE *, int, struct cl_target_option *);


extern void cl_target_option_print_diff (FILE *, int, cl_target_option *ptr1, cl_target_option *ptr2);


extern bool cl_target_option_eq (const struct cl_target_option *, const struct cl_target_option *);


extern void cl_target_option_free (struct cl_target_option *);


extern hashval_t cl_target_option_hash (const struct cl_target_option *);


extern hashval_t cl_optimization_hash (const struct cl_optimization *);


extern bool cl_optimization_option_eq (cl_optimization const *ptr1, cl_optimization const *ptr2);


extern void cl_optimization_option_free (cl_optimization *ptr1);


extern void cl_optimization_compare (gcc_options *ptr1, gcc_options *ptr2);



bool
common_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           const struct cl_decoded_option *decoded,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Ada_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
AdaSCIL_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
AdaWhy_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
BRIG_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
C_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
CXX_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
D_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Fortran_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Go_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
LTO_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
LTODump_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
ObjC_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
ObjCXX_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
void cpp_handle_option_auto (const struct gcc_options * opts, size_t scode,
                             struct cpp_options * cpp_opts);
void init_global_opts_from_cpp(struct gcc_options * opts,
                               const struct cpp_options * cpp_opts);
# 8579 "./options.h"
enum opt_code
{
  OPT____ = 0,
# 8590 "./options.h"
  OPT__completion_ = 9,
# 8610 "./options.h"
  OPT__help = 29,
  OPT__help_ = 30,
# 8638 "./options.h"
  OPT__no_sysroot_suffix = 57,



  OPT__output_pch_ = 61,

  OPT__param_align_loop_iterations_ = 63,
  OPT__param_align_threshold_ = 64,
  OPT__param_analyzer_bb_explosion_factor_ = 65,
  OPT__param_analyzer_max_enodes_for_full_dump_ = 66,
  OPT__param_analyzer_max_enodes_per_program_point_ = 67,
  OPT__param_analyzer_max_recursion_depth_ = 68,
  OPT__param_analyzer_max_svalue_depth_ = 69,
  OPT__param_analyzer_min_snodes_for_call_summary_ = 70,
  OPT__param_asan_globals_ = 71,
  OPT__param_asan_instrument_allocas_ = 72,
  OPT__param_asan_instrument_reads_ = 73,
  OPT__param_asan_instrument_writes_ = 74,
  OPT__param_asan_instrumentation_with_call_threshold_ = 75,
  OPT__param_asan_memintrin_ = 76,
  OPT__param_asan_stack_ = 77,
  OPT__param_asan_use_after_return_ = 78,
  OPT__param_avg_loop_niter_ = 79,
  OPT__param_avoid_fma_max_bits_ = 80,
  OPT__param_balance_partitions_ = 81,
  OPT__param_builtin_expect_probability_ = 82,
  OPT__param_builtin_string_cmp_inline_length_ = 83,
  OPT__param_case_values_threshold_ = 84,
  OPT__param_comdat_sharing_probability_ = 85,
  OPT__param_cxx_max_namespaces_for_diagnostic_help_ = 86,
  OPT__param_dse_max_alias_queries_per_store_ = 87,
  OPT__param_dse_max_object_size_ = 88,
  OPT__param_early_inlining_insns_ = 89,
  OPT__param_fsm_maximum_phi_arguments_ = 90,
  OPT__param_fsm_scale_path_blocks_ = 91,
  OPT__param_fsm_scale_path_stmts_ = 92,
  OPT__param_gcse_after_reload_critical_fraction_ = 93,
  OPT__param_gcse_after_reload_partial_fraction_ = 94,
  OPT__param_gcse_cost_distance_ratio_ = 95,
  OPT__param_gcse_unrestricted_cost_ = 96,
  OPT__param_ggc_min_expand_ = 97,
  OPT__param_ggc_min_heapsize_ = 98,
  OPT__param_gimple_fe_computed_hot_bb_threshold_ = 99,
  OPT__param_graphite_allow_codegen_errors_ = 100,
  OPT__param_graphite_max_arrays_per_scop_ = 101,
  OPT__param_graphite_max_nb_scop_params_ = 102,
  OPT__param_hash_table_verification_limit_ = 103,
  OPT__param_hot_bb_count_fraction_ = 104,
  OPT__param_hot_bb_count_ws_permille_ = 105,
  OPT__param_hot_bb_frequency_fraction_ = 106,
  OPT__param_inline_heuristics_hint_percent_ = 107,
  OPT__param_inline_min_speedup_ = 108,
  OPT__param_inline_unit_growth_ = 109,
  OPT__param_integer_share_limit_ = 110,
  OPT__param_ipa_cp_eval_threshold_ = 111,
  OPT__param_ipa_cp_loop_hint_bonus_ = 112,
  OPT__param_ipa_cp_max_recursive_depth_ = 113,
  OPT__param_ipa_cp_min_recursive_probability_ = 114,
  OPT__param_ipa_cp_recursion_penalty_ = 115,
  OPT__param_ipa_cp_single_call_penalty_ = 116,
  OPT__param_ipa_cp_unit_growth_ = 117,
  OPT__param_ipa_cp_value_list_size_ = 118,
  OPT__param_ipa_max_aa_steps_ = 119,
  OPT__param_ipa_max_agg_items_ = 120,
  OPT__param_ipa_max_param_expr_ops_ = 121,
  OPT__param_ipa_max_switch_predicate_bounds_ = 122,
  OPT__param_ipa_sra_max_replacements_ = 123,
  OPT__param_ipa_sra_ptr_growth_factor_ = 124,
  OPT__param_ira_loop_reserved_regs_ = 125,
  OPT__param_ira_max_conflict_table_size_ = 126,
  OPT__param_ira_max_loops_num_ = 127,
  OPT__param_iv_always_prune_cand_set_bound_ = 128,
  OPT__param_iv_consider_all_candidates_bound_ = 129,
  OPT__param_iv_max_considered_uses_ = 130,
  OPT__param_jump_table_max_growth_ratio_for_size_ = 131,
  OPT__param_jump_table_max_growth_ratio_for_speed_ = 132,
  OPT__param_l1_cache_line_size_ = 133,
  OPT__param_l1_cache_size_ = 134,
  OPT__param_l2_cache_size_ = 135,
  OPT__param_large_function_growth_ = 136,
  OPT__param_large_function_insns_ = 137,
  OPT__param_large_stack_frame_growth_ = 138,
  OPT__param_large_stack_frame_ = 139,
  OPT__param_large_unit_insns_ = 140,
  OPT__param_lim_expensive_ = 141,
  OPT__param_logical_op_non_short_circuit_ = 142,
  OPT__param_loop_block_tile_size_ = 143,
  OPT__param_loop_interchange_max_num_stmts_ = 144,
  OPT__param_loop_interchange_stride_ratio_ = 145,
  OPT__param_loop_invariant_max_bbs_in_loop_ = 146,
  OPT__param_loop_max_datarefs_for_datadeps_ = 147,
  OPT__param_loop_versioning_max_inner_insns_ = 148,
  OPT__param_loop_versioning_max_outer_insns_ = 149,
  OPT__param_lra_inheritance_ebb_probability_cutoff_ = 150,
  OPT__param_lra_max_considered_reload_pseudos_ = 151,
  OPT__param_lto_max_partition_ = 152,
  OPT__param_lto_max_streaming_parallelism_ = 153,
  OPT__param_lto_min_partition_ = 154,
  OPT__param_lto_partitions_ = 155,
  OPT__param_max_average_unrolled_insns_ = 156,
  OPT__param_max_combine_insns_ = 157,
  OPT__param_max_completely_peel_loop_nest_depth_ = 158,
  OPT__param_max_completely_peel_times_ = 159,
  OPT__param_max_completely_peeled_insns_ = 160,
  OPT__param_max_crossjump_edges_ = 161,
  OPT__param_max_cse_insns_ = 162,
  OPT__param_max_cse_path_length_ = 163,
  OPT__param_max_cselib_memory_locations_ = 164,
  OPT__param_max_debug_marker_count_ = 165,
  OPT__param_max_delay_slot_insn_search_ = 166,
  OPT__param_max_delay_slot_live_search_ = 167,
  OPT__param_max_dse_active_local_stores_ = 168,
  OPT__param_max_early_inliner_iterations_ = 169,
  OPT__param_max_fields_for_field_sensitive_ = 170,
  OPT__param_max_find_base_term_values_ = 171,
  OPT__param_max_fsm_thread_length_ = 172,
  OPT__param_max_fsm_thread_path_insns_ = 173,
  OPT__param_max_fsm_thread_paths_ = 174,
  OPT__param_max_gcse_insertion_ratio_ = 175,
  OPT__param_max_gcse_memory_ = 176,
  OPT__param_max_goto_duplication_insns_ = 177,
  OPT__param_max_grow_copy_bb_insns_ = 178,
  OPT__param_max_hoist_depth_ = 179,
  OPT__param_max_inline_insns_auto_ = 180,
  OPT__param_max_inline_insns_recursive_auto_ = 181,
  OPT__param_max_inline_insns_recursive_ = 182,
  OPT__param_max_inline_insns_single_ = 183,
  OPT__param_max_inline_insns_size_ = 184,
  OPT__param_max_inline_insns_small_ = 185,
  OPT__param_max_inline_recursive_depth_auto_ = 186,
  OPT__param_max_inline_recursive_depth_ = 187,
  OPT__param_max_isl_operations_ = 188,
  OPT__param_max_iterations_computation_cost_ = 189,
  OPT__param_max_iterations_to_track_ = 190,
  OPT__param_max_jump_thread_duplication_stmts_ = 191,
  OPT__param_max_last_value_rtl_ = 192,
  OPT__param_max_loop_header_insns_ = 193,
  OPT__param_max_modulo_backtrack_attempts_ = 194,
  OPT__param_max_partial_antic_length_ = 195,
  OPT__param_max_peel_branches_ = 196,
  OPT__param_max_peel_times_ = 197,
  OPT__param_max_peeled_insns_ = 198,
  OPT__param_max_pending_list_length_ = 199,
  OPT__param_max_pipeline_region_blocks_ = 200,
  OPT__param_max_pipeline_region_insns_ = 201,
  OPT__param_max_pow_sqrt_depth_ = 202,
  OPT__param_max_predicted_iterations_ = 203,
  OPT__param_max_reload_search_insns_ = 204,
  OPT__param_max_rtl_if_conversion_insns_ = 205,
  OPT__param_max_rtl_if_conversion_predictable_cost_ = 206,
  OPT__param_max_rtl_if_conversion_unpredictable_cost_ = 207,
  OPT__param_max_sched_extend_regions_iters_ = 208,
  OPT__param_max_sched_insn_conflict_delay_ = 209,
  OPT__param_max_sched_ready_insns_ = 210,
  OPT__param_max_sched_region_blocks_ = 211,
  OPT__param_max_sched_region_insns_ = 212,
  OPT__param_max_slsr_cand_scan_ = 213,
  OPT__param_max_speculative_devirt_maydefs_ = 214,
  OPT__param_max_ssa_name_query_depth_ = 215,
  OPT__param_max_stores_to_merge_ = 216,
  OPT__param_max_stores_to_sink_ = 217,
  OPT__param_max_tail_merge_comparisons_ = 218,
  OPT__param_max_tail_merge_iterations_ = 219,
  OPT__param_max_tracked_strlens_ = 220,
  OPT__param_max_tree_if_conversion_phi_args_ = 221,
  OPT__param_max_unroll_times_ = 222,
  OPT__param_max_unrolled_insns_ = 223,
  OPT__param_max_unswitch_insns_ = 224,
  OPT__param_max_unswitch_level_ = 225,
  OPT__param_max_variable_expansions_in_unroller_ = 226,
  OPT__param_max_vartrack_expr_depth_ = 227,
  OPT__param_max_vartrack_reverse_op_size_ = 228,
  OPT__param_max_vartrack_size_ = 229,
  OPT__param_max_vrp_switch_assertions_ = 230,
  OPT__param_min_crossjump_insns_ = 231,
  OPT__param_min_inline_recursive_probability_ = 232,
  OPT__param_min_insn_to_prefetch_ratio_ = 233,
  OPT__param_min_loop_cond_split_prob_ = 234,
  OPT__param_min_nondebug_insn_uid_ = 235,
  OPT__param_min_size_for_stack_sharing_ = 236,
  OPT__param_min_spec_prob_ = 237,
  OPT__param_min_vect_loop_bound_ = 238,
  OPT__param_parloops_chunk_size_ = 239,
  OPT__param_parloops_min_per_thread_ = 240,
  OPT__param_parloops_schedule_ = 241,
  OPT__param_partial_inlining_entry_probability_ = 242,
  OPT__param_predictable_branch_outcome_ = 243,
  OPT__param_prefetch_dynamic_strides_ = 244,
  OPT__param_prefetch_latency_ = 245,
  OPT__param_prefetch_min_insn_to_mem_ratio_ = 246,
  OPT__param_prefetch_minimum_stride_ = 247,
  OPT__param_profile_func_internal_id_ = 248,
  OPT__param_promote_statics_ = 249,
  OPT__param_rpo_vn_max_loop_depth_ = 250,
  OPT__param_sccvn_max_alias_queries_per_access_ = 251,
  OPT__param_scev_max_expr_complexity_ = 252,
  OPT__param_scev_max_expr_size_ = 253,
  OPT__param_sched_autopref_queue_depth_ = 254,
  OPT__param_sched_mem_true_dep_cost_ = 255,
  OPT__param_sched_pressure_algorithm_ = 256,
  OPT__param_sched_spec_prob_cutoff_ = 257,
  OPT__param_sched_state_edge_prob_cutoff_ = 258,
  OPT__param_selsched_insns_to_rename_ = 259,
  OPT__param_selsched_max_lookahead_ = 260,
  OPT__param_selsched_max_sched_times_ = 261,
  OPT__param_simultaneous_prefetches_ = 262,
  OPT__param_sink_frequency_threshold_ = 263,
  OPT__param_slp_max_insns_in_bb_ = 264,
  OPT__param_sms_dfa_history_ = 265,
  OPT__param_sms_loop_average_count_threshold_ = 266,
  OPT__param_sms_max_ii_factor_ = 267,
  OPT__param_sms_min_sc_ = 268,
  OPT__param_sra_max_propagations_ = 269,
  OPT__param_sra_max_scalarization_size_Osize_ = 270,
  OPT__param_sra_max_scalarization_size_Ospeed_ = 271,
  OPT__param_ssa_name_def_chain_limit_ = 272,
  OPT__param_ssp_buffer_size_ = 273,
  OPT__param_stack_clash_protection_guard_size_ = 274,
  OPT__param_stack_clash_protection_probe_interval_ = 275,
  OPT__param_store_merging_allow_unaligned_ = 276,
  OPT__param_store_merging_max_size_ = 277,
  OPT__param_switch_conversion_max_branch_ratio_ = 278,
  OPT__param_tm_max_aggregate_size_ = 279,
  OPT__param_tracer_dynamic_coverage_feedback_ = 280,
  OPT__param_tracer_dynamic_coverage_ = 281,
  OPT__param_tracer_max_code_growth_ = 282,
  OPT__param_tracer_min_branch_probability_feedback_ = 283,
  OPT__param_tracer_min_branch_probability_ = 284,
  OPT__param_tracer_min_branch_ratio_ = 285,
  OPT__param_tree_reassoc_width_ = 286,
  OPT__param_tsan_distinguish_volatile_ = 287,
  OPT__param_tsan_instrument_func_entry_exit_ = 288,
  OPT__param_uninit_control_dep_attempts_ = 289,
  OPT__param_uninlined_function_insns_ = 290,
  OPT__param_uninlined_function_time_ = 291,
  OPT__param_uninlined_thunk_insns_ = 292,
  OPT__param_uninlined_thunk_time_ = 293,
  OPT__param_unlikely_bb_count_fraction_ = 294,
  OPT__param_unroll_jam_max_unroll_ = 295,
  OPT__param_unroll_jam_min_percent_ = 296,
  OPT__param_use_after_scope_direct_emission_threshold_ = 297,
  OPT__param_use_canonical_types_ = 298,
  OPT__param_vect_epilogues_nomask_ = 299,
  OPT__param_vect_max_peeling_for_alignment_ = 300,
  OPT__param_vect_max_version_for_alias_checks_ = 301,
  OPT__param_vect_max_version_for_alignment_checks_ = 302,
  OPT__param_vect_partial_vector_usage_ = 303,
# 8915 "./options.h"
  OPT__sysroot_ = 334,
  OPT__target_help = 335,
# 8926 "./options.h"
  OPT__version = 345,


  OPT_A = 348,
  OPT_B = 349,
  OPT_C = 350,
  OPT_CC = 351,
  OPT_D = 352,
  OPT_E = 353,
  OPT_F = 354,
  OPT_H = 355,
  OPT_Hd = 356,
  OPT_Hf = 357,
  OPT_I = 358,
  OPT_J = 359,
  OPT_L = 360,
  OPT_M = 361,
  OPT_MD = 362,
  OPT_MF = 363,
  OPT_MG = 364,
  OPT_MM = 365,
  OPT_MMD = 366,
  OPT_MP = 367,
  OPT_MQ = 368,
  OPT_MT = 369,
  OPT_N = 370,
  OPT_O = 371,
  OPT_Ofast = 372,
  OPT_Og = 373,
  OPT_Os = 374,
  OPT_P = 375,
  OPT_Q = 376,
  OPT_Qn = 377,
  OPT_Qy = 378,
  OPT_R = 379,
  OPT_S = 380,
  OPT_T = 381,
  OPT_Tbss = 382,
  OPT_Tbss_ = 383,
  OPT_Tdata = 384,
  OPT_Tdata_ = 385,
  OPT_Ttext = 386,
  OPT_Ttext_ = 387,
  OPT_U = 388,

  OPT_Wa_ = 390,
  OPT_Wabi = 391,
  OPT_Wabi_tag = 392,
  OPT_Wabi_ = 393,
  OPT_Wabsolute_value = 394,
  OPT_Waddress = 395,
  OPT_Waddress_of_packed_member = 396,
  OPT_Waggregate_return = 397,
  OPT_Waggressive_loop_optimizations = 398,
  OPT_Waliasing = 399,
  OPT_Walign_commons = 400,

  OPT_Waligned_new_ = 402,
  OPT_Wall = 403,
  OPT_Walloc_size_larger_than_ = 404,
  OPT_Walloc_zero = 405,
  OPT_Walloca = 406,
  OPT_Walloca_larger_than_ = 407,
  OPT_Wampersand = 408,
  OPT_Wanalyzer_double_fclose = 409,
  OPT_Wanalyzer_double_free = 410,
  OPT_Wanalyzer_exposure_through_output_file = 411,
  OPT_Wanalyzer_file_leak = 412,
  OPT_Wanalyzer_free_of_non_heap = 413,
  OPT_Wanalyzer_malloc_leak = 414,
  OPT_Wanalyzer_null_argument = 415,
  OPT_Wanalyzer_null_dereference = 416,
  OPT_Wanalyzer_possible_null_argument = 417,
  OPT_Wanalyzer_possible_null_dereference = 418,
  OPT_Wanalyzer_stale_setjmp_buffer = 419,
  OPT_Wanalyzer_tainted_array_index = 420,
  OPT_Wanalyzer_too_complex = 421,
  OPT_Wanalyzer_unsafe_call_within_signal_handler = 422,
  OPT_Wanalyzer_use_after_free = 423,
  OPT_Wanalyzer_use_of_pointer_in_stale_stack_frame = 424,
  OPT_Wargument_mismatch = 425,
  OPT_Warith_conversion = 426,
  OPT_Warray_bounds = 427,
  OPT_Warray_bounds_ = 428,
  OPT_Warray_temporaries = 429,
  OPT_Wassign_intercept = 430,

  OPT_Wattribute_alias_ = 432,
  OPT_Wattribute_warning = 433,
  OPT_Wattributes = 434,
  OPT_Wbad_function_cast = 435,
  OPT_Wbool_compare = 436,
  OPT_Wbool_operation = 437,
  OPT_Wbuiltin_declaration_mismatch = 438,
  OPT_Wbuiltin_macro_redefined = 439,
  OPT_Wc___compat = 440,

  OPT_Wc__11_compat = 442,
  OPT_Wc__14_compat = 443,
  OPT_Wc__17_compat = 444,

  OPT_Wc__20_compat = 446,

  OPT_Wc_binding_type = 448,
  OPT_Wc11_c2x_compat = 449,
  OPT_Wc90_c99_compat = 450,
  OPT_Wc99_c11_compat = 451,
  OPT_Wcannot_profile = 452,
  OPT_Wcast_align = 453,
  OPT_Wcast_align_strict = 454,
  OPT_Wcast_function_type = 455,
  OPT_Wcast_qual = 456,
  OPT_Wcast_result = 457,

  OPT_Wcatch_value_ = 459,
  OPT_Wchar_subscripts = 460,
  OPT_Wcharacter_truncation = 461,
  OPT_Wchkp = 462,
  OPT_Wclass_conversion = 463,
  OPT_Wclass_memaccess = 464,
  OPT_Wclobbered = 465,
  OPT_Wcomma_subscript = 466,
  OPT_Wcomment = 467,

  OPT_Wcompare_reals = 469,
  OPT_Wconditionally_supported = 470,
  OPT_Wconversion = 471,
  OPT_Wconversion_extra = 472,
  OPT_Wconversion_null = 473,
  OPT_Wcoverage_mismatch = 474,
  OPT_Wcpp = 475,
  OPT_Wctor_dtor_privacy = 476,
  OPT_Wdangling_else = 477,
  OPT_Wdate_time = 478,
  OPT_Wdeclaration_after_statement = 479,
  OPT_Wdelete_incomplete = 480,
  OPT_Wdelete_non_virtual_dtor = 481,
  OPT_Wdeprecated = 482,
  OPT_Wdeprecated_copy = 483,
  OPT_Wdeprecated_copy_dtor = 484,
  OPT_Wdeprecated_declarations = 485,
  OPT_Wdesignated_init = 486,
  OPT_Wdisabled_optimization = 487,
  OPT_Wdiscarded_array_qualifiers = 488,
  OPT_Wdiscarded_qualifiers = 489,
  OPT_Wdiv_by_zero = 490,
  OPT_Wdo_subscript = 491,
  OPT_Wdouble_promotion = 492,
  OPT_Wduplicate_decl_specifier = 493,
  OPT_Wduplicated_branches = 494,
  OPT_Wduplicated_cond = 495,
  OPT_Weffc__ = 496,
  OPT_Wempty_body = 497,
  OPT_Wendif_labels = 498,
  OPT_Wenum_compare = 499,
  OPT_Wenum_conversion = 500,
  OPT_Werror = 501,

  OPT_Werror_ = 503,
  OPT_Wexpansion_to_defined = 504,
  OPT_Wextra = 505,
  OPT_Wextra_semi = 506,
  OPT_Wfatal_errors = 507,
  OPT_Wfloat_conversion = 508,
  OPT_Wfloat_equal = 509,

  OPT_Wformat_contains_nul = 511,
  OPT_Wformat_diag = 512,
  OPT_Wformat_extra_args = 513,
  OPT_Wformat_nonliteral = 514,

  OPT_Wformat_overflow_ = 516,
  OPT_Wformat_security = 517,
  OPT_Wformat_signedness = 518,

  OPT_Wformat_truncation_ = 520,
  OPT_Wformat_y2k = 521,
  OPT_Wformat_zero_length = 522,
  OPT_Wformat_ = 523,
  OPT_Wframe_address = 524,
  OPT_Wframe_larger_than_ = 525,
  OPT_Wfree_nonheap_object = 526,
  OPT_Wfrontend_loop_interchange = 527,
  OPT_Wfunction_elimination = 528,

  OPT_Wif_not_aligned = 530,
  OPT_Wignored_attributes = 531,
  OPT_Wignored_qualifiers = 532,
  OPT_Wimplicit = 533,

  OPT_Wimplicit_fallthrough_ = 535,
  OPT_Wimplicit_function_declaration = 536,
  OPT_Wimplicit_int = 537,
  OPT_Wimplicit_interface = 538,
  OPT_Wimplicit_procedure = 539,

  OPT_Winaccessible_base = 541,
  OPT_Wincompatible_pointer_types = 542,
  OPT_Winherited_variadic_ctor = 543,
  OPT_Winit_list_lifetime = 544,
  OPT_Winit_self = 545,
  OPT_Winline = 546,
  OPT_Wint_conversion = 547,
  OPT_Wint_in_bool_context = 548,
  OPT_Wint_to_pointer_cast = 549,
  OPT_Winteger_division = 550,
  OPT_Wintrinsic_shadow = 551,
  OPT_Wintrinsics_std = 552,
  OPT_Winvalid_memory_model = 553,
  OPT_Winvalid_offsetof = 554,
  OPT_Winvalid_pch = 555,
  OPT_Wjump_misses_init = 556,
  OPT_Wl_ = 557,

  OPT_Wlarger_than_ = 559,
  OPT_Wline_truncation = 560,
  OPT_Wliteral_suffix = 561,
  OPT_Wlogical_not_parentheses = 562,
  OPT_Wlogical_op = 563,
  OPT_Wlong_long = 564,
  OPT_Wlto_type_mismatch = 565,
  OPT_Wmain = 566,
  OPT_Wmaybe_uninitialized = 567,
  OPT_Wmemset_elt_size = 568,
  OPT_Wmemset_transposed_args = 569,
  OPT_Wmisleading_indentation = 570,
  OPT_Wmismatched_tags = 571,
  OPT_Wmissing_attributes = 572,
  OPT_Wmissing_braces = 573,
  OPT_Wmissing_declarations = 574,
  OPT_Wmissing_field_initializers = 575,

  OPT_Wmissing_include_dirs = 577,

  OPT_Wmissing_parameter_type = 579,
  OPT_Wmissing_profile = 580,
  OPT_Wmissing_prototypes = 581,
  OPT_Wmudflap = 582,
  OPT_Wmultichar = 583,
  OPT_Wmultiple_inheritance = 584,
  OPT_Wmultistatement_macros = 585,
  OPT_Wnamespaces = 586,
  OPT_Wnarrowing = 587,
  OPT_Wnested_externs = 588,






  OPT_Wnoexcept = 595,
  OPT_Wnoexcept_type = 596,
  OPT_Wnon_template_friend = 597,
  OPT_Wnon_virtual_dtor = 598,
  OPT_Wnonnull = 599,
  OPT_Wnonnull_compare = 600,

  OPT_Wnormalized_ = 602,
  OPT_Wnull_dereference = 603,
  OPT_Wodr = 604,
  OPT_Wold_style_cast = 605,
  OPT_Wold_style_declaration = 606,
  OPT_Wold_style_definition = 607,
  OPT_Wopenmp_simd = 608,
  OPT_Woverflow = 609,
  OPT_Woverlength_strings = 610,
  OPT_Woverloaded_virtual = 611,
  OPT_Woverride_init = 612,
  OPT_Woverride_init_side_effects = 613,
  OPT_Woverwrite_recursive = 614,
  OPT_Wp_ = 615,
  OPT_Wpacked = 616,
  OPT_Wpacked_bitfield_compat = 617,
  OPT_Wpacked_not_aligned = 618,
  OPT_Wpadded = 619,
  OPT_Wparentheses = 620,
  OPT_Wpedantic = 621,
  OPT_Wpessimizing_move = 622,

  OPT_Wplacement_new_ = 624,
  OPT_Wpmf_conversions = 625,
  OPT_Wpointer_arith = 626,
  OPT_Wpointer_compare = 627,
  OPT_Wpointer_sign = 628,
  OPT_Wpointer_to_int_cast = 629,
  OPT_Wpragmas = 630,
  OPT_Wprio_ctor_dtor = 631,
  OPT_Wproperty_assign_default = 632,
  OPT_Wprotocol = 633,
  OPT_Wpsabi = 634,
  OPT_Wreal_q_constant = 635,
  OPT_Wrealloc_lhs = 636,
  OPT_Wrealloc_lhs_all = 637,
  OPT_Wredundant_decls = 638,
  OPT_Wredundant_move = 639,
  OPT_Wredundant_tags = 640,
  OPT_Wregister = 641,
  OPT_Wreorder = 642,
  OPT_Wrestrict = 643,
  OPT_Wreturn_local_addr = 644,
  OPT_Wreturn_type = 645,
  OPT_Wscalar_storage_order = 646,
  OPT_Wselector = 647,
  OPT_Wsequence_point = 648,
  OPT_Wshadow = 649,

  OPT_Wshadow_ivar = 651,

  OPT_Wshadow_compatible_local = 653,

  OPT_Wshadow_local = 655,
  OPT_Wshift_count_negative = 656,
  OPT_Wshift_count_overflow = 657,
  OPT_Wshift_negative_value = 658,

  OPT_Wshift_overflow_ = 660,
  OPT_Wsign_compare = 661,
  OPT_Wsign_conversion = 662,
  OPT_Wsign_promo = 663,
  OPT_Wsized_deallocation = 664,
  OPT_Wsizeof_array_argument = 665,
  OPT_Wsizeof_pointer_div = 666,
  OPT_Wsizeof_pointer_memaccess = 667,
  OPT_Wspeculative = 668,
  OPT_Wstack_protector = 669,
  OPT_Wstack_usage_ = 670,
  OPT_Wstrict_aliasing = 671,
  OPT_Wstrict_aliasing_ = 672,
  OPT_Wstrict_null_sentinel = 673,
  OPT_Wstrict_overflow = 674,
  OPT_Wstrict_overflow_ = 675,
  OPT_Wstrict_prototypes = 676,
  OPT_Wstrict_selector_match = 677,
  OPT_Wstring_compare = 678,

  OPT_Wstringop_overflow_ = 680,
  OPT_Wstringop_truncation = 681,
  OPT_Wsubobject_linkage = 682,
  OPT_Wsuggest_attribute_cold = 683,
  OPT_Wsuggest_attribute_const = 684,
  OPT_Wsuggest_attribute_format = 685,
  OPT_Wsuggest_attribute_malloc = 686,
  OPT_Wsuggest_attribute_noreturn = 687,
  OPT_Wsuggest_attribute_pure = 688,
  OPT_Wsuggest_final_methods = 689,
  OPT_Wsuggest_final_types = 690,
  OPT_Wsuggest_override = 691,
  OPT_Wsurprising = 692,
  OPT_Wswitch = 693,
  OPT_Wswitch_bool = 694,
  OPT_Wswitch_default = 695,
  OPT_Wswitch_enum = 696,
  OPT_Wswitch_outside_range = 697,
  OPT_Wswitch_unreachable = 698,
  OPT_Wsync_nand = 699,
  OPT_Wsynth = 700,
  OPT_Wsystem_headers = 701,
  OPT_Wtabs = 702,
  OPT_Wtarget_lifetime = 703,
  OPT_Wtautological_compare = 704,
  OPT_Wtemplates = 705,
  OPT_Wterminate = 706,
  OPT_Wtraditional = 707,
  OPT_Wtraditional_conversion = 708,
  OPT_Wtrampolines = 709,
  OPT_Wtrigraphs = 710,
  OPT_Wtype_limits = 711,
  OPT_Wundeclared_selector = 712,
  OPT_Wundef = 713,
  OPT_Wundefined_do_loop = 714,
  OPT_Wunderflow = 715,
  OPT_Wuninitialized = 716,
  OPT_Wunknown_pragmas = 717,


  OPT_Wunsuffixed_float_constants = 720,
  OPT_Wunused = 721,
  OPT_Wunused_but_set_parameter = 722,
  OPT_Wunused_but_set_variable = 723,

  OPT_Wunused_const_variable_ = 725,
  OPT_Wunused_dummy_argument = 726,
  OPT_Wunused_function = 727,
  OPT_Wunused_label = 728,
  OPT_Wunused_local_typedefs = 729,
  OPT_Wunused_macros = 730,
  OPT_Wunused_parameter = 731,
  OPT_Wunused_result = 732,
  OPT_Wunused_value = 733,
  OPT_Wunused_variable = 734,
  OPT_Wuse_without_only = 735,
  OPT_Wuseless_cast = 736,
  OPT_Wvarargs = 737,
  OPT_Wvariadic_macros = 738,
  OPT_Wvector_operation_performance = 739,
  OPT_Wvirtual_inheritance = 740,
  OPT_Wvirtual_move_assign = 741,
  OPT_Wvla = 742,
  OPT_Wvla_larger_than_ = 743,
  OPT_Wvolatile = 744,
  OPT_Wvolatile_register_var = 745,
  OPT_Wwrite_strings = 746,
  OPT_Wzero_as_null_pointer_constant = 747,
  OPT_Wzero_length_bounds = 748,
  OPT_Wzerotrip = 749,
  OPT_X = 750,
  OPT_Xassembler = 751,
  OPT_Xf = 752,
  OPT_Xlinker = 753,
  OPT_Xpreprocessor = 754,
  OPT_Z = 755,
  OPT_ansi = 756,
  OPT_aux_info = 757,

  OPT_c = 759,
  OPT_callgraph = 760,
  OPT_coverage = 761,
  OPT_cpp = 762,
  OPT_cpp_ = 763,
  OPT_d = 764,
  OPT_debuglib_ = 765,
  OPT_defaultlib_ = 766,
  OPT_defined_only = 767,
  OPT_demangle = 768,
  OPT_dstartfiles = 769,
  OPT_dump_body_ = 770,
  OPT_dump_level_ = 771,
  OPT_dumpbase = 772,
  OPT_dumpbase_ext = 773,
  OPT_dumpdir = 774,
  OPT_dumpfullversion = 775,
  OPT_dumpmachine = 776,
  OPT_dumpspecs = 777,
  OPT_dumpversion = 778,
  OPT_e = 779,
  OPT_export_dynamic = 780,
  OPT_fPIC = 781,
  OPT_fPIE = 782,
  OPT_fRTS_ = 783,
  OPT_fabi_compat_version_ = 784,
  OPT_fabi_version_ = 785,
  OPT_faccess_control = 786,
  OPT_fada_spec_parent_ = 787,
  OPT_faggressive_function_elimination = 788,
  OPT_faggressive_loop_optimizations = 789,
  OPT_falign_commons = 790,
  OPT_falign_functions = 791,
  OPT_falign_functions_ = 792,
  OPT_falign_jumps = 793,
  OPT_falign_jumps_ = 794,
  OPT_falign_labels = 795,
  OPT_falign_labels_ = 796,
  OPT_falign_loops = 797,
  OPT_falign_loops_ = 798,

  OPT_faligned_new_ = 800,
  OPT_fall_instantiations = 801,
  OPT_fall_intrinsics = 802,
  OPT_fall_virtual = 803,
  OPT_fallocation_dce = 804,
  OPT_fallow_argument_mismatch = 805,
  OPT_fallow_invalid_boz = 806,
  OPT_fallow_leading_underscore = 807,
  OPT_fallow_parameterless_variadic_functions = 808,
  OPT_fallow_store_data_races = 809,
  OPT_falt_external_templates = 810,
  OPT_fanalyzer = 811,
  OPT_fanalyzer_call_summaries = 812,
  OPT_fanalyzer_checker_ = 813,
  OPT_fanalyzer_fine_grained = 814,
  OPT_fanalyzer_show_duplicate_count = 815,
  OPT_fanalyzer_state_merge = 816,
  OPT_fanalyzer_state_purge = 817,
  OPT_fanalyzer_transitivity = 818,
  OPT_fanalyzer_verbose_edges = 819,
  OPT_fanalyzer_verbose_state_changes = 820,
  OPT_fanalyzer_verbosity_ = 821,




  OPT_fasan_shadow_offset_ = 826,
  OPT_fasm = 827,
  OPT_fassert = 828,
  OPT_fassociative_math = 829,
  OPT_fassume_phsa = 830,
  OPT_fasynchronous_unwind_tables = 831,
  OPT_fauto_inc_dec = 832,
  OPT_fauto_profile = 833,
  OPT_fauto_profile_ = 834,
  OPT_fautomatic = 835,
  OPT_fbackslash = 836,
  OPT_fbacktrace = 837,
  OPT_fblas_matmul_limit_ = 838,
  OPT_fbounds_check = 839,
  OPT_fbounds_check_ = 840,
  OPT_fbranch_count_reg = 841,
  OPT_fbranch_probabilities = 842,



  OPT_fbuilding_libgcc = 846,
  OPT_fbuilding_libphobos_tests = 847,
  OPT_fbuiltin = 848,
  OPT_fbuiltin_ = 849,
  OPT_fbuiltin_printf = 850,
  OPT_fc_prototypes = 851,
  OPT_fc_prototypes_external = 852,
  OPT_fcall_saved_ = 853,
  OPT_fcall_used_ = 854,
  OPT_fcaller_saves = 855,
  OPT_fcallgraph_info = 856,
  OPT_fcallgraph_info_ = 857,
  OPT_fcanonical_system_headers = 858,

  OPT_fcf_protection_ = 860,
  OPT_fchar8_t = 861,
  OPT_fcheck_array_temporaries = 862,

  OPT_fcheck_new = 864,
  OPT_fcheck_pointer_bounds = 865,
  OPT_fcheck_ = 866,
  OPT_fchecking = 867,
  OPT_fchecking_ = 868,
  OPT_fchkp_check_incomplete_type = 869,
  OPT_fchkp_check_read = 870,
  OPT_fchkp_check_write = 871,
  OPT_fchkp_first_field_has_own_bounds = 872,
  OPT_fchkp_flexible_struct_trailing_arrays = 873,
  OPT_fchkp_instrument_calls = 874,
  OPT_fchkp_instrument_marked_only = 875,
  OPT_fchkp_narrow_bounds = 876,
  OPT_fchkp_narrow_to_innermost_array = 877,
  OPT_fchkp_optimize = 878,
  OPT_fchkp_store_bounds = 879,
  OPT_fchkp_treat_zero_dynamic_size_as_infinite = 880,
  OPT_fchkp_use_fast_string_functions = 881,
  OPT_fchkp_use_nochk_string_functions = 882,
  OPT_fchkp_use_static_bounds = 883,
  OPT_fchkp_use_static_const_bounds = 884,
  OPT_fchkp_use_wrappers = 885,
  OPT_fchkp_zero_input_bounds_for_main = 886,

  OPT_fcoarray_ = 888,
  OPT_fcode_hoisting = 889,
  OPT_fcombine_stack_adjustments = 890,
  OPT_fcommon = 891,
  OPT_fcompare_debug = 892,
  OPT_fcompare_debug_second = 893,
  OPT_fcompare_debug_ = 894,
  OPT_fcompare_elim = 895,
  OPT_fconcepts = 896,
  OPT_fconcepts_diagnostics_depth_ = 897,
  OPT_fconcepts_ts = 898,
  OPT_fcond_mismatch = 899,

  OPT_fconserve_stack = 901,
  OPT_fconstant_string_class_ = 902,
  OPT_fconstexpr_cache_depth_ = 903,
  OPT_fconstexpr_depth_ = 904,
  OPT_fconstexpr_loop_limit_ = 905,
  OPT_fconstexpr_ops_limit_ = 906,
  OPT_fconvert_ = 907,
  OPT_fcoroutines = 908,
  OPT_fcprop_registers = 909,
  OPT_fcray_pointer = 910,
  OPT_fcrossjumping = 911,
  OPT_fcse_follow_jumps = 912,

  OPT_fcx_fortran_rules = 914,
  OPT_fcx_limited_range = 915,
  OPT_fd_lines_as_code = 916,
  OPT_fd_lines_as_comments = 917,
  OPT_fdata_sections = 918,
  OPT_fdbg_cnt_list = 919,
  OPT_fdbg_cnt_ = 920,
  OPT_fdce = 921,
  OPT_fdebug = 922,
  OPT_fdebug_cpp = 923,
  OPT_fdebug_prefix_map_ = 924,
  OPT_fdebug_types_section = 925,
  OPT_fdebug_ = 926,
  OPT_fdec = 927,
  OPT_fdec_blank_format_item = 928,
  OPT_fdec_char_conversions = 929,
  OPT_fdec_format_defaults = 930,
  OPT_fdec_include = 931,
  OPT_fdec_intrinsic_ints = 932,
  OPT_fdec_math = 933,
  OPT_fdec_static = 934,
  OPT_fdec_structure = 935,
  OPT_fdeclone_ctor_dtor = 936,

  OPT_fdefault_double_8 = 938,

  OPT_fdefault_integer_8 = 940,
  OPT_fdefault_real_10 = 941,
  OPT_fdefault_real_16 = 942,
  OPT_fdefault_real_8 = 943,
  OPT_fdefer_pop = 944,
  OPT_fdelayed_branch = 945,
  OPT_fdelete_dead_exceptions = 946,
  OPT_fdelete_null_pointer_checks = 947,
  OPT_fdevirtualize = 948,
  OPT_fdevirtualize_at_ltrans = 949,
  OPT_fdevirtualize_speculatively = 950,

  OPT_fdiagnostics_color_ = 952,
  OPT_fdiagnostics_column_origin_ = 953,
  OPT_fdiagnostics_column_unit_ = 954,
  OPT_fdiagnostics_format_ = 955,
  OPT_fdiagnostics_generate_patch = 956,
  OPT_fdiagnostics_minimum_margin_width_ = 957,
  OPT_fdiagnostics_parseable_fixits = 958,
  OPT_fdiagnostics_path_format_ = 959,
  OPT_fdiagnostics_plain_output = 960,
  OPT_fdiagnostics_show_caret = 961,
  OPT_fdiagnostics_show_cwe = 962,
  OPT_fdiagnostics_show_labels = 963,
  OPT_fdiagnostics_show_line_numbers = 964,
  OPT_fdiagnostics_show_location_ = 965,
  OPT_fdiagnostics_show_option = 966,
  OPT_fdiagnostics_show_path_depths = 967,
  OPT_fdiagnostics_show_template_tree = 968,
  OPT_fdiagnostics_urls_ = 969,
  OPT_fdirectives_only = 970,
  OPT_fdisable_ = 971,
  OPT_fdoc = 972,
  OPT_fdoc_dir_ = 973,
  OPT_fdoc_file_ = 974,
  OPT_fdoc_inc_ = 975,
  OPT_fdollar_ok = 976,
  OPT_fdollars_in_identifiers = 977,
  OPT_fdruntime = 978,
  OPT_fdse = 979,
  OPT_fdump_ = 980,
  OPT_fdump_ada_spec = 981,
  OPT_fdump_ada_spec_slim = 982,
  OPT_fdump_analyzer = 983,
  OPT_fdump_analyzer_callgraph = 984,
  OPT_fdump_analyzer_exploded_graph = 985,
  OPT_fdump_analyzer_exploded_nodes = 986,
  OPT_fdump_analyzer_exploded_nodes_2 = 987,
  OPT_fdump_analyzer_exploded_nodes_3 = 988,
  OPT_fdump_analyzer_state_purge = 989,
  OPT_fdump_analyzer_stderr = 990,
  OPT_fdump_analyzer_supergraph = 991,

  OPT_fdump_d_original = 993,
  OPT_fdump_final_insns = 994,
  OPT_fdump_final_insns_ = 995,
  OPT_fdump_fortran_global = 996,
  OPT_fdump_fortran_optimized = 997,
  OPT_fdump_fortran_original = 998,
  OPT_fdump_go_spec_ = 999,
  OPT_fdump_internal_locations = 1000,
  OPT_fdump_noaddr = 1001,

  OPT_fdump_passes = 1003,
  OPT_fdump_scos = 1004,
  OPT_fdump_unnumbered = 1005,
  OPT_fdump_unnumbered_links = 1006,
  OPT_fdwarf2_cfi_asm = 1007,
  OPT_fearly_inlining = 1008,
  OPT_felide_constructors = 1009,
  OPT_felide_type = 1010,

  OPT_feliminate_unused_debug_symbols = 1012,
  OPT_feliminate_unused_debug_types = 1013,
  OPT_femit_class_debug_always = 1014,
  OPT_femit_struct_debug_baseonly = 1015,
  OPT_femit_struct_debug_detailed_ = 1016,
  OPT_femit_struct_debug_reduced = 1017,
  OPT_fenable_ = 1018,
  OPT_fenforce_eh_specs = 1019,
  OPT_fenum_int_equiv = 1020,
  OPT_fexceptions = 1021,
  OPT_fexcess_precision_ = 1022,
  OPT_fexec_charset_ = 1023,
  OPT_fexpensive_optimizations = 1024,
  OPT_fext_numeric_literals = 1025,
  OPT_fextended_identifiers = 1026,
  OPT_fextern_tls_init = 1027,
  OPT_fexternal_blas = 1028,
  OPT_fexternal_templates = 1029,
  OPT_ff2c = 1030,
  OPT_ffast_math = 1031,
  OPT_ffat_lto_objects = 1032,
  OPT_ffile_prefix_map_ = 1033,
  OPT_ffinite_loops = 1034,
  OPT_ffinite_math_only = 1035,
  OPT_ffixed_ = 1036,
  OPT_ffixed_form = 1037,
  OPT_ffixed_line_length_ = 1038,
  OPT_ffixed_line_length_none = 1039,
  OPT_ffloat_store = 1040,
  OPT_ffor_scope = 1041,

  OPT_fforward_propagate = 1043,
  OPT_ffp_contract_ = 1044,
  OPT_ffp_int_builtin_inexact = 1045,
  OPT_ffpe_summary_ = 1046,
  OPT_ffpe_trap_ = 1047,
  OPT_ffree_form = 1048,
  OPT_ffree_line_length_ = 1049,
  OPT_ffree_line_length_none = 1050,
  OPT_ffreestanding = 1051,
  OPT_ffriend_injection = 1052,
  OPT_ffrontend_loop_interchange = 1053,
  OPT_ffrontend_optimize = 1054,
  OPT_ffunction_cse = 1055,
  OPT_ffunction_sections = 1056,
  OPT_fgcse = 1057,
  OPT_fgcse_after_reload = 1058,
  OPT_fgcse_las = 1059,
  OPT_fgcse_lm = 1060,
  OPT_fgcse_sm = 1061,
  OPT_fgimple = 1062,
  OPT_fgnat_encodings_ = 1063,
  OPT_fgnu_keywords = 1064,
  OPT_fgnu_runtime = 1065,
  OPT_fgnu_tm = 1066,
  OPT_fgnu_unique = 1067,
  OPT_fgnu89_inline = 1068,
  OPT_fgo_c_header_ = 1069,
  OPT_fgo_check_divide_overflow = 1070,
  OPT_fgo_check_divide_zero = 1071,
  OPT_fgo_compiling_runtime = 1072,
  OPT_fgo_debug_escape = 1073,
  OPT_fgo_debug_escape_hash_ = 1074,
  OPT_fgo_debug_optimization = 1075,
  OPT_fgo_dump_ = 1076,
  OPT_fgo_optimize_ = 1077,
  OPT_fgo_pkgpath_ = 1078,
  OPT_fgo_prefix_ = 1079,
  OPT_fgo_relative_import_path_ = 1080,
  OPT_fgraphite = 1081,
  OPT_fgraphite_identity = 1082,
  OPT_fguess_branch_probability = 1083,
  OPT_fguiding_decls = 1084,



  OPT_fhoist_adjacent_loads = 1088,
  OPT_fhonor_std = 1089,
  OPT_fhosted = 1090,
  OPT_fhuge_objects = 1091,
  OPT_fident = 1092,
  OPT_fif_conversion = 1093,
  OPT_fif_conversion2 = 1094,
  OPT_fignore_unknown_pragmas = 1095,
  OPT_fimplement_inlines = 1096,
  OPT_fimplicit_inline_templates = 1097,
  OPT_fimplicit_none = 1098,
  OPT_fimplicit_templates = 1099,
  OPT_findirect_inlining = 1100,
  OPT_finhibit_size_directive = 1101,
  OPT_finit_character_ = 1102,
  OPT_finit_derived = 1103,
  OPT_finit_integer_ = 1104,
  OPT_finit_local_zero = 1105,
  OPT_finit_logical_ = 1106,
  OPT_finit_real_ = 1107,
  OPT_finline = 1108,
  OPT_finline_arg_packing = 1109,
  OPT_finline_atomics = 1110,
  OPT_finline_functions = 1111,
  OPT_finline_functions_called_once = 1112,

  OPT_finline_limit_ = 1114,
  OPT_finline_matmul_limit_ = 1115,
  OPT_finline_small_functions = 1116,
  OPT_finput_charset_ = 1117,
  OPT_finstrument_functions = 1118,
  OPT_finstrument_functions_exclude_file_list_ = 1119,
  OPT_finstrument_functions_exclude_function_list_ = 1120,
  OPT_finteger_4_integer_8 = 1121,
  OPT_fintrinsic_modules_path = 1122,
  OPT_fintrinsic_modules_path_ = 1123,
  OPT_finvariants = 1124,
  OPT_fipa_bit_cp = 1125,
  OPT_fipa_cp = 1126,

  OPT_fipa_cp_clone = 1128,
  OPT_fipa_icf = 1129,
  OPT_fipa_icf_functions = 1130,
  OPT_fipa_icf_variables = 1131,

  OPT_fipa_profile = 1133,
  OPT_fipa_pta = 1134,
  OPT_fipa_pure_const = 1135,
  OPT_fipa_ra = 1136,
  OPT_fipa_reference = 1137,
  OPT_fipa_reference_addressable = 1138,
  OPT_fipa_sra = 1139,
  OPT_fipa_stack_alignment = 1140,

  OPT_fipa_vrp = 1142,
  OPT_fira_algorithm_ = 1143,
  OPT_fira_hoist_pressure = 1144,
  OPT_fira_loop_pressure = 1145,
  OPT_fira_region_ = 1146,
  OPT_fira_share_save_slots = 1147,
  OPT_fira_share_spill_slots = 1148,
  OPT_fira_verbose_ = 1149,
  OPT_fisolate_erroneous_paths_attribute = 1150,
  OPT_fisolate_erroneous_paths_dereference = 1151,
  OPT_fivar_visibility_ = 1152,
  OPT_fivopts = 1153,
  OPT_fjump_tables = 1154,
  OPT_fkeep_gc_roots_live = 1155,
  OPT_fkeep_inline_dllexport = 1156,
  OPT_fkeep_inline_functions = 1157,
  OPT_fkeep_static_consts = 1158,
  OPT_fkeep_static_functions = 1159,
  OPT_flabels_ok = 1160,
  OPT_flarge_source_files = 1161,
  OPT_flax_vector_conversions = 1162,
  OPT_fleading_underscore = 1163,
  OPT_flifetime_dse = 1164,
  OPT_flifetime_dse_ = 1165,
  OPT_flimit_function_alignment = 1166,
  OPT_flinker_output_ = 1167,

  OPT_flive_patching_ = 1169,
  OPT_flive_range_shrinkage = 1170,
  OPT_flocal_ivars = 1171,


  OPT_floop_interchange = 1174,
  OPT_floop_nest_optimize = 1175,

  OPT_floop_parallelize_all = 1177,

  OPT_floop_unroll_and_jam = 1179,
  OPT_flra_remat = 1180,
  OPT_flto = 1181,
  OPT_flto_compression_level_ = 1182,

  OPT_flto_partition_ = 1184,
  OPT_flto_report = 1185,
  OPT_flto_report_wpa = 1186,
  OPT_flto_ = 1187,
  OPT_fltrans = 1188,
  OPT_fltrans_output_list_ = 1189,
  OPT_fmacro_prefix_map_ = 1190,
  OPT_fmain = 1191,
  OPT_fmath_errno = 1192,
  OPT_fmax_array_constructor_ = 1193,
  OPT_fmax_errors_ = 1194,
  OPT_fmax_identifier_length_ = 1195,
  OPT_fmax_include_depth_ = 1196,
  OPT_fmax_stack_var_size_ = 1197,
  OPT_fmax_subrecord_length_ = 1198,
  OPT_fmem_report = 1199,
  OPT_fmem_report_wpa = 1200,
  OPT_fmerge_all_constants = 1201,
  OPT_fmerge_constants = 1202,
  OPT_fmerge_debug_strings = 1203,
  OPT_fmessage_length_ = 1204,
  OPT_fmodule_file_ = 1205,
  OPT_fmodule_private = 1206,
  OPT_fmoduleinfo = 1207,
  OPT_fmodulo_sched = 1208,
  OPT_fmodulo_sched_allow_regmoves = 1209,
  OPT_fmove_loop_invariants = 1210,
  OPT_fms_extensions = 1211,
  OPT_fmudflap = 1212,
  OPT_fmudflapir = 1213,
  OPT_fmudflapth = 1214,
  OPT_fname_mangling_version_ = 1215,
  OPT_fnew_abi = 1216,
  OPT_fnew_inheriting_ctors = 1217,
  OPT_fnew_ttp_matching = 1218,
  OPT_fnext_runtime = 1219,
  OPT_fnil_receivers = 1220,
  OPT_fnon_call_exceptions = 1221,
  OPT_fnonansi_builtins = 1222,
  OPT_fnonnull_objects = 1223,
  OPT_fnothrow_opt = 1224,
  OPT_fobjc_abi_version_ = 1225,
  OPT_fobjc_call_cxx_cdtors = 1226,
  OPT_fobjc_direct_dispatch = 1227,
  OPT_fobjc_exceptions = 1228,
  OPT_fobjc_gc = 1229,
  OPT_fobjc_nilcheck = 1230,
  OPT_fobjc_sjlj_exceptions = 1231,
  OPT_fobjc_std_objc1 = 1232,
  OPT_foffload_abi_ = 1233,
  OPT_foffload_ = 1234,
  OPT_fomit_frame_pointer = 1235,
  OPT_fonly_ = 1236,
  OPT_fopenacc = 1237,
  OPT_fopenacc_dim_ = 1238,
  OPT_fopenmp = 1239,
  OPT_fopenmp_simd = 1240,
  OPT_foperator_names = 1241,
  OPT_fopt_info = 1242,
  OPT_fopt_info_ = 1243,

  OPT_foptimize_sibling_calls = 1245,
  OPT_foptimize_strlen = 1246,

  OPT_fpack_derived = 1248,
  OPT_fpack_struct = 1249,
  OPT_fpack_struct_ = 1250,
  OPT_fpad_source = 1251,
  OPT_fparallel_jobs_ = 1252,
  OPT_fpartial_inlining = 1253,
  OPT_fpatchable_function_entry_ = 1254,
  OPT_fpcc_struct_return = 1255,
  OPT_fpch_deps = 1256,
  OPT_fpch_preprocess = 1257,
  OPT_fpeel_loops = 1258,
  OPT_fpeephole = 1259,
  OPT_fpeephole2 = 1260,
  OPT_fpermissive = 1261,
  OPT_fpermitted_flt_eval_methods_ = 1262,
  OPT_fpic = 1263,
  OPT_fpie = 1264,
  OPT_fplan9_extensions = 1265,
  OPT_fplt = 1266,
  OPT_fplugin_arg_ = 1267,
  OPT_fplugin_ = 1268,
  OPT_fpost_ipa_mem_report = 1269,
  OPT_fpostconditions = 1270,
  OPT_fpre_include_ = 1271,
  OPT_fpre_ipa_mem_report = 1272,
  OPT_fpreconditions = 1273,
  OPT_fpredictive_commoning = 1274,
  OPT_fprefetch_loop_arrays = 1275,
  OPT_fpreprocessed = 1276,
  OPT_fpretty_templates = 1277,
  OPT_fprintf_return_value = 1278,
  OPT_fprofile = 1279,
  OPT_fprofile_abs_path = 1280,
  OPT_fprofile_arcs = 1281,
  OPT_fprofile_correction = 1282,
  OPT_fprofile_dir_ = 1283,
  OPT_fprofile_exclude_files_ = 1284,
  OPT_fprofile_filter_files_ = 1285,
  OPT_fprofile_generate = 1286,
  OPT_fprofile_generate_ = 1287,
  OPT_fprofile_note_ = 1288,
  OPT_fprofile_partial_training = 1289,
  OPT_fprofile_prefix_path_ = 1290,
  OPT_fprofile_reorder_functions = 1291,
  OPT_fprofile_report = 1292,
  OPT_fprofile_reproducible = 1293,
  OPT_fprofile_update_ = 1294,
  OPT_fprofile_use = 1295,
  OPT_fprofile_use_ = 1296,
  OPT_fprofile_values = 1297,
  OPT_fprotect_parens = 1298,
  OPT_frandom_seed = 1299,
  OPT_frandom_seed_ = 1300,
  OPT_frange_check = 1301,
  OPT_freal_4_real_10 = 1302,
  OPT_freal_4_real_16 = 1303,
  OPT_freal_4_real_8 = 1304,
  OPT_freal_8_real_10 = 1305,
  OPT_freal_8_real_16 = 1306,
  OPT_freal_8_real_4 = 1307,
  OPT_frealloc_lhs = 1308,
  OPT_freciprocal_math = 1309,
  OPT_frecord_gcc_switches = 1310,
  OPT_frecord_marker_4 = 1311,
  OPT_frecord_marker_8 = 1312,
  OPT_frecursive = 1313,
  OPT_free = 1314,
  OPT_freg_struct_return = 1315,

  OPT_frelease = 1317,
  OPT_frename_registers = 1318,
  OPT_freorder_blocks = 1319,
  OPT_freorder_blocks_algorithm_ = 1320,
  OPT_freorder_blocks_and_partition = 1321,
  OPT_freorder_functions = 1322,
  OPT_frepack_arrays = 1323,
  OPT_freplace_objc_classes = 1324,
  OPT_frepo = 1325,
  OPT_freport_bug = 1326,
  OPT_frequire_return_statement = 1327,
  OPT_frerun_cse_after_loop = 1328,

  OPT_freschedule_modulo_scheduled_loops = 1330,
  OPT_fresolution_ = 1331,
  OPT_frounding_math = 1332,
  OPT_frtti = 1333,
  OPT_fsanitize_address_use_after_scope = 1334,
  OPT_fsanitize_coverage_ = 1335,
  OPT_fsanitize_recover = 1336,
  OPT_fsanitize_recover_ = 1337,
  OPT_fsanitize_sections_ = 1338,
  OPT_fsanitize_undefined_trap_on_error = 1339,
  OPT_fsanitize_ = 1340,
  OPT_fsave_optimization_record = 1341,
  OPT_fsched_critical_path_heuristic = 1342,
  OPT_fsched_dep_count_heuristic = 1343,
  OPT_fsched_group_heuristic = 1344,
  OPT_fsched_interblock = 1345,
  OPT_fsched_last_insn_heuristic = 1346,
  OPT_fsched_pressure = 1347,
  OPT_fsched_rank_heuristic = 1348,
  OPT_fsched_spec = 1349,
  OPT_fsched_spec_insn_heuristic = 1350,
  OPT_fsched_spec_load = 1351,
  OPT_fsched_spec_load_dangerous = 1352,
  OPT_fsched_stalled_insns = 1353,
  OPT_fsched_stalled_insns_dep = 1354,
  OPT_fsched_stalled_insns_dep_ = 1355,
  OPT_fsched_stalled_insns_ = 1356,
  OPT_fsched_verbose_ = 1357,
  OPT_fsched2_use_superblocks = 1358,

  OPT_fschedule_fusion = 1360,
  OPT_fschedule_insns = 1361,
  OPT_fschedule_insns2 = 1362,
  OPT_fsecond_underscore = 1363,
  OPT_fsection_anchors = 1364,

  OPT_fsel_sched_pipelining = 1366,
  OPT_fsel_sched_pipelining_outer_loops = 1367,
  OPT_fsel_sched_reschedule_pipelined = 1368,
  OPT_fselective_scheduling = 1369,
  OPT_fselective_scheduling2 = 1370,
  OPT_fself_test_ = 1371,
  OPT_fsemantic_interposition = 1372,
  OPT_fshort_enums = 1373,
  OPT_fshort_wchar = 1374,
  OPT_fshow_column = 1375,
  OPT_fshrink_wrap = 1376,
  OPT_fshrink_wrap_separate = 1377,
  OPT_fsign_zero = 1378,
  OPT_fsignaling_nans = 1379,
  OPT_fsigned_bitfields = 1380,
  OPT_fsigned_char = 1381,
  OPT_fsigned_zeros = 1382,
  OPT_fsimd_cost_model_ = 1383,
  OPT_fsingle_precision_constant = 1384,
  OPT_fsized_deallocation = 1385,
  OPT_fsplit_ivs_in_unroller = 1386,
  OPT_fsplit_loops = 1387,
  OPT_fsplit_outputs_ = 1388,
  OPT_fsplit_paths = 1389,
  OPT_fsplit_stack = 1390,
  OPT_fsplit_wide_types = 1391,
  OPT_fsplit_wide_types_early = 1392,
  OPT_fsquangle = 1393,
  OPT_fssa_backprop = 1394,
  OPT_fssa_phiopt = 1395,
  OPT_fsso_struct_ = 1396,
  OPT_fstack_arrays = 1397,

  OPT_fstack_check_ = 1399,
  OPT_fstack_clash_protection = 1400,
  OPT_fstack_limit = 1401,
  OPT_fstack_limit_register_ = 1402,
  OPT_fstack_limit_symbol_ = 1403,
  OPT_fstack_protector = 1404,
  OPT_fstack_protector_all = 1405,
  OPT_fstack_protector_explicit = 1406,
  OPT_fstack_protector_strong = 1407,
  OPT_fstack_reuse_ = 1408,
  OPT_fstack_usage = 1409,
  OPT_fstats = 1410,
  OPT_fstdarg_opt = 1411,
  OPT_fstore_merging = 1412,

  OPT_fstrict_aliasing = 1414,
  OPT_fstrict_enums = 1415,
  OPT_fstrict_overflow = 1416,
  OPT_fstrict_prototype = 1417,
  OPT_fstrict_volatile_bitfields = 1418,

  OPT_fstrong_eval_order_ = 1420,
  OPT_fswitch_errors = 1421,
  OPT_fsync_libcalls = 1422,
  OPT_fsyntax_only = 1423,
  OPT_ftabstop_ = 1424,

  OPT_ftail_call_workaround_ = 1426,

  OPT_ftemplate_backtrace_limit_ = 1428,

  OPT_ftemplate_depth_ = 1430,
  OPT_ftest_coverage = 1431,
  OPT_ftest_forall_temp = 1432,
  OPT_fthis_is_variable = 1433,
  OPT_fthread_jumps = 1434,
  OPT_fthreadsafe_statics = 1435,
  OPT_ftime_report = 1436,
  OPT_ftime_report_details = 1437,
  OPT_ftls_model_ = 1438,
  OPT_ftoplevel_reorder = 1439,
  OPT_ftracer = 1440,
  OPT_ftrack_macro_expansion = 1441,
  OPT_ftrack_macro_expansion_ = 1442,
  OPT_ftrampolines = 1443,
  OPT_ftransition_all = 1444,
  OPT_ftransition_checkimports = 1445,
  OPT_ftransition_complex = 1446,
  OPT_ftransition_dip1000 = 1447,
  OPT_ftransition_dip25 = 1448,
  OPT_ftransition_field = 1449,
  OPT_ftransition_import = 1450,
  OPT_ftransition_nogc = 1451,
  OPT_ftransition_tls = 1452,
  OPT_ftrapping_math = 1453,
  OPT_ftrapv = 1454,
  OPT_ftree_bit_ccp = 1455,
  OPT_ftree_builtin_call_dce = 1456,
  OPT_ftree_ccp = 1457,
  OPT_ftree_ch = 1458,

  OPT_ftree_coalesce_vars = 1460,
  OPT_ftree_copy_prop = 1461,

  OPT_ftree_cselim = 1463,
  OPT_ftree_dce = 1464,
  OPT_ftree_dominator_opts = 1465,
  OPT_ftree_dse = 1466,
  OPT_ftree_forwprop = 1467,
  OPT_ftree_fre = 1468,
  OPT_ftree_loop_distribute_patterns = 1469,
  OPT_ftree_loop_distribution = 1470,
  OPT_ftree_loop_if_convert = 1471,

  OPT_ftree_loop_im = 1473,
  OPT_ftree_loop_ivcanon = 1474,

  OPT_ftree_loop_optimize = 1476,
  OPT_ftree_loop_vectorize = 1477,
  OPT_ftree_lrs = 1478,
  OPT_ftree_parallelize_loops_ = 1479,
  OPT_ftree_partial_pre = 1480,
  OPT_ftree_phiprop = 1481,
  OPT_ftree_pre = 1482,
  OPT_ftree_pta = 1483,
  OPT_ftree_reassoc = 1484,

  OPT_ftree_scev_cprop = 1486,
  OPT_ftree_sink = 1487,
  OPT_ftree_slp_vectorize = 1488,
  OPT_ftree_slsr = 1489,
  OPT_ftree_sra = 1490,


  OPT_ftree_switch_conversion = 1493,
  OPT_ftree_tail_merge = 1494,
  OPT_ftree_ter = 1495,

  OPT_ftree_vectorize = 1497,

  OPT_ftree_vrp = 1499,
  OPT_funconstrained_commons = 1500,
  OPT_funderscoring = 1501,
  OPT_funit_at_a_time = 1502,
  OPT_funittest = 1503,
  OPT_funroll_all_loops = 1504,
  OPT_funroll_completely_grow_size = 1505,
  OPT_funroll_loops = 1506,

  OPT_funsafe_math_optimizations = 1508,
  OPT_funsigned_bitfields = 1509,
  OPT_funsigned_char = 1510,
  OPT_funswitch_loops = 1511,
  OPT_funwind_tables = 1512,
  OPT_fuse_cxa_atexit = 1513,
  OPT_fuse_cxa_get_exception_ptr = 1514,
  OPT_fuse_ld_bfd = 1515,
  OPT_fuse_ld_gold = 1516,
  OPT_fuse_ld_lld = 1517,
  OPT_fuse_linker_plugin = 1518,
  OPT_fvar_tracking = 1519,
  OPT_fvar_tracking_assignments = 1520,
  OPT_fvar_tracking_assignments_toggle = 1521,
  OPT_fvar_tracking_uninit = 1522,
  OPT_fvariable_expansion_in_unroller = 1523,

  OPT_fvect_cost_model_ = 1525,
  OPT_fverbose_asm = 1526,

  OPT_fversion_loops_for_strides = 1528,
  OPT_fversion_ = 1529,
  OPT_fvisibility_inlines_hidden = 1530,
  OPT_fvisibility_ms_compat = 1531,
  OPT_fvisibility_ = 1532,
  OPT_fvpt = 1533,
  OPT_fvtable_gc = 1534,
  OPT_fvtable_thunks = 1535,
  OPT_fvtable_verify_ = 1536,
  OPT_fvtv_counts = 1537,
  OPT_fvtv_debug = 1538,
  OPT_fweak = 1539,
  OPT_fweb = 1540,

  OPT_fwhole_program = 1542,
  OPT_fwide_exec_charset_ = 1543,
  OPT_fworking_directory = 1544,
  OPT_fwpa = 1545,
  OPT_fwpa_ = 1546,
  OPT_fwrapv = 1547,
  OPT_fwrapv_pointer = 1548,
  OPT_fxref = 1549,

  OPT_fzero_initialized_in_bss = 1551,
  OPT_fzero_link = 1552,
  OPT_g = 1553,
  OPT_gant = 1554,
  OPT_gas_loc_support = 1555,
  OPT_gas_locview_support = 1556,
  OPT_gcoff = 1557,
  OPT_gcoff1 = 1558,
  OPT_gcoff2 = 1559,
  OPT_gcoff3 = 1560,
  OPT_gcolumn_info = 1561,
  OPT_gdescribe_dies = 1562,
  OPT_gdwarf = 1563,
  OPT_gdwarf_ = 1564,
  OPT_gen_decls = 1565,
  OPT_ggdb = 1566,
  OPT_ggnu_pubnames = 1567,
  OPT_gimple_stats = 1568,
  OPT_ginline_points = 1569,
  OPT_ginternal_reset_location_views = 1570,
  OPT_gnat = 1571,
  OPT_gnatO = 1572,
  OPT_gno_ = 1573,
  OPT_gno_pubnames = 1574,
  OPT_gpubnames = 1575,
  OPT_grecord_gcc_switches = 1576,
  OPT_gsplit_dwarf = 1577,
  OPT_gstabs = 1578,
  OPT_gstabs_ = 1579,
  OPT_gstatement_frontiers = 1580,
  OPT_gstrict_dwarf = 1581,
  OPT_gtoggle = 1582,
  OPT_gvariable_location_views = 1583,
  OPT_gvariable_location_views_incompat5 = 1584,
  OPT_gvms = 1585,
  OPT_gxcoff = 1586,
  OPT_gxcoff_ = 1587,
  OPT_gz = 1588,
  OPT_gz_ = 1589,
  OPT_h = 1590,
  OPT_help = 1591,
  OPT_idirafter = 1592,
  OPT_imacros = 1593,
  OPT_imultiarch = 1594,
  OPT_imultilib = 1595,
  OPT_include = 1596,
  OPT_iplugindir_ = 1597,
  OPT_iprefix = 1598,
  OPT_iquote = 1599,
  OPT_isysroot = 1600,
  OPT_isystem = 1601,
  OPT_iwithprefix = 1602,
  OPT_iwithprefixbefore = 1603,
  OPT_k8 = 1604,
  OPT_l = 1605,
  OPT_lang_asm = 1606,
  OPT_list = 1607,
  OPT_m128bit_long_double = 1608,
  OPT_m16 = 1609,
  OPT_m32 = 1610,
  OPT_m3dnow = 1611,
  OPT_m3dnowa = 1612,
  OPT_m64 = 1613,
  OPT_m80387 = 1614,
  OPT_m8bit_idiv = 1615,
  OPT_m96bit_long_double = 1616,
  OPT_mabi_ = 1617,
  OPT_mabm = 1618,
  OPT_maccumulate_outgoing_args = 1619,
  OPT_maddress_mode_ = 1620,
  OPT_madx = 1621,
  OPT_maes = 1622,
  OPT_malign_data_ = 1623,
  OPT_malign_double = 1624,
  OPT_malign_functions_ = 1625,
  OPT_malign_jumps_ = 1626,
  OPT_malign_loops_ = 1627,
  OPT_malign_stringops = 1628,
  OPT_mandroid = 1629,
  OPT_march_ = 1630,
  OPT_masm_ = 1631,
  OPT_mavx = 1632,
  OPT_mavx2 = 1633,
  OPT_mavx256_split_unaligned_load = 1634,
  OPT_mavx256_split_unaligned_store = 1635,
  OPT_mavx5124fmaps = 1636,
  OPT_mavx5124vnniw = 1637,
  OPT_mavx512bf16 = 1638,
  OPT_mavx512bitalg = 1639,
  OPT_mavx512bw = 1640,
  OPT_mavx512cd = 1641,
  OPT_mavx512dq = 1642,
  OPT_mavx512er = 1643,
  OPT_mavx512f = 1644,
  OPT_mavx512ifma = 1645,
  OPT_mavx512pf = 1646,
  OPT_mavx512vbmi = 1647,
  OPT_mavx512vbmi2 = 1648,
  OPT_mavx512vl = 1649,
  OPT_mavx512vnni = 1650,
  OPT_mavx512vp2intersect = 1651,
  OPT_mavx512vpopcntdq = 1652,
  OPT_mbionic = 1653,
  OPT_mbmi = 1654,
  OPT_mbmi2 = 1655,
  OPT_mbranch_cost_ = 1656,
  OPT_mcall_ms2sysv_xlogues = 1657,
  OPT_mcet_switch = 1658,
  OPT_mcld = 1659,
  OPT_mcldemote = 1660,
  OPT_mclflushopt = 1661,
  OPT_mclwb = 1662,
  OPT_mclzero = 1663,
  OPT_mcmodel_ = 1664,

  OPT_mcrc32 = 1666,
  OPT_mcx16 = 1667,
  OPT_mdispatch_scheduler = 1668,
  OPT_mdump_tune_features = 1669,
  OPT_menqcmd = 1670,
  OPT_mf16c = 1671,
  OPT_mfancy_math_387 = 1672,
  OPT_mfentry = 1673,
  OPT_mfentry_name_ = 1674,
  OPT_mfentry_section_ = 1675,
  OPT_mfma = 1676,
  OPT_mfma4 = 1677,
  OPT_mforce_drap = 1678,
  OPT_mforce_indirect_call = 1679,
  OPT_mfp_ret_in_387 = 1680,
  OPT_mfpmath_ = 1681,
  OPT_mfsgsbase = 1682,
  OPT_mfunction_return_ = 1683,

  OPT_mfxsr = 1685,
  OPT_mgeneral_regs_only = 1686,
  OPT_mgfni = 1687,
  OPT_mglibc = 1688,
  OPT_mhard_float = 1689,
  OPT_mhle = 1690,
  OPT_miamcu = 1691,
  OPT_mieee_fp = 1692,
  OPT_mincoming_stack_boundary_ = 1693,
  OPT_mindirect_branch_register = 1694,
  OPT_mindirect_branch_ = 1695,
  OPT_minline_all_stringops = 1696,
  OPT_minline_stringops_dynamically = 1697,
  OPT_minstrument_return_ = 1698,

  OPT_mlarge_data_threshold_ = 1700,
  OPT_mlong_double_128 = 1701,
  OPT_mlong_double_64 = 1702,
  OPT_mlong_double_80 = 1703,
  OPT_mlwp = 1704,
  OPT_mlzcnt = 1705,
  OPT_mmanual_endbr = 1706,
  OPT_mmemcpy_strategy_ = 1707,
  OPT_mmemset_strategy_ = 1708,
  OPT_mmitigate_rop = 1709,
  OPT_mmmx = 1710,
  OPT_mmovbe = 1711,
  OPT_mmovdir64b = 1712,
  OPT_mmovdiri = 1713,
  OPT_mmpx = 1714,
  OPT_mms_bitfields = 1715,
  OPT_mmusl = 1716,
  OPT_mmwaitx = 1717,
  OPT_mno_align_stringops = 1718,
  OPT_mno_default = 1719,
  OPT_mno_fancy_math_387 = 1720,
  OPT_mno_push_args = 1721,
  OPT_mno_red_zone = 1722,
  OPT_mno_sse4 = 1723,
  OPT_mnop_mcount = 1724,
  OPT_momit_leaf_frame_pointer = 1725,
  OPT_mpc32 = 1726,
  OPT_mpc64 = 1727,
  OPT_mpc80 = 1728,
  OPT_mpclmul = 1729,
  OPT_mpcommit = 1730,
  OPT_mpconfig = 1731,
  OPT_mpku = 1732,
  OPT_mpopcnt = 1733,

  OPT_mprefer_vector_width_ = 1735,
  OPT_mpreferred_stack_boundary_ = 1736,
  OPT_mprefetchwt1 = 1737,
  OPT_mprfchw = 1738,
  OPT_mptwrite = 1739,
  OPT_mpush_args = 1740,
  OPT_mrdpid = 1741,
  OPT_mrdrnd = 1742,
  OPT_mrdseed = 1743,
  OPT_mrecip = 1744,
  OPT_mrecip_ = 1745,
  OPT_mrecord_mcount = 1746,
  OPT_mrecord_return = 1747,
  OPT_mred_zone = 1748,
  OPT_mregparm_ = 1749,
  OPT_mrtd = 1750,
  OPT_mrtm = 1751,
  OPT_msahf = 1752,
  OPT_mserialize = 1753,
  OPT_msgx = 1754,
  OPT_msha = 1755,
  OPT_mshstk = 1756,
  OPT_mskip_rax_setup = 1757,
  OPT_msoft_float = 1758,
  OPT_msse = 1759,
  OPT_msse2 = 1760,
  OPT_msse2avx = 1761,
  OPT_msse3 = 1762,
  OPT_msse4 = 1763,
  OPT_msse4_1 = 1764,
  OPT_msse4_2 = 1765,
  OPT_msse4a = 1766,

  OPT_msseregparm = 1768,
  OPT_mssse3 = 1769,
  OPT_mstack_arg_probe = 1770,
  OPT_mstack_protector_guard_offset_ = 1771,
  OPT_mstack_protector_guard_reg_ = 1772,
  OPT_mstack_protector_guard_symbol_ = 1773,
  OPT_mstack_protector_guard_ = 1774,
  OPT_mstackrealign = 1775,
  OPT_mstringop_strategy_ = 1776,
  OPT_mstv = 1777,
  OPT_mtbm = 1778,
  OPT_mtls_dialect_ = 1779,
  OPT_mtls_direct_seg_refs = 1780,
  OPT_mtsxldtrk = 1781,
  OPT_mtune_ctrl_ = 1782,
  OPT_mtune_ = 1783,
  OPT_muclibc = 1784,
  OPT_mvaes = 1785,
  OPT_mveclibabi_ = 1786,
  OPT_mvect8_ret_in_mem = 1787,
  OPT_mvpclmulqdq = 1788,
  OPT_mvzeroupper = 1789,
  OPT_mwaitpkg = 1790,
  OPT_mwbnoinvd = 1791,
  OPT_mx32 = 1792,
  OPT_mxop = 1793,
  OPT_mxsave = 1794,
  OPT_mxsavec = 1795,
  OPT_mxsaveopt = 1796,
  OPT_mxsaves = 1797,
  OPT_n = 1798,
  OPT_name_sort = 1799,
  OPT_no_canonical_prefixes = 1800,
  OPT_no_integrated_cpp = 1801,
  OPT_no_pie = 1802,
  OPT_nocpp = 1803,
  OPT_nodefaultlibs = 1804,
  OPT_nolibc = 1805,
  OPT_nophoboslib = 1806,
  OPT_nostartfiles = 1807,
  OPT_nostdinc = 1808,
  OPT_nostdinc__ = 1809,
  OPT_nostdlib = 1810,
  OPT_o = 1811,
  OPT_objects = 1812,
  OPT_p = 1813,
  OPT_pass_exit_codes = 1814,

  OPT_pedantic_errors = 1816,
  OPT_pg = 1817,
  OPT_pie = 1818,
  OPT_pipe = 1819,
  OPT_posix = 1820,
  OPT_print_file_name_ = 1821,
  OPT_print_libgcc_file_name = 1822,
  OPT_print_multi_directory = 1823,
  OPT_print_multi_lib = 1824,
  OPT_print_multi_os_directory = 1825,
  OPT_print_multiarch = 1826,
  OPT_print_objc_runtime_info = 1827,
  OPT_print_prog_name_ = 1828,
  OPT_print_search_dirs = 1829,
  OPT_print_sysroot = 1830,
  OPT_print_sysroot_headers_suffix = 1831,
  OPT_print_value = 1832,
  OPT_profile = 1833,
  OPT_pthread = 1834,
  OPT_quiet = 1835,
  OPT_r = 1836,
  OPT_rdynamic = 1837,
  OPT_remap = 1838,
  OPT_reverse_sort = 1839,
  OPT_s = 1840,
  OPT_save_temps = 1841,
  OPT_save_temps_ = 1842,
  OPT_shared = 1843,
  OPT_shared_libgcc = 1844,
  OPT_shared_libphobos = 1845,
  OPT_size_sort = 1846,

  OPT_specs_ = 1848,
  OPT_static = 1849,
  OPT_static_libasan = 1850,
  OPT_static_libgcc = 1851,
  OPT_static_libgfortran = 1852,
  OPT_static_libgo = 1853,
  OPT_static_liblsan = 1854,
  OPT_static_libmpx = 1855,
  OPT_static_libmpxwrappers = 1856,
  OPT_static_libphobos = 1857,
  OPT_static_libstdc__ = 1858,
  OPT_static_libtsan = 1859,
  OPT_static_libubsan = 1860,
  OPT_static_pie = 1861,


  OPT_std_c__11 = 1864,
  OPT_std_c__14 = 1865,
  OPT_std_c__17 = 1866,


  OPT_std_c__20 = 1869,

  OPT_std_c__98 = 1871,
  OPT_std_c11 = 1872,
  OPT_std_c17 = 1873,


  OPT_std_c2x = 1876,

  OPT_std_c90 = 1878,
  OPT_std_c99 = 1879,

  OPT_std_f2003 = 1881,
  OPT_std_f2008 = 1882,
  OPT_std_f2008ts = 1883,
  OPT_std_f2018 = 1884,
  OPT_std_f95 = 1885,
  OPT_std_gnu = 1886,


  OPT_std_gnu__11 = 1889,
  OPT_std_gnu__14 = 1890,
  OPT_std_gnu__17 = 1891,


  OPT_std_gnu__20 = 1894,

  OPT_std_gnu__98 = 1896,
  OPT_std_gnu11 = 1897,
  OPT_std_gnu17 = 1898,


  OPT_std_gnu2x = 1901,

  OPT_std_gnu90 = 1903,
  OPT_std_gnu99 = 1904,


  OPT_std_iso9899_199409 = 1907,





  OPT_std_legacy = 1913,
  OPT_symbol_ = 1914,
  OPT_symbolic = 1915,
  OPT_t = 1916,
  OPT_time = 1917,
  OPT_time_ = 1918,
  OPT_tno_android_cc = 1919,
  OPT_tno_android_ld = 1920,
  OPT_traditional = 1921,
  OPT_traditional_cpp = 1922,
  OPT_tree_stats = 1923,
  OPT_trigraphs = 1924,
  OPT_type_stats = 1925,
  OPT_u = 1926,
  OPT_undef = 1927,
  OPT_v = 1928,
  OPT_version = 1929,
  OPT_w = 1930,
  OPT_wrapper = 1931,
  OPT_x = 1932,
  OPT_z = 1933,
  N_OPTS,
  OPT_SPECIAL_unknown,
  OPT_SPECIAL_ignore,
  OPT_SPECIAL_warn_removed,
  OPT_SPECIAL_program_name,
  OPT_SPECIAL_input_file
};
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 1
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 1
# 111 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 112 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 2
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
extern "C" {


struct _obstack_chunk
{
  char *limit;
  struct _obstack_chunk *prev;
  char contents[4];
};

struct obstack
{
  size_t chunk_size;
  struct _obstack_chunk *chunk;
  char *object_base;
  char *next_free;
  char *chunk_limit;
  union
  {
    size_t i;
    void *p;
  } temp;
  size_t alignment_mask;


  union
  {
    void *(*plain) (size_t);
    void *(*extra) (void *, size_t);
  } chunkfun;
  union
  {
    void (*plain) (void *);
    void (*extra) (void *, void *);
  } freefun;

  void *extra_arg;
  unsigned use_extra_arg : 1;
  unsigned maybe_empty_object : 1;



  unsigned alloc_failed : 1;


};



extern void _obstack_newchunk (struct obstack *, size_t);
extern void _obstack_free (struct obstack *, void *);
extern int _obstack_begin (struct obstack *,
                           size_t, size_t,
                           void *(*) (size_t), void (*) (void *));
extern int _obstack_begin_1 (struct obstack *,
                             size_t, size_t,
                             void *(*) (void *, size_t),
                             void (*) (void *, void *), void *);
extern size_t _obstack_memory_used (struct obstack *)
  
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 3 4
 __attribute__ ((__pure__))
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
                   ;






extern void (*obstack_alloc_failed_handler) (void);


extern int obstack_exit_failure;
# 532 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
}
# 213 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/array-traits.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/array-traits.h"
template<typename T, T zero = T (0)>
struct scalar_array_traits
{
  typedef T element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = 1;
  static const T *base (const T &x) { return &x; }
  static size_t size (const T &) { return 1; }
};

template<typename T>
struct array_traits : scalar_array_traits<T> {};


template<typename T, size_t N>
struct array_traits<T[N]>
{
  typedef T element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = N;
  static const T *base (const T (&x)[N]) { return x; }
  static size_t size (const T (&)[N]) { return N; }
};
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 2


class bitmap_usage: public mem_usage
{
public:

  bitmap_usage (): m_nsearches (0), m_search_iter (0) {}

  bitmap_usage (size_t allocated, size_t times, size_t peak,
      uint64_t nsearches, uint64_t search_iter)
    : mem_usage (allocated, times, peak),
    m_nsearches (nsearches), m_search_iter (search_iter) {}


  bitmap_usage
  operator+ (const bitmap_usage &second)
  {
    return bitmap_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_nsearches + second.m_nsearches,
        m_search_iter + second.m_search_iter);
  }


  inline void
  dump (mem_location *loc, const mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
            stderr
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
                  , "%-48s " "%" "9" 
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
                             "l" "u" 
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
                             "%c" ":%5.1f%%"
      "%" "9" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
     "l" "u" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
     "%c" "%" "9" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
              "l" "u" 
# 245 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
              "%c" ":%5.1f%%"
      "%" "11" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
     "l" "u" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
     "%c" "%" "11" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
               "l" "u" 
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
               "%c" "%10s\n",
      location_string, (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)(((m_peak) < 10 * 1024 ? (m_peak) : ((m_peak) < 10 * (1024 * 1024) ? (m_peak) / 1024 : (m_peak) / (1024 * 1024)))), ((m_peak) < 10 * 1024 ? ' ' : ((m_peak) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_times, total.m_times),
      (uint64_t)(((m_nsearches) < 10 * 1024 ? (m_nsearches) : ((m_nsearches) < 10 * (1024 * 1024) ? (m_nsearches) / 1024 : (m_nsearches) / (1024 * 1024)))), ((m_nsearches) < 10 * 1024 ? ' ' : ((m_nsearches) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_search_iter) < 10 * 1024 ? (m_search_iter) : ((m_search_iter) < 10 * (1024 * 1024) ? (m_search_iter) / 1024 : (m_search_iter) / (1024 * 1024)))), ((m_search_iter) < 10 * 1024 ? ' ' : ((m_search_iter) < 10 * (1024 * 1024) ? 'k' : 'M')),
      loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 261 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h" 3 4
            stderr
# 261 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
                  , "%-48s %11s%16s%17s%12s%12s%10s\n", name, "Leak", "Peak",
      "Times", "N searches", "Search iter", "Type");
  }


  uint64_t m_nsearches;

  uint64_t m_search_iter;
};


extern mem_alloc_description<bitmap_usage> bitmap_mem_desc;



typedef unsigned long BITMAP_WORD;
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
struct bitmap_obstack {
  struct bitmap_element *elements;
  bitmap_head *heads;
  struct obstack obstack;
};
# 310 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
struct bitmap_element {


  struct bitmap_element *next;


  struct bitmap_element *prev;

  unsigned int indx;

  BITMAP_WORD bits[((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u))];
};




class bitmap_head {
public:
  static bitmap_obstack crashme;

  constexpr bitmap_head()
    : indx (0), tree_form (false), padding (0), alloc_descriptor (0), first (nullptr),
      current (nullptr), obstack (&crashme)
  {}

  unsigned int indx;


  unsigned tree_form: 1;

  unsigned padding: 2;

  unsigned alloc_descriptor: 29;


  bitmap_element *first;

  bitmap_element * current;

  bitmap_obstack * obstack;


  void dump ();




  unsigned *get_descriptor ()
  {
    return (unsigned *)(ptrdiff_t)(alloc_descriptor << 3);
  }
};


extern bitmap_element bitmap_zero_bits;
extern bitmap_obstack bitmap_default_obstack;


void bitmap_list_view (bitmap);
void bitmap_tree_view (bitmap);


extern void bitmap_clear (bitmap);


extern void bitmap_copy (bitmap, const_bitmap);


extern void bitmap_move (bitmap, bitmap);


extern bool bitmap_equal_p (const_bitmap, const_bitmap);


extern bool bitmap_intersect_p (const_bitmap, const_bitmap);



extern bool bitmap_intersect_compl_p (const_bitmap, const_bitmap);


inline bool bitmap_empty_p (const_bitmap map)
{
  return !map->first;
}


extern bool bitmap_single_bit_set_p (const_bitmap);


extern unsigned long bitmap_count_bits (const_bitmap);


extern unsigned long bitmap_count_unique_bits (const_bitmap, const_bitmap);





extern void bitmap_and (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_and_into (bitmap, const_bitmap);
extern bool bitmap_and_compl (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_and_compl_into (bitmap, const_bitmap);

extern void bitmap_compl_and_into (bitmap, const_bitmap);
extern void bitmap_clear_range (bitmap, unsigned int, unsigned int);
extern void bitmap_set_range (bitmap, unsigned int, unsigned int);
extern bool bitmap_ior (bitmap, const_bitmap, const_bitmap);
extern bool bitmap_ior_into (bitmap, const_bitmap);
extern bool bitmap_ior_into_and_free (bitmap, bitmap *);
extern void bitmap_xor (bitmap, const_bitmap, const_bitmap);
extern void bitmap_xor_into (bitmap, const_bitmap);


extern bool bitmap_ior_and_into (bitmap DST, const_bitmap B, const_bitmap C);

extern bool bitmap_ior_and_compl (bitmap DST, const_bitmap A,
      const_bitmap B, const_bitmap C);

extern bool bitmap_ior_and_compl_into (bitmap A,
           const_bitmap B, const_bitmap C);


extern bool bitmap_clear_bit (bitmap, int);


extern bool bitmap_set_bit (bitmap, int);


extern int bitmap_bit_p (const_bitmap, int);


extern void debug_bitmap (const_bitmap);
extern void debug_bitmap_file (FILE *, const_bitmap);


extern void bitmap_print (FILE *, const_bitmap, const char *, const char *);


extern void bitmap_obstack_initialize (bitmap_obstack *);
extern void bitmap_obstack_release (bitmap_obstack *);
extern void bitmap_register (bitmap );
extern void dump_bitmap_statistics (void);




static inline void
bitmap_initialize (bitmap head, bitmap_obstack *obstack )
{
  head->first = head->current = nullptr;
  head->indx = head->tree_form = 0;
  head->padding = 0;
  head->alloc_descriptor = 0;
  head->obstack = obstack;
  if (0)
    bitmap_register (head );
}




static inline void
bitmap_release (bitmap head)
{
  bitmap_clear (head);


  head->obstack = &bitmap_head::crashme;
}


extern bitmap bitmap_alloc (bitmap_obstack *obstack );

extern bitmap bitmap_gc_alloc ();

extern void bitmap_obstack_free (bitmap);


inline void dump_bitmap (FILE *file, const_bitmap map)
{
  bitmap_print (file, map, "", "\n");
}
extern void debug (const bitmap_head &ref);
extern void debug (const bitmap_head *ptr);

extern unsigned bitmap_first_set_bit (const_bitmap);
extern unsigned bitmap_last_set_bit (const_bitmap);


extern hashval_t bitmap_hash (const_bitmap);







struct bitmap_iterator
{

  bitmap_element *elt1;


  bitmap_element *elt2;


  unsigned word_no;




  BITMAP_WORD bits;
};




static inline void
bmp_iter_set_init (bitmap_iterator *bi, const_bitmap map,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map->first;
  bi->elt2 = nullptr;

  ((void)(!(!map->tree_form) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 535, __FUNCTION__), 0 : 0));


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));


  bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 8 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static inline void
bmp_iter_and_init (bitmap_iterator *bi, const_bitmap map1, const_bitmap map2,
     unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;

  ((void)(!(!map1->tree_form && !map2->tree_form) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 579, __FUNCTION__), 0 : 0));



  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt2 = nullptr;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (1)
    {
      if (!bi->elt2)
 {
   bi->elt1 = bi->elt2 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt2->indx >= bi->elt1->indx)
 break;
      bi->elt2 = bi->elt2->next;
    }


  if (bi->elt1->indx == bi->elt2->indx)
    {


      if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));

      bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
      bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
      bi->bits >>= start_bit % (8 * 8 * 1u);
    }
  else
    {


      bi->word_no = ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) - 1;
      bi->bits = 0;
    }





  start_bit += !bi->bits;

  *bit_no = start_bit;
}



static inline void
bmp_iter_and_compl_init (bitmap_iterator *bi,
    const_bitmap map1, const_bitmap map2,
    unsigned start_bit, unsigned *bit_no)
{
  bi->elt1 = map1->first;
  bi->elt2 = map2->first;

  ((void)(!(!map1->tree_form && !map2->tree_form) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 649, __FUNCTION__), 0 : 0));


  while (1)
    {
      if (!bi->elt1)
 {
   bi->elt1 = &bitmap_zero_bits;
   break;
 }

      if (bi->elt1->indx >= start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
 break;
      bi->elt1 = bi->elt1->next;
    }


  while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
    bi->elt2 = bi->elt2->next;



  if (bi->elt1->indx != start_bit / (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)))
    start_bit = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));

  bi->word_no = start_bit / (8 * 8 * 1u) % ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
  bi->bits = bi->elt1->bits[bi->word_no];
  if (bi->elt2 && bi->elt1->indx == bi->elt2->indx)
    bi->bits &= ~bi->elt2->bits[bi->word_no];
  bi->bits >>= start_bit % (8 * 8 * 1u);





  start_bit += !bi->bits;

  *bit_no = start_bit;
}




static inline void
bmp_iter_next (bitmap_iterator *bi, unsigned *bit_no)
{
  bi->bits >>= 1;
  *bit_no += 1;
}



static inline void
bmp_iter_next_bit (bitmap_iterator * bi, unsigned *bit_no)
{

  {
    unsigned int n = __builtin_ctzl (bi->bits);
    ((void)(!(sizeof (unsigned long) == sizeof (BITMAP_WORD)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 707, __FUNCTION__), 0 : 0));
    bi->bits >>= n;
    *bit_no += n;
  }







}





static inline bool
bmp_iter_set (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 755, __FUNCTION__), 0 : 0));


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return false;
      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}





static inline bool
bmp_iter_and (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no] & bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      do
 {

   ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 804, __FUNCTION__), 0 : 0));



   do
     {
       bi->elt1 = bi->elt1->next;
       if (!bi->elt1)
  return false;
     }
   while (bi->elt1->indx < bi->elt2->indx);


   ((void)(!(bi->elt2->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 817, __FUNCTION__), 0 : 0));



   while (bi->elt2->indx < bi->elt1->indx)
     {
       bi->elt2 = bi->elt2->next;
       if (!bi->elt2)
  return false;
     }
 }
      while (bi->elt1->indx != bi->elt2->indx);

      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}





static inline bool
bmp_iter_and_compl (bitmap_iterator *bi, unsigned *bit_no)
{

  if (bi->bits)
    {
    next_bit:
      bmp_iter_next_bit (bi, bit_no);
      return true;
    }




  *bit_no = ((*bit_no + (8 * 8 * 1u) - 1)
      / (8 * 8 * 1u) * (8 * 8 * 1u));
  bi->word_no++;

  while (1)
    {

      while (bi->word_no != ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
 {
   bi->bits = bi->elt1->bits[bi->word_no];
   if (bi->elt2 && bi->elt2->indx == bi->elt1->indx)
     bi->bits &= ~bi->elt2->bits[bi->word_no];
   if (bi->bits)
     goto next_bit;
   *bit_no += (8 * 8 * 1u);
   bi->word_no++;
 }


      ((void)(!(bi->elt1->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 872, __FUNCTION__), 0 : 0));


      bi->elt1 = bi->elt1->next;
      if (!bi->elt1)
 return false;


      ((void)(!(! bi->elt2 || bi->elt2->indx != -1U) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h", 880, __FUNCTION__), 0 : 0));


      while (bi->elt2 && bi->elt2->indx < bi->elt1->indx)
 bi->elt2 = bi->elt2->next;

      *bit_no = bi->elt1->indx * (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u));
      bi->word_no = 0;
    }
}
# 939 "/home/giulianob/gcc_git_gnu/gcc/gcc/bitmap.h"
class auto_bitmap
{
 public:
  auto_bitmap () { bitmap_initialize (&m_bits, &bitmap_default_obstack); }
  explicit auto_bitmap (bitmap_obstack *o) { bitmap_initialize (&m_bits, o); }
  ~auto_bitmap () { bitmap_clear (&m_bits); }

  operator bitmap () { return &m_bits; }

 private:

  auto_bitmap (const auto_bitmap &);
  auto_bitmap &operator = (const auto_bitmap &);

  auto_bitmap (auto_bitmap &&);
  auto_bitmap &operator = (auto_bitmap &&);


  bitmap_head m_bits;
};


template<typename T, typename Traits = array_traits<T> >
class base_bitmap_view
{
public:
  typedef typename Traits::element_type array_element_type;

  base_bitmap_view (const T &, bitmap_element *);
  operator const_bitmap () const { return &m_head; }

private:
  base_bitmap_view (const base_bitmap_view &);

  bitmap_head m_head;
};




template<typename T, typename Traits>
class bitmap_view<T, Traits, true> : public base_bitmap_view<T, Traits>
{
public:
  bitmap_view (const T &array)
    : base_bitmap_view<T, Traits> (array, m_bitmap_elements) {}

private:

  static const size_t num_bitmap_elements
    = (((8 * sizeof (typename Traits::element_type) * Traits::constant_size) + ((((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u))) - 1) / ((((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u))))


                             ;
  bitmap_element m_bitmap_elements[num_bitmap_elements];
};




template<typename T, typename Traits>
base_bitmap_view<T, Traits>::base_bitmap_view (const T &array,
            bitmap_element *bitmap_elements)
{
  m_head.obstack = nullptr;



  const size_t array_element_bits = 8 * sizeof (array_element_type);
  static_assert (((((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)) % array_element_bits == 0), "BITMAP_ELEMENT_ALL_BITS % array_element_bits == 0");
  size_t array_step = (((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)) * (8 * 8 * 1u)) / array_element_bits;
  size_t array_size = Traits::size (array);





  const array_element_type *array_elements = Traits::base (array);
  unsigned int indx = 0;
  for (size_t array_base = 0;
       array_base < array_size;
       array_base += array_step, indx += 1)
    {

      unsigned int array_count
 = ((__builtin_constant_p (array_size % array_step == 0) && (array_size % array_step == 0))
    ? array_step : ((array_step) < (array_size - array_base) ? (array_step) : (array_size - array_base)));


      array_element_type ior = array_elements[array_base];
      for (size_t i = 1; i < array_count; ++i)
 ior |= array_elements[array_base + i];
      if (ior == 0)
 continue;


      bitmap_element *bitmap_element = bitmap_elements++;
      if (m_head.current)
 m_head.current->next = bitmap_element;
      else
 m_head.first = bitmap_element;
      bitmap_element->prev = m_head.current;
      bitmap_element->next = nullptr;
      bitmap_element->indx = indx;
      m_head.current = bitmap_element;
      m_head.indx = indx;


      if (array_element_bits < (8 * 8 * 1u))
 {


   size_t array_i = array_base;
   for (unsigned int word_i = 0; word_i < ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u));
        ++word_i)
     {
       BITMAP_WORD word = 0;
       for (unsigned int shift = 0;
     shift < (8 * 8 * 1u) && array_i < array_size;
     shift += array_element_bits)
  word |= array_elements[array_i++] << shift;
       bitmap_element->bits[word_i] = word;
     }
 }
      else
 {


   unsigned int word_i = 0;
   for (unsigned int i = 0; i < array_count; ++i)
     for (unsigned int shift = 0; shift < array_element_bits;
   shift += (8 * 8 * 1u))
       bitmap_element->bits[word_i++]
  = array_elements[array_base + i] >> shift;
   while (word_i < ((128 + (8 * 8 * 1u) - 1) / (8 * 8 * 1u)))
     bitmap_element->bits[word_i++] = 0;
 }
    }
}
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 1
# 49 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/libgfortran.h" 1
# 90 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/libgfortran.h"
typedef enum
{
  GFC_CONVERT_NONE = -1,
  GFC_CONVERT_NATIVE = 0,
  GFC_CONVERT_SWAP,
  GFC_CONVERT_BIG,
  GFC_CONVERT_LITTLE
}
unit_convert;



typedef enum
{
  LIBERROR_FIRST = -3,
  LIBERROR_EOR = -2,
  LIBERROR_END = -1,
  LIBERROR_OK = 0,
  LIBERROR_OS = 5000,
  LIBERROR_OPTION_CONFLICT,
  LIBERROR_BAD_OPTION,
  LIBERROR_MISSING_OPTION,
  LIBERROR_ALREADY_OPEN,
  LIBERROR_BAD_UNIT,
  LIBERROR_FORMAT,
  LIBERROR_BAD_ACTION,
  LIBERROR_ENDFILE,
  LIBERROR_BAD_US,
  LIBERROR_READ_VALUE,
  LIBERROR_READ_OVERFLOW,
  LIBERROR_INTERNAL,
  LIBERROR_INTERNAL_UNIT,
  LIBERROR_ALLOCATION,
  LIBERROR_DIRECT_EOR,
  LIBERROR_SHORT_RECORD,
  LIBERROR_CORRUPT_FILE,
  LIBERROR_INQUIRE_INTERNAL_UNIT,
  LIBERROR_BAD_WAIT_ID,
  LIBERROR_LAST
}
libgfortran_error_codes;


typedef enum
{
  GFC_STAT_UNLOCKED = 0,
  GFC_STAT_LOCKED,
  GFC_STAT_LOCKED_OTHER_IMAGE,
  GFC_STAT_STOPPED_IMAGE = 6000,
  GFC_STAT_FAILED_IMAGE = 6001
}
libgfortran_stat_codes;

typedef enum
{
  GFC_CAF_ATOMIC_ADD = 1,
  GFC_CAF_ATOMIC_AND,
  GFC_CAF_ATOMIC_OR,
  GFC_CAF_ATOMIC_XOR
} libcaf_atomic_codes;
# 175 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/libgfortran.h"
typedef enum
{ BT_UNKNOWN = 0, BT_INTEGER, BT_LOGICAL, BT_REAL, BT_COMPLEX,
  BT_DERIVED, BT_CHARACTER, BT_CLASS, BT_PROCEDURE, BT_HOLLERITH, BT_VOID,
  BT_ASSUMED, BT_UNION, BT_BOZ
}
bt;
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h" 1
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h"
# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4


# 31 "/usr/include/locale.h" 3 4
extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h" 2







# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4
extern "C" {




extern char *gettext (const char *__msgid)
     throw () __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) throw ();



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) throw ();



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) throw ();
# 121 "/usr/include/libintl.h" 3 4
}
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h" 2

# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h"
extern void gcc_init_libintl (void);
extern size_t gcc_gettext_width (const char *);
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h"
extern char *get_spaces (const char *);

extern const char *open_quote;
extern const char *close_quote;
extern const char *locale_encoding;
extern bool locale_utf8;
# 53 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h"
extern "C" {
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h"
typedef uintptr_t splay_tree_key;
typedef uintptr_t splay_tree_value;


typedef struct splay_tree_node_s *splay_tree_node;



typedef int (*splay_tree_compare_fn) (splay_tree_key, splay_tree_key);
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h"
typedef void (*splay_tree_delete_key_fn) (splay_tree_key);





typedef void (*splay_tree_delete_value_fn) (splay_tree_value);


typedef int (*splay_tree_foreach_fn) (splay_tree_node, void*);





typedef void *(*splay_tree_allocate_fn) (int, void *);





typedef void (*splay_tree_deallocate_fn) (void *, void *);


struct splay_tree_node_s {

  splay_tree_key key;


  splay_tree_value value;


  splay_tree_node left;
  splay_tree_node right;
};


struct splay_tree_s {

  splay_tree_node root;


  splay_tree_compare_fn comp;


  splay_tree_delete_key_fn delete_key;


  splay_tree_delete_value_fn delete_value;


  splay_tree_allocate_fn allocate;


  splay_tree_deallocate_fn deallocate;


  void *allocate_data;
};

typedef struct splay_tree_s *splay_tree;

extern splay_tree splay_tree_new (splay_tree_compare_fn,
      splay_tree_delete_key_fn,
      splay_tree_delete_value_fn);
extern splay_tree splay_tree_new_with_allocator (splay_tree_compare_fn,
       splay_tree_delete_key_fn,
       splay_tree_delete_value_fn,
       splay_tree_allocate_fn,
       splay_tree_deallocate_fn,
       void *);
extern splay_tree splay_tree_new_typed_alloc (splay_tree_compare_fn,
           splay_tree_delete_key_fn,
           splay_tree_delete_value_fn,
           splay_tree_allocate_fn,
           splay_tree_allocate_fn,
           splay_tree_deallocate_fn,
           void *);
extern void splay_tree_delete (splay_tree);
extern splay_tree_node splay_tree_insert (splay_tree,
       splay_tree_key,
       splay_tree_value);
extern void splay_tree_remove (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_lookup (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_predecessor (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_successor (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_max (splay_tree);
extern splay_tree_node splay_tree_min (splay_tree);
extern int splay_tree_foreach (splay_tree, splay_tree_foreach_fn, void*);
extern int splay_tree_compare_ints (splay_tree_key, splay_tree_key);
extern int splay_tree_compare_pointers (splay_tree_key, splay_tree_key);
extern int splay_tree_compare_strings (splay_tree_key, splay_tree_key);
extern void splay_tree_delete_pointers (splay_tree_value);


}
# 54 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2
# 100 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef struct
{
  const char *string;
  const char *mp;
  int tag;
}
mstring;







enum io_kind
{ M_READ, M_WRITE, M_PRINT, M_INQUIRE };





enum gfc_instring
{ NONSTRING = 0, INSTRING_WARN, INSTRING_NOWARN };





enum notification
{ SILENT, WARNING, ERROR };






enum match
{ MATCH_NO = 1, MATCH_YES, MATCH_ERROR };


enum gfc_source_form
{ FORM_FREE, FORM_FIXED, FORM_UNKNOWN };


enum expr_t
  { EXPR_UNKNOWN = 0, EXPR_OP = 1, EXPR_FUNCTION, EXPR_CONSTANT, EXPR_VARIABLE,
  EXPR_SUBSTRING, EXPR_STRUCTURE, EXPR_ARRAY, EXPR_NULL, EXPR_COMPCALL, EXPR_PPC
};


enum array_type
{ AS_EXPLICIT = 1, AS_ASSUMED_SHAPE, AS_DEFERRED,
  AS_ASSUMED_SIZE, AS_IMPLIED_SHAPE, AS_ASSUMED_RANK,
  AS_UNKNOWN
};

enum ar_type
{ AR_FULL = 1, AR_ELEMENT, AR_SECTION, AR_UNKNOWN };




enum gfc_sl_type
{ ST_LABEL_UNKNOWN = 1, ST_LABEL_TARGET, ST_LABEL_DO_TARGET,
  ST_LABEL_BAD_TARGET, ST_LABEL_FORMAT
};


enum gfc_intrinsic_op
{ GFC_INTRINSIC_BEGIN = 0,
  INTRINSIC_NONE = -1, INTRINSIC_UPLUS = GFC_INTRINSIC_BEGIN,
  INTRINSIC_UMINUS, INTRINSIC_PLUS, INTRINSIC_MINUS, INTRINSIC_TIMES,
  INTRINSIC_DIVIDE, INTRINSIC_POWER, INTRINSIC_CONCAT,
  INTRINSIC_AND, INTRINSIC_OR, INTRINSIC_EQV, INTRINSIC_NEQV,

  INTRINSIC_EQ, INTRINSIC_NE, INTRINSIC_GT, INTRINSIC_GE,
  INTRINSIC_LT, INTRINSIC_LE,

  INTRINSIC_EQ_OS, INTRINSIC_NE_OS, INTRINSIC_GT_OS, INTRINSIC_GE_OS,
  INTRINSIC_LT_OS, INTRINSIC_LE_OS,
  INTRINSIC_NOT, INTRINSIC_USER, INTRINSIC_ASSIGN, INTRINSIC_PARENTHESES,
  GFC_INTRINSIC_END,


  INTRINSIC_FORMATTED, INTRINSIC_UNFORMATTED
};






enum arith
{ ARITH_OK = 1, ARITH_OVERFLOW, ARITH_UNDERFLOW, ARITH_NAN,
  ARITH_DIV0, ARITH_INCOMMENSURATE, ARITH_ASYMMETRIC, ARITH_PROHIBIT,
  ARITH_WRONGCONCAT
};


enum gfc_statement
{
  ST_ARITHMETIC_IF, ST_ALLOCATE, ST_ATTR_DECL, ST_ASSOCIATE,
  ST_BACKSPACE, ST_BLOCK, ST_BLOCK_DATA,
  ST_CALL, ST_CASE, ST_CLOSE, ST_COMMON, ST_CONTINUE, ST_CONTAINS, ST_CYCLE,
  ST_DATA, ST_DATA_DECL, ST_DEALLOCATE, ST_DO, ST_ELSE, ST_ELSEIF,
  ST_ELSEWHERE, ST_END_ASSOCIATE, ST_END_BLOCK, ST_END_BLOCK_DATA,
  ST_ENDDO, ST_IMPLIED_ENDDO, ST_END_FILE, ST_FINAL, ST_FLUSH, ST_END_FORALL,
  ST_END_FUNCTION, ST_ENDIF, ST_END_INTERFACE, ST_END_MODULE, ST_END_SUBMODULE,
  ST_END_PROGRAM, ST_END_SELECT, ST_END_SUBROUTINE, ST_END_WHERE, ST_END_TYPE,
  ST_ENTRY, ST_EQUIVALENCE, ST_ERROR_STOP, ST_EXIT, ST_FORALL, ST_FORALL_BLOCK,
  ST_FORMAT, ST_FUNCTION, ST_GOTO, ST_IF_BLOCK, ST_IMPLICIT, ST_IMPLICIT_NONE,
  ST_IMPORT, ST_INQUIRE, ST_INTERFACE, ST_SYNC_ALL, ST_SYNC_MEMORY,
  ST_SYNC_IMAGES, ST_PARAMETER, ST_MODULE, ST_SUBMODULE, ST_MODULE_PROC,
  ST_NAMELIST, ST_NULLIFY, ST_OPEN, ST_PAUSE, ST_PRIVATE, ST_PROGRAM, ST_PUBLIC,
  ST_READ, ST_RETURN, ST_REWIND, ST_STOP, ST_SUBROUTINE, ST_TYPE, ST_USE,
  ST_WHERE_BLOCK, ST_WHERE, ST_WAIT, ST_WRITE, ST_ASSIGNMENT,
  ST_POINTER_ASSIGNMENT, ST_SELECT_CASE, ST_SEQUENCE, ST_SIMPLE_IF,
  ST_STATEMENT_FUNCTION, ST_DERIVED_DECL, ST_LABEL_ASSIGNMENT, ST_ENUM,
  ST_ENUMERATOR, ST_END_ENUM, ST_SELECT_TYPE, ST_TYPE_IS, ST_CLASS_IS,
  ST_SELECT_RANK, ST_RANK, ST_STRUCTURE_DECL, ST_END_STRUCTURE,
  ST_UNION, ST_END_UNION, ST_MAP, ST_END_MAP,
  ST_OACC_PARALLEL_LOOP, ST_OACC_END_PARALLEL_LOOP, ST_OACC_PARALLEL,
  ST_OACC_END_PARALLEL, ST_OACC_KERNELS, ST_OACC_END_KERNELS, ST_OACC_DATA,
  ST_OACC_END_DATA, ST_OACC_HOST_DATA, ST_OACC_END_HOST_DATA, ST_OACC_LOOP,
  ST_OACC_END_LOOP, ST_OACC_DECLARE, ST_OACC_UPDATE, ST_OACC_WAIT,
  ST_OACC_CACHE, ST_OACC_KERNELS_LOOP, ST_OACC_END_KERNELS_LOOP,
  ST_OACC_SERIAL_LOOP, ST_OACC_END_SERIAL_LOOP, ST_OACC_SERIAL,
  ST_OACC_END_SERIAL, ST_OACC_ENTER_DATA, ST_OACC_EXIT_DATA, ST_OACC_ROUTINE,
  ST_OACC_ATOMIC, ST_OACC_END_ATOMIC,
  ST_OMP_ATOMIC, ST_OMP_BARRIER, ST_OMP_CRITICAL, ST_OMP_END_ATOMIC,
  ST_OMP_END_CRITICAL, ST_OMP_END_DO, ST_OMP_END_MASTER, ST_OMP_END_ORDERED,
  ST_OMP_END_PARALLEL, ST_OMP_END_PARALLEL_DO, ST_OMP_END_PARALLEL_SECTIONS,
  ST_OMP_END_PARALLEL_WORKSHARE, ST_OMP_END_SECTIONS, ST_OMP_END_SINGLE,
  ST_OMP_END_WORKSHARE, ST_OMP_DO, ST_OMP_FLUSH, ST_OMP_MASTER, ST_OMP_ORDERED,
  ST_OMP_PARALLEL, ST_OMP_PARALLEL_DO, ST_OMP_PARALLEL_SECTIONS,
  ST_OMP_PARALLEL_WORKSHARE, ST_OMP_SECTIONS, ST_OMP_SECTION, ST_OMP_SINGLE,
  ST_OMP_THREADPRIVATE, ST_OMP_WORKSHARE, ST_OMP_TASK, ST_OMP_END_TASK,
  ST_OMP_TASKWAIT, ST_OMP_TASKYIELD, ST_OMP_CANCEL, ST_OMP_CANCELLATION_POINT,
  ST_OMP_TASKGROUP, ST_OMP_END_TASKGROUP, ST_OMP_SIMD, ST_OMP_END_SIMD,
  ST_OMP_DO_SIMD, ST_OMP_END_DO_SIMD, ST_OMP_PARALLEL_DO_SIMD,
  ST_OMP_END_PARALLEL_DO_SIMD, ST_OMP_DECLARE_SIMD, ST_OMP_DECLARE_REDUCTION,
  ST_OMP_TARGET, ST_OMP_END_TARGET, ST_OMP_TARGET_DATA, ST_OMP_END_TARGET_DATA,
  ST_OMP_TARGET_UPDATE, ST_OMP_DECLARE_TARGET,
  ST_OMP_TEAMS, ST_OMP_END_TEAMS, ST_OMP_DISTRIBUTE, ST_OMP_END_DISTRIBUTE,
  ST_OMP_DISTRIBUTE_SIMD, ST_OMP_END_DISTRIBUTE_SIMD,
  ST_OMP_DISTRIBUTE_PARALLEL_DO, ST_OMP_END_DISTRIBUTE_PARALLEL_DO,
  ST_OMP_DISTRIBUTE_PARALLEL_DO_SIMD, ST_OMP_END_DISTRIBUTE_PARALLEL_DO_SIMD,
  ST_OMP_TARGET_TEAMS, ST_OMP_END_TARGET_TEAMS, ST_OMP_TEAMS_DISTRIBUTE,
  ST_OMP_END_TEAMS_DISTRIBUTE, ST_OMP_TEAMS_DISTRIBUTE_SIMD,
  ST_OMP_END_TEAMS_DISTRIBUTE_SIMD, ST_OMP_TARGET_TEAMS_DISTRIBUTE,
  ST_OMP_END_TARGET_TEAMS_DISTRIBUTE, ST_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD,
  ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_SIMD, ST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO,
  ST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO,
  ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,
  ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,
  ST_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,
  ST_OMP_END_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,
  ST_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,
  ST_OMP_END_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,
  ST_OMP_TARGET_PARALLEL, ST_OMP_END_TARGET_PARALLEL,
  ST_OMP_TARGET_PARALLEL_DO, ST_OMP_END_TARGET_PARALLEL_DO,
  ST_OMP_TARGET_PARALLEL_DO_SIMD, ST_OMP_END_TARGET_PARALLEL_DO_SIMD,
  ST_OMP_TARGET_ENTER_DATA, ST_OMP_TARGET_EXIT_DATA,
  ST_OMP_TARGET_SIMD, ST_OMP_END_TARGET_SIMD,
  ST_OMP_TASKLOOP, ST_OMP_END_TASKLOOP,
  ST_OMP_TASKLOOP_SIMD, ST_OMP_END_TASKLOOP_SIMD, ST_OMP_ORDERED_DEPEND,
  ST_OMP_REQUIRES, ST_PROCEDURE, ST_GENERIC, ST_CRITICAL, ST_END_CRITICAL,
  ST_GET_FCN_CHARACTERISTICS, ST_LOCK, ST_UNLOCK, ST_EVENT_POST,
  ST_EVENT_WAIT, ST_FAIL_IMAGE, ST_FORM_TEAM, ST_CHANGE_TEAM,
  ST_END_TEAM, ST_SYNC_TEAM, ST_NONE
};



enum interface_type
{
  INTERFACE_NAMELESS = 1, INTERFACE_GENERIC,
  INTERFACE_INTRINSIC_OP, INTERFACE_USER_OP, INTERFACE_ABSTRACT,
  INTERFACE_DTIO
};



enum sym_flavor
{
  FL_UNKNOWN = 0, FL_PROGRAM, FL_BLOCK_DATA, FL_MODULE, FL_VARIABLE,
  FL_PARAMETER, FL_LABEL, FL_PROCEDURE, FL_DERIVED, FL_NAMELIST,
  FL_UNION, FL_STRUCT, FL_VOID
};


enum procedure_type
{ PROC_UNKNOWN, PROC_MODULE, PROC_INTERNAL, PROC_DUMMY,
  PROC_INTRINSIC, PROC_ST_FUNCTION, PROC_EXTERNAL
};



enum sym_intent
{ INTENT_UNKNOWN = 0, INTENT_IN, INTENT_OUT, INTENT_INOUT
};


enum gfc_access
{ ACCESS_UNKNOWN = 0, ACCESS_PUBLIC, ACCESS_PRIVATE
};



enum ifsrc
{ IFSRC_UNKNOWN = 0,
  IFSRC_DECL,
  IFSRC_IFBODY

};


enum save_state
{ SAVE_NONE = 0, SAVE_EXPLICIT, SAVE_IMPLICIT
};


enum oacc_routine_lop
{ OACC_ROUTINE_LOP_NONE = 0,
  OACC_ROUTINE_LOP_GANG,
  OACC_ROUTINE_LOP_WORKER,
  OACC_ROUTINE_LOP_VECTOR,
  OACC_ROUTINE_LOP_SEQ,
  OACC_ROUTINE_LOP_ERROR
};




extern const mstring flavors[];
extern const mstring procedures[];
extern const mstring intents[];
extern const mstring access_types[];
extern const mstring ifsrc_types[];
extern const mstring save_status[];


extern const mstring dtio_procs[];

enum dtio_codes
{ DTIO_RF = 0, DTIO_WF, DTIO_RUF, DTIO_WUF };




enum gfc_isym_id
{


  GFC_ISYM_NONE = 0,
  GFC_ISYM_ABORT,
  GFC_ISYM_ABS,
  GFC_ISYM_ACCESS,
  GFC_ISYM_ACHAR,
  GFC_ISYM_ACOS,
  GFC_ISYM_ACOSD,
  GFC_ISYM_ACOSH,
  GFC_ISYM_ADJUSTL,
  GFC_ISYM_ADJUSTR,
  GFC_ISYM_AIMAG,
  GFC_ISYM_AINT,
  GFC_ISYM_ALARM,
  GFC_ISYM_ALL,
  GFC_ISYM_ALLOCATED,
  GFC_ISYM_AND,
  GFC_ISYM_ANINT,
  GFC_ISYM_ANY,
  GFC_ISYM_ASIN,
  GFC_ISYM_ASIND,
  GFC_ISYM_ASINH,
  GFC_ISYM_ASSOCIATED,
  GFC_ISYM_ATAN,
  GFC_ISYM_ATAN2,
  GFC_ISYM_ATAN2D,
  GFC_ISYM_ATAND,
  GFC_ISYM_ATANH,
  GFC_ISYM_ATOMIC_ADD,
  GFC_ISYM_ATOMIC_AND,
  GFC_ISYM_ATOMIC_CAS,
  GFC_ISYM_ATOMIC_DEF,
  GFC_ISYM_ATOMIC_FETCH_ADD,
  GFC_ISYM_ATOMIC_FETCH_AND,
  GFC_ISYM_ATOMIC_FETCH_OR,
  GFC_ISYM_ATOMIC_FETCH_XOR,
  GFC_ISYM_ATOMIC_OR,
  GFC_ISYM_ATOMIC_REF,
  GFC_ISYM_ATOMIC_XOR,
  GFC_ISYM_BGE,
  GFC_ISYM_BGT,
  GFC_ISYM_BIT_SIZE,
  GFC_ISYM_BLE,
  GFC_ISYM_BLT,
  GFC_ISYM_BTEST,
  GFC_ISYM_CAF_GET,
  GFC_ISYM_CAF_SEND,
  GFC_ISYM_CEILING,
  GFC_ISYM_CHAR,
  GFC_ISYM_CHDIR,
  GFC_ISYM_CHMOD,
  GFC_ISYM_CMPLX,
  GFC_ISYM_CO_BROADCAST,
  GFC_ISYM_CO_MAX,
  GFC_ISYM_CO_MIN,
  GFC_ISYM_CO_REDUCE,
  GFC_ISYM_CO_SUM,
  GFC_ISYM_COMMAND_ARGUMENT_COUNT,
  GFC_ISYM_COMPILER_OPTIONS,
  GFC_ISYM_COMPILER_VERSION,
  GFC_ISYM_COMPLEX,
  GFC_ISYM_CONJG,
  GFC_ISYM_CONVERSION,
  GFC_ISYM_COS,
  GFC_ISYM_COSD,
  GFC_ISYM_COSH,
  GFC_ISYM_COTAN,
  GFC_ISYM_COTAND,
  GFC_ISYM_COUNT,
  GFC_ISYM_CPU_TIME,
  GFC_ISYM_CSHIFT,
  GFC_ISYM_CTIME,
  GFC_ISYM_C_ASSOCIATED,
  GFC_ISYM_C_F_POINTER,
  GFC_ISYM_C_F_PROCPOINTER,
  GFC_ISYM_C_FUNLOC,
  GFC_ISYM_C_LOC,
  GFC_ISYM_C_SIZEOF,
  GFC_ISYM_DATE_AND_TIME,
  GFC_ISYM_DBLE,
  GFC_ISYM_DFLOAT,
  GFC_ISYM_DIGITS,
  GFC_ISYM_DIM,
  GFC_ISYM_DOT_PRODUCT,
  GFC_ISYM_DPROD,
  GFC_ISYM_DSHIFTL,
  GFC_ISYM_DSHIFTR,
  GFC_ISYM_DTIME,
  GFC_ISYM_EOSHIFT,
  GFC_ISYM_EPSILON,
  GFC_ISYM_ERF,
  GFC_ISYM_ERFC,
  GFC_ISYM_ERFC_SCALED,
  GFC_ISYM_ETIME,
  GFC_ISYM_EVENT_QUERY,
  GFC_ISYM_EXECUTE_COMMAND_LINE,
  GFC_ISYM_EXIT,
  GFC_ISYM_EXP,
  GFC_ISYM_EXPONENT,
  GFC_ISYM_EXTENDS_TYPE_OF,
  GFC_ISYM_FAILED_IMAGES,
  GFC_ISYM_FDATE,
  GFC_ISYM_FE_RUNTIME_ERROR,
  GFC_ISYM_FGET,
  GFC_ISYM_FGETC,
  GFC_ISYM_FINDLOC,
  GFC_ISYM_FLOAT,
  GFC_ISYM_FLOOR,
  GFC_ISYM_FLUSH,
  GFC_ISYM_FNUM,
  GFC_ISYM_FPUT,
  GFC_ISYM_FPUTC,
  GFC_ISYM_FRACTION,
  GFC_ISYM_FREE,
  GFC_ISYM_FSEEK,
  GFC_ISYM_FSTAT,
  GFC_ISYM_FTELL,
  GFC_ISYM_TGAMMA,
  GFC_ISYM_GERROR,
  GFC_ISYM_GETARG,
  GFC_ISYM_GET_COMMAND,
  GFC_ISYM_GET_COMMAND_ARGUMENT,
  GFC_ISYM_GETCWD,
  GFC_ISYM_GETENV,
  GFC_ISYM_GET_ENVIRONMENT_VARIABLE,
  GFC_ISYM_GETGID,
  GFC_ISYM_GETLOG,
  GFC_ISYM_GETPID,
  GFC_ISYM_GET_TEAM,
  GFC_ISYM_GETUID,
  GFC_ISYM_GMTIME,
  GFC_ISYM_HOSTNM,
  GFC_ISYM_HUGE,
  GFC_ISYM_HYPOT,
  GFC_ISYM_IACHAR,
  GFC_ISYM_IALL,
  GFC_ISYM_IAND,
  GFC_ISYM_IANY,
  GFC_ISYM_IARGC,
  GFC_ISYM_IBCLR,
  GFC_ISYM_IBITS,
  GFC_ISYM_IBSET,
  GFC_ISYM_ICHAR,
  GFC_ISYM_IDATE,
  GFC_ISYM_IEOR,
  GFC_ISYM_IERRNO,
  GFC_ISYM_IMAGE_INDEX,
  GFC_ISYM_IMAGE_STATUS,
  GFC_ISYM_INDEX,
  GFC_ISYM_INT,
  GFC_ISYM_INT2,
  GFC_ISYM_INT8,
  GFC_ISYM_IOR,
  GFC_ISYM_IPARITY,
  GFC_ISYM_IRAND,
  GFC_ISYM_ISATTY,
  GFC_ISYM_IS_CONTIGUOUS,
  GFC_ISYM_IS_IOSTAT_END,
  GFC_ISYM_IS_IOSTAT_EOR,
  GFC_ISYM_ISNAN,
  GFC_ISYM_ISHFT,
  GFC_ISYM_ISHFTC,
  GFC_ISYM_ITIME,
  GFC_ISYM_J0,
  GFC_ISYM_J1,
  GFC_ISYM_JN,
  GFC_ISYM_JN2,
  GFC_ISYM_KILL,
  GFC_ISYM_KIND,
  GFC_ISYM_LBOUND,
  GFC_ISYM_LCOBOUND,
  GFC_ISYM_LEADZ,
  GFC_ISYM_LEN,
  GFC_ISYM_LEN_TRIM,
  GFC_ISYM_LGAMMA,
  GFC_ISYM_LGE,
  GFC_ISYM_LGT,
  GFC_ISYM_LINK,
  GFC_ISYM_LLE,
  GFC_ISYM_LLT,
  GFC_ISYM_LOC,
  GFC_ISYM_LOG,
  GFC_ISYM_LOG10,
  GFC_ISYM_LOGICAL,
  GFC_ISYM_LONG,
  GFC_ISYM_LSHIFT,
  GFC_ISYM_LSTAT,
  GFC_ISYM_LTIME,
  GFC_ISYM_MALLOC,
  GFC_ISYM_MASKL,
  GFC_ISYM_MASKR,
  GFC_ISYM_MATMUL,
  GFC_ISYM_MAX,
  GFC_ISYM_MAXEXPONENT,
  GFC_ISYM_MAXLOC,
  GFC_ISYM_MAXVAL,
  GFC_ISYM_MCLOCK,
  GFC_ISYM_MCLOCK8,
  GFC_ISYM_MERGE,
  GFC_ISYM_MERGE_BITS,
  GFC_ISYM_MIN,
  GFC_ISYM_MINEXPONENT,
  GFC_ISYM_MINLOC,
  GFC_ISYM_MINVAL,
  GFC_ISYM_MOD,
  GFC_ISYM_MODULO,
  GFC_ISYM_MOVE_ALLOC,
  GFC_ISYM_MVBITS,
  GFC_ISYM_NEAREST,
  GFC_ISYM_NEW_LINE,
  GFC_ISYM_NINT,
  GFC_ISYM_NORM2,
  GFC_ISYM_NOT,
  GFC_ISYM_NULL,
  GFC_ISYM_NUM_IMAGES,
  GFC_ISYM_OR,
  GFC_ISYM_PACK,
  GFC_ISYM_PARITY,
  GFC_ISYM_PERROR,
  GFC_ISYM_POPCNT,
  GFC_ISYM_POPPAR,
  GFC_ISYM_PRECISION,
  GFC_ISYM_PRESENT,
  GFC_ISYM_PRODUCT,
  GFC_ISYM_RADIX,
  GFC_ISYM_RAND,
  GFC_ISYM_RANDOM_INIT,
  GFC_ISYM_RANDOM_NUMBER,
  GFC_ISYM_RANDOM_SEED,
  GFC_ISYM_RANGE,
  GFC_ISYM_RANK,
  GFC_ISYM_REAL,
  GFC_ISYM_REALPART,
  GFC_ISYM_RENAME,
  GFC_ISYM_REPEAT,
  GFC_ISYM_RESHAPE,
  GFC_ISYM_RRSPACING,
  GFC_ISYM_RSHIFT,
  GFC_ISYM_SAME_TYPE_AS,
  GFC_ISYM_SC_KIND,
  GFC_ISYM_SCALE,
  GFC_ISYM_SCAN,
  GFC_ISYM_SECNDS,
  GFC_ISYM_SECOND,
  GFC_ISYM_SET_EXPONENT,
  GFC_ISYM_SHAPE,
  GFC_ISYM_SHIFTA,
  GFC_ISYM_SHIFTL,
  GFC_ISYM_SHIFTR,
  GFC_ISYM_BACKTRACE,
  GFC_ISYM_SIGN,
  GFC_ISYM_SIGNAL,
  GFC_ISYM_SI_KIND,
  GFC_ISYM_SIN,
  GFC_ISYM_SIND,
  GFC_ISYM_SINH,
  GFC_ISYM_SIZE,
  GFC_ISYM_SLEEP,
  GFC_ISYM_SIZEOF,
  GFC_ISYM_SNGL,
  GFC_ISYM_SPACING,
  GFC_ISYM_SPREAD,
  GFC_ISYM_SQRT,
  GFC_ISYM_SRAND,
  GFC_ISYM_SR_KIND,
  GFC_ISYM_STAT,
  GFC_ISYM_STOPPED_IMAGES,
  GFC_ISYM_STORAGE_SIZE,
  GFC_ISYM_STRIDE,
  GFC_ISYM_SUM,
  GFC_ISYM_SYMLINK,
  GFC_ISYM_SYMLNK,
  GFC_ISYM_SYSTEM,
  GFC_ISYM_SYSTEM_CLOCK,
  GFC_ISYM_TAN,
  GFC_ISYM_TAND,
  GFC_ISYM_TANH,
  GFC_ISYM_TEAM_NUMBER,
  GFC_ISYM_THIS_IMAGE,
  GFC_ISYM_TIME,
  GFC_ISYM_TIME8,
  GFC_ISYM_TINY,
  GFC_ISYM_TRAILZ,
  GFC_ISYM_TRANSFER,
  GFC_ISYM_TRANSPOSE,
  GFC_ISYM_TRIM,
  GFC_ISYM_TTYNAM,
  GFC_ISYM_UBOUND,
  GFC_ISYM_UCOBOUND,
  GFC_ISYM_UMASK,
  GFC_ISYM_UNLINK,
  GFC_ISYM_UNPACK,
  GFC_ISYM_VERIFY,
  GFC_ISYM_XOR,
  GFC_ISYM_Y0,
  GFC_ISYM_Y1,
  GFC_ISYM_YN,
  GFC_ISYM_YN2
};

enum init_local_logical
{
  GFC_INIT_LOGICAL_OFF = 0,
  GFC_INIT_LOGICAL_FALSE,
  GFC_INIT_LOGICAL_TRUE
};

enum init_local_character
{
  GFC_INIT_CHARACTER_OFF = 0,
  GFC_INIT_CHARACTER_ON
};

enum init_local_integer
{
  GFC_INIT_INTEGER_OFF = 0,
  GFC_INIT_INTEGER_ON
};

enum gfc_reverse
{
  GFC_ENABLE_REVERSE,
  GFC_FORWARD_SET,
  GFC_REVERSE_SET,
  GFC_INHIBIT_REVERSE
};

enum gfc_param_spec_type
{
  SPEC_EXPLICIT,
  SPEC_ASSUMED,
  SPEC_DEFERRED
};
# 697 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
enum iso_fortran_env_symbol
{
  ISOFORTRANENV_INVALID = -1,
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/iso-fortran-env.def" 1
# 44 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/iso-fortran-env.def"
ISOFORTRANENV_FILE_ATOMIC_INT_KIND,

ISOFORTRANENV_FILE_ATOMIC_LOGICAL_KIND,

ISOFORTRANENV_CHARACTER_STORAGE_SIZE,

ISOFORTRANENV_ERROR_UNIT,

ISOFORTRANENV_FILE_STORAGE_SIZE,

ISOFORTRANENV_INPUT_UNIT,

ISOFORTRANENV_INT8,

ISOFORTRANENV_INT16,

ISOFORTRANENV_INT32,

ISOFORTRANENV_INT64,

ISOFORTRANENV_IOSTAT_END,

ISOFORTRANENV_IOSTAT_EOR,

ISOFORTRANENV_IOSTAT_INQUIRE_INTERNAL_UNIT,


ISOFORTRANENV_NUMERIC_STORAGE_SIZE,

ISOFORTRANENV_OUTPUT_UNIT,

ISOFORTRANENV_REAL32,

ISOFORTRANENV_REAL64,

ISOFORTRANENV_REAL128,

ISOFORTRANENV_FILE_STAT_LOCKED,

ISOFORTRANENV_FILE_STAT_LOCKED_OTHER_IMAGE,


ISOFORTRANENV_FILE_STAT_STOPPED_IMAGE,

ISOFORTRANENV_FILE_STAT_FAILED_IMAGE,

ISOFORTRANENV_FILE_STAT_UNLOCKED,
# 100 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/iso-fortran-env.def"
ISOFORTRAN_CHARACTER_KINDS,

ISOFORTRAN_INTEGER_KINDS,

ISOFORTRAN_LOGICAL_KINDS,

ISOFORTRAN_REAL_KINDS,







ISOFORTRAN_COMPILER_OPTIONS,

ISOFORTRAN_COMPILER_VERSION,






ISOFORTRAN_LOCK_TYPE,


ISOFORTRAN_EVENT_TYPE,




ISOFORTRAN_TEAM_TYPE,
# 701 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2
  ISOFORTRANENV_LAST, ISOFORTRANENV_NUMBER = ISOFORTRANENV_LAST
};
# 718 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
enum iso_c_binding_symbol
{
  ISOCBINDING_INVALID = -1,
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/iso-c-binding.def" 1
# 56 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/iso-c-binding.def"
ISOCBINDING_INT,
ISOCBINDING_SHORT,

ISOCBINDING_LONG,

ISOCBINDING_LONG_LONG,


ISOCBINDING_INTMAX_T,

ISOCBINDING_INTPTR_T,

ISOCBINDING_PTRDIFF_T,

ISOCBINDING_SIZE_T,

ISOCBINDING_SIGNED_CHAR,


ISOCBINDING_INT8_T,

ISOCBINDING_INT16_T,

ISOCBINDING_INT32_T,

ISOCBINDING_INT64_T,


ISOCBINDING_INT128_T,


ISOCBINDING_INT_LEAST8_T,

ISOCBINDING_INT_LEAST16_T,

ISOCBINDING_INT_LEAST32_T,

ISOCBINDING_INT_LEAST64_T,


ISOCBINDING_INT_LEAST128_T,


ISOCBINDING_INT_FAST8_T,

ISOCBINDING_INT_FAST16_T,

ISOCBINDING_INT_FAST32_T,

ISOCBINDING_INT_FAST64_T,


ISOCBINDING_INT_FAST128_T,


ISOCBINDING_FLOAT,

ISOCBINDING_DOUBLE,

ISOCBINDING_LONG_DOUBLE,

ISOCBINDING_FLOAT128,



ISOCBINDING_FLOAT_COMPLEX,

ISOCBINDING_DOUBLE_COMPLEX,

ISOCBINDING_LONG_DOUBLE_COMPLEX,

ISOCBINDING_FLOAT128_COMPLEX,




ISOCBINDING_BOOL,


ISOCBINDING_CHAR,






ISOCBINDING_NULL_CHAR,

ISOCBINDING_ALERT,

ISOCBINDING_BACKSPACE,

ISOCBINDING_FORM_FEED,

ISOCBINDING_NEW_LINE,

ISOCBINDING_CARRIAGE_RETURN,

ISOCBINDING_HORIZONTAL_TAB,

ISOCBINDING_VERTICAL_TAB,






ISOCBINDING_PTR,

ISOCBINDING_NULL_PTR,

ISOCBINDING_FUNPTR,

ISOCBINDING_NULL_FUNPTR,







ISOCBINDING_F_POINTER,

ISOCBINDING_F_PROCPOINTER,


ISOCBINDING_ASSOCIATED,

ISOCBINDING_FUNLOC,

ISOCBINDING_LOC,


ISOCBINDING_C_SIZEOF,
# 722 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2
  ISOCBINDING_LAST,
  ISOCBINDING_NUMBER = ISOCBINDING_LAST
};
# 735 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
enum intmod_id
{
  INTMOD_NONE = 0, INTMOD_ISO_FORTRAN_ENV, INTMOD_ISO_C_BINDING,
  INTMOD_IEEE_FEATURES, INTMOD_IEEE_EXCEPTIONS, INTMOD_IEEE_ARITHMETIC
};

typedef struct
{
  char name[63 + 1];
  int value;
  bt f90_type;
}
CInteropKind_t;






extern CInteropKind_t c_interop_kinds_table[];



typedef enum
{
  EXT_ATTR_DLLIMPORT = 0,
  EXT_ATTR_DLLEXPORT,
  EXT_ATTR_STDCALL,
  EXT_ATTR_CDECL,
  EXT_ATTR_FASTCALL,
  EXT_ATTR_NO_ARG_CHECK,
  EXT_ATTR_LAST, EXT_ATTR_NUM = EXT_ATTR_LAST
}
ext_attr_id_t;

typedef struct
{
  const char *name;
  unsigned id;
  const char *middle_end_name;
}
ext_attr_t;

extern const ext_attr_t ext_attr_list[];


typedef struct
{

  unsigned allocatable:1, dimension:1, codimension:1, external:1, intrinsic:1,
    optional:1, pointer:1, target:1, value:1, volatile_:1, temporary:1,
    dummy:1, result:1, assign:1, threadprivate:1, not_always_present:1,
    implied_index:1, subref_array_pointer:1, proc_pointer:1, asynchronous:1,
    contiguous:1, fe_temp: 1, automatic: 1;




  unsigned class_pointer:1;

  enum save_state save:2;

  unsigned data:1,
    is_protected:1,
    use_assoc:1,
    used_in_submodule:1,


    use_only:1,
    use_rename:1,
    imported:1,
    host_assoc:1;

  unsigned in_namelist:1, in_common:1, in_equivalence:1;
  unsigned function:1, subroutine:1, procedure:1;
  unsigned generic:1, generic_copy:1;
  unsigned implicit_type:1;
  unsigned untyped:1;

  unsigned is_bind_c:1;
  unsigned extension:8;
  unsigned is_class:1;
  unsigned class_ok:1;
  unsigned vtab:1;
  unsigned vtype:1;




  unsigned is_c_interop:1;
  unsigned is_iso_c:1;


  unsigned sequence:1, elemental:1, pure:1, recursive:1;
  unsigned unmaskable:1, masked:1, contained:1, mod_proc:1, abstract:1;




  unsigned module_procedure:1;



  unsigned public_used:1;




  unsigned implicit_pure:1;






  unsigned array_outer_dependency:1;



  unsigned noreturn:1;




  unsigned entry:1;



  unsigned entry_master:1;



  unsigned mixed_entry_master:1;


  unsigned always_explicit:1;



  unsigned artificial:1;



  unsigned referenced:1;


  unsigned is_main_program:1;


  enum gfc_access access:2;
  enum sym_intent intent:2;
  enum sym_flavor flavor:4;
  enum ifsrc if_source:2;

  enum procedure_type proc:3;


  unsigned cray_pointer:1, cray_pointee:1;
# 901 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
  unsigned alloc_comp:1, pointer_comp:1, proc_pointer_comp:1,
    private_comp:1, zero_comp:1, coarray_comp:1, lock_comp:1,
    event_comp:1, defined_assign_comp:1, unlimited_polymorphic:1,
    has_dtio_procs:1, caf_token:1;



  unsigned select_type_temporary:1, select_rank_temporary:1, associate_var:1;



  unsigned pdt_kind:1, pdt_len:1, pdt_type:1, pdt_template:1,
    pdt_array:1, pdt_string:1;



  unsigned omp_udr_artificial_var:1;


  unsigned omp_declare_target:1;
  unsigned omp_declare_target_link:1;


  unsigned oacc_declare_create:1;
  unsigned oacc_declare_copyin:1;
  unsigned oacc_declare_deviceptr:1;
  unsigned oacc_declare_device_resident:1;
  unsigned oacc_declare_link:1;


  enum oacc_routine_lop oacc_routine_lop:3;


  unsigned ext_attr:EXT_ATTR_NUM;


  struct gfc_namespace *volatile_ns, *asynchronous_ns;
}
symbol_attribute;







typedef unsigned int gfc_char_t;
# 970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef struct gfc_file
{
  struct gfc_file *next, *up;
  int inclusion_line, line;
  char *filename;
} gfc_file;

typedef struct gfc_linebuf
{
  location_t location;
  struct gfc_file *file;
  struct gfc_linebuf *next;

  int truncated;
  bool dbg_emitted;

  gfc_char_t line[1];
} gfc_linebuf;





typedef struct
{
  gfc_char_t *nextc;
  gfc_linebuf *lb;
} locus;
# 1010 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
void gfc_push_suppress_errors (void);
void gfc_pop_suppress_errors (void);
# 1025 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef struct gfc_charlen
{
  struct gfc_expr *length;
  struct gfc_charlen *next;
  bool length_from_typespec;
  tree backend_decl;
  tree passed_length;

  int resolved;
}
gfc_charlen;




typedef struct
{
  bt type;
  int kind;

  union
  {
    struct gfc_symbol *derived;
    gfc_charlen *cl;
    int pad;
  }
  u;

  struct gfc_symbol *interface;
  int is_c_interop;
  int is_iso_c;
  bt f90_type;
  bool deferred;
  gfc_symbol *interop_kind;
}
gfc_typespec;


typedef struct
{
  int rank;
  int corank;
  array_type type, cotype;
  struct gfc_expr *lower[15], *upper[15];


  bool cray_pointee;
  bool cp_was_assumed;



  bool resolved;
}
gfc_array_spec;





typedef struct gfc_component
{
  const char *name;
  gfc_typespec ts;

  symbol_attribute attr;
  gfc_array_spec *as;

  tree backend_decl;



  tree norestrict_decl;
  locus loc;
  struct gfc_expr *initializer;


  struct gfc_expr *kind_expr;
  struct gfc_actual_arglist *param_list;

  struct gfc_component *next;


  struct gfc_typebound_proc *tb;

  tree caf_token;
}
gfc_component;




typedef struct gfc_formal_arglist
{

  struct gfc_symbol *sym;

  struct gfc_formal_arglist *next;
}
gfc_formal_arglist;






typedef struct gfc_actual_arglist
{
  const char *name;

  struct gfc_st_label *label;




  bt missing_arg_type;

  gfc_param_spec_type spec_type;

  struct gfc_expr *expr;
  struct gfc_actual_arglist *next;
}
gfc_actual_arglist;






typedef struct gfc_namelist
{
  struct gfc_symbol *sym;
  struct gfc_namelist *next;
}
gfc_namelist;




typedef struct gfc_expr_list
{
  struct gfc_expr *expr;
  struct gfc_expr_list *next;
}
gfc_expr_list;



enum gfc_omp_reduction_op
{
  OMP_REDUCTION_NONE = -1,
  OMP_REDUCTION_PLUS = INTRINSIC_PLUS,
  OMP_REDUCTION_MINUS = INTRINSIC_MINUS,
  OMP_REDUCTION_TIMES = INTRINSIC_TIMES,
  OMP_REDUCTION_AND = INTRINSIC_AND,
  OMP_REDUCTION_OR = INTRINSIC_OR,
  OMP_REDUCTION_EQV = INTRINSIC_EQV,
  OMP_REDUCTION_NEQV = INTRINSIC_NEQV,
  OMP_REDUCTION_MAX = GFC_INTRINSIC_END,
  OMP_REDUCTION_MIN,
  OMP_REDUCTION_IAND,
  OMP_REDUCTION_IOR,
  OMP_REDUCTION_IEOR,
  OMP_REDUCTION_USER
};

enum gfc_omp_depend_op
{
  OMP_DEPEND_IN,
  OMP_DEPEND_OUT,
  OMP_DEPEND_INOUT,
  OMP_DEPEND_SINK_FIRST,
  OMP_DEPEND_SINK
};

enum gfc_omp_map_op
{
  OMP_MAP_ALLOC,
  OMP_MAP_IF_PRESENT,
  OMP_MAP_ATTACH,
  OMP_MAP_TO,
  OMP_MAP_FROM,
  OMP_MAP_TOFROM,
  OMP_MAP_DELETE,
  OMP_MAP_DETACH,
  OMP_MAP_FORCE_ALLOC,
  OMP_MAP_FORCE_TO,
  OMP_MAP_FORCE_FROM,
  OMP_MAP_FORCE_TOFROM,
  OMP_MAP_FORCE_PRESENT,
  OMP_MAP_FORCE_DEVICEPTR,
  OMP_MAP_DEVICE_RESIDENT,
  OMP_MAP_LINK,
  OMP_MAP_RELEASE,
  OMP_MAP_ALWAYS_TO,
  OMP_MAP_ALWAYS_FROM,
  OMP_MAP_ALWAYS_TOFROM
};

enum gfc_omp_linear_op
{
  OMP_LINEAR_DEFAULT,
  OMP_LINEAR_REF,
  OMP_LINEAR_VAL,
  OMP_LINEAR_UVAL
};




typedef struct gfc_omp_namelist
{
  struct gfc_symbol *sym;
  struct gfc_expr *expr;
  union
    {
      gfc_omp_reduction_op reduction_op;
      gfc_omp_depend_op depend_op;
      gfc_omp_map_op map_op;
      gfc_omp_linear_op linear_op;
      struct gfc_common_head *common;
      bool lastprivate_conditional;
    } u;
  struct gfc_omp_namelist_udr *udr;
  struct gfc_omp_namelist *next;
  locus where;
}
gfc_omp_namelist;



enum
{
  OMP_LIST_FIRST,
  OMP_LIST_PRIVATE = OMP_LIST_FIRST,
  OMP_LIST_FIRSTPRIVATE,
  OMP_LIST_LASTPRIVATE,
  OMP_LIST_COPYPRIVATE,
  OMP_LIST_SHARED,
  OMP_LIST_COPYIN,
  OMP_LIST_UNIFORM,
  OMP_LIST_ALIGNED,
  OMP_LIST_LINEAR,
  OMP_LIST_DEPEND,
  OMP_LIST_MAP,
  OMP_LIST_TO,
  OMP_LIST_FROM,
  OMP_LIST_REDUCTION,
  OMP_LIST_DEVICE_RESIDENT,
  OMP_LIST_LINK,
  OMP_LIST_USE_DEVICE,
  OMP_LIST_CACHE,
  OMP_LIST_IS_DEVICE_PTR,
  OMP_LIST_USE_DEVICE_PTR,
  OMP_LIST_USE_DEVICE_ADDR,
  OMP_LIST_NONTEMPORAL,
  OMP_LIST_NUM
};




enum gfc_omp_sched_kind
{
  OMP_SCHED_NONE,
  OMP_SCHED_STATIC,
  OMP_SCHED_DYNAMIC,
  OMP_SCHED_GUIDED,
  OMP_SCHED_RUNTIME,
  OMP_SCHED_AUTO
};

enum gfc_omp_default_sharing
{
  OMP_DEFAULT_UNKNOWN,
  OMP_DEFAULT_NONE,
  OMP_DEFAULT_PRIVATE,
  OMP_DEFAULT_SHARED,
  OMP_DEFAULT_FIRSTPRIVATE,
  OMP_DEFAULT_PRESENT
};

enum gfc_omp_proc_bind_kind
{
  OMP_PROC_BIND_UNKNOWN,
  OMP_PROC_BIND_MASTER,
  OMP_PROC_BIND_SPREAD,
  OMP_PROC_BIND_CLOSE
};

enum gfc_omp_cancel_kind
{
  OMP_CANCEL_UNKNOWN,
  OMP_CANCEL_PARALLEL,
  OMP_CANCEL_SECTIONS,
  OMP_CANCEL_DO,
  OMP_CANCEL_TASKGROUP
};

enum gfc_omp_if_kind
{
  OMP_IF_CANCEL,
  OMP_IF_PARALLEL,
  OMP_IF_SIMD,
  OMP_IF_TASK,
  OMP_IF_TASKLOOP,
  OMP_IF_TARGET,
  OMP_IF_TARGET_DATA,
  OMP_IF_TARGET_UPDATE,
  OMP_IF_TARGET_ENTER_DATA,
  OMP_IF_TARGET_EXIT_DATA,
  OMP_IF_LAST
};

enum gfc_omp_requires_kind
{

  OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST = 1,
  OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL = 2,
  OMP_REQ_ATOMIC_MEM_ORDER_RELAXED = 3,
  OMP_REQ_REVERSE_OFFLOAD = (1 << 2),
  OMP_REQ_UNIFIED_ADDRESS = (1 << 3),
  OMP_REQ_UNIFIED_SHARED_MEMORY = (1 << 4),
  OMP_REQ_DYNAMIC_ALLOCATORS = (1 << 5),
  OMP_REQ_TARGET_MASK = (OMP_REQ_REVERSE_OFFLOAD
    | OMP_REQ_UNIFIED_ADDRESS
    | OMP_REQ_UNIFIED_SHARED_MEMORY),
  OMP_REQ_ATOMIC_MEM_ORDER_MASK = (OMP_REQ_ATOMIC_MEM_ORDER_SEQ_CST
       | OMP_REQ_ATOMIC_MEM_ORDER_ACQ_REL
       | OMP_REQ_ATOMIC_MEM_ORDER_RELAXED)
};

typedef struct gfc_omp_clauses
{
  struct gfc_expr *if_expr;
  struct gfc_expr *final_expr;
  struct gfc_expr *num_threads;
  gfc_omp_namelist *lists[OMP_LIST_NUM];
  enum gfc_omp_sched_kind sched_kind;
  struct gfc_expr *chunk_size;
  enum gfc_omp_default_sharing default_sharing;
  int collapse, orderedc;
  bool nowait, ordered, untied, mergeable;
  bool inbranch, notinbranch, defaultmap, nogroup;
  bool sched_simd, sched_monotonic, sched_nonmonotonic;
  bool simd, threads, depend_source, order_concurrent;
  enum gfc_omp_cancel_kind cancel;
  enum gfc_omp_proc_bind_kind proc_bind;
  struct gfc_expr *safelen_expr;
  struct gfc_expr *simdlen_expr;
  struct gfc_expr *num_teams;
  struct gfc_expr *device;
  struct gfc_expr *thread_limit;
  struct gfc_expr *grainsize;
  struct gfc_expr *hint;
  struct gfc_expr *num_tasks;
  struct gfc_expr *priority;
  struct gfc_expr *if_exprs[OMP_IF_LAST];
  enum gfc_omp_sched_kind dist_sched_kind;
  struct gfc_expr *dist_chunk_size;
  const char *critical_name;


  struct gfc_expr *async_expr;
  struct gfc_expr *gang_static_expr;
  struct gfc_expr *gang_num_expr;
  struct gfc_expr *worker_expr;
  struct gfc_expr *vector_expr;
  struct gfc_expr *num_gangs_expr;
  struct gfc_expr *num_workers_expr;
  struct gfc_expr *vector_length_expr;
  gfc_expr_list *wait_list;
  gfc_expr_list *tile_list;
  unsigned async:1, gang:1, worker:1, vector:1, seq:1, independent:1;
  unsigned par_auto:1, gang_static:1;
  unsigned if_present:1, finalize:1;
  locus loc;

}
gfc_omp_clauses;






typedef struct gfc_oacc_declare
{
  struct gfc_oacc_declare *next;
  bool module_var;
  gfc_omp_clauses *clauses;
  locus loc;
}
gfc_oacc_declare;






typedef struct gfc_omp_declare_simd
{
  struct gfc_omp_declare_simd *next;
  locus where;

  gfc_symbol *proc_name;

  gfc_omp_clauses *clauses;
}
gfc_omp_declare_simd;


typedef struct gfc_omp_udr
{
  struct gfc_omp_udr *next;
  locus where;

  const char *name;
  gfc_typespec ts;
  gfc_omp_reduction_op rop;

  struct gfc_symbol *omp_out;
  struct gfc_symbol *omp_in;
  struct gfc_namespace *combiner_ns;

  struct gfc_symbol *omp_priv;
  struct gfc_symbol *omp_orig;
  struct gfc_namespace *initializer_ns;
}
gfc_omp_udr;


typedef struct gfc_omp_namelist_udr
{
  struct gfc_omp_udr *udr;
  struct gfc_code *combiner;
  struct gfc_code *initializer;
}
gfc_omp_namelist_udr;





typedef struct gfc_st_label
{
  int priority; struct gfc_st_label *left, *right;

  int value;

  gfc_sl_type defined, referenced;

  struct gfc_expr *format;

  tree backend_decl;

  locus where;

  gfc_namespace *ns;
}
gfc_st_label;



typedef struct gfc_interface
{
  struct gfc_symbol *sym;
  locus where;
  struct gfc_interface *next;
}
gfc_interface;




typedef struct
{
  const char *name;

  gfc_interface *op;
  struct gfc_namespace *ns;
  gfc_access access;
}
gfc_user_op;



typedef struct gfc_tbp_generic
{


  struct gfc_symtree* specific_st;
  struct gfc_typebound_proc* specific;

  struct gfc_tbp_generic* next;
  bool is_operator;
}
gfc_tbp_generic;





typedef struct gfc_typebound_proc
{
  locus where;

  union
  {
    struct gfc_symtree* specific;
    gfc_tbp_generic* generic;
  }
  u;

  gfc_access access;
  const char* pass_arg;



  struct gfc_typebound_proc* overridden;




  unsigned pass_arg_num;

  unsigned nopass:1;
  unsigned non_overridable:1;
  unsigned deferred:1;
  unsigned is_generic:1;
  unsigned function:1, subroutine:1;
  unsigned error:1;
  unsigned ppc:1;
}
gfc_typebound_proc;
# 1567 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef struct gfc_symbol
{
  const char *name;
  const char *module;
  locus declared_at;

  gfc_typespec ts;
  symbol_attribute attr;






  gfc_interface *generic;
  gfc_access component_access;

  gfc_formal_arglist *formal;
  struct gfc_namespace *formal_ns;
  struct gfc_namespace *f2k_derived;


  struct gfc_actual_arglist *param_list;

  struct gfc_expr *value;
  gfc_array_spec *as;
  struct gfc_symbol *result;
  gfc_component *components;


  struct gfc_symbol *cp_pointer;

  int entry_id;


  int hash_value;

  struct gfc_symbol *common_next;







  struct gfc_common_head* common_head;



  int dummy_order;

  gfc_namelist *namelist, *namelist_tail;
# 1627 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
  struct gfc_symbol *old_symbol;
  unsigned mark:1, comp_mark:1, gfc_new:1;






  struct gfc_symbol *tlink;



  unsigned equiv_built:1;

  unsigned forall_index:1;

  unsigned fn_result_spec:1;




  unsigned resolve_symbol_called:2;


  unsigned abr_modproc_decl:1;


  unsigned error:1;


  unsigned maybe_array:1;

  int refs;
  struct gfc_namespace *ns;

  tree backend_decl;



  intmod_id from_intmod;



  int intmod_sym_id;



  const char* binding_label;

  struct gfc_common_head *common_block;


  struct gfc_association_list *assoc;


  struct gfc_symbol *dt_next;
}
gfc_symbol;


struct gfc_undo_change_set
{
  vec<gfc_symbol *> syms;
  vec<gfc_typebound_proc *> tbps;
  gfc_undo_change_set *previous;
};



typedef struct gfc_common_head
{
  locus where;
  char use_assoc, saved, threadprivate;
  unsigned char omp_declare_target : 1;
  unsigned char omp_declare_target_link : 1;

  char name[2*63 + 1 + 14 + 1];
  struct gfc_symbol *head;
  const char* binding_label;
  int is_bind_c;
  int refs;
}
gfc_common_head;






typedef struct gfc_entry_list
{

  gfc_symbol *sym;

  int id;

  tree label;

  struct gfc_entry_list *next;
}
gfc_entry_list;





typedef struct gfc_use_rename
{
  char local_name[63 + 1], use_name[63 + 1];
  struct gfc_use_rename *next;
  int found;
  gfc_intrinsic_op op;
  locus where;
}
gfc_use_rename;





typedef struct gfc_use_list
{
  const char *module_name;
  const char *submodule_name;
  bool intrinsic;
  bool non_intrinsic;
  bool only_flag;
  struct gfc_use_rename *rename;
  locus where;

  struct gfc_use_list *next;
}
gfc_use_list;
# 1768 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef struct gfc_symtree
{
  int priority; struct gfc_symtree *left, *right;
  const char *name;
  int ambiguous;
  union
  {
    gfc_symbol *sym;
    gfc_user_op *uop;
    gfc_common_head *common;
    gfc_typebound_proc *tb;
    gfc_omp_udr *omp_udr;
  }
  n;
}
gfc_symtree;


extern gfc_symbol *gfc_derived_types;

typedef struct gfc_oacc_routine_name
{
  struct gfc_symbol *sym;
  struct gfc_omp_clauses *clauses;
  struct gfc_oacc_routine_name *next;
  locus loc;
}
gfc_oacc_routine_name;






typedef struct gfc_was_finalized {
  gfc_expr *e;
  gfc_component *c;
  struct gfc_was_finalized *next;
}
gfc_was_finalized;





typedef struct gfc_namespace
{

  gfc_symtree *sym_root;

  gfc_symtree *uop_root;

  gfc_symtree *common_root;

  gfc_symtree *omp_udr_root;


  gfc_symtree *tb_sym_root;

  gfc_symtree *tb_uop_root;

  gfc_typebound_proc *tb_op[GFC_INTRINSIC_END];

  struct gfc_finalizer *finalizers;


  int set_flag[26];

  gfc_typespec default_type[26];

  locus implicit_loc[26];


  struct gfc_symbol *proc_name;


  struct gfc_code *code;


  struct gfc_equiv *equiv, *old_equiv;


  struct gfc_equiv_list *equiv_lists;

  gfc_interface *op[GFC_INTRINSIC_END];






  struct gfc_namespace *parent;


  struct gfc_namespace *contained, *sibling;

  gfc_common_head blank_common;
  gfc_access default_access, operator_access[GFC_INTRINSIC_END];

  gfc_st_label *st_labels;


  struct gfc_data *data, *old_data;


  gfc_oacc_declare *oacc_declare;


  gfc_omp_clauses *oacc_routine_clauses;


  gfc_oacc_routine_name *oacc_routine_names;

  gfc_charlen *cl_list;

  gfc_symbol *derived_types;

  int save_all, seen_save, seen_implicit_none;




  int refs;


  gfc_entry_list *entries;


  gfc_use_list *use_stmts;


  struct gfc_omp_declare_simd *omp_declare_simd;




  gfc_was_finalized *was_finalized;


  unsigned is_block_data:1;


  unsigned has_import_set:1;


  unsigned has_implicit_none_export:1;



  signed resolved:2;


  unsigned types_resolved:1;


  unsigned translated:1;



  unsigned construct_entities:1;


  unsigned omp_udr_ns:1;


  unsigned oacc_routine:1;


  unsigned implicit_interface_calls:1;


  unsigned omp_requires:6;
  unsigned omp_target_seen:1;
}
gfc_namespace;

extern gfc_namespace *gfc_current_ns;
extern gfc_namespace *gfc_global_ns_list;





enum gfc_symbol_type
{
  GSYM_UNKNOWN=1, GSYM_PROGRAM, GSYM_FUNCTION, GSYM_SUBROUTINE,
  GSYM_MODULE, GSYM_COMMON, GSYM_BLOCK_DATA
};

typedef struct gfc_gsymbol
{
  int priority; struct gfc_gsymbol *left, *right;

  const char *name;
  const char *sym_name;
  const char *mod_name;
  const char *binding_label;
  enum gfc_symbol_type type;

  int defined, used;
  bool bind_c;
  locus where;
  gfc_namespace *ns;
}
gfc_gsymbol;

extern gfc_gsymbol *gfc_gsym_root;


typedef struct
{
  interface_type type;
  gfc_symbol *sym;
  gfc_namespace *ns;
  gfc_user_op *uop;
  gfc_intrinsic_op op;
}
gfc_interface_info;

extern gfc_interface_info current_interface;




enum gfc_array_ref_dimen_type
{
  DIMEN_ELEMENT = 1, DIMEN_RANGE, DIMEN_VECTOR, DIMEN_STAR, DIMEN_THIS_IMAGE, DIMEN_UNKNOWN
};

typedef struct gfc_array_ref
{
  ar_type type;
  int dimen;
  int codimen;
  bool in_allocate;
  gfc_expr *team;
  gfc_expr *stat;
  locus where;
  gfc_array_spec *as;

  locus c_where[15];
  struct gfc_expr *start[15], *end[15],
    *stride[15];

  enum gfc_array_ref_dimen_type dimen_type[15];
}
gfc_array_ref;
# 2025 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
enum ref_type
  { REF_ARRAY, REF_COMPONENT, REF_SUBSTRING, REF_INQUIRY };

enum inquiry_type
  { INQUIRY_RE, INQUIRY_IM, INQUIRY_KIND, INQUIRY_LEN };

typedef struct gfc_ref
{
  ref_type type;

  union
  {
    struct gfc_array_ref ar;

    struct
    {
      gfc_component *component;
      gfc_symbol *sym;
    }
    c;

    struct
    {
      struct gfc_expr *start, *end;
      gfc_charlen *length;
    }
    ss;

    inquiry_type i;

  }
  u;

  struct gfc_ref *next;
}
gfc_ref;





typedef struct gfc_intrinsic_arg
{
  char name[63 + 1];

  gfc_typespec ts;
  unsigned optional:1, value:1;
  enum sym_intent intent:2;
  gfc_actual_arglist *actual;

  struct gfc_intrinsic_arg *next;

}
gfc_intrinsic_arg;
# 2088 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef union
{
  bool (*f0)(void);
  bool (*f1)(struct gfc_expr *);
  bool (*f1m)(gfc_actual_arglist *);
  bool (*f2)(struct gfc_expr *, struct gfc_expr *);
  bool (*f3)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *);
  bool (*f5ml)(gfc_actual_arglist *);
  bool (*f6fl)(gfc_actual_arglist *);
  bool (*f3red)(gfc_actual_arglist *);
  bool (*f4)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,
     struct gfc_expr *);
  bool (*f5)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,
     struct gfc_expr *, struct gfc_expr *);
}
gfc_check_f;





typedef union
{
  struct gfc_expr *(*f0)(void);
  struct gfc_expr *(*f1)(struct gfc_expr *);
  struct gfc_expr *(*f2)(struct gfc_expr *, struct gfc_expr *);
  struct gfc_expr *(*f3)(struct gfc_expr *, struct gfc_expr *,
    struct gfc_expr *);
  struct gfc_expr *(*f4)(struct gfc_expr *, struct gfc_expr *,
    struct gfc_expr *, struct gfc_expr *);
  struct gfc_expr *(*f5)(struct gfc_expr *, struct gfc_expr *,
    struct gfc_expr *, struct gfc_expr *,
    struct gfc_expr *);
  struct gfc_expr *(*f6)(struct gfc_expr *, struct gfc_expr *,
    struct gfc_expr *, struct gfc_expr *,
    struct gfc_expr *, struct gfc_expr *);
  struct gfc_expr *(*cc)(struct gfc_expr *, bt, int);
}
gfc_simplify_f;





typedef union
{
  void (*f0)(struct gfc_expr *);
  void (*f1)(struct gfc_expr *, struct gfc_expr *);
  void (*f1m)(struct gfc_expr *, struct gfc_actual_arglist *);
  void (*f2)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *);
  void (*f3)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,
      struct gfc_expr *);
  void (*f4)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,
      struct gfc_expr *, struct gfc_expr *);
  void (*f5)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,
      struct gfc_expr *, struct gfc_expr *, struct gfc_expr *);
  void (*f6)(struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,
      struct gfc_expr *, struct gfc_expr *, struct gfc_expr *,
      struct gfc_expr *);
  void (*s1)(struct gfc_code *);
}
gfc_resolve_f;


typedef struct gfc_intrinsic_sym
{
  const char *name, *lib_name;
  gfc_intrinsic_arg *formal;
  gfc_typespec ts;
  unsigned elemental:1, inquiry:1, transformational:1, pure:1,
    generic:1, specific:1, actual_ok:1, noreturn:1, conversion:1,
    from_module:1, vararg:1;

  int standard;

  gfc_simplify_f simplify;
  gfc_check_f check;
  gfc_resolve_f resolve;
  struct gfc_intrinsic_sym *specific_head, *next;
  gfc_isym_id id;

}
gfc_intrinsic_sym;
# 2188 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
# 1 "/usr/include/mpfr.h" 1 3 4
# 61 "/usr/include/mpfr.h" 3 4

# 61 "/usr/include/mpfr.h" 3 4
typedef void mpfr_void;
typedef int mpfr_int;
typedef unsigned int mpfr_uint;
typedef long mpfr_long;
typedef unsigned long mpfr_ulong;
typedef size_t mpfr_size_t;







typedef unsigned int mpfr_flags_t;
# 102 "/usr/include/mpfr.h" 3 4
typedef enum {
  MPFR_RNDN=0,
  MPFR_RNDZ,
  MPFR_RNDU,
  MPFR_RNDD,
  MPFR_RNDA,
  MPFR_RNDF,
  MPFR_RNDNA=-1
} mpfr_rnd_t;
# 168 "/usr/include/mpfr.h" 3 4
typedef long mpfr_prec_t;
typedef unsigned long mpfr_uprec_t;
# 184 "/usr/include/mpfr.h" 3 4
typedef int mpfr_sign_t;
# 195 "/usr/include/mpfr.h" 3 4
typedef long mpfr_exp_t;
typedef unsigned long mpfr_uexp_t;
# 224 "/usr/include/mpfr.h" 3 4
typedef struct {
  mpfr_prec_t _mpfr_prec;
  mpfr_sign_t _mpfr_sign;
  mpfr_exp_t _mpfr_exp;
  mp_limb_t *_mpfr_d;
} __mpfr_struct;
# 250 "/usr/include/mpfr.h" 3 4
typedef __mpfr_struct mpfr_t[1];
typedef __mpfr_struct *mpfr_ptr;
typedef const __mpfr_struct *mpfr_srcptr;
# 263 "/usr/include/mpfr.h" 3 4
typedef enum {
  MPFR_NAN_KIND = 0,
  MPFR_INF_KIND = 1,
  MPFR_ZERO_KIND = 2,
  MPFR_REGULAR_KIND = 3
} mpfr_kind_t;


typedef enum {
  MPFR_FREE_LOCAL_CACHE = 1,
  MPFR_FREE_GLOBAL_CACHE = 2
} mpfr_free_cache_t;
# 375 "/usr/include/mpfr.h" 3 4
extern "C" {


 __attribute__ ((__returns_nonnull__)) const char * mpfr_get_version (void);
 __attribute__ ((__returns_nonnull__)) const char * mpfr_get_patches (void);

 int mpfr_buildopt_tls_p (void);
 int mpfr_buildopt_float128_p (void);
 int mpfr_buildopt_decimal_p (void);
 int mpfr_buildopt_gmpinternals_p (void);
 int mpfr_buildopt_sharedcache_p (void);
 __attribute__ ((__returns_nonnull__)) const char *
  mpfr_buildopt_tune_case (void);

 mpfr_exp_t mpfr_get_emin (void);
 int mpfr_set_emin (mpfr_exp_t);
 mpfr_exp_t mpfr_get_emin_min (void);
 mpfr_exp_t mpfr_get_emin_max (void);
 mpfr_exp_t mpfr_get_emax (void);
 int mpfr_set_emax (mpfr_exp_t);
 mpfr_exp_t mpfr_get_emax_min (void);
 mpfr_exp_t mpfr_get_emax_max (void);

 void mpfr_set_default_rounding_mode (mpfr_rnd_t);
 mpfr_rnd_t mpfr_get_default_rounding_mode (void);
 const char * mpfr_print_rnd_mode (mpfr_rnd_t);

 void mpfr_clear_flags (void);
 void mpfr_clear_underflow (void);
 void mpfr_clear_overflow (void);
 void mpfr_clear_divby0 (void);
 void mpfr_clear_nanflag (void);
 void mpfr_clear_inexflag (void);
 void mpfr_clear_erangeflag (void);

 void mpfr_set_underflow (void);
 void mpfr_set_overflow (void);
 void mpfr_set_divby0 (void);
 void mpfr_set_nanflag (void);
 void mpfr_set_inexflag (void);
 void mpfr_set_erangeflag (void);

 int mpfr_underflow_p (void);
 int mpfr_overflow_p (void);
 int mpfr_divby0_p (void);
 int mpfr_nanflag_p (void);
 int mpfr_inexflag_p (void);
 int mpfr_erangeflag_p (void);

 void mpfr_flags_clear (mpfr_flags_t);
 void mpfr_flags_set (mpfr_flags_t);
 mpfr_flags_t mpfr_flags_test (mpfr_flags_t);
 mpfr_flags_t mpfr_flags_save (void);
 void mpfr_flags_restore (mpfr_flags_t,
                                         mpfr_flags_t);

 int mpfr_check_range (mpfr_ptr, int, mpfr_rnd_t);

 void mpfr_init2 (mpfr_ptr, mpfr_prec_t);
 void mpfr_init (mpfr_ptr);
 void mpfr_clear (mpfr_ptr);

 void
  mpfr_inits2 (mpfr_prec_t, mpfr_ptr, ...) __attribute__ ((__sentinel__));
 void
  mpfr_inits (mpfr_ptr, ...) __attribute__ ((__sentinel__));
 void
  mpfr_clears (mpfr_ptr, ...) __attribute__ ((__sentinel__));

 int mpfr_prec_round (mpfr_ptr, mpfr_prec_t, mpfr_rnd_t);
 int mpfr_can_round (mpfr_srcptr, mpfr_exp_t, mpfr_rnd_t,
                                    mpfr_rnd_t, mpfr_prec_t);
 mpfr_prec_t mpfr_min_prec (mpfr_srcptr);

 mpfr_exp_t mpfr_get_exp (mpfr_srcptr);
 int mpfr_set_exp (mpfr_ptr, mpfr_exp_t);
 mpfr_prec_t mpfr_get_prec (mpfr_srcptr);
 void mpfr_set_prec (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_prec_raw (mpfr_ptr, mpfr_prec_t);
 void mpfr_set_default_prec (mpfr_prec_t);
 mpfr_prec_t mpfr_get_default_prec (void);

 int mpfr_set_d (mpfr_ptr, double, mpfr_rnd_t);
 int mpfr_set_flt (mpfr_ptr, float, mpfr_rnd_t);






 int mpfr_set_ld (mpfr_ptr, long double, mpfr_rnd_t);




 int mpfr_set_z (mpfr_ptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_set_z_2exp (mpfr_ptr, mpz_srcptr, mpfr_exp_t,
                                     mpfr_rnd_t);
 void mpfr_set_nan (mpfr_ptr);
 void mpfr_set_inf (mpfr_ptr, int);
 void mpfr_set_zero (mpfr_ptr, int);



 int mpfr_set_f (mpfr_ptr, mpf_srcptr, mpfr_rnd_t);
 int mpfr_cmp_f (mpfr_srcptr, mpf_srcptr);
 int mpfr_get_f (mpf_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_set_si (mpfr_ptr, long, mpfr_rnd_t);
 int mpfr_set_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_set_si_2exp (mpfr_ptr, long, mpfr_exp_t, mpfr_rnd_t);
 int mpfr_set_ui_2exp (mpfr_ptr, unsigned long, mpfr_exp_t,
                                      mpfr_rnd_t);


 int mpfr_set_q (mpfr_ptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_mul_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_div_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_add_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_sub_q (mpfr_ptr, mpfr_srcptr, mpq_srcptr, mpfr_rnd_t);
 int mpfr_cmp_q (mpfr_srcptr, mpq_srcptr);
 void mpfr_get_q (mpq_ptr q, mpfr_srcptr f);

 int mpfr_set_str (mpfr_ptr, const char *, int, mpfr_rnd_t);
 int mpfr_init_set_str (mpfr_ptr, const char *, int,
                                       mpfr_rnd_t);
 int mpfr_set4 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t, int);
 int mpfr_abs (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_set (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_neg (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_signbit (mpfr_srcptr);
 int mpfr_setsign (mpfr_ptr, mpfr_srcptr, int, mpfr_rnd_t);
 int mpfr_copysign (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                   mpfr_rnd_t);

 mpfr_exp_t mpfr_get_z_2exp (mpz_ptr, mpfr_srcptr);
 float mpfr_get_flt (mpfr_srcptr, mpfr_rnd_t);
 double mpfr_get_d (mpfr_srcptr, mpfr_rnd_t);




 long double mpfr_get_ld (mpfr_srcptr, mpfr_rnd_t);
 double mpfr_get_d1 (mpfr_srcptr);
 double mpfr_get_d_2exp (long*, mpfr_srcptr, mpfr_rnd_t);
 long double mpfr_get_ld_2exp (long*, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_frexp (mpfr_exp_t*, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 long mpfr_get_si (mpfr_srcptr, mpfr_rnd_t);
 unsigned long mpfr_get_ui (mpfr_srcptr, mpfr_rnd_t);
 size_t mpfr_get_str_ndigits (int, mpfr_prec_t);
 char * mpfr_get_str (char*, mpfr_exp_t*, int, size_t,
                                     mpfr_srcptr, mpfr_rnd_t);
 int mpfr_get_z (mpz_ptr z, mpfr_srcptr f, mpfr_rnd_t);

 void mpfr_free_str (char *);

 int mpfr_urandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);

__attribute__ ((__deprecated__))

 int mpfr_grandom (mpfr_ptr, mpfr_ptr, gmp_randstate_t,
                                  mpfr_rnd_t);
 int mpfr_nrandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);
 int mpfr_erandom (mpfr_ptr, gmp_randstate_t, mpfr_rnd_t);
 int mpfr_urandomb (mpfr_ptr, gmp_randstate_t);

 void mpfr_nextabove (mpfr_ptr);
 void mpfr_nextbelow (mpfr_ptr);
 void mpfr_nexttoward (mpfr_ptr, mpfr_srcptr);


 int mpfr_printf (const char*, ...);
 int mpfr_asprintf (char**, const char*, ...);
 int mpfr_sprintf (char*, const char*, ...);
 int mpfr_snprintf (char*, size_t, const char*, ...);


 int mpfr_pow (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_pow_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_pow_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_pow_ui (mpfr_ptr, unsigned long, unsigned long,
                                    mpfr_rnd_t);
 int mpfr_ui_pow (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_pow_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);

 int mpfr_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sqrt_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_rec_sqrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sub (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_div (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_sub_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_sub (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_mul_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_div_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                 mpfr_rnd_t);
 int mpfr_ui_div (mpfr_ptr, unsigned long, mpfr_srcptr,
                                 mpfr_rnd_t);

 int mpfr_add_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_sub_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_si_sub (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_div_si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_si_div (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_add_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_sub_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_d_sub (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_mul_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_div_d (mpfr_ptr, mpfr_srcptr, double, mpfr_rnd_t);
 int mpfr_d_div (mpfr_ptr, double, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_sqr (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_const_pi (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_log2 (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_euler (mpfr_ptr, mpfr_rnd_t);
 int mpfr_const_catalan (mpfr_ptr, mpfr_rnd_t);

 int mpfr_agm (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_log (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log1p (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_log_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);

 int mpfr_exp (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_exp2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_exp10 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_expm1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_eint (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_li2 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_cmp (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmp3 (mpfr_srcptr, mpfr_srcptr, int);
 int mpfr_cmp_d (mpfr_srcptr, double);
 int mpfr_cmp_ld (mpfr_srcptr, long double);
 int mpfr_cmp_ui (mpfr_srcptr, unsigned long);
 int mpfr_cmp_si (mpfr_srcptr, long);
 int mpfr_cmp_ui_2exp (mpfr_srcptr, unsigned long, mpfr_exp_t);
 int mpfr_cmp_si_2exp (mpfr_srcptr, long, mpfr_exp_t);
 int mpfr_cmpabs (mpfr_srcptr, mpfr_srcptr);
 int mpfr_cmpabs_ui (mpfr_srcptr, unsigned long);
 void mpfr_reldiff (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                   mpfr_rnd_t);
 int mpfr_eq (mpfr_srcptr, mpfr_srcptr, unsigned long);
 int mpfr_sgn (mpfr_srcptr);

 int mpfr_mul_2exp (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_div_2exp (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_mul_2ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                  mpfr_rnd_t);
 int mpfr_div_2ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                  mpfr_rnd_t);
 int mpfr_mul_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);
 int mpfr_div_2si (mpfr_ptr, mpfr_srcptr, long, mpfr_rnd_t);

 int mpfr_rint (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_roundeven (mpfr_ptr, mpfr_srcptr);
 int mpfr_round (mpfr_ptr, mpfr_srcptr);
 int mpfr_trunc (mpfr_ptr, mpfr_srcptr);
 int mpfr_ceil (mpfr_ptr, mpfr_srcptr);
 int mpfr_floor (mpfr_ptr, mpfr_srcptr);
 int mpfr_rint_roundeven (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_round (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_trunc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_ceil (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_rint_floor (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_frac (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_modf (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_remquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr,
                                 mpfr_rnd_t);
 int mpfr_remainder (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                    mpfr_rnd_t);
 int mpfr_fmod (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fmodquo (mpfr_ptr, long*, mpfr_srcptr, mpfr_srcptr,
                                  mpfr_rnd_t);

 int mpfr_fits_ulong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_slong_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sint_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_ushort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_sshort_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_uintmax_p (mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fits_intmax_p (mpfr_srcptr, mpfr_rnd_t);

 void mpfr_extract (mpz_ptr, mpfr_srcptr, unsigned int);
 void mpfr_swap (mpfr_ptr, mpfr_ptr);
 void mpfr_dump (mpfr_srcptr);

 int mpfr_nan_p (mpfr_srcptr);
 int mpfr_inf_p (mpfr_srcptr);
 int mpfr_number_p (mpfr_srcptr);
 int mpfr_integer_p (mpfr_srcptr);
 int mpfr_zero_p (mpfr_srcptr);
 int mpfr_regular_p (mpfr_srcptr);

 int mpfr_greater_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_greaterequal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_less_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessequal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_lessgreater_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_equal_p (mpfr_srcptr, mpfr_srcptr);
 int mpfr_unordered_p (mpfr_srcptr, mpfr_srcptr);

 int mpfr_atanh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_acosh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_asinh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cosh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_tanh (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sinh_cosh (mpfr_ptr, mpfr_ptr, mpfr_srcptr,
                                    mpfr_rnd_t);

 int mpfr_sech (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_csch (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_coth (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_acos (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_asin (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_atan (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sin (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sin_cos (mpfr_ptr, mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cos (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_tan (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_atan2 (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sec (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_csc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cot (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_hypot (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_erf (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_erfc (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cbrt (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

__attribute__ ((__deprecated__))

 int mpfr_root (mpfr_ptr, mpfr_srcptr, unsigned long,
                               mpfr_rnd_t);
 int mpfr_rootn_ui (mpfr_ptr, mpfr_srcptr, unsigned long,
                                   mpfr_rnd_t);
 int mpfr_gamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_gamma_inc (mpfr_ptr, mpfr_srcptr, mpfr_srcptr,
                                    mpfr_rnd_t);
 int mpfr_beta (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_lngamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_lgamma (mpfr_ptr, int *, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_digamma (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_zeta (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_zeta_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_fac_ui (mpfr_ptr, unsigned long, mpfr_rnd_t);
 int mpfr_j0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_j1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_jn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_y0 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_y1 (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_yn (mpfr_ptr, long, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_ai (mpfr_ptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_min (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_max (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_dim (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_rnd_t);

 int mpfr_mul_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_div_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_add_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_sub_z (mpfr_ptr, mpfr_srcptr, mpz_srcptr, mpfr_rnd_t);
 int mpfr_z_sub (mpfr_ptr, mpz_srcptr, mpfr_srcptr, mpfr_rnd_t);
 int mpfr_cmp_z (mpfr_srcptr, mpz_srcptr);

 int mpfr_fma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                              mpfr_rnd_t);
 int mpfr_fms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                              mpfr_rnd_t);
 int mpfr_fmma (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                               mpfr_srcptr, mpfr_rnd_t);
 int mpfr_fmms (mpfr_ptr, mpfr_srcptr, mpfr_srcptr, mpfr_srcptr,
                               mpfr_srcptr, mpfr_rnd_t);
 int mpfr_sum (mpfr_ptr, const mpfr_ptr *, unsigned long,
                              mpfr_rnd_t);
 int mpfr_dot (mpfr_ptr, const mpfr_ptr *, const mpfr_ptr *,
                              unsigned long, mpfr_rnd_t);

 void mpfr_free_cache (void);
 void mpfr_free_cache2 (mpfr_free_cache_t);
 void mpfr_free_pool (void);
 int mpfr_mp_memory_cleanup (void);

 int mpfr_subnormalize (mpfr_ptr, int, mpfr_rnd_t);

 int mpfr_strtofr (mpfr_ptr, const char *, char **, int,
                                  mpfr_rnd_t);

 void mpfr_round_nearest_away_begin (mpfr_t);
 int mpfr_round_nearest_away_end (mpfr_t, int);

 size_t mpfr_custom_get_size (mpfr_prec_t);
 void mpfr_custom_init (void *, mpfr_prec_t);
 __attribute__ ((__returns_nonnull__)) void *
  mpfr_custom_get_significand (mpfr_srcptr);
 mpfr_exp_t mpfr_custom_get_exp (mpfr_srcptr);
 void mpfr_custom_move (mpfr_ptr, void *);
 void mpfr_custom_init_set (mpfr_ptr, int, mpfr_exp_t,
                                           mpfr_prec_t, void *);
 int mpfr_custom_get_kind (mpfr_srcptr);

 int mpfr_total_order_p (mpfr_srcptr, mpfr_srcptr);


}
# 1074 "/usr/include/mpfr.h" 3 4
extern "C" {
# 1083 "/usr/include/mpfr.h" 3 4
 int __gmpfr_set_sj (mpfr_t, intmax_t, mpfr_rnd_t);
 int __gmpfr_set_sj_2exp (mpfr_t, intmax_t, intmax_t, mpfr_rnd_t);
 int __gmpfr_set_uj (mpfr_t, uintmax_t, mpfr_rnd_t);
 int __gmpfr_set_uj_2exp (mpfr_t, uintmax_t, intmax_t, mpfr_rnd_t);
 intmax_t __gmpfr_mpfr_get_sj (mpfr_srcptr, mpfr_rnd_t);
 uintmax_t __gmpfr_mpfr_get_uj (mpfr_srcptr, mpfr_rnd_t);


}
# 1104 "/usr/include/mpfr.h" 3 4
extern "C" {




 size_t __gmpfr_inp_str (mpfr_ptr, FILE*, int, mpfr_rnd_t);
 size_t __gmpfr_out_str (FILE*, int, size_t, mpfr_srcptr,
                                     mpfr_rnd_t);


 int __gmpfr_fprintf (FILE*, const char*, ...);



 int __gmpfr_fpif_export (FILE*, mpfr_ptr);
 int __gmpfr_fpif_import (mpfr_ptr, FILE*);


}
# 1135 "/usr/include/mpfr.h" 3 4
extern "C" {






 int __gmpfr_vprintf (const char*, va_list);
 int __gmpfr_vasprintf (char**, const char*, va_list);
 int __gmpfr_vsprintf (char*, const char*, va_list);
 int __gmpfr_vsnprintf (char*, size_t, const char*, va_list);


}
# 1162 "/usr/include/mpfr.h" 3 4
extern "C" {



 int __gmpfr_vfprintf (FILE*, const char*, va_list);


}
# 2189 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2
# 1 "/usr/include/mpc.h" 1 3 4
# 25 "/usr/include/mpc.h" 3 4
# 1 "/usr/include/mpfr.h" 1 3 4
# 26 "/usr/include/mpc.h" 2 3 4
# 72 "/usr/include/mpc.h" 3 4
typedef int mpc_rnd_t;
# 101 "/usr/include/mpc.h" 3 4
typedef struct {
  mpfr_t re;
  mpfr_t im;
}
__mpc_struct;

typedef __mpc_struct mpc_t[1];
typedef __mpc_struct *mpc_ptr;
typedef const __mpc_struct *mpc_srcptr;
# 121 "/usr/include/mpc.h" 3 4
extern "C" {


 int mpc_add (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_add_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_add_si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_add_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_sub (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sub_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_fr_sub (mpc_ptr, mpfr_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sub_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_ui_ui_sub (mpc_ptr, unsigned long int, unsigned long int, mpc_srcptr, mpc_rnd_t);
 int mpc_mul (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_mul_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_mul_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_mul_si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_mul_i (mpc_ptr, mpc_srcptr, int, mpc_rnd_t);
 int mpc_sqr (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_div (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_pow (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_pow_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_pow_ld (mpc_ptr, mpc_srcptr, long double, mpc_rnd_t);
 int mpc_pow_d (mpc_ptr, mpc_srcptr, double, mpc_rnd_t);
 int mpc_pow_si (mpc_ptr, mpc_srcptr, long, mpc_rnd_t);
 int mpc_pow_ui (mpc_ptr, mpc_srcptr, unsigned long, mpc_rnd_t);
 int mpc_pow_z (mpc_ptr, mpc_srcptr, mpz_srcptr, mpc_rnd_t);
 int mpc_div_fr (mpc_ptr, mpc_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_fr_div (mpc_ptr, mpfr_srcptr, mpc_srcptr, mpc_rnd_t);
 int mpc_div_ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_ui_div (mpc_ptr, unsigned long int, mpc_srcptr, mpc_rnd_t);
 int mpc_div_2ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_mul_2ui (mpc_ptr, mpc_srcptr, unsigned long int, mpc_rnd_t);
 int mpc_div_2si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_mul_2si (mpc_ptr, mpc_srcptr, long int, mpc_rnd_t);
 int mpc_conj (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_neg (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sum (mpc_ptr, const mpc_ptr *, unsigned long, mpc_rnd_t);
 int mpc_dot (mpc_ptr, const mpc_ptr *, const mpc_ptr *, unsigned long, mpc_rnd_t);
 int mpc_norm (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_abs (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_sqrt (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_set (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_set_d (mpc_ptr, double, mpc_rnd_t);
 int mpc_set_d_d (mpc_ptr, double, double, mpc_rnd_t);
 int mpc_set_ld (mpc_ptr, long double, mpc_rnd_t);
 int mpc_set_ld_ld (mpc_ptr, long double, long double, mpc_rnd_t);
 int mpc_set_f (mpc_ptr, mpf_srcptr, mpc_rnd_t);
 int mpc_set_f_f (mpc_ptr, mpf_srcptr, mpf_srcptr, mpc_rnd_t);
 int mpc_set_fr (mpc_ptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_set_fr_fr (mpc_ptr, mpfr_srcptr, mpfr_srcptr, mpc_rnd_t);
 int mpc_set_q (mpc_ptr, mpq_srcptr, mpc_rnd_t);
 int mpc_set_q_q (mpc_ptr, mpq_srcptr, mpq_srcptr, mpc_rnd_t);
 int mpc_set_si (mpc_ptr, long int, mpc_rnd_t);
 int mpc_set_si_si (mpc_ptr, long int, long int, mpc_rnd_t);
 int mpc_set_ui (mpc_ptr, unsigned long int, mpc_rnd_t);
 int mpc_set_ui_ui (mpc_ptr, unsigned long int, unsigned long int, mpc_rnd_t);
 int mpc_set_z (mpc_ptr, mpz_srcptr, mpc_rnd_t);
 int mpc_set_z_z (mpc_ptr, mpz_srcptr, mpz_srcptr, mpc_rnd_t);
 void mpc_swap (mpc_ptr, mpc_ptr);
 int mpc_fma (mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t);

 void mpc_set_nan (mpc_ptr);

 int mpc_real (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_imag (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_arg (mpfr_ptr, mpc_srcptr, mpfr_rnd_t);
 int mpc_proj (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_cmp (mpc_srcptr, mpc_srcptr);
 int mpc_cmp_si_si (mpc_srcptr, long int, long int);
 int mpc_cmp_abs (mpc_srcptr, mpc_srcptr);
 int mpc_exp (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_log (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_log10 (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sin (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_cos (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sin_cos (mpc_ptr, mpc_ptr, mpc_srcptr, mpc_rnd_t, mpc_rnd_t);
 int mpc_tan (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_sinh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_cosh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_tanh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_asin (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_acos (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_atan (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_asinh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_acosh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_atanh (mpc_ptr, mpc_srcptr, mpc_rnd_t);
 int mpc_rootofunity (mpc_ptr, unsigned long int, unsigned long int, mpc_rnd_t);
 void mpc_clear (mpc_ptr);
 int mpc_urandom (mpc_ptr, gmp_randstate_t);
 void mpc_init2 (mpc_ptr, mpfr_prec_t);
 void mpc_init3 (mpc_ptr, mpfr_prec_t, mpfr_prec_t);
 mpfr_prec_t mpc_get_prec (mpc_srcptr x);
 void mpc_get_prec2 (mpfr_prec_t *pr, mpfr_prec_t *pi, mpc_srcptr x);
 void mpc_set_prec (mpc_ptr, mpfr_prec_t);
 const char * mpc_get_version (void);

 int mpc_strtoc (mpc_ptr, const char *, char **, int, mpc_rnd_t);
 int mpc_set_str (mpc_ptr, const char *, int, mpc_rnd_t);
 char * mpc_get_str (int, size_t, mpc_srcptr, mpc_rnd_t);
 void mpc_free_str (char *);



 int mpc_set_sj (mpc_ptr, intmax_t, mpc_rnd_t);
 int mpc_set_uj (mpc_ptr, uintmax_t, mpc_rnd_t);
 int mpc_set_sj_sj (mpc_ptr, intmax_t, intmax_t, mpc_rnd_t);
 int mpc_set_uj_uj (mpc_ptr, uintmax_t, uintmax_t, mpc_rnd_t);
# 238 "/usr/include/mpc.h" 3 4
 int mpc_inp_str (mpc_ptr, FILE *, size_t *, int, mpc_rnd_t);
 size_t mpc_out_str (FILE *, int, size_t, mpc_srcptr, mpc_rnd_t);



}
# 2190 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2




# 2193 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef splay_tree gfc_constructor_base;







typedef long gfc_charlen_t;

typedef struct gfc_expr
{
  expr_t expr_type;

  gfc_typespec ts;

  int rank;
  mpz_t *shape;



  gfc_symtree *symtree;

  gfc_ref *ref;

  locus where;



  struct gfc_expr *base_expr;


  unsigned int is_snan : 1;



  unsigned int error : 1;



  unsigned int user_operator : 1;


  unsigned int mold : 1;


  unsigned int must_finalize : 1;



  unsigned int no_bounds_check : 1;




  unsigned int external_blas : 1;




  unsigned int do_not_resolve_again : 1;



  unsigned int do_not_warn : 1;


  unsigned int from_constructor : 1;





  struct
  {
    gfc_charlen_t length;
    char *string;
  }
  representation;

  struct
  {
    int len;
    int rdx;
    char *str;
  }
  boz;

  union
  {
    int logical;

    io_kind iokind;

    mpz_t integer;

    mpfr_t real;

    mpc_t complex;

    struct
    {
      gfc_intrinsic_op op;
      gfc_user_op *uop;
      struct gfc_expr *op1, *op2;
    }
    op;

    struct
    {
      gfc_actual_arglist *actual;
      const char *name;
      gfc_intrinsic_sym *isym;
      gfc_symbol *esym;
    }
    function;

    struct
    {
      gfc_actual_arglist* actual;
      const char* name;


      struct gfc_expr* base_object;
      gfc_typebound_proc* tbp;




      unsigned ignore_pass:1;



      unsigned assign:1;
    }
    compcall;

    struct
    {
      gfc_charlen_t length;
      gfc_char_t *string;
    }
    character;

    gfc_constructor_base constructor;
  }
  value;


  gfc_actual_arglist *param_list;

}
gfc_expr;
# 2355 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef struct
{

  mpz_t huge, pedantic_min_int, min_int;

  int kind, radix, digits, bit_size, range;



  unsigned int c_char : 1;
  unsigned int c_short : 1;
  unsigned int c_int : 1;
  unsigned int c_long : 1;
  unsigned int c_long_long : 1;
}
gfc_integer_info;

extern gfc_integer_info gfc_integer_kinds[];


typedef struct
{
  int kind, bit_size;


  unsigned int c_bool : 1;
}
gfc_logical_info;

extern gfc_logical_info gfc_logical_kinds[];


typedef struct
{
  mpfr_t epsilon, huge, tiny, subnormal;
  int kind, radix, digits, min_exponent, max_exponent;
  int range, precision;


  int mode_precision;



  unsigned int c_float : 1;
  unsigned int c_double : 1;
  unsigned int c_long_double : 1;
  unsigned int c_float128 : 1;
}
gfc_real_info;

extern gfc_real_info gfc_real_kinds[];

typedef struct
{
  int kind, bit_size;
  const char *name;
}
gfc_character_info;

extern gfc_character_info gfc_character_kinds[];




typedef struct gfc_equiv
{
  struct gfc_equiv *next, *eq;
  gfc_expr *expr;
  const char *module;
  int used;
}
gfc_equiv;




typedef struct gfc_equiv_info
{
  gfc_symbol *sym;
  long offset;
  long length;
  struct gfc_equiv_info *next;
} gfc_equiv_info;


typedef struct gfc_equiv_list
{
  gfc_equiv_info *equiv;
  struct gfc_equiv_list *next;
} gfc_equiv_list;
# 2458 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
typedef struct gfc_case
{

  locus where;
  int n;




  gfc_expr *low, *high;


  gfc_typespec ts;


  struct gfc_case *next;


  struct gfc_case *left, *right;


  int unreachable;
}
gfc_case;




typedef struct
{
  gfc_expr *var, *start, *end, *step;
  unsigned short unroll;
  bool ivdep;
  bool vector;
  bool novector;
}
gfc_iterator;






typedef struct gfc_alloc
{
  gfc_expr *expr;
  struct gfc_alloc *next;
}
gfc_alloc;




typedef struct
{
  gfc_expr *unit, *file, *status, *access, *form, *recl,
    *blank, *position, *action, *delim, *pad, *iostat, *iomsg, *convert,
    *decimal, *encoding, *round, *sign, *asynchronous, *id, *newunit,
    *share, *cc;
  char readonly;
  gfc_st_label *err;
}
gfc_open;


typedef struct
{
  gfc_expr *unit, *status, *iostat, *iomsg;
  gfc_st_label *err;
}
gfc_close;


typedef struct
{
  gfc_expr *unit, *iostat, *iomsg;
  gfc_st_label *err;
}
gfc_filepos;


typedef struct
{
  gfc_expr *unit, *file, *iostat, *exist, *opened, *number, *named,
    *name, *access, *sequential, *direct, *form, *formatted,
    *unformatted, *recl, *nextrec, *blank, *position, *action, *read,
    *write, *readwrite, *delim, *pad, *iolength, *iomsg, *convert, *strm_pos,
    *asynchronous, *decimal, *encoding, *pending, *round, *sign, *size, *id,
    *iqstream, *share, *cc;

  gfc_st_label *err;

}
gfc_inquire;


typedef struct
{
  gfc_expr *unit, *iostat, *iomsg, *id;
  gfc_st_label *err, *end, *eor;
}
gfc_wait;


typedef struct
{
  gfc_expr *io_unit, *format_expr, *rec, *advance, *iostat, *size, *iomsg,
    *id, *pos, *asynchronous, *blank, *decimal, *delim, *pad, *round,
    *sign, *extra_comma, *dt_io_kind, *udtio;
  char dec_ext;

  gfc_symbol *namelist;

  gfc_st_label *format_label;
  gfc_st_label *err, *end, *eor;

  locus eor_where, end_where, err_where;
}
gfc_dt;


typedef struct gfc_forall_iterator
{
  gfc_expr *var, *start, *end, *stride;
  struct gfc_forall_iterator *next;
}
gfc_forall_iterator;




typedef struct gfc_association_list
{
  struct gfc_association_list *next;




  unsigned variable:1;





  unsigned dangling:1;


  unsigned rankguessed:1;

  char name[63 + 1];
  gfc_symtree *st;
  locus where;

  gfc_expr *target;
}
gfc_association_list;




enum gfc_exec_op
{
  EXEC_NOP = 1, EXEC_END_NESTED_BLOCK, EXEC_END_BLOCK, EXEC_ASSIGN,
  EXEC_LABEL_ASSIGN, EXEC_POINTER_ASSIGN, EXEC_CRITICAL, EXEC_ERROR_STOP,
  EXEC_GOTO, EXEC_CALL, EXEC_COMPCALL, EXEC_ASSIGN_CALL, EXEC_RETURN,
  EXEC_ENTRY, EXEC_PAUSE, EXEC_STOP, EXEC_CONTINUE, EXEC_INIT_ASSIGN,
  EXEC_IF, EXEC_ARITHMETIC_IF, EXEC_DO, EXEC_DO_CONCURRENT, EXEC_DO_WHILE,
  EXEC_SELECT, EXEC_BLOCK, EXEC_FORALL, EXEC_WHERE, EXEC_CYCLE, EXEC_EXIT,
  EXEC_CALL_PPC, EXEC_ALLOCATE, EXEC_DEALLOCATE, EXEC_END_PROCEDURE,
  EXEC_SELECT_TYPE, EXEC_SELECT_RANK, EXEC_SYNC_ALL, EXEC_SYNC_MEMORY,
  EXEC_SYNC_IMAGES, EXEC_OPEN, EXEC_CLOSE, EXEC_WAIT,
  EXEC_READ, EXEC_WRITE, EXEC_IOLENGTH, EXEC_TRANSFER, EXEC_DT_END,
  EXEC_BACKSPACE, EXEC_ENDFILE, EXEC_INQUIRE, EXEC_REWIND, EXEC_FLUSH,
  EXEC_FORM_TEAM, EXEC_CHANGE_TEAM, EXEC_END_TEAM, EXEC_SYNC_TEAM,
  EXEC_LOCK, EXEC_UNLOCK, EXEC_EVENT_POST, EXEC_EVENT_WAIT, EXEC_FAIL_IMAGE,
  EXEC_OACC_KERNELS_LOOP, EXEC_OACC_PARALLEL_LOOP, EXEC_OACC_SERIAL_LOOP,
  EXEC_OACC_ROUTINE, EXEC_OACC_PARALLEL, EXEC_OACC_KERNELS, EXEC_OACC_SERIAL,
  EXEC_OACC_DATA, EXEC_OACC_HOST_DATA, EXEC_OACC_LOOP, EXEC_OACC_UPDATE,
  EXEC_OACC_WAIT, EXEC_OACC_CACHE, EXEC_OACC_ENTER_DATA, EXEC_OACC_EXIT_DATA,
  EXEC_OACC_ATOMIC, EXEC_OACC_DECLARE,
  EXEC_OMP_CRITICAL, EXEC_OMP_DO, EXEC_OMP_FLUSH, EXEC_OMP_MASTER,
  EXEC_OMP_ORDERED, EXEC_OMP_PARALLEL, EXEC_OMP_PARALLEL_DO,
  EXEC_OMP_PARALLEL_SECTIONS, EXEC_OMP_PARALLEL_WORKSHARE,
  EXEC_OMP_SECTIONS, EXEC_OMP_SINGLE, EXEC_OMP_WORKSHARE,
  EXEC_OMP_ATOMIC, EXEC_OMP_BARRIER, EXEC_OMP_END_NOWAIT,
  EXEC_OMP_END_SINGLE, EXEC_OMP_TASK, EXEC_OMP_TASKWAIT,
  EXEC_OMP_TASKYIELD, EXEC_OMP_CANCEL, EXEC_OMP_CANCELLATION_POINT,
  EXEC_OMP_TASKGROUP, EXEC_OMP_SIMD, EXEC_OMP_DO_SIMD,
  EXEC_OMP_PARALLEL_DO_SIMD, EXEC_OMP_TARGET, EXEC_OMP_TARGET_DATA,
  EXEC_OMP_TEAMS, EXEC_OMP_DISTRIBUTE, EXEC_OMP_DISTRIBUTE_SIMD,
  EXEC_OMP_DISTRIBUTE_PARALLEL_DO, EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD,
  EXEC_OMP_TARGET_TEAMS, EXEC_OMP_TEAMS_DISTRIBUTE,
  EXEC_OMP_TEAMS_DISTRIBUTE_SIMD, EXEC_OMP_TARGET_TEAMS_DISTRIBUTE,
  EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD,
  EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO,
  EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO,
  EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,
  EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD,
  EXEC_OMP_TARGET_UPDATE, EXEC_OMP_END_CRITICAL,
  EXEC_OMP_TARGET_ENTER_DATA, EXEC_OMP_TARGET_EXIT_DATA,
  EXEC_OMP_TARGET_PARALLEL, EXEC_OMP_TARGET_PARALLEL_DO,
  EXEC_OMP_TARGET_PARALLEL_DO_SIMD, EXEC_OMP_TARGET_SIMD,
  EXEC_OMP_TASKLOOP, EXEC_OMP_TASKLOOP_SIMD
};

enum gfc_omp_atomic_op
{
  GFC_OMP_ATOMIC_UPDATE = 0,
  GFC_OMP_ATOMIC_READ = 1,
  GFC_OMP_ATOMIC_WRITE = 2,
  GFC_OMP_ATOMIC_CAPTURE = 3,
  GFC_OMP_ATOMIC_MASK = 3,
  GFC_OMP_ATOMIC_SEQ_CST = 4,
  GFC_OMP_ATOMIC_ACQ_REL = 8,
  GFC_OMP_ATOMIC_SWAP = 16
};

typedef struct gfc_code
{
  gfc_exec_op op;

  struct gfc_code *block, *next;
  locus loc;

  gfc_st_label *here, *label1, *label2, *label3;
  gfc_symtree *symtree;
  gfc_expr *expr1, *expr2, *expr3, *expr4;



  gfc_symbol *resolved_sym;
  gfc_intrinsic_sym *resolved_isym;

  union
  {
    gfc_actual_arglist *actual;
    gfc_iterator *iterator;

    struct
    {
      gfc_typespec ts;
      gfc_alloc *list;


      unsigned arr_spec_from_expr3:1;
    }
    alloc;

    struct
    {
      gfc_namespace *ns;
      gfc_association_list *assoc;
      gfc_case *case_list;
    }
    block;

    gfc_open *open;
    gfc_close *close;
    gfc_filepos *filepos;
    gfc_inquire *inquire;
    gfc_wait *wait;
    gfc_dt *dt;
    gfc_forall_iterator *forall_iterator;
    struct gfc_code *which_construct;
    int stop_code;
    gfc_entry_list *entry;
    gfc_oacc_declare *oacc_declare;
    gfc_omp_clauses *omp_clauses;
    const char *omp_name;
    gfc_omp_namelist *omp_namelist;
    bool omp_bool;
    gfc_omp_atomic_op omp_atomic;
  }
  ext;


  tree cycle_label;
  tree exit_label;
}
gfc_code;



typedef struct gfc_data_variable
{
  gfc_expr *expr;
  gfc_iterator iter;
  struct gfc_data_variable *list, *next;
}
gfc_data_variable;


typedef struct gfc_data_value
{
  mpz_t repeat;
  gfc_expr *expr;
  struct gfc_data_value *next;
}
gfc_data_value;


typedef struct gfc_data
{
  gfc_data_variable *var;
  gfc_data_value *value;
  locus where;

  struct gfc_data *next;
}
gfc_data;



typedef struct
{
  char *module_dir;
  gfc_source_form source_form;
  int max_continue_fixed;
  int max_continue_free;
  int max_identifier_length;

  int max_errors;

  int flag_preprocessed;
  int flag_d_lines;
  int flag_init_integer;
  long flag_init_integer_value;
  int flag_init_logical;
  int flag_init_character;
  char flag_init_character_value;

  int fpe;
  int fpe_summary;
  int rtcheck;

  int warn_std;
  int allow_std;
}
gfc_option_t;

extern gfc_option_t gfc_option;


typedef struct gfc_constructor
{
  gfc_constructor_base base;
  mpz_t offset;


  gfc_expr *expr;
  gfc_iterator *iterator;
  locus where;

  union
  {
     gfc_component *component;
  }
  n;
  mpz_t repeat;

}
gfc_constructor;


typedef struct iterator_stack
{
  gfc_symtree *variable;
  mpz_t value;
  struct iterator_stack *prev;
}
iterator_stack;
extern iterator_stack *iter_stack;



typedef struct gfc_select_type_stack
{
  gfc_symbol *selector;
  gfc_symtree *tmp;
  struct gfc_select_type_stack *prev;
}
gfc_select_type_stack;
extern gfc_select_type_stack *select_type_stack;





typedef struct gfc_finalizer
{
  struct gfc_finalizer* next;
  locus where;







  gfc_symbol* proc_sym;
  gfc_symtree* proc_tree;
}
gfc_finalizer;






bool gfc_in_match_data (void);
match gfc_match_char_spec (gfc_typespec *);
extern int directive_unroll;
extern bool directive_ivdep;
extern bool directive_vector;
extern bool directive_novector;


enum gfc_simd_clause
{
  SIMD_NONE = (1 << 0),
  SIMD_INBRANCH = (1 << 1),
  SIMD_NOTINBRANCH = (1 << 2)
};


struct gfc_vect_builtin_tuple
{
  gfc_vect_builtin_tuple (const char *n, gfc_simd_clause t)
    : name (n), simd_type (t) {}

  const char *name;
  gfc_simd_clause simd_type;
};


extern hash_map<nofree_string_hash, int> *gfc_vectorized_builtins;


bool gfc_insert_kind_parameter_exprs (gfc_expr *);
bool gfc_insert_parameter_exprs (gfc_expr *, gfc_actual_arglist *);
match gfc_get_pdt_instance (gfc_actual_arglist *, gfc_symbol **,
       gfc_actual_arglist **);
# 2909 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
void gfc_scanner_done_1 (void);
void gfc_scanner_init_1 (void);

void gfc_add_include_path (const char *, bool, bool, bool);
void gfc_add_intrinsic_modules_path (const char *);
void gfc_release_include_path (void);
FILE *gfc_open_included_file (const char *, bool, bool);

int gfc_at_end (void);
int gfc_at_eof (void);
int gfc_at_bol (void);
int gfc_at_eol (void);
void gfc_advance_line (void);
int gfc_check_include (void);
int gfc_define_undef_line (void);

int gfc_wide_is_printable (gfc_char_t);
int gfc_wide_is_digit (gfc_char_t);
int gfc_wide_fits_in_byte (gfc_char_t);
gfc_char_t gfc_wide_tolower (gfc_char_t);
gfc_char_t gfc_wide_toupper (gfc_char_t);
size_t gfc_wide_strlen (const gfc_char_t *);
int gfc_wide_strncasecmp (const gfc_char_t *, const char *, size_t);
gfc_char_t *gfc_wide_memset (gfc_char_t *, gfc_char_t, size_t);
char *gfc_widechar_to_char (const gfc_char_t *, int);
gfc_char_t *gfc_char_to_widechar (const char *);



void gfc_skip_comments (void);
gfc_char_t gfc_next_char_literal (gfc_instring);
gfc_char_t gfc_next_char (void);
char gfc_next_ascii_char (void);
gfc_char_t gfc_peek_char (void);
char gfc_peek_ascii_char (void);
void gfc_error_recovery (void);
void gfc_gobble_whitespace (void);
bool gfc_new_file (void);
const char * gfc_read_orig_filename (const char *, const char **);

extern gfc_source_form gfc_current_form;
extern const char *gfc_source_file;
extern locus gfc_current_locus;

void gfc_start_source_files (void);
void gfc_end_source_files (void);


void gfc_clear_ts (gfc_typespec *);
FILE *gfc_open_file (const char *);
const char *gfc_basic_typename (bt);
const char *gfc_dummy_typename (gfc_typespec *);
const char *gfc_typename (gfc_typespec *, bool for_hash = false);
const char *gfc_typename (gfc_expr *);
const char *gfc_op2string (gfc_intrinsic_op);
const char *gfc_code2string (const mstring *, int);
int gfc_string2code (const mstring *, const char *);
const char *gfc_intent_string (sym_intent);

void gfc_init_1 (void);
void gfc_init_2 (void);
void gfc_done_1 (void);
void gfc_done_2 (void);

int get_c_kind (const char *, CInteropKind_t *);

const char *gfc_closest_fuzzy_match (const char *, char **);
static inline void
vec_push (char **&optr, size_t &osz, const char *elt)
{


  optr = ((char * *) xrealloc ((void *) (optr), sizeof (char *) * (osz + 2)));
  optr[osz] = (const_cast<char *> ((elt)));
  optr[++osz] = 
# 2983 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 3 4
               __null
# 2983 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
                   ;
}

long gfc_mpz_get_hwi (mpz_t);
void gfc_mpz_set_hwi (mpz_t, const long);


unsigned int gfc_option_lang_mask (void);
void gfc_init_options_struct (struct gcc_options *);
void gfc_init_options (unsigned int,
         struct cl_decoded_option *);
bool gfc_handle_option (size_t, const char *, long, int, location_t,
   const struct cl_option_handlers *);
bool gfc_post_options (const char **);
char *gfc_get_option_string (void);


void gfc_maybe_initialize_eh (void);


const char * gfc_get_string (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
bool gfc_find_sym_in_expr (gfc_symbol *, gfc_expr *);


void gfc_error_init_1 (void);
void gfc_diagnostics_init (void);
void gfc_diagnostics_finish (void);
void gfc_buffer_error (bool);

const char *gfc_print_wide_char (gfc_char_t);

bool gfc_warning (int opt, const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 2, 3))) __attribute__ ((__nonnull__ (2)));
bool gfc_warning_now (int opt, const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 2, 3))) __attribute__ ((__nonnull__ (2)));
bool gfc_warning_internal (int opt, const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 2, 3))) __attribute__ ((__nonnull__ (2)));
bool gfc_warning_now_at (location_t loc, int opt, const char *gmsgid, ...)
  __attribute__ ((__format__ (__gcc_gfc__, 3, 4))) __attribute__ ((__nonnull__ (3)));

void gfc_clear_warning (void);
void gfc_warning_check (void);

void gfc_error_opt (int opt, const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 2, 3))) __attribute__ ((__nonnull__ (2)));
void gfc_error (const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 1, 2))) __attribute__ ((__nonnull__ (1)));
void gfc_error_now (const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 1, 2))) __attribute__ ((__nonnull__ (1)));
void gfc_fatal_error (const char *, ...) __attribute__ ((__noreturn__)) __attribute__ ((__format__ (__gcc_gfc__, 1, 2))) __attribute__ ((__nonnull__ (1)));
void gfc_internal_error (const char *, ...) __attribute__ ((__noreturn__)) __attribute__ ((__format__ (__gcc_gfc__, 1, 2))) __attribute__ ((__nonnull__ (1)));
void gfc_clear_error (void);
bool gfc_error_check (void);
bool gfc_error_flag_test (void);

notification gfc_notification_std (int);
bool gfc_notify_std (int, const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 2, 3))) __attribute__ ((__nonnull__ (2)));





# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-url.h" 1
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-url.h"
typedef enum
{
  DIAGNOSTICS_URL_NO = 0,
  DIAGNOSTICS_URL_YES = 1,
  DIAGNOSTICS_URL_AUTO = 2
} diagnostic_url_rule_t;



enum diagnostic_url_format
{

  URL_FORMAT_NONE,


  URL_FORMAT_ST,


  URL_FORMAT_BEL
};

const diagnostic_url_format URL_FORMAT_DEFAULT = URL_FORMAT_BEL;

extern diagnostic_url_format determine_url_format (diagnostic_url_rule_t);
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h" 2






struct text_info
{
  const char *format_spec;
  va_list *args_ptr;
  int err_no;
  void **x_data;
  rich_location *m_richloc;

  void set_location (unsigned int idx, location_t loc,
       enum range_display_kind range_display_kind);
  location_t get_location (unsigned int index_of_location) const;
};






enum diagnostic_prefixing_rule_t
{
  DIAGNOSTICS_SHOW_PREFIX_ONCE = 0x0,
  DIAGNOSTICS_SHOW_PREFIX_NEVER = 0x1,
  DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE = 0x2
};






struct chunk_info
{

  struct chunk_info *prev;







  const char *args[30 * 2];
};



class output_buffer
{
public:
  output_buffer ();
  ~output_buffer ();


  struct obstack formatted_obstack;



  struct obstack chunk_obstack;



  struct obstack *obstack;


  struct chunk_info *cur_chunk_array;


  FILE *stream;


  int line_length;



  char digit_buffer[128];




  bool flush_p;
};



static inline const char *
output_buffer_formatted_text (output_buffer *buff)
{
  __extension__ ({ struct obstack *__o = (buff->obstack); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < 1) _obstack_newchunk (__o, 1); ((void) (*((__o)->next_free)++ = ('\0'))); });
  return (const char *) ((void *) (buff->obstack)->object_base);
}



static inline void
output_buffer_append_r (output_buffer *buff, const char *start, int length)
{
  ((void)(!(start) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h", 128, __FUNCTION__), 0 : 0));
  __extension__ ({ struct obstack *__o = (buff->obstack); size_t __len = (length); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); memcpy (__o->next_free, start, __len); __o->next_free += __len; (void) 0; });
  for (int i = 0; i < length; i++)
    if (start[i] == '\n')
      buff->line_length = 0;
    else
      buff->line_length++;
}



static inline const char *
output_buffer_last_position_in_text (const output_buffer *buff)
{
  const char *p = 
# 142 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h" 3 4
                 __null
# 142 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
                     ;
  struct obstack *text = buff->obstack;

  if (((void *) (text)->object_base) != ((void *) (text)->next_free))
    p = ((const char *) ((void *) (text)->next_free)) - 1;
  return p;
}



typedef unsigned int pp_flags;

enum pp_padding
{
  pp_none, pp_before, pp_after
};



struct pp_wrapping_mode_t
{

  diagnostic_prefixing_rule_t rule;



  int line_cutoff;
};
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
typedef bool (*printer_fn) (pretty_printer *, text_info *, const char *,
       int, bool, bool, bool, bool *, const char **);






class format_postprocessor
{
 public:
  virtual ~format_postprocessor () {}
  virtual format_postprocessor *clone() const = 0;
  virtual void handle (pretty_printer *) = 0;
};
# 220 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
class pretty_printer
{
public:


  explicit pretty_printer (int = 0);
  explicit pretty_printer (const pretty_printer &other);

  virtual ~pretty_printer ();

  virtual pretty_printer *clone () const;


  output_buffer *buffer;



  char *prefix;


  pp_padding padding;



  int maximum_length;


  int indent_skip;


  pp_wrapping_mode_t wrapping;
# 261 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
  printer_fn format_decoder;





  format_postprocessor *m_format_postprocessor;


  bool emitted_prefix;


  bool need_newline;



  bool translate_identifiers;


  bool show_color;


  diagnostic_url_format url_format;
};

static inline const char *
pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }
# 353 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
extern void pp_set_line_maximum_length (pretty_printer *, int);
extern void pp_set_prefix (pretty_printer *, char *);
extern char *pp_take_prefix (pretty_printer *);
extern void pp_destroy_prefix (pretty_printer *);
extern int pp_remaining_character_count_for_line (pretty_printer *);
extern void pp_clear_output_area (pretty_printer *);
extern const char *pp_formatted_text (pretty_printer *);
extern const char *pp_last_position_in_text (const pretty_printer *);
extern void pp_emit_prefix (pretty_printer *);
extern void pp_append_text (pretty_printer *, const char *, const char *);
extern void pp_newline_and_flush (pretty_printer *);
extern void pp_newline_and_indent (pretty_printer *, int);
extern void pp_separate_with (pretty_printer *, char);
# 382 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
extern void pp_printf (pretty_printer *, const char *, ...)
     __attribute__ ((__format__ (__gcc_gfc__, 2 ,3))) __attribute__ ((__nonnull__ (2)));

extern void pp_verbatim (pretty_printer *, const char *, ...)
     __attribute__ ((__format__ (__gcc_gfc__, 2 ,3))) __attribute__ ((__nonnull__ (2)));
extern void pp_flush (pretty_printer *);
extern void pp_really_flush (pretty_printer *);
extern void pp_format (pretty_printer *, text_info *);
extern void pp_output_formatted_text (pretty_printer *);
extern void pp_format_verbatim (pretty_printer *, text_info *);

extern void pp_indent (pretty_printer *);
extern void pp_newline (pretty_printer *);
extern void pp_character (pretty_printer *, int);
extern void pp_string (pretty_printer *, const char *);

extern void pp_write_text_to_stream (pretty_printer *);
extern void pp_write_text_as_dot_label_to_stream (pretty_printer *, bool);
extern void pp_write_text_as_html_like_dot_to_stream (pretty_printer *pp);

extern void pp_maybe_space (pretty_printer *);

extern void pp_begin_quote (pretty_printer *, bool);
extern void pp_end_quote (pretty_printer *, bool);

extern void pp_begin_url (pretty_printer *pp, const char *url);
extern void pp_end_url (pretty_printer *pp);


static inline pp_wrapping_mode_t
pp_set_verbatim_wrapping_ (pretty_printer *pp)
{
  pp_wrapping_mode_t oldmode = (pp)->wrapping;
  (pp)->wrapping.line_cutoff = 0;
  (pp)->wrapping.rule = DIAGNOSTICS_SHOW_PREFIX_NEVER;
  return oldmode;
}


extern const char *identifier_to_locale (const char *);
extern void *(*identifier_to_locale_alloc) (size_t);
extern void (*identifier_to_locale_free) (void *);



inline void
pp_wide_integer (pretty_printer *pp, long i)
{
  do { sprintf ((pp)->buffer->digit_buffer, "%" 
# 430 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h" 3 4
 "l" "d"
# 430 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
 , i); pp_string (pp, (pp)->buffer->digit_buffer); } while (0);
}

template<unsigned int N, typename T>
void pp_wide_integer (pretty_printer *pp, const poly_int_pod<N, T> &);
# 3040 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 2
struct gfc_error_buffer
{
  bool flag;
  output_buffer buffer;
  gfc_error_buffer(void) : flag(false), buffer() {}
};

void gfc_push_error (gfc_error_buffer *);
void gfc_pop_error (gfc_error_buffer *);
void gfc_free_error (gfc_error_buffer *);

void gfc_get_errors (int *, int *);
void gfc_errors_to_warnings (bool);


void gfc_arith_init_1 (void);
void gfc_arith_done_1 (void);
arith gfc_check_integer_range (mpz_t p, int kind);
bool gfc_check_character_range (gfc_char_t, int);

extern bool gfc_seen_div0;


bool gfc_check_any_c_kind (gfc_typespec *);
int gfc_validate_kind (bt, int, bool);
int gfc_get_int_kind_from_width_isofortranenv (int size);
int gfc_get_real_kind_from_width_isofortranenv (int size);
tree gfc_get_union_type (gfc_symbol *);
tree gfc_get_derived_type (gfc_symbol * derived, int codimen = 0);
extern int gfc_index_integer_kind;
extern int gfc_default_integer_kind;
extern int gfc_max_integer_kind;
extern int gfc_default_real_kind;
extern int gfc_default_double_kind;
extern int gfc_default_character_kind;
extern int gfc_default_logical_kind;
extern int gfc_default_complex_kind;
extern int gfc_c_int_kind;
extern int gfc_atomic_int_kind;
extern int gfc_atomic_logical_kind;
extern int gfc_intio_kind;
extern int gfc_charlen_int_kind;
extern int gfc_size_kind;
extern int gfc_numeric_storage_size;
extern int gfc_character_storage_size;






void gfc_clear_new_implicit (void);
bool gfc_add_new_implicit_range (int, int);
bool gfc_merge_new_implicit (gfc_typespec *);
void gfc_set_implicit_none (bool, bool, locus *);
void gfc_check_function_type (gfc_namespace *);
bool gfc_is_intrinsic_typename (const char *);
bool gfc_check_conflict (symbol_attribute *, const char *, locus *);

gfc_typespec *gfc_get_default_type (const char *, gfc_namespace *);
bool gfc_set_default_type (gfc_symbol *, int, gfc_namespace *);

void gfc_set_sym_referenced (gfc_symbol *);

bool gfc_add_attribute (symbol_attribute *, locus *);
bool gfc_add_ext_attribute (symbol_attribute *, ext_attr_id_t, locus *);
bool gfc_add_allocatable (symbol_attribute *, locus *);
bool gfc_add_codimension (symbol_attribute *, const char *, locus *);
bool gfc_add_contiguous (symbol_attribute *, const char *, locus *);
bool gfc_add_dimension (symbol_attribute *, const char *, locus *);
bool gfc_add_external (symbol_attribute *, locus *);
bool gfc_add_intrinsic (symbol_attribute *, locus *);
bool gfc_add_optional (symbol_attribute *, locus *);
bool gfc_add_kind (symbol_attribute *, locus *);
bool gfc_add_len (symbol_attribute *, locus *);
bool gfc_add_pointer (symbol_attribute *, locus *);
bool gfc_add_cray_pointer (symbol_attribute *, locus *);
bool gfc_add_cray_pointee (symbol_attribute *, locus *);
match gfc_mod_pointee_as (gfc_array_spec *);
bool gfc_add_protected (symbol_attribute *, const char *, locus *);
bool gfc_add_result (symbol_attribute *, const char *, locus *);
bool gfc_add_automatic (symbol_attribute *, const char *, locus *);
bool gfc_add_save (symbol_attribute *, save_state, const char *, locus *);
bool gfc_add_threadprivate (symbol_attribute *, const char *, locus *);
bool gfc_add_omp_declare_target (symbol_attribute *, const char *, locus *);
bool gfc_add_omp_declare_target_link (symbol_attribute *, const char *,
          locus *);
bool gfc_add_saved_common (symbol_attribute *, locus *);
bool gfc_add_target (symbol_attribute *, locus *);
bool gfc_add_dummy (symbol_attribute *, const char *, locus *);
bool gfc_add_generic (symbol_attribute *, const char *, locus *);
bool gfc_add_common (symbol_attribute *, locus *);
bool gfc_add_in_common (symbol_attribute *, const char *, locus *);
bool gfc_add_in_equivalence (symbol_attribute *, const char *, locus *);
bool gfc_add_data (symbol_attribute *, const char *, locus *);
bool gfc_add_in_namelist (symbol_attribute *, const char *, locus *);
bool gfc_add_sequence (symbol_attribute *, const char *, locus *);
bool gfc_add_elemental (symbol_attribute *, locus *);
bool gfc_add_pure (symbol_attribute *, locus *);
bool gfc_add_recursive (symbol_attribute *, locus *);
bool gfc_add_function (symbol_attribute *, const char *, locus *);
bool gfc_add_subroutine (symbol_attribute *, const char *, locus *);
bool gfc_add_volatile (symbol_attribute *, const char *, locus *);
bool gfc_add_asynchronous (symbol_attribute *, const char *, locus *);
bool gfc_add_proc (symbol_attribute *attr, const char *name, locus *where);
bool gfc_add_abstract (symbol_attribute* attr, locus* where);

bool gfc_add_access (symbol_attribute *, gfc_access, const char *, locus *);
bool gfc_add_is_bind_c (symbol_attribute *, const char *, locus *, int);
bool gfc_add_extension (symbol_attribute *, locus *);
bool gfc_add_value (symbol_attribute *, const char *, locus *);
bool gfc_add_flavor (symbol_attribute *, sym_flavor, const char *, locus *);
bool gfc_add_entry (symbol_attribute *, const char *, locus *);
bool gfc_add_procedure (symbol_attribute *, procedure_type,
         const char *, locus *);
bool gfc_add_intent (symbol_attribute *, sym_intent, locus *);
bool gfc_add_explicit_interface (gfc_symbol *, ifsrc,
    gfc_formal_arglist *, locus *);
bool gfc_add_type (gfc_symbol *, gfc_typespec *, locus *);

void gfc_clear_attr (symbol_attribute *);
bool gfc_missing_attr (symbol_attribute *, locus *);
bool gfc_copy_attr (symbol_attribute *, symbol_attribute *, locus *);
int gfc_copy_dummy_sym (gfc_symbol **, gfc_symbol *, int);
bool gfc_add_component (gfc_symbol *, const char *, gfc_component **);
gfc_symbol *gfc_use_derived (gfc_symbol *);
gfc_symtree *gfc_use_derived_tree (gfc_symtree *);
gfc_component *gfc_find_component (gfc_symbol *, const char *, bool, bool,
                                   gfc_ref **);

gfc_st_label *gfc_get_st_label (int);
void gfc_free_st_label (gfc_st_label *);
void gfc_define_st_label (gfc_st_label *, gfc_sl_type, locus *);
bool gfc_reference_st_label (gfc_st_label *, gfc_sl_type);

gfc_namespace *gfc_get_namespace (gfc_namespace *, int);
gfc_symtree *gfc_new_symtree (gfc_symtree **, const char *);
gfc_symtree *gfc_find_symtree (gfc_symtree *, const char *);
void gfc_delete_symtree (gfc_symtree **, const char *);
gfc_symtree *gfc_get_unique_symtree (gfc_namespace *);
gfc_user_op *gfc_get_uop (const char *);
gfc_user_op *gfc_find_uop (const char *, gfc_namespace *);
void gfc_free_symbol (gfc_symbol *);
void gfc_release_symbol (gfc_symbol *);
gfc_symbol *gfc_new_symbol (const char *, gfc_namespace *);
gfc_symtree* gfc_find_symtree_in_proc (const char *, gfc_namespace *);
int gfc_find_symbol (const char *, gfc_namespace *, int, gfc_symbol **);
int gfc_find_sym_tree (const char *, gfc_namespace *, int, gfc_symtree **);
int gfc_get_symbol (const char *, gfc_namespace *, gfc_symbol **);
bool gfc_verify_c_interop (gfc_typespec *);
bool gfc_verify_c_interop_param (gfc_symbol *);
bool verify_bind_c_sym (gfc_symbol *, gfc_typespec *, int, gfc_common_head *);
bool verify_bind_c_derived_type (gfc_symbol *);
bool verify_com_block_vars_c_interop (gfc_common_head *);
gfc_symtree *generate_isocbinding_symbol (const char *, iso_c_binding_symbol,
       const char *, gfc_symtree *, bool);
void gfc_save_symbol_data (gfc_symbol *);
int gfc_get_sym_tree (const char *, gfc_namespace *, gfc_symtree **, bool);
int gfc_get_ha_symbol (const char *, gfc_symbol **);
int gfc_get_ha_sym_tree (const char *, gfc_symtree **);

void gfc_drop_last_undo_checkpoint (void);
void gfc_restore_last_undo_checkpoint (void);
void gfc_undo_symbols (void);
void gfc_commit_symbols (void);
void gfc_commit_symbol (gfc_symbol *);
gfc_charlen *gfc_new_charlen (gfc_namespace *, gfc_charlen *);
void gfc_free_charlen (gfc_charlen *, gfc_charlen *);
void gfc_free_namespace (gfc_namespace *);

void gfc_symbol_init_2 (void);
void gfc_symbol_done_2 (void);

void gfc_traverse_symtree (gfc_symtree *, void (*)(gfc_symtree *));
void gfc_traverse_ns (gfc_namespace *, void (*)(gfc_symbol *));
void gfc_traverse_user_op (gfc_namespace *, void (*)(gfc_user_op *));
void gfc_save_all (gfc_namespace *);

void gfc_enforce_clean_symbol_state (void);

gfc_gsymbol *gfc_get_gsymbol (const char *, bool bind_c);
gfc_gsymbol *gfc_find_gsymbol (gfc_gsymbol *, const char *);
gfc_gsymbol *gfc_find_case_gsymbol (gfc_gsymbol *, const char *);
void gfc_traverse_gsymbol (gfc_gsymbol *, void (*)(gfc_gsymbol *, void *), void *);

gfc_typebound_proc* gfc_get_typebound_proc (gfc_typebound_proc*);
gfc_symbol* gfc_get_derived_super_type (gfc_symbol*);
gfc_symbol* gfc_get_ultimate_derived_super_type (gfc_symbol*);
bool gfc_type_is_extension_of (gfc_symbol *, gfc_symbol *);
bool gfc_type_compatible (gfc_typespec *, gfc_typespec *);

void gfc_copy_formal_args_intr (gfc_symbol *, gfc_intrinsic_sym *,
    gfc_actual_arglist *);

void gfc_free_finalizer (gfc_finalizer *el);

bool gfc_check_symbol_typed (gfc_symbol*, gfc_namespace*, bool, locus);
gfc_namespace* gfc_find_proc_namespace (gfc_namespace*);

bool gfc_is_associate_pointer (gfc_symbol*);
gfc_symbol * gfc_find_dt_in_generic (gfc_symbol *);
gfc_formal_arglist *gfc_sym_get_dummy_args (gfc_symbol *);


extern bool gfc_init_expr_flag;







void gfc_intrinsic_init_1 (void);
void gfc_intrinsic_done_1 (void);

char gfc_type_letter (bt, bool logical_equals_int = false);
gfc_symbol * gfc_get_intrinsic_sub_symbol (const char *);
bool gfc_convert_type (gfc_expr *, gfc_typespec *, int);
bool gfc_convert_type_warn (gfc_expr *, gfc_typespec *, int, int,
       bool array = false);
bool gfc_convert_chartype (gfc_expr *, gfc_typespec *);
int gfc_generic_intrinsic (const char *);
int gfc_specific_intrinsic (const char *);
bool gfc_is_intrinsic (gfc_symbol*, int, locus);
int gfc_intrinsic_actual_ok (const char *, const bool);
gfc_intrinsic_sym *gfc_find_function (const char *);
gfc_intrinsic_sym *gfc_find_subroutine (const char *);
gfc_intrinsic_sym *gfc_intrinsic_function_by_id (gfc_isym_id);
gfc_intrinsic_sym *gfc_intrinsic_subroutine_by_id (gfc_isym_id);
gfc_isym_id gfc_isym_id_by_intmod (intmod_id, int);
gfc_isym_id gfc_isym_id_by_intmod_sym (gfc_symbol *);


match gfc_intrinsic_func_interface (gfc_expr *, int);
match gfc_intrinsic_sub_interface (gfc_code *, int);

void gfc_warn_intrinsic_shadow (const gfc_symbol*, bool, bool);
bool gfc_check_intrinsic_standard (const gfc_intrinsic_sym*, const char**,
          bool, locus);


void gfc_free_iterator (gfc_iterator *, int);
void gfc_free_forall_iterator (gfc_forall_iterator *);
void gfc_free_alloc_list (gfc_alloc *);
void gfc_free_namelist (gfc_namelist *);
void gfc_free_omp_namelist (gfc_omp_namelist *);
void gfc_free_equiv (gfc_equiv *);
void gfc_free_equiv_until (gfc_equiv *, gfc_equiv *);
void gfc_free_data (gfc_data *);
void gfc_reject_data (gfc_namespace *);
void gfc_free_case_list (gfc_case *);


gfc_expr *gfc_get_parentheses (gfc_expr *);


struct gfc_omp_saved_state { void *ptrs[2]; int ints[1]; };
bool gfc_omp_requires_add_clause (gfc_omp_requires_kind, const char *,
      locus *, const char *);
void gfc_check_omp_requires (gfc_namespace *, int);
void gfc_free_omp_clauses (gfc_omp_clauses *);
void gfc_free_oacc_declare_clauses (struct gfc_oacc_declare *);
void gfc_free_omp_declare_simd (gfc_omp_declare_simd *);
void gfc_free_omp_declare_simd_list (gfc_omp_declare_simd *);
void gfc_free_omp_udr (gfc_omp_udr *);
gfc_omp_udr *gfc_omp_udr_find (gfc_symtree *, gfc_typespec *);
void gfc_resolve_omp_directive (gfc_code *, gfc_namespace *);
void gfc_resolve_do_iterator (gfc_code *, gfc_symbol *, bool);
void gfc_resolve_omp_local_vars (gfc_namespace *);
void gfc_resolve_omp_parallel_blocks (gfc_code *, gfc_namespace *);
void gfc_resolve_omp_do_blocks (gfc_code *, gfc_namespace *);
void gfc_resolve_omp_declare_simd (gfc_namespace *);
void gfc_resolve_omp_udrs (gfc_symtree *);
void gfc_omp_save_and_clear_state (struct gfc_omp_saved_state *);
void gfc_omp_restore_state (struct gfc_omp_saved_state *);
void gfc_free_expr_list (gfc_expr_list *);
void gfc_resolve_oacc_directive (gfc_code *, gfc_namespace *);
void gfc_resolve_oacc_declare (gfc_namespace *);
void gfc_resolve_oacc_parallel_loop_blocks (gfc_code *, gfc_namespace *);
void gfc_resolve_oacc_blocks (gfc_code *, gfc_namespace *);
void gfc_resolve_oacc_routines (gfc_namespace *);


void gfc_free_actual_arglist (gfc_actual_arglist *);
gfc_actual_arglist *gfc_copy_actual_arglist (gfc_actual_arglist *);

bool gfc_extract_int (gfc_expr *, int *, int = 0);
bool gfc_extract_hwi (gfc_expr *, long *, int = 0);

bool is_CFI_desc (gfc_symbol *, gfc_expr *);
bool is_subref_array (gfc_expr *);
bool gfc_is_simply_contiguous (gfc_expr *, bool, bool);
bool gfc_is_not_contiguous (gfc_expr *);
bool gfc_check_init_expr (gfc_expr *);

gfc_expr *gfc_build_conversion (gfc_expr *);
void gfc_free_ref_list (gfc_ref *);
void gfc_type_convert_binary (gfc_expr *, int);
bool gfc_is_constant_expr (gfc_expr *);
bool gfc_simplify_expr (gfc_expr *, int);
int gfc_has_vector_index (gfc_expr *);

gfc_expr *gfc_get_expr (void);
gfc_expr *gfc_get_array_expr (bt type, int kind, locus *);
gfc_expr *gfc_get_null_expr (locus *);
gfc_expr *gfc_get_operator_expr (locus *, gfc_intrinsic_op,gfc_expr *, gfc_expr *);
gfc_expr *gfc_get_structure_constructor_expr (bt, int, locus *);
gfc_expr *gfc_get_constant_expr (bt, int, locus *);
gfc_expr *gfc_get_character_expr (int, locus *, const char *, gfc_charlen_t len);
gfc_expr *gfc_get_int_expr (int, locus *, long);
gfc_expr *gfc_get_logical_expr (int, locus *, bool);
gfc_expr *gfc_get_iokind_expr (locus *, io_kind);

void gfc_clear_shape (mpz_t *shape, int rank);
void gfc_free_shape (mpz_t **shape, int rank);
void gfc_free_expr (gfc_expr *);
void gfc_replace_expr (gfc_expr *, gfc_expr *);
mpz_t *gfc_copy_shape (mpz_t *, int);
mpz_t *gfc_copy_shape_excluding (mpz_t *, int, gfc_expr *);
gfc_expr *gfc_copy_expr (gfc_expr *);
gfc_ref* gfc_copy_ref (gfc_ref*);

bool gfc_specification_expr (gfc_expr *);

int gfc_numeric_ts (gfc_typespec *);
int gfc_kind_max (gfc_expr *, gfc_expr *);

bool gfc_check_conformance (gfc_expr *, gfc_expr *, const char *, ...) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
bool gfc_check_assign (gfc_expr *, gfc_expr *, int, bool c = true);
bool gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,
          bool suppres_type_test = false,
          bool is_init_expr = false);
bool gfc_check_assign_symbol (gfc_symbol *, gfc_component *, gfc_expr *);

gfc_expr *gfc_build_default_init_expr (gfc_typespec *, locus *);
gfc_expr *gfc_build_init_expr (gfc_typespec *, locus *, bool);
void gfc_apply_init (gfc_typespec *, symbol_attribute *, gfc_expr *);
bool gfc_has_default_initializer (gfc_symbol *);
gfc_expr *gfc_default_initializer (gfc_typespec *);
gfc_expr *gfc_generate_initializer (gfc_typespec *, bool);
gfc_expr *gfc_get_variable_expr (gfc_symtree *);
void gfc_add_full_array_ref (gfc_expr *, gfc_array_spec *);
gfc_expr * gfc_lval_expr_from_sym (gfc_symbol *);

gfc_array_spec *gfc_get_full_arrayspec_from_expr (gfc_expr *expr);

bool gfc_traverse_expr (gfc_expr *, gfc_symbol *,
   bool (*)(gfc_expr *, gfc_symbol *, int*),
   int);
void gfc_expr_set_symbols_referenced (gfc_expr *);
bool gfc_expr_check_typed (gfc_expr*, gfc_namespace*, bool);
bool gfc_derived_parameter_expr (gfc_expr *);
gfc_param_spec_type gfc_spec_list_type (gfc_actual_arglist *, gfc_symbol *);
gfc_component * gfc_get_proc_ptr_comp (gfc_expr *);
bool gfc_is_proc_ptr_comp (gfc_expr *);
bool gfc_is_alloc_class_scalar_function (gfc_expr *);
bool gfc_is_class_array_function (gfc_expr *);

bool gfc_ref_this_image (gfc_ref *ref);
bool gfc_is_coindexed (gfc_expr *);
bool gfc_is_coarray (gfc_expr *);
int gfc_get_corank (gfc_expr *);
bool gfc_has_ultimate_allocatable (gfc_expr *);
bool gfc_has_ultimate_pointer (gfc_expr *);
gfc_expr* gfc_find_team_co (gfc_expr *);
gfc_expr* gfc_find_stat_co (gfc_expr *);
gfc_expr* gfc_build_intrinsic_call (gfc_namespace *, gfc_isym_id, const char*,
        locus, unsigned, ...);
bool gfc_check_vardef_context (gfc_expr*, bool, bool, bool, const char*);



extern gfc_code new_st;

void gfc_clear_new_st (void);
gfc_code *gfc_get_code (gfc_exec_op);
gfc_code *gfc_append_code (gfc_code *, gfc_code *);
void gfc_free_statement (gfc_code *);
void gfc_free_statements (gfc_code *);
void gfc_free_association_list (gfc_association_list *);


void gfc_expression_rank (gfc_expr *);
bool gfc_resolve_ref (gfc_expr *);
bool gfc_resolve_expr (gfc_expr *);
void gfc_resolve (gfc_namespace *);
void gfc_resolve_code (gfc_code *, gfc_namespace *);
void gfc_resolve_blocks (gfc_code *, gfc_namespace *);
void gfc_resolve_formal_arglist (gfc_symbol *);
int gfc_impure_variable (gfc_symbol *);
int gfc_pure (gfc_symbol *);
int gfc_implicit_pure (gfc_symbol *);
void gfc_unset_implicit_pure (gfc_symbol *);
int gfc_elemental (gfc_symbol *);
bool gfc_resolve_iterator (gfc_iterator *, bool, bool);
bool find_forall_index (gfc_expr *, gfc_symbol *, int);
bool gfc_resolve_index (gfc_expr *, int);
bool gfc_resolve_dim_arg (gfc_expr *);
bool gfc_is_formal_arg (void);
void gfc_resolve_substring_charlen (gfc_expr *);
match gfc_iso_c_sub_interface(gfc_code *, gfc_symbol *);
gfc_expr *gfc_expr_to_initialize (gfc_expr *);
bool gfc_type_is_extensible (gfc_symbol *);
bool gfc_resolve_intrinsic (gfc_symbol *, locus *);
bool gfc_explicit_interface_required (gfc_symbol *, char *, int);
extern int gfc_do_concurrent_flag;
const char* gfc_lookup_function_fuzzy (const char *, gfc_symtree *);
int gfc_pure_function (gfc_expr *e, const char **name);
int gfc_implicit_pure_function (gfc_expr *e);



gfc_iterator *gfc_copy_iterator (gfc_iterator *);

void gfc_free_array_spec (gfc_array_spec *);
gfc_array_ref *gfc_copy_array_ref (gfc_array_ref *);

bool gfc_set_array_spec (gfc_symbol *, gfc_array_spec *, locus *);
gfc_array_spec *gfc_copy_array_spec (gfc_array_spec *);
bool gfc_resolve_array_spec (gfc_array_spec *, int);

int gfc_compare_array_spec (gfc_array_spec *, gfc_array_spec *);

void gfc_simplify_iterator_var (gfc_expr *);
bool gfc_expand_constructor (gfc_expr *, bool);
int gfc_constant_ac (gfc_expr *);
int gfc_expanded_ac (gfc_expr *);
bool gfc_resolve_character_array_constructor (gfc_expr *);
bool gfc_resolve_array_constructor (gfc_expr *);
bool gfc_check_constructor_type (gfc_expr *);
bool gfc_check_iter_variable (gfc_expr *);
bool gfc_check_constructor (gfc_expr *, bool (*)(gfc_expr *));
bool gfc_array_size (gfc_expr *, mpz_t *);
bool gfc_array_dimen_size (gfc_expr *, int, mpz_t *);
bool gfc_array_ref_shape (gfc_array_ref *, mpz_t *);
gfc_array_ref *gfc_find_array_ref (gfc_expr *, bool a = false);
tree gfc_conv_array_initializer (tree type, gfc_expr *);
bool spec_size (gfc_array_spec *, mpz_t *);
bool spec_dimen_size (gfc_array_spec *, int, mpz_t *);
bool gfc_is_compile_time_shape (gfc_array_spec *);

bool gfc_ref_dimen_size (gfc_array_ref *, int dimen, mpz_t *, mpz_t *);






void gfc_free_interface (gfc_interface *);
bool gfc_compare_derived_types (gfc_symbol *, gfc_symbol *);
bool gfc_compare_types (gfc_typespec *, gfc_typespec *);
bool gfc_check_dummy_characteristics (gfc_symbol *, gfc_symbol *,
          bool, char *, int);
bool gfc_check_result_characteristics (gfc_symbol *, gfc_symbol *,
           char *, int);
bool gfc_compare_interfaces (gfc_symbol*, gfc_symbol*, const char *, int, int,
        char *, int, const char *, const char *,
        bool *bad_result_characteristics = 
# 3497 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 3 4
                                          __null
# 3497 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
                                              );
void gfc_check_interfaces (gfc_namespace *);
bool gfc_procedure_use (gfc_symbol *, gfc_actual_arglist **, locus *);
void gfc_ppc_use (gfc_component *, gfc_actual_arglist **, locus *);
gfc_symbol *gfc_search_interface (gfc_interface *, int,
      gfc_actual_arglist **);
match gfc_extend_expr (gfc_expr *);
void gfc_free_formal_arglist (gfc_formal_arglist *);
bool gfc_extend_assign (gfc_code *, gfc_namespace *);
bool gfc_check_new_interface (gfc_interface *, gfc_symbol *, locus);
bool gfc_add_interface (gfc_symbol *);
gfc_interface *gfc_current_interface_head (void);
void gfc_set_current_interface_head (gfc_interface *);
gfc_symtree* gfc_find_sym_in_symtree (gfc_symbol*);
bool gfc_arglist_matches_symbol (gfc_actual_arglist**, gfc_symbol*);
bool gfc_check_operator_interface (gfc_symbol*, gfc_intrinsic_op, locus);
bool gfc_has_vector_subscript (gfc_expr*);
gfc_intrinsic_op gfc_equivalent_op (gfc_intrinsic_op);
bool gfc_check_typebound_override (gfc_symtree*, gfc_symtree*);
void gfc_check_dtio_interfaces (gfc_symbol*);
gfc_symtree* gfc_find_typebound_dtio_proc (gfc_symbol *, bool, bool);
gfc_symbol* gfc_find_specific_dtio_proc (gfc_symbol*, bool, bool);
void gfc_get_formal_from_actual_arglist (gfc_symbol *, gfc_actual_arglist *);
bool gfc_compare_actual_formal (gfc_actual_arglist **, gfc_formal_arglist *,
    int, int, bool, locus *);



extern gfc_st_label format_asterisk;

void gfc_free_open (gfc_open *);
bool gfc_resolve_open (gfc_open *, locus *);
void gfc_free_close (gfc_close *);
bool gfc_resolve_close (gfc_close *, locus *);
void gfc_free_filepos (gfc_filepos *);
bool gfc_resolve_filepos (gfc_filepos *, locus *);
void gfc_free_inquire (gfc_inquire *);
bool gfc_resolve_inquire (gfc_inquire *);
void gfc_free_dt (gfc_dt *);
bool gfc_resolve_dt (gfc_code *, gfc_dt *, locus *);
void gfc_free_wait (gfc_wait *);
bool gfc_resolve_wait (gfc_wait *);


void gfc_module_init_2 (void);
void gfc_module_done_2 (void);
void gfc_dump_module (const char *, int);
bool gfc_check_symbol_access (gfc_symbol *);
void gfc_free_use_stmts (gfc_use_list *);
const char *gfc_dt_lower_string (const char *);
const char *gfc_dt_upper_string (const char *);


symbol_attribute gfc_variable_attr (gfc_expr *, gfc_typespec *);
symbol_attribute gfc_expr_attr (gfc_expr *);
symbol_attribute gfc_caf_attr (gfc_expr *, bool i = false, bool *r = 
# 3552 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h" 3 4
                                                                    __null
# 3552 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
                                                                        );
match gfc_match_rvalue (gfc_expr **);
match gfc_match_varspec (gfc_expr*, int, bool, bool);
int gfc_check_digit (char, int);
bool gfc_is_function_return_value (gfc_symbol *, gfc_namespace *);
bool gfc_convert_to_structure_constructor (gfc_expr *, gfc_symbol *,
           gfc_expr **,
           gfc_actual_arglist **, bool);


void gfc_generate_code (gfc_namespace *);
void gfc_generate_module_code (gfc_namespace *);


bool gfc_inline_intrinsic_function_p (gfc_expr *);


typedef int (*compare_fn) (void *, void *);
void gfc_insert_bbt (void *, void *, compare_fn);
void gfc_delete_bbt (void *, void *, compare_fn);


void gfc_dump_parse_tree (gfc_namespace *, FILE *);
void gfc_dump_c_prototypes (gfc_namespace *, FILE *);
void gfc_dump_external_c_prototypes (FILE *);
void gfc_dump_global_symbols (FILE *);
void debug (gfc_symbol *);
void debug (gfc_expr *);


bool gfc_parse_file (void);
void gfc_global_used (gfc_gsymbol *, locus *);
gfc_namespace* gfc_build_block_ns (gfc_namespace *);


int gfc_dep_compare_functions (gfc_expr *, gfc_expr *, bool);
int gfc_dep_compare_expr (gfc_expr *, gfc_expr *);
bool gfc_dep_difference (gfc_expr *, gfc_expr *, mpz_t *);


bool gfc_check_same_strlen (const gfc_expr*, const gfc_expr*, const char*);
bool gfc_calculate_transfer_sizes (gfc_expr*, gfc_expr*, gfc_expr*,
          size_t*, size_t*, size_t*);
bool gfc_boz2int (gfc_expr *, int);
bool gfc_boz2real (gfc_expr *, int);
bool gfc_invalid_boz (const char *, locus *);
bool gfc_invalid_null_arg (gfc_expr *);



void gfc_fix_class_refs (gfc_expr *e);
void gfc_add_component_ref (gfc_expr *, const char *);
void gfc_add_class_array_ref (gfc_expr *);







bool gfc_is_class_array_ref (gfc_expr *, bool *);
bool gfc_is_class_scalar_expr (gfc_expr *);
bool gfc_is_class_container_ref (gfc_expr *e);
gfc_expr *gfc_class_initializer (gfc_typespec *, gfc_expr *);
unsigned int gfc_hash_value (gfc_symbol *);
gfc_expr *gfc_get_len_component (gfc_expr *e, int);
bool gfc_build_class_symbol (gfc_typespec *, symbol_attribute *,
        gfc_array_spec **);
gfc_symbol *gfc_find_derived_vtab (gfc_symbol *);
gfc_symbol *gfc_find_vtab (gfc_typespec *);
gfc_symtree* gfc_find_typebound_proc (gfc_symbol*, bool*,
          const char*, bool, locus*);
gfc_symtree* gfc_find_typebound_user_op (gfc_symbol*, bool*,
      const char*, bool, locus*);
gfc_typebound_proc* gfc_find_typebound_intrinsic_op (gfc_symbol*, bool*,
           gfc_intrinsic_op, bool,
           locus*);
gfc_symtree* gfc_get_tbp_symtree (gfc_symtree**, const char*);
bool gfc_is_finalizable (gfc_symbol *, gfc_expr **);
# 3646 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/gfortran.h"
void gfc_run_passes (gfc_namespace *);

typedef int (*walk_code_fn_t) (gfc_code **, int *, void *);
typedef int (*walk_expr_fn_t) (gfc_expr **, int *, void *);

int gfc_dummy_code_callback (gfc_code **, int *, void *);
int gfc_expr_walker (gfc_expr **, walk_expr_fn_t, void *);
int gfc_code_walker (gfc_code **, walk_code_fn_t, walk_expr_fn_t, void *);
bool gfc_has_dimen_vector_ref (gfc_expr *e);
void gfc_check_externals (gfc_namespace *);
bool gfc_fix_implicit_pure (gfc_namespace *);



void gfc_convert_mpz_to_signed (mpz_t, int);
gfc_expr *gfc_simplify_ieee_functions (gfc_expr *);
bool gfc_is_size_zero_array (gfc_expr *);



bool gfc_is_reallocatable_lhs (gfc_expr *);



void finish_oacc_declare (gfc_namespace *, gfc_symbol *, bool);
void gfc_adjust_builtins (void);
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/arith.h" 1
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/arith.h"
void gfc_mpfr_to_mpz (mpz_t, mpfr_t, locus *);
void gfc_set_model_kind (int);
void gfc_set_model (mpfr_t);



arith gfc_range_check (gfc_expr *);

int gfc_compare_expr (gfc_expr *, gfc_expr *, gfc_intrinsic_op);
int gfc_compare_string (gfc_expr *, gfc_expr *);
int gfc_compare_with_Cstring (gfc_expr *, const char *, bool);



gfc_expr *gfc_parentheses (gfc_expr * op);
gfc_expr *gfc_uplus (gfc_expr * op);
gfc_expr *gfc_uminus (gfc_expr * op);
gfc_expr *gfc_add (gfc_expr *, gfc_expr *);
gfc_expr *gfc_subtract (gfc_expr *, gfc_expr *);
gfc_expr *gfc_multiply (gfc_expr *, gfc_expr *);
gfc_expr *gfc_divide (gfc_expr *, gfc_expr *);
gfc_expr *gfc_power (gfc_expr *, gfc_expr *);
gfc_expr *gfc_concat (gfc_expr *, gfc_expr *);
gfc_expr *gfc_and (gfc_expr *, gfc_expr *);
gfc_expr *gfc_or (gfc_expr *, gfc_expr *);
gfc_expr *gfc_not (gfc_expr *);
gfc_expr *gfc_eqv (gfc_expr *, gfc_expr *);
gfc_expr *gfc_neqv (gfc_expr *, gfc_expr *);
gfc_expr *gfc_eq (gfc_expr *, gfc_expr *, gfc_intrinsic_op);
gfc_expr *gfc_ne (gfc_expr *, gfc_expr *, gfc_intrinsic_op);
gfc_expr *gfc_gt (gfc_expr *, gfc_expr *, gfc_intrinsic_op);
gfc_expr *gfc_ge (gfc_expr *, gfc_expr *, gfc_intrinsic_op);
gfc_expr *gfc_lt (gfc_expr *, gfc_expr *, gfc_intrinsic_op);
gfc_expr *gfc_le (gfc_expr *, gfc_expr *, gfc_intrinsic_op);


gfc_expr *gfc_int2int (gfc_expr *, int);
gfc_expr *gfc_int2real (gfc_expr *, int);
gfc_expr *gfc_int2complex (gfc_expr *, int);
gfc_expr *gfc_real2int (gfc_expr *, int);
gfc_expr *gfc_real2real (gfc_expr *, int);
gfc_expr *gfc_real2complex (gfc_expr *, int);
gfc_expr *gfc_complex2int (gfc_expr *, int);
gfc_expr *gfc_complex2real (gfc_expr *, int);
gfc_expr *gfc_complex2complex (gfc_expr *, int);
gfc_expr *gfc_log2log (gfc_expr *, int);
gfc_expr *gfc_log2int (gfc_expr *, int);
gfc_expr *gfc_int2log (gfc_expr *, int);
gfc_expr *gfc_hollerith2int (gfc_expr *, int);
gfc_expr *gfc_hollerith2real (gfc_expr *, int);
gfc_expr *gfc_hollerith2complex (gfc_expr *, int);
gfc_expr *gfc_hollerith2character (gfc_expr *, int);
gfc_expr *gfc_hollerith2logical (gfc_expr *, int);
gfc_expr *gfc_character2int (gfc_expr *, int);
gfc_expr *gfc_character2real (gfc_expr *, int);
gfc_expr *gfc_character2complex (gfc_expr *, int);
gfc_expr *gfc_character2character (gfc_expr *, int);
gfc_expr *gfc_character2logical (gfc_expr *, int);
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/dependency.h" 1
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/dependency.h"
enum gfc_dep_check
{
  NOT_ELEMENTAL,
  ELEM_CHECK_VARIABLE,
  ELEM_DONT_CHECK_VARIABLE

};



bool gfc_ref_needs_temporary_p (gfc_ref *);
bool gfc_full_array_ref_p (gfc_ref *, bool *);
gfc_expr *gfc_get_noncopying_intrinsic_argument (gfc_expr *);
int gfc_check_fncall_dependency (gfc_expr *, sym_intent, gfc_symbol *,
     gfc_actual_arglist *, gfc_dep_check);
int gfc_check_dependency (gfc_expr *, gfc_expr *, bool);
int gfc_expr_is_one (gfc_expr *, int);

int gfc_dep_resolver (gfc_ref *, gfc_ref *, gfc_reverse *,
        bool identical = false);
int gfc_are_equivalenced_arrays (gfc_expr *, gfc_expr *);

gfc_expr * gfc_discard_nops (gfc_expr *);
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/data.h" 1
# 20 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/data.h"
void gfc_formalize_init_value (gfc_symbol *);
void gfc_get_section_index (gfc_array_ref *, mpz_t *, mpz_t *);
bool gfc_assign_data_value (gfc_expr *, gfc_expr *, mpz_t, mpz_t *);
void gfc_advance_section (mpz_t *, gfc_array_ref *, mpz_t *);
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/target-memory.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/target-memory.h"
bool gfc_convert_boz (gfc_expr *, gfc_typespec *);

bool gfc_element_size (gfc_expr *, size_t *);
bool gfc_target_expr_size (gfc_expr *, size_t *);


size_t gfc_encode_character (int, size_t, const gfc_char_t *, unsigned char *,
     size_t);
unsigned long gfc_target_encode_expr (gfc_expr *, unsigned char *,
            size_t);



int gfc_interpret_integer (int, unsigned char *, size_t, mpz_t);
int gfc_interpret_float (int, unsigned char *, size_t, mpfr_t);
int gfc_interpret_complex (int, unsigned char *, size_t, mpc_t);
int gfc_interpret_logical (int, unsigned char *, size_t, int *);
size_t gfc_interpret_character (unsigned char *, size_t, gfc_expr *);
int gfc_interpret_derived (unsigned char *, size_t, gfc_expr *);
size_t gfc_target_interpret_expr (unsigned char *, size_t, gfc_expr *, bool);


size_t gfc_merge_initializers (gfc_typespec, gfc_expr *, locus *,
          unsigned char *, unsigned char *,
          size_t);
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/constructor.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/constructor.h"
gfc_constructor *gfc_constructor_get (void);

gfc_constructor_base gfc_constructor_get_base (void);


gfc_constructor_base gfc_constructor_copy (gfc_constructor_base base);



void gfc_constructor_free (gfc_constructor_base base);




gfc_constructor *gfc_constructor_append (gfc_constructor_base *base,
      gfc_constructor *c);

gfc_constructor *gfc_constructor_append_expr (gfc_constructor_base *base,
           gfc_expr *e, locus *where);




gfc_constructor *gfc_constructor_insert (gfc_constructor_base *base,
      gfc_constructor *c, int n);

gfc_constructor *gfc_constructor_insert_expr (gfc_constructor_base *base,
           gfc_expr *e, locus *where,
           int n);






gfc_constructor *gfc_constructor_lookup (gfc_constructor_base base, int n);





gfc_expr *gfc_constructor_lookup_expr (gfc_constructor_base base, int n);


int gfc_constructor_expr_foreach (gfc_constructor *ctor, int(*)(gfc_expr *));


void gfc_constructor_swap (gfc_constructor *ctor, int n, int m);





gfc_constructor *gfc_constructor_first (gfc_constructor_base base);



gfc_constructor *gfc_constructor_next (gfc_constructor *ctor);


void gfc_constructor_remove (gfc_constructor *);


gfc_constructor *gfc_constructor_lookup_next (gfc_constructor_base, int);
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 2



enum seq_type
{
  SEQ_NONDEFAULT, SEQ_NUMERIC, SEQ_CHARACTER, SEQ_MIXED
};




typedef struct code_stack
{
  struct gfc_code *head, *current;
  struct code_stack *prev;




  bitmap reachable_labels;
}
code_stack;

static code_stack *cs_base = 
# 55 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 55 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                ;




static int forall_flag;
int gfc_do_concurrent_flag;



static bool actual_arg = false;


static bool first_actual_arg = false;




static int omp_workshare_flag;



static bool formal_arg_flag = false;


static bool specification_expr = false;


static int current_entry_id;


static bitmap_obstack labels_obstack;


static bool inquiry_argument = false;


bool
gfc_is_formal_arg (void)
{
  return formal_arg_flag;
}


static bool
is_sym_host_assoc (gfc_symbol *sym, gfc_namespace *ns)
{
  for (ns = ns->parent; ns; ns = ns->parent)
    {
      if (sym->ns == ns)
 return true;
    }

  return false;
}





static bool
resolve_typespec_used (gfc_typespec* ts, locus* where, const char* name)
{
  if (ts->type == BT_DERIVED && ts->u.derived->attr.abstract)
    {
      if (where)
 {
   if (name)
     gfc_error ("%qs at %L is of the ABSTRACT type %qs",
         name, where, ts->u.derived->name);
   else
     gfc_error ("ABSTRACT type %qs used at %L",
         ts->u.derived->name, where);
 }

      return false;
    }

  return true;
}


static bool
check_proc_interface (gfc_symbol *ifc, locus *where)
{

  if (ifc->attr.procedure)
    {
      gfc_error ("Interface %qs at %L is declared "
   "in a later PROCEDURE statement", ifc->name, where);
      return false;
    }
  if (ifc->generic)
    {


      gfc_interface *gen = ifc->generic;
      while (gen && strcmp (gen->sym->name, ifc->name) != 0)
 gen = gen->next;
      if (!gen)
 {
   gfc_error ("Interface %qs at %L may not be generic",
       ifc->name, where);
   return false;
 }
    }
  if (ifc->attr.proc == PROC_ST_FUNCTION)
    {
      gfc_error ("Interface %qs at %L may not be a statement function",
   ifc->name, where);
      return false;
    }
  if (gfc_is_intrinsic (ifc, 0, ifc->declared_at)
      || gfc_is_intrinsic (ifc, 1, ifc->declared_at))
    ifc->attr.intrinsic = 1;
  if (ifc->attr.intrinsic && !gfc_intrinsic_actual_ok (ifc->name, 0))
    {
      gfc_error ("Intrinsic procedure %qs not allowed in "
   "PROCEDURE statement at %L", ifc->name, where);
      return false;
    }
  if (!ifc->attr.if_source && !ifc->attr.intrinsic && ifc->name[0] != '\0')
    {
      gfc_error ("Interface %qs at %L must be explicit", ifc->name, where);
      return false;
    }
  return true;
}


static void resolve_symbol (gfc_symbol *sym);




static bool
resolve_procedure_interface (gfc_symbol *sym)
{
  gfc_symbol *ifc = sym->ts.interface;

  if (!ifc)
    return true;

  if (ifc == sym)
    {
      gfc_error ("PROCEDURE %qs at %L may not be used as its own interface",
   sym->name, &sym->declared_at);
      return false;
    }
  if (!check_proc_interface (ifc, &sym->declared_at))
    return false;

  if (ifc->attr.if_source || ifc->attr.intrinsic)
    {

      resolve_symbol (ifc);
      if (ifc->attr.intrinsic)
 gfc_resolve_intrinsic (ifc, &ifc->declared_at);

      if (ifc->result)
 {
   sym->ts = ifc->result->ts;
   sym->attr.allocatable = ifc->result->attr.allocatable;
   sym->attr.pointer = ifc->result->attr.pointer;
   sym->attr.dimension = ifc->result->attr.dimension;
   sym->attr.class_ok = ifc->result->attr.class_ok;
   sym->as = gfc_copy_array_spec (ifc->result->as);
   sym->result = sym;
 }
      else
 {
   sym->ts = ifc->ts;
   sym->attr.allocatable = ifc->attr.allocatable;
   sym->attr.pointer = ifc->attr.pointer;
   sym->attr.dimension = ifc->attr.dimension;
   sym->attr.class_ok = ifc->attr.class_ok;
   sym->as = gfc_copy_array_spec (ifc->as);
 }
      sym->ts.interface = ifc;
      sym->attr.function = ifc->attr.function;
      sym->attr.subroutine = ifc->attr.subroutine;

      sym->attr.pure = ifc->attr.pure;
      sym->attr.elemental = ifc->attr.elemental;
      sym->attr.contiguous = ifc->attr.contiguous;
      sym->attr.recursive = ifc->attr.recursive;
      sym->attr.always_explicit = ifc->attr.always_explicit;
      sym->attr.ext_attr |= ifc->attr.ext_attr;
      sym->attr.is_bind_c = ifc->attr.is_bind_c;

      if (ifc->ts.type == BT_CHARACTER && ifc->ts.u.cl)
 {
   sym->ts.u.cl = gfc_new_charlen (sym->ns, ifc->ts.u.cl);
   if (sym->ts.u.cl->length && !sym->ts.u.cl->resolved
       && !gfc_resolve_expr (sym->ts.u.cl->length))
     return false;
 }
    }

  return true;
}
# 267 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
void
gfc_resolve_formal_arglist (gfc_symbol *proc)
{
  gfc_formal_arglist *f;
  gfc_symbol *sym;
  bool saved_specification_expr;
  int i;

  if (proc->result != 
# 275 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 275 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
    sym = proc->result;
  else
    sym = proc;

  if (gfc_elemental (proc)
      || sym->attr.pointer || sym->attr.allocatable
      || (sym->as && sym->as->rank != 0))
    {
      proc->attr.always_explicit = 1;
      sym->attr.always_explicit = 1;
    }

  formal_arg_flag = true;

  for (f = proc->formal; f; f = f->next)
    {
      gfc_array_spec *as;

      sym = f->sym;

      if (sym == 
# 296 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 296 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
 {

   if (gfc_elemental (proc))
     gfc_error ("Alternate return specifier in elemental subroutine "
         "%qs at %L is not allowed", proc->name,
         &proc->declared_at);
   if (proc->attr.function)
     gfc_error ("Alternate return specifier in function "
         "%qs at %L is not allowed", proc->name,
         &proc->declared_at);
   continue;
 }
      else if (sym->attr.procedure && sym->attr.if_source != IFSRC_DECL
        && !resolve_procedure_interface (sym))
 return;

      if (strcmp (proc->name, sym->name) == 0)
        {
          gfc_error ("Self-referential argument "
                     "%qs at %L is not allowed", sym->name,
                     &proc->declared_at);
          return;
        }

      if (sym->attr.if_source != IFSRC_UNKNOWN)
 gfc_resolve_formal_arglist (sym);

      if (sym->attr.subroutine || sym->attr.external)
 {
   if (sym->attr.flavor == FL_UNKNOWN)
     gfc_add_flavor (&sym->attr, FL_PROCEDURE, sym->name, &sym->declared_at);
 }
      else
 {
   if (sym->ts.type == BT_UNKNOWN && !proc->attr.intrinsic
       && (!sym->attr.function || sym->result == sym))
     gfc_set_default_type (sym, 1, sym->ns);
 }

      as = sym->ts.type == BT_CLASS && sym->attr.class_ok
    ? sym->ts.u.derived->components->as : sym->as;

      saved_specification_expr = specification_expr;
      specification_expr = true;
      gfc_resolve_array_spec (as, 0);
      specification_expr = saved_specification_expr;




      if (as && as->rank > 0 && as->type == AS_DEFERRED
   && ((sym->ts.type != BT_CLASS
        && !(sym->attr.pointer || sym->attr.allocatable))
              || (sym->ts.type == BT_CLASS
    && !(sym->ts.u.derived->components->attr.class_pointer
         || sym->ts.u.derived->components->attr.allocatable)))
   && sym->attr.flavor != FL_PROCEDURE)
 {
   as->type = AS_ASSUMED_SHAPE;
   for (i = 0; i < as->rank; i++)
     as->lower[i] = gfc_get_int_expr (gfc_default_integer_kind, 
# 357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                               __null
# 357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                   , 1);
 }

      if ((as && as->rank > 0 && as->type == AS_ASSUMED_SHAPE)
   || (as && as->type == AS_ASSUMED_RANK)
   || sym->attr.pointer || sym->attr.allocatable || sym->attr.target
   || (sym->ts.type == BT_CLASS && sym->attr.class_ok
       && (sym->ts.u.derived->components->attr.class_pointer
    || sym->ts.u.derived->components->attr.allocatable
    || sym->ts.u.derived->components->attr.target))
   || sym->attr.optional)
 {
   proc->attr.always_explicit = 1;
   if (proc->result)
     proc->result->attr.always_explicit = 1;
 }




      if (sym->attr.flavor == FL_UNKNOWN)
 gfc_add_flavor (&sym->attr, FL_VARIABLE, sym->name, &sym->declared_at);

      if (gfc_pure (proc))
 {
   if (sym->attr.flavor == FL_PROCEDURE)
     {

       if (!gfc_pure (sym))
  {
    gfc_error ("Dummy procedure %qs of PURE procedure at %L must "
       "also be PURE", sym->name, &sym->declared_at);
    continue;
  }
     }
   else if (!sym->attr.pointer)
     {
       if (proc->attr.function && sym->attr.intent != INTENT_IN)
  {
    if (sym->attr.value)
      gfc_notify_std ((1<<7), "Argument %qs"
        " of pure function %qs at %L with VALUE "
        "attribute but without INTENT(IN)",
        sym->name, proc->name, &sym->declared_at);
    else
      gfc_error ("Argument %qs of pure function %qs at %L must "
          "be INTENT(IN) or VALUE", sym->name, proc->name,
          &sym->declared_at);
  }

       if (proc->attr.subroutine && sym->attr.intent == INTENT_UNKNOWN)
  {
    if (sym->attr.value)
      gfc_notify_std ((1<<7), "Argument %qs"
        " of pure subroutine %qs at %L with VALUE "
        "attribute but without INTENT", sym->name,
        proc->name, &sym->declared_at);
    else
      gfc_error ("Argument %qs of pure subroutine %qs at %L "
          "must have its INTENT specified or have the "
          "VALUE attribute", sym->name, proc->name,
          &sym->declared_at);
  }
     }


   if (sym->ts.type == BT_CLASS && sym->attr.intent == INTENT_OUT)
     {
       gfc_error ("INTENT(OUT) argument %qs of pure procedure %qs at %L"
    " may not be polymorphic", sym->name, proc->name,
    &sym->declared_at);
       continue;
     }
 }

      if (proc->attr.implicit_pure)
 {
   if (sym->attr.flavor == FL_PROCEDURE)
     {
       if (!gfc_pure (sym))
  proc->attr.implicit_pure = 0;
     }
   else if (!sym->attr.pointer)
     {
       if (proc->attr.function && sym->attr.intent != INTENT_IN
    && !sym->value)
  proc->attr.implicit_pure = 0;

       if (proc->attr.subroutine && sym->attr.intent == INTENT_UNKNOWN
    && !sym->value)
  proc->attr.implicit_pure = 0;
     }
 }

      if (gfc_elemental (proc))
 {

   if (sym->attr.codimension
       || (sym->ts.type == BT_CLASS && sym->ts.u.derived->components
    && sym->ts.u.derived->components->attr.codimension))
     {
       gfc_error ("Coarray dummy argument %qs at %L to elemental "
    "procedure", sym->name, &sym->declared_at);
       continue;
     }

   if (sym->as || (sym->ts.type == BT_CLASS && sym->ts.u.derived->components
     && sym->ts.u.derived->components->as))
     {
       gfc_error ("Argument %qs of elemental procedure at %L must "
    "be scalar", sym->name, &sym->declared_at);
       continue;
     }

   if (sym->attr.allocatable
       || (sym->ts.type == BT_CLASS && sym->ts.u.derived->components
    && sym->ts.u.derived->components->attr.allocatable))
     {
       gfc_error ("Argument %qs of elemental procedure at %L cannot "
    "have the ALLOCATABLE attribute", sym->name,
    &sym->declared_at);
       continue;
     }

   if (sym->attr.pointer
       || (sym->ts.type == BT_CLASS && sym->ts.u.derived->components
    && sym->ts.u.derived->components->attr.class_pointer))
     {
       gfc_error ("Argument %qs of elemental procedure at %L cannot "
    "have the POINTER attribute", sym->name,
    &sym->declared_at);
       continue;
     }

   if (sym->attr.flavor == FL_PROCEDURE)
     {
       gfc_error ("Dummy procedure %qs not allowed in elemental "
    "procedure %qs at %L", sym->name, proc->name,
    &sym->declared_at);
       continue;
     }


   if (sym->attr.intent == INTENT_UNKNOWN && !sym->attr.value)
     {
       gfc_error ("Argument %qs of elemental procedure %qs at %L must "
    "have its INTENT specified or have the VALUE "
    "attribute", sym->name, proc->name,
    &sym->declared_at);
       continue;
     }
 }


      if (proc->attr.proc == PROC_ST_FUNCTION)
 {
   if (sym->as != 
# 513 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 513 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
     {


       gfc_error ("Argument '%s' of statement function '%s' at %L "
    "must be scalar", sym->name, proc->name,
    &proc->declared_at);
       continue;
     }

   if (sym->ts.type == BT_CHARACTER)
     {
       gfc_charlen *cl = sym->ts.u.cl;
       if (!cl || !cl->length || cl->length->expr_type != EXPR_CONSTANT)
  {
    gfc_error ("Character-valued argument %qs of statement "
        "function at %L must have constant length",
        sym->name, &sym->declared_at);
    continue;
  }
     }
 }
    }
  formal_arg_flag = false;
}





static void
find_arglists (gfc_symbol *sym)
{
  if (sym->attr.if_source == IFSRC_UNKNOWN || sym->ns != gfc_current_ns
      || ((sym->attr.flavor) == FL_DERIVED || (sym->attr.flavor) == FL_UNION || (sym->attr.flavor) == FL_STRUCT) || sym->attr.intrinsic)
    return;

  gfc_resolve_formal_arglist (sym);
}





static void
resolve_formal_arglists (gfc_namespace *ns)
{
  if (ns == 
# 560 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 560 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               )
    return;

  gfc_traverse_ns (ns, find_arglists);
}


static void
resolve_contained_fntype (gfc_symbol *sym, gfc_namespace *ns)
{
  bool t;

  if (sym && sym->attr.flavor == FL_PROCEDURE
      && sym->ns->parent
      && sym->ns->parent->proc_name
      && sym->ns->parent->proc_name->attr.flavor == FL_PROCEDURE
      && !strcmp (sym->name, sym->ns->parent->proc_name->name))
    gfc_error ("Contained procedure %qs at %L has the same name as its "
        "encompassing procedure", sym->name, &sym->declared_at);



  if (! sym || !(sym->attr.function || sym->attr.flavor == FL_VARIABLE)
      || sym->attr.entry_master)
    return;

  if (!sym->result)
    return;


  if (sym->result->ts.type == BT_UNKNOWN && sym->result->ts.interface == 
# 590 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                        __null
# 590 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                            )
    {
      t = gfc_set_default_type (sym->result, 0, ns);

      if (!t && !sym->result->attr.untyped)
 {
   if (sym->result == sym)
     gfc_error ("Contained function %qs at %L has no IMPLICIT type",
         sym->name, &sym->declared_at);
   else if (!sym->result->attr.proc_pointer)
     gfc_error ("Result %qs of contained function %qs at %L has "
         "no IMPLICIT type", sym->result->name, sym->name,
         &sym->result->declared_at);
   sym->result->attr.untyped = 1;
 }
    }
# 614 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  if (sym->result->ts.type == BT_CHARACTER)
    {
      gfc_charlen *cl = sym->result->ts.u.cl;
      if ((!cl || !cl->length) && !sym->result->ts.deferred)
 {


   bool module_proc;
   ((void)(!(ns->parent && ns->parent->proc_name) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 622, __FUNCTION__), 0 : 0));
   module_proc = (ns->parent->proc_name->attr.flavor == FL_MODULE);

   gfc_error (module_proc
       ? "Character-valued module procedure %qs at %L" " must not be assumed length"

       : "Character-valued internal function %qs at %L" " must not be assumed length"
                                   ,
       sym->name, &sym->declared_at);
 }
    }
}





static void
merge_argument_lists (gfc_symbol *proc, gfc_formal_arglist *new_args)
{
  gfc_formal_arglist *f, *new_arglist;
  gfc_symbol *new_sym;

  for (; new_args != 
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ; new_args = new_args->next)
    {
      new_sym = new_args->sym;

      for (f = proc->formal; f; f = f->next)
 {
   if (new_sym == f->sym)
     break;
 }

      if (f)
 continue;


      new_arglist = ((gfc_formal_arglist *) xcalloc (1, sizeof (gfc_formal_arglist)));
      new_arglist->sym = new_sym;
      new_arglist->next = proc->formal;
      proc->formal = new_arglist;
    }
}




static void
check_argument_lists (gfc_symbol *proc, gfc_formal_arglist *new_args)
{
  gfc_formal_arglist *f, *head;
  head = new_args;

  for (f = proc->formal; f; f = f->next)
    {
      if (f->sym == 
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 677 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       )
 continue;

      for (new_args = head; new_args; new_args = new_args->next)
 {
   if (new_args->sym == f->sym)
     break;
 }

      if (new_args)
 continue;

      f->sym->attr.not_always_present = 1;
    }
}






static void
resolve_entries (gfc_namespace *ns)
{
  gfc_namespace *old_ns;
  gfc_code *c;
  gfc_symbol *proc;
  gfc_entry_list *el;
  char name[63 + 1];
  static int master_count = 0;

  if (ns->proc_name == 
# 708 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 708 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          )
    return;



  if (!ns->entries)
    return;


  if (ns->proc_name->attr.entry_master)
    return;


  ((void)(!(ns->proc_name->attr.flavor == FL_PROCEDURE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 721, __FUNCTION__), 0 : 0));


  old_ns = gfc_current_ns;

  gfc_current_ns = ns;


  el = ((gfc_entry_list *) xcalloc (1, sizeof (gfc_entry_list)));
  el->sym = ns->proc_name;
  el->id = 0;
  el->next = ns->entries;
  ns->entries = el;
  ns->proc_name->attr.entry = 1;






  if (ns->proc_name->attr.function
      && ns->parent && ns->parent->proc_name->attr.flavor == FL_MODULE)
    el->sym->ns = ns;




  for (el = el->next; el; el = el->next)
    if (el->sym->ns->proc_name->attr.flavor == FL_MODULE
   && el->sym->attr.mod_proc)
      el->sym->ns = ns;
  el = ns->entries;


  c = gfc_get_code (EXEC_ENTRY);
  c->ext.entry = el;
  c->next = ns->code;
  ns->code = c;





  snprintf (name, 63, "master.%d.%s",
     master_count++, ns->proc_name->name);
  gfc_get_ha_symbol (name, &proc);
  ((void)(!(proc != 
# 767 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __null
# 767 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 767, __FUNCTION__), 0 : 0));

  gfc_add_procedure (&proc->attr, PROC_INTERNAL, proc->name, 
# 769 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                            __null
# 769 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                );
  if (ns->proc_name->attr.subroutine)
    gfc_add_subroutine (&proc->attr, proc->name, 
# 771 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 771 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    );
  else
    {
      gfc_symbol *sym;
      gfc_typespec *ts, *fts;
      gfc_array_spec *as, *fas;
      gfc_add_function (&proc->attr, proc->name, 
# 777 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 777 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    );
      proc->result = proc;
      fas = ns->entries->sym->as;
      fas = fas ? fas : ns->entries->sym->result->as;
      fts = &ns->entries->sym->result->ts;
      if (fts->type == BT_UNKNOWN)
 fts = gfc_get_default_type (ns->entries->sym->result->name, 
# 783 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                            __null
# 783 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                );
      for (el = ns->entries->next; el; el = el->next)
 {
   ts = &el->sym->result->ts;
   as = el->sym->as;
   as = as ? as : el->sym->result->as;
   if (ts->type == BT_UNKNOWN)
     ts = gfc_get_default_type (el->sym->result->name, 
# 790 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                      __null
# 790 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                          );

   if (! gfc_compare_types (ts, fts)
       || (el->sym->result->attr.dimension
    != ns->entries->sym->result->attr.dimension)
       || (el->sym->result->attr.pointer
    != ns->entries->sym->result->attr.pointer))
     break;
   else if (as && fas && ns->entries->sym->result != el->sym->result
        && gfc_compare_array_spec (as, fas) == 0)
     gfc_error ("Function %s at %L has entries with mismatched "
         "array specifications", ns->entries->sym->name,
         &ns->entries->sym->declared_at);




   else if (ts->type == BT_CHARACTER && ts->u.cl && fts->u.cl
     && (((ts->u.cl->length && !fts->u.cl->length)
   ||(!ts->u.cl->length && fts->u.cl->length))
         || (ts->u.cl->length
      && ts->u.cl->length->expr_type
         != fts->u.cl->length->expr_type)
         || (ts->u.cl->length
      && ts->u.cl->length->expr_type == EXPR_CONSTANT
             && 
# 815 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __gmpz_cmp 
# 815 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       (ts->u.cl->length->value.integer,
           fts->u.cl->length->value.integer) != 0)))
     gfc_notify_std ((1<<5), "Function %s at %L with "
       "entries returning variables of different "
       "string lengths", ns->entries->sym->name,
       &ns->entries->sym->declared_at);
 }

      if (el == 
# 823 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 823 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   )
 {
   sym = ns->entries->sym->result;

   proc->ts = *fts;
   if (sym->attr.dimension)
     gfc_set_array_spec (proc, gfc_copy_array_spec (sym->as), 
# 829 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                             __null
# 829 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                 );
   if (sym->attr.pointer)
     gfc_add_pointer (&proc->attr, 
# 831 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 831 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      );
 }
      else
 {


   proc->attr.mixed_entry_master = 1;
   for (el = ns->entries; el; el = el->next)
     {
       sym = el->sym->result;
       if (sym->attr.dimension)
  {
    if (el == ns->entries)
      gfc_error ("FUNCTION result %s cannot be an array in "
          "FUNCTION %s at %L", sym->name,
          ns->entries->sym->name, &sym->declared_at);
    else
      gfc_error ("ENTRY result %s cannot be an array in "
          "FUNCTION %s at %L", sym->name,
          ns->entries->sym->name, &sym->declared_at);
  }
       else if (sym->attr.pointer)
  {
    if (el == ns->entries)
      gfc_error ("FUNCTION result %s cannot be a POINTER in "
          "FUNCTION %s at %L", sym->name,
          ns->entries->sym->name, &sym->declared_at);
    else
      gfc_error ("ENTRY result %s cannot be a POINTER in "
          "FUNCTION %s at %L", sym->name,
          ns->entries->sym->name, &sym->declared_at);
  }
       else
  {
    ts = &sym->ts;
    if (ts->type == BT_UNKNOWN)
      ts = gfc_get_default_type (sym->name, 
# 867 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                           __null
# 867 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                               );
    switch (ts->type)
      {
      case BT_INTEGER:
        if (ts->kind == gfc_default_integer_kind)
   sym = 
# 872 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 872 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;
        break;
      case BT_REAL:
        if (ts->kind == gfc_default_real_kind
     || ts->kind == gfc_default_double_kind)
   sym = 
# 877 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 877 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;
        break;
      case BT_COMPLEX:
        if (ts->kind == gfc_default_complex_kind)
   sym = 
# 881 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 881 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;
        break;
      case BT_LOGICAL:
        if (ts->kind == gfc_default_logical_kind)
   sym = 
# 885 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 885 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;
        break;
      case BT_UNKNOWN:

        sym = 
# 889 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 889 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 ;
        break;
      default:
        break;
      }
    if (sym)
      {
        if (el == ns->entries)
   gfc_error ("FUNCTION result %s cannot be of type %s "
       "in FUNCTION %s at %L", sym->name,
       gfc_typename (ts), ns->entries->sym->name,
       &sym->declared_at);
        else
   gfc_error ("ENTRY result %s cannot be of type %s "
       "in FUNCTION %s at %L", sym->name,
       gfc_typename (ts), ns->entries->sym->name,
       &sym->declared_at);
      }
  }
     }
 }
    }
  proc->attr.access = ACCESS_PRIVATE;
  proc->attr.entry_master = 1;


  for (el = ns->entries; el; el = el->next)
    merge_argument_lists (proc, el->sym->formal);



  for (el = ns->entries; el; el = el->next)
    check_argument_lists (proc, el->sym->formal);


  ns->proc_name = proc;


  gfc_commit_symbols ();


  gfc_current_ns = old_ns;
}



static void
resolve_common_vars (gfc_common_head *common_block, bool named_common)
{
  gfc_symbol *csym = common_block->head;

  for (; csym; csym = csym->common_next)
    {



      if (!csym->attr.use_assoc)
 {
   gfc_add_in_common (&csym->attr, csym->name, &common_block->where);
   gfc_notify_std ((1<<10), "COMMON block at %L",
     &common_block->where);
 }

      if (csym->value || csym->attr.data)
 {
   if (!csym->ns->is_block_data)
     gfc_notify_std ((1<<5), "Variable %qs at %L is in COMMON "
       "but only in BLOCK DATA initialization is "
       "allowed", csym->name, &csym->declared_at);
   else if (!named_common)
     gfc_notify_std ((1<<5), "Initialized variable %qs at %L is "
       "in a blank COMMON but initialization is only "
       "allowed in named common blocks", csym->name,
       &csym->declared_at);
 }

      if ((csym != 
# 965 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null 
# 965 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         && csym->ts.type == BT_CLASS && csym->ts.u.derived->components && csym->ts.u.derived->components->ts.u.derived && csym->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic))
 gfc_error_now ("%qs in cannot appear in COMMON at %L "
         "[F2008:C5100]", csym->name, &csym->declared_at);

      if (csym->ts.type != BT_DERIVED)
 continue;

      if (!(csym->ts.u.derived->attr.sequence
     || csym->ts.u.derived->attr.is_bind_c))
 gfc_error_now ("Derived type variable %qs in COMMON at %L "
         "has neither the SEQUENCE nor the BIND(C) "
         "attribute", csym->name, &csym->declared_at);
      if (csym->ts.u.derived->attr.alloc_comp)
 gfc_error_now ("Derived type variable %qs in COMMON at %L "
         "has an ultimate component that is "
         "allocatable", csym->name, &csym->declared_at);
      if (gfc_has_default_initializer (csym->ts.u.derived))
 gfc_error_now ("Derived type variable %qs in COMMON at %L "
         "may not have default initializer", csym->name,
         &csym->declared_at);

      if (csym->attr.flavor == FL_UNKNOWN && !csym->attr.proc_pointer)
 gfc_add_flavor (&csym->attr, FL_VARIABLE, csym->name, &csym->declared_at);
    }
}


static void
resolve_common_blocks (gfc_symtree *common_root)
{
  gfc_symbol *sym;
  gfc_gsymbol * gsym;

  if (common_root == 
# 998 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 998 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        )
    return;

  if (common_root->left)
    resolve_common_blocks (common_root->left);
  if (common_root->right)
    resolve_common_blocks (common_root->right);

  resolve_common_vars (common_root->n.common, true);




  if (!common_root->n.common->binding_label
      || gfc_notification_std ((1<<7)))
    {
      gsym = gfc_find_gsymbol (gfc_gsym_root,
          common_root->n.common->name);

      if (gsym && gfc_notification_std ((1<<7))
   && gsym->type == GSYM_COMMON
   && ((common_root->n.common->binding_label
        && (!gsym->binding_label
     || strcmp (common_root->n.common->binding_label,
         gsym->binding_label) != 0))
       || (!common_root->n.common->binding_label
    && gsym->binding_label)))
 {
   gfc_error ("In Fortran 2003 COMMON %qs block at %L is a global "
       "identifier and must thus have the same binding name "
       "as the same-named COMMON block at %L: %s vs %s",
       common_root->n.common->name, &common_root->n.common->where,
       &gsym->where,
       common_root->n.common->binding_label
       ? common_root->n.common->binding_label : "(blank)",
       gsym->binding_label ? gsym->binding_label : "(blank)");
   return;
 }

      if (gsym && gsym->type != GSYM_COMMON
   && !common_root->n.common->binding_label)
 {
   gfc_error ("COMMON block %qs at %L uses the same global identifier "
       "as entity at %L",
       common_root->n.common->name, &common_root->n.common->where,
       &gsym->where);
   return;
 }
      if (gsym && gsym->type != GSYM_COMMON)
 {
   gfc_error ("Fortran 2008: COMMON block %qs with binding label at "
       "%L sharing the identifier with global non-COMMON-block "
       "entity at %L", common_root->n.common->name,
       &common_root->n.common->where, &gsym->where);
   return;
 }
      if (!gsym)
 {
   gsym = gfc_get_gsymbol (common_root->n.common->name, false);
   gsym->type = GSYM_COMMON;
   gsym->where = common_root->n.common->where;
   gsym->defined = 1;
 }
      gsym->used = 1;
    }

  if (common_root->n.common->binding_label)
    {
      gsym = gfc_find_gsymbol (gfc_gsym_root,
          common_root->n.common->binding_label);
      if (gsym && gsym->type != GSYM_COMMON)
 {
   gfc_error ("COMMON block at %L with binding label %qs uses the same "
       "global identifier as entity at %L",
       &common_root->n.common->where,
       common_root->n.common->binding_label, &gsym->where);
   return;
 }
      if (!gsym)
 {
   gsym = gfc_get_gsymbol (common_root->n.common->binding_label, true);
   gsym->type = GSYM_COMMON;
   gsym->where = common_root->n.common->where;
   gsym->defined = 1;
 }
      gsym->used = 1;
    }

  gfc_find_symbol (common_root->name, gfc_current_ns, 0, &sym);
  if (sym == 
# 1087 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 1087 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    return;

  if (sym->attr.flavor == FL_PARAMETER)
    gfc_error ("COMMON block %qs at %L is used as PARAMETER at %L",
        sym->name, &common_root->n.common->where, &sym->declared_at);

  if (sym->attr.external)
    gfc_error ("COMMON block %qs at %L cannot have the EXTERNAL attribute",
        sym->name, &common_root->n.common->where);

  if (sym->attr.intrinsic)
    gfc_error ("COMMON block %qs at %L is also an intrinsic procedure",
        sym->name, &common_root->n.common->where);
  else if (sym->attr.result
    || gfc_is_function_return_value (sym, gfc_current_ns))
    gfc_notify_std ((1<<4), "COMMON block %qs at %L "
      "that is also a function result", sym->name,
      &common_root->n.common->where);
  else if (sym->attr.flavor == FL_PROCEDURE && sym->attr.proc != PROC_INTERNAL
    && sym->attr.proc != PROC_ST_FUNCTION)
    gfc_notify_std ((1<<4), "COMMON block %qs at %L "
      "that is also a global procedure", sym->name,
      &common_root->n.common->where);
}
# 1123 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
resolve_contained_functions (gfc_namespace *ns)
{
  gfc_namespace *child;
  gfc_entry_list *el;

  resolve_formal_arglists (ns);

  for (child = ns->contained; child; child = child->sibling)
    {

      resolve_entries (child);


      resolve_contained_fntype (child->proc_name, child);
      for (el = child->entries; el; el = el->next)
 resolve_contained_fntype (el->sym, child);
    }
}
# 1151 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static gfc_actual_arglist *param_list, *param_tail, *param;

static bool
get_pdt_spec_expr (gfc_component *c, gfc_expr *expr)
{
  param = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
  if (!param_list)
    param_list = param_tail = param;
  else
    {
      param_tail->next = param;
      param_tail = param_tail->next;
    }

  param_tail->name = c->name;
  if (expr)
    param_tail->expr = gfc_copy_expr (expr);
  else if (c->initializer)
    param_tail->expr = gfc_copy_expr (c->initializer);
  else
    {
      param_tail->spec_type = SPEC_ASSUMED;
      if (c->attr.pdt_kind)
 {
   gfc_error ("The KIND parameter %qs in the PDT constructor "
       "at %C has no value", param->name);
   return false;
 }
    }

  return true;
}

static bool
get_pdt_constructor (gfc_expr *expr, gfc_constructor **constr,
       gfc_symbol *derived)
{
  gfc_constructor *cons = 
# 1188 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 1188 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             ;
  gfc_component *comp;
  bool t = true;

  if (expr && expr->expr_type == EXPR_STRUCTURE)
    cons = gfc_constructor_first (expr->value.constructor);
  else if (constr)
    cons = *constr;
  ((void)(!(cons) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 1196, __FUNCTION__), 0 : 0));

  comp = derived->components;

  for (; comp && cons; comp = comp->next, cons = gfc_constructor_next (cons))
    {
      if (cons->expr
   && cons->expr->expr_type == EXPR_STRUCTURE
   && comp->ts.type == BT_DERIVED)
 {
   t = get_pdt_constructor (cons->expr, 
# 1206 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                       __null
# 1206 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                           , comp->ts.u.derived);
   if (!t)
     return t;
 }
      else if (comp->ts.type == BT_DERIVED)
 {
   t = get_pdt_constructor (
# 1212 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 1212 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               , &cons, comp->ts.u.derived);
   if (!t)
     return t;
 }
     else if ((comp->attr.pdt_kind || comp->attr.pdt_len)
        && derived->attr.pdt_template)
 {
   t = get_pdt_spec_expr (comp, cons->expr);
   if (!t)
     return t;
 }
    }
  return t;
}


static bool resolve_fl_derived0 (gfc_symbol *sym);
static bool resolve_fl_struct (gfc_symbol *sym);






static bool
resolve_structure_cons (gfc_expr *expr, int init)
{
  gfc_constructor *cons;
  gfc_component *comp;
  bool t;
  symbol_attribute a;

  t = true;

  if (expr->ts.type == BT_DERIVED || expr->ts.type == BT_UNION)
    {
      if (expr->ts.u.derived->attr.flavor == FL_DERIVED)
        resolve_fl_derived0 (expr->ts.u.derived);
      else
        resolve_fl_struct (expr->ts.u.derived);



      if (expr->ts.u.derived->attr.pdt_template)
 {
   param_list = 
# 1257 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 1257 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
   t = get_pdt_constructor (expr, 
# 1258 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                 __null
# 1258 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                     , expr->ts.u.derived);
   if (!t)
     return t;
   gfc_get_pdt_instance (param_list, &expr->ts.u.derived, 
# 1261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                         __null
# 1261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                             );

   expr->param_list = gfc_copy_actual_arglist (param_list);

   if (param_list)
     gfc_free_actual_arglist (param_list);

   if (!expr->ts.u.derived->attr.pdt_type)
     return false;
 }
    }

  cons = gfc_constructor_first (expr->value.constructor);




  if (expr->ref)
    comp = expr->ref->u.c.sym->components;
  else
    comp = expr->ts.u.derived->components;

  for (; comp && cons; comp = comp->next, cons = gfc_constructor_next (cons))
    {
      int rank;

      if (!cons->expr)
 continue;




      if (cons->expr->ts.type == BT_UNION && cons->expr->expr_type == EXPR_NULL)
        continue;

      if (!gfc_resolve_expr (cons->expr))
 {
   t = false;
   continue;
 }

      rank = comp->as ? comp->as->rank : 0;
      if (comp->ts.type == BT_CLASS
   && !comp->ts.u.derived->attr.unlimited_polymorphic
   && comp->ts.u.derived->components->as)
  rank = comp->ts.u.derived->components->as->rank;

      if (cons->expr->expr_type != EXPR_NULL && rank != cons->expr->rank
   && (comp->attr.allocatable || cons->expr->rank))
 {
   gfc_error ("The rank of the element in the structure "
       "constructor at %L does not match that of the "
       "component (%d/%d)", &cons->expr->where,
       cons->expr->rank, rank);
   t = false;
 }



      if (!comp->attr.proc_pointer &&
   !gfc_compare_types (&cons->expr->ts, &comp->ts))
 {
   if (strcmp (comp->name, "_extends") == 0)
     {



       cons->expr->ts = comp->ts;
     }
   else if (comp->attr.pointer && cons->expr->ts.type != BT_UNKNOWN)
     {
       gfc_error ("The element in the structure constructor at %L, "
    "for pointer component %qs, is %s but should be %s",
    &cons->expr->where, comp->name,
    gfc_basic_typename (cons->expr->ts.type),
    gfc_basic_typename (comp->ts.type));
       t = false;
     }
   else
     {
       bool t2 = gfc_convert_type (cons->expr, &comp->ts, 1);
       if (t)
  t = t2;
     }
 }





      if (cons->expr->ts.type == BT_CHARACTER && comp->ts.u.cl
   && comp->ts.u.cl->length
   && comp->ts.u.cl->length->expr_type == EXPR_CONSTANT
   && cons->expr->ts.u.cl && cons->expr->ts.u.cl->length
   && cons->expr->ts.u.cl->length->expr_type == EXPR_CONSTANT
   && cons->expr->rank != 0
   && 
# 1357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_cmp 
# 1357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (cons->expr->ts.u.cl->length->value.integer,
        comp->ts.u.cl->length->value.integer) != 0)
 {
   if (cons->expr->expr_type == EXPR_VARIABLE
       && cons->expr->symtree->n.sym->attr.flavor == FL_PARAMETER)
     {




       gfc_expr *para = cons->expr;
       cons->expr = gfc_get_expr ();
       cons->expr->ts = para->ts;
       cons->expr->where = para->where;
       cons->expr->expr_type = EXPR_ARRAY;
       cons->expr->rank = para->rank;
       cons->expr->shape = gfc_copy_shape (para->shape, para->rank);
       gfc_constructor_append_expr (&cons->expr->value.constructor,
        para, &cons->expr->where);
     }

   if (cons->expr->expr_type == EXPR_ARRAY)
     {



       cons->expr->ts.u.cl = gfc_new_charlen (gfc_current_ns, 
# 1383 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                             __null
# 1383 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                 );
       cons->expr->ts.u.cl->length_from_typespec = true;
       cons->expr->ts.u.cl->length = gfc_copy_expr (comp->ts.u.cl->length);
       gfc_resolve_character_array_constructor (cons->expr);
     }
 }

      if (cons->expr->expr_type == EXPR_NULL
   && !(comp->attr.pointer || comp->attr.allocatable
        || comp->attr.proc_pointer || comp->ts.f90_type == BT_VOID
        || (comp->ts.type == BT_CLASS
     && (comp->ts.u.derived->components->attr.class_pointer
         || comp->ts.u.derived->components->attr.allocatable))))
 {
   t = false;
   gfc_error ("The NULL in the structure constructor at %L is "
       "being applied to component %qs, which is neither "
       "a POINTER nor ALLOCATABLE", &cons->expr->where,
       comp->name);
 }

      if (comp->attr.proc_pointer && comp->ts.interface)
 {

   gfc_symbol *s2 = 
# 1407 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 1407 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;
   gfc_component *c2;
   const char *name;
   char err[200];

   c2 = gfc_get_proc_ptr_comp (cons->expr);
   if (c2)
     {
       s2 = c2->ts.interface;
       name = c2->name;
     }
   else if (cons->expr->expr_type == EXPR_FUNCTION)
     {
       s2 = cons->expr->symtree->n.sym->result;
       name = cons->expr->symtree->n.sym->result->name;
     }
   else if (cons->expr->expr_type != EXPR_NULL)
     {
       s2 = cons->expr->symtree->n.sym;
       name = cons->expr->symtree->n.sym->name;
     }

   if (s2 && !gfc_compare_interfaces (comp->ts.interface, s2, name, 0, 1,
          err, sizeof (err), 
# 1430 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 1430 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                , 
# 1430 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 1430 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      ))
     {
       gfc_error_opt (0, "Interface mismatch for procedure-pointer "
        "component %qs in structure constructor at %L:"
        " %s", comp->name, &cons->expr->where, err);
       return false;
     }
 }

      if (!comp->attr.pointer || comp->attr.proc_pointer
   || cons->expr->expr_type == EXPR_NULL)
 continue;

      a = gfc_expr_attr (cons->expr);

      if (!a.pointer && !a.target)
 {
   t = false;
   gfc_error ("The element in the structure constructor at %L, "
       "for pointer component %qs should be a POINTER or "
       "a TARGET", &cons->expr->where, comp->name);
 }

      if (init)
 {

   if (a.allocatable)
     {
       t = false;
       gfc_error ("Pointer initialization target at %L "
    "must not be ALLOCATABLE", &cons->expr->where);
     }
   if (!a.save)
     {
       t = false;
       gfc_error ("Pointer initialization target at %L "
    "must have the SAVE attribute", &cons->expr->where);
     }
 }


      bool impure = cons->expr->expr_type == EXPR_VARIABLE
      && (gfc_impure_variable (cons->expr->symtree->n.sym)
   || gfc_is_coindexed (cons->expr));
      if (impure && gfc_pure (
# 1474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             __null
# 1474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                 ))
 {
   t = false;
   gfc_error ("Invalid expression in the structure constructor for "
       "pointer component %qs at %L in PURE procedure",
       comp->name, &cons->expr->where);
 }

      if (impure)
 gfc_unset_implicit_pure (
# 1483 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 1483 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             );
    }

  return t;
}







static int
was_declared (gfc_symbol *sym)
{
  symbol_attribute a;

  a = sym->attr;

  if (!a.implicit_type && sym->ts.type != BT_UNKNOWN)
    return 1;

  if (a.allocatable || a.dimension || a.dummy || a.external || a.intrinsic
      || a.optional || a.pointer || a.save || a.target || a.volatile_
      || a.value || a.access != ACCESS_UNKNOWN || a.intent != INTENT_UNKNOWN
      || a.asynchronous || a.codimension)
    return 1;

  return 0;
}




static int
generic_sym (gfc_symbol *sym)
{
  gfc_symbol *s;

  if (sym->attr.generic ||
      (sym->attr.intrinsic && gfc_generic_intrinsic (sym->name)))
    return 1;

  if (was_declared (sym) || sym->ns->parent == 
# 1526 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                              __null
# 1526 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                  )
    return 0;

  gfc_find_symbol (sym->name, sym->ns->parent, 1, &s);

  if (s != 
# 1531 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 1531 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              )
    {
      if (s == sym)
 return 0;
      else
 return generic_sym (s);
    }

  return 0;
}




static int
specific_sym (gfc_symbol *sym)
{
  gfc_symbol *s;

  if (sym->attr.if_source == IFSRC_IFBODY
      || sym->attr.proc == PROC_MODULE
      || sym->attr.proc == PROC_INTERNAL
      || sym->attr.proc == PROC_ST_FUNCTION
      || (sym->attr.intrinsic && gfc_specific_intrinsic (sym->name))
      || sym->attr.external)
    return 1;

  if (was_declared (sym) || sym->ns->parent == 
# 1558 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                              __null
# 1558 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                  )
    return 0;

  gfc_find_symbol (sym->name, sym->ns->parent, 1, &s);

  return (s == 
# 1563 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 1563 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  ) ? 0 : specific_sym (s);
}




enum proc_type
{ PTYPE_GENERIC = 1, PTYPE_SPECIFIC, PTYPE_UNKNOWN };

static proc_type
procedure_kind (gfc_symbol *sym)
{
  if (generic_sym (sym))
    return PTYPE_GENERIC;

  if (specific_sym (sym))
    return PTYPE_SPECIFIC;

  return PTYPE_UNKNOWN;
}




static int need_full_assumed_size = 0;

static bool
check_assumed_size_reference (gfc_symbol *sym, gfc_expr *e)
{
  if (need_full_assumed_size || !(sym->as && sym->as->type == AS_ASSUMED_SIZE))
      return false;



  if (e->ref && (e->ref->u.ar.end[e->ref->u.ar.as->rank - 1] == 
# 1597 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                               __null
# 1597 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                   )
   && (e->ref->u.ar.as->type == AS_ASSUMED_SIZE)
        && (e->ref->u.ar.type == AR_FULL))
    {
      gfc_error ("The upper bound in the last dimension must "
   "appear in the reference to the assumed size "
   "array %qs at %L", sym->name, &e->where);
      return true;
    }
  return false;
}







static bool
resolve_assumed_size_actual (gfc_expr *e)
{
  if (e == 
# 1618 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 1618 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              )
   return false;

  switch (e->expr_type)
    {
    case EXPR_VARIABLE:
      if (e->symtree && check_assumed_size_reference (e->symtree->n.sym, e))
 return true;
      break;

    case EXPR_OP:
      if (resolve_assumed_size_actual (e->value.op.op1)
   || resolve_assumed_size_actual (e->value.op.op2))
 return true;
      break;

    default:
      break;
    }
  return false;
}





static int
count_specific_procs (gfc_expr *e)
{
  int n;
  gfc_interface *p;
  gfc_symbol *sym;

  n = 0;
  sym = e->symtree->n.sym;

  for (p = sym->generic; p; p = p->next)
    if (strcmp (sym->name, p->sym->name) == 0)
      {
 e->symtree = gfc_find_symtree (p->sym->ns->sym_root,
           sym->name);
 n++;
      }

  if (n > 1)
    gfc_error ("%qs at %L is ambiguous", e->symtree->n.sym->name,
        &e->where);

  if (n == 0)
    gfc_error ("GENERIC procedure %qs is not allowed as an actual "
        "argument at %L", sym->name, &e->where);

  return n;
}
# 1680 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static bool
is_illegal_recursion (gfc_symbol* sym, gfc_namespace* context)
{
  gfc_symbol* proc_sym;
  gfc_symbol* context_proc;
  gfc_namespace* real_context;

  if (sym->attr.flavor == FL_PROGRAM
      || ((sym->attr.flavor) == FL_DERIVED || (sym->attr.flavor) == FL_UNION || (sym->attr.flavor) == FL_STRUCT))
    return false;


  if (sym->attr.entry && sym->ns->entries)
    proc_sym = sym->ns->entries->sym;
  else
    proc_sym = sym;


  if (proc_sym->attr.recursive || global_options.x_flag_recursive)
    return false;




  for (real_context = context; ; real_context = real_context->parent)
    {

      ((void)(!(real_context) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 1707, __FUNCTION__), 0 : 0));

      context_proc = (real_context->entries ? real_context->entries->sym
         : real_context->proc_name);







      if (!context_proc)
 return false;

      if (context_proc->attr.flavor != FL_LABEL)
 break;
    }


  if (context_proc == proc_sym)
    return true;



  if (context_proc->attr.contained)
    {
      gfc_symbol* parent_proc;

      ((void)(!(context->parent) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 1735, __FUNCTION__), 0 : 0));
      parent_proc = (context->parent->entries ? context->parent->entries->sym
           : context->parent->proc_name);

      if (parent_proc == proc_sym)
 return true;
    }

  return false;
}





bool
gfc_resolve_intrinsic (gfc_symbol *sym, locus *loc)
{
  gfc_intrinsic_sym* isym = 
# 1753 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 1753 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;
  const char* symstd;

  if (sym->resolve_symbol_called >= 2)
    return true;

  sym->resolve_symbol_called = 2;


  if (sym->from_intmod && sym->ts.type != BT_UNKNOWN)
    return true;






  if (sym->intmod_sym_id && sym->attr.subroutine)
    {
      gfc_isym_id id = gfc_isym_id_by_intmod_sym (sym);
      isym = gfc_intrinsic_subroutine_by_id (id);
    }
  else if (sym->intmod_sym_id)
    {
      gfc_isym_id id = gfc_isym_id_by_intmod_sym (sym);
      isym = gfc_intrinsic_function_by_id (id);
    }
  else if (!sym->attr.subroutine)
    isym = gfc_find_function (sym->name);

  if (isym && !sym->attr.subroutine)
    {
      if (sym->ts.type != BT_UNKNOWN && global_options.x_warn_surprising
   && !sym->attr.implicit_type)
 gfc_warning (OPT_Wsurprising,
       "Type specified for intrinsic function %qs at %L is"
        " ignored", sym->name, &sym->declared_at);

      if (!sym->attr.function &&
   !gfc_add_function(&sym->attr, sym->name, loc))
 return false;

      sym->ts = isym->ts;
    }
  else if (isym || (isym = gfc_find_subroutine (sym->name)))
    {
      if (sym->ts.type != BT_UNKNOWN && !sym->attr.implicit_type)
 {
   gfc_error ("Intrinsic subroutine %qs at %L shall not have a type"
        " specifier", sym->name, &sym->declared_at);
   return false;
 }

      if (!sym->attr.subroutine &&
   !gfc_add_subroutine(&sym->attr, sym->name, loc))
 return false;
    }
  else
    {
      gfc_error ("%qs declared INTRINSIC at %L does not exist", sym->name,
   &sym->declared_at);
      return false;
    }

  gfc_copy_formal_args_intr (sym, isym, 
# 1817 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                       __null
# 1817 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                           );

  sym->attr.pure = isym->pure;
  sym->attr.elemental = isym->elemental;


  if (!gfc_check_intrinsic_standard (isym, &symstd, false, sym->declared_at))
    {
      gfc_error ("The intrinsic %qs declared INTRINSIC at %L is not "
   "available in the current standard settings but %s. Use "
   "an appropriate %<-std=*%> option or enable "
   "%<-fall-intrinsics%> in order to use it.",
   sym->name, &sym->declared_at, symstd);
      return false;
    }

  return true;
}





static bool
resolve_procedure_expression (gfc_expr* expr)
{
  gfc_symbol* sym;

  if (expr->expr_type != EXPR_VARIABLE)
    return true;
  ((void)(!(expr->symtree) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 1847, __FUNCTION__), 0 : 0));

  sym = expr->symtree->n.sym;

  if (sym->attr.intrinsic)
    gfc_resolve_intrinsic (sym, &expr->where);

  if (sym->attr.flavor != FL_PROCEDURE
      || (sym->attr.function && sym->result == sym))
    return true;



  if (is_illegal_recursion (sym, gfc_current_ns))
    gfc_warning (0, "Non-RECURSIVE procedure %qs at %L is possibly calling"
   " itself recursively.  Declare it RECURSIVE or use"
   " %<-frecursive%>", sym->name, &expr->where);

  return true;
}




static bool
is_dt_name (const char *name)
{
  gfc_symbol *dt_list, *dt_first;

  dt_list = dt_first = gfc_derived_types;
  for (; dt_list; dt_list = dt_list->dt_next)
    {
      if (strcmp(dt_list->name, name) == 0)
 return true;
      if (dt_first == dt_list->dt_next)
 break;
    }
  return false;
}
# 1894 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static bool
resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,
   bool no_formal_args)
{
  gfc_symbol *sym;
  gfc_symtree *parent_st;
  gfc_expr *e;
  gfc_component *comp;
  int save_need_full_assumed_size;
  bool return_value = false;
  bool actual_arg_sav = actual_arg, first_actual_arg_sav = first_actual_arg;

  actual_arg = true;
  first_actual_arg = true;

  for (; arg; arg = arg->next)
    {
      e = arg->expr;
      if (e == 
# 1912 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 1912 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
 {

   if (arg->label)
     {
       if (arg->label->defined == ST_LABEL_UNKNOWN)
  {
    gfc_error ("Label %d referenced at %L is never defined",
        arg->label->value, &arg->label->where);
    goto cleanup;
  }
     }
   first_actual_arg = false;
   continue;
 }

      if (e->expr_type == EXPR_VARIABLE
     && e->symtree->n.sym->attr.generic
     && no_formal_args
     && count_specific_procs (e) != 1)
 goto cleanup;

      if (e->ts.type != BT_PROCEDURE)
 {
   save_need_full_assumed_size = need_full_assumed_size;
   if (e->expr_type != EXPR_VARIABLE)
     need_full_assumed_size = 0;
   if (!gfc_resolve_expr (e))
     goto cleanup;
   need_full_assumed_size = save_need_full_assumed_size;
   goto argument_list;
 }



      sym = e->symtree->n.sym;

      if (sym->attr.flavor == FL_PROCEDURE && is_dt_name (sym->name))
 {
   gfc_error ("Derived type %qs is used as an actual "
       "argument at %L", sym->name, &e->where);
   goto cleanup;
 }

      if (sym->attr.flavor == FL_PROCEDURE
   || sym->attr.intrinsic
   || sym->attr.external)
 {
   int actual_ok;



   if (gfc_is_intrinsic (sym, sym->attr.subroutine, e->where))
     sym->attr.intrinsic = 1;

   if (sym->attr.proc == PROC_ST_FUNCTION)
     {
       gfc_error ("Statement function %qs at %L is not allowed as an "
    "actual argument", sym->name, &e->where);
     }

   actual_ok = gfc_intrinsic_actual_ok (sym->name,
            sym->attr.subroutine);
   if (sym->attr.intrinsic && actual_ok == 0)
     {
       gfc_error ("Intrinsic %qs at %L is not allowed as an "
    "actual argument", sym->name, &e->where);
     }

   if (sym->attr.contained && !sym->attr.use_assoc
       && sym->ns->proc_name->attr.flavor != FL_MODULE)
     {
       if (!gfc_notify_std ((1<<7), "Internal procedure %qs is"
       " used as actual argument at %L",
       sym->name, &e->where))
  goto cleanup;
     }

   if (sym->attr.elemental && !sym->attr.intrinsic)
     {
       gfc_error ("ELEMENTAL non-INTRINSIC procedure %qs is not "
    "allowed as an actual argument at %L", sym->name,
    &e->where);
     }



   if (sym->attr.generic && count_specific_procs (e) != 1)
     goto cleanup;


   sym = e->symtree->n.sym;




   if (gfc_is_function_return_value (sym, sym->ns))
     goto got_variable;


   if (sym->ts.type == BT_UNKNOWN && sym->attr.intrinsic)
     {
       gfc_intrinsic_sym *isym;

       isym = gfc_find_function (sym->name);
       if (isym == 
# 2017 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null 
# 2017 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       || !isym->specific)
  {
    gfc_error ("Unable to find a specific INTRINSIC procedure "
        "for the reference %qs at %L", sym->name,
        &e->where);
    goto cleanup;
  }
       sym->ts = isym->ts;
       sym->attr.intrinsic = 1;
       sym->attr.function = 1;
     }

   if (!gfc_resolve_expr (e))
     goto cleanup;
   goto argument_list;
 }



      if (was_declared (sym) || sym->ns->parent == 
# 2036 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                  __null
# 2036 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                      )
 goto got_variable;

      if (gfc_find_sym_tree (sym->name, sym->ns->parent, 1, &parent_st))
 {
   gfc_error ("Symbol %qs at %L is ambiguous", sym->name, &e->where);
   goto cleanup;
 }

      if (parent_st == 
# 2045 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 2045 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          )
 goto got_variable;

      sym = parent_st->n.sym;
      e->symtree = parent_st;

      if (sym->attr.flavor == FL_PROCEDURE
   || sym->attr.intrinsic
   || sym->attr.external)
 {
   if (!gfc_resolve_expr (e))
     goto cleanup;
   goto argument_list;
 }

    got_variable:
      e->expr_type = EXPR_VARIABLE;
      e->ts = sym->ts;
      if ((sym->as != 
# 2063 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null 
# 2063 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          && sym->ts.type != BT_CLASS)
   || (sym->ts.type == BT_CLASS && sym->attr.class_ok
       && sym->ts.u.derived->components->as))
 {
   e->rank = sym->ts.type == BT_CLASS
      ? sym->ts.u.derived->components->as->rank : sym->as->rank;
   e->ref = ((gfc_ref *) xcalloc (1, sizeof (gfc_ref)));
   e->ref->type = REF_ARRAY;
   e->ref->u.ar.type = AR_FULL;
   e->ref->u.ar.as = sym->ts.type == BT_CLASS
       ? sym->ts.u.derived->components->as : sym->as;
 }





      save_need_full_assumed_size = need_full_assumed_size;
      if (e->expr_type != EXPR_VARIABLE)
 need_full_assumed_size = 0;
      if (!gfc_resolve_expr (e))
 goto cleanup;
      need_full_assumed_size = save_need_full_assumed_size;

    argument_list:


      if (arg->name && arg->name[0] == '%')
 {
   if (strcmp ("%VAL", arg->name) == 0)
     {
       if (e->ts.type == BT_CHARACTER || e->ts.type == BT_DERIVED)
  {
    gfc_error ("By-value argument at %L is not of numeric "
        "type", &e->where);
    goto cleanup;
  }

       if (e->rank)
  {
    gfc_error ("By-value argument at %L cannot be an array or "
        "an array section", &e->where);
    goto cleanup;
  }





       if (ptype != PROC_UNKNOWN
    && ptype != PROC_DUMMY
    && ptype != PROC_EXTERNAL
    && ptype != PROC_MODULE)
  {
    gfc_error ("By-value argument at %L is not allowed "
        "in this context", &e->where);
    goto cleanup;
  }
     }


   else if (strcmp ("%LOC", arg->name) == 0
     && e->ts.type == BT_PROCEDURE)
     {
       if (e->symtree->n.sym->attr.proc == PROC_INTERNAL)
  {
    gfc_error ("Passing internal procedure at %L by location "
        "not allowed", &e->where);
    goto cleanup;
  }
     }
 }

      comp = gfc_get_proc_ptr_comp(e);
      if (e->expr_type == EXPR_VARIABLE
   && comp && comp->attr.elemental)
 {
     gfc_error ("ELEMENTAL procedure pointer component %qs is not "
         "allowed as an actual argument at %L", comp->name,
         &e->where);
 }


      if (e->expr_type == EXPR_VARIABLE && gfc_is_coindexed (e)
   && gfc_has_ultimate_pointer (e))
 {
   gfc_error ("Coindexed actual argument at %L with ultimate pointer "
       "component", &e->where);
   goto cleanup;
 }

      first_actual_arg = false;
    }

  return_value = true;

cleanup:
  actual_arg = actual_arg_sav;
  first_actual_arg = first_actual_arg_sav;

  return return_value;
}






static bool
resolve_elemental_actual (gfc_expr *expr, gfc_code *c)
{
  gfc_actual_arglist *arg0;
  gfc_actual_arglist *arg;
  gfc_symbol *esym = 
# 2176 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 2176 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ;
  gfc_intrinsic_sym *isym = 
# 2177 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 2177 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;
  gfc_expr *e = 
# 2178 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 2178 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
  gfc_intrinsic_arg *iformal = 
# 2179 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 2179 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  ;
  gfc_formal_arglist *eformal = 
# 2180 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null
# 2180 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                   ;
  bool formal_optional = false;
  bool set_by_optional = false;
  int i;
  int rank = 0;


  if (expr && expr->value.function.actual != 
# 2187 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                            __null
# 2187 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                )
    {
      if (expr->value.function.esym != 
# 2189 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                      __null
   
# 2190 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && expr->value.function.esym->attr.elemental)
 {
   arg0 = expr->value.function.actual;
   esym = expr->value.function.esym;
 }
      else if (expr->value.function.isym != 
# 2195 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                           __null
        
# 2196 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       && expr->value.function.isym->elemental)
 {
   arg0 = expr->value.function.actual;
   isym = expr->value.function.isym;
 }
      else
 return true;
    }
  else if (c && c->ext.actual != 
# 2204 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
# 2204 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    )
    {
      arg0 = c->ext.actual;

      if (c->resolved_sym)
 esym = c->resolved_sym;
      else
 esym = c->symtree->n.sym;
      ((void)(!(esym) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 2212, __FUNCTION__), 0 : 0));

      if (!esym->attr.elemental)
 return true;
    }
  else
    return true;


  for (arg = arg0; arg; arg = arg->next)
    {
      if (arg->expr != 
# 2223 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null 
# 2223 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           && arg->expr->rank != 0)
 {
   rank = arg->expr->rank;
   if (arg->expr->expr_type == EXPR_VARIABLE
       && arg->expr->symtree->n.sym->attr.optional)
     set_by_optional = true;


   if (expr)
     {
       expr->rank = rank;
       if (!expr->shape && arg->expr->shape)
  {
    expr->shape = (((mpz_t *) xcalloc (((rank)), sizeof (mpz_t))));
    for (i = 0; i < rank; i++)
      
# 2238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_init_set 
# 2238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  (expr->shape[i], arg->expr->shape[i]);
  }
     }
   break;
 }
    }





  formal_optional = false;
  if (isym)
    iformal = isym->formal;
  else
    eformal = esym->formal;

  for (arg = arg0; arg; arg = arg->next)
    {
      if (eformal)
 {
   if (eformal->sym && eformal->sym->attr.optional)
     formal_optional = true;
   eformal = eformal->next;
 }
      else if (isym && iformal)
 {
   if (iformal->optional)
     formal_optional = true;
   iformal = iformal->next;
 }
      else if (isym)
 formal_optional = true;

      if (global_options.x_pedantic && arg->expr != 
# 2272 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
   
# 2273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && arg->expr->expr_type == EXPR_VARIABLE
   && arg->expr->symtree->n.sym->attr.optional
   && formal_optional
   && arg->expr->rank
   && (set_by_optional || arg->expr->rank != rank)
   && !(isym && isym->id == GFC_ISYM_CONVERSION))
 {
   bool t = false;
   gfc_actual_arglist *a;



   for (a = arg0; a; a = a->next)
     if (a != arg
  && a->expr->rank == arg->expr->rank
  && !a->expr->symtree->n.sym->attr.optional)
       {
  t = true;
  break;
       }

   if (!t)
     gfc_warning (OPT_Wpedantic,
    "%qs at %L is an array and OPTIONAL; If it is not "
    "present, then it cannot be the actual argument of "
    "an ELEMENTAL procedure unless there is a non-optional"
    " argument with the same rank "
    "(Fortran 2018, 15.5.2.12)",
    arg->expr->symtree->n.sym->name, &arg->expr->where);
 }
    }

  for (arg = arg0; arg; arg = arg->next)
    {
      if (arg->expr == 
# 2307 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null 
# 2307 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           || arg->expr->rank == 0)
 continue;



      if (resolve_assumed_size_actual (arg->expr))
 return false;


      if (e != 
# 2316 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 2316 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
 {
   if (!gfc_check_conformance (arg->expr, e, gettext ("elemental procedure")))
     return false;
 }
      else
 e = arg->expr;
    }



  if (rank > 0 && esym && expr == 
# 2327 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                 __null
# 2327 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                     )
    for (eformal = esym->formal, arg = arg0; arg && eformal;
  arg = arg->next, eformal = eformal->next)
      if ((eformal->sym->attr.intent == INTENT_OUT
    || eformal->sym->attr.intent == INTENT_INOUT)
   && arg->expr && arg->expr->rank == 0)
 {
   gfc_error ("Actual argument at %L for INTENT(%s) dummy %qs of "
       "ELEMENTAL subroutine %qs is a scalar, but another "
       "actual argument is an array", &arg->expr->where,
       (eformal->sym->attr.intent == INTENT_OUT) ? "OUT"
       : "INOUT", eformal->sym->name, esym->name);
   return false;
 }
  return true;
}
# 2360 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static bool
not_in_recursive (gfc_symbol *sym, gfc_namespace *gsym_ns)
{
  if (!gsym_ns->proc_name->attr.recursive)
    return true;

  if (sym->ns == gsym_ns)
    return false;

  if (sym->ns->parent && sym->ns->parent == gsym_ns)
    return false;

  return true;
}

static bool
not_entry_self_reference (gfc_symbol *sym, gfc_namespace *gsym_ns)
{
  if (gsym_ns->entries)
    {
      gfc_entry_list *entry = gsym_ns->entries;

      for (; entry; entry = entry->next)
 {
   if (strcmp (sym->name, entry->sym->name) == 0)
     {
       if (strcmp (gsym_ns->proc_name->name,
     sym->ns->proc_name->name) == 0)
  return false;

       if (sym->ns->parent
    && strcmp (gsym_ns->proc_name->name,
        sym->ns->parent->proc_name->name) == 0)
  return false;
     }
 }
    }
  return true;
}




bool
gfc_explicit_interface_required (gfc_symbol *sym, char *errmsg, int err_len)
{
  gfc_formal_arglist *arg = gfc_sym_get_dummy_args (sym);

  for ( ; arg; arg = arg->next)
    {
      if (!arg->sym)
 continue;

      if (arg->sym->attr.allocatable)
 {
   strncpy (errmsg, gettext ("allocatable argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.asynchronous)
 {
   strncpy (errmsg, gettext ("asynchronous argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.optional)
 {
   strncpy (errmsg, gettext ("optional argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.pointer)
 {
   strncpy (errmsg, gettext ("pointer argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.target)
 {
   strncpy (errmsg, gettext ("target argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.value)
 {
   strncpy (errmsg, gettext ("value argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.volatile_)
 {
   strncpy (errmsg, gettext ("volatile argument"), err_len);
   return true;
 }
      else if (arg->sym->as && arg->sym->as->type == AS_ASSUMED_SHAPE)
 {
   strncpy (errmsg, gettext ("assumed-shape argument"), err_len);
   return true;
 }
      else if (arg->sym->as && arg->sym->as->type == AS_ASSUMED_RANK)
 {
   strncpy (errmsg, gettext ("assumed-rank argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.codimension)
 {
   strncpy (errmsg, gettext ("coarray argument"), err_len);
   return true;
 }
      else if (false)
 {
   strncpy (errmsg, gettext ("parametrized derived type argument"), err_len);
   return true;
 }
      else if (arg->sym->ts.type == BT_CLASS)
 {
   strncpy (errmsg, gettext ("polymorphic argument"), err_len);
   return true;
 }
      else if (arg->sym->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))
 {
   strncpy (errmsg, gettext ("NO_ARG_CHECK attribute"), err_len);
   return true;
 }
      else if (arg->sym->ts.type == BT_ASSUMED)
 {


   strncpy (errmsg, gettext ("assumed-type argument"), err_len);
   return true;
 }
    }

  if (sym->attr.function)
    {
      gfc_symbol *res = sym->result ? sym->result : sym;

      if (res->attr.dimension)
 {
   strncpy (errmsg, gettext ("array result"), err_len);
   return true;
 }
      else if (res->attr.pointer || res->attr.allocatable)
 {
   strncpy (errmsg, gettext ("pointer or allocatable result"), err_len);
   return true;
 }
      else if (res->ts.type == BT_CHARACTER && res->ts.u.cl
        && res->ts.u.cl->length
        && res->ts.u.cl->length->expr_type != EXPR_CONSTANT)
 {
   strncpy (errmsg, gettext ("result with non-constant character length"), err_len);
   return true;
 }
    }

  if (sym->attr.elemental && !sym->attr.intrinsic)
    {
      strncpy (errmsg, gettext ("elemental procedure"), err_len);
      return true;
    }
  else if (sym->attr.is_bind_c)
    {
      strncpy (errmsg, gettext ("bind(c) procedure"), err_len);
      return true;
    }

  return false;
}


static void
resolve_global_procedure (gfc_symbol *sym, locus *where, int sub)
{
  gfc_gsymbol * gsym;
  gfc_namespace *ns;
  enum gfc_symbol_type type;
  char reason[200];

  type = sub ? GSYM_SUBROUTINE : GSYM_FUNCTION;

  gsym = gfc_get_gsymbol (sym->binding_label ? sym->binding_label : sym->name,
     sym->binding_label != 
# 2536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 2536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              );

  if ((gsym->type != GSYM_UNKNOWN && gsym->type != type))
    gfc_global_used (gsym, where);

  if ((sym->attr.if_source == IFSRC_UNKNOWN
       || sym->attr.if_source == IFSRC_IFBODY)
      && gsym->type != GSYM_UNKNOWN
      && !gsym->binding_label
      && gsym->ns
      && gsym->ns->proc_name
      && not_in_recursive (sym, gsym->ns)
      && not_entry_self_reference (sym, gsym->ns))
    {
      gfc_symbol *def_sym;
      def_sym = gsym->ns->proc_name;

      if (gsym->ns->resolved != -1)
 {


   if (!gsym->ns->resolved)
     {
       gfc_symbol *old_dt_list;



       old_dt_list = gfc_derived_types;
       gfc_derived_types = 
# 2564 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 2564 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;

       gfc_resolve (gsym->ns);


       if (gfc_derived_types)
  gsym->ns->derived_types = gfc_derived_types;


       gfc_derived_types = old_dt_list;
     }



   ns = gfc_global_ns_list;
   for (; ns && ns != gsym->ns; ns = ns->sibling)
     {
       if (ns->sibling == gsym->ns)
  {
    ns->sibling = gsym->ns->sibling;
    gsym->ns->sibling = gfc_global_ns_list;
    gfc_global_ns_list = gsym->ns;
    break;
  }
     }


   if (gsym->binding_label && gsym->sym_name != def_sym->name)
     gfc_find_symbol (gsym->sym_name, gsym->ns, 0, &def_sym);

   if (def_sym->attr.entry_master || def_sym->attr.entry)
     {
       gfc_entry_list *entry;
       for (entry = gsym->ns->entries; entry; entry = entry->next)
  if (strcmp (entry->sym->name, sym->name) == 0)
    {
      def_sym = entry->sym;
      break;
    }
     }
 }

      if (sym->attr.function && !gfc_compare_types (&sym->ts, &def_sym->ts))
 {
   gfc_error ("Return type mismatch of function %qs at %L (%s/%s)",
       sym->name, &sym->declared_at, gfc_typename (&sym->ts),
       gfc_typename (&def_sym->ts));
   goto done;
 }

      if (sym->attr.if_source == IFSRC_UNKNOWN
   && gfc_explicit_interface_required (def_sym, reason, sizeof(reason)))
 {
   gfc_error ("Explicit interface required for %qs at %L: %s",
       sym->name, &sym->declared_at, reason);
   goto done;
 }

      bool bad_result_characteristics;
      if (!gfc_compare_interfaces (sym, def_sym, sym->name, 0, 1,
       reason, sizeof(reason), 
# 2624 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 2624 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  , 
# 2624 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                    __null
# 2624 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        ,
       &bad_result_characteristics))
 {




   if (!global_options.x_pedantic && (gfc_option.allow_std & (1<<5))
       && !bad_result_characteristics)
     gfc_errors_to_warnings (true);

   gfc_error ("Interface mismatch in global procedure %qs at %L: %s",
       sym->name, &sym->declared_at, reason);
   sym->error = 1;
   gfc_errors_to_warnings (false);
   goto done;
 }
    }

done:

  if (gsym->type == GSYM_UNKNOWN)
    {
      gsym->type = type;
      gsym->where = *where;
    }

  gsym->used = 1;
}







static match
resolve_generic_f0 (gfc_expr *expr, gfc_symbol *sym)
{
  gfc_symbol *s;

  if (sym->attr.generic)
    {
      s = gfc_search_interface (sym->generic, 0, &expr->value.function.actual);
      if (s != 
# 2668 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 2668 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
 {
   expr->value.function.name = s->name;
   expr->value.function.esym = s;

   if (s->ts.type != BT_UNKNOWN)
     expr->ts = s->ts;
   else if (s->result != 
# 2675 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null 
# 2675 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             && s->result->ts.type != BT_UNKNOWN)
     expr->ts = s->result->ts;

   if (s->as != 
# 2678 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 2678 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   )
     expr->rank = s->as->rank;
   else if (s->result != 
# 2680 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null 
# 2680 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             && s->result->as != 
# 2680 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                 __null
# 2680 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                     )
     expr->rank = s->result->as->rank;

   gfc_set_sym_referenced (expr->value.function.esym);

   return MATCH_YES;
 }



    }

  if (sym->attr.intrinsic)
    return gfc_intrinsic_func_interface (expr, 0);

  return MATCH_NO;
}


static bool
resolve_generic_f (gfc_expr *expr)
{
  gfc_symbol *sym;
  match m;
  gfc_interface *intr = 
# 2704 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 2704 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           ;

  sym = expr->symtree->n.sym;

  for (;;)
    {
      m = resolve_generic_f0 (expr, sym);
      if (m == MATCH_YES)
 return true;
      else if (m == MATCH_ERROR)
 return false;

generic:
      if (!intr)
 for (intr = sym->generic; intr; intr = intr->next)
   if (((intr->sym->attr.flavor) == FL_DERIVED || (intr->sym->attr.flavor) == FL_UNION || (intr->sym->attr.flavor) == FL_STRUCT))
     break;

      if (sym->ns->parent == 
# 2722 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 2722 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                )
 break;
      gfc_find_symbol (sym->name, sym->ns->parent, 1, &sym);

      if (sym == 
# 2726 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 2726 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
 break;
      if (!generic_sym (sym))
 goto generic;
    }



  if (sym && !intr && !gfc_is_intrinsic (sym, 0, expr->where))
    {
      if (gfc_init_expr_flag)
 gfc_error ("Function %qs in initialization expression at %L "
     "must be an intrinsic function",
     expr->symtree->n.sym->name, &expr->where);
      else
 gfc_error ("There is no specific function for the generic %qs "
     "at %L", expr->symtree->n.sym->name, &expr->where);
      return false;
    }

  if (intr)
    {
      if (!gfc_convert_to_structure_constructor (expr, intr->sym, 
# 2748 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                 __null
# 2748 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                     ,
       
# 2749 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __null
# 2749 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          , false))
 return false;
      if (!gfc_use_derived (expr->ts.u.derived))
 return false;
      return resolve_structure_cons (expr, 0);
    }

  m = gfc_intrinsic_func_interface (expr, 0);
  if (m == MATCH_YES)
    return true;

  if (m == MATCH_NO)
    gfc_error ("Generic function %qs at %L is not consistent with a "
        "specific intrinsic interface", expr->symtree->n.sym->name,
        &expr->where);

  return false;
}




static match
resolve_specific_f0 (gfc_symbol *sym, gfc_expr *expr)
{
  match m;

  if (sym->attr.external || sym->attr.if_source == IFSRC_IFBODY)
    {
      if (sym->attr.dummy)
 {
   sym->attr.proc = PROC_DUMMY;
   goto found;
 }

      sym->attr.proc = PROC_EXTERNAL;
      goto found;
    }

  if (sym->attr.proc == PROC_MODULE
      || sym->attr.proc == PROC_ST_FUNCTION
      || sym->attr.proc == PROC_INTERNAL)
    goto found;

  if (sym->attr.intrinsic)
    {
      m = gfc_intrinsic_func_interface (expr, 1);
      if (m == MATCH_YES)
 return MATCH_YES;
      if (m == MATCH_NO)
 gfc_error ("Function %qs at %L is INTRINSIC but is not compatible "
     "with an intrinsic", sym->name, &expr->where);

      return MATCH_ERROR;
    }

  return MATCH_NO;

found:
  gfc_procedure_use (sym, &expr->value.function.actual, &expr->where);

  if (sym->result)
    expr->ts = sym->result->ts;
  else
    expr->ts = sym->ts;
  expr->value.function.name = sym->name;
  expr->value.function.esym = sym;


  if (sym->ts.type == BT_CLASS && !sym->ts.u.derived->components)
    return MATCH_ERROR;
  if (sym->ts.type == BT_CLASS && sym->ts.u.derived->components->as)
    expr->rank = sym->ts.u.derived->components->as->rank;
  else if (sym->as != 
# 2822 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 2822 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
    expr->rank = sym->as->rank;

  return MATCH_YES;
}


static bool
resolve_specific_f (gfc_expr *expr)
{
  gfc_symbol *sym;
  match m;

  sym = expr->symtree->n.sym;

  for (;;)
    {
      m = resolve_specific_f0 (sym, expr);
      if (m == MATCH_YES)
 return true;
      if (m == MATCH_ERROR)
 return false;

      if (sym->ns->parent == 
# 2845 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 2845 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                )
 break;

      gfc_find_symbol (sym->name, sym->ns->parent, 1, &sym);

      if (sym == 
# 2850 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 2850 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
 break;
    }

  gfc_error ("Unable to resolve the specific function %qs at %L",
      expr->symtree->n.sym->name, &expr->where);

  return true;
}




static void
lookup_function_fuzzy_find_candidates (gfc_symtree *sym,
           char **&candidates,
           size_t &candidates_len)
{
  gfc_symtree *p;

  if (sym == 
# 2870 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 2870 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    return;
  if ((sym->n.sym->ts.type != BT_UNKNOWN || sym->n.sym->attr.external)
      && sym->n.sym->attr.flavor == FL_PROCEDURE)
    vec_push (candidates, candidates_len, sym->name);

  p = sym->left;
  if (p)
    lookup_function_fuzzy_find_candidates (p, candidates, candidates_len);

  p = sym->right;
  if (p)
    lookup_function_fuzzy_find_candidates (p, candidates, candidates_len);
}




const char*
gfc_lookup_function_fuzzy (const char *fn, gfc_symtree *symroot)
{
  char **candidates = 
# 2891 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 2891 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         ;
  size_t candidates_len = 0;
  lookup_function_fuzzy_find_candidates (symroot, candidates, candidates_len);
  return gfc_closest_fuzzy_match (fn, candidates);
}




static bool
resolve_unknown_f (gfc_expr *expr)
{
  gfc_symbol *sym;
  gfc_typespec *ts;

  sym = expr->symtree->n.sym;

  if (sym->attr.dummy)
    {
      sym->attr.proc = PROC_DUMMY;
      expr->value.function.name = sym->name;
      goto set_type;
    }



  if (gfc_is_intrinsic (sym, 0, expr->where))
    {
      if (gfc_intrinsic_func_interface (expr, 1) == MATCH_YES)
 return true;
      return false;
    }



  sym->attr.proc = PROC_EXTERNAL;
  expr->value.function.name = sym->name;
  expr->value.function.esym = expr->symtree->n.sym;

  if (sym->as != 
# 2930 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 2930 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
    expr->rank = sym->as->rank;




set_type:
  gfc_procedure_use (sym, &expr->value.function.actual, &expr->where);

  if (sym->ts.type != BT_UNKNOWN)
    expr->ts = sym->ts;
  else
    {
      ts = gfc_get_default_type (sym->name, sym->ns);

      if (ts->type == BT_UNKNOWN)
 {
   const char *guessed
     = gfc_lookup_function_fuzzy (sym->name, sym->ns->sym_root);
   if (guessed)
     gfc_error ("Function %qs at %L has no IMPLICIT type"
         "; did you mean %qs?",
         sym->name, &expr->where, guessed);
   else
     gfc_error ("Function %qs at %L has no IMPLICIT type",
         sym->name, &expr->where);
   return false;
 }
      else
 expr->ts = *ts;
    }

  return true;
}



static bool
is_external_proc (gfc_symbol *sym)
{
  if (!sym->attr.dummy && !sym->attr.contained
 && !gfc_is_intrinsic (sym, sym->attr.subroutine, sym->declared_at)
 && sym->attr.proc != PROC_ST_FUNCTION
 && !sym->attr.proc_pointer
 && !sym->attr.use_assoc
 && sym->name)
    return true;

  return false;
}





static int
pure_stmt_function (gfc_expr *, gfc_symbol *);

int
gfc_pure_function (gfc_expr *e, const char **name)
{
  int pure;
  gfc_component *comp;

  *name = 
# 2994 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null
# 2994 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             ;

  if (e->symtree != 
# 2996 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
        
# 2997 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       && e->symtree->n.sym != 
# 2997 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null
        
# 2998 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       && e->symtree->n.sym->attr.proc == PROC_ST_FUNCTION)
    return pure_stmt_function (e, e->symtree->n.sym);

  comp = gfc_get_proc_ptr_comp (e);
  if (comp)
    {
      pure = gfc_pure (comp->ts.interface);
      *name = comp->name;
    }
  else if (e->value.function.esym)
    {
      pure = gfc_pure (e->value.function.esym);
      *name = e->value.function.esym->name;
    }
  else if (e->value.function.isym)
    {
      pure = e->value.function.isym->pure
      || e->value.function.isym->elemental;
      *name = e->value.function.isym->name;
    }
  else
    {

      pure = 0;
      *name = e->value.function.name;
    }

  return pure;
}




int
gfc_implicit_pure_function (gfc_expr *e)
{
  gfc_component *comp = gfc_get_proc_ptr_comp (e);
  if (comp)
    return gfc_implicit_pure (comp->ts.interface);
  else if (e->value.function.esym)
    return gfc_implicit_pure (e->value.function.esym);
  else
    return 0;
}


static bool
impure_stmt_fcn (gfc_expr *e, gfc_symbol *sym,
   int *f __attribute__ ((__unused__)))
{
  const char *name;



  if (e->expr_type != EXPR_FUNCTION
 || !e->symtree
 || e->symtree->n.sym == sym
 || e->symtree->n.sym->attr.proc == PROC_ST_FUNCTION)
    return false;

  return gfc_pure_function (e, &name) ? false : true;
}


static int
pure_stmt_function (gfc_expr *e, gfc_symbol *sym)
{
  return gfc_traverse_expr (e, sym, impure_stmt_fcn, 0) ? 0 : 1;
}




static bool check_pure_function (gfc_expr *e)
{
  const char *name = 
# 3073 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 3073 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ;
  if (!gfc_pure_function (e, &name) && name)
    {
      if (forall_flag)
 {
   gfc_error ("Reference to impure function %qs at %L inside a "
       "FORALL %s", name, &e->where,
       forall_flag == 2 ? "mask" : "block");
   return false;
 }
      else if (gfc_do_concurrent_flag)
 {
   gfc_error ("Reference to impure function %qs at %L inside a "
       "DO CONCURRENT %s", name, &e->where,
       gfc_do_concurrent_flag == 2 ? "mask" : "block");
   return false;
 }
      else if (gfc_pure (
# 3090 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 3090 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            ))
 {
   gfc_error ("Reference to impure function %qs at %L "
       "within a PURE procedure", name, &e->where);
   return false;
 }
      if (!gfc_implicit_pure_function (e))
 gfc_unset_implicit_pure (
# 3097 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 3097 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             );
    }
  return true;
}





static void
update_current_proc_array_outer_dependency (gfc_symbol *sym)
{


  gfc_namespace *sibling = gfc_current_ns->sibling;
  for (; sibling; sibling = sibling->sibling)
    {
      if (sibling->proc_name == sym)
 {
   gfc_resolve (sibling);
   break;
 }
    }



  if ((sym->attr.array_outer_dependency || sym->attr.proc_pointer)
      && gfc_current_ns->proc_name)
    gfc_current_ns->proc_name->attr.array_outer_dependency = 1;
}





static bool
resolve_function (gfc_expr *expr)
{
  gfc_actual_arglist *arg;
  gfc_symbol *sym;
  bool t;
  int temp;
  procedure_type p = PROC_INTRINSIC;
  bool no_formal_args;

  sym = 
# 3142 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       __null
# 3142 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           ;
  if (expr->symtree)
    sym = expr->symtree->n.sym;


  if (gfc_is_proc_ptr_comp (expr))
    return true;



  if (sym && sym->attr.intrinsic
      && (sym->intmod_sym_id == GFC_ISYM_CAF_GET
   || sym->intmod_sym_id == GFC_ISYM_CAF_SEND))
    return true;

  if (expr->ref)
    {
      gfc_error ("Unexpected junk after %qs at %L", expr->symtree->n.sym->name,
   &expr->where);
      return false;
    }

  if (sym && sym->attr.intrinsic
      && !gfc_resolve_intrinsic (sym, &expr->where))
    return false;

  if (sym && (sym->attr.flavor == FL_VARIABLE || sym->attr.subroutine))
    {
      gfc_error ("%qs at %L is not a function", sym->name, &expr->where);
      return false;
    }



  if (sym && sym->attr.abstract && !expr->value.function.esym)
    {
      gfc_error ("ABSTRACT INTERFACE %qs must not be referenced at %L",
   sym->name, &expr->where);
      return false;
    }



  if (sym && sym->attr.abstract && sym->attr.function
      && sym->result->ts.u.cl
      && sym->result->ts.u.cl->length == 
# 3187 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        __null
      
# 3188 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && !sym->result->ts.deferred)
    {
      gfc_error ("ABSTRACT INTERFACE %qs at %L must not have an assumed "
   "character length result (F2008: C418)", sym->name,
   &sym->declared_at);
      return false;
    }



  need_full_assumed_size++;

  if (expr->symtree && expr->symtree->n.sym)
    p = expr->symtree->n.sym->attr.proc;

  if (expr->value.function.isym && expr->value.function.isym->inquiry)
    inquiry_argument = true;
  no_formal_args = sym && is_external_proc (sym)
           && gfc_sym_get_dummy_args (sym) == 
# 3206 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                             __null
# 3206 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                 ;

  if (!resolve_actual_arglist (expr->value.function.actual,
          p, no_formal_args))
    {
      inquiry_argument = false;
      return false;
    }

  inquiry_argument = false;


  need_full_assumed_size--;


  if (sym && is_external_proc (sym))
    resolve_global_procedure (sym, &expr->where, 0);

  if (sym && sym->ts.type == BT_CHARACTER
      && sym->ts.u.cl
      && sym->ts.u.cl->length == 
# 3226 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
      
# 3227 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && !sym->attr.dummy
      && !sym->ts.deferred
      && expr->value.function.esym == 
# 3229 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                     __null
      
# 3230 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && !sym->attr.contained)
    {

      gfc_error ("Function %qs is declared CHARACTER(*) and cannot "
   "be used at %L since it is not a dummy argument",
   sym->name, &expr->where);
      return false;
    }



  if (expr->value.function.name != 
# 3241 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
      
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     || expr->value.function.isym != 
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                     __null
# 3242 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                         )
    {
      if (expr->ts.type == BT_UNKNOWN)
 expr->ts = sym->ts;
      t = true;
    }
  else
    {


      switch (procedure_kind (sym))
 {
 case PTYPE_GENERIC:
   t = resolve_generic_f (expr);
   break;

 case PTYPE_SPECIFIC:
   t = resolve_specific_f (expr);
   break;

 case PTYPE_UNKNOWN:
   t = resolve_unknown_f (expr);
   break;

 default:
   gfc_internal_error ("resolve_function(): bad function type");
 }
    }




  if (expr->expr_type != EXPR_FUNCTION)
    return t;


  for (arg = expr->value.function.actual; arg; arg = arg->next)
    if (arg->expr && arg->expr->ts.type == BT_BOZ)
      {
 gfc_error ("A BOZ literal constant at %L cannot appear as an "
     "actual argument in a function reference",
     &arg->expr->where);
 return false;
      }

  temp = need_full_assumed_size;
  need_full_assumed_size = 0;

  if (!resolve_elemental_actual (expr, 
# 3290 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                      __null
# 3290 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                          ))
    return false;

  if (omp_workshare_flag
      && expr->value.function.esym
      && ! gfc_elemental (expr->value.function.esym))
    {
      gfc_error ("User defined non-ELEMENTAL function %qs at %L not allowed "
   "in WORKSHARE construct", expr->value.function.esym->name,
   &expr->where);
      t = false;
    }


  else if (expr->value.function.actual != 
# 3304 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
    
# 3305 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   && expr->value.function.isym != 
# 3305 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                   __null
    
# 3306 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   && expr->value.function.isym->id != GFC_ISYM_LBOUND
    && expr->value.function.isym->id != GFC_ISYM_LCOBOUND
    && expr->value.function.isym->id != GFC_ISYM_UCOBOUND
    && expr->value.function.isym->id != GFC_ISYM_LEN
    && expr->value.function.isym->id != GFC_ISYM_LOC
    && expr->value.function.isym->id != GFC_ISYM_C_LOC
    && expr->value.function.isym->id != GFC_ISYM_PRESENT)
    {





      for (arg = expr->value.function.actual; arg; arg = arg->next)
 {
   if ((expr->value.function.isym->id == GFC_ISYM_UBOUND || expr->value.function.isym->id == GFC_ISYM_SIZE)
       && arg == expr->value.function.actual
       && arg->next != 
# 3323 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null 
# 3323 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           && arg->next->expr)
     {
       if (arg->next->expr->expr_type != EXPR_CONSTANT)
  break;

       if (arg->next->name && strcmp (arg->next->name, "kind") == 0)
  break;

       if ((int)
# 3331 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __gmpz_get_si 
# 3331 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          (arg->next->expr->value.integer)
   < arg->expr->rank)
  break;
     }

   if (arg->expr != 
# 3336 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
       
# 3337 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && arg->expr->rank > 0
       && resolve_assumed_size_actual (arg->expr))
     return false;
 }
    }


  need_full_assumed_size = temp;

  if (!check_pure_function(expr))
    t = false;



  if (expr->value.function.esym && !expr->value.function.esym->attr.recursive)
    {
      gfc_symbol *esym;
      esym = expr->value.function.esym;

      if (is_illegal_recursion (esym, gfc_current_ns))
      {
 if (esym->attr.entry && esym->ns->entries)
   gfc_error ("ENTRY %qs at %L cannot be called recursively, as"
       " function %qs is not RECURSIVE",
       esym->name, &expr->where, esym->ns->entries->sym->name);
 else
   gfc_error ("Function %qs at %L cannot be called recursively, as it"
       " is not RECURSIVE", esym->name, &expr->where);

 t = false;
      }
    }





  if (expr->ts.type == BT_CHARACTER && expr->value.function.esym
      && expr->value.function.esym->attr.use_assoc)
    {
      gfc_expr_set_symbols_referenced (expr->ts.u.cl->length);
    }


  if (expr->ts.type == BT_UNKNOWN)
    {
      if (expr->symtree->n.sym->result
     && expr->symtree->n.sym->result->ts.type != BT_UNKNOWN
     && !expr->symtree->n.sym->result->attr.proc_pointer)
 expr->ts = expr->symtree->n.sym->result->ts;
    }

  if (!expr->ref && !expr->value.function.isym)
    {
      if (expr->value.function.esym)
 update_current_proc_array_outer_dependency (expr->value.function.esym);
      else
 update_current_proc_array_outer_dependency (sym);
    }
  else if (expr->ref)

    gfc_current_ns->proc_name->attr.array_outer_dependency = 1;

  return t;
}




static bool
pure_subroutine (gfc_symbol *sym, const char *name, locus *loc)
{
  if (gfc_pure (sym))
    return true;

  if (forall_flag)
    {
      gfc_error ("Subroutine call to %qs in FORALL block at %L is not PURE",
   name, loc);
      return false;
    }
  else if (gfc_do_concurrent_flag)
    {
      gfc_error ("Subroutine call to %qs in DO CONCURRENT block at %L is not "
   "PURE", name, loc);
      return false;
    }
  else if (gfc_pure (
# 3424 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 3424 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ))
    {
      gfc_error ("Subroutine call to %qs at %L is not PURE", name, loc);
      return false;
    }

  gfc_unset_implicit_pure (
# 3430 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 3430 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              );
  return true;
}


static match
resolve_generic_s0 (gfc_code *c, gfc_symbol *sym)
{
  gfc_symbol *s;

  if (sym->attr.generic)
    {
      s = gfc_search_interface (sym->generic, 1, &c->ext.actual);
      if (s != 
# 3443 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 3443 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
 {
   c->resolved_sym = s;
   if (!pure_subroutine (s, s->name, &c->loc))
     return MATCH_ERROR;
   return MATCH_YES;
 }


    }

  if (sym->attr.intrinsic)
    return gfc_intrinsic_sub_interface (c, 0);

  return MATCH_NO;
}


static bool
resolve_generic_s (gfc_code *c)
{
  gfc_symbol *sym;
  match m;

  sym = c->symtree->n.sym;

  for (;;)
    {
      m = resolve_generic_s0 (c, sym);
      if (m == MATCH_YES)
 return true;
      else if (m == MATCH_ERROR)
 return false;

generic:
      if (sym->ns->parent == 
# 3478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 3478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                )
 break;
      gfc_find_symbol (sym->name, sym->ns->parent, 1, &sym);

      if (sym == 
# 3482 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 3482 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
 break;
      if (!generic_sym (sym))
 goto generic;
    }



  sym = c->symtree->n.sym;

  if (!gfc_is_intrinsic (sym, 1, c->loc))
    {
      gfc_error ("There is no specific subroutine for the generic %qs at %L",
   sym->name, &c->loc);
      return false;
    }

  m = gfc_intrinsic_sub_interface (c, 0);
  if (m == MATCH_YES)
    return true;
  if (m == MATCH_NO)
    gfc_error ("Generic subroutine %qs at %L is not consistent with an "
        "intrinsic subroutine interface", sym->name, &c->loc);

  return false;
}




static match
resolve_specific_s0 (gfc_code *c, gfc_symbol *sym)
{
  match m;

  if (sym->attr.external || sym->attr.if_source == IFSRC_IFBODY)
    {
      if (sym->attr.dummy)
 {
   sym->attr.proc = PROC_DUMMY;
   goto found;
 }

      sym->attr.proc = PROC_EXTERNAL;
      goto found;
    }

  if (sym->attr.proc == PROC_MODULE || sym->attr.proc == PROC_INTERNAL)
    goto found;

  if (sym->attr.intrinsic)
    {
      m = gfc_intrinsic_sub_interface (c, 1);
      if (m == MATCH_YES)
 return MATCH_YES;
      if (m == MATCH_NO)
 gfc_error ("Subroutine %qs at %L is INTRINSIC but is not compatible "
     "with an intrinsic", sym->name, &c->loc);

      return MATCH_ERROR;
    }

  return MATCH_NO;

found:
  gfc_procedure_use (sym, &c->ext.actual, &c->loc);

  c->resolved_sym = sym;
  if (!pure_subroutine (sym, sym->name, &c->loc))
    return MATCH_ERROR;

  return MATCH_YES;
}


static bool
resolve_specific_s (gfc_code *c)
{
  gfc_symbol *sym;
  match m;

  sym = c->symtree->n.sym;

  for (;;)
    {
      m = resolve_specific_s0 (c, sym);
      if (m == MATCH_YES)
 return true;
      if (m == MATCH_ERROR)
 return false;

      if (sym->ns->parent == 
# 3573 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 3573 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                )
 break;

      gfc_find_symbol (sym->name, sym->ns->parent, 1, &sym);

      if (sym == 
# 3578 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 3578 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
 break;
    }

  sym = c->symtree->n.sym;
  gfc_error ("Unable to resolve the specific subroutine %qs at %L",
      sym->name, &c->loc);

  return false;
}




static bool
resolve_unknown_s (gfc_code *c)
{
  gfc_symbol *sym;

  sym = c->symtree->n.sym;

  if (sym->attr.dummy)
    {
      sym->attr.proc = PROC_DUMMY;
      goto found;
    }



  if (gfc_is_intrinsic (sym, 1, c->loc))
    {
      if (gfc_intrinsic_sub_interface (c, 1) == MATCH_YES)
 return true;
      return false;
    }



found:
  gfc_procedure_use (sym, &c->ext.actual, &c->loc);

  c->resolved_sym = sym;

  return pure_subroutine (sym, sym->name, &c->loc);
}






static bool
resolve_call (gfc_code *c)
{
  bool t;
  procedure_type ptype = PROC_INTRINSIC;
  gfc_symbol *csym, *sym;
  bool no_formal_args;

  csym = c->symtree ? c->symtree->n.sym : 
# 3637 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 3637 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             ;

  if (csym && csym->ts.type != BT_UNKNOWN)
    {
      gfc_error ("%qs at %L has a type, which is not consistent with "
   "the CALL at %L", csym->name, &csym->declared_at, &c->loc);
      return false;
    }

  if (csym && gfc_current_ns->parent && csym->ns != gfc_current_ns)
    {
      gfc_symtree *st;
      gfc_find_sym_tree (c->symtree->name, gfc_current_ns, 1, &st);
      sym = st ? st->n.sym : 
# 3650 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 3650 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                ;
      if (sym && csym != sym
       && sym->ns == gfc_current_ns
       && sym->attr.flavor == FL_PROCEDURE
       && sym->attr.contained)
 {
   sym->refs++;
   if (csym->attr.generic)
     c->symtree->n.sym = sym;
   else
     c->symtree = st;
   csym = c->symtree->n.sym;
 }
    }


  if (!c->expr1 && csym)
    {
      if (csym->attr.abstract)
 {
   gfc_error ("ABSTRACT INTERFACE %qs must not be referenced at %L",
      csym->name, &c->loc);
   return false;
 }



      if (is_illegal_recursion (csym, gfc_current_ns))
 {
   if (csym->attr.entry && csym->ns->entries)
     gfc_error ("ENTRY %qs at %L cannot be called recursively, "
         "as subroutine %qs is not RECURSIVE",
         csym->name, &c->loc, csym->ns->entries->sym->name);
   else
     gfc_error ("SUBROUTINE %qs at %L cannot be called recursively, "
         "as it is not RECURSIVE", csym->name, &c->loc);

   t = false;
 }
    }



  need_full_assumed_size++;

  if (csym)
    ptype = csym->attr.proc;

  no_formal_args = csym && is_external_proc (csym)
   && gfc_sym_get_dummy_args (csym) == 
# 3699 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                      __null
# 3699 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                          ;
  if (!resolve_actual_arglist (c->ext.actual, ptype, no_formal_args))
    return false;


  need_full_assumed_size--;


  if (csym && is_external_proc (csym))
    resolve_global_procedure (csym, &c->loc, 1);

  t = true;
  if (c->resolved_sym == 
# 3711 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 3711 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            )
    {
      c->resolved_isym = 
# 3713 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 3713 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            ;
      switch (procedure_kind (csym))
 {
 case PTYPE_GENERIC:
   t = resolve_generic_s (c);
   break;

 case PTYPE_SPECIFIC:
   t = resolve_specific_s (c);
   break;

 case PTYPE_UNKNOWN:
   t = resolve_unknown_s (c);
   break;

 default:
   gfc_internal_error ("resolve_subroutine(): bad function type");
 }
    }


  if (!resolve_elemental_actual (
# 3734 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
# 3734 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    , c))
    return false;

  if (!c->expr1)
    update_current_proc_array_outer_dependency (csym);
  else

    gfc_current_ns->proc_name->attr.array_outer_dependency = 1;

  return t;
}
# 3753 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static bool
compare_shapes (gfc_expr *op1, gfc_expr *op2)
{
  bool t;
  int i;

  t = true;

  if (op1->shape != 
# 3761 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null 
# 3761 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        && op2->shape != 
# 3761 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 3761 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             )
    {
      for (i = 0; i < op1->rank; i++)
 {
   if (
# 3765 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_cmp 
# 3765 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (op1->shape[i], op2->shape[i]) != 0)
    {
      gfc_error ("Shapes for operands at %L and %L are not conformable",
   &op1->where, &op2->where);
      t = false;
      break;
    }
 }
    }

  return t;
}



static gfc_expr *
logical_to_bitwise (gfc_expr *e)
{
  gfc_expr *tmp, *op1, *op2;
  gfc_isym_id isym;
  gfc_actual_arglist *args = 
# 3785 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 3785 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                ;

  ((void)(!(e->expr_type == EXPR_OP) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 3787, __FUNCTION__), 0 : 0));

  isym = GFC_ISYM_NONE;
  op1 = e->value.op.op1;
  op2 = e->value.op.op2;

  switch (e->value.op.op)
    {
    case INTRINSIC_NOT:
      isym = GFC_ISYM_NOT;
      break;
    case INTRINSIC_AND:
      isym = GFC_ISYM_IAND;
      break;
    case INTRINSIC_OR:
      isym = GFC_ISYM_IOR;
      break;
    case INTRINSIC_NEQV:
      isym = GFC_ISYM_IEOR;
      break;
    case INTRINSIC_EQV:



      tmp = gfc_copy_expr (e);
      tmp->value.op.op = INTRINSIC_NEQV;
      tmp = logical_to_bitwise (tmp);
      isym = GFC_ISYM_NOT;
      op1 = tmp;
      op2 = 
# 3816 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 3816 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               ;
      break;
    default:
      gfc_internal_error ("logical_to_bitwise(): Bad intrinsic");
    }


  args = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
  args->expr = op1;
  if (op2)
    {
      args->next = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
      args->next->expr = op2;
    }


  e->expr_type = EXPR_FUNCTION;
  e->value.function.actual = args;
  e->value.function.isym = gfc_intrinsic_function_by_id (isym);
  e->value.function.name = e->value.function.isym->name;
  e->value.function.esym = 
# 3836 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 3836 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;


  if (!e->symtree || !e->symtree->n.sym)
    {
      gfc_symbol *sym;
      gfc_get_ha_sym_tree (e->value.function.isym->name, &e->symtree);
      sym = e->symtree->n.sym;
      sym->result = sym;
      sym->attr.flavor = FL_PROCEDURE;
      sym->attr.function = 1;
      sym->attr.elemental = 1;
      sym->attr.pure = 1;
      sym->attr.referenced = 1;
      sym->module = gfc_get_string ("(intrinsic)");
      gfc_commit_symbol (sym);
    }

  args->name = e->value.function.isym->formal->name;
  if (e->value.function.isym->formal->next)
    args->next->name = e->value.function.isym->formal->next->name;

  return e;
}



static void
lookup_uop_fuzzy_find_candidates (gfc_symtree *uop,
      char **&candidates,
      size_t &candidates_len)
{
  gfc_symtree *p;

  if (uop == 
# 3870 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 3870 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    return;





  if (uop->n.uop->op != 
# 3877 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 3877 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           )
    vec_push (candidates, candidates_len, uop->name);

  p = uop->left;
  if (p)
    lookup_uop_fuzzy_find_candidates (p, candidates, candidates_len);

  p = uop->right;
  if (p)
    lookup_uop_fuzzy_find_candidates (p, candidates, candidates_len);
}



static const char*
lookup_uop_fuzzy (const char *op, gfc_symtree *uop)
{
  char **candidates = 
# 3894 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 3894 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         ;
  size_t candidates_len = 0;
  lookup_uop_fuzzy_find_candidates (uop, candidates, candidates_len);
  return gfc_closest_fuzzy_match (op, candidates);
}






static int
impure_function_callback (gfc_expr **e, int *walk_subtrees __attribute__ ((__unused__)),
     void *data)
{
  gfc_expr *f = *e;
  const char *name;
  static gfc_expr *last = 
# 3911 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 3911 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             ;
  bool *found = (bool *) data;

  if (f->expr_type == EXPR_FUNCTION)
    {
      *found = 1;
      if (f != last && !gfc_pure_function (f, &name)
   && !gfc_implicit_pure_function (f))
 {
   if (name)
     gfc_warning (OPT_Wfunction_elimination,
    "Impure function %qs at %L might not be evaluated",
    name, &f->where);
   else
     gfc_warning (OPT_Wfunction_elimination,
    "Impure function at %L might not be evaluated",
    &f->where);
 }
      last = f;
    }

  return 0;
}



static int
is_character_based (bt type)
{
  return type == BT_CHARACTER || type == BT_HOLLERITH;
}





static void
convert_hollerith_to_character (gfc_expr *e)
{
  if (e->ts.type == BT_HOLLERITH)
    {
      gfc_typespec t;
      gfc_clear_ts (&t);
      t.type = BT_CHARACTER;
      t.kind = e->ts.kind;
      gfc_convert_type_warn (e, &t, 2, 1);
    }
}



static void
convert_to_numeric (gfc_expr *a, gfc_expr *b)
{
  gfc_typespec t;
  gfc_clear_ts (&t);
  t.type = b->ts.type;
  t.kind = b->ts.kind;
  gfc_convert_type_warn (a, &t, 2, 1);
}




static bool
resolve_operator (gfc_expr *e)
{
  gfc_expr *op1, *op2;
  char msg[200];
  bool dual_locus_error;
  bool t = true;



  switch (e->value.op.op)
    {
    default:
      if (!gfc_resolve_expr (e->value.op.op2))
 return false;



    case INTRINSIC_NOT:
    case INTRINSIC_UPLUS:
    case INTRINSIC_UMINUS:
    case INTRINSIC_PARENTHESES:
      if (!gfc_resolve_expr (e->value.op.op1))
 return false;
      if (e->value.op.op1
   && e->value.op.op1->ts.type == BT_BOZ && !e->value.op.op2)
 {
   gfc_error ("BOZ literal constant at %L cannot be an operand of "
       "unary operator %qs", &e->value.op.op1->where,
       gfc_op2string (e->value.op.op));
   return false;
 }
      break;
    }



  op1 = e->value.op.op1;
  op2 = e->value.op.op2;
  if (op1 == 
# 4014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null 
# 4014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 && op2 == 
# 4014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 4014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               )
    return false;

  dual_locus_error = false;


  if (op1 && op1->ts.type == BT_BOZ
      && op2 && op2->ts.type == BT_BOZ)
    {
      gfc_error ("Operands at %L and %L cannot appear as operands of "
   "binary operator %qs", &op1->where, &op2->where,
   gfc_op2string (e->value.op.op));
      return false;
    }

  if ((op1 && op1->expr_type == EXPR_NULL)
      || (op2 && op2->expr_type == EXPR_NULL))
    {
      sprintf (msg, gettext ("Invalid context for NULL() pointer at %%L"));
      goto bad_op;
    }

  switch (e->value.op.op)
    {
    case INTRINSIC_UPLUS:
    case INTRINSIC_UMINUS:
      if (op1->ts.type == BT_INTEGER
   || op1->ts.type == BT_REAL
   || op1->ts.type == BT_COMPLEX)
 {
   e->ts = op1->ts;
   break;
 }

      sprintf (msg, gettext ("Operand of unary numeric operator %%<%s%%> at %%L is %s"),
        gfc_op2string (e->value.op.op), gfc_typename (e));
      goto bad_op;

    case INTRINSIC_PLUS:
    case INTRINSIC_MINUS:
    case INTRINSIC_TIMES:
    case INTRINSIC_DIVIDE:
    case INTRINSIC_POWER:
      if (gfc_numeric_ts (&op1->ts) && gfc_numeric_ts (&op2->ts))
 {
   gfc_type_convert_binary (e, 1);
   break;
 }

      if (op1->ts.type == BT_DERIVED || op2->ts.type == BT_DERIVED)
 sprintf (msg,
        gettext ("Unexpected derived-type entities in binary intrinsic " "numeric operator %%<%s%%> at %%L")
                                      ,
        gfc_op2string (e->value.op.op));
      else
       sprintf (msg,
        gettext ("Operands of binary numeric operator %%<%s%%> at %%L are %s/%s"),
        gfc_op2string (e->value.op.op), gfc_typename (op1),
        gfc_typename (op2));
      goto bad_op;

    case INTRINSIC_CONCAT:
      if (op1->ts.type == BT_CHARACTER && op2->ts.type == BT_CHARACTER
   && op1->ts.kind == op2->ts.kind)
 {
   e->ts.type = BT_CHARACTER;
   e->ts.kind = op1->ts.kind;
   break;
 }

      sprintf (msg,
        gettext ("Operands of string concatenation operator at %%L are %s/%s"),
        gfc_typename (op1), gfc_typename (op2));
      goto bad_op;

    case INTRINSIC_AND:
    case INTRINSIC_OR:
    case INTRINSIC_EQV:
    case INTRINSIC_NEQV:
      if (op1->ts.type == BT_LOGICAL && op2->ts.type == BT_LOGICAL)
 {
   e->ts.type = BT_LOGICAL;
   e->ts.kind = gfc_kind_max (op1, op2);
   if (op1->ts.kind < e->ts.kind)
     gfc_convert_type (op1, &e->ts, 2);
   else if (op2->ts.kind < e->ts.kind)
     gfc_convert_type (op2, &e->ts, 2);

   if (global_options.x_flag_frontend_optimize &&
     (e->value.op.op == INTRINSIC_AND || e->value.op.op == INTRINSIC_OR))
     {


       bool op2_f = false;
       gfc_expr_walker (&op2, impure_function_callback, &op2_f);
     }
   break;
 }


      else if (global_options.x_flag_dec
        && (op1->ts.type == BT_INTEGER || op2->ts.type == BT_INTEGER))
 {
   e->ts.type = BT_INTEGER;
   e->ts.kind = gfc_kind_max (op1, op2);
   if (op1->ts.type != e->ts.type || op1->ts.kind != e->ts.kind)
     gfc_convert_type (op1, &e->ts, 1);
   if (op2->ts.type != e->ts.type || op2->ts.kind != e->ts.kind)
     gfc_convert_type (op2, &e->ts, 1);
   e = logical_to_bitwise (e);
   goto simplify_op;
 }

      sprintf (msg, gettext ("Operands of logical operator %%<%s%%> at %%L are %s/%s"),
        gfc_op2string (e->value.op.op), gfc_typename (op1),
        gfc_typename (op2));

      goto bad_op;

    case INTRINSIC_NOT:

      if (global_options.x_flag_dec && op1->ts.type == BT_INTEGER)
 {
   e->ts.type = BT_INTEGER;
   e->ts.kind = op1->ts.kind;
   e = logical_to_bitwise (e);
   goto simplify_op;
 }

      if (op1->ts.type == BT_LOGICAL)
 {
   e->ts.type = BT_LOGICAL;
   e->ts.kind = op1->ts.kind;
   break;
 }

      sprintf (msg, gettext ("Operand of .not. operator at %%L is %s"),
        gfc_typename (op1));
      goto bad_op;

    case INTRINSIC_GT:
    case INTRINSIC_GT_OS:
    case INTRINSIC_GE:
    case INTRINSIC_GE_OS:
    case INTRINSIC_LT:
    case INTRINSIC_LT_OS:
    case INTRINSIC_LE:
    case INTRINSIC_LE_OS:
      if (op1->ts.type == BT_COMPLEX || op2->ts.type == BT_COMPLEX)
 {
   strcpy (msg, gettext ("COMPLEX quantities cannot be compared at %L"));
   goto bad_op;
 }



    case INTRINSIC_EQ:
    case INTRINSIC_EQ_OS:
    case INTRINSIC_NE:
    case INTRINSIC_NE_OS:

      if (global_options.x_flag_dec
   && is_character_based (op1->ts.type)
   && is_character_based (op2->ts.type))
 {
   convert_hollerith_to_character (op1);
   convert_hollerith_to_character (op2);
 }

      if (op1->ts.type == BT_CHARACTER && op2->ts.type == BT_CHARACTER
   && op1->ts.kind == op2->ts.kind)
 {
   e->ts.type = BT_LOGICAL;
   e->ts.kind = gfc_default_logical_kind;
   break;
 }


      if (op1->ts.type == BT_BOZ)
 {
   if (gfc_invalid_boz ("BOZ literal constant near %L cannot appear " "as an operand of a relational operator"
                                                   ,
          &op1->where))
     return false;

   if (op2->ts.type == BT_INTEGER && !gfc_boz2int (op1, op2->ts.kind))
     return false;

   if (op2->ts.type == BT_REAL && !gfc_boz2real (op1, op2->ts.kind))
     return false;
 }


      if (op2->ts.type == BT_BOZ)
 {
   if (gfc_invalid_boz ("BOZ literal constant near %L cannot appear" " as an operand of a relational operator"
                                                    ,
    &op2->where))
     return false;

   if (op1->ts.type == BT_INTEGER && !gfc_boz2int (op2, op1->ts.kind))
     return false;

   if (op1->ts.type == BT_REAL && !gfc_boz2real (op2, op1->ts.kind))
     return false;
 }
      if (global_options.x_flag_dec
   && op1->ts.type == BT_HOLLERITH && gfc_numeric_ts (&op2->ts))
 convert_to_numeric (op1, op2);

      if (global_options.x_flag_dec
   && gfc_numeric_ts (&op1->ts) && op2->ts.type == BT_HOLLERITH)
 convert_to_numeric (op2, op1);

      if (gfc_numeric_ts (&op1->ts) && gfc_numeric_ts (&op2->ts))
 {
   gfc_type_convert_binary (e, 1);

   e->ts.type = BT_LOGICAL;
   e->ts.kind = gfc_default_logical_kind;

   if (global_options.x_warn_compare_reals)
     {
       gfc_intrinsic_op op = e->value.op.op;



       if ((op1->ts.type == BT_REAL || op1->ts.type == BT_COMPLEX)
    && (op == INTRINSIC_EQ || op == INTRINSIC_EQ_OS
        || op == INTRINSIC_NE || op == INTRINSIC_NE_OS))
  {
    const char *msg;

    if (op == INTRINSIC_EQ || op == INTRINSIC_EQ_OS)
      msg = "Equality comparison for %s at %L";
    else
      msg = "Inequality comparison for %s at %L";

    gfc_warning (OPT_Wcompare_reals, msg,
          gfc_typename (op1), &op1->where);
  }
     }

   break;
 }

      if (op1->ts.type == BT_LOGICAL && op2->ts.type == BT_LOGICAL)
 sprintf (msg,
   gettext ("Logicals at %%L must be compared with %s instead of %s"),
   (e->value.op.op == INTRINSIC_EQ
    || e->value.op.op == INTRINSIC_EQ_OS)
   ? ".eqv." : ".neqv.", gfc_op2string (e->value.op.op));
      else
 sprintf (msg,
   gettext ("Operands of comparison operator %%<%s%%> at %%L are %s/%s"),
   gfc_op2string (e->value.op.op), gfc_typename (op1),
   gfc_typename (op2));

      goto bad_op;

    case INTRINSIC_USER:
      if (e->value.op.uop->op == 
# 4275 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
# 4275 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    )
 {
   const char *name = e->value.op.uop->name;
   const char *guessed;
   guessed = lookup_uop_fuzzy (name, e->value.op.uop->ns->uop_root);
   if (guessed)
     sprintf (msg, gettext ("Unknown operator %%<%s%%> at %%L; did you mean '%s'?"),
  name, guessed);
   else
     sprintf (msg, gettext ("Unknown operator %%<%s%%> at %%L"), name);
 }
      else if (op2 == 
# 4286 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 4286 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
 sprintf (msg, gettext ("Operand of user operator %%<%s%%> at %%L is %s"),
   e->value.op.uop->name, gfc_typename (op1));
      else
 {
   sprintf (msg, gettext ("Operands of user operator %%<%s%%> at %%L are %s/%s"),
     e->value.op.uop->name, gfc_typename (op1),
     gfc_typename (op2));
   e->value.op.uop->op->sym->attr.referenced = 1;
 }

      goto bad_op;

    case INTRINSIC_PARENTHESES:
      e->ts = op1->ts;
      if (e->ts.type == BT_CHARACTER)
 e->ts.u.cl = op1->ts.u.cl;
      break;

    default:
      gfc_internal_error ("resolve_operator(): Bad intrinsic");
    }



  switch (e->value.op.op)
    {
    case INTRINSIC_PLUS:
    case INTRINSIC_MINUS:
    case INTRINSIC_TIMES:
    case INTRINSIC_DIVIDE:
    case INTRINSIC_POWER:
    case INTRINSIC_CONCAT:
    case INTRINSIC_AND:
    case INTRINSIC_OR:
    case INTRINSIC_EQV:
    case INTRINSIC_NEQV:
    case INTRINSIC_EQ:
    case INTRINSIC_EQ_OS:
    case INTRINSIC_NE:
    case INTRINSIC_NE_OS:
    case INTRINSIC_GT:
    case INTRINSIC_GT_OS:
    case INTRINSIC_GE:
    case INTRINSIC_GE_OS:
    case INTRINSIC_LT:
    case INTRINSIC_LT_OS:
    case INTRINSIC_LE:
    case INTRINSIC_LE_OS:

      if (op1->rank == 0 && op2->rank == 0)
 e->rank = 0;

      if (op1->rank == 0 && op2->rank != 0)
 {
   e->rank = op2->rank;

   if (e->shape == 
# 4343 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 4343 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      )
     e->shape = gfc_copy_shape (op2->shape, op2->rank);
 }

      if (op1->rank != 0 && op2->rank == 0)
 {
   e->rank = op1->rank;

   if (e->shape == 
# 4351 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 4351 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      )
     e->shape = gfc_copy_shape (op1->shape, op1->rank);
 }

      if (op1->rank != 0 && op2->rank != 0)
 {
   if (op1->rank == op2->rank)
     {
       e->rank = op1->rank;
       if (e->shape == 
# 4360 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 4360 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          )
  {
    t = compare_shapes (op1, op2);
    if (!t)
      e->shape = 
# 4364 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 4364 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
    else
      e->shape = gfc_copy_shape (op1->shape, op1->rank);
  }
     }
   else
     {

       e->rank = 0;


       dual_locus_error = true;
       sprintf (msg,
         gettext ("Inconsistent ranks for operator at %%L and %%L"));
       goto bad_op;
     }
 }

      break;

    case INTRINSIC_PARENTHESES:
    case INTRINSIC_NOT:
    case INTRINSIC_UPLUS:
    case INTRINSIC_UMINUS:

      e->rank = op1->rank;

      if (e->shape == 
# 4391 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 4391 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
 e->shape = gfc_copy_shape (op1->shape, op1->rank);

      break;

    default:
      break;
    }

simplify_op:


  if (t)
    {
      t = gfc_simplify_expr (e, 0);



      if (!gfc_is_constant_expr (e))
 t = true;
    }
  return t;

bad_op:

  {
    match m = gfc_extend_expr (e);
    if (m == MATCH_YES)
      return true;
    if (m == MATCH_ERROR)
      return false;
  }

  if (dual_locus_error)
    gfc_error (msg, &op1->where, &op2->where);
  else
    gfc_error (msg, &e->where);

  return false;
}




enum compare_result
{ CMP_LT, CMP_EQ, CMP_GT, CMP_UNKNOWN };



static compare_result
compare_bound (gfc_expr *a, gfc_expr *b)
{
  int i;

  if (a == 
# 4445 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null 
# 4445 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               || a->expr_type != EXPR_CONSTANT
      || b == 
# 4446 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null 
# 4446 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  || b->expr_type != EXPR_CONSTANT)
    return CMP_UNKNOWN;




  if (a->ts.type != BT_INTEGER || b->ts.type != BT_INTEGER)
    return CMP_UNKNOWN;

  i = 
# 4455 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_cmp 
# 4455 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (a->value.integer, b->value.integer);

  if (i < 0)
    return CMP_LT;
  if (i > 0)
    return CMP_GT;
  return CMP_EQ;
}




static compare_result
compare_bound_int (gfc_expr *a, int b)
{
  int i;

  if (a == 
# 4472 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null 
# 4472 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               || a->expr_type != EXPR_CONSTANT)
    return CMP_UNKNOWN;

  if (a->ts.type != BT_INTEGER)
    gfc_internal_error ("compare_bound_int(): Bad expression");

  i = 
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     b
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     b
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     b
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     b
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     a->value.integer
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     a->value.integer
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     a->value.integer
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     b
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     a->value.integer
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     b
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))
# 4478 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                     ;

  if (i < 0)
    return CMP_LT;
  if (i > 0)
    return CMP_GT;
  return CMP_EQ;
}




static compare_result
compare_bound_mpz_t (gfc_expr *a, mpz_t b)
{
  int i;

  if (a == 
# 4495 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null 
# 4495 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               || a->expr_type != EXPR_CONSTANT)
    return CMP_UNKNOWN;

  if (a->ts.type != BT_INTEGER)
    gfc_internal_error ("compare_bound_int(): Bad expression");

  i = 
# 4501 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_cmp 
# 4501 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (a->value.integer, b);

  if (i < 0)
    return CMP_LT;
  if (i > 0)
    return CMP_GT;
  return CMP_EQ;
}






static int
compute_last_value_for_triplet (gfc_expr *start, gfc_expr *end,
    gfc_expr *stride, mpz_t last)
{
  mpz_t rem;

  if (start == 
# 4521 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null 
# 4521 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   || start->expr_type != EXPR_CONSTANT
      || end == 
# 4522 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null 
# 4522 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    || end->expr_type != EXPR_CONSTANT
      || (stride != 
# 4523 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null 
# 4523 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        && stride->expr_type != EXPR_CONSTANT))
    return 0;

  if (start->ts.type != BT_INTEGER || end->ts.type != BT_INTEGER
      || (stride != 
# 4527 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null 
# 4527 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        && stride->ts.type != BT_INTEGER))
    return 0;

  if (stride == 
# 4530 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null 
# 4530 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    || compare_bound_int (stride, 1) == CMP_EQ)
    {
      if (compare_bound (start, end) == CMP_GT)
 return 0;
      
# 4534 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_set 
# 4534 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (last, end->value.integer);
      return 1;
    }

  if (compare_bound_int (stride, 0) == CMP_GT)
    {

      if (
# 4541 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __gmpz_cmp 
# 4541 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 (start->value.integer, end->value.integer) > 0)
 return 0;
    }
  else
    {

      if (
# 4547 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __gmpz_cmp 
# 4547 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 (start->value.integer, end->value.integer) < 0)
 return 0;
    }

  
# 4551 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_init 
# 4551 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          (rem);
  
# 4552 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_sub 
# 4552 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (rem, end->value.integer, start->value.integer);
  
# 4553 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_tdiv_r 
# 4553 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            (rem, rem, stride->value.integer);
  
# 4554 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_sub 
# 4554 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (last, end->value.integer, rem);
  
# 4555 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_clear 
# 4555 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (rem);

  return 1;
}





static bool
check_dimension (int i, gfc_array_ref *ar, gfc_array_spec *as)
{
  mpz_t last_value;

  if (ar->dimen_type[i] == DIMEN_STAR)
    {
      ((void)(!(ar->stride[i] == 
# 4571 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __null
# 4571 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 4571, __FUNCTION__), 0 : 0));

      if (ar->start[i] == 
# 4573 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 4573 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             )
 {
   ((void)(!(ar->end[i] == 
# 4575 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __null
# 4575 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 4575, __FUNCTION__), 0 : 0));
   return true;
 }
    }




  switch (ar->dimen_type[i])
    {
    case DIMEN_VECTOR:
    case DIMEN_THIS_IMAGE:
      break;

    case DIMEN_STAR:
    case DIMEN_ELEMENT:
      if (compare_bound (ar->start[i], as->lower[i]) == CMP_LT)
 {
   if (i < as->rank)
     gfc_warning (0, "Array reference at %L is out of bounds "
    "(%ld < %ld) in dimension %d", &ar->c_where[i],
    
# 4596 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4596 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (ar->start[i]->value.integer),
    
# 4597 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4597 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (as->lower[i]->value.integer), i+1);
   else
     gfc_warning (0, "Array reference at %L is out of bounds "
    "(%ld < %ld) in codimension %d", &ar->c_where[i],
    
# 4601 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4601 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (ar->start[i]->value.integer),
    
# 4602 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4602 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (as->lower[i]->value.integer),
    i + 1 - as->rank);
   return true;
 }
      if (compare_bound (ar->start[i], as->upper[i]) == CMP_GT)
 {
   if (i < as->rank)
     gfc_warning (0, "Array reference at %L is out of bounds "
    "(%ld > %ld) in dimension %d", &ar->c_where[i],
    
# 4611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (ar->start[i]->value.integer),
    
# 4612 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4612 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (as->upper[i]->value.integer), i+1);
   else
     gfc_warning (0, "Array reference at %L is out of bounds "
    "(%ld > %ld) in codimension %d", &ar->c_where[i],
    
# 4616 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4616 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (ar->start[i]->value.integer),
    
# 4617 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_get_si 
# 4617 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (as->upper[i]->value.integer),
    i + 1 - as->rank);
   return true;
 }

      break;

    case DIMEN_RANGE:
      {



 compare_result comp_start_end = compare_bound ((ar->start[i] ? ar->start[i] : as->lower[i]), (ar->end[i] ? ar->end[i] : as->upper[i]));


 if (compare_bound_int (ar->stride[i], 0) == CMP_EQ)
   {
     gfc_error ("Illegal stride of zero at %L", &ar->c_where[i]);
     return false;
   }






 if (compare_bound ((ar->start[i] ? ar->start[i] : as->lower[i]), (ar->end[i] ? ar->end[i] : as->upper[i])) == CMP_EQ
     || ((compare_bound_int (ar->stride[i], 0) == CMP_GT
   || ar->stride[i] == 
# 4645 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 4645 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          ) && comp_start_end == CMP_LT)
     || (compare_bound_int (ar->stride[i], 0) == CMP_LT
         && comp_start_end == CMP_GT))
   {
     if (compare_bound ((ar->start[i] ? ar->start[i] : as->lower[i]), as->lower[i]) == CMP_LT)
       {
  gfc_warning (0, "Lower array reference at %L is out of bounds "
         "(%ld < %ld) in dimension %d", &ar->c_where[i],
         
# 4653 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4653 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ((ar->start[i] ? ar->start[i] : as->lower[i])->value.integer),
         
# 4654 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4654 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (as->lower[i]->value.integer), i+1);
  return true;
       }
     if (compare_bound ((ar->start[i] ? ar->start[i] : as->lower[i]), as->upper[i]) == CMP_GT)
       {
  gfc_warning (0, "Lower array reference at %L is out of bounds "
         "(%ld > %ld) in dimension %d", &ar->c_where[i],
         
# 4661 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4661 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ((ar->start[i] ? ar->start[i] : as->lower[i])->value.integer),
         
# 4662 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4662 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (as->upper[i]->value.integer), i+1);
  return true;
       }
   }



 
# 4669 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
__gmpz_init 
# 4669 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (last_value);
 if (compute_last_value_for_triplet ((ar->start[i] ? ar->start[i] : as->lower[i]), (ar->end[i] ? ar->end[i] : as->upper[i]), ar->stride[i],
         last_value))
   {
     if (compare_bound_mpz_t (as->lower[i], last_value) == CMP_GT)
       {
  gfc_warning (0, "Upper array reference at %L is out of bounds "
         "(%ld < %ld) in dimension %d", &ar->c_where[i],
         
# 4677 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4677 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (last_value),
         
# 4678 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4678 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (as->lower[i]->value.integer), i+1);
         
# 4679 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_clear 
# 4679 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  (last_value);
  return true;
       }
     if (compare_bound_mpz_t (as->upper[i], last_value) == CMP_LT)
       {
  gfc_warning (0, "Upper array reference at %L is out of bounds "
         "(%ld > %ld) in dimension %d", &ar->c_where[i],
         
# 4686 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4686 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (last_value),
         
# 4687 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_get_si 
# 4687 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (as->upper[i]->value.integer), i+1);
         
# 4688 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_clear 
# 4688 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  (last_value);
  return true;
       }
   }
 
# 4692 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
__gmpz_clear 
# 4692 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          (last_value);



      }
      break;

    default:
      gfc_internal_error ("check_dimension(): Bad array reference");
    }

  return true;
}




static bool
compare_spec_to_ref (gfc_array_ref *ar)
{
  gfc_array_spec *as;
  int i;

  as = ar->as;
  i = as->rank - 1;

  if (as->type == AS_ASSUMED_SIZE
      && (
        (ar->type == AR_SECTION
       && ar->dimen_type[i] == DIMEN_RANGE && ar->end[i] == 
# 4721 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                           __null
# 4721 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                               )))
    {
      gfc_error ("Rightmost upper bound of assumed size array section "
   "not specified at %L", &ar->where);
      return false;
    }

  if (ar->type == AR_FULL)
    return true;

  if (as->rank != ar->dimen)
    {
      gfc_error ("Rank mismatch in array reference at %L (%d/%d)",
   &ar->where, ar->dimen, as->rank);
      return false;
    }


  if (as->corank != ar->codimen && ar->codimen != 0)
    {
      gfc_error ("Coindex rank mismatch in array reference at %L (%d/%d)",
   &ar->where, ar->codimen, as->corank);
      return false;
    }

  for (i = 0; i < as->rank; i++)
    if (!check_dimension (i, ar, as))
      return false;


  if (ar->codimen != 0)
    for (i = as->rank; i < as->rank + as->corank; i++)
      {
 if (ar->dimen_type[i] != DIMEN_ELEMENT && !ar->in_allocate
     && ar->dimen_type[i] != DIMEN_THIS_IMAGE)
   {
     gfc_error ("Coindex of codimension %d must be a scalar at %L",
         i + 1 - as->rank, &ar->where);
     return false;
   }
 if (!check_dimension (i, ar, as))
   return false;
      }

  return true;
}




static bool
gfc_resolve_index_1 (gfc_expr *index, int check_scalar,
       int force_index_integer_kind)
{
  gfc_typespec ts;

  if (index == 
# 4777 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 4777 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
    return true;

  if (!gfc_resolve_expr (index))
    return false;

  if (check_scalar && index->rank != 0)
    {
      gfc_error ("Array index at %L must be scalar", &index->where);
      return false;
    }

  if (index->ts.type != BT_INTEGER && index->ts.type != BT_REAL)
    {
      gfc_error ("Array index at %L must be of INTEGER type, found %s",
   &index->where, gfc_basic_typename (index->ts.type));
      return false;
    }

  if (index->ts.type == BT_REAL)
    if (!gfc_notify_std ((1<<6), "REAL array index at %L",
    &index->where))
      return false;

  if ((index->ts.kind != gfc_index_integer_kind
       && force_index_integer_kind)
      || index->ts.type != BT_INTEGER)
    {
      gfc_clear_ts (&ts);
      ts.type = BT_INTEGER;
      ts.kind = gfc_index_integer_kind;

      gfc_convert_type_warn (index, &ts, 2, 0);
    }

  return true;
}



bool
gfc_resolve_index (gfc_expr *index, int check_scalar)
{
  return gfc_resolve_index_1 (index, check_scalar, 1);
}



bool
gfc_resolve_dim_arg (gfc_expr *dim)
{
  if (dim == 
# 4828 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 4828 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    return true;

  if (!gfc_resolve_expr (dim))
    return false;

  if (dim->rank != 0)
    {
      gfc_error ("Argument dim at %L must be scalar", &dim->where);
      return false;

    }

  if (dim->ts.type != BT_INTEGER)
    {
      gfc_error ("Argument dim at %L must be of INTEGER type", &dim->where);
      return false;
    }

  if (dim->ts.kind != gfc_index_integer_kind)
    {
      gfc_typespec ts;

      gfc_clear_ts (&ts);
      ts.type = BT_INTEGER;
      ts.kind = gfc_index_integer_kind;

      gfc_convert_type_warn (dim, &ts, 2, 0);
    }

  return true;
}
# 4871 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
find_array_spec (gfc_expr *e)
{
  gfc_array_spec *as;
  gfc_component *c;
  gfc_ref *ref;
  bool class_as = false;

  if (e->symtree->n.sym->ts.type == BT_CLASS)
    {
      as = e->symtree->n.sym->ts.u.derived->components->as;
      class_as = true;
    }
  else
    as = e->symtree->n.sym->as;

  for (ref = e->ref; ref; ref = ref->next)
    switch (ref->type)
      {
      case REF_ARRAY:
 if (as == 
# 4891 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 4891 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              )
   gfc_internal_error ("find_array_spec(): Missing spec");

 ref->u.ar.as = as;
 as = 
# 4895 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __null
# 4895 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         ;
 break;

      case REF_COMPONENT:
 c = ref->u.c.component;
 if (c->attr.dimension)
   {
     if (as != 
# 4902 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null 
# 4902 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   && !(class_as && as == c->as))
       gfc_internal_error ("find_array_spec(): unused as(1)");
     as = c->as;
   }

 break;

      case REF_SUBSTRING:
      case REF_INQUIRY:
 break;
      }

  if (as != 
# 4914 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 4914 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               )
    gfc_internal_error ("find_array_spec(): unused as(2)");
}




static bool
resolve_array_ref (gfc_array_ref *ar)
{
  int i, check_scalar;
  gfc_expr *e;

  for (i = 0; i < ar->dimen + ar->codimen; i++)
    {
      check_scalar = ar->dimen_type[i] == DIMEN_RANGE;




      if (!gfc_resolve_index_1 (ar->start[i], check_scalar, 0))
 return false;
      if (!gfc_resolve_index (ar->end[i], check_scalar))
 return false;
      if (!gfc_resolve_index (ar->stride[i], check_scalar))
 return false;

      e = ar->start[i];

      if (ar->dimen_type[i] == DIMEN_UNKNOWN)
 switch (e->rank)
   {
   case 0:
     ar->dimen_type[i] = DIMEN_ELEMENT;
     break;

   case 1:
     ar->dimen_type[i] = DIMEN_VECTOR;
     if (e->expr_type == EXPR_VARIABLE
  && e->symtree->n.sym->ts.type == BT_DERIVED)
       ar->start[i] = gfc_get_parentheses (e);
     break;

   default:
     gfc_error ("Array index at %L is an array of rank %d",
         &ar->c_where[i], e->rank);
     return false;
   }





      if (ar->dimen_type[i] == DIMEN_RANGE
   && ar->stride[i] != 
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null 
# 4968 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           && ar->stride[i]->expr_type == EXPR_CONSTANT
   && 
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 4969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                   != 0
   && 
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0L
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0L
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0L
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0L
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0L
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->stride[i]->value.integer
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0L
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 4970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                   != 0)
 {
   mpz_t size, end;

   if (gfc_ref_dimen_size (ar, i, &size, &end))
     {
       if (ar->end[i] == 
# 4976 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 4976 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            )
  {
    ar->end[i] =
      gfc_get_constant_expr (BT_INTEGER, gfc_index_integer_kind,
        &ar->where);
    
# 4981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_set 
# 4981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (ar->end[i]->value.integer, end);
  }
       else if (ar->end[i]->ts.type == BT_INTEGER
         && ar->end[i]->expr_type == EXPR_CONSTANT)
  {
    
# 4986 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_set 
# 4986 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (ar->end[i]->value.integer, end);
  }
       else
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 4989, __FUNCTION__));

       
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_clear 
# 4991 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                (size);
       
# 4992 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_clear 
# 4992 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                (end);
     }
 }
    }

  if (ar->type == AR_FULL)
    {
      if (ar->as->rank == 0)
 ar->type = AR_ELEMENT;



      ar->dimen = ar->as->rank;
      for (i = 0; i < ar->dimen; i++)
 {
   ar->dimen_type[i] = DIMEN_RANGE;

   ((void)(!(ar->start[i] == 
# 5009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __null
# 5009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 5009, __FUNCTION__), 0 : 0));
   ((void)(!(ar->end[i] == 
# 5010 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __null
# 5010 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 5010, __FUNCTION__), 0 : 0));
   ((void)(!(ar->stride[i] == 
# 5011 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __null
# 5011 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 5011, __FUNCTION__), 0 : 0));
 }
    }



  if (ar->type == AR_UNKNOWN)
    {
      ar->type = AR_ELEMENT;
      for (i = 0; i < ar->dimen; i++)
 if (ar->dimen_type[i] == DIMEN_RANGE
     || ar->dimen_type[i] == DIMEN_VECTOR)
   {
     ar->type = AR_SECTION;
     break;
   }
    }

  if (!ar->as->cray_pointee && !compare_spec_to_ref (ar))
    return false;

  if (ar->as->corank && ar->codimen == 0)
    {
      int n;
      ar->codimen = ar->as->corank;
      for (n = ar->dimen; n < ar->dimen + ar->codimen; n++)
 ar->dimen_type[n] = DIMEN_THIS_IMAGE;
    }

  return true;
}


static bool
resolve_substring (gfc_ref *ref, bool *equal_length)
{
  int k = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);

  if (ref->u.ss.start != 
# 5049 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 5049 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            )
    {
      if (!gfc_resolve_expr (ref->u.ss.start))
 return false;

      if (ref->u.ss.start->ts.type != BT_INTEGER)
 {
   gfc_error ("Substring start index at %L must be of type INTEGER",
       &ref->u.ss.start->where);
   return false;
 }

      if (ref->u.ss.start->rank != 0)
 {
   gfc_error ("Substring start index at %L must be scalar",
       &ref->u.ss.start->where);
   return false;
 }

      if (compare_bound_int (ref->u.ss.start, 1) == CMP_LT
   && (compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_EQ
       || compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_GT))
 {
   gfc_error ("Substring start index at %L is less than one",
       &ref->u.ss.start->where);
   return false;
 }
    }

  if (ref->u.ss.end != 
# 5078 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 5078 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          )
    {
      if (!gfc_resolve_expr (ref->u.ss.end))
 return false;

      if (ref->u.ss.end->ts.type != BT_INTEGER)
 {
   gfc_error ("Substring end index at %L must be of type INTEGER",
       &ref->u.ss.end->where);
   return false;
 }

      if (ref->u.ss.end->rank != 0)
 {
   gfc_error ("Substring end index at %L must be scalar",
       &ref->u.ss.end->where);
   return false;
 }

      if (ref->u.ss.length != 
# 5097 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             __null
   
# 5098 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && compare_bound (ref->u.ss.end, ref->u.ss.length->length) == CMP_GT
   && (compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_EQ
       || compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_GT))
 {
   gfc_error ("Substring end index at %L exceeds the string length",
       &ref->u.ss.start->where);
   return false;
 }

      if (compare_bound_mpz_t (ref->u.ss.end,
          gfc_integer_kinds[k].huge) == CMP_GT
   && (compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_EQ
       || compare_bound (ref->u.ss.end, ref->u.ss.start) == CMP_GT))
 {
   gfc_error ("Substring end index at %L is too large",
       &ref->u.ss.end->where);
   return false;
 }



      if (ref->u.ss.length != 
# 5119 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             __null
   
# 5120 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && compare_bound (ref->u.ss.end, ref->u.ss.length->length) == CMP_EQ
   && compare_bound_int (ref->u.ss.start, 1) == CMP_EQ)
 *equal_length = true;
    }

  return true;
}




void
gfc_resolve_substring_charlen (gfc_expr *e)
{
  gfc_ref *char_ref;
  gfc_expr *start, *end;
  gfc_typespec *ts = 
# 5136 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 5136 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ;
  mpz_t diff;

  for (char_ref = e->ref; char_ref; char_ref = char_ref->next)
    {
      if (char_ref->type == REF_SUBSTRING || char_ref->type == REF_INQUIRY)
 break;
      if (char_ref->type == REF_COMPONENT)
 ts = &char_ref->u.c.component->ts;
    }

  if (!char_ref || char_ref->type == REF_INQUIRY)
    return;

  ((void)(!(char_ref->next == 
# 5150 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __null
# 5150 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 5150, __FUNCTION__), 0 : 0));

  if (e->ts.u.cl)
    {
      if (e->ts.u.cl->length)
 gfc_free_expr (e->ts.u.cl->length);
      else if (e->expr_type == EXPR_VARIABLE && e->symtree->n.sym->attr.dummy)
 return;
    }

  if (!e->ts.u.cl)
    e->ts.u.cl = gfc_new_charlen (gfc_current_ns, 
# 5161 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                 __null
# 5161 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                     );

  if (char_ref->u.ss.start)
    start = gfc_copy_expr (char_ref->u.ss.start);
  else
    start = gfc_get_int_expr (gfc_charlen_int_kind, 
# 5166 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                   __null
# 5166 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                       , 1);

  if (char_ref->u.ss.end)
    end = gfc_copy_expr (char_ref->u.ss.end);
  else if (e->expr_type == EXPR_VARIABLE)
    {
      if (!ts)
 ts = &e->symtree->n.sym->ts;
      end = gfc_copy_expr (ts->u.cl->length);
    }
  else
    end = 
# 5177 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null
# 5177 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             ;

  if (!start || !end)
    {
      gfc_free_expr (start);
      gfc_free_expr (end);
      return;
    }



  if (gfc_dep_difference (end, start, &diff))
    {
      gfc_expr *len = gfc_get_constant_expr (BT_INTEGER, gfc_charlen_int_kind,
          &e->where);

      
# 5193 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_add_ui 
# 5193 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                (len->value.integer, diff, 1);
      
# 5194 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_clear 
# 5194 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               (diff);
      e->ts.u.cl->length = len;

    }
  else
    {
      e->ts.u.cl->length = gfc_subtract (end, start);
      e->ts.u.cl->length = gfc_add (e->ts.u.cl->length,
        gfc_get_int_expr (gfc_charlen_int_kind,
            
# 5203 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 5203 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               , 1));
    }





  if (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     e->ts.u.cl->length->value.integer
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     e->ts.u.cl->length->value.integer
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     e->ts.u.cl->length->value.integer
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     e->ts.u.cl->length->value.integer
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     0
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 5210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                       < 0)
    
# 5211 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_set_si 
# 5211 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (e->ts.u.cl->length->value.integer, 0);

  e->ts.u.cl->length->ts.type = BT_INTEGER;
  e->ts.u.cl->length->ts.kind = gfc_charlen_int_kind;


  gfc_simplify_expr (e->ts.u.cl->length, 1);
  gfc_resolve_expr (e->ts.u.cl->length);
}




bool
gfc_resolve_ref (gfc_expr *expr)
{
  int current_part_dimension, n_components, seen_part_dimension, dim;
  gfc_ref *ref, **prev, *array_ref;
  bool equal_length;

  for (ref = expr->ref; ref; ref = ref->next)
    if (ref->type == REF_ARRAY && ref->u.ar.as == 
# 5232 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                 __null
# 5232 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                     )
      {
 find_array_spec (expr);
 break;
      }

  for (prev = &expr->ref; *prev != 
# 5238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 5238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      ;
       prev = *prev == 
# 5239 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null 
# 5239 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           ? prev : &(*prev)->next)
    switch ((*prev)->type)
      {
      case REF_ARRAY:
 if (!resolve_array_ref (&(*prev)->u.ar))
   return false;
 break;

      case REF_COMPONENT:
      case REF_INQUIRY:
 break;

      case REF_SUBSTRING:
 equal_length = false;
 if (!resolve_substring (*prev, &equal_length))
   return false;

 if (expr->expr_type != EXPR_SUBSTRING && equal_length)
   {

     ref = *prev;
     *prev = ref->next;
     ref->next = 
# 5261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 5261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
     expr->ts.u.cl = ref->u.ss.length;
     ref->u.ss.length = 
# 5263 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 5263 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           ;
     gfc_free_ref_list (ref);
   }
 break;
      }



  current_part_dimension = 0;
  seen_part_dimension = 0;
  n_components = 0;
  array_ref = 
# 5274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 5274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 ;

  for (ref = expr->ref; ref; ref = ref->next)
    {
      switch (ref->type)
 {
 case REF_ARRAY:
   array_ref = ref;
   switch (ref->u.ar.type)
     {
     case AR_FULL:

       if (ref->u.ar.as->rank == 0)
  {
    current_part_dimension = 0;
    break;
  }

     case AR_SECTION:
       current_part_dimension = 1;
       break;

     case AR_ELEMENT:
       array_ref = 
# 5297 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 5297 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;
       current_part_dimension = 0;
       break;

     case AR_UNKNOWN:
       gfc_internal_error ("resolve_ref(): Bad array reference");
     }

   break;

 case REF_COMPONENT:
   if (current_part_dimension || seen_part_dimension)
     {

       if (ref->u.c.component->attr.pointer
    || ref->u.c.component->attr.proc_pointer
    || (ref->u.c.component->ts.type == BT_CLASS
   && ref->u.c.component->ts.u.derived->components->attr.pointer))
  {
    gfc_error ("Component to the right of a part reference "
        "with nonzero rank must not have the POINTER "
        "attribute at %L", &expr->where);
    return false;
  }
       else if (ref->u.c.component->attr.allocatable
   || (ref->u.c.component->ts.type == BT_CLASS
       && ref->u.c.component->ts.u.derived->components->attr.allocatable))

  {
    gfc_error ("Component to the right of a part reference "
        "with nonzero rank must not have the ALLOCATABLE "
        "attribute at %L", &expr->where);
    return false;
  }
     }

   n_components++;
   break;

 case REF_SUBSTRING:
   break;

 case REF_INQUIRY:


   if (ref->u.i == INQUIRY_LEN && array_ref && expr->ts.deferred)
     {
       array_ref->u.ar.type = AR_ELEMENT;
       expr->rank = 0;




       expr->no_bounds_check = 1;
       for (dim = 0; dim < array_ref->u.ar.dimen; dim++)
  {
    array_ref->u.ar.dimen_type[dim] = DIMEN_ELEMENT;
    if (array_ref->u.ar.start[dim])
      gfc_free_expr (array_ref->u.ar.start[dim]);
    array_ref->u.ar.start[dim]
   = gfc_get_int_expr (gfc_default_integer_kind, 
# 5357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 5357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    , 1);
    if (array_ref->u.ar.end[dim])
      gfc_free_expr (array_ref->u.ar.end[dim]);
    if (array_ref->u.ar.stride[dim])
      gfc_free_expr (array_ref->u.ar.stride[dim]);
  }
     }
   break;
 }

      if (((ref->type == REF_COMPONENT && n_components > 1)
    || ref->next == 
# 5368 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 5368 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       )
   && current_part_dimension
   && seen_part_dimension)
 {
   gfc_error ("Two or more part references with nonzero rank must "
       "not be specified at %L", &expr->where);
   return false;
 }

      if (ref->type == REF_COMPONENT)
 {
   if (current_part_dimension)
     seen_part_dimension = 1;


   current_part_dimension = 0;
 }
    }

  return true;
}





static void
expression_shape (gfc_expr *e)
{
  mpz_t array[15];
  int i;

  if (e->rank <= 0 || e->shape != 
# 5400 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                 __null
# 5400 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                     )
    return;

  for (i = 0; i < e->rank; i++)
    if (!gfc_array_dimen_size (e, i, &array[i]))
      goto fail;

  e->shape = (((mpz_t *) xcalloc (((e->rank)), sizeof (mpz_t))));

  memcpy (e->shape, array, e->rank * sizeof (mpz_t));

  return;

fail:
  for (i--; i >= 0; i--)
    
# 5415 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_clear 
# 5415 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (array[i]);
}





void
gfc_expression_rank (gfc_expr *e)
{
  gfc_ref *ref;
  int i, rank;



  ((void)(!(e->expr_type != EXPR_COMPCALL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 5430, __FUNCTION__), 0 : 0));

  if (e->ref == 
# 5432 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 5432 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   )
    {
      if (e->expr_type == EXPR_ARRAY)
 goto done;


      e->rank = ((e->symtree == 
# 5438 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null 
# 5438 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    || e->symtree->n.sym->as == 
# 5438 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                __null
# 5438 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                    )
   ? 0 : e->symtree->n.sym->as->rank);
      goto done;
    }

  rank = 0;

  for (ref = e->ref; ref; ref = ref->next)
    {
      if (ref->type == REF_COMPONENT && ref->u.c.component->attr.proc_pointer
   && ref->u.c.component->attr.function && !ref->next)
 rank = ref->u.c.component->as ? ref->u.c.component->as->rank : 0;

      if (ref->type != REF_ARRAY)
 continue;

      if (ref->u.ar.type == AR_FULL)
 {
   rank = ref->u.ar.as->rank;
   break;
 }

      if (ref->u.ar.type == AR_SECTION)
 {

   if (rank != 0)
     gfc_internal_error ("gfc_expression_rank(): Two array specs");

   for (i = 0; i < ref->u.ar.dimen; i++)
     if (ref->u.ar.dimen_type[i] == DIMEN_RANGE
  || ref->u.ar.dimen_type[i] == DIMEN_VECTOR)
       rank++;

   break;
 }
    }

  e->rank = rank;

done:
  expression_shape (e);
}


static void
add_caf_get_intrinsic (gfc_expr *e)
{
  gfc_expr *wrapper, *tmp_expr;
  gfc_ref *ref;
  int n;

  for (ref = e->ref; ref; ref = ref->next)
    if (ref->type == REF_ARRAY && ref->u.ar.codimen > 0)
      break;
  if (ref == 
# 5492 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 5492 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    return;

  for (n = ref->u.ar.dimen; n < ref->u.ar.dimen + ref->u.ar.codimen; n++)
    if (ref->u.ar.dimen_type[n] != DIMEN_ELEMENT)
      return;

  tmp_expr = ((gfc_expr *) xcalloc (1, sizeof (gfc_expr)));
  *tmp_expr = *e;
  wrapper = gfc_build_intrinsic_call (gfc_current_ns, GFC_ISYM_CAF_GET,
          "caf_get", tmp_expr->where, 1, tmp_expr);
  wrapper->ts = e->ts;
  wrapper->rank = e->rank;
  if (e->rank)
    wrapper->shape = gfc_copy_shape (e->shape, e->rank);
  *e = *wrapper;
  free (wrapper);
}


static void
remove_caf_get_intrinsic (gfc_expr *e)
{
  ((void)(!(e->expr_type == EXPR_FUNCTION && e->value.function.isym && e->value.function.isym->id == GFC_ISYM_CAF_GET) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 5515, __FUNCTION__), 0 : 0))
                                                         ;
  gfc_expr *e2 = e->value.function.actual->expr;
  e->value.function.actual->expr = 
# 5518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 5518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      ;
  gfc_free_actual_arglist (e->value.function.actual);
  gfc_free_shape (&e->shape, e->rank);
  *e = *e2;
  free (e2);
}




static bool
resolve_variable (gfc_expr *e)
{
  gfc_symbol *sym;
  bool t;

  t = true;

  if (e->symtree == 
# 5536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 5536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       )
    return false;
  sym = e->symtree->n.sym;



  if (sym->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))
    {
      if (!actual_arg || inquiry_argument)
 {
   gfc_error ("Variable %s at %L with NO_ARG_CHECK attribute may only "
       "be used as actual argument", sym->name, &e->where);
   return false;
 }
    }

  else if (e->ts.type == BT_ASSUMED)
    {
      if (!actual_arg)
 {
   gfc_error ("Assumed-type variable %s at %L may only be used "
       "as actual argument", sym->name, &e->where);
   return false;
 }
      else if (inquiry_argument && !first_actual_arg)
 {




   gfc_error ("Assumed-type variable %s at %L as actual argument to "
       "an inquiry function shall be the first argument",
       sym->name, &e->where);
   return false;
 }
    }

  else if (((sym->ts.type == BT_CLASS && sym->attr.class_ok
      && sym->ts.u.derived && sym->ts.u.derived->components
      && sym->ts.u.derived->components->as
      && sym->ts.u.derived->components->as->type == AS_ASSUMED_RANK)
     || (sym->ts.type != BT_CLASS && sym->as
         && sym->as->type == AS_ASSUMED_RANK))
    && !sym->attr.select_rank_temporary)
    {
      if (!actual_arg
   && !(cs_base && cs_base->current
        && cs_base->current->op == EXEC_SELECT_RANK))
 {
   gfc_error ("Assumed-rank variable %s at %L may only be used as "
       "actual argument", sym->name, &e->where);
   return false;
 }
      else if (inquiry_argument && !first_actual_arg)
 {




   gfc_error ("Assumed-rank variable %s at %L as actual argument "
       "to an inquiry function shall be the first argument",
       sym->name, &e->where);
   return false;
 }
    }

  if ((sym->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK)) && e->ref
      && !(e->ref->type == REF_ARRAY && e->ref->u.ar.type == AR_FULL
    && e->ref->next == 
# 5604 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 5604 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          ))
    {
      gfc_error ("Variable %s at %L with NO_ARG_CHECK attribute shall not have "
   "a subobject reference", sym->name, &e->ref->u.ar.where);
      return false;
    }

  else if (e->ts.type == BT_ASSUMED && e->ref
    && !(e->ref->type == REF_ARRAY && e->ref->u.ar.type == AR_FULL
  && e->ref->next == 
# 5613 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 5613 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ))
    {
      gfc_error ("Assumed-type variable %s at %L shall not have a subobject "
   "reference", sym->name, &e->ref->u.ar.where);
      return false;
    }


  if (((sym->ts.type == BT_CLASS && sym->attr.class_ok
 && sym->ts.u.derived && sym->ts.u.derived->components
 && sym->ts.u.derived->components->as
 && sym->ts.u.derived->components->as->type == AS_ASSUMED_RANK)
       || (sym->ts.type != BT_CLASS && sym->as
    && sym->as->type == AS_ASSUMED_RANK))
      && e->ref
      && !(e->ref->type == REF_ARRAY && e->ref->u.ar.type == AR_FULL
    && e->ref->next == 
# 5629 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 5629 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          ))
    {
      gfc_error ("Assumed-rank variable %s at %L shall not have a subobject "
   "reference", sym->name, &e->ref->u.ar.where);
      return false;
    }





  if (sym->assoc && e->rank == 0 && e->ref && sym->ts.type == BT_CLASS
      && sym->assoc->target && sym->assoc->target->ts.type == BT_CLASS
      && sym->assoc->target->ts.u.derived->components->as)
    {
      gfc_ref *ref = e->ref;
      while (ref)
 {
   switch (ref->type)
     {
     case REF_COMPONENT:
       ref->u.c.sym = sym->ts.u.derived;

       ref = 
# 5652 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 5652 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                ;
       break;
     default:
       ref = ref->next;
       break;
     }
 }
    }




  if (sym->assoc && !(sym->ts.type == BT_CLASS && e->rank == 0))
    {
      if (sym->ts.type == BT_CLASS)
 gfc_fix_class_refs (e);
      if (!sym->attr.dimension && e->ref && e->ref->type == REF_ARRAY)
 return false;
      else if (sym->attr.dimension && (!e->ref || e->ref->type != REF_ARRAY))
 {



   gfc_ref *ref = ((gfc_ref *) xcalloc (1, sizeof (gfc_ref)));
   ref->type = REF_ARRAY;
   ref->u.ar = *((gfc_array_ref *) xcalloc (1, sizeof (gfc_array_ref)));
   ref->u.ar.type = AR_FULL;
   if (sym->as)
     {
       ref->u.ar.as = sym->as;
       ref->u.ar.dimen = sym->as->rank;
     }
   ref->next = e->ref;
   e->ref = ref;

 }
    }

  if (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.generic)
    sym->ts.u.derived = gfc_find_dt_in_generic (sym->ts.u.derived);



  if (sym->assoc && sym->attr.dimension && !e->ref)
    {
      e->ref = ((gfc_ref *) xcalloc (1, sizeof (gfc_ref)));
      e->ref->type = REF_ARRAY;
      e->ref->u.ar.type = AR_FULL;
      e->ref->u.ar.dimen = 0;
    }




  if (sym->assoc && sym->ts.type == BT_CLASS
      && sym->ts.u.derived->components->attr.dimension
      && (e->ts.type != BT_DERIVED || !e->ts.u.derived->attr.vtype))
    {
      gfc_ref *ref, *newref;

      newref = ((gfc_ref *) xcalloc (1, sizeof (gfc_ref)));
      newref->type = REF_ARRAY;
      newref->u.ar.type = AR_FULL;
      newref->u.ar.dimen = 0;





      ref = e->ref;
      if (!ref)
 e->ref = newref;
      else if (ref->type == REF_COMPONENT
        && strcmp ("_data", ref->u.c.component->name) == 0)
 {
   if (!ref->next || ref->next->type != REF_ARRAY)
     {
       newref->next = ref->next;
       ref->next = newref;
     }
   else

     gfc_free_ref_list (newref);
 }
      else if (ref->type == REF_ARRAY)

 gfc_free_ref_list (newref);
      else
 {
   newref->next = ref;
   e->ref = newref;
 }
    }

  if (e->ref && !gfc_resolve_ref (e))
    return false;

  if (sym->attr.flavor == FL_PROCEDURE
      && (!sym->attr.function
   || (sym->attr.function && sym->result
       && sym->result->attr.proc_pointer
       && !sym->result->attr.function)))
    {
      e->ts.type = BT_PROCEDURE;
      goto resolve_procedure;
    }

  if (sym->ts.type != BT_UNKNOWN)
    gfc_variable_attr (e, &e->ts);
  else if (sym->attr.flavor == FL_PROCEDURE
    && sym->attr.function && sym->result
    && sym->result->ts.type != BT_UNKNOWN
    && sym->result->attr.proc_pointer)
    e->ts = sym->result->ts;
  else
    {

      if (!gfc_set_default_type (sym, 1, sym->ns))
 return false;
      e->ts = sym->ts;
    }

  if (check_assumed_size_reference (sym, e))
    return false;



  if (gfc_current_ns->entries
      && current_entry_id == sym->entry_id
      && cs_base
      && cs_base->current
      && cs_base->current->op != EXEC_ENTRY)
    {
      gfc_entry_list *entry;
      gfc_formal_arglist *formal;
      int n;
      bool seen, saved_specification_expr;


      if (sym->attr.dummy && sym->ns == gfc_current_ns)
 {
   entry = gfc_current_ns->entries;
   seen = false;


   for (; entry && entry->id <= current_entry_id; entry = entry->next)
     for (formal = entry->sym->formal; formal; formal = formal->next)
       {
  if (formal->sym && sym->name == formal->sym->name)
    {
      seen = true;
      break;
    }
       }


   if (!seen)
     {
       if (specification_expr)
  gfc_error ("Variable %qs, used in a specification expression"
      ", is referenced at %L before the ENTRY statement "
      "in which it is a parameter",
      sym->name, &cs_base->current->loc);
       else
  gfc_error ("Variable %qs is used at %L before the ENTRY "
      "statement in which it is a parameter",
      sym->name, &cs_base->current->loc);
       t = false;
     }
 }


      saved_specification_expr = specification_expr;
      specification_expr = true;
      if (sym->ts.type == BT_CHARACTER
   && !gfc_resolve_expr (sym->ts.u.cl->length))
 t = false;

      if (sym->as)
 for (n = 0; n < sym->as->rank; n++)
   {
      if (!gfc_resolve_expr (sym->as->lower[n]))
        t = false;
      if (!gfc_resolve_expr (sym->as->upper[n]))
        t = false;
   }
      specification_expr = saved_specification_expr;

      if (t)

 sym->entry_id = current_entry_id + 1;
    }



  if (sym->attr.flavor == FL_VARIABLE
 && gfc_current_ns->parent
 && (gfc_current_ns->parent == sym->ns
       || (gfc_current_ns->parent->parent
      && gfc_current_ns->parent->parent == sym->ns)))
    sym->attr.host_assoc = 1;

  if (gfc_current_ns->proc_name
      && sym->attr.dimension
      && (sym->ns != gfc_current_ns
   || sym->attr.use_assoc
   || sym->attr.in_common))
    gfc_current_ns->proc_name->attr.array_outer_dependency = 1;

resolve_procedure:
  if (t && !resolve_procedure_expression (e))
    t = false;


  if (!inquiry_argument && (e->ts.type == BT_CLASS || e->ts.type == BT_DERIVED)
      && gfc_is_coindexed (e))
    {
      gfc_ref *ref, *ref2 = 
# 5869 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 5869 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;

      for (ref = e->ref; ref; ref = ref->next)
 {
   if (ref->type == REF_COMPONENT)
     ref2 = ref;
   if (ref->type == REF_ARRAY && ref->u.ar.codimen > 0)
     break;
 }

      for ( ; ref; ref = ref->next)
 if (ref->type == REF_COMPONENT)
   break;


      if (ref && e->ts.type == BT_CLASS)
 {
   gfc_error ("Polymorphic subobject of coindexed object at %L",
       &e->where);
   t = false;
 }


      if (ref == 
# 5892 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 5892 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
 {
   gfc_component *c;
   c = ref2 ? ref2->u.c.component : e->symtree->n.sym->components;
   for ( ; c; c = c->next)
     if (c->attr.allocatable && c->ts.type == BT_CLASS)
       {
  gfc_error ("Coindexed object with polymorphic allocatable "
    "subcomponent at %L", &e->where);
  t = false;
  break;
       }
 }
    }

  if (t)
    gfc_expression_rank (e);

  if (t && global_options.x_flag_coarray == GFC_FCOARRAY_LIB && gfc_is_coindexed (e))
    add_caf_get_intrinsic (e);




  if (e->rank == 0 && sym->as && sym->attr.flavor == FL_PARAMETER)
    {
      gfc_push_suppress_errors ();
      gfc_simplify_expr (e, 1);
      gfc_pop_suppress_errors ();
    }

  return t;
}
# 5933 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static bool
check_host_association (gfc_expr *e)
{
  gfc_symbol *sym, *old_sym;
  gfc_symtree *st;
  int n;
  gfc_ref *ref;
  gfc_actual_arglist *arg, *tail = 
# 5940 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 5940 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      ;
  bool retval = e->expr_type == EXPR_FUNCTION;




  if (e->symtree == 
# 5946 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
 
# 5947 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
|| e->symtree->n.sym == 
# 5947 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
 
# 5948 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
|| e->user_operator)
    return retval;

  old_sym = e->symtree->n.sym;

  if (gfc_current_ns->parent
 && old_sym->ns != gfc_current_ns)
    {


      gfc_find_symbol (e->symtree->name, gfc_current_ns, 1, &sym);

      if (sym && old_sym != sym
       && sym->ts.type == old_sym->ts.type
       && sym->attr.flavor == FL_PROCEDURE
       && sym->attr.contained)
 {

   gfc_free_shape (&e->shape, e->rank);


   gfc_find_sym_tree (e->symtree->name, 
# 5969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                       __null
# 5969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                           , 1, &st);
   ((void)(!(st != 
# 5970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __null
# 5970 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 5970, __FUNCTION__), 0 : 0));

   if (old_sym->attr.flavor == FL_PROCEDURE
  || e->expr_type == EXPR_FUNCTION)
       {



       e->value.function.esym = 
# 5978 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null
# 5978 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                   ;
       e->symtree = st;
     }
   else
     {



       e->value.function.actual = 
# 5986 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                 __null
# 5986 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                     ;
       e->expr_type = EXPR_FUNCTION;
       e->symtree = st;



       for (ref = e->ref; ref; ref = ref->next)
  if (ref->type == REF_ARRAY && ref->next == 
# 5993 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                            __null
# 5993 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                )
    break;

       if ((ref == 
# 5996 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null 
# 5996 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       || ref->type != REF_ARRAY)
    && sym->attr.proc == PROC_INTERNAL)
  {
    gfc_error ("%qs at %L is host associated at %L into "
        "a contained procedure with an internal "
        "procedure of the same name", sym->name,
         &old_sym->declared_at, &e->where);
    return false;
  }

       ((void)(!(ref->type == REF_ARRAY) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6006, __FUNCTION__), 0 : 0));



       for (n = 0; n < ref->u.ar.dimen; n++)
  {
    arg = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
    arg->expr = gfc_copy_expr (ref->u.ar.start[n]);
    if (e->value.function.actual == 
# 6014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                   __null
# 6014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                       )
      tail = e->value.function.actual = arg;
           else
      {
        tail->next = arg;
        tail = arg;
      }
  }


       gfc_free_ref_list (e->ref);
       e->ref = 
# 6025 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 6025 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
       e->rank = sym->as ? sym->as->rank : 0;
     }

   gfc_resolve_expr (e);
   sym->refs++;
 }
    }

  return e->expr_type == EXPR_FUNCTION;
}


static void
gfc_resolve_character_operator (gfc_expr *e)
{
  gfc_expr *op1 = e->value.op.op1;
  gfc_expr *op2 = e->value.op.op2;
  gfc_expr *e1 = 
# 6043 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 6043 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
  gfc_expr *e2 = 
# 6044 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 6044 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;

  ((void)(!(e->value.op.op == INTRINSIC_CONCAT) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6046, __FUNCTION__), 0 : 0));

  if (op1->ts.u.cl && op1->ts.u.cl->length)
    e1 = gfc_copy_expr (op1->ts.u.cl->length);
  else if (op1->expr_type == EXPR_CONSTANT)
    e1 = gfc_get_int_expr (gfc_charlen_int_kind, 
# 6051 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 6051 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    ,
      op1->value.character.length);

  if (op2->ts.u.cl && op2->ts.u.cl->length)
    e2 = gfc_copy_expr (op2->ts.u.cl->length);
  else if (op2->expr_type == EXPR_CONSTANT)
    e2 = gfc_get_int_expr (gfc_charlen_int_kind, 
# 6057 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 6057 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    ,
      op2->value.character.length);

  e->ts.u.cl = gfc_new_charlen (gfc_current_ns, 
# 6060 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                               __null
# 6060 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                   );

  if (!e1 || !e2)
    {
      gfc_free_expr (e1);
      gfc_free_expr (e2);

      return;
    }

  e->ts.u.cl->length = gfc_add (e1, e2);
  e->ts.u.cl->length->ts.type = BT_INTEGER;
  e->ts.u.cl->length->ts.kind = gfc_charlen_int_kind;
  gfc_simplify_expr (e->ts.u.cl->length, 0);
  gfc_resolve_expr (e->ts.u.cl->length);

  return;
}





static void
fixup_charlen (gfc_expr *e)
{



  switch (e->expr_type)
    {
    case EXPR_OP:
      gfc_resolve_character_operator (e);


    case EXPR_ARRAY:
      if (e->expr_type == EXPR_ARRAY)
 gfc_resolve_character_array_constructor (e);


    case EXPR_SUBSTRING:
      if (!e->ts.u.cl && e->ref)
 gfc_resolve_substring_charlen (e);


    default:
      if (!e->ts.u.cl)
 e->ts.u.cl = gfc_new_charlen (gfc_current_ns, 
# 6107 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                              __null
# 6107 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                  );

      break;
    }
}





static gfc_actual_arglist*
update_arglist_pass (gfc_actual_arglist* lst, gfc_expr* po, unsigned argpos,
       const char *name)
{
  ((void)(!(argpos > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6121, __FUNCTION__), 0 : 0));

  if (argpos == 1)
    {
      gfc_actual_arglist* result;

      result = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
      result->expr = po;
      result->next = lst;
      if (name)
        result->name = name;

      return result;
    }

  if (lst)
    lst->next = update_arglist_pass (lst->next, po, argpos - 1, name);
  else
    lst = update_arglist_pass (
# 6139 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 6139 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  , po, argpos - 1, name);
  return lst;
}




static gfc_expr*
extract_compcall_passed_object (gfc_expr* e)
{
  gfc_expr* po;

  if (e->expr_type == EXPR_UNKNOWN)
    {
      gfc_error ("Error in typebound call at %L",
   &e->where);
      return 
# 6155 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 6155 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                ;
    }

  ((void)(!(e->expr_type == EXPR_COMPCALL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6158, __FUNCTION__), 0 : 0));

  if (e->value.compcall.base_object)
    po = gfc_copy_expr (e->value.compcall.base_object);
  else
    {
      po = gfc_get_expr ();
      po->expr_type = EXPR_VARIABLE;
      po->symtree = e->symtree;
      po->ref = gfc_copy_ref (e->ref);
      po->where = e->where;
    }

  if (!gfc_resolve_expr (po))
    return 
# 6172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 6172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              ;

  return po;
}





static bool
update_compcall_arglist (gfc_expr* e)
{
  gfc_expr* po;
  gfc_typebound_proc* tbp;

  tbp = e->value.compcall.tbp;

  if (tbp->error)
    return false;

  po = extract_compcall_passed_object (e);
  if (!po)
    return false;

  if (tbp->nopass || e->value.compcall.ignore_pass)
    {
      gfc_free_expr (po);
      return true;
    }

  if (tbp->pass_arg_num <= 0)
    return false;

  e->value.compcall.actual = update_arglist_pass (e->value.compcall.actual, po,
        tbp->pass_arg_num,
        tbp->pass_arg);

  return true;
}




static gfc_expr*
extract_ppc_passed_object (gfc_expr *e)
{
  gfc_expr *po;
  gfc_ref **ref;

  po = gfc_get_expr ();
  po->expr_type = EXPR_VARIABLE;
  po->symtree = e->symtree;
  po->ref = gfc_copy_ref (e->ref);
  po->where = e->where;


  ref = &po->ref;
  while ((*ref)->next)
    ref = &(*ref)->next;
  gfc_free_ref_list (*ref);
  *ref = 
# 6232 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 6232 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;

  if (!gfc_resolve_expr (po))
    return 
# 6235 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 6235 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              ;

  return po;
}





static bool
update_ppc_arglist (gfc_expr* e)
{
  gfc_expr* po;
  gfc_component *ppc;
  gfc_typebound_proc* tb;

  ppc = gfc_get_proc_ptr_comp (e);
  if (!ppc)
    return false;

  tb = ppc->tb;

  if (tb->error)
    return false;
  else if (tb->nopass)
    return true;

  po = extract_ppc_passed_object (e);
  if (!po)
    return false;


  if (po->rank != 0)
    {
      gfc_error ("Passed-object at %L must be scalar", &e->where);
      return false;
    }


  if (po->ts.type == BT_DERIVED && po->ts.u.derived->attr.abstract)
    {
      gfc_error ("Base object for procedure-pointer component call at %L is of"
   " ABSTRACT type %qs", &e->where, po->ts.u.derived->name);
      return false;
    }

  ((void)(!(tb->pass_arg_num > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6281, __FUNCTION__), 0 : 0));
  e->value.compcall.actual = update_arglist_pass (e->value.compcall.actual, po,
        tb->pass_arg_num,
        tb->pass_arg);

  return true;
}





static bool
check_typebound_baseobject (gfc_expr* e)
{
  gfc_expr* base;
  bool return_value = false;

  base = extract_compcall_passed_object (e);
  if (!base)
    return false;

  if (base->ts.type != BT_DERIVED && base->ts.type != BT_CLASS)
    {
      gfc_error ("Error in typebound call at %L", &e->where);
      goto cleanup;
    }

  if (base->ts.type == BT_CLASS && !gfc_expr_attr (base).class_ok)
    return false;


  if (base->ts.type == BT_DERIVED && base->ts.u.derived->attr.abstract)
    {
      gfc_error ("Base object for type-bound procedure call at %L is of"
   " ABSTRACT type %qs", &e->where, base->ts.u.derived->name);
      goto cleanup;
    }



  if (e->value.compcall.tbp->nopass && base->rank != 0)
    {
      gfc_error ("Base object for NOPASS type-bound procedure call at %L must"
   " be scalar", &e->where);
      goto cleanup;
    }

  return_value = true;

cleanup:
  gfc_free_expr (base);
  return return_value;
}






static bool
resolve_typebound_static (gfc_expr* e, gfc_symtree** target,
     gfc_actual_arglist** actual)
{
  ((void)(!(e->expr_type == EXPR_COMPCALL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6345, __FUNCTION__), 0 : 0));
  ((void)(!(!e->value.compcall.tbp->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6346, __FUNCTION__), 0 : 0));


  if (!update_compcall_arglist (e))
    return false;

  *actual = e->value.compcall.actual;
  *target = e->value.compcall.tbp->u.specific;

  gfc_free_ref_list (e->ref);
  e->ref = 
# 6356 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 6356 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              ;
  e->value.compcall.actual = 
# 6357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 6357 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                ;



  if (e->value.compcall.name
      && !e->value.compcall.tbp->non_overridable
      && e->value.compcall.base_object
      && e->value.compcall.base_object->ts.type == BT_DERIVED)
    {
      gfc_symtree *st;
      gfc_symbol *derived;


      derived = e->value.compcall.base_object->ts.u.derived;
      st = 
# 6371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 6371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              ;


      while (!st && derived)
 {

   if (derived->f2k_derived && derived->f2k_derived->tb_sym_root)
     st = gfc_find_symtree (derived->f2k_derived->tb_sym_root,
       e->value.compcall.name);
   if (!st)
     derived = gfc_get_derived_super_type (derived);
 }


      if (st && st->n.tb && st->n.tb->u.specific)
 gfc_find_sym_tree (st->n.tb->u.specific->name,
      derived->ns, 1, &st);
      if (st)
 *target = st;
    }
  return true;
}






static gfc_symbol*
get_declared_from_expr (gfc_ref **class_ref, gfc_ref **new_ref,
   gfc_expr *e, bool check_types)
{
  gfc_symbol *declared;
  gfc_ref *ref;

  declared = 
# 6406 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 6406 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                ;
  if (class_ref)
    *class_ref = 
# 6408 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 6408 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
  if (new_ref)
    *new_ref = gfc_copy_ref (e->ref);

  for (ref = e->ref; ref; ref = ref->next)
    {
      if (ref->type != REF_COMPONENT)
 continue;

      if ((ref->u.c.component->ts.type == BT_CLASS
      || (check_types && ((ref->u.c.component->ts.type) == BT_DERIVED || (ref->u.c.component->ts.type) == BT_UNION)))
   && ref->u.c.component->attr.flavor != FL_PROCEDURE)
 {
   declared = ref->u.c.component->ts.u.derived;
   if (class_ref)
     *class_ref = ref;
 }
    }

  if (declared == 
# 6427 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 6427 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
    declared = e->symtree->n.sym->ts.u.derived;

  return declared;
}






static bool
resolve_typebound_generic_call (gfc_expr* e, const char **name)
{
  gfc_typebound_proc* genproc;
  const char* genname;
  gfc_symtree *st;
  gfc_symbol *derived;

  ((void)(!(e->expr_type == EXPR_COMPCALL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6446, __FUNCTION__), 0 : 0));
  genname = e->value.compcall.name;
  genproc = e->value.compcall.tbp;

  if (!genproc->is_generic)
    return true;


  for (; genproc; genproc = genproc->overridden)
    {
      gfc_tbp_generic* g;

      ((void)(!(genproc->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6458, __FUNCTION__), 0 : 0));
      for (g = genproc->u.generic; g; g = g->next)
 {
   gfc_symbol* target;
   gfc_actual_arglist* args;
   bool matches;

   ((void)(!(g->specific) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6465, __FUNCTION__), 0 : 0));

   if (g->specific->error)
     continue;

   target = g->specific->u.specific->n.sym;


   args = gfc_copy_actual_arglist (e->value.compcall.actual);
   if (!g->specific->nopass)
     {
       gfc_expr* po;
       po = extract_compcall_passed_object (e);
       if (!po)
  {
    gfc_free_actual_arglist (args);
    return false;
  }

       ((void)(!(g->specific->pass_arg_num > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6484, __FUNCTION__), 0 : 0));
       ((void)(!(!g->specific->error) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6485, __FUNCTION__), 0 : 0));
       args = update_arglist_pass (args, po, g->specific->pass_arg_num,
       g->specific->pass_arg);
     }
   resolve_actual_arglist (args, target->attr.proc,
      is_external_proc (target)
      && gfc_sym_get_dummy_args (target) == 
# 6491 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                           __null
# 6491 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                               );


   matches = gfc_arglist_matches_symbol (&args, target);


   gfc_free_actual_arglist (args);
   if (matches)
     {
       e->value.compcall.tbp = g->specific;
       genname = g->specific_st->name;


       if (name)
  *name = genname;
       goto success;
     }
 }
    }


  gfc_error ("Found no matching specific binding for the call to the GENERIC"
      " %qs at %L", genname, &e->where);
  return false;

success:

  derived = get_declared_from_expr (
# 6518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                   __null
# 6518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                       , 
# 6518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 6518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             , e, true);

  st = gfc_find_typebound_proc (derived, 
# 6520 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        __null
# 6520 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                            , genname, true, &e->where);
  if (st)
    e->value.compcall.tbp = st->n.tb;

  return true;
}




static bool
resolve_typebound_call (gfc_code* c, const char **name, bool *overridable)
{
  gfc_actual_arglist* newactual;
  gfc_symtree* target;


  if (!c->expr1->value.compcall.tbp->subroutine)
    {
      if (!c->expr1->value.compcall.tbp->is_generic
   && c->expr1->value.compcall.tbp->u.specific
   && c->expr1->value.compcall.tbp->u.specific->n.sym
   && c->expr1->value.compcall.tbp->u.specific->n.sym->attr.subroutine)
 c->expr1->value.compcall.tbp->subroutine = 1;
      else
 {
   gfc_error ("%qs at %L should be a SUBROUTINE",
       c->expr1->value.compcall.name, &c->loc);
   return false;
 }
    }

  if (!check_typebound_baseobject (c->expr1))
    return false;



  if (name)
    *name = c->expr1->value.compcall.name;

  if (!resolve_typebound_generic_call (c->expr1, name))
    return false;


  if (overridable)
    *overridable = !c->expr1->value.compcall.tbp->non_overridable;



  if (!resolve_typebound_static (c->expr1, &target, &newactual))
    return false;

  c->ext.actual = newactual;
  c->symtree = target;
  c->op = (c->expr1->value.compcall.assign ? EXEC_ASSIGN_CALL : EXEC_CALL);

  ((void)(!(!c->expr1->ref && !c->expr1->value.compcall.actual) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6576, __FUNCTION__), 0 : 0));

  gfc_free_expr (c->expr1);
  c->expr1 = gfc_get_expr ();
  c->expr1->expr_type = EXPR_FUNCTION;
  c->expr1->symtree = target;
  c->expr1->where = c->loc;

  return resolve_call (c);
}



static bool
resolve_compcall (gfc_expr* e, const char **name)
{
  gfc_actual_arglist* newactual;
  gfc_symtree* target;


  if (!e->value.compcall.tbp->function)
    {
      gfc_error ("%qs at %L should be a FUNCTION",
   e->value.compcall.name, &e->where);
      return false;
    }



  ((void)(!(!e->value.compcall.assign) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6605, __FUNCTION__), 0 : 0));

  if (!check_typebound_baseobject (e))
    return false;



  if (name)
    *name = e->value.compcall.name;

  if (!resolve_typebound_generic_call (e, name))
    return false;
  ((void)(!(!e->value.compcall.tbp->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6617, __FUNCTION__), 0 : 0));


  if (e->value.compcall.tbp->u.specific->n.sym->as)
    e->rank = e->value.compcall.tbp->u.specific->n.sym->as->rank;




  if (!resolve_typebound_static (e, &target, &newactual))
    return false;

  e->value.function.actual = newactual;
  e->value.function.name = 
# 6630 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 6630 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;
  e->value.function.esym = target->n.sym;
  e->value.function.isym = 
# 6632 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 6632 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;
  e->symtree = target;
  e->ts = target->n.sym->ts;
  e->expr_type = EXPR_FUNCTION;




  return gfc_resolve_expr (e);
}


static bool resolve_fl_derived (gfc_symbol *sym);





static bool
resolve_typebound_function (gfc_expr* e)
{
  gfc_symbol *declared;
  gfc_component *c;
  gfc_ref *new_ref;
  gfc_ref *class_ref;
  gfc_symtree *st;
  const char *name;
  gfc_typespec ts;
  gfc_expr *expr;
  bool overridable;

  st = e->symtree;


  expr = e->value.compcall.base_object;
  overridable = !e->value.compcall.tbp->non_overridable;
  if (expr && expr->ts.type == BT_CLASS && e->value.compcall.name)
    {



      ts = expr->ts;
      declared = ts.u.derived;
      c = gfc_find_component (declared, "_vptr", true, true, 
# 6675 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                            __null
# 6675 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                );
      if (c->ts.u.derived == 
# 6676 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 6676 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                )
 c->ts.u.derived = gfc_find_derived_vtab (declared);

      if (!resolve_compcall (e, &name))
 return false;


      name = name ? name : e->value.function.esym->name;
      e->symtree = expr->symtree;
      e->ref = gfc_copy_ref (expr->ref);
      get_declared_from_expr (&class_ref, 
# 6686 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 6686 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             , e, false);



      if (class_ref && class_ref->next)
 {
   gfc_free_ref_list (class_ref->next);
   class_ref->next = 
# 6693 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 6693 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ;
 }
      else if (e->ref && !class_ref && expr->ts.type != BT_CLASS)
 {
   gfc_free_ref_list (e->ref);
   e->ref = 
# 6698 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 6698 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               ;
 }

      gfc_add_component_ref(e,"_vptr");
      gfc_add_component_ref (e, name);
      e->value.function.esym = 
# 6703 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 6703 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  ;
      if (expr->expr_type != EXPR_VARIABLE)
 e->base_expr = expr;
      return true;
    }

  if (st == 
# 6709 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 6709 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               )
    return resolve_compcall (e, 
# 6710 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null
# 6710 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                   );

  if (!gfc_resolve_ref (e))
    return false;


  declared = get_declared_from_expr (&class_ref, &new_ref, e, true);

  if (!resolve_fl_derived (declared))
    return false;


  if ((class_ref && ((class_ref->u.c.component->ts.type) == BT_DERIVED || (class_ref->u.c.component->ts.type) == BT_UNION))
  || (!class_ref && st->n.sym->ts.type != BT_CLASS))
    {
      gfc_free_ref_list (new_ref);
      return resolve_compcall (e, 
# 6726 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                 __null
# 6726 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                     );
    }

  c = gfc_find_component (declared, "_data", true, true, 
# 6729 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                        __null
# 6729 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                            );



  if (!resolve_compcall (e, &name))
    {
      gfc_free_ref_list (new_ref);
      return false;
    }
  ts = e->ts;

  if (overridable)
    {

      e->value.function.esym = 
# 6743 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 6743 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  ;
      e->symtree = st;

      if (new_ref)
 e->ref = new_ref;


      gfc_add_component_ref(e,"_vptr");
      gfc_add_component_ref (e, name);





      e->ts = ts;
    }
  else if (new_ref)
    gfc_free_ref_list (new_ref);

  return true;
}





static bool
resolve_typebound_subroutine (gfc_code *code)
{
  gfc_symbol *declared;
  gfc_component *c;
  gfc_ref *new_ref;
  gfc_ref *class_ref;
  gfc_symtree *st;
  const char *name;
  gfc_typespec ts;
  gfc_expr *expr;
  bool overridable;

  st = code->expr1->symtree;


  expr = code->expr1->value.compcall.base_object;
  overridable = !code->expr1->value.compcall.tbp->non_overridable;
  if (expr && expr->ts.type == BT_CLASS && code->expr1->value.compcall.name)
    {




      if (expr->expr_type != EXPR_VARIABLE)
 {
   gfc_actual_arglist *args;

   args= code->expr1->value.function.actual;
   for (; args; args = args->next)
     if (expr == args->expr)
       expr = args->expr;
 }




      declared = expr->ts.u.derived;
      c = gfc_find_component (declared, "_vptr", true, true, 
# 6807 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                            __null
# 6807 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                );
      if (c->ts.u.derived == 
# 6808 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 6808 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                )
 c->ts.u.derived = gfc_find_derived_vtab (declared);

      if (!resolve_typebound_call (code, &name, 
# 6811 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                               __null
# 6811 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                   ))
 return false;


      name = name ? name : code->expr1->value.function.esym->name;
      code->expr1->symtree = expr->symtree;
      code->expr1->ref = gfc_copy_ref (expr->ref);



      get_declared_from_expr (&class_ref, 
# 6821 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 6821 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             , code->expr1, false);
      if (class_ref && class_ref->next)
 {
   gfc_free_ref_list (class_ref->next);
   class_ref->next = 
# 6825 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 6825 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        ;
 }
      else if (code->expr1->ref && !class_ref)
 {
   gfc_free_ref_list (code->expr1->ref);
   code->expr1->ref = 
# 6830 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 6830 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         ;
 }


      gfc_add_component_ref(code->expr1,"_vptr");
      gfc_add_component_ref (code->expr1, name);
      code->expr1->value.function.esym = 
# 6836 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        __null
# 6836 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                            ;
      if (expr->expr_type != EXPR_VARIABLE)
 code->expr1->base_expr = expr;
      return true;
    }

  if (st == 
# 6842 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 6842 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               )
    return resolve_typebound_call (code, 
# 6843 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        __null
# 6843 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                            , 
# 6843 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                              __null
# 6843 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                  );

  if (!gfc_resolve_ref (code->expr1))
    return false;


  get_declared_from_expr (&class_ref, &new_ref, code->expr1, true);


  if ((class_ref && ((class_ref->u.c.component->ts.type) == BT_DERIVED || (class_ref->u.c.component->ts.type) == BT_UNION))
  || (!class_ref && st->n.sym->ts.type != BT_CLASS))
    {
      gfc_free_ref_list (new_ref);
      return resolve_typebound_call (code, 
# 6856 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                          __null
# 6856 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                              , 
# 6856 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 6856 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    );
    }

  if (!resolve_typebound_call (code, &name, &overridable))
    {
      gfc_free_ref_list (new_ref);
      return false;
    }
  ts = code->expr1->ts;

  if (overridable)
    {

      code->expr1->value.function.esym = 
# 6869 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        __null
# 6869 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                            ;
      code->expr1->symtree = st;

      if (new_ref)
 code->expr1->ref = new_ref;


      gfc_add_component_ref(code->expr1,"_vptr");
      gfc_add_component_ref (code->expr1, name);





      code->expr1->ts = ts;
    }
  else if (new_ref)
    gfc_free_ref_list (new_ref);

  return true;
}




static bool
resolve_ppc_call (gfc_code* c)
{
  gfc_component *comp;

  comp = gfc_get_proc_ptr_comp (c->expr1);
  ((void)(!(comp != 
# 6900 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __null
# 6900 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6900, __FUNCTION__), 0 : 0));

  c->resolved_sym = c->expr1->symtree->n.sym;
  c->expr1->expr_type = EXPR_VARIABLE;

  if (!comp->attr.subroutine)
    gfc_add_subroutine (&comp->attr, comp->name, &c->expr1->where);

  if (!gfc_resolve_ref (c->expr1))
    return false;

  if (!update_ppc_arglist (c->expr1))
    return false;

  c->ext.actual = c->expr1->value.compcall.actual;

  if (!resolve_actual_arglist (c->ext.actual, comp->attr.proc,
          !(comp->ts.interface
     && comp->ts.interface->formal)))
    return false;

  if (!pure_subroutine (comp->ts.interface, comp->name, &c->expr1->where))
    return false;

  gfc_ppc_use (comp, &c->expr1->value.compcall.actual, &c->expr1->where);

  return true;
}




static bool
resolve_expr_ppc (gfc_expr* e)
{
  gfc_component *comp;

  comp = gfc_get_proc_ptr_comp (e);
  ((void)(!(comp != 
# 6938 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __null
# 6938 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 6938, __FUNCTION__), 0 : 0));


  e->expr_type = EXPR_FUNCTION;
  e->value.function.isym = 
# 6942 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 6942 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;
  e->value.function.actual = e->value.compcall.actual;
  e->ts = comp->ts;
  if (comp->as != 
# 6945 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 6945 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
    e->rank = comp->as->rank;

  if (!comp->attr.function)
    gfc_add_function (&comp->attr, comp->name, &e->where);

  if (!gfc_resolve_ref (e))
    return false;

  if (!resolve_actual_arglist (e->value.function.actual, comp->attr.proc,
          !(comp->ts.interface
     && comp->ts.interface->formal)))
    return false;

  if (!update_ppc_arglist (e))
    return false;

  if (!check_pure_function(e))
    return false;

  gfc_ppc_use (comp, &e->value.compcall.actual, &e->where);

  return true;
}


static bool
gfc_is_expandable_expr (gfc_expr *e)
{
  gfc_constructor *con;

  if (e->expr_type == EXPR_ARRAY)
    {



      con = gfc_constructor_first (e->value.constructor);
      for (; con; con = gfc_constructor_next (con))
 {
   if (con->expr->expr_type == EXPR_VARIABLE
       && con->expr->symtree
       && (con->expr->symtree->n.sym->attr.flavor == FL_PARAMETER
       || con->expr->symtree->n.sym->attr.flavor == FL_VARIABLE))
     return true;
   if (con->expr->expr_type == EXPR_ARRAY
       && gfc_is_expandable_expr (con->expr))
     return true;
 }
    }

  return false;
}







static void
fixup_unique_dummy (gfc_expr *e)
{
  gfc_symtree *st = 
# 7007 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 7007 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;
  gfc_symbol *s = 
# 7008 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 7008 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     ;

  if (e->symtree->n.sym->ns->proc_name
      && e->symtree->n.sym->ns->proc_name->formal)
    s = e->symtree->n.sym->ns->proc_name->formal->sym;

  if (s != 
# 7014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 7014 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              )
    st = gfc_find_symtree (s->ns->sym_root, e->symtree->n.sym->name);

  if (st != 
# 7017 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
      
# 7018 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && st->n.sym != 
# 7018 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
      
# 7019 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && st->n.sym->attr.dummy)
    e->symtree = st;
}





bool
gfc_resolve_expr (gfc_expr *e)
{
  bool t;
  bool inquiry_save, actual_arg_save, first_actual_arg_save;

  if (e == 
# 7033 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null 
# 7033 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               || e->do_not_resolve_again)
    return true;


  inquiry_save = inquiry_argument;
  actual_arg_save = actual_arg;
  first_actual_arg_save = first_actual_arg;

  if (e->expr_type != EXPR_VARIABLE)
    {
      inquiry_argument = false;
      actual_arg = false;
      first_actual_arg = false;
    }
  else if (e->symtree != 
# 7047 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
    
# 7048 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   && *e->symtree->name == '@'
    && e->symtree->n.sym->attr.dummy)
    {


      fixup_unique_dummy (e);
    }

  switch (e->expr_type)
    {
    case EXPR_OP:
      t = resolve_operator (e);
      break;

    case EXPR_FUNCTION:
    case EXPR_VARIABLE:

      if (check_host_association (e))
 t = resolve_function (e);
      else
 t = resolve_variable (e);

      if (e->ts.type == BT_CHARACTER && e->ts.u.cl == 
# 7070 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                     __null 
# 7070 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                          && e->ref
   && e->ref->type != REF_SUBSTRING)
 gfc_resolve_substring_charlen (e);

      break;

    case EXPR_COMPCALL:
      t = resolve_typebound_function (e);
      break;

    case EXPR_SUBSTRING:
      t = gfc_resolve_ref (e);
      break;

    case EXPR_CONSTANT:
    case EXPR_NULL:
      t = true;
      break;

    case EXPR_PPC:
      t = resolve_expr_ppc (e);
      break;

    case EXPR_ARRAY:
      t = false;
      if (!gfc_resolve_ref (e))
 break;

      t = gfc_resolve_array_constructor (e);

      if (t)
 {
   gfc_expression_rank (e);
   if (gfc_is_constant_expr (e) || gfc_is_expandable_expr (e))
     gfc_expand_constructor (e, false);
 }




      if (t && e->ts.type == BT_CHARACTER)
        {


   gfc_expand_constructor (e, false);
   t = gfc_resolve_character_array_constructor (e);
 }

      break;

    case EXPR_STRUCTURE:
      t = gfc_resolve_ref (e);
      if (!t)
 break;

      t = resolve_structure_cons (e, 0);
      if (!t)
 break;

      t = gfc_simplify_expr (e, 0);
      break;

    default:
      gfc_internal_error ("gfc_resolve_expr(): Bad expression type");
    }

  if (e->ts.type == BT_CHARACTER && t && !e->ts.u.cl)
    fixup_charlen (e);

  inquiry_argument = inquiry_save;
  actual_arg = actual_arg_save;
  first_actual_arg = first_actual_arg_save;



  if (t && e->expr_type == EXPR_VARIABLE
      && e->symtree->n.sym->attr.select_rank_temporary
      && (e->symtree->n.sym != 
# 7147 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null 
# 7147 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        && e->symtree->n.sym->ts.type == BT_CLASS && e->symtree->n.sym->ts.u.derived->components && e->symtree->n.sym->ts.u.derived->components->ts.u.derived && e->symtree->n.sym->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic))
    e->do_not_resolve_again = 1;

  return t;
}





static bool
gfc_resolve_iterator_expr (gfc_expr *expr, bool real_ok,
      const char *name_msgid)
{
  if (!gfc_resolve_expr (expr))
    return false;

  if (expr->rank != 0)
    {
      gfc_error ("%s at %L must be a scalar", gettext (name_msgid), &expr->where);
      return false;
    }

  if (expr->ts.type != BT_INTEGER)
    {
      if (expr->ts.type == BT_REAL)
 {
   if (real_ok)
     return gfc_notify_std ((1<<2),
       "%s at %L must be integer",
       gettext (name_msgid), &expr->where);
   else
     {
       gfc_error ("%s at %L must be INTEGER", gettext (name_msgid),
    &expr->where);
       return false;
     }
 }
      else
 {
   gfc_error ("%s at %L must be INTEGER", gettext (name_msgid), &expr->where);
   return false;
 }
    }
  return true;
}







bool
gfc_resolve_iterator (gfc_iterator *iter, bool real_ok, bool own_scope)
{
  if (!gfc_resolve_iterator_expr (iter->var, real_ok, "Loop variable"))
    return false;

  if (!gfc_check_vardef_context (iter->var, false, false, own_scope,
     gettext ("iterator variable")))
    return false;

  if (!gfc_resolve_iterator_expr (iter->start, real_ok,
      "Start expression in DO loop"))
    return false;

  if (!gfc_resolve_iterator_expr (iter->end, real_ok,
      "End expression in DO loop"))
    return false;

  if (!gfc_resolve_iterator_expr (iter->step, real_ok,
      "Step expression in DO loop"))
    return false;


  if (iter->start->ts.kind != iter->var->ts.kind
      || iter->start->ts.type != iter->var->ts.type)
    gfc_convert_type (iter->start, &iter->var->ts, 1);

  if (iter->end->ts.kind != iter->var->ts.kind
      || iter->end->ts.type != iter->var->ts.type)
    gfc_convert_type (iter->end, &iter->var->ts, 1);

  if (iter->step->ts.kind != iter->var->ts.kind
      || iter->step->ts.type != iter->var->ts.type)
    gfc_convert_type (iter->step, &iter->var->ts, 1);

  if (iter->step->expr_type == EXPR_CONSTANT)
    {
      if ((iter->step->ts.type == BT_INTEGER
    && 
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      (__builtin_constant_p (
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      0
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ) && (
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      0
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ) == 0 ? ((
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      iter->step->value.integer
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      )->_mp_size < 0 ? -1 : (
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      iter->step->value.integer
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      )->_mp_size > 0) : __gmpz_cmp_ui (
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      iter->step->value.integer
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ,
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      0
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      )) 
# 7238 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                == 0)
   || (iter->step->ts.type == BT_REAL
       && 
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ((
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->step->value.real
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )->_mpfr_exp < (2 - ((mpfr_exp_t) (((mpfr_uexp_t) -1) >> 1))) ? (((
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->step->value.real
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )->_mpfr_exp == (1 - ((mpfr_exp_t) (((mpfr_uexp_t) -1) >> 1)))) ? mpfr_set_erangeflag () : (mpfr_void) 0), 0 : ((
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->step->value.real
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )->_mpfr_sign)) 
# 7240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                           == 0))
 {
   gfc_error ("Step expression in DO loop at %L cannot be zero",
       &iter->step->where);
   return false;
 }
    }

  if (iter->start->expr_type == EXPR_CONSTANT
      && iter->end->expr_type == EXPR_CONSTANT
      && iter->step->expr_type == EXPR_CONSTANT)
    {
      int sgn, cmp;
      if (iter->start->ts.type == BT_INTEGER)
 {
   sgn = 
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        (__builtin_constant_p (
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) && (
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) == 0 ? ((
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->step->value.integer
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size < 0 ? -1 : (
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->step->value.integer
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size > 0) : __gmpz_cmp_ui (
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->step->value.integer
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ,
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ))
# 7255 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                 ;
   cmp = 
# 7256 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_cmp 
# 7256 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                (iter->end->value.integer, iter->start->value.integer);
 }
      else
 {
   sgn = 
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ((
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->step->value.real
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mpfr_exp < (2 - ((mpfr_exp_t) (((mpfr_uexp_t) -1) >> 1))) ? (((
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->step->value.real
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mpfr_exp == (1 - ((mpfr_exp_t) (((mpfr_uexp_t) -1) >> 1)))) ? mpfr_set_erangeflag () : (mpfr_void) 0), 0 : ((
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->step->value.real
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mpfr_sign))
# 7260 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                         ;
   cmp = 
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        mpfr_cmp3(
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->end->value.real
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        , 
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        iter->start->value.real
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        , 1)
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                 ;
 }
      if (global_options.x_warn_zerotrip && ((sgn > 0 && cmp < 0) || (sgn < 0 && cmp > 0)))
 gfc_warning (OPT_Wzerotrip,
       "DO loop at %L will be executed zero times",
       &iter->step->where);
    }

  if (iter->end->expr_type == EXPR_CONSTANT
      && iter->end->ts.type == BT_INTEGER
      && iter->step->expr_type == EXPR_CONSTANT
      && iter->step->ts.type == BT_INTEGER
      && (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         (__builtin_constant_p ((
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         -1L
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ) >= 0) && (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         -1L
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         -1L
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ))) && ((static_cast<unsigned long> (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         -1L
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ))) == 0 ? ((
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->step->value.integer
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )->_mp_size < 0 ? -1 : (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->step->value.integer
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )->_mp_size > 0) : __gmpz_cmp_ui (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->step->value.integer
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ,(static_cast<unsigned long> (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         -1L
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )))) : __gmpz_cmp_si (
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->step->value.integer
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ,
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         -1L
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )) 
# 7273 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                     == 0
   || 
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     iter->step->value.integer
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     iter->step->value.integer
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     iter->step->value.integer
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     iter->step->value.integer
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1L
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 7274 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                == 0))
    {
      bool is_step_positive = 
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             (__builtin_constant_p (
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             1
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             ) && (
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             1
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             ) == 0 ? ((
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             iter->step->value.integer
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             )->_mp_size < 0 ? -1 : (
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             iter->step->value.integer
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             )->_mp_size > 0) : __gmpz_cmp_ui (
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             iter->step->value.integer
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             ,
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             1
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             )) 
# 7276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                       == 0;
      int k = gfc_validate_kind (BT_INTEGER, iter->end->ts.kind, false);

      if (is_step_positive
   && 
# 7280 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_cmp 
# 7280 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (iter->end->value.integer, gfc_integer_kinds[k].huge) == 0)
 gfc_warning (OPT_Wundefined_do_loop,
       "DO loop at %L is undefined as it overflows",
       &iter->step->where);
      else if (!is_step_positive
        && 
# 7285 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __gmpz_cmp 
# 7285 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  (iter->end->value.integer,
      gfc_integer_kinds[k].min_int) == 0)
 gfc_warning (OPT_Wundefined_do_loop,
       "DO loop at %L is undefined as it underflows",
       &iter->step->where);
    }

  return true;
}





static bool
forall_index (gfc_expr *expr, gfc_symbol *sym, int *f)
{
  if (expr->expr_type != EXPR_VARIABLE)
    return false;


  if (!expr->ref || *f == 1)
    {
      if (expr->symtree->n.sym == sym)
 return true;
      else
 return false;
    }

  if (*f == 2)
    *f = 1;
  return false;
}





bool
find_forall_index (gfc_expr *expr, gfc_symbol *sym, int f)
{
  if (gfc_traverse_expr (expr, sym, forall_index, f))
    return true;
  else
    return false;
}
# 7340 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
resolve_forall_iterators (gfc_forall_iterator *it)
{
  gfc_forall_iterator *iter, *iter2;

  for (iter = it; iter; iter = iter->next)
    {
      if (gfc_resolve_expr (iter->var)
   && (iter->var->ts.type != BT_INTEGER || iter->var->rank != 0))
 gfc_error ("FORALL index-name at %L must be a scalar INTEGER",
     &iter->var->where);

      if (gfc_resolve_expr (iter->start)
   && (iter->start->ts.type != BT_INTEGER || iter->start->rank != 0))
 gfc_error ("FORALL start expression at %L must be a scalar INTEGER",
     &iter->start->where);
      if (iter->var->ts.kind != iter->start->ts.kind)
 gfc_convert_type (iter->start, &iter->var->ts, 1);

      if (gfc_resolve_expr (iter->end)
   && (iter->end->ts.type != BT_INTEGER || iter->end->rank != 0))
 gfc_error ("FORALL end expression at %L must be a scalar INTEGER",
     &iter->end->where);
      if (iter->var->ts.kind != iter->end->ts.kind)
 gfc_convert_type (iter->end, &iter->var->ts, 1);

      if (gfc_resolve_expr (iter->stride))
 {
   if (iter->stride->ts.type != BT_INTEGER || iter->stride->rank != 0)
     gfc_error ("FORALL stride expression at %L must be a scalar %s",
         &iter->stride->where, "INTEGER");

   if (iter->stride->expr_type == EXPR_CONSTANT
       && 
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         (__builtin_constant_p (
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         0
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ) && (
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         0
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ) == 0 ? ((
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->stride->value.integer
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )->_mp_size < 0 ? -1 : (
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->stride->value.integer
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )->_mp_size > 0) : __gmpz_cmp_ui (
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         iter->stride->value.integer
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         ,
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         0
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         )) 
# 7373 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                     == 0)
     gfc_error ("FORALL stride expression at %L cannot be zero",
         &iter->stride->where);
 }
      if (iter->var->ts.kind != iter->stride->ts.kind)
 gfc_convert_type (iter->stride, &iter->var->ts, 1);
    }

  for (iter = it; iter; iter = iter->next)
    for (iter2 = iter; iter2; iter2 = iter2->next)
      {
 if (find_forall_index (iter2->start, iter->var->symtree->n.sym, 0)
     || find_forall_index (iter2->end, iter->var->symtree->n.sym, 0)
     || find_forall_index (iter2->stride, iter->var->symtree->n.sym, 0))
   gfc_error ("FORALL index %qs may not appear in triplet "
       "specification at %L", iter->var->symtree->name,
       &iter2->start->where);
      }
}







static int
derived_inaccessible (gfc_symbol *sym)
{
  gfc_component *c;

  if (sym->attr.use_assoc && sym->attr.private_comp)
    return 1;

  for (c = sym->components; c; c = c->next)
    {

 if (c->ts.type == BT_DERIVED && c->attr.pointer
     && sym == c->ts.u.derived)
   continue;

 if (c->ts.type == BT_DERIVED && derived_inaccessible (c->ts.u.derived))
   return 1;
    }

  return 0;
}





static bool
resolve_deallocate_expr (gfc_expr *e)
{
  symbol_attribute attr;
  int allocatable, pointer;
  gfc_ref *ref;
  gfc_symbol *sym;
  gfc_component *c;
  bool unlimited;

  if (!gfc_resolve_expr (e))
    return false;

  if (e->expr_type != EXPR_VARIABLE)
    goto bad;

  sym = e->symtree->n.sym;
  unlimited = (sym != 
# 7442 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null 
# 7442 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             && sym->ts.type == BT_CLASS && sym->ts.u.derived->components && sym->ts.u.derived->components->ts.u.derived && sym->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic);

  if (sym->ts.type == BT_CLASS)
    {
      allocatable = sym->ts.u.derived->components->attr.allocatable;
      pointer = sym->ts.u.derived->components->attr.class_pointer;
    }
  else
    {
      allocatable = sym->attr.allocatable;
      pointer = sym->attr.pointer;
    }
  for (ref = e->ref; ref; ref = ref->next)
    {
      switch (ref->type)
 {
 case REF_ARRAY:
   if (ref->u.ar.type != AR_FULL
       && !(ref->u.ar.type == AR_ELEMENT && ref->u.ar.as->rank == 0
            && ref->u.ar.codimen && gfc_ref_this_image (ref)))
     allocatable = 0;
   break;

 case REF_COMPONENT:
   c = ref->u.c.component;
   if (c->ts.type == BT_CLASS)
     {
       allocatable = c->ts.u.derived->components->attr.allocatable;
       pointer = c->ts.u.derived->components->attr.class_pointer;
     }
   else
     {
       allocatable = c->attr.allocatable;
       pointer = c->attr.pointer;
     }
   break;

 case REF_SUBSTRING:
 case REF_INQUIRY:
   allocatable = 0;
   break;
 }
    }

  attr = gfc_expr_attr (e);

  if (allocatable == 0 && attr.pointer == 0 && !unlimited)
    {
    bad:
      gfc_error ("Allocate-object at %L must be ALLOCATABLE or a POINTER",
   &e->where);
      return false;
    }


  if (gfc_is_coindexed (e))
    {
      gfc_error ("Coindexed allocatable object at %L", &e->where);
      return false;
    }

  if (pointer
      && !gfc_check_vardef_context (e, true, true, false,
        gettext ("DEALLOCATE object")))
    return false;
  if (!gfc_check_vardef_context (e, false, true, false,
     gettext ("DEALLOCATE object")))
    return false;

  return true;
}



static bool
sym_in_expr (gfc_expr *e, gfc_symbol *sym, int *f __attribute__ ((__unused__)))
{
  if (e->expr_type == EXPR_VARIABLE && e->symtree->n.sym == sym)
    return true;

  return false;
}

bool
gfc_find_sym_in_expr (gfc_symbol *sym, gfc_expr *e)
{
  return gfc_traverse_expr (e, sym, sym_in_expr, 0);
}







gfc_expr *
gfc_expr_to_initialize (gfc_expr *e)
{
  gfc_expr *result;
  gfc_ref *ref;
  int i;

  result = gfc_copy_expr (e);


  for (ref = result->ref; ref; ref = ref->next)
    if (ref->type == REF_ARRAY && ref->next == 
# 7548 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                              __null
# 7548 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                  )
      {
 if (ref->u.ar.dimen == 0
     && ref->u.ar.as && ref->u.ar.as->corank)
   return result;

 ref->u.ar.type = AR_FULL;

 for (i = 0; i < ref->u.ar.dimen; i++)
   ref->u.ar.start[i] = ref->u.ar.end[i] = ref->u.ar.stride[i] = 
# 7557 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                __null
# 7557 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                    ;

 break;
      }

  gfc_free_shape (&result->shape, result->rank);


  gfc_resolve_expr (result);
  return result;
}
# 7576 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static gfc_expr*
remove_last_array_ref (gfc_expr* e)
{
  gfc_expr* e2;
  gfc_ref** r;

  e2 = gfc_copy_expr (e);
  for (r = &e2->ref; *r; r = &(*r)->next)
    if ((*r)->type == REF_ARRAY && !(*r)->next)
      {
 gfc_free_ref_list (*r);
 *r = 
# 7587 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __null
# 7587 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         ;
 break;
      }

  return e2;
}






static bool
conformable_arrays (gfc_expr *e1, gfc_expr *e2)
{
  gfc_ref *tail;
  for (tail = e2->ref; tail && tail->next; tail = tail->next);


  if ((tail && (!tail->u.ar.as || e1->rank != tail->u.ar.as->rank))
      || (!tail && e1->rank != e2->rank))
    {
      gfc_error ("Source-expr at %L must be scalar or have the "
   "same rank as the allocate-object at %L",
   &e1->where, &e2->where);
      return false;
    }

  if (e1->shape)
    {
      int i;
      mpz_t s;

      
# 7620 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_init 
# 7620 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (s);

      for (i = 0; i < e1->rank; i++)
 {
   if (tail->u.ar.start[i] == 
# 7624 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             __null
# 7624 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                 )
     break;

   if (tail->u.ar.end[i])
     {
       
# 7629 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_set 
# 7629 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (s, tail->u.ar.end[i]->value.integer);
       
# 7630 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_sub 
# 7630 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (s, s, tail->u.ar.start[i]->value.integer);
       
# 7631 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_add_ui 
# 7631 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 (s, s, 1);
     }
   else
     {
       
# 7635 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_set 
# 7635 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (s, tail->u.ar.start[i]->value.integer);
     }

   if (
# 7638 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_cmp 
# 7638 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (e1->shape[i], s) != 0)
     {
       gfc_error ("Source-expr at %L and allocate-object at %L must "
    "have the same shape", &e1->where, &e2->where);
       
# 7642 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_clear 
# 7642 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                (s);
          return false;
     }
 }

      
# 7647 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_clear 
# 7647 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               (s);
    }

  return true;
}






static bool
resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)
{
  int i, pointer, allocatable, dimension, is_abstract;
  int codimension;
  bool coindexed;
  bool unlimited;
  symbol_attribute attr;
  gfc_ref *ref, *ref2;
  gfc_expr *e2;
  gfc_array_ref *ar;
  gfc_symbol *sym = 
# 7669 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 7669 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;
  gfc_alloc *a;
  gfc_component *c;
  bool t;



  for (ref = e->ref; ref; ref = ref->next)
    if (ref->next == 
# 7677 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 7677 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        )
      break;

  if (ref && ref->type == REF_ARRAY)
    ref->u.ar.in_allocate = true;

  if (!gfc_resolve_expr (e))
    goto failure;




  ref2 = 
# 7689 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 7689 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;
  if (e->symtree)
    sym = e->symtree->n.sym;


  is_abstract = 0;


  unlimited = (e != 
# 7697 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null 
# 7697 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             && e->ts.type == BT_CLASS && e->ts.u.derived->components && e->ts.u.derived->components->ts.u.derived && e->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic);

  if (e->expr_type != EXPR_VARIABLE)
    {
      allocatable = 0;
      attr = gfc_expr_attr (e);
      pointer = attr.pointer;
      dimension = attr.dimension;
      codimension = attr.codimension;
    }
  else
    {
      if (sym->ts.type == BT_CLASS && sym->ts.u.derived->components)
 {
   allocatable = sym->ts.u.derived->components->attr.allocatable;
   pointer = sym->ts.u.derived->components->attr.class_pointer;
   dimension = sym->ts.u.derived->components->attr.dimension;
   codimension = sym->ts.u.derived->components->attr.codimension;
   is_abstract = sym->ts.u.derived->components->attr.abstract;
 }
      else
 {
   allocatable = sym->attr.allocatable;
   pointer = sym->attr.pointer;
   dimension = sym->attr.dimension;
   codimension = sym->attr.codimension;
 }

      coindexed = false;

      for (ref = e->ref; ref; ref2 = ref, ref = ref->next)
 {
   switch (ref->type)
     {
        case REF_ARRAY:
                if (ref->u.ar.codimen > 0)
    {
      int n;
      for (n = ref->u.ar.dimen;
    n < ref->u.ar.dimen + ref->u.ar.codimen; n++)
        if (ref->u.ar.dimen_type[n] != DIMEN_THIS_IMAGE)
   {
     coindexed = true;
     break;
   }
     }

  if (ref->next != 
# 7744 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 7744 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      )
    pointer = 0;
  break;

       case REF_COMPONENT:

  if (coindexed)
    {
      gfc_error ("Coindexed allocatable object at %L",
          &e->where);
      goto failure;
    }

  c = ref->u.c.component;
  if (c->ts.type == BT_CLASS)
    {
      allocatable = c->ts.u.derived->components->attr.allocatable;
      pointer = c->ts.u.derived->components->attr.class_pointer;
      dimension = c->ts.u.derived->components->attr.dimension;
      codimension = c->ts.u.derived->components->attr.codimension;
      is_abstract = c->ts.u.derived->components->attr.abstract;
    }
  else
    {
      allocatable = c->attr.allocatable;
      pointer = c->attr.pointer;
      dimension = c->attr.dimension;
      codimension = c->attr.codimension;
      is_abstract = c->attr.abstract;
    }
  break;

       case REF_SUBSTRING:
       case REF_INQUIRY:
  allocatable = 0;
  pointer = 0;
  break;
     }
 }
    }


  if (allocatable == 0 && pointer == 0 && !unlimited)
    {
      gfc_error ("Allocate-object at %L must be ALLOCATABLE or a POINTER",
   &e->where);
      goto failure;
    }


  if (code->expr3)
    {

      if (!gfc_type_compatible (&e->ts, &code->expr3->ts))
 {
   gfc_error ("Type of entity at %L is type incompatible with "
       "source-expr at %L", &e->where, &code->expr3->where);
   goto failure;
 }


      if (code->expr3->rank > 0 && !conformable_arrays (code->expr3, e))
 goto failure;


      if (code->expr3->ts.kind != e->ts.kind && !unlimited)
 {
   gfc_error ("The allocate-object at %L and the source-expr at %L "
       "shall have the same kind type parameter",
       &e->where, &code->expr3->where);
   goto failure;
 }


      if (code->expr3->ts.type == BT_DERIVED
   && ((codimension && gfc_expr_attr (code->expr3).lock_comp)
       || (code->expr3->ts.u.derived->from_intmod
       == INTMOD_ISO_FORTRAN_ENV
    && code->expr3->ts.u.derived->intmod_sym_id
       == ISOFORTRAN_LOCK_TYPE)))
 {
   gfc_error ("The source-expr at %L shall neither be of type "
       "LOCK_TYPE nor have a LOCK_TYPE component if "
        "allocate-object at %L is a coarray",
        &code->expr3->where, &e->where);
   goto failure;
 }


      if (code->expr3->ts.type == BT_DERIVED
   && ((codimension && gfc_expr_attr (code->expr3).event_comp)
       || (code->expr3->ts.u.derived->from_intmod
       == INTMOD_ISO_FORTRAN_ENV
    && code->expr3->ts.u.derived->intmod_sym_id
       == ISOFORTRAN_EVENT_TYPE)))
 {
   gfc_error ("The source-expr at %L shall neither be of type "
       "EVENT_TYPE nor have a EVENT_TYPE component if "
        "allocate-object at %L is a coarray",
        &code->expr3->where, &e->where);
   goto failure;
 }
    }


  if (is_abstract && code->ext.alloc.ts.type == BT_UNKNOWN
      && !code->expr3)
    {
      ((void)(!(e->ts.type == BT_CLASS) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 7852, __FUNCTION__), 0 : 0));
      gfc_error ("Allocating %s of ABSTRACT base type at %L requires a "
   "type-spec or source-expr", sym->name, &e->where);
      goto failure;
    }


  if (code->ext.alloc.ts.type == BT_CHARACTER && !e->ts.deferred
      && !(e != 
# 7860 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null 
# 7860 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         && e->ts.type == BT_CLASS && e->ts.u.derived->components && e->ts.u.derived->components->ts.u.derived && e->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic))
    {
      int cmp;

      if (!e->ts.u.cl->length)
 goto failure;

      cmp = gfc_dep_compare_expr (e->ts.u.cl->length,
      code->ext.alloc.ts.u.cl->length);
      if (cmp == 1 || cmp == -1 || cmp == -3)
 {
   gfc_error ("Allocating %s at %L with type-spec requires the same "
       "character-length parameter as in the declaration",
       sym->name, &e->where);
   goto failure;
 }
    }




  e2 = remove_last_array_ref (e);
  t = true;
  if (t && pointer)
    t = gfc_check_vardef_context (e2, true, true, false,
      gettext ("ALLOCATE object"));
  if (t)
    t = gfc_check_vardef_context (e2, false, true, false,
      gettext ("ALLOCATE object"));
  gfc_free_expr (e2);
  if (!t)
    goto failure;

  if (e->ts.type == BT_CLASS && e->ts.u.derived->components->attr.dimension
 && !code->expr3 && code->ext.alloc.ts.type == BT_DERIVED)
    {




      code->expr3 = gfc_default_initializer (&code->ext.alloc.ts);
    }
  else if (global_options.x_flag_coarray != GFC_FCOARRAY_LIB && e->ts.type == BT_DERIVED
    && e->ts.u.derived->from_intmod == INTMOD_ISO_FORTRAN_ENV
    && e->ts.u.derived->intmod_sym_id == ISOFORTRAN_EVENT_TYPE)
    {

      code->expr3 = gfc_get_int_expr (gfc_default_integer_kind, &e->where, 0);
    }

  if (e->ts.type == BT_CLASS && !unlimited && !(code->expr3 != 
# 7910 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                              __null 
# 7910 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                              && code->expr3->ts.type == BT_CLASS && code->expr3->ts.u.derived->components && code->expr3->ts.u.derived->components->ts.u.derived && code->expr3->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic))
    {


      gfc_typespec ts = e->ts;
      if (code->expr3)
 ts = code->expr3->ts;
      else if (code->ext.alloc.ts.type == BT_DERIVED)
 ts = code->ext.alloc.ts;



      gfc_find_derived_vtab (ts.u.derived);
    }
  else if (unlimited && !(code->expr3 != 
# 7924 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null 
# 7924 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        && code->expr3->ts.type == BT_CLASS && code->expr3->ts.u.derived->components && code->expr3->ts.u.derived->components->ts.u.derived && code->expr3->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic))
    {


      gfc_typespec *ts = 
# 7928 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 7928 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            ;
      if (code->expr3)
 ts = &code->expr3->ts;
      else
 ts = &code->ext.alloc.ts;

      ((void)(!(ts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 7934, __FUNCTION__), 0 : 0));



      gfc_find_vtab (ts);
    }

  if (dimension == 0 && codimension == 0)
    goto success;



  if (!ref2 || ref2->type != REF_ARRAY || ref2->u.ar.type == AR_FULL
      || (dimension && ref2->u.ar.dimen == 0))
    {

      if (code->expr3)
 {
   if (!gfc_notify_std ((1<<7), "Array specification required "
          "in ALLOCATE statement at %L", &e->where))
     goto failure;
   if (code->expr3->rank != 0)
     *array_alloc_wo_spec = true;
   else
     {
       gfc_error ("Array specification or array-valued SOURCE= "
    "expression required in ALLOCATE statement at %L",
    &e->where);
       goto failure;
     }
 }
      else
 {
   gfc_error ("Array specification required in ALLOCATE statement "
       "at %L", &e->where);
   goto failure;
 }
    }




  ar = &ref2->u.ar;

  if (codimension)
    for (i = ar->dimen; i < ar->dimen + ar->codimen; i++)
      {
 switch (ar->dimen_type[i])
   {
   case DIMEN_THIS_IMAGE:
     gfc_error ("Coarray specification required in ALLOCATE statement "
         "at %L", &e->where);
     goto failure;

   case DIMEN_RANGE:
     if (ar->start[i] == 0 || ar->end[i] == 0)
       {

  if (ar->stride[i] == 
# 7992 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 7992 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          )
    gfc_error ("Bad array specification in ALLOCATE statement "
        "at %L", &e->where);
  goto failure;
       }
     else if (gfc_dep_compare_expr (ar->start[i], ar->end[i]) == 1)
       {
  gfc_error ("Upper cobound is less than lower cobound at %L",
      &ar->start[i]->where);
  goto failure;
       }
     break;

   case DIMEN_ELEMENT:
     if (ar->start[i]->expr_type == EXPR_CONSTANT)
       {
  ((void)(!(ar->start[i]->ts.type == BT_INTEGER) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8008, __FUNCTION__), 0 : 0));
  if (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->start[i]->value.integer
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->start[i]->value.integer
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->start[i]->value.integer
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ar->start[i]->value.integer
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 8009 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                 < 0)
    {
      gfc_error ("Upper cobound is less than lower cobound "
          "of 1 at %L", &ar->start[i]->where);
      goto failure;
    }
       }
     break;

   case DIMEN_STAR:
     break;

   default:
     gfc_error ("Bad array specification in ALLOCATE statement at %L",
         &e->where);
     goto failure;

   }
      }
  for (i = 0; i < ar->dimen; i++)
    {
      if (ar->type == AR_ELEMENT || ar->type == AR_FULL)
 goto check_symbols;

      switch (ar->dimen_type[i])
 {
 case DIMEN_ELEMENT:
   break;

 case DIMEN_RANGE:
   if (ar->start[i] != 
# 8039 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
       
# 8040 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && ar->end[i] != 
# 8040 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
       
# 8041 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && ar->stride[i] == 
# 8041 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 8041 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              )
     break;



 case DIMEN_UNKNOWN:
 case DIMEN_VECTOR:
 case DIMEN_STAR:
 case DIMEN_THIS_IMAGE:
   gfc_error ("Bad array specification in ALLOCATE statement at %L",
       &e->where);
   goto failure;
 }

check_symbols:
      for (a = code->ext.alloc.list; a; a = a->next)
 {
   sym = a->expr->symtree->n.sym;


   if (((sym->ts.type) == BT_DERIVED || (sym->ts.type) == BT_UNION) || sym->ts.type == BT_CLASS)
     continue;

   if ((ar->start[i] != 
# 8064 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
        
# 8065 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       && gfc_find_sym_in_expr (sym, ar->start[i]))
       || (ar->end[i] != 
# 8066 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
    
# 8067 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   && gfc_find_sym_in_expr (sym, ar->end[i])))
     {
       gfc_error ("%qs must not appear in the array specification at "
    "%L in the same ALLOCATE statement where it is "
    "itself allocated", sym->name, &ar->where);
       goto failure;
     }
 }
    }

  for (i = ar->dimen; i < ar->codimen + ar->dimen; i++)
    {
      if (ar->dimen_type[i] == DIMEN_ELEMENT
   || ar->dimen_type[i] == DIMEN_RANGE)
 {
   if (i == (ar->dimen + ar->codimen - 1))
     {
       gfc_error ("Expected '*' in coindex specification in ALLOCATE "
    "statement at %L", &e->where);
       goto failure;
     }
   continue;
 }

      if (ar->dimen_type[i] == DIMEN_STAR && i == (ar->dimen + ar->codimen - 1)
   && ar->stride[i] == 
# 8092 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 8092 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          )
 break;

      gfc_error ("Bad coarray specification in ALLOCATE statement at %L",
   &e->where);
      goto failure;
    }

success:
  return true;

failure:
  return false;
}


static void
resolve_allocate_deallocate (gfc_code *code, const char *fcn)
{
  gfc_expr *stat, *errmsg, *pe, *qe;
  gfc_alloc *a, *p, *q;

  stat = code->expr1;
  errmsg = code->expr2;


  if (stat)
    {
      gfc_check_vardef_context (stat, false, false, false,
    gettext ("STAT variable"));

      if ((stat->ts.type != BT_INTEGER
    && !(stat->ref && (stat->ref->type == REF_ARRAY
         || stat->ref->type == REF_COMPONENT)))
   || stat->rank > 0)
 gfc_error ("Stat-variable at %L must be a scalar INTEGER "
     "variable", &stat->where);

      for (p = code->ext.alloc.list; p; p = p->next)
 if (p->expr->symtree->n.sym->name == stat->symtree->n.sym->name)
   {
     gfc_ref *ref1, *ref2;
     bool found = true;

     for (ref1 = p->expr->ref, ref2 = stat->ref; ref1 && ref2;
   ref1 = ref1->next, ref2 = ref2->next)
       {
  if (ref1->type != REF_COMPONENT || ref2->type != REF_COMPONENT)
    continue;
  if (ref1->u.c.component->name != ref2->u.c.component->name)
    {
      found = false;
      break;
    }
       }

     if (found)
       {
  gfc_error ("Stat-variable at %L shall not be %sd within "
      "the same %s statement", &stat->where, fcn, fcn);
  break;
       }
   }
    }


  if (errmsg)
    {
      if (!stat)
 gfc_warning (0, "ERRMSG at %L is useless without a STAT tag",
       &errmsg->where);

      gfc_check_vardef_context (errmsg, false, false, false,
    gettext ("ERRMSG variable"));





      if ((errmsg->ts.type != BT_CHARACTER
    && !(errmsg->ref
  && (errmsg->ref->type == REF_ARRAY
      || errmsg->ref->type == REF_COMPONENT)))
   || errmsg->rank > 0
   || errmsg->ts.kind != gfc_default_character_kind)
 gfc_error ("ERRMSG variable at %L shall be a scalar default CHARACTER "
     "variable", &errmsg->where);

      for (p = code->ext.alloc.list; p; p = p->next)
 if (p->expr->symtree->n.sym->name == errmsg->symtree->n.sym->name)
   {
     gfc_ref *ref1, *ref2;
     bool found = true;

     for (ref1 = p->expr->ref, ref2 = errmsg->ref; ref1 && ref2;
   ref1 = ref1->next, ref2 = ref2->next)
       {
  if (ref1->type != REF_COMPONENT || ref2->type != REF_COMPONENT)
    continue;
  if (ref1->u.c.component->name != ref2->u.c.component->name)
    {
      found = false;
      break;
    }
       }

     if (found)
       {
  gfc_error ("Errmsg-variable at %L shall not be %sd within "
      "the same %s statement", &errmsg->where, fcn, fcn);
  break;
       }
   }
    }



  for (p = code->ext.alloc.list; p; p = p->next)
    {
      pe = p->expr;
      for (q = p->next; q; q = q->next)
 {
   qe = q->expr;
   if (pe->symtree->n.sym->name == qe->symtree->n.sym->name)
     {

       gfc_ref *pr = pe->ref;
       gfc_ref *qr = qe->ref;






       while (1)
  {
    if (pr == 
# 8228 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null 
# 8228 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  && qr == 
# 8228 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 8228 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               )
      {
        gfc_error ("Allocate-object at %L also appears at %L",
     &pe->where, &qe->where);
        break;
      }
    else if (pr != 
# 8234 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null 
# 8234 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       && qr == 
# 8234 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
# 8234 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    )
      {
        gfc_error ("Allocate-object at %L is subobject of"
     " object at %L", &pe->where, &qe->where);
        break;
      }
    else if (pr == 
# 8240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null 
# 8240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       && qr != 
# 8240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
# 8240 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    )
      {
        gfc_error ("Allocate-object at %L is subobject of"
     " object at %L", &qe->where, &pe->where);
        break;
      }

    ((void)(!(pr->type == qr->type) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8247, __FUNCTION__), 0 : 0));
    if (pr->type == REF_ARRAY)
      {


        ((void)(!(qr->type == REF_ARRAY) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8252, __FUNCTION__), 0 : 0));

        if (pr->next && qr->next)
   {
     int i;
     gfc_array_ref *par = &(pr->u.ar);
     gfc_array_ref *qar = &(qr->u.ar);

     for (i=0; i<par->dimen; i++)
       {
         if ((par->start[i] != 
# 8262 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
       
# 8263 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      || qar->start[i] != 
# 8263 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 8263 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              )
      && gfc_dep_compare_expr (par->start[i],
          qar->start[i]) != 0)
    goto break_label;
       }
   }
      }
    else
      {
        if (pr->u.c.component->name != qr->u.c.component->name)
   break;
      }

    pr = pr->next;
    qr = qr->next;
  }
     break_label:
       ;
     }
 }
    }

  if (strcmp (fcn, "ALLOCATE") == 0)
    {
      bool arr_alloc_wo_spec = false;




      if (code->expr3 && code->expr3->mold
   && code->expr3->ts.type == BT_DERIVED)
 {

   gfc_expr *rhs = gfc_default_initializer (&code->expr3->ts);
   if (rhs != 
# 8297 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 8297 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 )
     {
       gfc_resolve_expr (rhs);
       gfc_free_expr (code->expr3);
       code->expr3 = rhs;
     }
 }
      for (a = code->ext.alloc.list; a; a = a->next)
 resolve_allocate_expr (a->expr, code, &arr_alloc_wo_spec);

      if (arr_alloc_wo_spec && code->expr3)
 {


   code->ext.alloc.arr_spec_from_expr3 = 1;
 }
    }
  else
    {
      for (a = code->ext.alloc.list; a; a = a->next)
 resolve_deallocate_expr (a->expr);
    }
}
# 8330 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static int
compare_cases (const gfc_case *op1, const gfc_case *op2)
{
  int retval;

  if (op1->low == 
# 8335 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 8335 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
    {

      retval = 0;

      if (op2->low != 
# 8340 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
   
# 8341 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && gfc_compare_expr (op1->high, op2->low, INTRINSIC_LT) < 0)
 retval = -1;
    }
  else if (op1->high == 
# 8344 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 8344 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           )
    {

      retval = 0;

      if (op2->high != 
# 8349 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
   
# 8350 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && gfc_compare_expr (op1->low, op2->high, INTRINSIC_GT) > 0)
 retval = 1;
    }
  else
    {
      if (op2->low == 
# 8355 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 8355 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
 retval = (gfc_compare_expr (op1->low, op2->high, INTRINSIC_GT) > 0)
   ? 1 : 0;
      else if (op2->high == 
# 8358 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 8358 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               )
 retval = (gfc_compare_expr (op1->high, op2->low, INTRINSIC_LT) < 0)
   ? -1 : 0;
      else
 {
   retval = 0;

   if (gfc_compare_expr (op1->high, op2->low, INTRINSIC_LT) < 0)
     retval = -1;

   else if (gfc_compare_expr (op1->low, op2->high, INTRINSIC_GT) > 0)
     retval = 1;
 }
    }

  return retval;
}







static gfc_case *
check_case_overlap (gfc_case *list)
{
  gfc_case *p, *q, *e, *tail;
  int insize, nmerges, psize, qsize, cmp, overlap_seen;


  if (!list)
    return 
# 8390 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 8390 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              ;

  overlap_seen = 0;
  insize = 1;



  for (;;)
    {
      p = list;
      list = 
# 8400 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 8400 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                ;
      tail = 
# 8401 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 8401 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                ;


      nmerges = 0;


      while (p)
 {
   int i;


   nmerges++;



   psize = 0;
   q = p;
   for (i = 0; i < insize; i++)
     {
       psize++;
       q = q->right;
       if (!q)
  break;
     }
   qsize = insize;


   while (psize > 0 || (qsize > 0 && q != 
# 8428 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 8428 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             ))
     {

       if (psize == 0)
  {

    e = q;
    q = q->right;
    qsize--;
  }
       else if (qsize == 0 || q == 
# 8438 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 8438 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      )
  {

    e = p;
    p = p->right;
    psize--;
  }
       else
  {
    cmp = compare_cases (p, q);
    if (cmp < 0)
      {


        e = p;
        p = p->right;
        psize--;
      }
    else if (cmp > 0)
      {


        e = q;
        q = q->right;
        qsize--;
      }
    else
      {




        gfc_error ("CASE label at %L overlaps with CASE "
     "label at %L", &p->where, &q->where);
        overlap_seen = 1;
        e = p;
        p = p->right;
        psize--;
      }
  }


       if (tail)
  tail->right = e;
       else
  list = e;
       e->left = tail;
       tail = e;
     }



   p = q;
 }
      tail->right = 
# 8492 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 8492 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;



      if (nmerges <= 1)
 {
   if (!overlap_seen)
     return list;
   else
     return 
# 8501 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 8501 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               ;
 }


      insize *= 2;
    }
}






static bool
validate_case_label_expr (gfc_expr *e, gfc_expr *case_expr)
{
  if (e == 
# 8517 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 8517 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              ) return true;

  if (e->ts.type != case_expr->ts.type)
    {
      gfc_error ("Expression in CASE statement at %L must be of type %s",
   &e->where, gfc_basic_typename (case_expr->ts.type));
      return false;
    }





  if (case_expr->ts.type == BT_CHARACTER && e->ts.kind != case_expr->ts.kind)
    {
      gfc_error ("Expression in CASE statement at %L must be of kind %d",
   &e->where, case_expr->ts.kind);
      return false;
    }




  if (e->ts.kind != case_expr->ts.kind)
    gfc_convert_type_warn (e, &case_expr->ts, 2, 0);

  if (e->rank != 0)
    {
      gfc_error ("Expression in CASE statement at %L must be scalar",
   &e->where);
      return false;
    }

  return true;
}
# 8574 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
resolve_select (gfc_code *code, bool select_type)
{
  gfc_code *body;
  gfc_expr *case_expr;
  gfc_case *cp, *default_case, *tail, *head;
  int seen_unreachable;
  int seen_logical;
  int ncases;
  bt type;
  bool t;

  if (code->expr1 == 
# 8586 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 8586 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        )
    {

      case_expr = code->expr2;
      if (case_expr->ts.type != BT_INTEGER|| case_expr->rank != 0)
 gfc_error ("Selection expression in computed GOTO statement "
     "at %L must be a scalar integer expression",
     &case_expr->where);





      code->expr1 = code->expr2;
      code->expr2 = 
# 8600 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 8600 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;
      return;
    }

  case_expr = code->expr1;
  type = case_expr->ts.type;


  if (type != BT_LOGICAL && type != BT_INTEGER && type != BT_CHARACTER)
    {
      gfc_error ("Argument of SELECT statement at %L cannot be %s",
   &case_expr->where, gfc_typename (case_expr));


      return;
    }


  if (!select_type && case_expr->rank != 0)
    {
      gfc_error ("Argument of SELECT statement at %L must be a scalar "
   "expression", &case_expr->where);


      return;
    }





  if (type == BT_INTEGER)
    for (body = code->block; body; body = body->block)
      for (cp = body->ext.block.case_list; cp; cp = cp->next)
 {
   if (cp->low
       && gfc_check_integer_range (cp->low->value.integer,
       case_expr->ts.kind) != ARITH_OK)
     gfc_warning (0, "Expression in CASE statement at %L is "
    "not in the range of %s", &cp->low->where,
    gfc_typename (case_expr));

   if (cp->high
       && cp->low != cp->high
       && gfc_check_integer_range (cp->high->value.integer,
       case_expr->ts.kind) != ARITH_OK)
     gfc_warning (0, "Expression in CASE statement at %L is "
    "not in the range of %s", &cp->high->where,
    gfc_typename (case_expr));
 }






  if (type == BT_LOGICAL || type == BT_INTEGER)
    {
      for (body = code->block; body; body = body->block)
 {

   for (cp = body->ext.block.case_list; cp; cp = cp->next)
     {

       if (cp->low == 
# 8664 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null 
# 8664 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          && cp->high == 
# 8664 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 8664 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             )
  continue;


       if (cp->low != 
# 8668 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null 
# 8668 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          && cp->high != 
# 8668 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
    
# 8669 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   && cp->low != cp->high
    && gfc_compare_expr (cp->low, cp->high, INTRINSIC_GT) > 0)
  continue;

       if (cp->low != 
# 8673 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
    
# 8674 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   && case_expr->ts.kind != gfc_kind_max(case_expr, cp->low))
  gfc_convert_type_warn (case_expr, &cp->low->ts, 2, 0);

       if (cp->high != 
# 8677 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
    
# 8678 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   && case_expr->ts.kind != gfc_kind_max(case_expr, cp->high))
  gfc_convert_type_warn (case_expr, &cp->high->ts, 2, 0);
     }
  }
    }


  default_case = 
# 8685 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 8685 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
  head = tail = 
# 8686 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 8686 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
  ncases = 0;
  seen_logical = 0;

  for (body = code->block; body; body = body->block)
    {

      t = true;
      seen_unreachable = 0;



      for (cp = body->ext.block.case_list; cp; cp = cp->next)
 {

   ncases++;


   if (cp->low == 
# 8704 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null 
# 8704 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      && cp->high == 
# 8704 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                     __null
# 8704 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                         )
     {
       if (default_case != 
# 8706 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 8706 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              )
  {
    gfc_error ("The DEFAULT CASE at %L cannot be followed "
        "by a second DEFAULT CASE at %L",
        &default_case->where, &cp->where);
    t = false;
    break;
  }
       else
  {
    default_case = cp;
    continue;
  }
     }



   if (!validate_case_label_expr (cp->low, case_expr)
       || !validate_case_label_expr (cp->high, case_expr))
     {
       t = false;
       break;
     }

   if (type == BT_LOGICAL
       && ((cp->low == 
# 8731 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null 
# 8731 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           || cp->high == 
# 8731 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                          __null
# 8731 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                              )
    || cp->low != cp->high))
     {
       gfc_error ("Logical range in CASE statement at %L is not "
    "allowed", &cp->low->where);
       t = false;
       break;
     }

   if (type == BT_LOGICAL && cp->low->expr_type == EXPR_CONSTANT)
     {
       int value;
       value = cp->low->value.logical == 0 ? 2 : 1;
       if (value & seen_logical)
  {
    gfc_error ("Constant logical value in CASE statement "
        "is repeated at %L",
        &cp->low->where);
    t = false;
    break;
  }
       seen_logical |= value;
     }

   if (cp->low != 
# 8755 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null 
# 8755 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      && cp->high != 
# 8755 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                     __null
       
# 8756 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && cp->low != cp->high
       && gfc_compare_expr (cp->low, cp->high, INTRINSIC_GT) > 0)
     {
       if (global_options.x_warn_surprising)
  gfc_warning (OPT_Wsurprising,
        "Range specification at %L can never be matched",
        &cp->where);

       cp->unreachable = 1;
       seen_unreachable = 1;
     }
   else
     {




       if (!head)
  {
    head = tail = cp;
    head->right = head->left = 
# 8776 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 8776 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  ;
  }
       else
  {
    tail->right = cp;
    tail->right->left = tail;
    tail = tail->right;
    tail->right = 
# 8783 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 8783 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     ;
  }
     }
 }



      if (!t)
 continue;





      if (seen_unreachable)
      {

 while (body->ext.block.case_list != 
# 8800 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                    __null
        
# 8801 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       && body->ext.block.case_list->unreachable)
   {
     gfc_case *n = body->ext.block.case_list;
     body->ext.block.case_list = body->ext.block.case_list->next;
     n->next = 
# 8805 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 8805 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  ;
     gfc_free_case_list (n);
   }


 if (body->ext.block.case_list)
   {
     for (cp = body->ext.block.case_list; cp && cp->next; cp = cp->next)
       {
  if (cp->next->unreachable)
    {
      gfc_case *n = cp->next;
      cp->next = cp->next->next;
      n->next = 
# 8818 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 8818 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
      gfc_free_case_list (n);
    }
       }
   }
      }
    }






  if (head)
    {
      head = check_case_overlap (head);


      if (head != 
# 8836 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null 
# 8836 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      && default_case)
 {
   default_case->left = 
# 8838 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 8838 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           ;
   default_case->right = head;
   head->left = default_case;
 }
    }



  for (body = code; body && body->block; body = body->block)
    {
      if (body->block->ext.block.case_list == 
# 8848 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                             __null
# 8848 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                 )
 {

   gfc_code *c = body->block;
   body->block = c->block;


   c->block = 
# 8855 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 8855 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 ;
   gfc_free_statements (c);
 }
    }



  if (global_options.x_warn_surprising && type == BT_LOGICAL && ncases > 2)
    gfc_warning (OPT_Wsurprising,
   "Logical SELECT CASE block at %L has more that two cases",
   &code->loc);
}




bool
gfc_type_is_extensible (gfc_symbol *sym)
{
  return !(sym->attr.is_bind_c || sym->attr.sequence
    || (sym->attr.is_class
        && sym->components->ts.u.derived->attr.unlimited_polymorphic));
}


static void
resolve_types (gfc_namespace *ns);




static void
resolve_assoc_var (gfc_symbol* sym, bool resolve_target)
{
  gfc_expr* target;

  ((void)(!(sym->assoc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8891, __FUNCTION__), 0 : 0));
  ((void)(!(sym->attr.flavor == FL_VARIABLE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8892, __FUNCTION__), 0 : 0));




  target = sym->assoc->target;
  if (!target)
    return;
  ((void)(!(!sym->assoc->dangling) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8900, __FUNCTION__), 0 : 0));

  if (resolve_target && !gfc_resolve_expr (target))
    return;


  if (target->expr_type == EXPR_VARIABLE)
    {
      gfc_symbol *tsym, *dsym;

      ((void)(!(target->symtree) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8910, __FUNCTION__), 0 : 0));
      tsym = target->symtree->n.sym;

      if (gfc_expr_attr (target).proc_pointer)
 {
   gfc_error ("Associating entity %qs at %L is a procedure pointer",
       tsym->name, &target->where);
   return;
 }

      if (tsym->attr.flavor == FL_PROCEDURE && tsym->generic
   && (dsym = gfc_find_dt_in_generic (tsym)) != 
# 8921 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                               __null
   
# 8922 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && dsym->attr.flavor == FL_DERIVED)
 {
   gfc_error ("Derived type %qs cannot be used as a variable at %L",
       tsym->name, &target->where);
   return;
 }

      if (tsym->attr.flavor == FL_PROCEDURE)
 {
   bool is_error = true;
   if (tsym->attr.function && tsym->result == tsym)
     for (gfc_namespace *ns = sym->ns; ns; ns = ns->parent)
       if (tsym == ns->proc_name)
  {
    is_error = false;
    break;
  }
   if (is_error)
     {
       gfc_error ("Associating entity %qs at %L is a procedure name",
    tsym->name, &target->where);
       return;
     }
 }

      sym->attr.asynchronous = tsym->attr.asynchronous;
      sym->attr.volatile_ = tsym->attr.volatile_;

      sym->attr.target = tsym->attr.target
    || gfc_expr_attr (target).pointer;
      if (is_subref_array (target))
 sym->attr.subref_array_pointer = 1;
    }
  else if (target->ts.type == BT_PROCEDURE)
    {
      gfc_error ("Associating selector-expression at %L yields a procedure",
   &target->where);
      return;
    }

  if (target->expr_type == EXPR_NULL)
    {
      gfc_error ("Selector at %L cannot be NULL()", &target->where);
      return;
    }
  else if (target->ts.type == BT_UNKNOWN)
    {
      gfc_error ("Selector at %L has no type", &target->where);
      return;
    }




  if (sym->ts.type == BT_UNKNOWN)
    sym->ts = target->ts;

  ((void)(!(sym->ts.type != BT_UNKNOWN) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 8979, __FUNCTION__), 0 : 0));


  sym->assoc->variable = (target->expr_type == EXPR_VARIABLE
     && !gfc_has_vector_subscript (target));


  if (sym->attr.dimension && target->rank == 0)
    {


      if (sym->ts.type != BT_CHARACTER)
 gfc_error ("Associate-name %qs at %L is used as array",
     sym->name, &sym->declared_at);
      sym->attr.dimension = 0;
      return;
    }



  if (target->ts.type == BT_CLASS
 && gfc_ref_needs_temporary_p (target->ref))
    {
      gfc_error ("CLASS selector at %L needs a temporary which is not "
   "yet implemented", &target->where);
      return;
    }

  if (target->ts.type == BT_CLASS)
    gfc_fix_class_refs (target);

  if (target->rank != 0 && !sym->attr.select_rank_temporary)
    {
      gfc_array_spec *as;


      if (sym->ts.type != BT_CLASS && (!sym->as || sym->assoc->rankguessed))
 {
   if (!sym->as)
     sym->as = ((gfc_array_spec *) xcalloc (1, sizeof (gfc_array_spec)));
   as = sym->as;
   as->rank = target->rank;
   as->type = AS_DEFERRED;
   as->corank = gfc_get_corank (target);
   sym->attr.dimension = 1;
   if (as->corank != 0)
     sym->attr.codimension = 1;
 }
      else if (sym->ts.type == BT_CLASS
        && sym->ts.u.derived->components
        && (!sym->ts.u.derived->components->as || sym->assoc->rankguessed))
 {
   if (!sym->ts.u.derived->components->as)
     sym->ts.u.derived->components->as = ((gfc_array_spec *) xcalloc (1, sizeof (gfc_array_spec)));
   as = sym->ts.u.derived->components->as;
   as->rank = target->rank;
   as->type = AS_DEFERRED;
   as->corank = gfc_get_corank (target);
   sym->ts.u.derived->components->attr.dimension = 1;
   if (as->corank != 0)
     sym->ts.u.derived->components->attr.codimension = 1;
 }
    }
  else if (!sym->attr.select_rank_temporary)
    {


      if (sym->ts.type == BT_CLASS && sym->ts.u.derived
   && sym->ts.u.derived->components && sym->ts.u.derived->components->as)
 {
   gfc_array_spec *as;
   symbol_attribute attr;


   gfc_typespec *ts = &target->ts;
   gfc_ref *ref;
   gfc_component *c;
   for (ref = target->ref; ref != 
# 9056 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                 __null
# 9056 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                     ; ref = ref->next)
     {
       switch (ref->type)
  {
  case REF_COMPONENT:
    ts = &ref->u.c.component->ts;
    break;
  case REF_ARRAY:
    if (ts->type == BT_CLASS)
      ts = &ts->u.derived->components->ts;
    break;
  default:
    break;
  }
     }





   as = 
# 9076 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       __null
# 9076 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           ;
   sym->ts = *ts;
   sym->ts.type = BT_CLASS;
   attr = sym->ts.u.derived->components ? sym->ts.u.derived->components->attr : sym->attr;
   attr.class_ok = 0;
   attr.associate_var = 1;
   attr.dimension = attr.codimension = 0;
   attr.class_pointer = 1;
   if (!gfc_build_class_symbol (&sym->ts, &attr, &as))
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 9085, __FUNCTION__));

   c = gfc_find_component (sym->ts.u.derived, "_vptr", true, true, 
# 9087 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                  __null
# 9087 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                      );
   if (c->ts.u.derived == 
# 9088 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 9088 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             )
     c->ts.u.derived = gfc_find_derived_vtab (sym->ts.u.derived);
   sym->ts.u.derived->components->attr.pointer = 1;
   sym->ts.u.derived->components->attr.class_pointer = 1;
   gfc_set_sym_referenced (sym->ts.u.derived);
   gfc_commit_symbol (sym->ts.u.derived);

   if (c->ts.u.derived->attr.vtab)
     c->ts.u.derived = c->ts.u.derived->ts.u.derived;
   c->ts.u.derived->ns->types_resolved = 0;
   resolve_types (c->ts.u.derived->ns);
 }
    }


  sym->attr.associate_var = 1;


  if (sym->ts.type == BT_CHARACTER && !sym->attr.select_type_temporary)
    {
      if (!sym->ts.u.cl)
 sym->ts.u.cl = target->ts.u.cl;

      if (sym->ts.deferred && target->expr_type == EXPR_VARIABLE
   && target->symtree->n.sym->attr.dummy
   && sym->ts.u.cl == target->ts.u.cl)
 {
   sym->ts.u.cl = gfc_new_charlen (sym->ns, 
# 9115 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                           __null
# 9115 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                               );
   sym->ts.deferred = 1;
 }

      if (!sym->ts.u.cl->length
   && !sym->ts.deferred
   && target->expr_type == EXPR_CONSTANT)
 {
   sym->ts.u.cl->length =
  gfc_get_int_expr (gfc_charlen_int_kind, 
# 9124 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 9124 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             ,
      target->value.character.length);
 }
      else if ((!sym->ts.u.cl->length
  || sym->ts.u.cl->length->expr_type != EXPR_CONSTANT)
  && target->expr_type != EXPR_VARIABLE)
 {
   sym->ts.u.cl = gfc_new_charlen (sym->ns, 
# 9131 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                           __null
# 9131 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                               );
   sym->ts.deferred = 1;



   sym->attr.allocatable = 1;
 }
    }


  if (sym->ts.type == BT_CLASS && gfc_expr_attr (target).class_ok)
    sym->attr.class_ok = 1;
}
# 9152 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
fixup_array_ref (gfc_expr **expr1, gfc_expr *expr2,
   int rank, gfc_ref *ref)
{
  gfc_ref *nref = (*expr1)->ref;
  gfc_symbol *sym1 = (*expr1)->symtree->n.sym;
  gfc_symbol *sym2 = expr2 ? expr2->symtree->n.sym : 
# 9158 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                    __null
# 9158 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                        ;
  (*expr1)->rank = rank;
  if (sym1->ts.type == BT_CLASS)
    {
      if ((*expr1)->ts.type != BT_CLASS)
 (*expr1)->ts = sym1->ts;

      sym1->ts.u.derived->components->attr.dimension = 1;
      if (sym1->ts.u.derived->components->as == 
# 9166 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null 
# 9166 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                       && sym2)
 sym1->ts.u.derived->components->as
  = gfc_copy_array_spec (sym2->ts.u.derived->components->as);
    }
  else
    {
      sym1->attr.dimension = 1;
      if (sym1->as == 
# 9173 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null 
# 9173 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          && sym2)
 sym1->as = gfc_copy_array_spec (sym2->as);
    }

  for (; nref; nref = nref->next)
    if (nref->next == 
# 9178 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 9178 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
      break;

  if (ref && nref && nref->type != REF_ARRAY)
    nref->next = gfc_copy_ref (ref);
  else if (ref && !nref)
    (*expr1)->ref = gfc_copy_ref (ref);
}


static gfc_expr *
build_loc_call (gfc_expr *sym_expr)
{
  gfc_expr *loc_call;
  loc_call = gfc_get_expr ();
  loc_call->expr_type = EXPR_FUNCTION;
  gfc_get_sym_tree ("_loc", gfc_current_ns, &loc_call->symtree, false);
  loc_call->symtree->n.sym->attr.flavor = FL_PROCEDURE;
  loc_call->symtree->n.sym->attr.intrinsic = 1;
  loc_call->symtree->n.sym->result = loc_call->symtree->n.sym;
  gfc_commit_symbol (loc_call->symtree->n.sym);
  loc_call->ts.type = BT_INTEGER;
  loc_call->ts.kind = gfc_index_integer_kind;
  loc_call->value.function.isym = gfc_intrinsic_function_by_id (GFC_ISYM_LOC);
  loc_call->value.function.actual = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
  loc_call->value.function.actual->expr = sym_expr;
  loc_call->where = sym_expr->where;
  return loc_call;
}



static void
resolve_select_type (gfc_code *code, gfc_namespace *old_ns)
{
  gfc_symbol *selector_type;
  gfc_code *body, *new_st, *if_st, *tail;
  gfc_code *class_is = 
# 9215 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 9215 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          , *default_case = 
# 9215 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                            __null
# 9215 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                ;
  gfc_case *c;
  gfc_symtree *st;
  char name[63];
  gfc_namespace *ns;
  int error = 0;
  int rank = 0;
  gfc_ref* ref = 
# 9222 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 9222 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
  gfc_expr *selector_expr = 
# 9223 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 9223 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;

  ns = code->ext.block.ns;
  gfc_resolve (ns);


  if (code->expr1->ts.type != BT_CLASS
      && !(code->expr2 && code->expr2->ts.type == BT_CLASS))
    {
      gfc_error ("Selector shall be polymorphic in SELECT TYPE statement "
   "at %L", &code->loc);
      return;
    }

  if (!code->expr1->symtree->n.sym->attr.class_ok)
    return;

  if (code->expr2)
    {
      gfc_ref *ref2 = 
# 9242 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 9242 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         ;
      for (ref = code->expr2->ref; ref != 
# 9243 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 9243 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             ; ref = ref->next)
  if (ref->type == REF_COMPONENT
      && ref->u.c.component->ts.type == BT_CLASS)
    ref2 = ref;

      if (ref2)
 {
   if (code->expr1->symtree->n.sym->attr.untyped)
     code->expr1->symtree->n.sym->ts = ref2->u.c.component->ts;
   selector_type = ref2->u.c.component->ts.u.derived->components->ts.u.derived;
 }
      else
 {
   if (code->expr1->symtree->n.sym->attr.untyped)
     code->expr1->symtree->n.sym->ts = code->expr2->ts;
   selector_type = code->expr2->ts.u.derived->components
     ? code->expr2->ts.u.derived->components->ts.u.derived : code->expr2->ts.u.derived;
 }

      if (code->expr2->rank && code->expr1->ts.u.derived->components->as)
 code->expr1->ts.u.derived->components->as->rank = code->expr2->rank;


      if (gfc_is_coindexed (code->expr2))
 {
   gfc_error ("Selector at %L must not be coindexed",
       &code->expr2->where);
   return;
 }

    }
  else
    {
      selector_type = code->expr1->ts.u.derived->components->ts.u.derived;

      if (gfc_is_coindexed (code->expr1))
 {
   gfc_error ("Selector at %L must not be coindexed",
       &code->expr1->where);
   return;
 }
    }


  for (body = code->block; body; body = body->block)
    {
      c = body->ext.block.case_list;

      if (!error)
 {

   for (tail = code->block; tail; tail = tail->block)
     {
       gfc_case *d = tail->ext.block.case_list;
       if (tail == body)
  break;

       if (c->ts.type == d->ts.type
    && ((c->ts.type == BT_DERIVED
         && c->ts.u.derived && d->ts.u.derived
         && !strcmp (c->ts.u.derived->name,
       d->ts.u.derived->name))
        || c->ts.type == BT_UNKNOWN
        || (!(c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)
     && c->ts.kind == d->ts.kind)))
  {
    gfc_error ("TYPE IS at %L overlaps with TYPE IS at %L",
        &c->where, &d->where);
    return;
  }
     }
 }


      if ((c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)
   && !selector_type->attr.unlimited_polymorphic
   && !gfc_type_is_extensible (c->ts.u.derived))
 {
   gfc_error ("Derived type %qs at %L must be extensible",
       c->ts.u.derived->name, &c->where);
   error++;
   continue;
 }


      if (c->ts.type != BT_UNKNOWN && !selector_type->attr.unlimited_polymorphic
   && ((c->ts.type != BT_DERIVED && c->ts.type != BT_CLASS)
       || !gfc_type_is_extension_of (selector_type, c->ts.u.derived)))
 {
   if (c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)
     gfc_error ("Derived type %qs at %L must be an extension of %qs",
         c->ts.u.derived->name, &c->where, selector_type->name);
   else
     gfc_error ("Unexpected intrinsic type %qs at %L",
         gfc_basic_typename (c->ts.type), &c->where);
   error++;
   continue;
 }


      if (c->ts.type == BT_CHARACTER
   && (c->ts.u.cl->length != 
# 9344 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null 
# 9344 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                 || c->ts.deferred))
 {
   gfc_error ("The type-spec at %L shall specify that each length "
       "type parameter is assumed", &c->where);
   error++;
   continue;
 }


      if (c->ts.type == BT_UNKNOWN)
 {

   if (default_case)
     {
       gfc_error ("The DEFAULT CASE at %L cannot be followed "
    "by a second DEFAULT CASE at %L",
    &default_case->ext.block.case_list->where, &c->where);
       error++;
       continue;
     }

   default_case = body;
 }
    }

  if (error > 0)
    return;






  code->op = EXEC_BLOCK;
  if (code->expr2)
    {
      gfc_association_list* assoc;

      assoc = ((gfc_association_list *) xcalloc (1, sizeof (gfc_association_list)));
      assoc->st = code->expr1->symtree;
      assoc->target = gfc_copy_expr (code->expr2);
      assoc->target->where = code->expr2->where;


      code->ext.block.assoc = assoc;
      code->expr1->symtree->n.sym->assoc = assoc;

      resolve_assoc_var (code->expr1->symtree->n.sym, false);
    }
  else
    code->ext.block.assoc = 
# 9394 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 9394 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;



  if (code->expr2 && code->expr2->rank)
    {
      rank = code->expr2->rank;
      for (ref = code->expr2->ref; ref; ref = ref->next)
 if (ref->next == 
# 9402 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 9402 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
   break;
      if (ref && ref->type == REF_ARRAY)
 ref = gfc_copy_ref (ref);


      if (rank)
 fixup_array_ref (&code->expr1, code->expr2, rank, ref);
    }
  else if (code->expr1->rank)
    {
      rank = code->expr1->rank;
      for (ref = code->expr1->ref; ref; ref = ref->next)
 if (ref->next == 
# 9415 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 9415 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
   break;
      if (ref && ref->type == REF_ARRAY)
 ref = gfc_copy_ref (ref);
    }


  new_st = gfc_get_code (code->op);
  new_st->expr1 = code->expr1;
  new_st->expr2 = code->expr2;
  new_st->block = code->block;
  code->expr1 = code->expr2 = 
# 9426 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 9426 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  ;
  code->block = 
# 9427 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 9427 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
  if (!ns->code)
    ns->code = new_st;
  else
    ns->code->next = new_st;
  code = new_st;
  code->op = EXEC_SELECT_TYPE;




  gfc_add_component_ref(code->expr1,"_vptr");
  code->expr1->rank = 0;
  code->expr1 = build_loc_call (code->expr1);
  selector_expr = code->expr1->value.function.actual->expr;


  for (body = code->block; body; body = body->block)
    {
      gfc_symbol *vtab;
      gfc_expr *e;
      c = body->ext.block.case_list;




      if (c->ts.type != BT_UNKNOWN)
 {
   if (c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)
     {
       vtab = gfc_find_derived_vtab (c->ts.u.derived);
       ((void)(!(vtab) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 9458, __FUNCTION__), 0 : 0));
       c->high = gfc_get_int_expr (4, 
# 9459 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                      __null
# 9459 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                          ,
       c->ts.u.derived->hash_value);
     }
   else
     {
       vtab = gfc_find_vtab (&c->ts);
       ((void)(!(vtab && vtab->ts.u.derived->components->initializer) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 9465, __FUNCTION__), 0 : 0));
       e = vtab->ts.u.derived->components->initializer;
       c->high = gfc_copy_expr (e);
       if (c->high->ts.kind != 4)
  {
    gfc_typespec ts;
    ts.kind = 4;
    ts.type = BT_INTEGER;
    gfc_convert_type_warn (c->high, &ts, 2, 0);
  }
     }

   e = gfc_lval_expr_from_sym (vtab);
   c->low = build_loc_call (e);
 }
      else
 continue;






      if (c->ts.type == BT_CLASS)
 sprintf (name, "__tmp_class_%s", c->ts.u.derived->name);
      else if (c->ts.type == BT_DERIVED)
 sprintf (name, "__tmp_type_%s", c->ts.u.derived->name);
      else if (c->ts.type == BT_CHARACTER)
 {
   long charlen = 0;
   if (c->ts.u.cl && c->ts.u.cl->length
       && c->ts.u.cl->length->expr_type == EXPR_CONSTANT)
     charlen = gfc_mpz_get_hwi (c->ts.u.cl->length->value.integer);
   snprintf (name, sizeof (name),
      "__tmp_%s_" "%" 
# 9499 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 "l" "d" 
# 9499 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                         "_%d",
      gfc_basic_typename (c->ts.type), charlen, c->ts.kind);
 }
      else
 sprintf (name, "__tmp_%s_%d", gfc_basic_typename (c->ts.type),
          c->ts.kind);

      st = gfc_find_symtree (ns->sym_root, name);
      ((void)(!(st->n.sym->assoc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 9507, __FUNCTION__), 0 : 0));
      st->n.sym->assoc->target = gfc_get_variable_expr (selector_expr->symtree);
      st->n.sym->assoc->target->where = selector_expr->where;
      if (c->ts.type != BT_CLASS && c->ts.type != BT_UNKNOWN)
 {
   gfc_add_component_ref(st->n.sym->assoc->target,"_data");

   if (rank)
     fixup_array_ref (&st->n.sym->assoc->target, 
# 9515 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 9515 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    , rank, ref);
 }

      new_st = gfc_get_code (EXEC_BLOCK);
      new_st->ext.block.ns = gfc_build_block_ns (ns);
      new_st->ext.block.ns->code = body->next;
      body->next = new_st;




      if (st->n.sym->assoc->dangling)
 {
   new_st->ext.block.assoc = st->n.sym->assoc;
   st->n.sym->assoc->dangling = 0;
 }

      resolve_assoc_var (st->n.sym, false);
    }


  body = code;
  while (body && body->block)
    {
      if (body->block->ext.block.case_list->ts.type == BT_CLASS)
 {

   if (class_is == 
# 9542 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 9542 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      )
     {
       class_is = body->block;
       tail = class_is;
     }
   else
     {
       for (tail = class_is; tail->block; tail = tail->block) ;
       tail->block = body->block;
       tail = tail->block;
     }

   body->block = body->block->block;
   tail->block = 
# 9555 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 9555 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
 }
      else
 body = body->block;
    }

  if (class_is)
    {
      gfc_symbol *vtab;

      if (!default_case)
 {

   for (tail = code; tail->block; tail = tail->block) ;
   tail->block = gfc_get_code (EXEC_SELECT_TYPE);
   tail = tail->block;
   tail->ext.block.case_list = ((gfc_case *) xcalloc (1, sizeof (gfc_case)));
   tail->ext.block.case_list->ts.type = BT_UNKNOWN;
   tail->next = 
# 9573 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 9573 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
   default_case = tail;
 }


      if (class_is->block)
 {
   gfc_code **c1,*c2;
   bool swapped;

   do
     {
       swapped = false;
       for (c1 = &class_is; (*c1) && (*c1)->block; c1 = &((*c1)->block))
  {
    c2 = (*c1)->block;

    if ((*c1)->ext.block.case_list->ts.u.derived->hash_value
        == c2->ext.block.case_list->ts.u.derived->hash_value)
      {
        gfc_error ("Double CLASS IS block in SELECT TYPE "
     "statement at %L",
     &c2->ext.block.case_list->where);
        return;
      }
    if ((*c1)->ext.block.case_list->ts.u.derived->attr.extension
        < c2->ext.block.case_list->ts.u.derived->attr.extension)
      {

        (*c1)->block = c2->block;
        c2->block = *c1;
        *c1 = c2;
        swapped = true;
      }
  }
     }
   while (swapped);
 }


      if_st = gfc_get_code (EXEC_IF);
      new_st = if_st;
      for (body = class_is; body; body = body->block)
 {
   new_st->block = gfc_get_code (EXEC_IF);
   new_st = new_st->block;

   new_st->expr1 = gfc_get_expr ();
   new_st->expr1->expr_type = EXPR_FUNCTION;
   new_st->expr1->ts.type = BT_LOGICAL;
   new_st->expr1->ts.kind = 4;
   new_st->expr1->value.function.name = gfc_get_string ("_gfortran_" "is_extension_of");
   new_st->expr1->value.function.isym = ((gfc_intrinsic_sym *) xcalloc (1, sizeof (gfc_intrinsic_sym)));
   new_st->expr1->value.function.isym->id = GFC_ISYM_EXTENDS_TYPE_OF;

   new_st->expr1->value.function.actual = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
   new_st->expr1->value.function.actual->expr = gfc_get_variable_expr (selector_expr->symtree);
   new_st->expr1->value.function.actual->expr->where = code->loc;
   new_st->expr1->where = code->loc;
   gfc_add_component_ref(new_st->expr1->value.function.actual->expr,"_vptr");
   vtab = gfc_find_derived_vtab (body->ext.block.case_list->ts.u.derived);
   st = gfc_find_symtree (vtab->ns->sym_root, vtab->name);
   new_st->expr1->value.function.actual->next = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
   new_st->expr1->value.function.actual->next->expr = gfc_get_variable_expr (st);
   new_st->expr1->value.function.actual->next->expr->where = code->loc;
   new_st->next = body->next;
 }
 if (default_case->next)
   {
     new_st->block = gfc_get_code (EXEC_IF);
     new_st = new_st->block;
     new_st->next = default_case->next;
   }


 default_case->next = if_st;
    }



  gfc_current_ns = ns;
  gfc_resolve_blocks (code->block, gfc_current_ns);
  gfc_current_ns = old_ns;

  if (ref)
    free (ref);
}




static void
resolve_select_rank (gfc_code *code, gfc_namespace *old_ns)
{
  gfc_namespace *ns;
  gfc_code *body, *new_st, *tail;
  gfc_case *c;
  char tname[63 + 7];
  char name[2 * 63];
  gfc_symtree *st;
  gfc_expr *selector_expr = 
# 9673 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 9673 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;
  int case_value;
  long charlen = 0;

  ns = code->ext.block.ns;
  gfc_resolve (ns);

  code->op = EXEC_BLOCK;
  if (code->expr2)
    {
      gfc_association_list* assoc;

      assoc = ((gfc_association_list *) xcalloc (1, sizeof (gfc_association_list)));
      assoc->st = code->expr1->symtree;
      assoc->target = gfc_copy_expr (code->expr2);
      assoc->target->where = code->expr2->where;


      code->ext.block.assoc = assoc;
      code->expr1->symtree->n.sym->assoc = assoc;

      resolve_assoc_var (code->expr1->symtree->n.sym, false);
    }
  else
    code->ext.block.assoc = 
# 9697 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 9697 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;




  for (body = code->block; body; body = body->block)
    {
      c = body->ext.block.case_list;
      if (c->low)
 case_value = (int) 
# 9706 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __gmpz_get_si 
# 9706 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              (c->low->value.integer);
      else
 case_value = -2;


      for (tail = code->block; tail; tail = tail->block)
 {
   gfc_case *d = tail->ext.block.case_list;
   int case_value2;

   if (tail == body)
     break;


   if (!c->low && !d->low)
     gfc_error ("RANK DEFAULT at %L is repeated at %L",
         &c->where, &d->where);

   if (!c->low || !d->low)
     continue;


   case_value2 = (int) 
# 9728 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __gmpz_get_si 
# 9728 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                 (d->low->value.integer);
   if ((case_value == case_value2) && case_value == -1)
     gfc_error ("RANK (*) at %L is repeated at %L",
         &c->where, &d->where);
   else if (case_value == case_value2)
     gfc_error ("RANK (%i) at %L is repeated at %L",
         case_value, &c->where, &d->where);
 }

      if (!c->low)
        continue;


      if (case_value == -1 && (gfc_expr_attr (code->expr1).allocatable
          || gfc_expr_attr (code->expr1).pointer))
 gfc_error ("RANK (*) at %L cannot be used with the pointer or "
     "allocatable selector at %L", &c->where, &code->expr1->where);

      if (case_value == -1 && (gfc_expr_attr (code->expr1).allocatable
          || gfc_expr_attr (code->expr1).pointer))
 gfc_error ("RANK (*) at %L cannot be used with the pointer or "
     "allocatable selector at %L", &c->where, &code->expr1->where);
    }


  new_st = gfc_get_code (code->op);
  new_st->expr1 = code->expr1;
  new_st->expr2 = code->expr2;
  new_st->block = code->block;
  code->expr1 = code->expr2 = 
# 9757 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 9757 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  ;
  code->block = 
# 9758 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 9758 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;
  if (!ns->code)
    ns->code = new_st;
  else
    ns->code->next = new_st;
  code = new_st;
  code->op = EXEC_SELECT_RANK;

  selector_expr = code->expr1;


  for (body = code->block; body; body = body->block)
    {
      c = body->ext.block.case_list;
      int case_value;


      if (c->low == 
# 9775 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 9775 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       )
 continue;





      if (c->ts.type == BT_CHARACTER && c->ts.u.cl && c->ts.u.cl->length
   && c->ts.u.cl->length->expr_type == EXPR_CONSTANT)
 charlen = gfc_mpz_get_hwi (c->ts.u.cl->length->value.integer);

      if (c->ts.type == BT_CLASS)
 sprintf (tname, "class_%s", c->ts.u.derived->name);
      else if (c->ts.type == BT_DERIVED)
 sprintf (tname, "type_%s", c->ts.u.derived->name);
      else if (c->ts.type != BT_CHARACTER)
 sprintf (tname, "%s_%d", gfc_basic_typename (c->ts.type), c->ts.kind);
      else
 sprintf (tname, "%s_" "%" 
# 9793 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      "l" "d" 
# 9793 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                              "_%d",
   gfc_basic_typename (c->ts.type), charlen, c->ts.kind);

      case_value = (int) 
# 9796 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __gmpz_get_si 
# 9796 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                   (c->low->value.integer);
      if (case_value >= 0)
 sprintf (name, "__tmp_%s_rank_%d", tname, case_value);
      else
 sprintf (name, "__tmp_%s_rank_m%d", tname, -case_value);

      st = gfc_find_symtree (ns->sym_root, name);
      ((void)(!(st->n.sym->assoc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 9803, __FUNCTION__), 0 : 0));

      st->n.sym->assoc->target = gfc_get_variable_expr (selector_expr->symtree);
      st->n.sym->assoc->target->where = selector_expr->where;

      new_st = gfc_get_code (EXEC_BLOCK);
      new_st->ext.block.ns = gfc_build_block_ns (ns);
      new_st->ext.block.ns->code = body->next;
      body->next = new_st;




      if (st->n.sym->assoc->dangling)
 {
   new_st->ext.block.assoc = st->n.sym->assoc;
   st->n.sym->assoc->dangling = 0;
 }

      resolve_assoc_var (st->n.sym, false);
    }

  gfc_current_ns = ns;
  gfc_resolve_blocks (code->block, gfc_current_ns);
  gfc_current_ns = old_ns;
}
# 9837 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
resolve_transfer (gfc_code *code)
{
  gfc_symbol *sym, *derived;
  gfc_ref *ref;
  gfc_expr *exp;
  bool write = false;
  bool formatted = false;
  gfc_dt *dt = code->ext.dt;
  gfc_symbol *dtio_sub = 
# 9846 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 9846 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            ;

  exp = code->expr1;

  while (exp != 
# 9850 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null 
# 9850 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    && exp->expr_type == EXPR_OP
  && exp->value.op.op == INTRINSIC_PARENTHESES)
    exp = exp->value.op.op1;

  if (exp && exp->expr_type == EXPR_NULL
      && code->ext.dt)
    {
      gfc_error ("Invalid context for NULL () intrinsic at %L",
   &exp->where);
      return;
    }

  if (exp == 
# 9862 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null 
# 9862 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 || (exp->expr_type != EXPR_VARIABLE
        && exp->expr_type != EXPR_FUNCTION
        && exp->expr_type != EXPR_STRUCTURE))
    return;




  if (dt && dt->dt_io_kind->value.iokind == M_READ
      && !gfc_check_vardef_context (exp, false, false, false,
        gettext ("item in READ")))
    return;

  const gfc_typespec *ts = exp->expr_type == EXPR_STRUCTURE
   || exp->expr_type == EXPR_FUNCTION
    ? &exp->ts : &exp->symtree->n.sym->ts;


  for (ref = exp->ref; ref; ref = ref->next)
    if (ref->type == REF_COMPONENT)
      ts = &ref->u.c.component->ts;

  if (dt && dt->dt_io_kind->value.iokind != M_INQUIRE
      && (ts->type == BT_DERIVED || ts->type == BT_CLASS))
    {
      derived = ts->u.derived;


      if (dt && (dt->format_expr || dt->format_label))
 formatted = true;

      write = dt->dt_io_kind->value.iokind == M_WRITE
       || dt->dt_io_kind->value.iokind == M_PRINT;
      dtio_sub = gfc_find_specific_dtio_proc (derived, write, formatted);

      if (dtio_sub != 
# 9897 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null 
# 9897 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          && exp->expr_type == EXPR_VARIABLE)
 {
   dt->udtio = exp;
   sym = exp->symtree->n.sym->ns->proc_name;


   if (sym && sym == dtio_sub && sym->formal
       && sym->formal->sym == exp->symtree->n.sym
       && exp->ref == 
# 9905 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 9905 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
     {
       if (!sym->attr.recursive)
  {
    gfc_error ("DTIO %s procedure at %L must be recursive",
        sym->name, &sym->declared_at);
    return;
  }
     }
 }
    }

  if (ts->type == BT_CLASS && dtio_sub == 
# 9917 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 9917 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             )
    {
      gfc_error ("Data transfer element at %L cannot be polymorphic unless "
                "it is processed by a defined input/output procedure",
                &code->loc);
      return;
    }

  if (ts->type == BT_DERIVED)
    {



      if (ts->u.derived->attr.pointer_comp && dtio_sub == 
# 9930 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                         __null
# 9930 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                             )
 {
   gfc_error ("Data transfer element at %L cannot have POINTER "
       "components unless it is processed by a defined "
       "input/output procedure", &code->loc);
   return;
 }


      if (ts->u.derived->attr.proc_pointer_comp)
 {
   gfc_error ("Data transfer element at %L cannot have "
       "procedure pointer components", &code->loc);
   return;
 }

      if (ts->u.derived->attr.alloc_comp && dtio_sub == 
# 9946 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                       __null
# 9946 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                           )
 {
   gfc_error ("Data transfer element at %L cannot have ALLOCATABLE "
       "components unless it is processed by a defined "
       "input/output procedure", &code->loc);
   return;
 }




      if (ts->u.derived->ts.f90_type == BT_VOID)
 {
   if (!gfc_notify_std ((1<<5), "Data transfer element at %L "
          "cannot have PRIVATE components", &code->loc))
     return;
 }
      else if (derived_inaccessible (ts->u.derived) && dtio_sub == 
# 9963 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                  __null
# 9963 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                      )
 {
   gfc_error ("Data transfer element at %L cannot have "
       "PRIVATE components unless it is processed by "
       "a defined input/output procedure", &code->loc);
   return;
 }
    }

  if (exp->expr_type == EXPR_STRUCTURE)
    return;

  sym = exp->symtree->n.sym;

  if (sym->as != 
# 9977 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null 
# 9977 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     && sym->as->type == AS_ASSUMED_SIZE && exp->ref
      && exp->ref->type == REF_ARRAY && exp->ref->u.ar.type == AR_FULL)
    {
      gfc_error ("Data transfer element at %L cannot be a full reference to "
   "an assumed-size array", &code->loc);
      return;
    }
}







static void
find_reachable_labels (gfc_code *block)
{
  gfc_code *c;

  if (!block)
    return;

  cs_base->reachable_labels = bitmap_alloc (&labels_obstack);




  for (c = block; c; c = c->next)
    {
      if (c->here && c->op != EXEC_END_NESTED_BLOCK)
 bitmap_set_bit (cs_base->reachable_labels, c->here->value);
    }


  if (cs_base->prev)
    {
      ((void)(!(cs_base->prev->reachable_labels) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10014, __FUNCTION__), 0 : 0));
      bitmap_ior_into (cs_base->reachable_labels,
         cs_base->prev->reachable_labels);
    }
}


static void
resolve_lock_unlock_event (gfc_code *code)
{
  if (code->expr1->expr_type == EXPR_FUNCTION
      && code->expr1->value.function.isym
      && code->expr1->value.function.isym->id == GFC_ISYM_CAF_GET)
    remove_caf_get_intrinsic (code->expr1);

  if ((code->op == EXEC_LOCK || code->op == EXEC_UNLOCK)
      && (code->expr1->ts.type != BT_DERIVED
   || code->expr1->expr_type != EXPR_VARIABLE
   || code->expr1->ts.u.derived->from_intmod != INTMOD_ISO_FORTRAN_ENV
   || code->expr1->ts.u.derived->intmod_sym_id != ISOFORTRAN_LOCK_TYPE
   || code->expr1->rank != 0
   || (!gfc_is_coarray (code->expr1) &&
       !gfc_is_coindexed (code->expr1))))
    gfc_error ("Lock variable at %L must be a scalar of type LOCK_TYPE",
        &code->expr1->where);
  else if ((code->op == EXEC_EVENT_POST || code->op == EXEC_EVENT_WAIT)
    && (code->expr1->ts.type != BT_DERIVED
        || code->expr1->expr_type != EXPR_VARIABLE
        || code->expr1->ts.u.derived->from_intmod
    != INTMOD_ISO_FORTRAN_ENV
        || code->expr1->ts.u.derived->intmod_sym_id
    != ISOFORTRAN_EVENT_TYPE
        || code->expr1->rank != 0))
    gfc_error ("Event variable at %L must be a scalar of type EVENT_TYPE",
        &code->expr1->where);
  else if (code->op == EXEC_EVENT_POST && !gfc_is_coarray (code->expr1)
    && !gfc_is_coindexed (code->expr1))
    gfc_error ("Event variable argument at %L must be a coarray or coindexed",
        &code->expr1->where);
  else if (code->op == EXEC_EVENT_WAIT && !gfc_is_coarray (code->expr1))
    gfc_error ("Event variable argument at %L must be a coarray but not "
        "coindexed", &code->expr1->where);


  if (code->expr2
      && (code->expr2->ts.type != BT_INTEGER || code->expr2->rank != 0
   || code->expr2->expr_type != EXPR_VARIABLE))
    gfc_error ("STAT= argument at %L must be a scalar INTEGER variable",
        &code->expr2->where);

  if (code->expr2
      && !gfc_check_vardef_context (code->expr2, false, false, false,
        gettext ("STAT variable")))
    return;


  if (code->expr3
      && (code->expr3->ts.type != BT_CHARACTER || code->expr3->rank != 0
   || code->expr3->expr_type != EXPR_VARIABLE))
    gfc_error ("ERRMSG= argument at %L must be a scalar CHARACTER variable",
        &code->expr3->where);

  if (code->expr3
      && !gfc_check_vardef_context (code->expr3, false, false, false,
        gettext ("ERRMSG variable")))
    return;


  if (code->op != EXEC_EVENT_WAIT && code->expr4
      && (code->expr4->ts.type != BT_LOGICAL || code->expr4->rank != 0
   || code->expr4->expr_type != EXPR_VARIABLE))
    gfc_error ("ACQUIRED_LOCK= argument at %L must be a scalar LOGICAL "
        "variable", &code->expr4->where);

  if (code->op != EXEC_EVENT_WAIT && code->expr4
      && !gfc_check_vardef_context (code->expr4, false, false, false,
        gettext ("ACQUIRED_LOCK variable")))
    return;


  if (code->op == EXEC_EVENT_WAIT && code->expr4)
    {
      if (!gfc_resolve_expr (code->expr4) || code->expr4->ts.type != BT_INTEGER
   || code->expr4->rank != 0)
 gfc_error ("UNTIL_COUNT= argument at %L must be a scalar INTEGER "
     "expression", &code->expr4->where);
    }
}


static void
resolve_critical (gfc_code *code)
{
  gfc_symtree *symtree;
  gfc_symbol *lock_type;
  char name[63];
  static int serial = 0;

  if (global_options.x_flag_coarray != GFC_FCOARRAY_LIB)
    return;

  symtree = gfc_find_symtree (gfc_current_ns->sym_root,
         "_F." "lock_type");
  if (symtree)
    lock_type = symtree->n.sym;
  else
    {
      if (gfc_get_sym_tree ("_F." "lock_type", gfc_current_ns, &symtree,
       false) != 0)
 (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10123, __FUNCTION__));
      lock_type = symtree->n.sym;
      lock_type->attr.flavor = FL_DERIVED;
      lock_type->attr.zero_comp = 1;
      lock_type->from_intmod = INTMOD_ISO_FORTRAN_ENV;
      lock_type->intmod_sym_id = ISOFORTRAN_LOCK_TYPE;
    }

  sprintf(name, "_F." "lock_var" "%d",serial++);
  if (gfc_get_sym_tree (name, gfc_current_ns, &symtree, false) != 0)
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10133, __FUNCTION__));

  code->resolved_sym = symtree->n.sym;
  symtree->n.sym->attr.flavor = FL_VARIABLE;
  symtree->n.sym->attr.referenced = 1;
  symtree->n.sym->attr.artificial = 1;
  symtree->n.sym->attr.codimension = 1;
  symtree->n.sym->ts.type = BT_DERIVED;
  symtree->n.sym->ts.u.derived = lock_type;
  symtree->n.sym->as = ((gfc_array_spec *) xcalloc (1, sizeof (gfc_array_spec)));
  symtree->n.sym->as->corank = 1;
  symtree->n.sym->as->type = AS_EXPLICIT;
  symtree->n.sym->as->cotype = AS_EXPLICIT;
  symtree->n.sym->as->lower[0] = gfc_get_int_expr (gfc_default_integer_kind,
         
# 10147 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 10147 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            , 1);
  gfc_commit_symbols();
}


static void
resolve_sync (gfc_code *code)
{

  if (code->expr1)
    {
      if (code->expr1->ts.type != BT_INTEGER || code->expr1->rank > 1)
 gfc_error ("Imageset argument at %L must be a scalar or rank-1 "
     "INTEGER expression", &code->expr1->where);
      if (code->expr1->expr_type == EXPR_CONSTANT && code->expr1->rank == 0
   && 
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     code->expr1->value.integer
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     code->expr1->value.integer
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     code->expr1->value.integer
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     code->expr1->value.integer
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 10162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                < 0)
 gfc_error ("Imageset argument at %L must between 1 and num_images()",
     &code->expr1->where);
      else if (code->expr1->expr_type == EXPR_ARRAY
        && gfc_simplify_expr (code->expr1, 0))
 {
    gfc_constructor *cons;
    cons = gfc_constructor_first (code->expr1->value.constructor);
    for (; cons; cons = gfc_constructor_next (cons))
      if (cons->expr->expr_type == EXPR_CONSTANT
   && 
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      (__builtin_constant_p ((
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      1
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ) >= 0) && (
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      1
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      1
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ))) && ((static_cast<unsigned long> (
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      1
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ))) == 0 ? ((
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      cons->expr->value.integer
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      )->_mp_size < 0 ? -1 : (
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      cons->expr->value.integer
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      )->_mp_size > 0) : __gmpz_cmp_ui (
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      cons->expr->value.integer
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ,(static_cast<unsigned long> (
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      1
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      )))) : __gmpz_cmp_si (
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      cons->expr->value.integer
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      ,
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      1
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      )) 
# 10172 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                < 0)
        gfc_error ("Imageset argument at %L must between 1 and "
     "num_images()", &cons->expr->where);
 }
    }


  gfc_resolve_expr (code->expr2);
  if (code->expr2
      && (code->expr2->ts.type != BT_INTEGER || code->expr2->rank != 0
   || code->expr2->expr_type != EXPR_VARIABLE))
    gfc_error ("STAT= argument at %L must be a scalar INTEGER variable",
        &code->expr2->where);


  gfc_resolve_expr (code->expr3);
  if (code->expr3
      && (code->expr3->ts.type != BT_CHARACTER || code->expr3->rank != 0
   || code->expr3->expr_type != EXPR_VARIABLE))
    gfc_error ("ERRMSG= argument at %L must be a scalar CHARACTER variable",
        &code->expr3->where);
}





static void
resolve_branch (gfc_st_label *label, gfc_code *code)
{
  code_stack *stack;

  if (label == 
# 10204 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 10204 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
    return;



  if (label->defined == ST_LABEL_UNKNOWN)
    {
      gfc_error ("Label %d referenced at %L is never defined", label->value,
   &code->loc);
      return;
    }

  if (label->defined != ST_LABEL_TARGET && label->defined != ST_LABEL_DO_TARGET)
    {
      gfc_error ("Statement at %L is not a valid branch target statement "
   "for the branch statement at %L", &label->where, &code->loc);
      return;
    }



  if (code->here == label)
    {
      gfc_warning (0,
     "Branch at %L may result in an infinite loop", &code->loc);
      return;
    }





  if (bitmap_bit_p (cs_base->reachable_labels, label->value))
    {



      for (stack = cs_base; stack; stack = stack->prev)
 {
   if (stack->current->op == EXEC_CRITICAL
       && bitmap_bit_p (stack->reachable_labels, label->value))
     gfc_error ("GOTO statement at %L leaves CRITICAL construct for "
        "label at %L", &code->loc, &label->where);
   else if (stack->current->op == EXEC_DO_CONCURRENT
     && bitmap_bit_p (stack->reachable_labels, label->value))
     gfc_error ("GOTO statement at %L leaves DO CONCURRENT construct "
        "for label at %L", &code->loc, &label->where);
 }

      return;
    }





  for (stack = cs_base; stack; stack = stack->prev)
    {
      if (stack->current->next && stack->current->next->here == label)
 break;
      if (stack->current->op == EXEC_CRITICAL)
 {


   gfc_error ("GOTO statement at %L leaves CRITICAL construct for label"
        " at %L", &code->loc, &label->where);
   return;
 }
      else if (stack->current->op == EXEC_DO_CONCURRENT)
 {
   gfc_error ("GOTO statement at %L leaves DO CONCURRENT construct for "
       "label at %L", &code->loc, &label->where);
   return;
 }
    }

  if (stack)
    {
      ((void)(!(stack->current->next->op == EXEC_END_NESTED_BLOCK) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10282, __FUNCTION__), 0 : 0));
      return;
    }




  gfc_notify_std ((1<<6), "Label at %L is not in the same block "
    "as the GOTO statement at %L", &label->where,
    &code->loc);
  return;
}




static bool
resolve_where_shape (gfc_expr *expr1, gfc_expr *expr2)
{
  mpz_t shape[15];
  mpz_t shape2[15];
  bool result = false;
  int i;


  if (expr1->rank != expr2->rank)
    return result;


  for (i=0; i<expr1->rank; i++)
    {
      if (!gfc_array_dimen_size (expr1, i, &shape[i]))
 goto ignore;

      if (!gfc_array_dimen_size (expr2, i, &shape2[i]))
 goto ignore;

      if (
# 10319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __gmpz_cmp 
# 10319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 (shape[i], shape2[i]))
 goto over;
    }



ignore:
  result = true;

over:
  gfc_clear_shape (shape, i);
  gfc_clear_shape (shape2, i);
  return result;
}





static void
resolve_where (gfc_code *code, gfc_expr *mask)
{
  gfc_code *cblock;
  gfc_code *cnext;
  gfc_expr *e = 
# 10343 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 10343 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ;

  cblock = code->block;



  if (mask == 
# 10349 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 10349 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 )
    e = cblock->expr1;
  else
    e = mask;

  while (cblock)
    {
      if (cblock->expr1)
 {


   if (!resolve_where_shape (cblock->expr1, e))
     gfc_error ("WHERE mask at %L has inconsistent shape",
         &cblock->expr1->where);
  }



      cnext = cblock->next;
      while (cnext)
 {
   switch (cnext->op)
     {

     case EXEC_ASSIGN:


       if (e && !resolve_where_shape (cnext->expr1, e))
        gfc_error ("WHERE assignment target at %L has "
     "inconsistent shape", &cnext->expr1->where);
       break;


     case EXEC_ASSIGN_CALL:
       resolve_call (cnext);
       if (!cnext->resolved_sym->attr.elemental)
  gfc_error("Non-ELEMENTAL user-defined assignment in WHERE at %L",
     &cnext->ext.actual->expr->where);
       break;


     case EXEC_WHERE:
       resolve_where (cnext, e);
       break;

     default:
       gfc_error ("Unsupported statement inside WHERE at %L",
    &cnext->loc);
     }

  cnext = cnext->next;
       }

    cblock = cblock->block;
  }
}






static void
gfc_resolve_assign_in_forall (gfc_code *code, int nvar, gfc_expr **var_expr)
{
  int n;

  for (n = 0; n < nvar; n++)
    {
      gfc_symbol *forall_index;

      forall_index = var_expr[n]->symtree->n.sym;



      if ((code->expr1->expr_type == EXPR_VARIABLE)
   && (code->expr1->symtree->n.sym == forall_index))
 gfc_error ("Assignment to a FORALL index variable at %L",
     &code->expr1->where);
      else
 {




   if (!find_forall_index (code->expr1, forall_index, 0))
     gfc_warning (0, "The FORALL with index %qs is not used on the "
    "left side of the assignment at %L and so might "
    "cause multiple assignment to this object",
    var_expr[n]->symtree->name, &code->expr1->where);
 }
    }
}




static void
gfc_resolve_where_code_in_forall (gfc_code *code, int nvar,
      gfc_expr **var_expr)
{
  gfc_code *cblock;
  gfc_code *cnext;

  cblock = code->block;
  while (cblock)
    {


      cnext = cblock->next;
      while (cnext)
 {
   switch (cnext->op)
     {

     case EXEC_ASSIGN:
       gfc_resolve_assign_in_forall (cnext, nvar, var_expr);
       break;


     case EXEC_ASSIGN_CALL:
       resolve_call (cnext);
       if (!cnext->resolved_sym->attr.elemental)
  gfc_error("Non-ELEMENTAL user-defined assignment in WHERE at %L",
     &cnext->ext.actual->expr->where);
       break;


     case EXEC_WHERE:
       gfc_resolve_where_code_in_forall (cnext, nvar, var_expr);
       break;

     default:
       gfc_error ("Unsupported statement inside WHERE at %L",
    &cnext->loc);
     }

   cnext = cnext->next;
 }

      cblock = cblock->block;
    }
}







static void
gfc_resolve_forall_body (gfc_code *code, int nvar, gfc_expr **var_expr)
{
  gfc_code *c;

  c = code->block->next;
  while (c)
    {
      switch (c->op)
 {
 case EXEC_ASSIGN:
 case EXEC_POINTER_ASSIGN:
   gfc_resolve_assign_in_forall (c, nvar, var_expr);
   break;

 case EXEC_ASSIGN_CALL:
   resolve_call (c);
   break;



 case EXEC_FORALL:
   break;
 case EXEC_WHERE:
   gfc_resolve_where_code_in_forall(c, nvar, var_expr);
   break;
 default:
   break;
 }

      c = c->next;
    }
}






static int
gfc_count_forall_iterators (gfc_code *code)
{
  int max_iters, sub_iters, current_iters;
  gfc_forall_iterator *fa;

  ((void)(!(code->op == EXEC_FORALL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10544, __FUNCTION__), 0 : 0));
  max_iters = 0;
  current_iters = 0;

  for (fa = code->ext.forall_iterator; fa; fa = fa->next)
    current_iters ++;

  code = code->block->next;

  while (code)
    {
      if (code->op == EXEC_FORALL)
        {
          sub_iters = gfc_count_forall_iterators (code);
          if (sub_iters > max_iters)
            max_iters = sub_iters;
        }
      code = code->next;
    }

  return current_iters + max_iters;
}





static void
gfc_resolve_forall (gfc_code *code, gfc_namespace *ns, int forall_save)
{
  static gfc_expr **var_expr;
  static int total_var = 0;
  static int nvar = 0;
  int i, old_nvar, tmp;
  gfc_forall_iterator *fa;

  old_nvar = nvar;

  if (!gfc_notify_std ((1<<10), "FORALL construct at %L", &code->loc))
    return;


  if (forall_save == 0)
    {


      total_var = gfc_count_forall_iterators (code);


      var_expr = ((gfc_expr * *) xcalloc ((total_var), sizeof (gfc_expr *)));
    }



  for (fa = code->ext.forall_iterator; fa; fa = fa->next)
    {

      if (fa->var->ref && fa->var->ref->type == REF_ARRAY)
 {
   gfc_error ("FORALL index-name at %L must be a scalar variable "
       "of type integer", &fa->var->where);
   continue;
 }



      for (i = 0; i < nvar; i++)
 {
   if (fa->var->symtree->n.sym == var_expr[i]->symtree->n.sym)
     gfc_error ("An outer FORALL construct already has an index "
   "with this name %L", &fa->var->where);
 }


      var_expr[nvar] = gfc_copy_expr (fa->var);

      nvar++;


      ((void)(!(nvar <= total_var) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10623, __FUNCTION__), 0 : 0));
    }


  gfc_resolve_forall_body (code, nvar, var_expr);


  gfc_resolve_blocks (code->block, ns);

  tmp = nvar;
  nvar = old_nvar;

  for (i = nvar; i < tmp; i++)
     gfc_free_expr (var_expr[i]);

  if (nvar == 0)
    {

      ((void)(!(forall_save == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10641, __FUNCTION__), 0 : 0));


      free (var_expr);
      total_var = 0;
    }
}




static void
resolve_block_construct (gfc_code* code)
{

  gfc_resolve (code->ext.block.ns);



}





void
gfc_resolve_blocks (gfc_code *b, gfc_namespace *ns)
{
  bool t;

  for (; b; b = b->block)
    {
      t = gfc_resolve_expr (b->expr1);
      if (!gfc_resolve_expr (b->expr2))
 t = false;

      switch (b->op)
 {
 case EXEC_IF:
   if (t && b->expr1 != 
# 10680 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
       
# 10681 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && (b->expr1->ts.type != BT_LOGICAL || b->expr1->rank != 0))
     gfc_error ("IF clause at %L requires a scalar LOGICAL expression",
         &b->expr1->where);
   break;

 case EXEC_WHERE:
   if (t
       && b->expr1 != 
# 10688 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
       
# 10689 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && (b->expr1->ts.type != BT_LOGICAL || b->expr1->rank == 0))
     gfc_error ("WHERE/ELSEWHERE clause at %L requires a LOGICAL array",
         &b->expr1->where);
   break;

 case EXEC_GOTO:
   resolve_branch (b->label1, b);
   break;

 case EXEC_BLOCK:
   resolve_block_construct (b);
   break;

 case EXEC_SELECT:
 case EXEC_SELECT_TYPE:
 case EXEC_SELECT_RANK:
 case EXEC_FORALL:
 case EXEC_DO:
 case EXEC_DO_WHILE:
 case EXEC_DO_CONCURRENT:
 case EXEC_CRITICAL:
 case EXEC_READ:
 case EXEC_WRITE:
 case EXEC_IOLENGTH:
 case EXEC_WAIT:
   break;

 case EXEC_OMP_ATOMIC:
 case EXEC_OACC_ATOMIC:
   {
     gfc_omp_atomic_op aop
       = (gfc_omp_atomic_op) (b->ext.omp_atomic & GFC_OMP_ATOMIC_MASK);



     ((void)(!(b->next && b->next->op == EXEC_ASSIGN) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10724, __FUNCTION__), 0 : 0));
     ((void)(!(((aop != GFC_OMP_ATOMIC_CAPTURE) && b->next->next == 
# 10725 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
    __null
# 10725 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
    ) || ((aop == GFC_OMP_ATOMIC_CAPTURE) && b->next->next != 
# 10725 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
    __null 
# 10725 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
    && b->next->next->op == EXEC_ASSIGN && b->next->next->next == 
# 10725 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
    __null
# 10725 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
    )) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10725, __FUNCTION__), 0 : 0))




                                       ;
   }
   break;

 case EXEC_OACC_PARALLEL_LOOP:
 case EXEC_OACC_PARALLEL:
 case EXEC_OACC_KERNELS_LOOP:
 case EXEC_OACC_KERNELS:
 case EXEC_OACC_SERIAL_LOOP:
 case EXEC_OACC_SERIAL:
 case EXEC_OACC_DATA:
 case EXEC_OACC_HOST_DATA:
 case EXEC_OACC_LOOP:
 case EXEC_OACC_UPDATE:
 case EXEC_OACC_WAIT:
 case EXEC_OACC_CACHE:
 case EXEC_OACC_ENTER_DATA:
 case EXEC_OACC_EXIT_DATA:
 case EXEC_OACC_ROUTINE:
 case EXEC_OMP_CRITICAL:
 case EXEC_OMP_DISTRIBUTE:
 case EXEC_OMP_DISTRIBUTE_PARALLEL_DO:
 case EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD:
 case EXEC_OMP_DISTRIBUTE_SIMD:
 case EXEC_OMP_DO:
 case EXEC_OMP_DO_SIMD:
 case EXEC_OMP_MASTER:
 case EXEC_OMP_ORDERED:
 case EXEC_OMP_PARALLEL:
 case EXEC_OMP_PARALLEL_DO:
 case EXEC_OMP_PARALLEL_DO_SIMD:
 case EXEC_OMP_PARALLEL_SECTIONS:
 case EXEC_OMP_PARALLEL_WORKSHARE:
 case EXEC_OMP_SECTIONS:
 case EXEC_OMP_SIMD:
 case EXEC_OMP_SINGLE:
 case EXEC_OMP_TARGET:
 case EXEC_OMP_TARGET_DATA:
 case EXEC_OMP_TARGET_ENTER_DATA:
 case EXEC_OMP_TARGET_EXIT_DATA:
 case EXEC_OMP_TARGET_PARALLEL:
 case EXEC_OMP_TARGET_PARALLEL_DO:
 case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:
 case EXEC_OMP_TARGET_SIMD:
 case EXEC_OMP_TARGET_TEAMS:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:
 case EXEC_OMP_TARGET_UPDATE:
 case EXEC_OMP_TASK:
 case EXEC_OMP_TASKGROUP:
 case EXEC_OMP_TASKLOOP:
 case EXEC_OMP_TASKLOOP_SIMD:
 case EXEC_OMP_TASKWAIT:
 case EXEC_OMP_TASKYIELD:
 case EXEC_OMP_TEAMS:
 case EXEC_OMP_TEAMS_DISTRIBUTE:
 case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:
 case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:
 case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:
 case EXEC_OMP_WORKSHARE:
   break;

 default:
   gfc_internal_error ("gfc_resolve_blocks(): Bad block type");
 }

      gfc_resolve_code (b->next, ns);
    }
}




static bool
resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)
{
  bool rval = false;
  gfc_expr *lhs;
  gfc_expr *rhs;
  int n;
  gfc_ref *ref;
  symbol_attribute attr;

  if (gfc_extend_assign (code, ns))
    {
      gfc_expr** rhsptr;

      if (code->op == EXEC_ASSIGN_CALL)
 {
   lhs = code->ext.actual->expr;
   rhsptr = &code->ext.actual->next->expr;
 }
      else
 {
   gfc_actual_arglist* args;
   gfc_typebound_proc* tbp;

   ((void)(!(code->op == EXEC_COMPCALL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10829, __FUNCTION__), 0 : 0));

   args = code->expr1->value.compcall.actual;
   lhs = args->expr;
   rhsptr = &args->next->expr;

   tbp = code->expr1->value.compcall.tbp;
   ((void)(!(!tbp->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 10836, __FUNCTION__), 0 : 0));
 }



      if ((*rhsptr)->expr_type == EXPR_VARIABLE
     && (*rhsptr)->symtree->n.sym->ts.type == BT_DERIVED
     && gfc_has_default_initializer ((*rhsptr)->symtree->n.sym->ts.u.derived)
     && (lhs->symtree->n.sym == (*rhsptr)->symtree->n.sym))
 *rhsptr = gfc_get_parentheses (*rhsptr);

      return true;
    }

  lhs = code->expr1;
  rhs = code->expr2;

  if ((gfc_numeric_ts (&lhs->ts) || lhs->ts.type == BT_LOGICAL)
      && rhs->ts.type == BT_CHARACTER
      && (rhs->expr_type != EXPR_CONSTANT || !global_options.x_flag_dec_char_conversions))
    {



      gfc_error ("Cannot convert %s to %s at %L", gfc_typename (rhs),
   gfc_typename (lhs), &rhs->where);
      return false;
    }


  if (rhs->ts.type == BT_BOZ)
    {
      if (gfc_invalid_boz ("BOZ literal constant at %L is neither a DATA "
      "statement value nor an actual argument of "
      "INT/REAL/DBLE/CMPLX intrinsic subprogram",
      &rhs->where))
 return false;

      switch (lhs->ts.type)
 {
 case BT_INTEGER:
   if (!gfc_boz2int (rhs, lhs->ts.kind))
     return false;
   break;
 case BT_REAL:
   if (!gfc_boz2real (rhs, lhs->ts.kind))
     return false;
   break;
 default:
   gfc_error ("Invalid use of BOZ literal constant at %L", &rhs->where);
   return false;
 }
    }

  if (lhs->ts.type == BT_CHARACTER && global_options.x_warn_character_truncation)
    {
      long llen = 0, rlen = 0;
      if (lhs->ts.u.cl != 
# 10893 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
     
# 10894 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
    && lhs->ts.u.cl->length != 
# 10894 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null
     
# 10895 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
    && lhs->ts.u.cl->length->expr_type == EXPR_CONSTANT)
 llen = gfc_mpz_get_hwi (lhs->ts.u.cl->length->value.integer);

      if (rhs->expr_type == EXPR_CONSTANT)
  rlen = rhs->value.character.length;

      else if (rhs->ts.u.cl != 
# 10901 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
   
# 10902 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && rhs->ts.u.cl->length != 
# 10902 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             __null
   
# 10903 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && rhs->ts.u.cl->length->expr_type == EXPR_CONSTANT)
 rlen = gfc_mpz_get_hwi (rhs->ts.u.cl->length->value.integer);

      if (rlen && llen && rlen > llen)
 gfc_warning_now (OPT_Wcharacter_truncation,
    "CHARACTER expression will be truncated "
    "in assignment (%ld/%ld) at %L",
    (long) llen, (long) rlen, &code->loc);
    }



  if (lhs->rank)
    {
      for (ref = lhs->ref; ref; ref= ref->next)
 if (ref->type == REF_ARRAY)
   {
     for (n = 0; n < ref->u.ar.dimen; n++)
       if (ref->u.ar.dimen_type[n] == DIMEN_VECTOR
    && gfc_find_sym_in_expr (lhs->symtree->n.sym,
        ref->u.ar.start[n]))
  ref->u.ar.start[n]
   = gfc_get_parentheses (ref->u.ar.start[n]);
   }
    }

  if (gfc_pure (
# 10929 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null
# 10929 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   ))
    {
      if (lhs->ts.type == BT_DERIVED
     && lhs->expr_type == EXPR_VARIABLE
     && lhs->ts.u.derived->attr.pointer_comp
     && rhs->expr_type == EXPR_VARIABLE
     && (gfc_impure_variable (rhs->symtree->n.sym)
  || gfc_is_coindexed (rhs)))
 {

   if (gfc_is_coindexed (rhs))
     gfc_error ("Coindexed expression at %L is assigned to "
   "a derived type variable with a POINTER "
   "component in a PURE procedure",
   &rhs->where);
   else

     gfc_error ("In a pure subprogram an INTENT(IN) dummy argument "
   "shall not be used as the expr at %L of an intrinsic "
   "assignment statement in which the variable is of a "
   "derived type if the derived type has a pointer "
   "component at any level of component selection.",
   &rhs->where);
   return rval;
 }


      if (gfc_is_coindexed (lhs))
 {
   gfc_error ("Assignment to coindexed variable at %L in a PURE "
       "procedure", &rhs->where);
   return rval;
 }
    }

  if (gfc_implicit_pure (
# 10964 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 10964 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            ))
    {
      if (lhs->expr_type == EXPR_VARIABLE
     && lhs->symtree->n.sym != gfc_current_ns->proc_name
     && lhs->symtree->n.sym->ns != gfc_current_ns)
 gfc_unset_implicit_pure (
# 10969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 10969 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             );

      if (lhs->ts.type == BT_DERIVED
     && lhs->expr_type == EXPR_VARIABLE
     && lhs->ts.u.derived->attr.pointer_comp
     && rhs->expr_type == EXPR_VARIABLE
     && (gfc_impure_variable (rhs->symtree->n.sym)
  || gfc_is_coindexed (rhs)))
 gfc_unset_implicit_pure (
# 10977 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 10977 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             );


      if (gfc_is_coindexed (lhs))
 gfc_unset_implicit_pure (
# 10981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                         __null
# 10981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             );
    }


  attr = gfc_expr_attr (lhs);
  if (lhs->ts.type == BT_CLASS && attr.allocatable)
    {
      if (attr.codimension)
 {
   gfc_error ("Assignment to polymorphic coarray at %L is not "
       "permitted", &lhs->where);
   return false;
 }
      if (!gfc_notify_std ((1<<7), "Assignment to an allocatable "
      "polymorphic variable at %L", &lhs->where))
 return false;
      if (!global_options.x_flag_realloc_lhs)
 {
   gfc_error ("Assignment to an allocatable polymorphic variable at %L "
       "requires %<-frealloc-lhs%>", &lhs->where);
   return false;
 }
    }
  else if (lhs->ts.type == BT_CLASS)
    {
      gfc_error ("Nonallocatable variable must not be polymorphic in intrinsic "
   "assignment at %L - check that there is a matching specific "
   "subroutine for '=' operator", &lhs->where);
      return false;
    }

  bool lhs_coindexed = gfc_is_coindexed (lhs);


  if (lhs_coindexed && gfc_has_ultimate_allocatable (lhs))
    {
      gfc_error ("Coindexed variable must not have an allocatable ultimate "
   "component in assignment at %L", &lhs->where);
      return false;
    }


  if (lhs->ts.type == BT_DERIVED
      && rhs->ts.type == BT_CLASS
      && rhs->expr_type != EXPR_ARRAY)
    gfc_add_component_ref(rhs,"_data");



  if ((lhs != 
# 11030 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __null 
# 11030 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && lhs->ts.type == BT_CLASS && lhs->ts.u.derived->components && lhs->ts.u.derived->components->ts.u.derived && lhs->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic) && lhs->rank && rhs->ts.type != BT_CLASS)
    gfc_find_vtab (&rhs->ts);

  bool caf_convert_to_send = global_options.x_flag_coarray == GFC_FCOARRAY_LIB
      && (lhs_coindexed
   || (code->expr2->expr_type == EXPR_FUNCTION
       && code->expr2->value.function.isym
       && code->expr2->value.function.isym->id == GFC_ISYM_CAF_GET
       && (code->expr1->rank == 0 || code->expr2->rank != 0)
       && !gfc_expr_attr (rhs).allocatable
       && !gfc_has_vector_subscript (rhs)));

  gfc_check_assign (lhs, rhs, 1, !caf_convert_to_send);







  if (caf_convert_to_send)
    {
      if (code->expr2->expr_type == EXPR_FUNCTION
   && code->expr2->value.function.isym
   && code->expr2->value.function.isym->id == GFC_ISYM_CAF_GET)
 remove_caf_get_intrinsic (code->expr2);
      code->op = EXEC_CALL;
      gfc_get_sym_tree ("_F." "caf_send", ns, &code->symtree, true);
      code->resolved_sym = code->symtree->n.sym;
      code->resolved_sym->attr.flavor = FL_PROCEDURE;
      code->resolved_sym->attr.intrinsic = 1;
      code->resolved_sym->attr.subroutine = 1;
      code->resolved_isym = gfc_intrinsic_subroutine_by_id (GFC_ISYM_CAF_SEND);
      gfc_commit_symbol (code->resolved_sym);
      code->ext.actual = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
      code->ext.actual->expr = lhs;
      code->ext.actual->next = ((gfc_actual_arglist *) xcalloc (1, sizeof (gfc_actual_arglist)));
      code->ext.actual->next->expr = rhs;
      code->expr1 = 
# 11068 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 11068 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;
      code->expr2 = 
# 11069 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 11069 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;
    }

  return false;
}




static void
add_comp_ref (gfc_expr *e, gfc_component *c)
{
  gfc_ref **ref;
  ref = &(e->ref);
  while (*ref)
    ref = &((*ref)->next);
  *ref = ((gfc_ref *) xcalloc (1, sizeof (gfc_ref)));
  (*ref)->type = REF_COMPONENT;
  (*ref)->u.c.sym = e->ts.u.derived;
  (*ref)->u.c.component = c;
  e->ts = c->ts;


  if (c->as)
    {
      gfc_add_full_array_ref (e, c->as);
      e->rank = c->as->rank;
    }
}





static gfc_code *
build_assignment (gfc_exec_op op, gfc_expr *expr1, gfc_expr *expr2,
    gfc_component *comp1, gfc_component *comp2, locus loc)
{
  gfc_code *this_code;

  this_code = gfc_get_code (op);
  this_code->next = 
# 11110 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 11110 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;
  this_code->expr1 = gfc_copy_expr (expr1);
  this_code->expr2 = gfc_copy_expr (expr2);
  this_code->loc = loc;
  if (comp1 && comp2)
    {
      add_comp_ref (this_code->expr1, comp1);
      add_comp_ref (this_code->expr2, comp2);
    }

  return this_code;
}





static gfc_expr*
get_temp_from_expr (gfc_expr *e, gfc_namespace *ns)
{
  static int serial = 0;
  char name[63];
  gfc_symtree *tmp;
  gfc_array_spec *as;
  gfc_array_ref *aref;
  gfc_ref *ref;

  sprintf (name, "_F." "DA%d", serial++);
  gfc_get_sym_tree (name, ns, &tmp, false);
  gfc_add_type (tmp->n.sym, &e->ts, 
# 11139 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                   __null
# 11139 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                       );

  if (e->expr_type == EXPR_CONSTANT && e->ts.type == BT_CHARACTER)
    tmp->n.sym->ts.u.cl->length = gfc_get_int_expr (gfc_charlen_int_kind,
          
# 11143 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null
# 11143 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             ,
          e->value.character.length);

  as = 
# 11146 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __null
# 11146 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          ;
  ref = 
# 11147 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       __null
# 11147 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           ;
  aref = 
# 11148 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 11148 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;


   if (e->rank && e->expr_type != EXPR_ARRAY
       && e->expr_type != EXPR_FUNCTION
       && e->expr_type != EXPR_OP)
    {
      aref = gfc_find_array_ref (e);
      if (e->expr_type == EXPR_VARIABLE
   && e->symtree->n.sym->as == aref->as)
 as = aref->as;
      else
 {
   for (ref = e->ref; ref; ref = ref->next)
     if (ref->type == REF_COMPONENT
  && ref->u.c.component->as == aref->as)
       {
  as = aref->as;
  break;
       }
 }
    }


  tmp->n.sym->attr = gfc_expr_attr (e);
  tmp->n.sym->attr.function = 0;
  tmp->n.sym->attr.result = 0;
  tmp->n.sym->attr.flavor = FL_VARIABLE;
  tmp->n.sym->attr.dummy = 0;
  tmp->n.sym->attr.intent = INTENT_UNKNOWN;

  if (as)
    {
      tmp->n.sym->as = gfc_copy_array_spec (as);
      if (!ref)
 ref = e->ref;
      if (as->type == AS_DEFERRED)
 tmp->n.sym->attr.allocatable = 1;
    }
  else if (e->rank && (e->expr_type == EXPR_ARRAY
         || e->expr_type == EXPR_FUNCTION
         || e->expr_type == EXPR_OP))
    {
      tmp->n.sym->as = ((gfc_array_spec *) xcalloc (1, sizeof (gfc_array_spec)));
      tmp->n.sym->as->type = AS_DEFERRED;
      tmp->n.sym->as->rank = e->rank;
      tmp->n.sym->attr.allocatable = 1;
      tmp->n.sym->attr.dimension = 1;
    }
  else
    tmp->n.sym->attr.dimension = 0;

  gfc_set_sym_referenced (tmp->n.sym);
  gfc_commit_symbol (tmp->n.sym);
  e = gfc_lval_expr_from_sym (tmp->n.sym);



  if (aref && aref->type != AR_FULL)
    {
      gfc_free_ref_list (e->ref);
      e->ref = gfc_copy_ref (ref);
    }
  return e;
}





static void
add_code_to_chain (gfc_code **this_code, gfc_code **head, gfc_code **tail)
{
  ((void)(!(this_code) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 11221, __FUNCTION__), 0 : 0));
  if (*head == 
# 11222 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 11222 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
    *head = *tail = *this_code;
  else
    *tail = gfc_append_code (*tail, *this_code);
  *this_code = 
# 11226 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 11226 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  ;
}





static int
nonscalar_typebound_assign (gfc_symbol *derived, int depth)
{
  gfc_component *c;
  int c_depth = 0, t_depth;

  for (c= derived->components; c; c = c->next)
    {
      if ((!((c->ts.type) == BT_DERIVED || (c->ts.type) == BT_UNION)
     || c->attr.pointer
     || c->attr.allocatable
     || c->attr.proc_pointer_comp
     || c->attr.class_pointer
     || c->attr.proc_pointer)
   && !c->attr.defined_assign_comp)
 continue;

      if (c->as && c_depth == 0)
 c_depth = 1;

      if (c->ts.u.derived->attr.defined_assign_comp)
 t_depth = nonscalar_typebound_assign (c->ts.u.derived,
           c->as ? 1 : 0);
      else
 t_depth = 0;

      c_depth = t_depth > c_depth ? t_depth : c_depth;
    }
  return depth + c_depth;
}
# 11311 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static int component_assignment_level = 0;
static gfc_code *tmp_head = 
# 11312 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 11312 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               , *tmp_tail = 
# 11312 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                             __null
# 11312 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                 ;

static void
generate_component_assignments (gfc_code **code, gfc_namespace *ns)
{
  gfc_component *comp1, *comp2;
  gfc_code *this_code = 
# 11318 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 11318 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           , *head = 
# 11318 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                     __null
# 11318 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                         , *tail = 
# 11318 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                   __null
# 11318 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                       ;
  gfc_expr *t1;
  int error_count, depth;

  gfc_get_errors (
# 11322 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 11322 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     , &error_count);


  if (error_count
      || (*code)->expr1->ts.type != BT_DERIVED
      || (*code)->expr2->ts.type != BT_DERIVED)
    return;


  depth = nonscalar_typebound_assign ((*code)->expr1->ts.u.derived,
          (*code)->expr1->rank ? 1 : 0);
  if (depth > 1)
    {
      gfc_warning (0, "TODO: type-bound defined assignment(s) at %L not "
     "done because multiple part array references would "
     "occur in intermediate expressions.", &(*code)->loc);
      return;
    }

  component_assignment_level++;


  if ((*code)->expr2->expr_type != EXPR_VARIABLE
      && (*code)->expr2->expr_type != EXPR_CONSTANT)
    {
      gfc_expr *tmp_expr;


      tmp_expr = get_temp_from_expr ((*code)->expr1, ns);
      this_code = build_assignment (EXEC_ASSIGN,
        tmp_expr, (*code)->expr2,
        
# 11353 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       __null
# 11353 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           , 
# 11353 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 11353 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 , (*code)->loc);

      add_code_to_chain (&this_code, &tmp_head, &tmp_tail);
      gfc_free_expr ((*code)->expr2);
      (*code)->expr2 = tmp_expr;
    }




  if ((*code)->expr1->symtree->n.sym->name[2] != '@')
    {
      this_code = build_assignment (EXEC_ASSIGN,
        (*code)->expr1, (*code)->expr2,
        
# 11367 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       __null
# 11367 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           , 
# 11367 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 11367 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 , (*code)->loc);
      add_code_to_chain (&this_code, &head, &tail);
    }

  comp1 = (*code)->expr1->ts.u.derived->components;
  comp2 = (*code)->expr2->ts.u.derived->components;

  t1 = 
# 11374 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __null
# 11374 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          ;
  for (; comp1; comp1 = comp1->next, comp2 = comp2->next)
    {
      bool inout = false;



      if (!((comp1->ts.type) == BT_DERIVED || (comp1->ts.type) == BT_UNION)
   || comp1->attr.pointer
   || comp1->attr.allocatable
   || comp1->attr.proc_pointer_comp
   || comp1->attr.class_pointer
   || comp1->attr.proc_pointer)
 continue;


      this_code = build_assignment (EXEC_ASSIGN,
        (*code)->expr1, (*code)->expr2,
        comp1, comp2, (*code)->loc);




      gfc_resolve_code (this_code, ns);

      if (this_code->op == EXEC_ASSIGN_CALL)
 {
   gfc_formal_arglist *dummy_args;
   gfc_symbol *rsym;





   if (!(comp1->ts.u.derived->f2k_derived
  && comp1->ts.u.derived->f2k_derived
     ->tb_op[INTRINSIC_ASSIGN]))
     {
       gfc_free_statements (this_code);
       this_code = 
# 11413 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 11413 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;
       continue;
     }



   rsym = this_code->resolved_sym;
   dummy_args = gfc_sym_get_dummy_args (rsym);
   if (dummy_args
       && dummy_args->sym->attr.intent == INTENT_INOUT)
     {
       gfc_code *temp_code;
       inout = true;



       if (!t1)
  {
    t1 = get_temp_from_expr ((*code)->expr1, ns);
    temp_code = build_assignment (EXEC_ASSIGN,
      t1, (*code)->expr1,
    
# 11434 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __null
# 11434 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       , 
# 11434 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null
# 11434 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             , (*code)->loc);




    if ((*code)->expr1->symtree->n.sym->attr.allocatable)
      {
        gfc_code *block;
        gfc_expr *e =
   gfc_lval_expr_from_sym ((*code)->expr1->symtree->n.sym);
        block = gfc_get_code (EXEC_IF);
        block->block = gfc_get_code (EXEC_IF);
        block->block->expr1
     = gfc_build_intrinsic_call (ns,
        GFC_ISYM_ALLOCATED, "allocated",
        (*code)->loc, 1, e);
        block->block->next = temp_code;
        temp_code = block;
      }
    add_code_to_chain (&temp_code, &tmp_head, &tmp_tail);
  }



       gfc_free_expr (this_code->ext.actual->expr);
       this_code->ext.actual->expr = gfc_copy_expr (t1);
       add_comp_ref (this_code->ext.actual->expr, comp1);




       if ((*code)->expr1->symtree->n.sym->attr.allocatable
    && gfc_expr_attr ((*code)->expr1).allocatable)
  {
    gfc_code *block;
    gfc_expr *cond;

    cond = gfc_get_expr ();
    cond->ts.type = BT_LOGICAL;
    cond->ts.kind = gfc_default_logical_kind;
    cond->expr_type = EXPR_OP;
    cond->where = (*code)->loc;
    cond->value.op.op = INTRINSIC_NOT;
    cond->value.op.op1 = gfc_build_intrinsic_call (ns,
       GFC_ISYM_ALLOCATED, "allocated",
       (*code)->loc, 1, gfc_copy_expr (t1));
    block = gfc_get_code (EXEC_IF);
    block->block = gfc_get_code (EXEC_IF);
    block->block->expr1 = cond;
    block->block->next = build_assignment (EXEC_POINTER_ASSIGN,
     t1, (*code)->expr1,
     
# 11485 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
    __null
# 11485 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        , 
# 11485 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 11485 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              , (*code)->loc);
    add_code_to_chain (&block, &head, &tail);
  }
     }
 }
      else if (this_code->op == EXEC_ASSIGN && !this_code->next)
 {


   gfc_free_statements (this_code);
   this_code = 
# 11495 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 11495 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  ;
   continue;
 }

      add_code_to_chain (&this_code, &head, &tail);

      if (t1 && inout)
 {

   this_code = build_assignment (EXEC_ASSIGN,
     (*code)->expr1, t1,
     comp1, comp2, (*code)->loc);
   add_code_to_chain (&this_code, &head, &tail);
 }
    }


  if (tmp_head && component_assignment_level == 1)
    {
      gfc_append_code (tmp_head, head);
      head = tmp_head;
      tmp_head = tmp_tail = 
# 11516 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 11516 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;
    }



  if (t1 && (*code)->expr1->symtree->n.sym->attr.allocatable
      && gfc_expr_attr ((*code)->expr1).allocatable)
    {
      gfc_code *block;
      gfc_expr *cond;
      gfc_expr *e;

      e = gfc_lval_expr_from_sym ((*code)->expr1->symtree->n.sym);
      cond = gfc_build_intrinsic_call (ns, GFC_ISYM_ASSOCIATED, "associated",
           (*code)->loc, 2, gfc_copy_expr (t1), e);
      block = gfc_get_code (EXEC_IF);
      block->block = gfc_get_code (EXEC_IF);
      block->block->expr1 = cond;
      block->block->next = build_assignment (EXEC_POINTER_ASSIGN,
     t1, gfc_get_null_expr (&(*code)->loc),
     
# 11536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
    __null
# 11536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        , 
# 11536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 11536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              , (*code)->loc);
      gfc_append_code (tail, block);
      tail = block;
    }



  ((void)(!((*code)->op == EXEC_ASSIGN) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 11543, __FUNCTION__), 0 : 0));
  tail->next = (*code)->next;


  gfc_free_expr ((*code)->expr1);
  gfc_free_expr ((*code)->expr2);
  **code = *head;
  if (head != tail)
    free (head);
  *code = tail;

  component_assignment_level--;
}
# 11564 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static bool
resolve_ptr_fcn_assign (gfc_code **code, gfc_namespace *ns)
{
  gfc_expr *tmp_ptr_expr;
  gfc_code *this_code;
  gfc_component *comp;
  gfc_symbol *s;

  if ((*code)->expr1->expr_type != EXPR_FUNCTION)
    return false;



  gfc_notify_std ((1<<7), "Pointer procedure assignment at "
    "%L", &(*code)->loc);

  comp = gfc_get_proc_ptr_comp ((*code)->expr1);

  if (comp)
    s = comp->ts.interface;
  else
    s = (*code)->expr1->symtree->n.sym;

  if (s == 
# 11587 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null 
# 11587 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               || !s->result->attr.pointer)
    {
      gfc_error ("The function result on the lhs of the assignment at "
   "%L must have the pointer attribute.",
   &(*code)->expr1->where);
      (*code)->op = EXEC_NOP;
      return false;
    }

  tmp_ptr_expr = get_temp_from_expr ((*code)->expr2, ns);




  tmp_ptr_expr->symtree->n.sym->attr.pointer = 1;
  tmp_ptr_expr->symtree->n.sym->attr.allocatable = 0;
  tmp_ptr_expr->where = (*code)->loc;

  this_code = build_assignment (EXEC_ASSIGN,
    tmp_ptr_expr, (*code)->expr2,
    
# 11607 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __null
# 11607 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       , 
# 11607 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null
# 11607 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             , (*code)->loc);
  this_code->next = (*code)->next;
  (*code)->next = this_code;
  (*code)->op = EXEC_POINTER_ASSIGN;
  (*code)->expr2 = (*code)->expr1;
  (*code)->expr1 = tmp_ptr_expr;

  return true;
}






static bool
deferred_op_assign (gfc_code **code, gfc_namespace *ns)
{
  gfc_expr *tmp_expr;
  gfc_code *this_code;

  if (!((*code)->expr1->ts.type == BT_CHARACTER
  && (*code)->expr1->ts.deferred && (*code)->expr1->rank
  && (*code)->expr2->expr_type == EXPR_OP))
    return false;

  if (!gfc_check_dependency ((*code)->expr1, (*code)->expr2, 1))
    return false;

  if (gfc_expr_attr ((*code)->expr1).pointer)
    return false;

  tmp_expr = get_temp_from_expr ((*code)->expr1, ns);
  tmp_expr->where = (*code)->loc;



  tmp_expr->ts.u.cl = ((gfc_charlen *) xcalloc (1, sizeof (gfc_charlen)));
  tmp_expr->symtree->n.sym->ts.u.cl = tmp_expr->ts.u.cl;
  tmp_expr->ts.u.cl->next = (*code)->expr2->ts.u.cl->next;
  (*code)->expr2->ts.u.cl->next = tmp_expr->ts.u.cl;

  tmp_expr->symtree->n.sym->ts.deferred = 1;

  this_code = build_assignment (EXEC_ASSIGN,
    (*code)->expr1,
    gfc_copy_expr (tmp_expr),
    
# 11654 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __null
# 11654 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       , 
# 11654 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
         __null
# 11654 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             , (*code)->loc);

  (*code)->expr1 = tmp_expr;

  this_code->next = (*code)->next;
  (*code)->next = this_code;

  return true;
}





void
gfc_resolve_code (gfc_code *code, gfc_namespace *ns)
{
  int omp_workshare_save;
  int forall_save, do_concurrent_save;
  code_stack frame;
  bool t;

  frame.prev = cs_base;
  frame.head = code;
  cs_base = &frame;

  find_reachable_labels (code);

  for (; code; code = code->next)
    {
      frame.current = code;
      forall_save = forall_flag;
      do_concurrent_save = gfc_do_concurrent_flag;

      if (code->op == EXEC_FORALL)
 {
   forall_flag = 1;
   gfc_resolve_forall (code, ns, forall_save);
   forall_flag = 2;
 }
      else if (code->block)
 {
   omp_workshare_save = -1;
   switch (code->op)
     {
     case EXEC_OACC_PARALLEL_LOOP:
     case EXEC_OACC_PARALLEL:
     case EXEC_OACC_KERNELS_LOOP:
     case EXEC_OACC_KERNELS:
     case EXEC_OACC_SERIAL_LOOP:
     case EXEC_OACC_SERIAL:
     case EXEC_OACC_DATA:
     case EXEC_OACC_HOST_DATA:
     case EXEC_OACC_LOOP:
       gfc_resolve_oacc_blocks (code, ns);
       break;
     case EXEC_OMP_PARALLEL_WORKSHARE:
       omp_workshare_save = omp_workshare_flag;
       omp_workshare_flag = 1;
       gfc_resolve_omp_parallel_blocks (code, ns);
       break;
     case EXEC_OMP_PARALLEL:
     case EXEC_OMP_PARALLEL_DO:
     case EXEC_OMP_PARALLEL_DO_SIMD:
     case EXEC_OMP_PARALLEL_SECTIONS:
     case EXEC_OMP_TARGET_PARALLEL:
     case EXEC_OMP_TARGET_PARALLEL_DO:
     case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:
     case EXEC_OMP_TARGET_TEAMS:
     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:
     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:
     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:
     case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:
     case EXEC_OMP_TASK:
     case EXEC_OMP_TASKLOOP:
     case EXEC_OMP_TASKLOOP_SIMD:
     case EXEC_OMP_TEAMS:
     case EXEC_OMP_TEAMS_DISTRIBUTE:
     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:
     case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:
     case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:
       omp_workshare_save = omp_workshare_flag;
       omp_workshare_flag = 0;
       gfc_resolve_omp_parallel_blocks (code, ns);
       break;
     case EXEC_OMP_DISTRIBUTE:
     case EXEC_OMP_DISTRIBUTE_SIMD:
     case EXEC_OMP_DO:
     case EXEC_OMP_DO_SIMD:
     case EXEC_OMP_SIMD:
     case EXEC_OMP_TARGET_SIMD:
       gfc_resolve_omp_do_blocks (code, ns);
       break;
     case EXEC_SELECT_TYPE:


       break;
            case EXEC_DO_CONCURRENT:
       gfc_do_concurrent_flag = 1;
       gfc_resolve_blocks (code->block, ns);
       gfc_do_concurrent_flag = 2;
       break;
     case EXEC_OMP_WORKSHARE:
       omp_workshare_save = omp_workshare_flag;
       omp_workshare_flag = 1;

     default:
       gfc_resolve_blocks (code->block, ns);
       break;
     }

   if (omp_workshare_save != -1)
     omp_workshare_flag = omp_workshare_save;
 }
start:
      t = true;
      if (code->op != EXEC_COMPCALL && code->op != EXEC_CALL_PPC)
 t = gfc_resolve_expr (code->expr1);
      forall_flag = forall_save;
      gfc_do_concurrent_flag = do_concurrent_save;

      if (!gfc_resolve_expr (code->expr2))
 t = false;

      if (code->op == EXEC_ALLOCATE
   && !gfc_resolve_expr (code->expr3))
 t = false;

      switch (code->op)
 {
 case EXEC_NOP:
 case EXEC_END_BLOCK:
 case EXEC_END_NESTED_BLOCK:
 case EXEC_CYCLE:
 case EXEC_PAUSE:
 case EXEC_STOP:
 case EXEC_ERROR_STOP:
 case EXEC_EXIT:
 case EXEC_CONTINUE:
 case EXEC_DT_END:
 case EXEC_ASSIGN_CALL:
   break;

 case EXEC_CRITICAL:
   resolve_critical (code);
   break;

 case EXEC_SYNC_ALL:
 case EXEC_SYNC_IMAGES:
 case EXEC_SYNC_MEMORY:
   resolve_sync (code);
   break;

 case EXEC_LOCK:
 case EXEC_UNLOCK:
 case EXEC_EVENT_POST:
 case EXEC_EVENT_WAIT:
   resolve_lock_unlock_event (code);
   break;

 case EXEC_FAIL_IMAGE:
 case EXEC_FORM_TEAM:
 case EXEC_CHANGE_TEAM:
 case EXEC_END_TEAM:
 case EXEC_SYNC_TEAM:
   break;

 case EXEC_ENTRY:

   current_entry_id = code->ext.entry->id;
   break;

 case EXEC_WHERE:
   resolve_where (code, 
# 11827 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 11827 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           );
   break;

 case EXEC_GOTO:
   if (code->expr1 != 
# 11831 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 11831 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
     {
       if (code->expr1->expr_type != EXPR_VARIABLE
    || code->expr1->ts.type != BT_INTEGER
    || (code->expr1->ref
        && code->expr1->ref->type == REF_ARRAY)
    || code->expr1->symtree == 
# 11837 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
    
# 11838 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
   || (code->expr1->symtree->n.sym
        && (code->expr1->symtree->n.sym->attr.flavor
     == FL_PARAMETER)))
  gfc_error ("ASSIGNED GOTO statement at %L requires a "
      "scalar INTEGER variable", &code->expr1->where);
       else if (code->expr1->symtree->n.sym
         && code->expr1->symtree->n.sym->attr.assign != 1)
  gfc_error ("Variable %qs has not been assigned a target "
      "label at %L", code->expr1->symtree->n.sym->name,
      &code->expr1->where);
     }
   else
     resolve_branch (code->label1, code);
   break;

 case EXEC_RETURN:
   if (code->expr1 != 
# 11854 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
  
# 11855 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
 && (code->expr1->ts.type != BT_INTEGER || code->expr1->rank))
     gfc_error ("Alternate RETURN statement at %L requires a SCALAR-"
         "INTEGER return specifier", &code->expr1->where);
   break;

 case EXEC_INIT_ASSIGN:
 case EXEC_END_PROCEDURE:
   break;

 case EXEC_ASSIGN:
   if (!t)
     break;



   if (code->expr1->expr_type == EXPR_FUNCTION
       && code->expr1->value.function.isym
       && code->expr1->value.function.isym->id == GFC_ISYM_CAF_GET)
     remove_caf_get_intrinsic (code->expr1);





   if (resolve_ptr_fcn_assign (&code, ns)
       || code->op == EXEC_NOP)
     goto start;

   if (!gfc_check_vardef_context (code->expr1, false, false, false,
      gettext ("assignment")))
     break;

   if (resolve_ordinary_assign (code, ns))
     {
       if (code->op == EXEC_COMPCALL)
  goto compcall;
       else
  goto call;
     }



   if (code->op == EXEC_ASSIGN && deferred_op_assign (&code, ns))
     break;


   if (code->op != EXEC_CALL && code->expr1->ts.type == BT_DERIVED
       && code->expr1->ts.u.derived
       && code->expr1->ts.u.derived->attr.defined_assign_comp)
     generate_component_assignments (&code, ns);

   break;

 case EXEC_LABEL_ASSIGN:
   if (code->label1->defined == ST_LABEL_UNKNOWN)
     gfc_error ("Label %d referenced at %L is never defined",
         code->label1->value, &code->label1->where);
   if (t
       && (code->expr1->expr_type != EXPR_VARIABLE
    || code->expr1->symtree->n.sym->ts.type != BT_INTEGER
    || code->expr1->symtree->n.sym->ts.kind
       != gfc_default_integer_kind
    || code->expr1->symtree->n.sym->attr.flavor == FL_PARAMETER
    || code->expr1->symtree->n.sym->as != 
# 11918 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
# 11918 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                             ))
     gfc_error ("ASSIGN statement at %L requires a scalar "
         "default INTEGER variable", &code->expr1->where);
   break;

 case EXEC_POINTER_ASSIGN:
   {
     gfc_expr* e;

     if (!t)
       break;





     e = remove_last_array_ref (code->expr1);
     t = gfc_check_vardef_context (e, true, false, false,
       gettext ("pointer assignment"));
     if (t)
       t = gfc_check_vardef_context (e, false, false, false,
         gettext ("pointer assignment"));
     gfc_free_expr (e);

     t = gfc_check_pointer_assign (code->expr1, code->expr2, !t) && t;

     if (!t)
       break;


     if (code->expr2->ts.type == BT_CLASS
  && code->expr1->ts.type == BT_CLASS
  && !code->expr2->ts.u.derived->components->attr.dimension
  && !(gfc_expr_attr (code->expr1).proc_pointer
       && code->expr2->expr_type == EXPR_VARIABLE
       && code->expr2->symtree->n.sym->attr.flavor
   == FL_PROCEDURE))
       code->op = EXEC_ASSIGN;
     break;
   }

 case EXEC_ARITHMETIC_IF:
   {
     gfc_expr *e = code->expr1;

     gfc_resolve_expr (e);
     if (e->expr_type == EXPR_NULL)
       gfc_error ("Invalid NULL at %L", &e->where);

     if (t && (e->rank > 0
        || !(e->ts.type == BT_REAL || e->ts.type == BT_INTEGER)))
       gfc_error ("Arithmetic IF statement at %L requires a scalar "
    "REAL or INTEGER expression", &e->where);

     resolve_branch (code->label1, code);
     resolve_branch (code->label2, code);
     resolve_branch (code->label3, code);
   }
   break;

 case EXEC_IF:
   if (t && code->expr1 != 
# 11979 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
       
# 11980 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && (code->expr1->ts.type != BT_LOGICAL
    || code->expr1->rank != 0))
     gfc_error ("IF clause at %L requires a scalar LOGICAL expression",
         &code->expr1->where);
   break;

 case EXEC_CALL:
 call:
   resolve_call (code);
   break;

 case EXEC_COMPCALL:
 compcall:
   resolve_typebound_subroutine (code);
   break;

 case EXEC_CALL_PPC:
   resolve_ppc_call (code);
   break;

 case EXEC_SELECT:


   resolve_select (code, false);
   break;

 case EXEC_SELECT_TYPE:
   resolve_select_type (code, ns);
   break;

 case EXEC_SELECT_RANK:
   resolve_select_rank (code, ns);
   break;

 case EXEC_BLOCK:
   resolve_block_construct (code);
   break;

 case EXEC_DO:
   if (code->ext.iterator != 
# 12019 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
# 12019 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                )
     {
       gfc_iterator *iter = code->ext.iterator;
       if (gfc_resolve_iterator (iter, true, false))
  gfc_resolve_do_iterator (code, iter->var->symtree->n.sym,
      true);
     }
   break;

 case EXEC_DO_WHILE:
   if (code->expr1 == 
# 12029 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 12029 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
     gfc_internal_error ("gfc_resolve_code(): No expression on "
    "DO WHILE");
   if (t
       && (code->expr1->rank != 0
    || code->expr1->ts.type != BT_LOGICAL))
     gfc_error ("Exit condition of DO WHILE loop at %L must be "
         "a scalar LOGICAL expression", &code->expr1->where);
   break;

 case EXEC_ALLOCATE:
   if (t)
     resolve_allocate_deallocate (code, "ALLOCATE");

   break;

 case EXEC_DEALLOCATE:
   if (t)
     resolve_allocate_deallocate (code, "DEALLOCATE");

   break;

 case EXEC_OPEN:
   if (!gfc_resolve_open (code->ext.open, &code->loc))
     break;

   resolve_branch (code->ext.open->err, code);
   break;

 case EXEC_CLOSE:
   if (!gfc_resolve_close (code->ext.close, &code->loc))
     break;

   resolve_branch (code->ext.close->err, code);
   break;

 case EXEC_BACKSPACE:
 case EXEC_ENDFILE:
 case EXEC_REWIND:
 case EXEC_FLUSH:
   if (!gfc_resolve_filepos (code->ext.filepos, &code->loc))
     break;

   resolve_branch (code->ext.filepos->err, code);
   break;

 case EXEC_INQUIRE:
   if (!gfc_resolve_inquire (code->ext.inquire))
       break;

   resolve_branch (code->ext.inquire->err, code);
   break;

 case EXEC_IOLENGTH:
   ((void)(!(code->ext.inquire != 
# 12083 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __null
# 12083 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 12083, __FUNCTION__), 0 : 0));
   if (!gfc_resolve_inquire (code->ext.inquire))
     break;

   resolve_branch (code->ext.inquire->err, code);
   break;

 case EXEC_WAIT:
   if (!gfc_resolve_wait (code->ext.wait))
     break;

   resolve_branch (code->ext.wait->err, code);
   resolve_branch (code->ext.wait->end, code);
   resolve_branch (code->ext.wait->eor, code);
   break;

 case EXEC_READ:
 case EXEC_WRITE:
   if (!gfc_resolve_dt (code, code->ext.dt, &code->loc))
     break;

   resolve_branch (code->ext.dt->err, code);
   resolve_branch (code->ext.dt->end, code);
   resolve_branch (code->ext.dt->eor, code);
   break;

 case EXEC_TRANSFER:
   resolve_transfer (code);
   break;

 case EXEC_DO_CONCURRENT:
 case EXEC_FORALL:
   resolve_forall_iterators (code->ext.forall_iterator);

   if (code->expr1 != 
# 12117 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
       
# 12118 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && (code->expr1->ts.type != BT_LOGICAL || code->expr1->rank))
     gfc_error ("FORALL mask clause at %L requires a scalar LOGICAL "
         "expression", &code->expr1->where);
   break;

 case EXEC_OACC_PARALLEL_LOOP:
 case EXEC_OACC_PARALLEL:
 case EXEC_OACC_KERNELS_LOOP:
 case EXEC_OACC_KERNELS:
 case EXEC_OACC_SERIAL_LOOP:
 case EXEC_OACC_SERIAL:
 case EXEC_OACC_DATA:
 case EXEC_OACC_HOST_DATA:
 case EXEC_OACC_LOOP:
 case EXEC_OACC_UPDATE:
 case EXEC_OACC_WAIT:
 case EXEC_OACC_CACHE:
 case EXEC_OACC_ENTER_DATA:
 case EXEC_OACC_EXIT_DATA:
 case EXEC_OACC_ATOMIC:
 case EXEC_OACC_DECLARE:
   gfc_resolve_oacc_directive (code, ns);
   break;

 case EXEC_OMP_ATOMIC:
 case EXEC_OMP_BARRIER:
 case EXEC_OMP_CANCEL:
 case EXEC_OMP_CANCELLATION_POINT:
 case EXEC_OMP_CRITICAL:
 case EXEC_OMP_FLUSH:
 case EXEC_OMP_DISTRIBUTE:
 case EXEC_OMP_DISTRIBUTE_PARALLEL_DO:
 case EXEC_OMP_DISTRIBUTE_PARALLEL_DO_SIMD:
 case EXEC_OMP_DISTRIBUTE_SIMD:
 case EXEC_OMP_DO:
 case EXEC_OMP_DO_SIMD:
 case EXEC_OMP_MASTER:
 case EXEC_OMP_ORDERED:
 case EXEC_OMP_SECTIONS:
 case EXEC_OMP_SIMD:
 case EXEC_OMP_SINGLE:
 case EXEC_OMP_TARGET:
 case EXEC_OMP_TARGET_DATA:
 case EXEC_OMP_TARGET_ENTER_DATA:
 case EXEC_OMP_TARGET_EXIT_DATA:
 case EXEC_OMP_TARGET_PARALLEL:
 case EXEC_OMP_TARGET_PARALLEL_DO:
 case EXEC_OMP_TARGET_PARALLEL_DO_SIMD:
 case EXEC_OMP_TARGET_SIMD:
 case EXEC_OMP_TARGET_TEAMS:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:
 case EXEC_OMP_TARGET_TEAMS_DISTRIBUTE_SIMD:
 case EXEC_OMP_TARGET_UPDATE:
 case EXEC_OMP_TASK:
 case EXEC_OMP_TASKGROUP:
 case EXEC_OMP_TASKLOOP:
 case EXEC_OMP_TASKLOOP_SIMD:
 case EXEC_OMP_TASKWAIT:
 case EXEC_OMP_TASKYIELD:
 case EXEC_OMP_TEAMS:
 case EXEC_OMP_TEAMS_DISTRIBUTE:
 case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO:
 case EXEC_OMP_TEAMS_DISTRIBUTE_PARALLEL_DO_SIMD:
 case EXEC_OMP_TEAMS_DISTRIBUTE_SIMD:
 case EXEC_OMP_WORKSHARE:
   gfc_resolve_omp_directive (code, ns);
   break;

 case EXEC_OMP_PARALLEL:
 case EXEC_OMP_PARALLEL_DO:
 case EXEC_OMP_PARALLEL_DO_SIMD:
 case EXEC_OMP_PARALLEL_SECTIONS:
 case EXEC_OMP_PARALLEL_WORKSHARE:
   omp_workshare_save = omp_workshare_flag;
   omp_workshare_flag = 0;
   gfc_resolve_omp_directive (code, ns);
   omp_workshare_flag = omp_workshare_save;
   break;

 default:
   gfc_internal_error ("gfc_resolve_code(): Bad statement code");
 }
    }

  cs_base = frame.prev;
}





static void
resolve_values (gfc_symbol *sym)
{
  bool t;

  if (sym->value == 
# 12216 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 12216 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       )
    return;

  if (sym->value->expr_type == EXPR_STRUCTURE)
    t= resolve_structure_cons (sym->value, 1);
  else
    t = gfc_resolve_expr (sym->value);

  if (!t)
    return;

  gfc_check_assign_symbol (sym, 
# 12227 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null
# 12227 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                   , sym->value);
}





static void
resolve_bind_c_derived_types (gfc_symbol *derived_sym)
{
  if (derived_sym != 
# 12237 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null 
# 12237 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         && derived_sym->attr.flavor == FL_DERIVED
      && derived_sym->attr.is_bind_c == 1)
    verify_bind_c_derived_type (derived_sym);

  return;
}






static void
gfc_verify_DTIO_procedures (gfc_symbol *sym)
{
  if (!sym || sym->attr.flavor != FL_DERIVED)
    return;

  gfc_check_dtio_interfaces (sym);

  return;
}





static void
gfc_verify_binding_labels (gfc_symbol *sym)
{
  gfc_gsymbol *gsym;
  const char *module;

  if (!sym || !sym->attr.is_bind_c || sym->attr.is_iso_c
      || sym->attr.flavor == FL_DERIVED || !sym->binding_label)
    return;

  gsym = gfc_find_case_gsymbol (gfc_gsym_root, sym->binding_label);

  if (sym->module)
    module = sym->module;
  else if (sym->ns && sym->ns->proc_name
    && sym->ns->proc_name->attr.flavor == FL_MODULE)
    module = sym->ns->proc_name->name;
  else if (sym->ns && sym->ns->parent
    && sym->ns && sym->ns->parent->proc_name
    && sym->ns->parent->proc_name->attr.flavor == FL_MODULE)
    module = sym->ns->parent->proc_name->name;
  else
    module = 
# 12286 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 12286 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                ;

  if (!gsym
      || (!gsym->defined
   && (gsym->type == GSYM_FUNCTION || gsym->type == GSYM_SUBROUTINE)))
    {
      if (!gsym)
 gsym = gfc_get_gsymbol (sym->binding_label, true);
      gsym->where = sym->declared_at;
      gsym->sym_name = sym->name;
      gsym->binding_label = sym->binding_label;
      gsym->ns = sym->ns;
      gsym->mod_name = module;
      if (sym->attr.function)
        gsym->type = GSYM_FUNCTION;
      else if (sym->attr.subroutine)
 gsym->type = GSYM_SUBROUTINE;

      gsym->defined = sym->attr.if_source != IFSRC_IFBODY;
      return;
    }

  if (sym->attr.flavor == FL_VARIABLE && gsym->type != GSYM_UNKNOWN)
    {
      gfc_error ("Variable %qs with binding label %qs at %L uses the same global "
   "identifier as entity at %L", sym->name,
   sym->binding_label, &sym->declared_at, &gsym->where);

      sym->binding_label = 
# 12314 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 12314 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;
      return;
    }

  if (sym->attr.flavor == FL_VARIABLE && module
      && (strcmp (module, gsym->mod_name) != 0
   || strcmp (sym->name, gsym->sym_name) != 0))
    {


      gfc_error ("Variable %qs from module %qs with binding label %qs at %L "
   "uses the same global identifier as entity at %L from module %qs",
   sym->name, module, sym->binding_label,
   &sym->declared_at, &gsym->where, gsym->mod_name);
      sym->binding_label = 
# 12328 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 12328 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;
      return;
    }

  if ((sym->attr.function || sym->attr.subroutine)
      && ((gsym->type != GSYM_SUBROUTINE && gsym->type != GSYM_FUNCTION)
    || (gsym->defined && sym->attr.if_source != IFSRC_IFBODY))
      && (sym != gsym->ns->proc_name && sym->attr.entry == 0)
      && (module != gsym->mod_name
   || strcmp (gsym->sym_name, sym->name) != 0
   || (module && strcmp (module, gsym->mod_name) != 0)))
    {



      gfc_error ("Procedure %qs with binding label %qs at %L uses the same "
   "global identifier as entity at %L", sym->name,
   sym->binding_label, &sym->declared_at, &gsym->where);
      sym->binding_label = 
# 12346 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null
# 12346 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                              ;
    }
}




static bool
resolve_index_expr (gfc_expr *e)
{
  if (!gfc_resolve_expr (e))
    return false;

  if (!gfc_simplify_expr (e, 0))
    return false;

  if (!gfc_specification_expr (e))
    return false;

  return true;
}




static bool
resolve_charlen (gfc_charlen *cl)
{
  int k;
  bool saved_specification_expr;

  if (cl->resolved)
    return true;

  cl->resolved = 1;
  saved_specification_expr = specification_expr;
  specification_expr = true;

  if (cl->length_from_typespec)
    {
      if (!gfc_resolve_expr (cl->length))
 {
   specification_expr = saved_specification_expr;
   return false;
 }

      if (!gfc_simplify_expr (cl->length, 0))
 {
   specification_expr = saved_specification_expr;
   return false;
 }


      if (cl->length->ts.type != BT_INTEGER || cl->length->rank != 0)
 {
   gfc_error ("Scalar INTEGER expression expected at %L",
       &cl->length->where);
   return false;
 }
    }
  else
    {
      if (!resolve_index_expr (cl->length))
 {
   specification_expr = saved_specification_expr;
   return false;
 }
    }



  if (cl->length && cl->length->expr_type == EXPR_CONSTANT
      && 
# 12418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ((
# 12418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        cl->length->value.integer
# 12418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size < 0 ? -1 : (
# 12418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        cl->length->value.integer
# 12418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size > 0) 
# 12418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                            < 0)
    gfc_replace_expr (cl->length,
        gfc_get_int_expr (gfc_charlen_int_kind, 
# 12420 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                               __null
# 12420 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                   , 0));


  k = gfc_validate_kind (BT_INTEGER, gfc_charlen_int_kind, false);
  if (cl->length && cl->length->expr_type == EXPR_CONSTANT
      && cl->length->ts.type == BT_INTEGER
      && 
# 12426 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __gmpz_cmp 
# 12426 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                (cl->length->value.integer, gfc_integer_kinds[k].huge) > 0)
    {
      gfc_error ("String length at %L is too large", &cl->length->where);
      specification_expr = saved_specification_expr;
      return false;
    }

  specification_expr = saved_specification_expr;
  return true;
}




static bool
is_non_constant_shape_array (gfc_symbol *sym)
{
  gfc_expr *e;
  int i;
  bool not_constant;

  not_constant = false;
  if (sym->as != 
# 12448 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 12448 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
    {



      for (i = 0; i < sym->as->rank + sym->as->corank; i++)
 {
   if (i == 15)
     break;

   e = sym->as->lower[i];
   if (e && (!resolve_index_expr(e)
      || !gfc_is_constant_expr (e)))
     not_constant = true;
   e = sym->as->upper[i];
   if (e && (!resolve_index_expr(e)
      || !gfc_is_constant_expr (e)))
     not_constant = true;
 }
    }
  return not_constant;
}



static void
build_init_assign (gfc_symbol *sym, gfc_expr *init)
{
  gfc_expr *lval;
  gfc_code *init_st;
  gfc_namespace *ns = sym->ns;



  if (sym->attr.function && sym == sym->result
      && sym->name != sym->ns->proc_name->name)
    {
      ns = ns->contained;
      for (;ns; ns = ns->sibling)
 if (strcmp (ns->proc_name->name, sym->name) == 0)
   break;
    }

  if (ns == 
# 12491 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 12491 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               )
    {
      gfc_free_expr (init);
      return;
    }


  lval = gfc_lval_expr_from_sym (sym);


  init_st = gfc_get_code (EXEC_INIT_ASSIGN);
  init_st->next = ns->code;
  ns->code = init_st;


  init_st->loc = sym->declared_at;
  init_st->expr1 = lval;
  init_st->expr2 = init;
}




static bool
can_generate_init (gfc_symbol *sym)
{
  symbol_attribute *a;
  if (!sym)
    return false;
  a = &sym->attr;


  return !(
       a->allocatable
    || a->external
    || a->pointer
    || (sym->ts.type == BT_CLASS && sym->ts.u.derived->components
        && (sym->ts.u.derived->components->attr.class_pointer
            || sym->ts.u.derived->components->attr.proc_pointer))
    || a->in_equivalence
    || a->in_common
    || a->data
    || sym->module
    || a->cray_pointee
    || a->cray_pointer
    || sym->assoc
    || (!a->referenced && !a->result)
    || (a->dummy && a->intent != INTENT_OUT)
    || (a->function && sym != sym->result)
  );
}




static void
apply_default_init (gfc_symbol *sym)
{
  gfc_expr *init = 
# 12549 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 12549 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;

  if (sym->attr.flavor != FL_VARIABLE && !sym->attr.function)
    return;

  if (sym->ts.type == BT_DERIVED && sym->ts.u.derived)
    init = gfc_generate_initializer (&sym->ts, can_generate_init (sym));

  if (init == 
# 12557 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null 
# 12557 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  && sym->ts.type != BT_CLASS)
    return;

  build_init_assign (sym, init);
  sym->attr.referenced = 1;
}





static gfc_expr *
build_default_init_expr (gfc_symbol *sym)
{

  if (sym->attr.allocatable
      || sym->attr.external
      || sym->attr.dummy
      || sym->attr.pointer
      || sym->attr.in_equivalence
      || sym->attr.in_common
      || sym->attr.data
      || sym->module
      || sym->attr.cray_pointee
      || sym->attr.cray_pointer
      || sym->assoc)
    return 
# 12583 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 12583 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              ;


  return gfc_build_default_init_expr (&sym->ts, &sym->declared_at);
}


static void
apply_default_init_local (gfc_symbol *sym)
{
  gfc_expr *init = 
# 12593 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 12593 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;


  if ((sym->attr.flavor != FL_VARIABLE && !sym->attr.function)
      || (sym->attr.function && sym->result != sym))
    return;



  init = build_default_init_expr (sym);
  if (init == 
# 12603 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 12603 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 )
    return;





  if (!sym->attr.automatic
      && (sym->attr.save || sym->ns->save_all
   || (global_options.x_flag_max_stack_var_size == 0 && !sym->attr.result
       && (sym->ns->proc_name && !sym->ns->proc_name->attr.recursive)
       && (!sym->attr.dimension || !is_non_constant_shape_array (sym)))))
    {

      ((void)(!(sym->value == 
# 12617 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __null
# 12617 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 12617, __FUNCTION__), 0 : 0));
      sym->value = init;
      return;
    }

  build_init_assign (sym, init);
}




static bool
resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)
{
  gfc_array_spec *as;

  if (sym->ts.type == BT_CLASS && sym->attr.class_ok
      && sym->ts.u.derived && sym->ts.u.derived->components)
    as = sym->ts.u.derived->components->as;
  else
    as = sym->as;


  if (as == 
# 12640 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null 
# 12640 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                || as->type != AS_DEFERRED)
    {
      bool pointer, allocatable, dimension;

      if (sym->ts.type == BT_CLASS && sym->attr.class_ok
   && sym->ts.u.derived && sym->ts.u.derived->components)
 {
   pointer = sym->ts.u.derived->components->attr.class_pointer;
   allocatable = sym->ts.u.derived->components->attr.allocatable;
   dimension = sym->ts.u.derived->components->attr.dimension;
 }
      else
 {
   pointer = sym->attr.pointer && !sym->attr.select_type_temporary;
   allocatable = sym->attr.allocatable;
   dimension = sym->attr.dimension;
 }

      if (allocatable)
 {
   if (dimension && as->type != AS_ASSUMED_RANK)
     {
       gfc_error ("Allocatable array %qs at %L must have a deferred "
    "shape or assumed rank", sym->name, &sym->declared_at);
       return false;
     }
   else if (!gfc_notify_std ((1<<4), "Scalar object "
        "%qs at %L may not be ALLOCATABLE",
        sym->name, &sym->declared_at))
     return false;
 }

      if (pointer && dimension && as->type != AS_ASSUMED_RANK)
 {
   gfc_error ("Array pointer %qs at %L must have a deferred shape or "
       "assumed rank", sym->name, &sym->declared_at);
   sym->error = 1;
   return false;
 }
    }
  else
    {
      if (!mp_flag && !sym->attr.allocatable && !sym->attr.pointer
   && sym->ts.type != BT_CLASS && !sym->assoc)
 {
   gfc_error ("Array %qs at %L cannot have a deferred shape",
       sym->name, &sym->declared_at);
   return false;
  }
    }


  if (sym->ts.type == BT_CLASS && !(sym->result && sym->result != sym))
    {

      if (sym->attr.class_ok
   && sym->ts.u.derived
   && !sym->attr.select_type_temporary
   && !(sym != 
# 12698 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __null 
# 12698 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      && sym->ts.type == BT_CLASS && sym->ts.u.derived->components && sym->ts.u.derived->components->ts.u.derived && sym->ts.u.derived->components->ts.u.derived->attr.unlimited_polymorphic)
   && !gfc_type_is_extensible (sym->ts.u.derived->components->ts.u.derived))
 {
   gfc_error ("Type %qs of CLASS variable %qs at %L is not extensible",
       sym->ts.u.derived->components->ts.u.derived->name, sym->name,
       &sym->declared_at);
   return false;
 }





      if (!sym->attr.class_ok && !sym->attr.use_assoc && !sym->assoc)
 {
   gfc_error ("CLASS variable %qs at %L must be dummy, allocatable "
       "or pointer", sym->name, &sym->declared_at);
   return false;
 }
    }

  return true;
}





static bool
resolve_fl_variable_derived (gfc_symbol *sym, int no_init_flag)
{
  ((void)(!(sym->ts.type == BT_DERIVED || sym->ts.type == BT_CLASS) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 12729, __FUNCTION__), 0 : 0));





  if (sym->ts.u.derived
      && sym->ns != sym->ts.u.derived->ns
      && !sym->ts.u.derived->attr.use_assoc
      && sym->ns->proc_name->attr.if_source != IFSRC_IFBODY)
    {
      gfc_symbol *s;
      gfc_find_symbol (sym->ts.u.derived->name, sym->ns, 0, &s);
      if (s && s->attr.generic)
 s = gfc_find_dt_in_generic (s);
      if (s && !((s->attr.flavor) == FL_DERIVED || (s->attr.flavor) == FL_UNION || (s->attr.flavor) == FL_STRUCT))
 {
   gfc_error ("The type %qs cannot be host associated at %L "
       "because it is blocked by an incompatible object "
       "of the same name declared at %L",
       sym->ts.u.derived->name, &sym->declared_at,
       &s->declared_at);
   return false;
 }
    }
# 12763 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  if (!(sym->value || no_init_flag) && sym->ns->proc_name
      && sym->ns->proc_name->attr.flavor == FL_MODULE
      && !(sym->ns->save_all && !sym->attr.automatic) && !sym->attr.save
      && !sym->attr.pointer && !sym->attr.allocatable
      && gfc_has_default_initializer (sym->ts.u.derived)
      && !gfc_notify_std ((1<<7), "Implied SAVE for module variable "
     "%qs at %L, needed due to the default "
     "initialization", sym->name, &sym->declared_at))
    return false;


  if (!(sym->value || sym->attr.pointer || sym->attr.allocatable)
      && (!no_init_flag || sym->attr.intent == INTENT_OUT))
    sym->value = gfc_generate_initializer (&sym->ts, can_generate_init (sym));

  return true;
}






static bool
deferred_requirements (gfc_symbol *sym)
{
  if (sym->ts.deferred
      && !(sym->attr.pointer
    || sym->attr.allocatable
    || sym->attr.associate_var
    || sym->attr.omp_udr_artificial_var))
    {

      if (sym->result && sym->name != sym->result->name)
 return true;

      gfc_error ("Entity %qs at %L has a deferred type parameter and "
   "requires either the POINTER or ALLOCATABLE attribute",
   sym->name, &sym->declared_at);
      return false;
    }
  return true;
}




static bool
resolve_fl_variable (gfc_symbol *sym, int mp_flag)
{
  const char *auto_save_msg = "Automatic object %qs at %L cannot have the "
         "SAVE attribute";

  if (!resolve_fl_var_and_proc (sym, mp_flag))
    return false;




  bool saved_specification_expr = specification_expr;
  specification_expr = true;

  if (sym->ns->proc_name
      && (sym->ns->proc_name->attr.flavor == FL_MODULE
   || sym->ns->proc_name->attr.is_main_program)
      && !sym->attr.use_assoc
      && !sym->attr.allocatable
      && !sym->attr.pointer
      && is_non_constant_shape_array (sym))
    {


      gfc_error ("The module or main program array %qs at %L must "
   "have constant shape", sym->name, &sym->declared_at);
      specification_expr = saved_specification_expr;
      return false;
    }


  if (!deferred_requirements (sym))
    return false;

  if (sym->ts.type == BT_CHARACTER && !sym->attr.associate_var)
    {


      gfc_expr *e = 
# 12849 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 12849 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;

      if (sym->ts.u.cl)
 e = sym->ts.u.cl->length;
      else
 return false;

      if (e == 
# 12856 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null 
# 12856 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   && !sym->attr.dummy && !sym->attr.result
   && !sym->ts.deferred && !sym->attr.select_type_temporary
   && !sym->attr.omp_udr_artificial_var)
 {
   gfc_error ("Entity with assumed character length at %L must be a "
       "dummy argument or a PARAMETER", &sym->declared_at);
   specification_expr = saved_specification_expr;
   return false;
 }

      if (e && sym->attr.save == SAVE_EXPLICIT && !gfc_is_constant_expr (e))
 {
   gfc_error (auto_save_msg, sym->name, &sym->declared_at);
   specification_expr = saved_specification_expr;
   return false;
 }

      if (!gfc_is_constant_expr (e)
   && !(e->expr_type == EXPR_VARIABLE
        && e->symtree->n.sym->attr.flavor == FL_PARAMETER))
 {
   if (!sym->attr.use_assoc && sym->ns->proc_name
       && (sym->ns->proc_name->attr.flavor == FL_MODULE
    || sym->ns->proc_name->attr.is_main_program))
     {
       gfc_error ("%qs at %L must have constant character length "
   "in this context", sym->name, &sym->declared_at);
       specification_expr = saved_specification_expr;
       return false;
     }
   if (sym->attr.in_common)
     {
       gfc_error ("COMMON variable %qs at %L must have constant "
    "character length", sym->name, &sym->declared_at);
       specification_expr = saved_specification_expr;
       return false;
     }
 }
    }

  if (sym->value == 
# 12896 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null 
# 12896 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        && sym->attr.referenced)
    apply_default_init_local (sym);


  int no_init_flag = 0, automatic_flag = 0;
  if (sym->attr.allocatable || sym->attr.external || sym->attr.dummy
      || sym->attr.intrinsic || sym->attr.result)
    no_init_flag = 1;
  else if ((sym->attr.dimension || sym->attr.codimension) && !sym->attr.pointer
    && is_non_constant_shape_array (sym))
    {
      no_init_flag = automatic_flag = 1;



      if (sym->as && sym->attr.codimension)
 {
   int corank = sym->as->corank;
   sym->as->corank = 0;
   no_init_flag = automatic_flag = is_non_constant_shape_array (sym);
   sym->as->corank = corank;
 }
      if (automatic_flag && sym->attr.save == SAVE_EXPLICIT)
 {
   gfc_error (auto_save_msg, sym->name, &sym->declared_at);
   specification_expr = saved_specification_expr;
   return false;
 }
    }


  if (sym->value)
    gfc_simplify_expr (sym->value, 1);


  if (!sym->mark && sym->value)
    {
      if (sym->attr.allocatable || (sym->ts.type == BT_CLASS
        && sym->ts.u.derived->components->attr.allocatable))
 gfc_error ("Allocatable %qs at %L cannot have an initializer",
     sym->name, &sym->declared_at);
      else if (sym->attr.external)
 gfc_error ("External %qs at %L cannot have an initializer",
     sym->name, &sym->declared_at);
      else if (sym->attr.dummy)
 gfc_error ("Dummy %qs at %L cannot have an initializer",
     sym->name, &sym->declared_at);
      else if (sym->attr.intrinsic)
 gfc_error ("Intrinsic %qs at %L cannot have an initializer",
     sym->name, &sym->declared_at);
      else if (sym->attr.result)
 gfc_error ("Function result %qs at %L cannot have an initializer",
     sym->name, &sym->declared_at);
      else if (automatic_flag)
 gfc_error ("Automatic array %qs at %L cannot have an initializer",
     sym->name, &sym->declared_at);
      else
 goto no_init_error;
      specification_expr = saved_specification_expr;
      return false;
    }

no_init_error:
  if (sym->ts.type == BT_DERIVED || sym->ts.type == BT_CLASS)
    {
      bool res = resolve_fl_variable_derived (sym, no_init_flag);
      specification_expr = saved_specification_expr;
      return res;
    }

  specification_expr = saved_specification_expr;
  return true;
}




static gfc_formal_arglist *new_formal;
static char errmsg[200];

static void
compare_fsyms (gfc_symbol *sym)
{
  gfc_symbol *fsym;

  if (sym == 
# 12981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null 
# 12981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 || new_formal == 
# 12981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 12981 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      )
    return;

  fsym = new_formal->sym;

  if (sym == fsym)
    return;

  if (strcmp (sym->name, fsym->name) == 0)
    {
      if (!gfc_check_dummy_characteristics (fsym, sym, true, errmsg, 200))
 gfc_error ("%s at %L", errmsg, &fsym->declared_at);
    }
}




static bool
resolve_fl_procedure (gfc_symbol *sym, int mp_flag)
{
  gfc_formal_arglist *arg;

  if (sym->attr.function
      && !resolve_fl_var_and_proc (sym, mp_flag))
    return false;


  if (!deferred_requirements (sym))
    return false;

  if (sym->ts.type == BT_CHARACTER)
    {
      gfc_charlen *cl = sym->ts.u.cl;

      if (cl && cl->length && gfc_is_constant_expr (cl->length)
      && !resolve_charlen (cl))
 return false;

      if ((!cl || !cl->length || cl->length->expr_type != EXPR_CONSTANT)
   && sym->attr.proc == PROC_ST_FUNCTION)
 {
   gfc_error ("Character-valued statement function %qs at %L must "
       "have constant length", sym->name, &sym->declared_at);
   return false;
 }
    }





  if (!(sym->ns->parent && sym->ns->parent->proc_name
 && sym->ns->parent->proc_name->attr.flavor == FL_MODULE)
      && gfc_check_symbol_access (sym))
    {
      gfc_interface *iface;

      for (arg = gfc_sym_get_dummy_args (sym); arg; arg = arg->next)
 {
   if (arg->sym
       && arg->sym->ts.type == BT_DERIVED
       && arg->sym->ts.u.derived
       && !arg->sym->ts.u.derived->attr.use_assoc
       && !gfc_check_symbol_access (arg->sym->ts.u.derived)
       && !gfc_notify_std ((1<<4), "%qs is of a PRIVATE type "
      "and cannot be a dummy argument"
      " of %qs, which is PUBLIC at %L",
      arg->sym->name, sym->name,
      &sym->declared_at))
     {

       arg->sym->ts.u.derived->attr.access = ACCESS_PUBLIC;
       return false;
     }
 }



      for (iface = sym->generic; iface; iface = iface->next)
 {
   for (arg = gfc_sym_get_dummy_args (iface->sym); arg; arg = arg->next)
     {
       if (arg->sym
    && arg->sym->ts.type == BT_DERIVED
    && !arg->sym->ts.u.derived->attr.use_assoc
    && !gfc_check_symbol_access (arg->sym->ts.u.derived)
    && !gfc_notify_std ((1<<4), "Procedure %qs in "
          "PUBLIC interface %qs at %L "
          "takes dummy arguments of %qs which "
          "is PRIVATE", iface->sym->name,
          sym->name, &iface->sym->declared_at,
          gfc_typename(&arg->sym->ts)))
  {

    arg->sym->ts.u.derived->attr.access = ACCESS_PUBLIC;
    return false;
  }
      }
 }
    }

  if (sym->attr.function && sym->value && sym->attr.proc != PROC_ST_FUNCTION
      && !sym->attr.proc_pointer)
    {
      gfc_error ("Function %qs at %L cannot have an initializer",
   sym->name, &sym->declared_at);


      sym->value->error = 1;
      return false;
    }



  if (sym->attr.external && sym->value && !sym->attr.proc_pointer)
    {
      gfc_error ("External object %qs at %L may not have an initializer",
   sym->name, &sym->declared_at);
      return false;
    }


  if (sym->attr.elemental && sym->attr.function
      && (sym->as || (sym->ts.type == BT_CLASS && sym->ts.u.derived->components->as)))
    {
      gfc_error ("ELEMENTAL function %qs at %L must have a scalar "
   "result", sym->name, &sym->declared_at);

      sym->attr.elemental = 0;
      return false;
    }

  if (sym->attr.proc == PROC_ST_FUNCTION
      && (sym->attr.allocatable || sym->attr.pointer))
    {
      gfc_error ("Statement function %qs at %L may not have pointer or "
   "allocatable attribute", sym->name, &sym->declared_at);
      return false;
    }







  if (sym->attr.function
      && sym->ts.type == BT_CHARACTER && !sym->ts.deferred
      && sym->ts.u.cl && sym->ts.u.cl->length == 
# 13130 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 13130 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    )
    {
      if ((sym->as && sym->as->rank) || (sym->attr.pointer)
   || (sym->attr.recursive) || (sym->attr.pure))
 {
   if (sym->as && sym->as->rank)
     gfc_error ("CHARACTER(*) function %qs at %L cannot be "
         "array-valued", sym->name, &sym->declared_at);

   if (sym->attr.pointer)
     gfc_error ("CHARACTER(*) function %qs at %L cannot be "
         "pointer-valued", sym->name, &sym->declared_at);

   if (sym->attr.pure)
     gfc_error ("CHARACTER(*) function %qs at %L cannot be "
         "pure", sym->name, &sym->declared_at);

   if (sym->attr.recursive)
     gfc_error ("CHARACTER(*) function %qs at %L cannot be "
         "recursive", sym->name, &sym->declared_at);

   return false;
 }





      if (!sym->attr.contained && !sym->ts.deferred
   && (sym->name[0] != '_' || sym->name[1] != '_'))
 gfc_notify_std ((1<<1),
   "CHARACTER(*) function %qs at %L",
   sym->name, &sym->declared_at);
    }


  if (sym->attr.elemental)
    {
      if (sym->attr.proc_pointer)
 {
   const char* name = (sym->attr.result ? sym->ns->proc_name->name
            : sym->name);
   gfc_error ("Procedure pointer %qs at %L shall not be elemental",
       name, &sym->declared_at);
   return false;
 }
      if (sym->attr.dummy)
 {
   gfc_error ("Dummy procedure %qs at %L shall not be elemental",
       sym->name, &sym->declared_at);
   return false;
 }
    }




  if (sym->attr.elemental && sym->result
      && (sym->result->attr.allocatable || sym->result->attr.pointer))
    {
      gfc_error ("Function result variable %qs at %L of elemental "
   "function %qs shall not have an ALLOCATABLE or POINTER "
   "attribute", sym->result->name,
   &sym->result->declared_at, sym->name);
      return false;
    }

  if (sym->attr.is_bind_c && sym->attr.is_c_interop != 1)
    {
      gfc_formal_arglist *curr_arg;
      int has_non_interop_arg = 0;

      if (!verify_bind_c_sym (sym, &(sym->ts), sym->attr.in_common,
         sym->common_block))
        {


          sym->attr.is_bind_c = 0;
          sym->attr.is_c_interop = 0;
          sym->ts.is_c_interop = 0;
        }
      else
        {

          sym->attr.is_c_interop = 1;
          sym->ts.is_c_interop = 1;
        }

      curr_arg = gfc_sym_get_dummy_args (sym);
      while (curr_arg != 
# 13219 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 13219 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            )
        {

   if (curr_arg->sym && curr_arg->sym->attr.implicit_type == 0)
     if (!gfc_verify_c_interop_param (curr_arg->sym))




       has_non_interop_arg = 1;

          curr_arg = curr_arg->next;
        }



      if (has_non_interop_arg != 0)
 {
   sym->attr.is_c_interop = 0;
   sym->ts.is_c_interop = 0;
   sym->attr.is_bind_c = 0;
 }
    }

  if (!sym->attr.proc_pointer)
    {
      if (sym->attr.save == SAVE_EXPLICIT)
 {
   gfc_error ("PROCEDURE attribute conflicts with SAVE attribute "
       "in %qs at %L", sym->name, &sym->declared_at);
   return false;
 }
      if (sym->attr.intent)
 {
   gfc_error ("PROCEDURE attribute conflicts with INTENT attribute "
       "in %qs at %L", sym->name, &sym->declared_at);
   return false;
 }
      if (sym->attr.subroutine && sym->attr.result)
 {
   gfc_error ("PROCEDURE attribute conflicts with RESULT attribute "
       "in %qs at %L", sym->ns->proc_name->name, &sym->declared_at);
   return false;
 }
      if (sym->attr.external && sym->attr.function && !sym->attr.module_procedure
   && ((sym->attr.if_source == IFSRC_DECL && !sym->attr.procedure)
       || sym->attr.contained))
 {
   gfc_error ("EXTERNAL attribute conflicts with FUNCTION attribute "
       "in %qs at %L", sym->name, &sym->declared_at);
   return false;
 }
      if (strcmp ("ppr@", sym->name) == 0)
 {
   gfc_error ("Procedure pointer result %qs at %L "
       "is missing the pointer attribute",
       sym->ns->proc_name->name, &sym->declared_at);
   return false;
 }
    }



  if (sym->attr.if_source != IFSRC_DECL)
    sym->attr.array_outer_dependency = 1;





  if (sym->attr.module_procedure
      && sym->attr.if_source == IFSRC_DECL)
    {
      gfc_symbol *iface;
      char name[2*63 + 1];
      char *module_name;
      char *submodule_name;
      strcpy (name, sym->ns->proc_name->name);
      module_name = strtok (name, ".");
      submodule_name = strtok (
# 13298 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 13298 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  , ".");

      iface = sym->tlink;
      sym->tlink = 
# 13301 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 13301 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;



      if (iface && sym->result
   && iface->ts.type == BT_CHARACTER
   && iface->ts.deferred)
 sym->result->ts.u.cl = iface->ts.u.cl;

      if (iface == 
# 13310 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 13310 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      )
 goto check_formal;


      if (sym->attr.elemental != iface->attr.elemental)
 {
   gfc_error ("Mismatch in ELEMENTAL attribute between MODULE "
       "PROCEDURE at %L and its interface in %s",
       &sym->declared_at, module_name);
   return false;
 }

      if (sym->attr.pure != iface->attr.pure)
 {
   gfc_error ("Mismatch in PURE attribute between MODULE "
       "PROCEDURE at %L and its interface in %s",
       &sym->declared_at, module_name);
   return false;
 }

      if (sym->attr.recursive != iface->attr.recursive)
 {
   gfc_error ("Mismatch in RECURSIVE attribute between MODULE "
       "PROCEDURE at %L and its interface in %s",
       &sym->declared_at, module_name);
   return false;
 }


      if (!gfc_check_result_characteristics (sym, iface, errmsg, 200))
 {
   gfc_error ("%s between the MODULE PROCEDURE declaration "
       "in MODULE %qs and the declaration at %L in "
       "(SUB)MODULE %qs",
       errmsg, module_name, &sym->declared_at,
       submodule_name ? submodule_name : module_name);
   return false;
 }

check_formal:

      if (sym->formal && sym->formal_ns)
 {
   for (arg = sym->formal; arg && arg->sym; arg = arg->next)
     {
       new_formal = arg;
       gfc_traverse_ns (sym->formal_ns, compare_fsyms);
     }
 }
    }
  return true;
}






static bool
gfc_resolve_finalizers (gfc_symbol* derived, bool *finalizable)
{
  gfc_finalizer* list;
  gfc_finalizer** prev_link;
  bool result = true;
  bool seen_scalar = false;
  gfc_symbol *vtab;
  gfc_component *c;
  gfc_symbol *parent = gfc_get_derived_super_type (derived);

  if (parent)
    gfc_resolve_finalizers (parent, finalizable);


  bool has_final = derived->f2k_derived && derived->f2k_derived->finalizers;
  for (c = derived->components; c; c = c->next)
    if (c->ts.type == BT_DERIVED
 && !c->attr.pointer && !c->attr.proc_pointer && !c->attr.allocatable)
      {
 bool has_final2 = false;
 if (!gfc_resolve_finalizers (c->ts.u.derived, &has_final2))
   return false;
 has_final = has_final || has_final2;
      }

  if (!has_final)
    {
      if (finalizable)
 *finalizable = false;
      return true;
    }




  prev_link = &derived->f2k_derived->finalizers;
  for (list = derived->f2k_derived->finalizers; list; list = *prev_link)
    {
      gfc_formal_arglist *dummy_args;
      gfc_symbol* arg;
      gfc_finalizer* i;
      int my_rank;


      if (list->proc_tree)
 {
   if (list->proc_tree->n.sym->formal->sym->as == 
# 13415 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                 __null
       
# 13416 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      || list->proc_tree->n.sym->formal->sym->as->rank == 0)
     seen_scalar = true;
   prev_link = &(list->next);
   continue;
 }


      if (!list->proc_sym->attr.subroutine)
 {
   gfc_error ("FINAL procedure %qs at %L is not a SUBROUTINE",
       list->proc_sym->name, &list->where);
   goto error;
 }


      dummy_args = gfc_sym_get_dummy_args (list->proc_sym);
      if (!dummy_args || dummy_args->next)
 {
   gfc_error ("FINAL procedure at %L must have exactly one argument",
       &list->where);
   goto error;
 }
      arg = dummy_args->sym;


      if (arg->ts.type != BT_DERIVED || arg->ts.u.derived != derived)
 {
   gfc_error ("Argument of FINAL procedure at %L must be of type %qs",
       &arg->declared_at, derived->name);
   goto error;
 }


      if (arg->attr.pointer)
 {
   gfc_error ("Argument of FINAL procedure at %L must not be a POINTER",
       &arg->declared_at);
   goto error;
 }
      if (arg->attr.allocatable)
 {
   gfc_error ("Argument of FINAL procedure at %L must not be"
       " ALLOCATABLE", &arg->declared_at);
   goto error;
 }
      if (arg->attr.optional)
 {
   gfc_error ("Argument of FINAL procedure at %L must not be OPTIONAL",
       &arg->declared_at);
   goto error;
 }


      if (arg->attr.intent == INTENT_OUT)
 {
   gfc_error ("Argument of FINAL procedure at %L must not be"
       " INTENT(OUT)", &arg->declared_at);
   goto error;
 }


      if (global_options.x_warn_surprising && arg->as && arg->as->rank != 0
   && arg->as->type != AS_ASSUMED_SHAPE)
 gfc_warning (OPT_Wsurprising,
       "Non-scalar FINAL procedure at %L should have assumed"
       " shape argument", &arg->declared_at);






      my_rank = (arg->as ? arg->as->rank : 0);
      for (i = list->next; i; i = i->next)
 {
   gfc_formal_arglist *dummy_args;



   dummy_args = gfc_sym_get_dummy_args (i->proc_sym);
   if (dummy_args)
     {
       gfc_symbol* i_arg = dummy_args->sym;
       const int i_rank = (i_arg->as ? i_arg->as->rank : 0);
       if (i_rank == my_rank)
  {
    gfc_error ("FINAL procedure %qs declared at %L has the same"
        " rank (%d) as %qs",
        list->proc_sym->name, &list->where, my_rank,
        i->proc_sym->name);
    goto error;
  }
     }
 }


 if (my_rank == 0)
   seen_scalar = true;


 ((void)(!(!list->proc_tree) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13516, __FUNCTION__), 0 : 0));
 list->proc_tree = gfc_find_sym_in_symtree (list->proc_sym);

 prev_link = &list->next;
 continue;



error:
 i = list;
 *prev_link = list->next;
 gfc_free_finalizer (i);
 result = false;
    }

  if (result == false)
    return false;




  if (global_options.x_warn_surprising && derived->f2k_derived->finalizers && !seen_scalar)
    gfc_warning (OPT_Wsurprising,
   "Only array FINAL procedures declared for derived type %qs"
   " defined at %L, suggest also scalar one",
   derived->name, &derived->declared_at);

  vtab = gfc_find_derived_vtab (derived);
  c = vtab->ts.u.derived->components->next->next->next->next->next;
  gfc_set_sym_referenced (c->initializer->symtree->n.sym);

  if (finalizable)
    *finalizable = true;

  return true;
}




static bool
check_generic_tbp_ambiguity (gfc_tbp_generic* t1, gfc_tbp_generic* t2,
        const char* generic_name, locus where)
{
  gfc_symbol *sym1, *sym2;
  const char *pass1, *pass2;
  gfc_formal_arglist *dummy_args;

  ((void)(!(t1->specific && t2->specific) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13564, __FUNCTION__), 0 : 0));
  ((void)(!(!t1->specific->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13565, __FUNCTION__), 0 : 0));
  ((void)(!(!t2->specific->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13566, __FUNCTION__), 0 : 0));
  ((void)(!(t1->is_operator == t2->is_operator) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13567, __FUNCTION__), 0 : 0));

  sym1 = t1->specific->u.specific->n.sym;
  sym2 = t2->specific->u.specific->n.sym;

  if (sym1 == sym2)
    return true;


  if (sym1->attr.subroutine != sym2->attr.subroutine
      || sym1->attr.function != sym2->attr.function)
    {
      gfc_error ("%qs and %qs cannot be mixed FUNCTION/SUBROUTINE for"
   " GENERIC %qs at %L",
   sym1->name, sym2->name, generic_name, &where);
      return false;
    }


  if (t1->specific->nopass)
    pass1 = 
# 13587 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 13587 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               ;
  else if (t1->specific->pass_arg)
    pass1 = t1->specific->pass_arg;
  else
    {
      dummy_args = gfc_sym_get_dummy_args (t1->specific->u.specific->n.sym);
      if (dummy_args)
 pass1 = dummy_args->sym->name;
      else
 pass1 = 
# 13596 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 13596 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;
    }
  if (t2->specific->nopass)
    pass2 = 
# 13599 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 13599 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               ;
  else if (t2->specific->pass_arg)
    pass2 = t2->specific->pass_arg;
  else
    {
      dummy_args = gfc_sym_get_dummy_args (t2->specific->u.specific->n.sym);
      if (dummy_args)
 pass2 = dummy_args->sym->name;
      else
 pass2 = 
# 13608 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 13608 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            ;
    }


  if (gfc_compare_interfaces (sym1, sym2, sym2->name, !t1->is_operator, 0,
         
# 13613 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        __null
# 13613 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            , 0, pass1, pass2))
    {
      gfc_error ("%qs and %qs for GENERIC %qs at %L are ambiguous",
   sym1->name, sym2->name, generic_name, &where);
      return false;
    }

  return true;
}
# 13632 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static bool
resolve_tb_generic_targets (gfc_symbol* super_type,
       gfc_typebound_proc* p, const char* name)
{
  gfc_tbp_generic* target;
  gfc_symtree* first_target;
  gfc_symtree* inherited;

  ((void)(!(p && p->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13640, __FUNCTION__), 0 : 0));


  ((void)(!(p->u.generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13643, __FUNCTION__), 0 : 0));
  for (target = p->u.generic; target; target = target->next)
    if (!target->specific)
      {
 gfc_typebound_proc* overridden_tbp;
 gfc_tbp_generic* g;
 const char* target_name;

 target_name = target->specific_st->name;


 if (target->specific_st->n.tb && !target->specific_st->n.tb->error)
   {
     target->specific = target->specific_st->n.tb;
     goto specific_found;
   }


 if (super_type)
   {
     inherited = gfc_find_typebound_proc (super_type, 
# 13663 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                     __null
# 13663 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                         , target_name,
       true, 
# 13664 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 13664 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                );

     if (inherited)
       {
  ((void)(!(inherited->n.tb) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13668, __FUNCTION__), 0 : 0));
  target->specific = inherited->n.tb;
  goto specific_found;
       }
   }

 gfc_error ("Undefined specific binding %qs as target of GENERIC %qs"
     " at %L", target_name, name, &p->where);
 return false;



specific_found:
 ((void)(!(target->specific) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13681, __FUNCTION__), 0 : 0));


 if (target->specific->is_generic)
   {
     gfc_error ("GENERIC %qs at %L must target a specific binding,"
         " %qs is GENERIC, too", name, &p->where, target_name);
     return false;
   }


 for (g = p->u.generic; g; g = g->next)
   if (g != target && g->specific
       && !check_generic_tbp_ambiguity (target, g, name, p->where))
     return false;


 for (overridden_tbp = p->overridden; overridden_tbp;
      overridden_tbp = overridden_tbp->overridden)
   if (overridden_tbp->is_generic)
     {
       for (g = overridden_tbp->u.generic; g; g = g->next)
  {
    ((void)(!(g->specific) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13704, __FUNCTION__), 0 : 0));
    if (!check_generic_tbp_ambiguity (target, g, name, p->where))
      return false;
  }
     }
      }


  if (p->overridden && !p->overridden->is_generic)
    {
      gfc_error ("GENERIC %qs at %L cannot overwrite specific binding with"
   " the same name", name, &p->where);
      return false;
    }



  first_target = p->u.generic->specific->u.specific;
  ((void)(!(first_target) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13722, __FUNCTION__), 0 : 0));
  p->subroutine = first_target->n.sym->attr.subroutine;
  p->function = first_target->n.sym->attr.function;

  return true;
}




static bool
resolve_typebound_generic (gfc_symbol* derived, gfc_symtree* st)
{
  gfc_symbol* super_type;


  st->n.tb->overridden = 
# 13738 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null
# 13738 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            ;
  super_type = gfc_get_derived_super_type (derived);
  if (super_type)
    {
      gfc_symtree* overridden;
      overridden = gfc_find_typebound_proc (super_type, 
# 13743 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                       __null
# 13743 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                           , st->name,
         true, 
# 13744 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 13744 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  );

      if (overridden && overridden->n.tb)
 st->n.tb->overridden = overridden->n.tb;
    }


  return resolve_tb_generic_targets (super_type, st->n.tb, st->name);
}





static gfc_symbol*
get_checked_tb_operator_target (gfc_tbp_generic* target, locus where)
{
  gfc_symbol* target_proc;

  ((void)(!(target->specific && !target->specific->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13763, __FUNCTION__), 0 : 0));
  target_proc = target->specific->u.specific->n.sym;
  ((void)(!(target_proc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13765, __FUNCTION__), 0 : 0));


  if (target->specific->nopass)
    {
      gfc_error ("Type-bound operator at %L cannot be NOPASS", &where);
      return 
# 13771 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 13771 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                ;
    }

  return target_proc;
}




static bool
resolve_typebound_intrinsic_op (gfc_symbol* derived, gfc_intrinsic_op op,
    gfc_typebound_proc* p)
{
  gfc_symbol* super_type;
  gfc_tbp_generic* target;


  if (p->error)
    return true;


  ((void)(!(p->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13792, __FUNCTION__), 0 : 0));


  super_type = gfc_get_derived_super_type (derived);
  if (super_type && super_type->f2k_derived)
    p->overridden = gfc_find_typebound_intrinsic_op (super_type, 
# 13797 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                __null
# 13797 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                    ,
           op, true, 
# 13798 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 13798 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        );
  else
    p->overridden = 
# 13800 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 13800 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       ;


  if (!resolve_tb_generic_targets (super_type, p, gfc_op2string(op)))
    goto error;


  for (target = p->u.generic; target; target = target->next)
    {
      gfc_symbol* target_proc;

      target_proc = get_checked_tb_operator_target (target, p->where);
      if (!target_proc)
 goto error;

      if (!gfc_check_operator_interface (target_proc, op, p->where))
 goto error;


      if (!target->specific->deferred && !derived->attr.use_assoc
   && p->access != ACCESS_PRIVATE && derived->ns == gfc_current_ns)
 {
   gfc_interface *head, *intr;




   for (intr = derived->ns->op[op]; intr; intr = intr->next)
     if (intr->sym == target_proc
  && target_proc->attr.used_in_submodule)
       return true;

   if (!gfc_check_new_interface (derived->ns->op[op],
     target_proc, p->where))
     return false;
   head = derived->ns->op[op];
   intr = ((gfc_interface *) xcalloc (1, sizeof (gfc_interface)));
   intr->sym = target_proc;
   intr->where = p->where;
   intr->next = head;
   derived->ns->op[op] = intr;
 }
    }

  return true;

error:
  p->error = 1;
  return false;
}




static gfc_symbol* resolve_bindings_derived;
static bool resolve_bindings_result;

static bool check_uop_procedure (gfc_symbol* sym, locus where);

static void
resolve_typebound_user_op (gfc_symtree* stree)
{
  gfc_symbol* super_type;
  gfc_tbp_generic* target;

  ((void)(!(stree && stree->n.tb) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13865, __FUNCTION__), 0 : 0));

  if (stree->n.tb->error)
    return;


  ((void)(!(stree->n.tb->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13871, __FUNCTION__), 0 : 0));


  super_type = gfc_get_derived_super_type (resolve_bindings_derived);
  if (super_type && super_type->f2k_derived)
    {
      gfc_symtree* overridden;
      overridden = gfc_find_typebound_user_op (super_type, 
# 13878 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                          __null
# 13878 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                              ,
            stree->name, true, 
# 13879 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 13879 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  );

      if (overridden && overridden->n.tb)
 stree->n.tb->overridden = overridden->n.tb;
    }
  else
    stree->n.tb->overridden = 
# 13885 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                             __null
# 13885 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                 ;


  if (!resolve_tb_generic_targets (super_type, stree->n.tb, stree->name))
    goto error;


  for (target = stree->n.tb->u.generic; target; target = target->next)
    {
      gfc_symbol* target_proc;

      target_proc = get_checked_tb_operator_target (target, stree->n.tb->where);
      if (!target_proc)
 goto error;

      if (!check_uop_procedure (target_proc, stree->n.tb->where))
 goto error;
    }

  return;

error:
  resolve_bindings_result = false;
  stree->n.tb->error = 1;
}




static void
resolve_typebound_procedure (gfc_symtree* stree)
{
  gfc_symbol* proc;
  locus where;
  gfc_symbol* me_arg;
  gfc_symbol* super_type;
  gfc_component* comp;

  ((void)(!(stree) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13923, __FUNCTION__), 0 : 0));


  if (!stree->n.tb)
    return;

  if (stree->n.tb->error)
    return;


  if (stree->n.tb->is_generic)
    {
      if (!resolve_typebound_generic (resolve_bindings_derived, stree))
 goto error;
      return;
    }


  ((void)(!(!stree->n.tb->is_generic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13941, __FUNCTION__), 0 : 0));
  ((void)(!(stree->n.tb->u.specific) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13942, __FUNCTION__), 0 : 0));
  proc = stree->n.tb->u.specific->n.sym;
  where = stree->n.tb->where;


  ((void)(!(stree->n.tb->access != ACCESS_UNKNOWN) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 13947, __FUNCTION__), 0 : 0));

  if (stree->n.tb->deferred)
    {
      if (!check_proc_interface (proc, &where))
 goto error;
    }
  else
    {


      if (!proc->resolve_symbol_called
   && proc->attr.function == 0 && proc->attr.subroutine == 0)
 {
   gfc_symbol *tmp;
   gfc_find_symbol (proc->name, gfc_current_ns->parent, 1, &tmp);
   if (tmp && tmp->attr.use_assoc)
     {
       proc->module = tmp->module;
       proc->attr.proc = tmp->attr.proc;
       proc->attr.function = tmp->attr.function;
       proc->attr.subroutine = tmp->attr.subroutine;
       proc->attr.use_assoc = tmp->attr.use_assoc;
       proc->ts = tmp->ts;
       proc->result = tmp->result;
     }
 }


      if ((!proc->attr.subroutine && !proc->attr.function)
   || (proc->attr.proc != PROC_MODULE
       && proc->attr.if_source != IFSRC_IFBODY)
   || proc->attr.abstract)
 {
   gfc_error ("%qs must be a module procedure or an external "
       "procedure with an explicit interface at %L",
       proc->name, &where);
   goto error;
 }
    }

  stree->n.tb->subroutine = proc->attr.subroutine;
  stree->n.tb->function = proc->attr.function;




  super_type = gfc_get_derived_super_type (resolve_bindings_derived);



  if (!stree->n.tb->nopass && stree->n.tb->pass_arg_num == 0)
    {
      gfc_formal_arglist *dummy_args;

      dummy_args = gfc_sym_get_dummy_args (proc);
      if (stree->n.tb->pass_arg)
 {
   gfc_formal_arglist *i;




   me_arg = 
# 14010 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 14010 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               ;
   stree->n.tb->pass_arg_num = 1;
   for (i = dummy_args; i; i = i->next)
     {
       if (!strcmp (i->sym->name, stree->n.tb->pass_arg))
  {
    me_arg = i->sym;
    break;
  }
       ++stree->n.tb->pass_arg_num;
     }

   if (!me_arg)
     {
       gfc_error ("Procedure %qs with PASS(%s) at %L has no"
    " argument %qs",
    proc->name, stree->n.tb->pass_arg, &where,
    stree->n.tb->pass_arg);
       goto error;
     }
 }
      else
 {


   stree->n.tb->pass_arg_num = 1;
   if (!dummy_args)
     {
       gfc_error ("Procedure %qs with PASS at %L must have at"
    " least one argument", proc->name, &where);
       goto error;
     }
   me_arg = dummy_args->sym;
 }




      ((void)(!(me_arg) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 14048, __FUNCTION__), 0 : 0));

      if (me_arg->ts.type != BT_CLASS)
 {
   gfc_error ("Non-polymorphic passed-object dummy argument of %qs"
       " at %L", proc->name, &where);
   goto error;
 }

      if (me_arg->ts.u.derived->components->ts.u.derived
   != resolve_bindings_derived)
 {
   gfc_error ("Argument %qs of %qs with PASS(%s) at %L must be of"
       " the derived-type %qs", me_arg->name, proc->name,
       me_arg->name, &where, resolve_bindings_derived->name);
   goto error;
 }

      ((void)(!(me_arg->ts.type == BT_CLASS) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 14066, __FUNCTION__), 0 : 0));
      if (me_arg->ts.u.derived->components->as && me_arg->ts.u.derived->components->as->rank != 0)
 {
   gfc_error ("Passed-object dummy argument of %qs at %L must be"
       " scalar", proc->name, &where);
   goto error;
 }
      if (me_arg->ts.u.derived->components->attr.allocatable)
 {
   gfc_error ("Passed-object dummy argument of %qs at %L must not"
       " be ALLOCATABLE", proc->name, &where);
   goto error;
 }
      if (me_arg->ts.u.derived->components->attr.class_pointer)
 {
   gfc_error ("Passed-object dummy argument of %qs at %L must not"
       " be POINTER", proc->name, &where);
   goto error;
 }
    }



  stree->n.tb->overridden = 
# 14089 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 14089 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               ;
  if (super_type)
    {
      gfc_symtree* overridden;
      overridden = gfc_find_typebound_proc (super_type, 
# 14093 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                       __null
# 14093 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                           ,
         stree->name, true, 
# 14094 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null
# 14094 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               );

      if (overridden)
 {
   if (overridden->n.tb)
     stree->n.tb->overridden = overridden->n.tb;

   if (!gfc_check_typebound_override (stree, overridden))
     goto error;
 }
    }


  for (comp = resolve_bindings_derived->components; comp; comp = comp->next)
    if (!strcmp (comp->name, stree->name))
      {
 gfc_error ("Procedure %qs at %L has the same name as a component of"
     " %qs",
     stree->name, &where, resolve_bindings_derived->name);
 goto error;
      }


  if (super_type && gfc_find_component (super_type, stree->name, true, true,
                                        
# 14118 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                       __null
# 14118 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                           ))
    {
      gfc_error ("Procedure %qs at %L has the same name as an inherited"
   " component of %qs",
   stree->name, &where, resolve_bindings_derived->name);
      goto error;
    }

  stree->n.tb->error = 0;
  return;

error:
  resolve_bindings_result = false;
  stree->n.tb->error = 1;
}


static bool
resolve_typebound_procedures (gfc_symbol* derived)
{
  int op;
  gfc_symbol* super_type;

  if (!derived->f2k_derived || !derived->f2k_derived->tb_sym_root)
    return true;

  super_type = gfc_get_derived_super_type (derived);
  if (super_type)
    resolve_symbol (super_type);

  resolve_bindings_derived = derived;
  resolve_bindings_result = true;

  if (derived->f2k_derived->tb_sym_root)
    gfc_traverse_symtree (derived->f2k_derived->tb_sym_root,
     &resolve_typebound_procedure);

  if (derived->f2k_derived->tb_uop_root)
    gfc_traverse_symtree (derived->f2k_derived->tb_uop_root,
     &resolve_typebound_user_op);

  for (op = 0; op != GFC_INTRINSIC_END; ++op)
    {
      gfc_typebound_proc* p = derived->f2k_derived->tb_op[op];
      if (p && !resolve_typebound_intrinsic_op (derived,
      (gfc_intrinsic_op)op, p))
 resolve_bindings_result = false;
    }

  return resolve_bindings_result;
}




static void
add_dt_to_dt_list (gfc_symbol *derived)
{
  if (!derived->dt_next)
    {
      if (gfc_derived_types)
 {
   derived->dt_next = gfc_derived_types->dt_next;
   gfc_derived_types->dt_next = derived;
 }
      else
 {
   derived->dt_next = derived;
 }
      gfc_derived_types = derived;
    }
}





static bool
ensure_not_abstract_walker (gfc_symbol* sub, gfc_symtree* st)
{
  if (!st)
    return true;

  if (!ensure_not_abstract_walker (sub, st->left))
    return false;
  if (!ensure_not_abstract_walker (sub, st->right))
    return false;

  if (st->n.tb && st->n.tb->deferred)
    {
      gfc_symtree* overriding;
      overriding = gfc_find_typebound_proc (sub, 
# 14209 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 14209 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    , st->name, true, 
# 14209 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                      __null
# 14209 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                          );
      if (!overriding)
 return false;
      ((void)(!(overriding->n.tb) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 14212, __FUNCTION__), 0 : 0));
      if (overriding->n.tb->deferred)
 {
   gfc_error ("Derived-type %qs declared at %L must be ABSTRACT because"
       " %qs is DEFERRED and not overridden",
       sub->name, &sub->declared_at, st->name);
   return false;
 }
    }

  return true;
}

static bool
ensure_not_abstract (gfc_symbol* sub, gfc_symbol* ancestor)
{







  ((void)(!(ancestor && !sub->attr.abstract) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 14235, __FUNCTION__), 0 : 0));

  if (!ancestor->attr.abstract)
    return true;


  if (ancestor->f2k_derived)
    {
      bool t;
      t = ensure_not_abstract_walker (sub, ancestor->f2k_derived->tb_sym_root);
      if (!t)
 return false;
    }


  ancestor = gfc_get_derived_super_type (ancestor);
  if (ancestor)
    return ensure_not_abstract (sub, ancestor);

  return true;
}






static void
check_defined_assignments (gfc_symbol *derived)
{
  gfc_component *c;

  for (c = derived->components; c; c = c->next)
    {
      if (!((c->ts.type) == BT_DERIVED || (c->ts.type) == BT_UNION)
   || c->attr.pointer
   || c->attr.allocatable
   || c->attr.proc_pointer_comp
   || c->attr.class_pointer
   || c->attr.proc_pointer)
 continue;

      if (c->ts.u.derived->attr.defined_assign_comp
   || (c->ts.u.derived->f2k_derived
      && c->ts.u.derived->f2k_derived->tb_op[INTRINSIC_ASSIGN]))
 {
   derived->attr.defined_assign_comp = 1;
   return;
 }

      check_defined_assignments (c->ts.u.derived);
      if (c->ts.u.derived->attr.defined_assign_comp)
 {
   derived->attr.defined_assign_comp = 1;
   return;
 }
    }
}




static bool
resolve_component (gfc_component *c, gfc_symbol *sym)
{
  gfc_symbol *super_type;
  symbol_attribute *attr;

  if (c->attr.artificial)
    return true;




  if (sym->attr.vtype && sym->attr.use_assoc
      && sym->ns->proc_name == 
# 14310 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 14310 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  )
    return true;


  if ((!sym->attr.is_class || c != sym->components)
      && c->attr.codimension
      && (!c->attr.allocatable || (c->as && c->as->type != AS_DEFERRED)))
    {
      gfc_error ("Coarray component %qs at %L must be allocatable with "
                 "deferred shape", c->name, &c->loc);
      return false;
    }


  if (c->attr.codimension && c->ts.type == BT_DERIVED
      && c->ts.u.derived->ts.is_iso_c)
    {
      gfc_error ("Component %qs at %L of TYPE(C_PTR) or TYPE(C_FUNPTR) "
                 "shall not be a coarray", c->name, &c->loc);
      return false;
    }


  if (((c->ts.type) == BT_DERIVED || (c->ts.type) == BT_UNION) && c->ts.u.derived->attr.coarray_comp
      && (c->attr.codimension || c->attr.pointer || c->attr.dimension
          || c->attr.allocatable))
    {
      gfc_error ("Component %qs at %L with coarray component "
                 "shall be a nonpointer, nonallocatable scalar",
                 c->name, &c->loc);
      return false;
    }


  if (c->ts.type == BT_CLASS)
    {
      if (c->ts.u.derived->components)
 {
   attr = &(c->ts.u.derived->components->attr);


   if (c->attr.contiguous)
     attr->contiguous = 1;
 }
      else
 attr = 
# 14355 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       __null
# 14355 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           ;
    }
  else
    attr = &c->attr;

  if (attr && attr->contiguous && (!attr->dimension || !attr->pointer))
    {
      gfc_error ("Component %qs at %L has the CONTIGUOUS attribute but "
                 "is not an array pointer", c->name, &c->loc);
      return false;
    }


  if (sym->attr.is_bind_c && c->ts.type == BT_CHARACTER
      && (c->ts.u.cl == 
# 14369 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null 
# 14369 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                            || c->ts.u.cl->length == 
# 14369 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                     __null
   
# 14370 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  || !gfc_is_constant_expr (c->ts.u.cl->length)
   || 
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     c->ts.u.cl->length->value.integer
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     c->ts.u.cl->length->value.integer
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     c->ts.u.cl->length->value.integer
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     c->ts.u.cl->length->value.integer
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 14371 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                       != 0))
    {
      gfc_error ("Component %qs of BIND(C) type at %L must have length one",
   c->name, &c->loc);
      return false;
    }

  if (c->attr.proc_pointer && c->ts.interface)
    {
      gfc_symbol *ifc = c->ts.interface;

      if (!sym->attr.vtype && !check_proc_interface (ifc, &c->loc))
        {
          c->tb->error = 1;
          return false;
        }

      if (ifc->attr.if_source || ifc->attr.intrinsic)
        {

          if (ifc->formal && !ifc->formal_ns)
            resolve_symbol (ifc);
          if (ifc->attr.intrinsic)
            gfc_resolve_intrinsic (ifc, &ifc->declared_at);

          if (ifc->result)
            {
              c->ts = ifc->result->ts;
              c->attr.allocatable = ifc->result->attr.allocatable;
              c->attr.pointer = ifc->result->attr.pointer;
              c->attr.dimension = ifc->result->attr.dimension;
              c->as = gfc_copy_array_spec (ifc->result->as);
              c->attr.class_ok = ifc->result->attr.class_ok;
            }
          else
            {
              c->ts = ifc->ts;
              c->attr.allocatable = ifc->attr.allocatable;
              c->attr.pointer = ifc->attr.pointer;
              c->attr.dimension = ifc->attr.dimension;
              c->as = gfc_copy_array_spec (ifc->as);
              c->attr.class_ok = ifc->attr.class_ok;
            }
          c->ts.interface = ifc;
          c->attr.function = ifc->attr.function;
          c->attr.subroutine = ifc->attr.subroutine;

          c->attr.pure = ifc->attr.pure;
          c->attr.elemental = ifc->attr.elemental;
          c->attr.recursive = ifc->attr.recursive;
          c->attr.always_explicit = ifc->attr.always_explicit;
          c->attr.ext_attr |= ifc->attr.ext_attr;

          if (ifc->ts.type == BT_CHARACTER && ifc->ts.u.cl)
            {
              gfc_charlen *cl = gfc_new_charlen (sym->ns, ifc->ts.u.cl);
              if (cl->length && !cl->resolved
                  && !gfc_resolve_expr (cl->length))
                {
                  c->tb->error = 1;
                  return false;
                }
              c->ts.u.cl = cl;
            }
        }
    }
  else if (c->attr.proc_pointer && c->ts.type == BT_UNKNOWN)
    {


      gfc_add_subroutine (&c->attr, c->name, &c->loc);
    }


  if (c->attr.proc_pointer && !c->tb->nopass && c->tb->pass_arg_num == 0
      && !sym->attr.vtype)
    {
      gfc_symbol* me_arg;

      if (c->tb->pass_arg)
        {
          gfc_formal_arglist* i;




          me_arg = 
# 14457 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 14457 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;
          c->tb->pass_arg_num = 1;
          for (i = c->ts.interface->formal; i; i = i->next)
            {
              if (!strcmp (i->sym->name, c->tb->pass_arg))
                {
                  me_arg = i->sym;
                  break;
                }
              c->tb->pass_arg_num++;
            }

          if (!me_arg)
            {
              gfc_error ("Procedure pointer component %qs with PASS(%s) "
                         "at %L has no argument %qs", c->name,
                         c->tb->pass_arg, &c->loc, c->tb->pass_arg);
              c->tb->error = 1;
              return false;
            }
        }
      else
        {


          c->tb->pass_arg_num = 1;
          if (!c->ts.interface->formal)
            {
              gfc_error ("Procedure pointer component %qs with PASS at %L "
                         "must have at least one argument",
                         c->name, &c->loc);
              c->tb->error = 1;
              return false;
            }
          me_arg = c->ts.interface->formal->sym;
        }


      ((void)(!(me_arg) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 14495, __FUNCTION__), 0 : 0));
      if ((me_arg->ts.type != BT_DERIVED && me_arg->ts.type != BT_CLASS)
          || (me_arg->ts.type == BT_DERIVED && me_arg->ts.u.derived != sym)
          || (me_arg->ts.type == BT_CLASS
              && me_arg->ts.u.derived->components->ts.u.derived != sym))
        {
          gfc_error ("Argument %qs of %qs with PASS(%s) at %L must be of"
                     " the derived type %qs", me_arg->name, c->name,
                     me_arg->name, &c->loc, sym->name);
          c->tb->error = 1;
          return false;
        }


      if (me_arg->ts.u.derived->components->attr.dimension)
        {
          gfc_error ("Argument %qs of %qs with PASS(%s) at %L "
                     "must be scalar", me_arg->name, c->name, me_arg->name,
                     &c->loc);
          c->tb->error = 1;
          return false;
        }

      if (me_arg->ts.u.derived->components->attr.class_pointer)
        {
          gfc_error ("Argument %qs of %qs with PASS(%s) at %L "
                     "may not have the POINTER attribute", me_arg->name,
                     c->name, me_arg->name, &c->loc);
          c->tb->error = 1;
          return false;
        }

      if (me_arg->ts.u.derived->components->attr.allocatable)
        {
          gfc_error ("Argument %qs of %qs with PASS(%s) at %L "
                     "may not be ALLOCATABLE", me_arg->name, c->name,
                     me_arg->name, &c->loc);
          c->tb->error = 1;
          return false;
        }

      if (gfc_type_is_extensible (sym) && me_arg->ts.type != BT_CLASS)
        {
          gfc_error ("Non-polymorphic passed-object dummy argument of %qs"
                     " at %L", c->name, &c->loc);
          return false;
        }

    }


  if (((sym->attr.is_class
        && (!sym->components->ts.u.derived->attr.extension
            || c != sym->components->ts.u.derived->components))
       || (!sym->attr.is_class
           && (!sym->attr.extension || c != sym->components)))
      && !sym->attr.vtype
      && !resolve_typespec_used (&c->ts, &c->loc, c->name))
    return false;

  super_type = gfc_get_derived_super_type (sym);



  if (super_type
      && ((sym->attr.is_class
           && c == sym->components->ts.u.derived->components)
          || (!sym->attr.is_class && c == sym->components))
      && strcmp (super_type->name, c->name) == 0)
    c->attr.access = super_type->attr.access;



  if (super_type && !sym->attr.is_class
      && gfc_find_typebound_proc (super_type, 
# 14569 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                             __null
# 14569 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                 , c->name, true, 
# 14569 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                  __null
# 14569 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                      ))
    {
      gfc_error ("Component %qs of %qs at %L has the same name as an"
                 " inherited type-bound procedure",
                 c->name, sym->name, &c->loc);
      return false;
    }

  if (c->ts.type == BT_CHARACTER && !c->attr.proc_pointer
        && !c->ts.deferred)
    {
     if (c->ts.u.cl->length == 
# 14580 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
         
# 14581 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        || (!resolve_charlen(c->ts.u.cl))
         || !gfc_is_constant_expr (c->ts.u.cl->length))
       {
         gfc_error ("Character length of component %qs needs to "
                    "be a constant specification expression at %L",
                    c->name,
                    c->ts.u.cl->length ? &c->ts.u.cl->length->where : &c->loc);
         return false;
       }
    }

  if (c->ts.type == BT_CHARACTER && c->ts.deferred
      && !c->attr.pointer && !c->attr.allocatable)
    {
      gfc_error ("Character component %qs of %qs at %L with deferred "
                 "length must be a POINTER or ALLOCATABLE",
                 c->name, sym->name, &c->loc);
      return false;
    }


  if (c->ts.type == BT_CHARACTER
      && (c->ts.deferred || c->attr.pdt_string)
      && !c->attr.function
      && !sym->attr.is_class)
    {
      char name[63 +9];
      gfc_component *strlen;
      sprintf (name, "_%s_length", c->name);
      strlen = gfc_find_component (sym, name, true, true, 
# 14610 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                         __null
# 14610 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                             );
      if (strlen == 
# 14611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null
# 14611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                       )
        {
          if (!gfc_add_component (sym, name, &strlen))
            return false;
          strlen->ts.type = BT_INTEGER;
          strlen->ts.kind = gfc_charlen_int_kind;
          strlen->attr.access = ACCESS_PRIVATE;
          strlen->attr.artificial = 1;
        }
    }

  if (c->ts.type == BT_DERIVED
      && sym->component_access != ACCESS_PRIVATE
      && gfc_check_symbol_access (sym)
      && !is_sym_host_assoc (c->ts.u.derived, sym->ns)
      && !c->ts.u.derived->attr.use_assoc
      && !gfc_check_symbol_access (c->ts.u.derived)
      && !gfc_notify_std ((1<<4), "the component %qs is a "
                          "PRIVATE type and cannot be a component of "
                          "%qs, which is PUBLIC at %L", c->name,
                          sym->name, &sym->declared_at))
    return false;

  if ((sym->attr.sequence || sym->attr.is_bind_c) && c->ts.type == BT_CLASS)
    {
      gfc_error ("Polymorphic component %s at %L in SEQUENCE or BIND(C) "
                 "type %s", c->name, &c->loc, sym->name);
      return false;
    }

  if (sym->attr.sequence)
    {
      if (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.sequence == 0)
        {
          gfc_error ("Component %s of SEQUENCE type declared at %L does "
                     "not have the SEQUENCE attribute",
                     c->ts.u.derived->name, &sym->declared_at);
          return false;
        }
    }

  if (c->ts.type == BT_DERIVED && c->ts.u.derived->attr.generic)
    c->ts.u.derived = gfc_find_dt_in_generic (c->ts.u.derived);
  else if (c->ts.type == BT_CLASS && c->attr.class_ok
           && c->ts.u.derived->components->ts.u.derived->attr.generic)
    c->ts.u.derived->components->ts.u.derived
                    = gfc_find_dt_in_generic (c->ts.u.derived->components->ts.u.derived);




  if ((c->ts.type == BT_DERIVED || c->ts.type == BT_CLASS)
       && c->ts.u.derived == sym && c->attr.allocatable == 1)
    gfc_find_vtab (&c->ts);




  if (c->ts.type == BT_DERIVED
        && c->ts.u.derived
        && c->ts.u.derived->components
        && c->attr.pointer
        && sym != c->ts.u.derived)
    add_dt_to_dt_list (c->ts.u.derived);

  if (!gfc_resolve_array_spec (c->as,
                               !(c->attr.pointer || c->attr.proc_pointer
                                 || c->attr.allocatable)))
    return false;

  if (c->initializer && !sym->attr.vtype
      && !c->attr.pdt_kind && !c->attr.pdt_len
      && !gfc_check_assign_symbol (sym, c, c->initializer))
    return false;

  return true;
}





static locus *
cons_where (gfc_expr *struct_expr)
{
  gfc_constructor *cons;

  ((void)(!(struct_expr && struct_expr->expr_type == EXPR_STRUCTURE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 14698, __FUNCTION__), 0 : 0));

  cons = gfc_constructor_first (struct_expr->value.constructor);
  for (; cons; cons = gfc_constructor_next (cons))
    {
      if (cons->expr && cons->expr->expr_type != EXPR_NULL)
        return &cons->expr->where;
    }

  return &struct_expr->where;
}




static bool
resolve_fl_struct (gfc_symbol *sym)
{
  gfc_component *c;
  gfc_expr *init = 
# 14717 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 14717 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;
  bool success;


  if (sym->attr.flavor == FL_UNION)
    {
      for (c = sym->components; c; c = c->next)
        {
          if (init && c->initializer)
            {
              gfc_error ("Conflicting initializers in union at %L and %L",
                         cons_where (init), cons_where (c->initializer));
              gfc_free_expr (c->initializer);
              c->initializer = 
# 14730 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                              __null
# 14730 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                  ;
            }
          if (init == 
# 14732 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 14732 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         )
            init = c->initializer;
        }
    }

  success = true;
  for (c = sym->components; c; c = c->next)
    if (!resolve_component (c, sym))
      success = false;

  if (!success)
    return false;

  if (sym->components)
    add_dt_to_dt_list (sym);

  return true;
}






static bool
resolve_fl_derived0 (gfc_symbol *sym)
{
  gfc_symbol* super_type;
  gfc_component *c;
  gfc_formal_arglist *f;
  bool success;

  if (sym->attr.unlimited_polymorphic)
    return true;

  super_type = gfc_get_derived_super_type (sym);


  if (super_type && sym->attr.coarray_comp && !super_type->attr.coarray_comp)
    {
      gfc_error ("As extending type %qs at %L has a coarray component, "
   "parent type %qs shall also have one", sym->name,
   &sym->declared_at, super_type->name);
      return false;
    }


  if (super_type && !resolve_fl_derived0 (super_type))
    return false;


  if (sym->attr.abstract && !gfc_type_is_extensible (sym))
    {
      gfc_error ("Non-extensible derived-type %qs at %L must not be ABSTRACT",
   sym->name, &sym->declared_at);
      return false;
    }

  c = (sym->attr.is_class) ? sym->components->ts.u.derived->components
      : sym->components;

  success = true;
  for ( ; c != 
# 14794 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 14794 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  ; c = c->next)
    if (!resolve_component (c, sym))
      success = false;

  if (!success)
    return false;


  if (global_options.x_flag_coarray != GFC_FCOARRAY_NONE
      && !sym->attr.is_class && !sym->attr.vtype)
    {
      for (c = sym->components; c; c = c->next)
 if (!c->attr.dimension && !c->attr.codimension
     && (c->attr.allocatable || c->attr.pointer))
   {
     char name[63 +9];
     gfc_component *token;
     sprintf (name, "_caf_%s", c->name);
     token = gfc_find_component (sym, name, true, true, 
# 14812 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                       __null
# 14812 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                           );
     if (token == 
# 14813 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 14813 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
       {
  if (!gfc_add_component (sym, name, &token))
    return false;
  token->ts.type = BT_VOID;
  token->ts.kind = gfc_default_integer_kind;
  token->attr.access = ACCESS_PRIVATE;
  token->attr.artificial = 1;
  token->attr.caf_token = 1;
       }
   }
    }

  check_defined_assignments (sym);

  if (!sym->attr.defined_assign_comp && super_type)
    sym->attr.defined_assign_comp
   = super_type->attr.defined_assign_comp;



  if (super_type && super_type->attr.abstract && !sym->attr.abstract
      && !sym->attr.is_class
      && !ensure_not_abstract (sym, super_type))
    return false;


  if (sym->attr.pdt_template)
    {
      for (f = sym->formal; f; f = f->next)
 {
   if (!f->sym)
     continue;
   c = gfc_find_component (sym, f->sym->name, true, true, 
# 14846 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                         __null
# 14846 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                             );
   if (c == 
# 14847 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 14847 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               )
     {
       gfc_error ("Parameterized type %qs does not have a component "
    "corresponding to parameter %qs at %L", sym->name,
    f->sym->name, &sym->declared_at);
       break;
     }
 }
    }


  add_dt_to_dt_list (sym);

  return true;
}







static bool
resolve_fl_derived (gfc_symbol *sym)
{
  gfc_symbol *gen_dt = 
# 14872 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 14872 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          ;

  if (sym->attr.unlimited_polymorphic)
    return true;

  if (!sym->attr.is_class)
    gfc_find_symbol (sym->name, sym->ns, 0, &gen_dt);
  if (gen_dt && gen_dt->generic && gen_dt->generic->next
      && (!gen_dt->generic->sym->attr.use_assoc
   || gen_dt->generic->sym->module != gen_dt->generic->next->sym->module)
      && !gfc_notify_std ((1<<4), "Generic name %qs of function "
     "%qs at %L being the same name as derived "
     "type at %L", sym->name,
     gen_dt->generic->sym == sym
     ? gen_dt->generic->next->sym->name
     : gen_dt->generic->sym->name,
     gen_dt->generic->sym == sym
     ? &gen_dt->generic->next->sym->declared_at
     : &gen_dt->generic->sym->declared_at,
     &sym->declared_at))
    return false;

  if (sym->components == 
# 14894 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                        __null 
# 14894 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             && !sym->attr.zero_comp && !sym->attr.use_assoc)
    {
      gfc_error ("Derived type %qs at %L has not been declared",
    sym->name, &sym->declared_at);
      return false;
    }


  if (!gfc_resolve_finalizers (sym, 
# 14902 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                   __null
# 14902 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                       ))
    return false;

  if (sym->attr.is_class && sym->ts.u.derived == 
# 14905 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 14905 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    )
    {

      gfc_component *data = gfc_find_component (sym, "_data", true, true, 
# 14908 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                         __null
# 14908 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                             );
      gfc_component *vptr = gfc_find_component (sym, "_vptr", true, true, 
# 14909 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                         __null
# 14909 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                             );


      if (data->ts.u.derived->attr.unlimited_polymorphic)
 return true;
      else if (vptr->ts.u.derived == 
# 14914 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                    __null
# 14914 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        )
 {
   gfc_symbol *vtab = gfc_find_derived_vtab (data->ts.u.derived);
   ((void)(!(vtab) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 14917, __FUNCTION__), 0 : 0));
   vptr->ts.u.derived = vtab->ts.u.derived;
   if (!resolve_fl_derived0 (vptr->ts.u.derived))
     return false;
 }
    }

  if (!resolve_fl_derived0 (sym))
    return false;


  if (!resolve_typebound_procedures (sym))
    return false;





  if (gfc_option.allow_std & (1<<4)
      && sym->ns->proc_name
      && sym->ns->proc_name->attr.flavor == FL_MODULE
      && sym->attr.access != ACCESS_PRIVATE
      && !(sym->attr.use_assoc || sym->attr.vtype || sym->attr.pdt_template))
    {
      gfc_symbol *vtab = gfc_find_derived_vtab (sym);
      gfc_set_sym_referenced (vtab);
    }

  return true;
}


static bool
resolve_fl_namelist (gfc_symbol *sym)
{
  gfc_namelist *nl;
  gfc_symbol *nlsym;

  for (nl = sym->namelist; nl; nl = nl->next)
    {


      if (nl->sym->as && nl->sym->as->type == AS_ASSUMED_SIZE)
      {
   gfc_error ("Assumed size array %qs in namelist %qs at %L is not "
       "allowed", nl->sym->name, sym->name, &sym->declared_at);
   return false;
 }

      if (nl->sym->as && nl->sym->as->type == AS_ASSUMED_SHAPE
   && !gfc_notify_std ((1<<4), "NAMELIST array object %qs "
         "with assumed shape in namelist %qs at %L",
         nl->sym->name, sym->name, &sym->declared_at))
 return false;

      if (is_non_constant_shape_array (nl->sym)
   && !gfc_notify_std ((1<<4), "NAMELIST array object %qs "
         "with nonconstant shape in namelist %qs at %L",
         nl->sym->name, sym->name, &sym->declared_at))
 return false;

      if (nl->sym->ts.type == BT_CHARACTER
   && (nl->sym->ts.u.cl->length == 
# 14979 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
       
# 14980 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      || !gfc_is_constant_expr (nl->sym->ts.u.cl->length))
   && !gfc_notify_std ((1<<4), "NAMELIST object %qs with "
         "nonconstant character length in "
         "namelist %qs at %L", nl->sym->name,
         sym->name, &sym->declared_at))
 return false;

    }


  if (gfc_check_symbol_access (sym))
    {
      for (nl = sym->namelist; nl; nl = nl->next)
 {
   if (!nl->sym->attr.use_assoc
       && !is_sym_host_assoc (nl->sym, sym->ns)
       && !gfc_check_symbol_access (nl->sym))
     {
       gfc_error ("NAMELIST object %qs was declared PRIVATE and "
    "cannot be member of PUBLIC namelist %qs at %L",
    nl->sym->name, sym->name, &sym->declared_at);
       return false;
     }

   if (nl->sym->ts.type == BT_DERIVED
      && (nl->sym->ts.u.derived->attr.alloc_comp
   || nl->sym->ts.u.derived->attr.pointer_comp))
    {
      if (!gfc_notify_std ((1<<4), "NAMELIST object %qs in "
      "namelist %qs at %L with ALLOCATABLE "
      "or POINTER components", nl->sym->name,
      sym->name, &sym->declared_at))
        return false;
      return true;
    }


   if (nl->sym->ts.type == BT_DERIVED
       && derived_inaccessible (nl->sym->ts.u.derived))
     {
       gfc_error ("NAMELIST object %qs has use-associated PRIVATE "
    "components and cannot be member of namelist %qs at %L",
    nl->sym->name, sym->name, &sym->declared_at);
       return false;
     }


   if (nl->sym->ts.type == BT_DERIVED
       && !is_sym_host_assoc (nl->sym->ts.u.derived, sym->ns)
       && nl->sym->ts.u.derived->attr.private_comp)
     {
       gfc_error ("NAMELIST object %qs has PRIVATE components and "
    "cannot be a member of PUBLIC namelist %qs at %L",
    nl->sym->name, sym->name, &sym->declared_at);
       return false;
     }
 }
    }




  for (nl = sym->namelist; nl; nl = nl->next)
    {
      if (nl->sym->ts.kind != 0 && nl->sym->attr.flavor == FL_VARIABLE)
 continue;

      if (nl->sym->attr.function && nl->sym == nl->sym->result)
 if ((nl->sym == sym->ns->proc_name)
        ||
     (sym->ns->parent && nl->sym == sym->ns->parent->proc_name))
   continue;

      nlsym = 
# 15053 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 15053 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 ;
      if (nl->sym->name)
 gfc_find_symbol (nl->sym->name, sym->ns, 1, &nlsym);
      if (nlsym && nlsym->attr.flavor == FL_PROCEDURE)
 {
   gfc_error ("PROCEDURE attribute conflicts with NAMELIST "
       "attribute in %qs at %L", nlsym->name,
       &sym->declared_at);
   return false;
 }
    }

  return true;
}


static bool
resolve_fl_parameter (gfc_symbol *sym)
{

  if (sym->as != 
# 15073 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
      
# 15074 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && (sym->as->type == AS_DEFERRED
          || is_non_constant_shape_array (sym)))
    {
      gfc_error ("Parameter array %qs at %L cannot be automatic "
   "or of deferred shape", sym->name, &sym->declared_at);
      return false;
    }


  if (!deferred_requirements (sym))
    return false;




  if (sym->attr.implicit_type
      && !gfc_compare_types (&sym->ts, gfc_get_default_type (sym->name,
            sym->ns)))
    {
      gfc_error ("Implicitly typed PARAMETER %qs at %L doesn't match a "
   "later IMPLICIT type", sym->name, &sym->declared_at);
      return false;
    }




  if (sym->ts.type == BT_DERIVED
      && !gfc_compare_types (&sym->ts, &sym->value->ts))
    {
      gfc_error ("Incompatible derived type in PARAMETER at %L",
   &sym->value->where);
      return false;
    }


  if (sym->ts.type == BT_CLASS)
    {
      gfc_error ("CLASS variable %qs at %L cannot have the PARAMETER attribute",
   sym->name, &sym->declared_at);
      return false;
    }

  return true;
}




static void
resolve_pdt (gfc_symbol* sym)
{
  gfc_symbol *derived = 
# 15126 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                       __null
# 15126 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           ;
  gfc_actual_arglist *param;
  gfc_component *c;
  bool const_len_exprs = true;
  bool assumed_len_exprs = false;
  symbol_attribute *attr;

  if (sym->ts.type == BT_DERIVED)
    {
      derived = sym->ts.u.derived;
      attr = &(sym->attr);
    }
  else if (sym->ts.type == BT_CLASS)
    {
      derived = sym->ts.u.derived->components->ts.u.derived;
      attr = &(sym->ts.u.derived->components->attr);
    }
  else
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 15144, __FUNCTION__));

  ((void)(!(derived->attr.pdt_type) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 15146, __FUNCTION__), 0 : 0));

  for (param = sym->param_list; param; param = param->next)
    {
      c = gfc_find_component (derived, param->name, false, true, 
# 15150 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                __null
# 15150 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                    );
      ((void)(!(c) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 15151, __FUNCTION__), 0 : 0));
      if (c->attr.pdt_kind)
 continue;

      if (param->expr && !gfc_is_constant_expr (param->expr)
   && c->attr.pdt_len)
 const_len_exprs = false;
      else if (param->spec_type == SPEC_ASSUMED)
 assumed_len_exprs = true;

      if (param->spec_type == SPEC_DEFERRED
   && !attr->allocatable && !attr->pointer)
 gfc_error ("The object %qs at %L has a deferred LEN "
     "parameter %qs and is neither allocatable "
     "nor a pointer", sym->name, &sym->declared_at,
     param->name);

    }

  if (!const_len_exprs
      && (sym->ns->proc_name->attr.is_main_program
   || sym->ns->proc_name->attr.flavor == FL_MODULE
   || sym->attr.save != SAVE_NONE))
    gfc_error ("The AUTOMATIC object %qs at %L must not have the "
        "SAVE attribute or be a variable declared in the "
        "main program, a module or a submodule(F08/C513)",
        sym->name, &sym->declared_at);

  if (assumed_len_exprs && !(sym->attr.dummy
      || sym->attr.select_type_temporary || sym->attr.associate_var))
    gfc_error ("The object %qs at %L with ASSUMED type parameters "
        "must be a dummy or a SELECT TYPE selector(F08/4.2)",
        sym->name, &sym->declared_at);
}






static void
resolve_symbol (gfc_symbol *sym)
{
  int check_constant, mp_flag;
  gfc_symtree *symtree;
  gfc_symtree *this_symtree;
  gfc_namespace *ns;
  gfc_component *c;
  symbol_attribute class_attr;
  gfc_array_spec *as;
  bool saved_specification_expr;

  if (sym->resolve_symbol_called >= 1)
    return;
  sym->resolve_symbol_called = 1;




  ((void)(!(sym->ts.type != BT_UNION) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 15210, __FUNCTION__), 0 : 0));



  if (global_options.x_flag_coarray == GFC_FCOARRAY_LIB && sym->ts.type == BT_CLASS
      && sym->ts.u.derived && sym->ts.u.derived->components
      && sym->ts.u.derived->components->attr.codimension
      && sym->ts.u.derived->components->ts.u.derived
      && (sym->ts.u.derived->components->ts.u.derived->attr.alloc_comp
   || sym->ts.u.derived->components->ts.u.derived->attr.pointer_comp))
    {
      gfc_error ("Sorry, allocatable/pointer components in polymorphic (CLASS) "
   "type coarrays at %L are unsupported", &sym->declared_at);
      return;
    }

  if (sym->attr.artificial)
    return;

  if (sym->attr.unlimited_polymorphic)
    return;

  if (sym->attr.flavor == FL_UNKNOWN
      || (sym->attr.flavor == FL_PROCEDURE && !sym->attr.intrinsic
   && !sym->attr.generic && !sym->attr.external
   && sym->attr.if_source == IFSRC_UNKNOWN
   && sym->ts.type == BT_UNKNOWN))
    {




      for (ns = gfc_current_ns->parent; ns; ns = ns->parent)
 {
   symtree = gfc_find_symtree (ns->sym_root, sym->name);
   if (symtree && (symtree->n.sym->generic ||
     (symtree->n.sym->attr.flavor == FL_PROCEDURE
      && sym->ns->construct_entities)))
     {
       this_symtree = gfc_find_symtree (gfc_current_ns->sym_root,
            sym->name);
       if (this_symtree->n.sym == sym)
  {
    symtree->n.sym->refs++;
    gfc_release_symbol (sym);
    this_symtree->n.sym = symtree->n.sym;
    return;
  }
     }
 }



      if (sym->attr.flavor == FL_UNKNOWN && sym->attr.external == 0
   && sym->attr.intrinsic == 0)
 sym->attr.flavor = FL_VARIABLE;
      else if (sym->attr.flavor == FL_UNKNOWN)
 {
   sym->attr.flavor = FL_PROCEDURE;
   if (sym->attr.dimension)
     sym->attr.function = 1;
 }
    }

  if (sym->attr.external && sym->ts.type != BT_UNKNOWN && !sym->attr.function)
    gfc_add_function (&sym->attr, sym->name, &sym->declared_at);

  if (sym->attr.procedure && sym->attr.if_source != IFSRC_DECL
      && !resolve_procedure_interface (sym))
    return;

  if (sym->attr.is_protected && !sym->attr.proc_pointer
      && (sym->attr.procedure || sym->attr.external))
    {
      if (sym->attr.external)
 gfc_error ("PROTECTED attribute conflicts with EXTERNAL attribute "
            "at %L", &sym->declared_at);
      else
 gfc_error ("PROCEDURE attribute conflicts with PROTECTED attribute "
            "at %L", &sym->declared_at);

      return;
    }

  if (sym->attr.flavor == FL_DERIVED && !resolve_fl_derived (sym))
    return;

  else if ((sym->attr.flavor == FL_STRUCT || sym->attr.flavor == FL_UNION)
           && !resolve_fl_struct (sym))
    return;






  mp_flag = (sym->result != 
# 15306 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null 
# 15306 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                && sym->result != sym);




  if (sym->attr.flavor != FL_MODULE && sym->attr.intrinsic
      && !gfc_resolve_intrinsic (sym, &sym->declared_at))
    return;


  if (sym->assoc)
    resolve_assoc_var (sym, true);


  if (sym->ts.type == BT_UNKNOWN)
    {
      if (sym->attr.flavor == FL_VARIABLE || sym->attr.flavor == FL_PARAMETER)
 {
   gfc_set_default_type (sym, 1, 
# 15324 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
# 15324 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    );
 }

      if (sym->attr.flavor == FL_PROCEDURE && sym->attr.external
   && !sym->attr.function && !sym->attr.subroutine
   && gfc_get_default_type (sym->name, sym->ns)->type == BT_UNKNOWN)
 gfc_add_subroutine (&sym->attr, sym->name, &sym->declared_at);

      if (sym->attr.flavor == FL_PROCEDURE && sym->attr.function)
 {


   if (!mp_flag)
     {
       if (!sym->attr.mixed_entry_master)
  gfc_set_default_type (sym, sym->attr.external, 
# 15339 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
# 15339 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                    );
     }
   else
     {

       resolve_symbol (sym->result);

       if (!sym->result->attr.proc_pointer)
  {
    sym->ts = sym->result->ts;
    sym->as = gfc_copy_array_spec (sym->result->as);
    sym->attr.dimension = sym->result->attr.dimension;
    sym->attr.pointer = sym->result->attr.pointer;
    sym->attr.allocatable = sym->result->attr.allocatable;
    sym->attr.contiguous = sym->result->attr.contiguous;
  }
     }
 }
    }
  else if (mp_flag && sym->attr.flavor == FL_PROCEDURE && sym->attr.function)
    {
      bool saved_specification_expr = specification_expr;
      specification_expr = true;
      gfc_resolve_array_spec (sym->result->as, false);
      specification_expr = saved_specification_expr;
    }

  if (sym->ts.type == BT_CLASS && sym->attr.class_ok && sym->ts.u.derived)
    {
      as = sym->ts.u.derived->components->as;
      class_attr = sym->ts.u.derived->components->attr;
      class_attr.pointer = class_attr.class_pointer;
    }
  else
    {
      class_attr = sym->attr;
      as = sym->as;
    }


  if (sym->attr.contiguous
      && (!class_attr.dimension
   || (as->type != AS_ASSUMED_SHAPE && as->type != AS_ASSUMED_RANK
       && !class_attr.pointer)))
    {
      gfc_error ("%qs at %L has the CONTIGUOUS attribute but is not an "
   "array pointer or an assumed-shape or assumed-rank array",
   sym->name, &sym->declared_at);
      return;
    }





  if (as)
    {


      if (as->type == AS_IMPLIED_SHAPE)
 {
   int i;
   for (i=0; i<as->rank; i++)
     {
       if (as->lower[i] != 
# 15403 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                          __null 
# 15403 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                               && as->upper[i] == 
# 15403 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                  __null
# 15403 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                      )
  {
    gfc_error ("Bad specification for assumed size array at %L",
        &as->lower[i]->where);
    return;
  }
     }
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 15410, __FUNCTION__));
 }

      if (((as->type == AS_ASSUMED_SIZE && !as->cp_was_assumed)
    || as->type == AS_ASSUMED_SHAPE)
   && !sym->attr.dummy && !sym->attr.select_type_temporary)
 {
   if (as->type == AS_ASSUMED_SIZE)
     gfc_error ("Assumed size array at %L must be a dummy argument",
         &sym->declared_at);
   else
     gfc_error ("Assumed shape array at %L must be a dummy argument",
         &sym->declared_at);
   return;
 }

      if (as->type == AS_ASSUMED_RANK && !sym->attr.dummy
   && !sym->attr.select_type_temporary
   && !(cs_base && cs_base->current
        && cs_base->current->op == EXEC_SELECT_RANK))
 {
   gfc_error ("Assumed-rank array at %L must be a dummy argument",
       &sym->declared_at);
   return;
 }
      if (as->type == AS_ASSUMED_RANK
   && (sym->attr.codimension || sym->attr.value))
 {
   gfc_error ("Assumed-rank array at %L may not have the VALUE or "
       "CODIMENSION attribute", &sym->declared_at);
   return;
 }
    }





  if (!sym->attr.dummy
      && (sym->attr.optional || sym->attr.intent != INTENT_UNKNOWN))
    {
      gfc_error ("Symbol at %L is not a DUMMY variable", &sym->declared_at);
      return;
    }

  if (sym->attr.value && !sym->attr.dummy)
    {
      gfc_error ("%qs at %L cannot have the VALUE attribute because "
   "it is not a dummy argument", sym->name, &sym->declared_at);
      return;
    }

  if (sym->attr.value && sym->ts.type == BT_CHARACTER)
    {
      gfc_charlen *cl = sym->ts.u.cl;
      if (!cl || !cl->length || cl->length->expr_type != EXPR_CONSTANT)
 {
   gfc_error ("Character dummy variable %qs at %L with VALUE "
       "attribute must have constant length",
       sym->name, &sym->declared_at);
   return;
 }

      if (sym->ts.is_c_interop
   && 
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p ((
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0) && (
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) && ((static_cast<unsigned long> (
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ))) == 0 ? ((
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     cl->length->value.integer
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     cl->length->value.integer
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     cl->length->value.integer
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,(static_cast<unsigned long> (
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )))) : __gmpz_cmp_si (
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     cl->length->value.integer
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 15474 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                               != 0)
 {
   gfc_error ("C interoperable character dummy variable %qs at %L "
       "with VALUE attribute must have length one",
       sym->name, &sym->declared_at);
   return;
 }
    }

  if (sym->ts.type == BT_DERIVED && !sym->attr.is_iso_c
      && sym->ts.u.derived->attr.generic)
    {
      sym->ts.u.derived = gfc_find_dt_in_generic (sym->ts.u.derived);
      if (!sym->ts.u.derived)
 {
   gfc_error ("The derived type %qs at %L is of type %qs, "
       "which has not been defined", sym->name,
       &sym->declared_at, sym->ts.u.derived->name);
   sym->ts.type = BT_UNKNOWN;
   return;
 }
    }



    if (sym->attr.ext_attr & (1 << EXT_ATTR_NO_ARG_CHECK))
      {
 if (!sym->attr.dummy)
   {
     gfc_error ("Variable %s at %L with NO_ARG_CHECK attribute shall be "
         "a dummy argument", sym->name, &sym->declared_at);
     return;
   }

 if (sym->ts.type != BT_ASSUMED && sym->ts.type != BT_INTEGER
     && sym->ts.type != BT_REAL && sym->ts.type != BT_LOGICAL
     && sym->ts.type != BT_COMPLEX)
   {
     gfc_error ("Variable %s at %L with NO_ARG_CHECK attribute shall be "
         "of type TYPE(*) or of an numeric intrinsic type",
         sym->name, &sym->declared_at);
     return;
   }

      if (sym->attr.allocatable || sym->attr.codimension
   || sym->attr.pointer || sym->attr.value)
 {
   gfc_error ("Variable %s at %L with NO_ARG_CHECK attribute may not "
       "have the ALLOCATABLE, CODIMENSION, POINTER or VALUE "
       "attribute", sym->name, &sym->declared_at);
   return;
 }

      if (sym->attr.intent == INTENT_OUT)
 {
   gfc_error ("Variable %s at %L with NO_ARG_CHECK attribute may not "
       "have the INTENT(OUT) attribute",
       sym->name, &sym->declared_at);
   return;
 }
      if (sym->attr.dimension && sym->as->type != AS_ASSUMED_SIZE)
 {
   gfc_error ("Variable %s at %L with NO_ARG_CHECK attribute shall "
       "either be a scalar or an assumed-size array",
       sym->name, &sym->declared_at);
   return;
 }




      sym->ts.type = BT_ASSUMED;
      sym->as = ((gfc_array_spec *) xcalloc (1, sizeof (gfc_array_spec)));
      sym->as->type = AS_ASSUMED_SIZE;
      sym->as->rank = 1;
      sym->as->lower[0] = gfc_get_int_expr (gfc_default_integer_kind, 
# 15549 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                                     __null
# 15549 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                                         , 1);
    }
  else if (sym->ts.type == BT_ASSUMED)
    {

      if (!sym->attr.dummy)
 {
   gfc_error ("Assumed type of variable %s at %L is only permitted "
       "for dummy variables", sym->name, &sym->declared_at);
   return;
 }
      if (sym->attr.allocatable || sym->attr.codimension
   || sym->attr.pointer || sym->attr.value)
     {
   gfc_error ("Assumed-type variable %s at %L may not have the "
       "ALLOCATABLE, CODIMENSION, POINTER or VALUE attribute",
       sym->name, &sym->declared_at);
   return;
 }
      if (sym->attr.intent == INTENT_OUT)
     {
   gfc_error ("Assumed-type variable %s at %L may not have the "
       "INTENT(OUT) attribute",
       sym->name, &sym->declared_at);
   return;
 }
      if (sym->attr.dimension && sym->as->type == AS_EXPLICIT)
 {
   gfc_error ("Assumed-type variable %s at %L shall not be an "
       "explicit-shape array", sym->name, &sym->declared_at);
   return;
 }
    }
# 15592 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  if (sym->attr.is_bind_c && sym->attr.use_assoc == 0
      && sym->attr.dummy == 0 && sym->attr.flavor != FL_PROCEDURE
      && sym->attr.flavor != FL_DERIVED)
    {
      bool t = true;



      if (sym->ns->proc_name->attr.flavor != FL_MODULE &&
          sym->attr.in_common == 0)
 {
   gfc_error ("Variable %qs at %L cannot be BIND(C) because it "
       "is neither a COMMON block nor declared at the "
       "module level scope", sym->name, &(sym->declared_at));
   t = false;
 }
      else if (sym->ts.type == BT_CHARACTER
        && (sym->ts.u.cl == 
# 15609 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                           __null 
# 15609 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                || sym->ts.u.cl->length == 
# 15609 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                           __null
     
# 15610 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
    || !gfc_is_constant_expr (sym->ts.u.cl->length)
     || 
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       (__builtin_constant_p ((
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       1
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       ) >= 0) && (
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       1
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       ) >= 0 ? (__builtin_constant_p ((static_cast<unsigned long> (
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       1
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       ))) && ((static_cast<unsigned long> (
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       1
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       ))) == 0 ? ((
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       sym->ts.u.cl->length->value.integer
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       )->_mp_size < 0 ? -1 : (
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       sym->ts.u.cl->length->value.integer
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       )->_mp_size > 0) : __gmpz_cmp_ui (
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       sym->ts.u.cl->length->value.integer
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       ,(static_cast<unsigned long> (
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       1
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       )))) : __gmpz_cmp_si (
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       sym->ts.u.cl->length->value.integer
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       ,
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
       1
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
       )) 
# 15611 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                           != 0))
 {
   gfc_error ("BIND(C) Variable %qs at %L must have length one",
       sym->name, &sym->declared_at);
   t = false;
 }
      else if (sym->common_head != 
# 15617 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null 
# 15617 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                       && sym->attr.implicit_type == 0)
        {
          t = verify_com_block_vars_c_interop (sym->common_head);
        }
      else if (sym->attr.implicit_type == 0)
 {


   if (sym->ts.type == BT_DERIVED &&
              sym->ts.u.derived->attr.is_c_interop != 1)
            {




              if (sym->ts.u.derived->attr.is_bind_c != 1)
                verify_bind_c_derived_type (sym->ts.u.derived);
              t = false;
            }





          t = verify_bind_c_sym (sym, &(sym->ts), sym->attr.in_common,
                                 sym->common_block);
 }

      if (!t)
        {


          sym->attr.is_bind_c = 0;
          return;
        }
    }
# 15662 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  if (sym->ts.type == BT_DERIVED && !sym->attr.is_iso_c
      && sym->ts.u.derived->components == 
# 15663 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                         __null
      
# 15664 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     && !sym->ts.u.derived->attr.zero_comp)
    {
      gfc_error ("The derived type %qs at %L is of type %qs, "
   "which has not been defined", sym->name,
    &sym->declared_at, sym->ts.u.derived->name);
      sym->ts.type = BT_UNKNOWN;
      return;
    }




  if (sym->ts.type == BT_DERIVED
 && sym->ts.u.derived->attr.use_assoc
 && sym->ns->proc_name
 && sym->ns->proc_name->attr.flavor == FL_MODULE
        && !resolve_fl_derived (sym->ts.u.derived))
    return;





  if (sym->ts.type == BT_DERIVED
      && sym->ns->proc_name && sym->ns->proc_name->attr.flavor == FL_MODULE
      && !sym->ts.u.derived->attr.use_assoc
      && gfc_check_symbol_access (sym)
      && !gfc_check_symbol_access (sym->ts.u.derived)
      && !gfc_notify_std ((1<<4), "PUBLIC %s %qs at %L of PRIVATE "
     "derived type %qs",
     (sym->attr.flavor == FL_PARAMETER)
     ? "parameter" : "variable",
     sym->name, &sym->declared_at,
     sym->ts.u.derived->name))
    return;


  if (sym->ts.type == BT_DERIVED
      && ((sym->ts.u.derived->from_intmod == INTMOD_ISO_FORTRAN_ENV
    && sym->ts.u.derived->intmod_sym_id == ISOFORTRAN_LOCK_TYPE)
   || sym->ts.u.derived->attr.lock_comp)
      && !sym->attr.codimension && !sym->ts.u.derived->attr.coarray_comp)
    {
      gfc_error ("Variable %s at %L of type LOCK_TYPE or with subcomponent of "
   "type LOCK_TYPE must be a coarray", sym->name,
   &sym->declared_at);
      return;
    }


  if (sym->ts.type == BT_DERIVED
      && ((sym->ts.u.derived->from_intmod == INTMOD_ISO_FORTRAN_ENV
    && sym->ts.u.derived->intmod_sym_id == ISOFORTRAN_EVENT_TYPE)
   || sym->ts.u.derived->attr.event_comp)
      && !sym->attr.codimension && !sym->ts.u.derived->attr.coarray_comp)
    {
      gfc_error ("Variable %s at %L of type EVENT_TYPE or with subcomponent of "
   "type EVENT_TYPE must be a coarray", sym->name,
   &sym->declared_at);
      return;
    }



  if (sym->ts.type == BT_DERIVED
      && sym->attr.dummy
      && sym->attr.intent == INTENT_OUT
      && sym->as
      && sym->as->type == AS_ASSUMED_SIZE)
    {
      for (c = sym->ts.u.derived->components; c; c = c->next)
 {
   if (c->initializer)
     {
       gfc_error ("The INTENT(OUT) dummy argument %qs at %L is "
    "ASSUMED SIZE and so cannot have a default initializer",
    sym->name, &sym->declared_at);
       return;
     }
 }
    }


  if (sym->ts.type == BT_DERIVED && sym->attr.dummy
      && sym->attr.intent == INTENT_OUT && sym->attr.lock_comp)
    {
      gfc_error ("Dummy argument %qs at %L of LOCK_TYPE shall not be "
   "INTENT(OUT)", sym->name, &sym->declared_at);
      return;
    }


  if (sym->ts.type == BT_DERIVED && sym->attr.dummy
      && sym->attr.intent == INTENT_OUT && sym->attr.event_comp)
    {
      gfc_error ("Dummy argument %qs at %L of EVENT_TYPE shall not be "
   "INTENT(OUT)", sym->name, &sym->declared_at);
      return;
    }


  if ((((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)
  || (sym->ts.type == BT_CLASS && sym->attr.class_ok
      && sym->ts.u.derived && sym->ts.u.derived->components
      && sym->ts.u.derived->components->attr.coarray_comp))
       || class_attr.codimension)
      && (sym->attr.result || sym->result == sym))
    {
      gfc_error ("Function result %qs at %L shall not be a coarray or have "
          "a coarray component", sym->name, &sym->declared_at);
      return;
    }


  if (sym->attr.codimension && sym->ts.type == BT_DERIVED
      && sym->ts.u.derived->ts.is_iso_c)
    {
      gfc_error ("Variable %qs at %L of TYPE(C_PTR) or TYPE(C_FUNPTR) "
   "shall not be a coarray", sym->name, &sym->declared_at);
      return;
    }


  if (((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)
 || (sym->ts.type == BT_CLASS && sym->attr.class_ok
     && sym->ts.u.derived && sym->ts.u.derived->components
     && sym->ts.u.derived->components->attr.coarray_comp))
      && (class_attr.codimension || class_attr.pointer || class_attr.dimension
   || class_attr.allocatable))
    {
      gfc_error ("Variable %qs at %L with coarray component shall be a "
   "nonpointer, nonallocatable scalar, which is not a coarray",
   sym->name, &sym->declared_at);
      return;
    }


  if (class_attr.codimension
      && !(class_attr.allocatable || sym->attr.dummy || sym->attr.save
    || sym->attr.select_type_temporary
    || sym->attr.associate_var
    || (sym->ns->save_all && !sym->attr.automatic)
    || sym->ns->proc_name->attr.flavor == FL_MODULE
    || sym->ns->proc_name->attr.is_main_program
    || sym->attr.function || sym->attr.result || sym->attr.use_assoc))
    {
      gfc_error ("Variable %qs at %L is a coarray and is not ALLOCATABLE, SAVE "
   "nor a dummy argument", sym->name, &sym->declared_at);
      return;
    }

  else if (class_attr.codimension && !sym->attr.select_type_temporary
    && !class_attr.allocatable && as && as->cotype == AS_DEFERRED)
    {
      gfc_error ("Coarray variable %qs at %L shall not have codimensions with "
   "deferred shape", sym->name, &sym->declared_at);
      return;
    }
  else if (class_attr.codimension && class_attr.allocatable && as
    && (as->cotype != AS_DEFERRED || as->type != AS_DEFERRED))
    {
      gfc_error ("Allocatable coarray variable %qs at %L must have "
   "deferred shape", sym->name, &sym->declared_at);
      return;
    }


  if ((((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)
 || (sym->ts.type == BT_CLASS && sym->attr.class_ok
     && sym->ts.u.derived && sym->ts.u.derived->components
     && sym->ts.u.derived->components->attr.coarray_comp))
       || (class_attr.codimension && class_attr.allocatable))
      && sym->attr.dummy && sym->attr.intent == INTENT_OUT)
    {
      gfc_error ("Variable %qs at %L is INTENT(OUT) and can thus not be an "
   "allocatable coarray or have coarray components",
   sym->name, &sym->declared_at);
      return;
    }

  if (class_attr.codimension && sym->attr.dummy
      && sym->ns->proc_name && sym->ns->proc_name->attr.is_bind_c)
    {
      gfc_error ("Coarray dummy variable %qs at %L not allowed in BIND(C) "
   "procedure %qs", sym->name, &sym->declared_at,
   sym->ns->proc_name->name);
      return;
    }

  if (sym->ts.type == BT_LOGICAL
      && ((sym->attr.function && sym->attr.is_bind_c && sym->result == sym)
   || ((sym->attr.dummy || sym->attr.result) && sym->ns->proc_name
       && sym->ns->proc_name->attr.is_bind_c)))
    {
      int i;
      for (i = 0; gfc_logical_kinds[i].kind; i++)
        if (gfc_logical_kinds[i].kind == sym->ts.kind)
          break;
      if (!gfc_logical_kinds[i].c_bool && sym->attr.dummy
   && !gfc_notify_std ((1<<5), "LOGICAL dummy argument %qs at "
         "%L with non-C_Bool kind in BIND(C) procedure "
         "%qs", sym->name, &sym->declared_at,
         sym->ns->proc_name->name))
 return;
      else if (!gfc_logical_kinds[i].c_bool
        && !gfc_notify_std ((1<<5), "LOGICAL result variable "
       "%qs at %L with non-C_Bool kind in "
       "BIND(C) procedure %qs", sym->name,
       &sym->declared_at,
       sym->attr.function ? sym->name
       : sym->ns->proc_name->name))
 return;
    }

  switch (sym->attr.flavor)
    {
    case FL_VARIABLE:
      if (!resolve_fl_variable (sym, mp_flag))
 return;
      break;

    case FL_PROCEDURE:
      if (sym->formal && !sym->formal_ns)
 {

   gfc_formal_arglist *formal = sym->formal;

   for (; formal; formal = formal->next)
     if (formal->sym && formal->sym->attr.flavor == FL_NAMELIST)
       {
  gfc_error ("Namelist %qs cannot be an argument to "
      "subroutine or function at %L",
      formal->sym->name, &sym->declared_at);
  return;
       }
 }

      if (!resolve_fl_procedure (sym, mp_flag))
 return;
      break;

    case FL_NAMELIST:
      if (!resolve_fl_namelist (sym))
 return;
      break;

    case FL_PARAMETER:
      if (!resolve_fl_parameter (sym))
 return;
      break;

    default:
      break;
    }




  check_constant = sym->attr.in_common && !sym->attr.pointer;




  if ((sym->attr.function || sym->attr.result) && sym->as)
    formal_arg_flag = true;

  saved_specification_expr = specification_expr;
  specification_expr = true;
  gfc_resolve_array_spec (sym->as, check_constant);
  specification_expr = saved_specification_expr;

  formal_arg_flag = false;


  if (sym->formal_ns && sym->formal_ns != gfc_current_ns
      && !sym->attr.contained && !sym->attr.intrinsic)
    gfc_resolve (sym->formal_ns);


  if (sym->formal && !sym->formal_ns)
    {
      gfc_formal_arglist *formal = sym->formal;
      while (formal && !formal->sym)
 formal = formal->next;

      if (formal)
 {
   sym->formal_ns = formal->sym->ns;
   if (sym->formal_ns && sym->ns != formal->sym->ns)
     sym->formal_ns->refs++;
 }
    }


  if (sym->attr.threadprivate && !sym->attr.save
      && !(sym->ns->save_all && !sym->attr.automatic)
      && (!sym->attr.in_common
   && sym->module == 
# 15961 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
   
# 15962 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && (sym->ns->proc_name == 
# 15962 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
       
# 15963 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      || sym->ns->proc_name->attr.flavor != FL_MODULE)))
    gfc_error ("Threadprivate at %L isn't SAVEd", &sym->declared_at);


  if (sym->attr.omp_declare_target
      && sym->attr.flavor == FL_VARIABLE
      && !sym->attr.save
      && !(sym->ns->save_all && !sym->attr.automatic)
      && (!sym->attr.in_common
   && sym->module == 
# 15972 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
   
# 15973 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && (sym->ns->proc_name == 
# 15973 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                            __null
       
# 15974 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      || sym->ns->proc_name->attr.flavor != FL_MODULE)))
    gfc_error ("!$OMP DECLARE TARGET variable %qs at %L isn't SAVEd",
        sym->name, &sym->declared_at);




  if (sym->ts.type == BT_DERIVED
      && !sym->value
      && !sym->attr.allocatable
      && !sym->attr.alloc_comp)
    {
      symbol_attribute *a = &sym->attr;

      if ((!a->save && !a->dummy && !a->pointer
    && !a->in_common && !a->use_assoc
    && a->referenced
    && !((a->function || a->result)
  && (!a->dimension
      || sym->ts.u.derived->attr.alloc_comp
      || sym->ts.u.derived->attr.pointer_comp))
    && !(a->function && sym != sym->result))
   || (a->dummy && a->intent == INTENT_OUT && !a->pointer))
 apply_default_init (sym);
      else if (a->function && sym->result && a->access != ACCESS_PRIVATE
        && (sym->ts.u.derived->attr.alloc_comp
     || sym->ts.u.derived->attr.pointer_comp))


 sym->result->attr.referenced = 1;
    }

  if (sym->ts.type == BT_CLASS && sym->ns == gfc_current_ns
      && sym->attr.dummy && sym->attr.intent == INTENT_OUT
      && !sym->ts.u.derived->components->attr.class_pointer
      && !sym->ts.u.derived->components->attr.allocatable)
    apply_default_init (sym);


  if (sym->attr.flavor == FL_VARIABLE || sym->attr.flavor == FL_PARAMETER
      || (sym->attr.flavor == FL_PROCEDURE && sym->attr.function))
    if (!resolve_typespec_used (&sym->ts, &sym->declared_at, sym->name))
      return;

  if (sym->param_list)
    resolve_pdt (sym);
}




static struct
{
  gfc_data_value *vnode;
  mpz_t left;
}
values;




static bool
next_data_value (void)
{
  while (
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        (__builtin_constant_p (
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) && (
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) == 0 ? ((
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        values.left
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size < 0 ? -1 : (
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        values.left
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size > 0) : __gmpz_cmp_ui (
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        values.left
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ,
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )) 
# 16038 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    == 0)
    {

      if (values.vnode->next == 
# 16041 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                               __null
# 16041 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                   )
 return false;

      values.vnode = values.vnode->next;
      
# 16045 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_set 
# 16045 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (values.left, values.vnode->repeat);
    }

  return true;
}


static bool
check_data_variable (gfc_data_variable *var, locus *where)
{
  gfc_expr *e;
  mpz_t size;
  mpz_t offset;
  bool t;
  ar_type mark = AR_UNKNOWN;
  int i;
  mpz_t section_index[15];
  gfc_ref *ref;
  gfc_array_ref *ar;
  gfc_symbol *sym;
  int has_pointer;

  if (!gfc_resolve_expr (var->expr))
    return false;

  ar = 
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __null
# 16070 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          ;
  
# 16071 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_init_set_si 
# 16071 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 (offset, 0);
  e = var->expr;

  if (e->expr_type == EXPR_FUNCTION && e->value.function.isym
      && e->value.function.isym->id == GFC_ISYM_CAF_GET)
    e = e->value.function.actual->expr;

  if (e->expr_type != EXPR_VARIABLE)
    {
      gfc_error ("Expecting definable entity near %L", where);
      return false;
    }

  sym = e->symtree->n.sym;

  if (sym->ns->is_block_data && !sym->attr.in_common)
    {
      gfc_error ("BLOCK DATA element %qs at %L must be in COMMON",
   sym->name, &sym->declared_at);
      return false;
    }

  if (e->ref == 
# 16093 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
               __null 
# 16093 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    && sym->as)
    {
      gfc_error ("DATA array %qs at %L must be specified in a previous"
   " declaration", sym->name, where);
      return false;
    }

  if (gfc_is_coindexed (e))
    {
      gfc_error ("DATA element %qs at %L cannot have a coindex", sym->name,
   where);
      return false;
    }

  has_pointer = sym->attr.pointer;

  for (ref = e->ref; ref; ref = ref->next)
    {
      if (ref->type == REF_COMPONENT && ref->u.c.component->attr.pointer)
 has_pointer = 1;

      if (has_pointer)
 {
   if (ref->type == REF_ARRAY && ref->u.ar.type != AR_FULL)
     {
       gfc_error ("DATA element %qs at %L is a pointer and so must "
    "be a full array", sym->name, where);
       return false;
     }

   if (values.vnode->expr->expr_type == EXPR_CONSTANT)
     {
       gfc_error ("DATA object near %L has the pointer attribute "
    "and the corresponding DATA value is not a valid "
    "initial-data-target", where);
       return false;
     }
 }
    }

  if (e->rank == 0 || has_pointer)
    {
      
# 16135 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_init_set_ui 
# 16135 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     (size, 1);
      ref = 
# 16136 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
           __null
# 16136 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               ;
    }
  else
    {
      ref = e->ref;


      for (ref = e->ref; ref; ref = ref->next)
 {
   if (ref->type != REF_ARRAY)
     continue;
   if (ref->u.ar.type == AR_ELEMENT)
     continue;
   break;
 }
      ((void)(!(ref) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 16151, __FUNCTION__), 0 : 0));


      switch (ref->u.ar.type)
 {
 case AR_FULL:
   mark = AR_FULL;
   break;

 case AR_SECTION:
   ar = &ref->u.ar;

   gfc_get_section_index (ar, section_index, &offset);
   mark = AR_SECTION;
   break;

 default:
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 16168, __FUNCTION__));
 }

      if (!gfc_array_size (e, &size))
 {
   gfc_error ("Nonconstant array section at %L in DATA statement",
       where);
   
# 16175 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __gmpz_clear 
# 16175 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            (offset);
   return false;
 }
    }

  t = true;

  while (
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        (__builtin_constant_p (
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) && (
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) == 0 ? ((
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        size
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size < 0 ? -1 : (
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        size
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size > 0) : __gmpz_cmp_ui (
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        size
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ,
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )) 
# 16182 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             > 0)
    {
      if (!next_data_value ())
 {
   gfc_error ("DATA statement at %L has more variables than values",
       where);
   t = false;
   break;
 }

      t = gfc_check_assign (var->expr, values.vnode->expr, 0);
      if (!t)
 break;






      if (mark == AR_FULL && ref && ref->next == 
# 16201 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                                __null
   
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
  && 
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     (__builtin_constant_p (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) && (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ) == 0 ? ((
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     values.left
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size < 0 ? -1 : (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     values.left
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )->_mp_size > 0) : __gmpz_cmp_ui (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     values.left
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     ,
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
     1
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     )) 
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                 > 0 && 
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        (__builtin_constant_p (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        1
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        ) && (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        1
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        ) == 0 ? ((
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        size
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        )->_mp_size < 0 ? -1 : (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        size
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        )->_mp_size > 0) : __gmpz_cmp_ui (
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        size
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        ,
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                        1
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                        )) 
# 16202 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                                             > 0)
 {
   mpz_t range;

   if (
# 16206 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_cmp 
# 16206 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (size, values.left) >= 0)
     {
       
# 16208 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_init_set 
# 16208 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (range, values.left);
       
# 16209 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_sub 
# 16209 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (size, size, values.left);
       
# 16210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_set_ui 
# 16210 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 (values.left, 0);
     }
   else
     {
       
# 16214 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_init_set 
# 16214 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   (range, size);
       
# 16215 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_sub 
# 16215 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (values.left, values.left, size);
       
# 16216 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
      __gmpz_set_ui 
# 16216 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 (size, 0);
     }

   t = gfc_assign_data_value (var->expr, values.vnode->expr,
         offset, &range);

   
# 16222 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __gmpz_add 
# 16222 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          (offset, offset, range);
   
# 16223 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __gmpz_clear 
# 16223 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
            (range);

   if (!t)
     break;
 }


      else
 {
   
# 16232 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __gmpz_sub_ui 
# 16232 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (values.left, values.left, 1);
   
# 16233 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
  __gmpz_sub_ui 
# 16233 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (size, size, 1);

   t = gfc_assign_data_value (var->expr, values.vnode->expr,
         offset, 
# 16236 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 16236 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    );
   if (!t)
     break;

   if (mark == AR_FULL)
     
# 16241 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
    __gmpz_add_ui 
# 16241 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
               (offset, offset, 1);



   else if (mark == AR_SECTION)
     gfc_advance_section (section_index, ar, &offset);
 }
    }

  if (mark == AR_SECTION)
    {
      for (i = 0; i < ar->dimen; i++)
 
# 16253 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
__gmpz_clear 
# 16253 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          (section_index[i]);
    }

  
# 16256 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_clear 
# 16256 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (size);
  
# 16257 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_clear 
# 16257 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (offset);

  return t;
}


static bool traverse_data_var (gfc_data_variable *, locus *);



static bool
traverse_data_list (gfc_data_variable *var, locus *where)
{
  mpz_t trip;
  iterator_stack frame;
  gfc_expr *e, *start, *end, *step;
  bool retval = true;

  
# 16275 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_init 
# 16275 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          (frame.value);
  
# 16276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_init 
# 16276 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
          (trip);

  start = gfc_copy_expr (var->iter.start);
  end = gfc_copy_expr (var->iter.end);
  step = gfc_copy_expr (var->iter.step);

  if (!gfc_simplify_expr (start, 1)
      || start->expr_type != EXPR_CONSTANT)
    {
      gfc_error ("start of implied-do loop at %L could not be "
   "simplified to a constant value", &start->where);
      retval = false;
      goto cleanup;
    }
  if (!gfc_simplify_expr (end, 1)
      || end->expr_type != EXPR_CONSTANT)
    {
      gfc_error ("end of implied-do loop at %L could not be "
   "simplified to a constant value", &start->where);
      retval = false;
      goto cleanup;
    }
  if (!gfc_simplify_expr (step, 1)
      || step->expr_type != EXPR_CONSTANT)
    {
      gfc_error ("step of implied-do loop at %L could not be "
   "simplified to a constant value", &start->where);
      retval = false;
      goto cleanup;
    }

  
# 16307 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_set 
# 16307 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (trip, end->value.integer);
  
# 16308 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_sub 
# 16308 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (trip, trip, start->value.integer);
  
# 16309 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_add 
# 16309 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (trip, trip, step->value.integer);

  
# 16311 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_fdiv_q 
# 16311 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (trip, trip, step->value.integer);

  
# 16313 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_set 
# 16313 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
         (frame.value, start->value.integer);

  frame.prev = iter_stack;
  frame.variable = var->iter.var->symtree;
  iter_stack = &frame;

  while (
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        (__builtin_constant_p (
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) && (
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ) == 0 ? ((
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        trip
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size < 0 ? -1 : (
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        trip
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )->_mp_size > 0) : __gmpz_cmp_ui (
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        trip
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        ,
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
        0
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
        )) 
# 16319 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                             > 0)
    {
      if (!traverse_data_var (var->list, where))
 {
   retval = false;
   goto cleanup;
 }

      e = gfc_copy_expr (var->expr);
      if (!gfc_simplify_expr (e, 1))
 {
   gfc_free_expr (e);
   retval = false;
   goto cleanup;
 }

      
# 16335 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_add 
# 16335 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
             (frame.value, frame.value, step->value.integer);

      
# 16337 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
     __gmpz_sub_ui 
# 16337 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                (trip, trip, 1);
    }

cleanup:
  
# 16341 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_clear 
# 16341 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (frame.value);
  
# 16342 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
 __gmpz_clear 
# 16342 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (trip);

  gfc_free_expr (start);
  gfc_free_expr (end);
  gfc_free_expr (step);

  iter_stack = frame.prev;
  return retval;
}




static bool
traverse_data_var (gfc_data_variable *var, locus *where)
{
  bool t;

  for (; var; var = var->next)
    {
      if (var->expr == 
# 16362 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null
# 16362 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                          )
 t = traverse_data_list (var, where);
      else
 t = check_data_variable (var, where);

      if (!t)
 return false;
    }

  return true;
}






static bool
resolve_data_variables (gfc_data_variable *d)
{
  for (; d; d = d->next)
    {
      if (d->list == 
# 16384 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                    __null
# 16384 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        )
 {
   if (!gfc_resolve_expr (d->expr))
     return false;
 }
      else
 {
   if (!gfc_resolve_iterator (&d->iter, false, true))
     return false;

   if (!resolve_data_variables (d->list))
     return false;
 }
    }

  return true;
}






static void
resolve_data (gfc_data *d)
{

  if (!resolve_data_variables (d->var))
    return;

  values.vnode = d->value;
  if (d->value == 
# 16415 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                 __null
# 16415 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                     )
    
# 16416 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_set_ui 
# 16416 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              (values.left, 0);
  else
    
# 16418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
   __gmpz_set 
# 16418 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
           (values.left, d->value->repeat);

  if (!traverse_data_var (d->var, &d->where))
    return;



  if (next_data_value ())
    gfc_error ("DATA statement at %L has more values than variables",
        &d->where);
}
# 16440 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
int
gfc_impure_variable (gfc_symbol *sym)
{
  gfc_symbol *proc;
  gfc_namespace *ns;

  if (sym->attr.use_assoc || sym->attr.in_common)
    return 1;


  for (ns = gfc_current_ns; ns; ns = ns->parent)
    {
      if (ns == sym->ns)
 break;
      if (ns->proc_name->attr.flavor == FL_PROCEDURE && !sym->attr.function)
 return 1;
    }

  proc = sym->ns->proc_name;
  if (sym->attr.dummy
      && ((proc->attr.subroutine && sym->attr.intent == INTENT_IN)
   || proc->attr.function))
    return 1;




  return 0;
}





int
gfc_pure (gfc_symbol *sym)
{
  symbol_attribute attr;
  gfc_namespace *ns;

  if (sym == 
# 16480 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 16480 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    {


      for (ns = gfc_current_ns; ns; ns = ns->parent)
 {
   sym = ns->proc_name;
   if (sym == 
# 16487 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 16487 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 )
     return 0;
   attr = sym->attr;
   if (attr.flavor == FL_PROCEDURE && attr.pure)
     return 1;
 }
      return 0;
    }

  attr = sym->attr;

  return attr.flavor == FL_PROCEDURE && attr.pure;
}






int
gfc_implicit_pure (gfc_symbol *sym)
{
  gfc_namespace *ns;

  if (sym == 
# 16511 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 16511 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    {


      for (ns = gfc_current_ns; ns; ns = ns->parent)
 {
   sym = ns->proc_name;
   if (sym == 
# 16518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 16518 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 )
     return 0;

   if (sym->attr.flavor == FL_PROCEDURE)
     break;
 }
    }

  return sym->attr.flavor == FL_PROCEDURE && sym->attr.implicit_pure
    && !sym->attr.pure;
}


void
gfc_unset_implicit_pure (gfc_symbol *sym)
{
  gfc_namespace *ns;

  if (sym == 
# 16536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 16536 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    {


      for (ns = gfc_current_ns; ns; ns = ns->parent)
 {
   sym = ns->proc_name;
   if (sym == 
# 16543 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 16543 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 )
     return;

   if (sym->attr.flavor == FL_PROCEDURE)
     break;
 }
    }

  if (sym->attr.flavor == FL_PROCEDURE)
    sym->attr.implicit_pure = 0;
  else
    sym->attr.pure = 0;
}




int
gfc_elemental (gfc_symbol *sym)
{
  symbol_attribute attr;

  if (sym == 
# 16565 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 16565 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    sym = gfc_current_ns->proc_name;
  if (sym == 
# 16567 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
            __null
# 16567 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                )
    return 0;
  attr = sym->attr;

  return attr.flavor == FL_PROCEDURE && attr.elemental;
}




static void
warn_unused_fortran_label (gfc_st_label *label)
{
  if (label == 
# 16580 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 16580 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  )
    return;

  warn_unused_fortran_label (label->left);

  if (label->defined == ST_LABEL_UNKNOWN)
    return;

  switch (label->referenced)
    {
    case ST_LABEL_UNKNOWN:
      gfc_warning (OPT_Wunused_label, "Label %d at %L defined but not used",
     label->value, &label->where);
      break;

    case ST_LABEL_BAD_TARGET:
      gfc_warning (OPT_Wunused_label,
     "Label %d at %L defined but cannot be used",
     label->value, &label->where);
      break;

    default:
      break;
    }

  warn_unused_fortran_label (label->right);
}




static seq_type
sequence_type (gfc_typespec ts)
{
  seq_type result;
  gfc_component *c;

  switch (ts.type)
  {
    case BT_DERIVED:

      if (ts.u.derived->components == 
# 16621 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                     __null
# 16621 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                         )
 return SEQ_NONDEFAULT;

      result = sequence_type (ts.u.derived->components->ts);
      for (c = ts.u.derived->components->next; c; c = c->next)
 if (sequence_type (c->ts) != result)
   return SEQ_MIXED;

      return result;

    case BT_CHARACTER:
      if (ts.kind != gfc_default_character_kind)
   return SEQ_NONDEFAULT;

      return SEQ_CHARACTER;

    case BT_INTEGER:
      if (ts.kind != gfc_default_integer_kind)
   return SEQ_NONDEFAULT;

      return SEQ_NUMERIC;

    case BT_REAL:
      if (!(ts.kind == gfc_default_real_kind
     || ts.kind == gfc_default_double_kind))
   return SEQ_NONDEFAULT;

      return SEQ_NUMERIC;

    case BT_COMPLEX:
      if (ts.kind != gfc_default_complex_kind)
   return SEQ_NONDEFAULT;

      return SEQ_NUMERIC;

    case BT_LOGICAL:
      if (ts.kind != gfc_default_logical_kind)
   return SEQ_NONDEFAULT;

      return SEQ_NUMERIC;

    default:
      return SEQ_NONDEFAULT;
  }
}




static bool
resolve_equivalence_derived (gfc_symbol *derived, gfc_symbol *sym, gfc_expr *e)
{
  gfc_component *c = derived->components;

  if (!derived)
    return true;


  if (!derived->attr.sequence)
    {
      gfc_error ("Derived type variable %qs at %L must have SEQUENCE "
   "attribute to be an EQUIVALENCE object", sym->name,
   &e->where);
      return false;
    }


  if (derived->attr.alloc_comp)
    {
      gfc_error ("Derived type variable %qs at %L cannot have ALLOCATABLE "
   "components to be an EQUIVALENCE object",sym->name,
   &e->where);
      return false;
    }

  if (sym->attr.in_common && gfc_has_default_initializer (sym->ts.u.derived))
    {
      gfc_error ("Derived type variable %qs at %L with default "
   "initialization cannot be in EQUIVALENCE with a variable "
   "in COMMON", sym->name, &e->where);
      return false;
    }

  for (; c ; c = c->next)
    {
      if (((c->ts.type) == BT_DERIVED || (c->ts.type) == BT_UNION)
   && (!resolve_equivalence_derived(c->ts.u.derived, sym, e)))
 return false;



      if (c->attr.pointer)
 {
   gfc_error ("Derived type variable %qs at %L with pointer "
       "component(s) cannot be an EQUIVALENCE object",
       sym->name, &e->where);
   return false;
 }
    }
  return true;
}
# 16737 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
resolve_equivalence (gfc_equiv *eq)
{
  gfc_symbol *sym;
  gfc_symbol *first_sym;
  gfc_expr *e;
  gfc_ref *r;
  locus *last_where = 
# 16744 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                     __null
# 16744 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                         ;
  seq_type eq_type, last_eq_type;
  gfc_typespec *last_ts;
  int object, cnt_protected;
  const char *msg;

  last_ts = &eq->expr->symtree->n.sym->ts;

  first_sym = eq->expr->symtree->n.sym;

  cnt_protected = 0;

  for (object = 1; eq; eq = eq->eq, object++)
    {
      e = eq->expr;

      e->ts = e->symtree->n.sym->ts;



      if (e->ref && e->ref->type == REF_ARRAY)
 {
   gfc_ref *ref = e->ref;
   sym = e->symtree->n.sym;

   if (sym->attr.dimension)
     {
       ref->u.ar.as = sym->as;
       ref = ref->next;
     }


   if (e->ts.type == BT_CHARACTER
       && ref
       && ref->type == REF_ARRAY
       && ref->u.ar.dimen == 1
       && ref->u.ar.dimen_type[0] == DIMEN_RANGE
       && ref->u.ar.stride[0] == 
# 16781 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                __null
# 16781 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                    )
     {
       gfc_expr *start = ref->u.ar.start[0];
       gfc_expr *end = ref->u.ar.end[0];
       void *mem = 
# 16785 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                  __null
# 16785 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                      ;


       if (start == 
# 16788 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                   __null 
# 16788 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                        && end == 
# 16788 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                  __null
# 16788 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                      )
  {
    if (e->ref == ref)
      e->ref = ref->next;
    else
      e->ref->next = ref->next;
    mem = ref;
  }
       else
  {
    ref->type = REF_SUBSTRING;
    if (start == 
# 16799 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 16799 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
      start = gfc_get_int_expr (gfc_charlen_int_kind,
           
# 16801 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
          __null
# 16801 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
              , 1);
    ref->u.ss.start = start;
    if (end == 
# 16803 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null 
# 16803 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                   && e->ts.u.cl)
      end = gfc_copy_expr (e->ts.u.cl->length);
    ref->u.ss.end = end;
    ref->u.ss.length = e->ts.u.cl;
    e->ts.u.cl = 
# 16807 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 16807 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    ;
  }
       ref = ref->next;
       free (mem);
     }


   if (ref)
     {
       ((void)(!(ref->type == REF_ARRAY) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c", 16816, __FUNCTION__), 0 : 0));
       gfc_error ("Syntax error in EQUIVALENCE statement at %L",
    &ref->u.ar.where);
       continue;
     }
 }

      if (!gfc_resolve_expr (e))
 continue;

      sym = e->symtree->n.sym;

      if (sym->attr.is_protected)
 cnt_protected++;
      if (cnt_protected > 0 && cnt_protected != object)
        {
       gfc_error ("Either all or none of the objects in the "
    "EQUIVALENCE set at %L shall have the "
    "PROTECTED attribute",
    &e->where);
       break;
 }


      if (sym->ns->proc_name
   && sym->ns->proc_name->attr.pure
   && sym->attr.in_common)
 {


   bool saw_sym = false;
   if (sym->ns->use_stmts)
     {
       gfc_use_rename *r;
       for (r = sym->ns->use_stmts->rename; r; r = r->next)
  if (strcmp(r->use_name, sym->name) == 0) saw_sym = true;
     }
   else
     saw_sym = true;

   if (saw_sym)
     gfc_error ("COMMON block member %qs at %L cannot be an "
         "EQUIVALENCE object in the pure procedure %qs",
         sym->name, &e->where, sym->ns->proc_name->name);
   break;
 }


      if (e->expr_type == EXPR_CONSTANT)
 {
   gfc_error ("Named constant %qs at %L cannot be an EQUIVALENCE "
       "object", sym->name, &e->where);
   continue;
 }

      if (e->ts.type == BT_DERIVED
   && !resolve_equivalence_derived (e->ts.u.derived, sym, e))
 continue;
# 16887 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
      if (object == 1 || gfc_compare_types (last_ts, &sym->ts))
 goto identical_types;

      last_eq_type = sequence_type (*last_ts);
      eq_type = sequence_type (sym->ts);




      msg = "Sequence %s with mixed components in EQUIVALENCE "
     "statement at %L with different type objects";
      if ((object ==2
    && last_eq_type == SEQ_MIXED
    && !gfc_notify_std ((1<<5), msg, first_sym->name, last_where))
   || (eq_type == SEQ_MIXED
       && !gfc_notify_std ((1<<5), msg, sym->name, &e->where)))
 continue;

      msg = "Non-default type object or sequence %s in EQUIVALENCE "
     "statement at %L with objects of different type";
      if ((object ==2
    && last_eq_type == SEQ_NONDEFAULT
    && !gfc_notify_std ((1<<5), msg, first_sym->name, last_where))
   || (eq_type == SEQ_NONDEFAULT
       && !gfc_notify_std ((1<<5), msg, sym->name, &e->where)))
 continue;

      msg ="Non-CHARACTER object %qs in default CHARACTER "
    "EQUIVALENCE statement at %L";
      if (last_eq_type == SEQ_CHARACTER
   && eq_type != SEQ_CHARACTER
   && !gfc_notify_std ((1<<5), msg, sym->name, &e->where))
  continue;

      msg ="Non-NUMERIC object %qs in default NUMERIC "
    "EQUIVALENCE statement at %L";
      if (last_eq_type == SEQ_NUMERIC
   && eq_type != SEQ_NUMERIC
   && !gfc_notify_std ((1<<5), msg, sym->name, &e->where))
  continue;

identical_types:

      last_ts =&sym->ts;
      last_where = &e->where;

      if (!e->ref)
 continue;


      if (e->ref->type == REF_ARRAY && is_non_constant_shape_array (sym))
 {
   gfc_error ("Array %qs at %L with non-constant bounds cannot be "
       "an EQUIVALENCE object", sym->name, &e->where);
   continue;
 }

      r = e->ref;
      while (r)
 {

   if (r->type == REF_COMPONENT)
     {
       gfc_error ("Structure component %qs at %L cannot be an "
    "EQUIVALENCE object",
    r->u.c.component->name, &e->where);
       break;
     }


   if (r->type == REF_SUBSTRING)
     {
       if (compare_bound (r->u.ss.start, r->u.ss.end) == CMP_GT)
  {
    gfc_error ("Substring at %L has length zero",
        &r->u.ss.start->where);
    break;
  }
     }
   r = r->next;
 }
    }
}





static bool
flag_fn_result_spec (gfc_expr *expr,
                     gfc_symbol *sym,
                     int *f __attribute__ ((__unused__)))
{
  gfc_namespace *ns;
  gfc_symbol *s;

  if (expr->expr_type == EXPR_VARIABLE)
    {
      s = expr->symtree->n.sym;
      for (ns = s->ns; ns; ns = ns->parent)
 if (!ns->parent)
   break;

      if (sym == s)
 {
   gfc_error ("Self reference in character length expression "
       "for %qs at %L", sym->name, &expr->where);
   return true;
 }

      if (!s->fn_result_spec
   && s->attr.flavor == FL_PARAMETER)
 {

   if (ns->proc_name && ns->proc_name->attr.flavor == FL_MODULE)
     {
       gfc_symtree *st;
       s->fn_result_spec = 1;


       st = gfc_get_unique_symtree (ns);
       st->n.sym = s;
       s->refs++;
     }

   else if (s->attr.use_assoc || s->attr.used_in_submodule
   ||

    (s->ns->proc_name
     && ((s->ns == ns
    && s->ns->proc_name->attr.if_source == IFSRC_DECL)
         || s->ns->proc_name->attr.if_source == IFSRC_IFBODY)
     && s->ns->proc_name->attr.function))
     s->fn_result_spec = 1;
 }
    }
  return false;
}




static void
resolve_fntype (gfc_namespace *ns)
{
  gfc_entry_list *el;
  gfc_symbol *sym;

  if (ns->proc_name == 
# 17035 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                      __null 
# 17035 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                           || !ns->proc_name->attr.function)
    return;



  if (ns->entries)
    sym = ns->entries->sym;
  else
    sym = ns->proc_name;
  if (sym->result == sym
      && sym->ts.type == BT_UNKNOWN
      && !gfc_set_default_type (sym, 0, 
# 17046 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                       __null
# 17046 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                           )
      && !sym->attr.untyped)
    {
      gfc_error ("Function %qs at %L has no IMPLICIT type",
   sym->name, &sym->declared_at);
      sym->attr.untyped = 1;
    }

  if (sym->ts.type == BT_DERIVED && !sym->ts.u.derived->attr.use_assoc
      && !sym->attr.contained
      && !gfc_check_symbol_access (sym->ts.u.derived)
      && gfc_check_symbol_access (sym))
    {
      gfc_notify_std ((1<<4), "PUBLIC function %qs at "
        "%L of PRIVATE type %qs", sym->name,
        &sym->declared_at, sym->ts.u.derived->name);
    }

    if (ns->entries)
    for (el = ns->entries->next; el; el = el->next)
      {
 if (el->sym->result == el->sym
     && el->sym->ts.type == BT_UNKNOWN
     && !gfc_set_default_type (el->sym, 0, 
# 17069 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                          __null
# 17069 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                              )
     && !el->sym->attr.untyped)
   {
     gfc_error ("ENTRY %qs at %L has no IMPLICIT type",
         el->sym->name, &el->sym->declared_at);
     el->sym->attr.untyped = 1;
   }
      }

  if (sym->ts.type == BT_CHARACTER)
    gfc_traverse_expr (sym->ts.u.cl->length, sym, flag_fn_result_spec, 0);
}




static bool
check_uop_procedure (gfc_symbol *sym, locus where)
{
  gfc_formal_arglist *formal;

  if (!sym->attr.function)
    {
      gfc_error ("User operator procedure %qs at %L must be a FUNCTION",
   sym->name, &where);
      return false;
    }

  if (sym->ts.type == BT_CHARACTER
      && !((sym->ts.u.cl && sym->ts.u.cl->length) || sym->ts.deferred)
      && !(sym->result && ((sym->result->ts.u.cl
    && sym->result->ts.u.cl->length) || sym->result->ts.deferred)))
    {
      gfc_error ("User operator procedure %qs at %L cannot be assumed "
   "character length", sym->name, &where);
      return false;
    }

  formal = gfc_sym_get_dummy_args (sym);
  if (!formal || !formal->sym)
    {
      gfc_error ("User operator procedure %qs at %L must have at least "
   "one argument", sym->name, &where);
      return false;
    }

  if (formal->sym->attr.intent != INTENT_IN)
    {
      gfc_error ("First argument of operator interface at %L must be "
   "INTENT(IN)", &where);
      return false;
    }

  if (formal->sym->attr.optional)
    {
      gfc_error ("First argument of operator interface at %L cannot be "
   "optional", &where);
      return false;
    }

  formal = formal->next;
  if (!formal || !formal->sym)
    return true;

  if (formal->sym->attr.intent != INTENT_IN)
    {
      gfc_error ("Second argument of operator interface at %L must be "
   "INTENT(IN)", &where);
      return false;
    }

  if (formal->sym->attr.optional)
    {
      gfc_error ("Second argument of operator interface at %L cannot be "
   "optional", &where);
      return false;
    }

  if (formal->next)
    {
      gfc_error ("Operator interface at %L must have, at most, two "
   "arguments", &where);
      return false;
    }

  return true;
}

static void
gfc_resolve_uops (gfc_symtree *symtree)
{
  gfc_interface *itr;

  if (symtree == 
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                __null
# 17162 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                    )
    return;

  gfc_resolve_uops (symtree->left);
  gfc_resolve_uops (symtree->right);

  for (itr = symtree->n.uop->op; itr; itr = itr->next)
    check_uop_procedure (itr->sym, itr->sym->declared_at);
}
# 17179 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
static void
resolve_types (gfc_namespace *ns)
{
  gfc_namespace *n;
  gfc_charlen *cl;
  gfc_data *d;
  gfc_equiv *eq;
  gfc_namespace* old_ns = gfc_current_ns;
  bool recursive = ns->proc_name && ns->proc_name->attr.recursive;

  if (ns->types_resolved)
    return;


  if (!ns->seen_implicit_none)
    {
      unsigned letter;
      for (letter = 0; letter != 26; ++letter)
 if (ns->set_flag[letter]
     && !resolve_typespec_used (&ns->default_type[letter],
           &ns->implicit_loc[letter], 
# 17199 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
                                     __null
# 17199 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                                         ))
   return;
    }

  gfc_current_ns = ns;

  resolve_entries (ns);

  resolve_common_vars (&ns->blank_common, false);
  resolve_common_blocks (ns->common_root);

  resolve_contained_functions (ns);

  if (ns->proc_name && ns->proc_name->attr.flavor == FL_PROCEDURE
      && ns->proc_name->attr.if_source == IFSRC_IFBODY)
    gfc_resolve_formal_arglist (ns->proc_name);

  gfc_traverse_ns (ns, resolve_bind_c_derived_types);

  for (cl = ns->cl_list; cl; cl = cl->next)
    resolve_charlen (cl);

  gfc_traverse_ns (ns, resolve_symbol);

  resolve_fntype (ns);

  for (n = ns->contained; n; n = n->sibling)
    {
      if (gfc_pure (ns->proc_name) && !gfc_pure (n->proc_name))
 gfc_error ("Contained procedure %qs at %L of a PURE procedure must "
     "also be PURE", n->proc_name->name,
     &n->proc_name->declared_at);

      resolve_types (n);
    }

  forall_flag = 0;
  gfc_do_concurrent_flag = 0;
  gfc_check_interfaces (ns);

  gfc_traverse_ns (ns, resolve_values);

  if (ns->save_all || (!global_options.x_flag_automatic && !recursive))
    gfc_save_all (ns);

  iter_stack = 
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 17244 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  ;
  for (d = ns->data; d; d = d->next)
    resolve_data (d);

  iter_stack = 
# 17248 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
              __null
# 17248 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                  ;
  gfc_traverse_ns (ns, gfc_formalize_init_value);

  gfc_traverse_ns (ns, gfc_verify_binding_labels);

  for (eq = ns->equiv; eq; eq = eq->next)
    resolve_equivalence (eq);


  if (global_options.x_warn_unused_label)
    warn_unused_fortran_label (ns->st_labels);

  gfc_resolve_uops (ns->uop_root);

  gfc_traverse_ns (ns, gfc_verify_DTIO_procedures);

  gfc_resolve_omp_declare_simd (ns);

  gfc_resolve_omp_udrs (ns->omp_udr_root);

  ns->types_resolved = 1;

  gfc_current_ns = old_ns;
}




static void
resolve_codes (gfc_namespace *ns)
{
  gfc_namespace *n;
  bitmap_obstack old_obstack;

  if (ns->resolved == 1)
    return;

  for (n = ns->contained; n; n = n->sibling)
    resolve_codes (n);

  gfc_current_ns = ns;


  if (!(ns->proc_name && ns->proc_name->attr.flavor == FL_LABEL))
    cs_base = 
# 17292 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c" 3 4
             __null
# 17292 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
                 ;


  current_entry_id = -1;

  old_obstack = labels_obstack;
  bitmap_obstack_initialize (&labels_obstack);

  gfc_resolve_oacc_declare (ns);
  gfc_resolve_oacc_routines (ns);
  gfc_resolve_omp_local_vars (ns);
  gfc_resolve_code (ns->code, ns);

  bitmap_obstack_release (&labels_obstack);
  labels_obstack = old_obstack;
}
# 17316 "/home/giulianob/gcc_git_gnu/gcc/gcc/fortran/resolve.c"
void
gfc_resolve (gfc_namespace *ns)
{
  gfc_namespace *old_ns;
  code_stack *old_cs_base;
  struct gfc_omp_saved_state old_omp_state;

  if (ns->resolved)
    return;

  ns->resolved = -1;
  old_ns = gfc_current_ns;
  old_cs_base = cs_base;




  if (!ns->construct_entities)
    gfc_omp_save_and_clear_state (&old_omp_state);

  resolve_types (ns);
  component_assignment_level = 0;
  resolve_codes (ns);

  gfc_current_ns = old_ns;
  cs_base = old_cs_base;
  ns->resolved = 1;

  gfc_run_passes (ns);

  if (!ns->construct_entities)
    gfc_omp_restore_state (&old_omp_state);
}
