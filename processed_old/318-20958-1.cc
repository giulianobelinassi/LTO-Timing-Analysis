# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
# 1 "/home/giulianob/gcc_git_gnu/build_temp/gcc//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
# 1 "./bconfig.h" 1


# 1 "./auto-host.h" 1
# 4 "./bconfig.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
extern "C" {
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
}
# 6 "./bconfig.h" 2
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 44 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 865 "/usr/include/stdio.h" 2 3 4
# 873 "/usr/include/stdio.h" 3 4
}
# 47 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 187 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 209 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h" 1
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 110 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 174 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int isalnum (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalnum; }
extern __inline __attribute__ ((__gnu_inline__)) int isalpha (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalpha; }
extern __inline __attribute__ ((__gnu_inline__)) int iscntrl (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _IScntrl; }
extern __inline __attribute__ ((__gnu_inline__)) int isdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISdigit; }
extern __inline __attribute__ ((__gnu_inline__)) int islower (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISlower; }
extern __inline __attribute__ ((__gnu_inline__)) int isgraph (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISgraph; }
extern __inline __attribute__ ((__gnu_inline__)) int isprint (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISprint; }
extern __inline __attribute__ ((__gnu_inline__)) int ispunct (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISpunct; }
extern __inline __attribute__ ((__gnu_inline__)) int isspace (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISspace; }
extern __inline __attribute__ ((__gnu_inline__)) int isupper (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISupper; }
extern __inline __attribute__ ((__gnu_inline__)) int isxdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISxdigit; }

extern __inline __attribute__ ((__gnu_inline__)) int isblank (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISblank; }
# 206 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) tolower (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_tolower_loc ())[__c] : __c;
}

extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) toupper (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_toupper_loc ())[__c] : __c;
}
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h" 2
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/cstring" 1 3
# 39 "/usr/include/c++/10/cstring" 3
       
# 40 "/usr/include/c++/10/cstring" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 1 3
# 262 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 284 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 522 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h" 1 3
# 523 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/cpu_defines.h" 1 3
# 526 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3
# 42 "/usr/include/c++/10/cstring" 2 3
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4
}
# 43 "/usr/include/c++/10/cstring" 2 3
# 71 "/usr/include/c++/10/cstring" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 122 "/usr/include/c++/10/cstring" 3

}
}
# 236 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/c++/10/new" 1 3
# 38 "/usr/include/c++/10/new" 3
       
# 39 "/usr/include/c++/10/new" 3


# 1 "/usr/include/c++/10/exception" 1 3
# 33 "/usr/include/c++/10/exception" 3
       
# 34 "/usr/include/c++/10/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception.h" 1 3
# 34 "/usr/include/c++/10/bits/exception.h" 3
       
# 35 "/usr/include/c++/10/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/10/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/10/exception" 2 3

extern "C++" {

namespace std
{






  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 105 "/usr/include/c++/10/exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 137 "/usr/include/c++/10/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/10/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/10/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception_defines.h" 1 3
# 38 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/typeinfo" 1 3
# 32 "/usr/include/c++/10/typeinfo" 3
       
# 33 "/usr/include/c++/10/typeinfo" 3



# 1 "/usr/include/c++/10/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/10/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/10/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/10/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/10/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/10/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/usr/include/c++/10/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }



    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/new" 1 3
# 41 "/usr/include/c++/10/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;






  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 118 "/usr/include/c++/10/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 145 "/usr/include/c++/10/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };



    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }




    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }


  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 213 "/usr/include/c++/10/bits/exception_ptr.h" 3
      return exception_ptr();

    }


}

}

#pragma GCC visibility pop
# 148 "/usr/include/c++/10/exception" 2 3
# 1 "/usr/include/c++/10/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/10/bits/nested_exception.h" 3
#pragma GCC visibility push(default)






# 1 "/usr/include/c++/10/bits/move.h" 1 3
# 38 "/usr/include/c++/10/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}

# 1 "/usr/include/c++/10/type_traits" 1 3
# 32 "/usr/include/c++/10/type_traits" 3
       
# 33 "/usr/include/c++/10/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "/usr/include/c++/10/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template <typename _Type>
    struct __type_identity
    { using type = _Type; };

  template<typename _Tp>
    using __type_identity_t = typename __type_identity<_Tp>::type;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 188 "/usr/include/c++/10/type_traits" 3
  template<typename>
    struct is_reference;
  template<typename>
    struct is_function;
  template<typename>
    struct is_void;
  template<typename>
    struct __is_array_unknown_bounds;




  template <typename _Tp, size_t = sizeof(_Tp)>
    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)
    { return {}; }

  template <typename _TypeIdentity,
      typename _NestedType = typename _TypeIdentity::type>
    constexpr typename __or_<
      is_reference<_NestedType>,
      is_function<_NestedType>,
      is_void<_NestedType>,
      __is_array_unknown_bounds<_NestedType>
    >::type __is_complete_or_unbounded(_TypeIdentity)
    { return {}; }






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };

  template<typename>
    struct remove_cv;


  template<typename _Tp>
    using __remove_cv_t = typename remove_cv<_Tp>::type;

  template<typename>
    struct is_const;



  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };
# 284 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 364 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public __not_<is_function<_Tp>>::type { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public is_function<_Tp>::type { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename _Tp>
    struct is_function
    : public __bool_constant<!is_const<const _Tp>::value> { };

  template<typename _Tp>
    struct is_function<_Tp&>
    : public false_type { };

  template<typename _Tp>
    struct is_function<_Tp&&>
    : public false_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { } __attribute__ ((__deprecated__ ("use '" "std::is_null_pointer" "' instead")));




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __not_<is_fundamental<_Tp>>::type { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename _Tp, typename... _Types>
    using __is_one_of = __or_<is_same<_Tp, _Types>...>;


  template<typename _Tp>
    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,
   signed char, signed short, signed int, signed long,
   signed long long

   , signed __int128
# 604 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,
   unsigned char, unsigned short, unsigned int, unsigned long,
   unsigned long long

   , unsigned __int128
# 623 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_standard_integer
      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;


  template<typename...> using __void_t = void;



  template<typename _Tp, typename = void>
    struct __is_referenceable
    : public false_type
    { };

  template<typename _Tp>
    struct __is_referenceable<_Tp, __void_t<_Tp&>>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct
   
    is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 770 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __is_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public false_type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl<true, _Tp, _Args...>
    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<true, _Tp, _Arg>
    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<true, _Tp>
    : public __bool_constant<noexcept(_Tp())>
    { };

  template<typename _Tp, size_t _Num>
    struct __is_nt_constructible_impl<true, _Tp[_Num]>
    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>
    { };
# 1001 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),
       _Tp, _Args...>;


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
    : public __bool_constant<__is_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_assignable_impl
    : public __and_<__bool_constant<__is_assignable(_Tp, _Up)>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __is_nothrow_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<__is_constructible_impl<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<__is_copy_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<__is_move_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<__is_destructible_safe<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename _Tp, typename _Up>
    struct is_same

    : public integral_constant<bool, __is_same_as(_Tp, _Up)>



    { };
# 1410 "/usr/include/c++/10/type_traits" 3
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    {
      typedef typename is_void<_To>::type type;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };


  template<typename _ToElementType, typename _FromElementType>
    using __is_array_convertible
      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_nt_convertible_helper
    : is_void<_To>
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_nt_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1>
 static
 __bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      using type = decltype(__test<_From, _To>(0));
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct __is_nothrow_convertible
    : public __is_nt_convertible_helper<_From, _To>::type
    { };
# 1508 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<volatile _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const volatile _Tp>
    { using type = _Tp; };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1730 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };






  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1806 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1884 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };






  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 1932 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2067 "/usr/include/c++/10/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2106 "/usr/include/c++/10/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef __remove_cv_t<_Up> __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };


  template<typename _Tp>
    using __decay_t = typename decay<_Tp>::type;

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };


  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;

  template<typename... _Cond>
    using _Require = __enable_if_t<__and_<_Cond...>::value>;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      using __cond_t
 = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());



    template<typename _Tp, typename _Up>
      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>
      _S_test(int);
# 2239 "/usr/include/c++/10/type_traits" 3
    template<typename, typename>
      static __failure_type
      _S_test_2(...);

    template<typename _Tp, typename _Up>
      static decltype(_S_test_2<_Tp, _Up>(0))
      _S_test(...);
  };


  template<>
    struct common_type<>
    { };


  template<typename _Tp0>
    struct common_type<_Tp0>
    : public common_type<_Tp0, _Tp0>
    { };


  template<typename _Tp1, typename _Tp2,
    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>
    struct __common_type_impl
    {


      using type = common_type<_Dp1, _Dp2>;
    };

  template<typename _Tp1, typename _Tp2>
    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>
    : private __do_common_type_impl
    {


      using type = decltype(_S_test<_Tp1, _Tp2>(0));
    };


  template<typename _Tp1, typename _Tp2>
    struct common_type<_Tp1, _Tp2>
    : public __common_type_impl<_Tp1, _Tp2>::type
    { };

  template<typename...>
    struct __common_type_pack
    { };

  template<typename, typename, typename = void>
    struct __common_type_fold;


  template<typename _Tp1, typename _Tp2, typename... _Rp>
    struct common_type<_Tp1, _Tp2, _Rp...>
    : public __common_type_fold<common_type<_Tp1, _Tp2>,
    __common_type_pack<_Rp...>>
    { };




  template<typename _CTp, typename... _Rp>
    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,
         __void_t<typename _CTp::type>>
    : public common_type<typename _CTp::type, _Rp...>
    { };


  template<typename _CTp, typename _Rp>
    struct __common_type_fold<_CTp, _Rp, void>
    { };

  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };


  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef __remove_cvref_t<_Arg> _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_reference<_Arg>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;





  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2624 "/usr/include/c++/10/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };

  template<typename _Tp>
   
    inline
    _Require<__not_<__is_tuple_like<_Tp>>,
      is_move_constructible<_Tp>,
      is_move_assignable<_Tp>>
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
   
    inline
    __enable_if_t<__is_swappable<_Tp>::value>
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;







  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl : false_type { };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:


      static typename _Result::type _S_get();

      template<typename _Tp>
 static void _S_conv(_Tp);


      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>
 static true_type
 _S_test(int);

      template<typename _Tp>
 static false_type
 _S_test(...);

    public:
      using type = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  struct __nonesuchbase {};
  struct __nonesuch : private __nonesuchbase {
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
#pragma GCC diagnostic pop
# 3455 "/usr/include/c++/10/type_traits" 3

}
# 58 "/usr/include/c++/10/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 138 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 179 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
   
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type



    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)

    {




      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
   
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type



    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "/usr/include/c++/10/bits/nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };



  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }





  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }




  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }




  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 149 "/usr/include/c++/10/exception" 2 3
# 42 "/usr/include/c++/10/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 126 "/usr/include/c++/10/new" 3
 void* operator new(std::size_t)
  __attribute__((__externally_visible__));
 void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

 void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
 void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 174 "/usr/include/c++/10/new" 3
 inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
 inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 230 "/usr/include/c++/10/new" 3
#pragma GCC visibility pop
# 237 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/c++/10/utility" 1 3
# 58 "/usr/include/c++/10/utility" 3
       
# 59 "/usr/include/c++/10/utility" 3
# 69 "/usr/include/c++/10/utility" 3
# 1 "/usr/include/c++/10/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/10/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 85 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 70 "/usr/include/c++/10/utility" 2 3
# 1 "/usr/include/c++/10/bits/stl_pair.h" 1 3
# 69 "/usr/include/c++/10/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 80 "/usr/include/c++/10/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();




  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };
# 210 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 256 "/usr/include/c++/10/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;



      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 288 "/usr/include/c++/10/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }



      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>

        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
      is_assignable<_T2&, const _U2&>>::value,
      pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
      is_assignable<_T2&, _U2&&>>::value,
      pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }


      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>

        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };
# 464 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }
# 487 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 524 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 564 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 583 "/usr/include/c++/10/bits/stl_pair.h" 3

}
# 71 "/usr/include/c++/10/utility" 2 3





# 1 "/usr/include/c++/10/initializer_list" 1 3
# 33 "/usr/include/c++/10/initializer_list" 3
       
# 34 "/usr/include/c++/10/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };







  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }







  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 77 "/usr/include/c++/10/utility" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };







  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }





  template<size_t... _Indexes> struct _Index_tuple { };
# 307 "/usr/include/c++/10/utility" 3
  template<size_t _Num>
    struct _Build_index_tuple
    {






      using __type = _Index_tuple<__integer_pack(_Num)...>;

    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence



      = integer_sequence<_Tp, __integer_pack(_Num)...>;





  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 473 "/usr/include/c++/10/utility" 3

}
# 238 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 259 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 36 "/usr/include/c++/10/stdlib.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 75 "/usr/include/c++/10/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 826 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/10/cstdlib" 2 3

# 1 "/usr/include/c++/10/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/10/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/10/bits/std_abs.h" 3
# 46 "/usr/include/c++/10/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/10/cstdlib" 2 3
# 121 "/usr/include/c++/10/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/10/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/10/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/10/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 260 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2







# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 295 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 296 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 196 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 300 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 307 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) throw () __attribute__ ((__nonnull__ (1)));







extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 338 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 339 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 62 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 148 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 168 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 178 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 214 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 293 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 304 "/usr/include/fcntl.h" 3 4
}
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 397 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/wait.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern "C" {
# 77 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);
# 100 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 121 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);






struct rusage;






extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) throw ();




extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) throw ();



}
# 398 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 1 3 4
# 113 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4
extern "C" {



int memfd_create (const char *__name, unsigned int __flags) throw ();



int mlock2 (const void *__addr, size_t __length, unsigned int __flags) throw ();





int pkey_alloc (unsigned int __flags, unsigned int __access_rights) throw ();



int pkey_set (int __key, unsigned int __access_rights) throw ();



int pkey_get (int __key) throw ();



int pkey_free (int __key) throw ();



int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) throw ();

}
# 114 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 2 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4




extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 70 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (const void *__addr, size_t __len) throw ();


extern int munlock (const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 133 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);

}
# 429 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/resource.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/resource.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,





  __RLIMIT_RTTIME = 15,


  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 131 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 3 4
struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };


    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };
# 180 "/usr/include/x86_64-linux-gnu/bits/resource.h" 2 3 4







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};


extern "C" {




extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
      const struct rlimit *__new_limit,
      struct rlimit *__old_limit) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) throw ();



}
# 25 "/usr/include/x86_64-linux-gnu/sys/resource.h" 2 3 4






extern "C" {
# 42 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;





extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) throw ();
# 61 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) throw ();






extern int setrlimit (__rlimit_resource_t __resource,
        const struct rlimit *__rlimits) throw ();
# 81 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) throw ();




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) throw ();





extern int getpriority (__priority_which_t __which, id_t __who) throw ();



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     throw ();

}
# 441 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/times.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/times.h" 3 4
extern "C" {


struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;

    clock_t tms_cutime;
    clock_t tms_cstime;
  };






extern clock_t times (struct tms *__buffer) throw ();

}
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 521 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4

# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 2 3 4
# 526 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const wchar_t * __restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) wcstoimax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const wchar_t *
          __restrict __nptr,
          wchar_t **
          __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) wcstoumax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4
}
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2




# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 576 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 599 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 40 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 600 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 671 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"

# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
extern "C" {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 2


typedef unsigned int hashval_t;




typedef hashval_t (*htab_hash) (const void *);






typedef int (*htab_eq) (const void *, const void *);



typedef void (*htab_del) (void *);





typedef int (*htab_trav) (void **, void *);





typedef void *(*htab_alloc) (size_t, size_t);


typedef void (*htab_free) (void *);



typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);
typedef void (*htab_free_with_arg) (void *, void *);
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
struct htab {

  htab_hash hash_f;


  htab_eq eq_f;


  htab_del del_f;


  void **entries;


  size_t size;


  size_t n_elements;


  size_t n_deleted;



  unsigned int searches;



  unsigned int collisions;


  htab_alloc alloc_f;
  htab_free free_f;


  void *alloc_arg;
  htab_alloc_with_arg alloc_with_arg_f;
  htab_free_with_arg free_with_arg_f;



  unsigned int size_prime_index;
};

typedef struct htab *htab_t;


enum insert_option {NO_INSERT, INSERT};



extern htab_t htab_create_alloc (size_t, htab_hash,
                                    htab_eq, htab_del,
                                    htab_alloc, htab_free);

extern htab_t htab_create_alloc_ex (size_t, htab_hash,
                                      htab_eq, htab_del,
                                      void *, htab_alloc_with_arg,
                                      htab_free_with_arg);

extern htab_t htab_create_typed_alloc (size_t, htab_hash, htab_eq, htab_del,
     htab_alloc, htab_alloc, htab_free);


extern htab_t htab_create (size_t, htab_hash, htab_eq, htab_del);
extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);

extern void htab_set_functions_ex (htab_t, htab_hash,
                                       htab_eq, htab_del,
                                       void *, htab_alloc_with_arg,
                                       htab_free_with_arg);

extern void htab_delete (htab_t);
extern void htab_empty (htab_t);

extern void * htab_find (htab_t, const void *);
extern void ** htab_find_slot (htab_t, const void *, enum insert_option);
extern void * htab_find_with_hash (htab_t, const void *, hashval_t);
extern void ** htab_find_slot_with_hash (htab_t, const void *,
       hashval_t, enum insert_option);
extern void htab_clear_slot (htab_t, void **);
extern void htab_remove_elt (htab_t, const void *);
extern void htab_remove_elt_with_hash (htab_t, const void *, hashval_t);

extern void htab_traverse (htab_t, htab_trav, void *);
extern void htab_traverse_noresize (htab_t, htab_trav, void *);

extern size_t htab_size (htab_t);
extern size_t htab_elements (htab_t);
extern double htab_collisions (htab_t);


extern htab_hash htab_hash_pointer;


extern htab_eq htab_eq_pointer;


extern hashval_t htab_hash_string (const void *);


extern hashval_t iterative_hash (const void *, size_t, hashval_t);




}
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 2


extern "C" {
# 84 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
extern int filename_cmp (const char *s1, const char *s2);


extern int filename_ncmp (const char *s1, const char *s2,
     size_t n);

extern hashval_t filename_hash (const void *s);

extern int filename_eq (const void *s1, const void *s2);

extern int canonical_filename_eq (const char *a, const char *b);


}
# 672 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 683 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/dlfcn.h" 1 3 4
# 24 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 1 3 4
# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4

# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4
extern "C" {


extern void _dl_mcount_wrapper_check (void *__selfpc) throw ();

}
# 28 "/usr/include/dlfcn.h" 2 3 4
# 44 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;







extern "C" {



extern void *dlopen (const char *__file, int __mode) throw ();



extern int dlclose (void *__handle) throw () __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      const char *__restrict __name) throw () __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) throw ();



extern void *dlvsym (void *__restrict __handle,
       const char *__restrict __name,
       const char *__restrict __version)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) throw ();





typedef struct
{
  const char *dli_fname;
  void *dli_fbase;
  const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (const void *__address, Dl_info *__info)
     throw () __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) throw () __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     throw () __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;





  __extension__ union
  {
    Dl_serpath dls_serpath[0];
    Dl_serpath __dls_serpath_pad[1];
  };



} Dl_serinfo;



}
# 684 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 692 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 1
# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"

# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern "C" {





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 2
# 55 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char * const *) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);



extern int writeargv (char * const *, FILE *);



extern int countargv (char * const *);
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));




extern const char *dos_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));





extern const char *unix_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));



extern char *lrealpath (const char *);



extern int is_valid_fd (int fd);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));
# 157 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 193 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 205 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char * getpwd (void);
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));





extern char *make_relative_prefix_ignore_links (const char *, const char *,
      const char *) __attribute__ ((__malloc__));




extern const char *choose_tmpdir (void) __attribute__ ((__returns_nonnull__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));




extern char *make_temp_file_with_prefix (const char *, const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int) __attribute__ ((__returns_nonnull__));




extern int signo_max (void);
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1))) __attribute__ ((warn_unused_result));





extern void *xrealloc (void *, size_t) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (2))) __attribute__ ((warn_unused_result));




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1, 2))) __attribute__ ((warn_unused_result));



extern char *xstrdup (const char *) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));


extern double physmem_total (void);
extern double physmem_available (void);


extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);
# 391 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase) __attribute__ ((__returns_nonnull__));
# 528 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);
# 543 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
                      const char *executable,
                                           char * const *argv,
                                           char * const *env,
                              const char *outname,
        const char *errname, int *err);





extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);






extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);







extern FILE *pex_read_output (struct pex_obj *, int binary);







extern FILE *pex_read_err (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);




extern void pex_free (struct pex_obj *);
# 618 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 637 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);



extern void *bsearch_r (const void *, const void *,
   size_t, size_t,
   int (*)(const void *, const void *, void *),
   void *);
# 661 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xasprintf (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xvasprintf (const char *, va_list) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));
# 722 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void setproctitle (const char *name, ...);


extern void stack_limit_increase (unsigned long);
# 735 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 762 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
}
# 693 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 763 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern void fancy_abort (const char *, int, const char *)
      __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
# 894 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        




        






        




        


        
# 963 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        






        
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        
# 1073 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        


        



        
# 1091 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        
# 1107 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        



       
# 1224 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h" 1
# 77 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
typedef long __gcc_host_wide_int__;
# 141 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline unsigned long
least_bit_hwi (unsigned long x)
{
  return (x & -x);
}



static inline bool
pow2_or_zerop (unsigned long x)
{
  return least_bit_hwi (x) == x;
}



static inline bool
pow2p_hwi (unsigned long x)
{
  return x && pow2_or_zerop (x);
}
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline int
clz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_clzl (x);





}

static inline int
ctz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_ctzl (x);





}

static inline int
ffs_hwi (unsigned long x)
{

  return __builtin_ffsl (x);





}

static inline int
popcount_hwi (unsigned long x)
{

  return __builtin_popcountl (x);





}

static inline int
floor_log2 (unsigned long x)
{
  return 64 - 1 - clz_hwi (x);
}

static inline int
ceil_log2 (unsigned long x)
{
  return x == 0 ? 0 : floor_log2 (x - 1) + 1;
}

static inline int
exact_log2 (unsigned long x)
{
  return pow2p_hwi (x) ? ctz_hwi (x) : -1;
}







extern long abs_hwi (long);
extern unsigned long absu_hwi (long);
extern long gcd (long, long);
extern long pos_mul_hwi (long, long);
extern long mul_hwi (long, long);
extern long least_common_multiple (long, long);



static inline int
ctz_or_zero (unsigned long x)
{
  return ffs_hwi (x) - 1;
}



static inline long
sext_hwi (long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else

    {






      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 291, __FUNCTION__), 0 : 0));
      int shift = 64 - prec;
      return ((long) ((unsigned long) src << shift)) >> shift;
    }
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
}


static inline unsigned long
zext_hwi (unsigned long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else
    {
      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 314, __FUNCTION__), 0 : 0));
      return src & ((1UL << prec) - 1);
    }
}



inline long
abs_hwi (long x)
{
  ((void)(!(x != (long) (1UL << (64 - 1))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 324, __FUNCTION__), 0 : 0));
  return x >= 0 ? x : -x;
}



inline unsigned long
absu_hwi (long x)
{
  return x >= 0 ? (unsigned long)x : -(unsigned long)x;
}
# 1225 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

typedef int sort_r_cmp_fn (const void *, const void *, void *);
void qsort_chk (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_sort_r (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_qsort (void *, size_t, size_t, int (*)(const void *, const void *));
void gcc_stablesort (void *, size_t, size_t,
       int (*)(const void *, const void *));
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 1
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int64_t gcov_type;
typedef uint64_t gcov_type_unsigned;

struct bitmap_obstack;
class bitmap_head;
typedef class bitmap_head *bitmap;
typedef const class bitmap_head *const_bitmap;
struct simple_bitmap_def;
typedef struct simple_bitmap_def *sbitmap;
typedef const struct simple_bitmap_def *const_sbitmap;
struct rtx_def;
typedef struct rtx_def *rtx;
typedef const struct rtx_def *const_rtx;
class scalar_mode;
class scalar_int_mode;
class scalar_float_mode;
class complex_mode;
class fixed_size_mode;
template<typename> class opt_mode;
typedef opt_mode<scalar_mode> opt_scalar_mode;
typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;
typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;
template<typename> struct pod_mode;
typedef pod_mode<scalar_mode> scalar_mode_pod;
typedef pod_mode<scalar_int_mode> scalar_int_mode_pod;
typedef pod_mode<fixed_size_mode> fixed_size_mode_pod;




struct rtx_def;
  struct rtx_expr_list;
  struct rtx_insn_list;
  struct rtx_sequence;
  struct rtx_insn;
    struct rtx_debug_insn;
    struct rtx_nonjump_insn;
    struct rtx_jump_insn;
    struct rtx_call_insn;
    struct rtx_jump_table_data;
    struct rtx_barrier;
    struct rtx_code_label;
    struct rtx_note;

struct rtvec_def;
typedef struct rtvec_def *rtvec;
typedef const struct rtvec_def *const_rtvec;
struct hwivec_def;
typedef struct hwivec_def *hwivec;
typedef const struct hwivec_def *const_hwivec;
union tree_node;
typedef union tree_node *tree;
typedef const union tree_node *const_tree;
struct gimple;
typedef gimple *gimple_seq;
struct gimple_stmt_iterator;




struct gcond;
struct gdebug;
struct ggoto;
struct glabel;
struct gswitch;
struct gassign;
struct gasm;
struct gcall;
struct gtransaction;
struct greturn;
struct gbind;
struct gcatch;
struct geh_filter;
struct geh_mnt;
struct geh_else;
struct gresx;
struct geh_dispatch;
struct gphi;
struct gtry;
struct gomp_atomic_load;
struct gomp_atomic_store;
struct gomp_continue;
struct gomp_critical;
struct gomp_ordered;
struct gomp_for;
struct gomp_parallel;
struct gomp_task;
struct gomp_sections;
struct gomp_single;
struct gomp_target;
struct gomp_teams;




struct symtab_node;
  struct cgraph_node;
  struct varpool_node;
struct cgraph_edge;

union section;
typedef union section section;
struct gcc_options;
struct cl_target_option;
struct cl_optimization;
struct cl_option;
struct cl_decoded_option;
struct cl_option_handlers;
struct diagnostic_context;
class pretty_printer;
class diagnostic_event_id_t;

template<typename T> struct array_traits;



template<typename T, typename Traits = array_traits<T>,
  bool has_constant_size = Traits::has_constant_size>
class bitmap_view;


typedef unsigned char addr_space_t;






enum ir_type {
  IR_GIMPLE,
  IR_RTL_CFGRTL,
  IR_RTL_CFGLAYOUT
};






struct cpp_reader;
struct cpp_token;




enum tls_model {
  TLS_MODEL_NONE,
  TLS_MODEL_EMULATED,
  TLS_MODEL_REAL,
  TLS_MODEL_GLOBAL_DYNAMIC = TLS_MODEL_REAL,
  TLS_MODEL_LOCAL_DYNAMIC,
  TLS_MODEL_INITIAL_EXEC,
  TLS_MODEL_LOCAL_EXEC
};


enum offload_abi {
  OFFLOAD_ABI_UNSET,
  OFFLOAD_ABI_LP64,
  OFFLOAD_ABI_ILP32
};


enum profile_update {
  PROFILE_UPDATE_SINGLE,
  PROFILE_UPDATE_ATOMIC,
  PROFILE_UPDATE_PREFER_ATOMIC
};


enum profile_reproducibility {
    PROFILE_REPRODUCIBILITY_SERIAL,
    PROFILE_REPRODUCIBILITY_PARALLEL_RUNS,
    PROFILE_REPRODUCIBILITY_MULTITHREADED
};



enum unwind_info_type
{
  UI_NONE,
  UI_SJLJ,
  UI_DWARF2,
  UI_TARGET,
  UI_SEH
};


enum node_frequency {


  NODE_FREQUENCY_UNLIKELY_EXECUTED,


  NODE_FREQUENCY_EXECUTED_ONCE,

  NODE_FREQUENCY_NORMAL,


  NODE_FREQUENCY_HOT
};


enum optimization_type {

  OPTIMIZE_FOR_SPEED,


  OPTIMIZE_FOR_BOTH,


  OPTIMIZE_FOR_SIZE
};


enum pad_direction {

  PAD_NONE,




  PAD_UPWARD,




  PAD_DOWNWARD
};




enum var_init_status
{
  VAR_INIT_STATUS_UNKNOWN,
  VAR_INIT_STATUS_UNINITIALIZED,
  VAR_INIT_STATUS_INITIALIZED
};



enum warn_strict_overflow_code
{



  WARN_STRICT_OVERFLOW_ALL = 1,




  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,


  WARN_STRICT_OVERFLOW_COMPARISON = 3,


  WARN_STRICT_OVERFLOW_MISC = 4,


  WARN_STRICT_OVERFLOW_MAGNITUDE = 5
};







typedef int alias_set_type;

class edge_def;
typedef class edge_def *edge;
typedef const class edge_def *const_edge;
struct basic_block_def;
typedef struct basic_block_def *basic_block;
typedef const struct basic_block_def *const_basic_block;
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int reg_class_t;

class rtl_opt_pass;

namespace gcc {
  class context;
}

typedef std::pair <tree, tree> tree_pair;
typedef std::pair <const char *, int> string_int_pair;


template <typename ValueType>
struct kv_pair
{
  const char *const name;
  const ValueType value;
};



template<typename T>
struct iterator_range
{
public:
  iterator_range (const T &begin, const T &end)
    : m_begin (begin), m_end (end) {}

  T begin () const { return m_begin; }
  T end () const { return m_end; }

private:
  T m_begin;
  T m_end;
};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
enum function_class {
  function_c94,
  function_c99_misc,
  function_c99_math_complex,
  function_sincos,
  function_c11_misc,
  function_c2x_misc
};



enum symbol_visibility
{
  VISIBILITY_DEFAULT,
  VISIBILITY_PROTECTED,
  VISIBILITY_HIDDEN,
  VISIBILITY_INTERNAL
};



enum flt_eval_method
{
  FLT_EVAL_METHOD_UNPREDICTABLE = -1,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT = 0,
  FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE = 1,
  FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE = 2,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 = 16
};

enum excess_precision_type
{
  EXCESS_PRECISION_TYPE_IMPLICIT,
  EXCESS_PRECISION_TYPE_STANDARD,
  EXCESS_PRECISION_TYPE_FAST
};



typedef void (*gt_pointer_operator) (void *, void *);


typedef unsigned char uchar;




# 1 "./insn-modes.h" 1






enum machine_mode
{
  E_VOIDmode,






  E_BLKmode,






  E_CCmode,






  E_CCGCmode,






  E_CCGOCmode,






  E_CCNOmode,






  E_CCGZmode,






  E_CCAmode,






  E_CCCmode,






  E_CCOmode,






  E_CCPmode,






  E_CCSmode,






  E_CCZmode,






  E_CCFPmode,






  E_BImode,






  E_QImode,






  E_HImode,






  E_SImode,






  E_DImode,






  E_TImode,






  E_OImode,






  E_XImode,






  E_P2QImode,






  E_P2HImode,






  E_POImode,






  E_QQmode,






  E_HQmode,






  E_SQmode,






  E_DQmode,






  E_TQmode,






  E_UQQmode,






  E_UHQmode,






  E_USQmode,






  E_UDQmode,






  E_UTQmode,






  E_HAmode,






  E_SAmode,






  E_DAmode,






  E_TAmode,






  E_UHAmode,






  E_USAmode,






  E_UDAmode,






  E_UTAmode,






  E_SFmode,






  E_DFmode,






  E_XFmode,






  E_TFmode,






  E_SDmode,






  E_DDmode,






  E_TDmode,






  E_CQImode,






  E_CP2QImode,






  E_CHImode,






  E_CP2HImode,






  E_CSImode,






  E_CDImode,






  E_CTImode,






  E_CPOImode,






  E_COImode,






  E_CXImode,






  E_SCmode,






  E_DCmode,






  E_XCmode,






  E_TCmode,






  E_V2QImode,






  E_V4QImode,






  E_V2HImode,






  E_V1SImode,






  E_V8QImode,






  E_V4HImode,






  E_V2SImode,






  E_V1DImode,






  E_V12QImode,






  E_V6HImode,






  E_V14QImode,






  E_V16QImode,






  E_V8HImode,






  E_V4SImode,






  E_V2DImode,






  E_V1TImode,






  E_V32QImode,






  E_V16HImode,






  E_V8SImode,






  E_V4DImode,






  E_V2TImode,






  E_V64QImode,






  E_V32HImode,






  E_V16SImode,






  E_V8DImode,






  E_V4TImode,






  E_V128QImode,






  E_V64HImode,






  E_V32SImode,






  E_V16DImode,






  E_V8TImode,






  E_V64SImode,






  E_V2SFmode,






  E_V4SFmode,






  E_V2DFmode,






  E_V8SFmode,






  E_V4DFmode,






  E_V2TFmode,






  E_V16SFmode,






  E_V8DFmode,






  E_V4TFmode,






  E_V32SFmode,






  E_V16DFmode,






  E_V8TFmode,






  E_V64SFmode,






  E_V32DFmode,






  E_V16TFmode,






  MAX_MACHINE_MODE,

  MIN_MODE_RANDOM = E_VOIDmode,
  MAX_MODE_RANDOM = E_BLKmode,

  MIN_MODE_CC = E_CCmode,
  MAX_MODE_CC = E_CCFPmode,

  MIN_MODE_INT = E_QImode,
  MAX_MODE_INT = E_XImode,

  MIN_MODE_PARTIAL_INT = E_P2QImode,
  MAX_MODE_PARTIAL_INT = E_POImode,

  MIN_MODE_FRACT = E_QQmode,
  MAX_MODE_FRACT = E_TQmode,

  MIN_MODE_UFRACT = E_UQQmode,
  MAX_MODE_UFRACT = E_UTQmode,

  MIN_MODE_ACCUM = E_HAmode,
  MAX_MODE_ACCUM = E_TAmode,

  MIN_MODE_UACCUM = E_UHAmode,
  MAX_MODE_UACCUM = E_UTAmode,

  MIN_MODE_FLOAT = E_SFmode,
  MAX_MODE_FLOAT = E_TFmode,

  MIN_MODE_DECIMAL_FLOAT = E_SDmode,
  MAX_MODE_DECIMAL_FLOAT = E_TDmode,

  MIN_MODE_COMPLEX_INT = E_CQImode,
  MAX_MODE_COMPLEX_INT = E_CXImode,

  MIN_MODE_COMPLEX_FLOAT = E_SCmode,
  MAX_MODE_COMPLEX_FLOAT = E_TCmode,

  MIN_MODE_VECTOR_BOOL = E_VOIDmode,
  MAX_MODE_VECTOR_BOOL = E_VOIDmode,

  MIN_MODE_VECTOR_INT = E_V2QImode,
  MAX_MODE_VECTOR_INT = E_V64SImode,

  MIN_MODE_VECTOR_FRACT = E_VOIDmode,
  MAX_MODE_VECTOR_FRACT = E_VOIDmode,

  MIN_MODE_VECTOR_UFRACT = E_VOIDmode,
  MAX_MODE_VECTOR_UFRACT = E_VOIDmode,

  MIN_MODE_VECTOR_ACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_ACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_UACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_UACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_FLOAT = E_V2SFmode,
  MAX_MODE_VECTOR_FLOAT = E_V16TFmode,

  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
# 450 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h"
enum signop {
  SIGNED,
  UNSIGNED
};
# 451 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 1
# 314 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T> class generic_wide_int;
template <int N> class fixed_wide_int_storage;
class wide_int_storage;





typedef generic_wide_int <wide_int_storage> wide_int;
typedef generic_wide_int < fixed_wide_int_storage <((64 + 4 + 64 - 1) & ~(64 - 1))> > offset_int;
typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64)> > widest_int;


typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64) * 2> > widest2_int;



template <bool SE, bool HDP = true>
class wide_int_ref_storage;

typedef generic_wide_int <wide_int_ref_storage <false> > wide_int_ref;
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{
# 358 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  enum overflow_type {
    OVF_NONE = 0,
    OVF_UNDERFLOW = -1,
    OVF_OVERFLOW = 1,


    OVF_UNKNOWN = 2
  };


  enum precision_type {



    FLEXIBLE_PRECISION,


    VAR_PRECISION,



    CONST_PRECISION
  };
# 403 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> struct int_traits;




  template <typename T1, typename T2,
     enum precision_type P1 = int_traits <T1>::precision_type,
     enum precision_type P2 = int_traits <T2>::precision_type>
  struct binary_traits;





  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef widest_int result_type;

  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, CONST_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T2>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, FLEXIBLE_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, CONST_PRECISION>
  {
    static_assert ((int_traits <T1>::precision == int_traits <T2>::precision), "int_traits <T1>::precision == int_traits <T2>::precision");


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };
}


namespace wi
{
  template <typename T>
  unsigned int get_precision (const T &);

  template <typename T1, typename T2>
  unsigned int get_binary_precision (const T1 &, const T2 &);

  template <typename T1, typename T2>
  void copy (T1 &, const T2 &);
# 512 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> bool fits_shwi_p (const T &);
  template <typename T> bool fits_uhwi_p (const T &);
  template <typename T> bool neg_p (const T &, signop = SIGNED);

  template <typename T>
  long sign_mask (const T &);

  template <typename T1, typename T2> bool eq_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ne_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool lt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool lts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ltu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool le_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool les_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool leu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool gts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gtu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ge_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool ges_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool geu_p (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmp (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  int cmps (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmpu (const T1 &, const T2 &);

  template <typename T> typename wi::binary_traits <T, T>::result_type bit_not (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &, overflow_type *);
  template <typename T> typename wi::binary_traits <T, T>::result_type abs (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type ext (const T &, unsigned int, signop);
  template <typename T> typename wi::binary_traits <T, T>::result_type sext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type zext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type set_bit (const T &, unsigned int);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type min (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type max (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smax (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umax (const T1 &, const T2 &);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_xor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul_high (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_ceil (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type divmod_trunc (const T1 &, const T2 &, signop,
    typename wi::binary_traits <T1, T2>::result_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type gcd (const T1 &, const T2 &, signop = UNSIGNED);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop,
        typename wi::binary_traits <T1, T2>::result_type *);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type arshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rshift (const T1 &, const T2 &, signop sgn);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrotate (const T1 &, const T2 &, unsigned int = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rrotate (const T1 &, const T2 &, unsigned int = 0);







  bool only_sign_bit_p (const wide_int_ref &, unsigned int);
  bool only_sign_bit_p (const wide_int_ref &);
  int clz (const wide_int_ref &);
  int clrsb (const wide_int_ref &);
  int ctz (const wide_int_ref &);
  int exact_log2 (const wide_int_ref &);
  int floor_log2 (const wide_int_ref &);
  int ffs (const wide_int_ref &);
  int popcount (const wide_int_ref &);
  int parity (const wide_int_ref &);

  template <typename T>
  unsigned long extract_uhwi (const T &, unsigned int, unsigned int);

  template <typename T>
  unsigned int min_precision (const T &, signop);

  static inline void accumulate_overflow (overflow_type &, overflow_type);
}

namespace wi
{


  class storage_ref
  {
  public:
    storage_ref () {}
    storage_ref (const long *, unsigned int, unsigned int);

    const long *val;
    unsigned int len;
    unsigned int precision;



    unsigned int get_len () const;
    unsigned int get_precision () const;
    const long *get_val () const;
  };
}

inline::wi::storage_ref::storage_ref (const long *val_in,
          unsigned int len_in,
          unsigned int precision_in)
  : val (val_in), len (len_in), precision (precision_in)
{
}

inline unsigned int
wi::storage_ref::get_len () const
{
  return len;
}

inline unsigned int
wi::storage_ref::get_precision () const
{
  return precision;
}

inline const long *
wi::storage_ref::get_val () const
{
  return val;
}
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename storage>
class generic_wide_int : public storage
{
public:
  generic_wide_int ();

  template <typename T>
  generic_wide_int (const T &);

  template <typename T>
  generic_wide_int (const T &, unsigned int);


  long to_shwi (unsigned int) const;
  long to_shwi () const;
  unsigned long to_uhwi (unsigned int) const;
  unsigned long to_uhwi () const;
  long to_short_addr () const;


  long sign_mask () const;
  long elt (unsigned int) const;
  long sext_elt (unsigned int) const;
  unsigned long ulow () const;
  unsigned long uhigh () const;
  long slow () const;
  long shigh () const;

  template <typename T>
  generic_wide_int &operator = (const T &);
# 754 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> generic_wide_int &operator &= (const T &c) { return (*this = wi::bit_and (*this, c)); }
  template <typename T> generic_wide_int &operator |= (const T &c) { return (*this = wi::bit_or (*this, c)); }
  template <typename T> generic_wide_int &operator ^= (const T &c) { return (*this = wi::bit_xor (*this, c)); }
  template <typename T> generic_wide_int &operator += (const T &c) { return (*this = wi::add (*this, c)); }
  template <typename T> generic_wide_int &operator -= (const T &c) { return (*this = wi::sub (*this, c)); }
  template <typename T> generic_wide_int &operator *= (const T &c) { return (*this = wi::mul (*this, c)); }
  template <typename T> generic_wide_int &operator <<= (const T &c) { return (*this = wi::lshift (*this, c)); }
  template <typename T> generic_wide_int &operator >>= (const T &c) { return (*this = *this >> c); }
  generic_wide_int &operator ++ () { *this += 1; return *this; }
  generic_wide_int &operator -- () { *this += -1; return *this; }






  void dump () const;

  static const bool is_sign_extended
    = wi::int_traits <generic_wide_int <storage> >::is_sign_extended;
};

template <typename storage>
inline generic_wide_int <storage>::generic_wide_int () {}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x)
  : storage (x)
{
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x,
           unsigned int precision)
  : storage (x, precision)
{
}



template <typename storage>
inline long
generic_wide_int <storage>::to_shwi (unsigned int precision) const
{
  if (precision < 64)
    return sext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::to_shwi () const
{
  if (is_sign_extended)
    return this->get_val ()[0];
  else
    return to_shwi (this->get_precision ());
}




template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi (unsigned int precision) const
{
  if (precision < 64)
    return zext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi () const
{
  return to_uhwi (this->get_precision ());
}





template <typename storage>
inline long
generic_wide_int <storage>::to_short_addr () const
{
  return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::sign_mask () const
{
  unsigned int len = this->get_len ();
  ((void)(!(len > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 855, __FUNCTION__), 0 : 0));

  unsigned long high = this->get_val ()[len - 1];
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      int excess = len * 64 - precision;
      if (excess > 0)
 high <<= excess;
    }
  return (long) (high) < 0 ? -1 : 0;
}



template <typename storage>
inline long
generic_wide_int <storage>::slow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline long
generic_wide_int <storage>::shigh () const
{
  return this->get_val ()[this->get_len () - 1];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::ulow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::uhigh () const
{
  return this->get_val ()[this->get_len () - 1];
}


template <typename storage>
inline long
generic_wide_int <storage>::elt (unsigned int i) const
{
  if (i >= this->get_len ())
    return sign_mask ();
  else
    return this->get_val ()[i];
}



template <typename storage>
inline long
generic_wide_int <storage>::sext_elt (unsigned int i) const
{
  long elt_i = elt (i);
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      unsigned int lsb = i * 64;
      if (precision - lsb < 64)
 elt_i = sext_hwi (elt_i, precision - lsb);
    }
  return elt_i;
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage> &
generic_wide_int <storage>::operator = (const T &x)
{
  storage::operator = (x);
  return *this;
}


template <typename storage>
void
generic_wide_int <storage>::dump () const
{
  unsigned int len = this->get_len ();
  const long *val = this->get_val ();
  unsigned int precision = this->get_precision ();
  fprintf (
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "[");
  if (len * 64 < precision)
    fprintf (
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "...,");
  for (unsigned int i = 0; i < len - 1; ++i)
    fprintf (
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "%#" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                    "l" "x" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                            ",", val[len - 1 - i]);
  fprintf (
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "%#" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                  "l" "x" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                          "], precision = %d\n",
    val[0], precision);
}

namespace wi
{
  template <typename storage>
  struct int_traits < generic_wide_int <storage> >
    : public wi::int_traits <storage>
  {
    static unsigned int get_precision (const generic_wide_int <storage> &);
    static wi::storage_ref decompose (long *, unsigned int,
          const generic_wide_int <storage> &);
  };
}

template <typename storage>
inline unsigned int
wi::int_traits < generic_wide_int <storage> >::
get_precision (const generic_wide_int <storage> &x)
{
  return x.get_precision ();
}

template <typename storage>
inline wi::storage_ref
wi::int_traits < generic_wide_int <storage> >::
decompose (long *, unsigned int precision,
    const generic_wide_int <storage> &x)
{
  ((void)(!(precision == x.get_precision ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 984, __FUNCTION__), 0 : 0));
  return wi::storage_ref (x.get_val (), x.get_len (), precision);
}




template <bool SE, bool HDP>
class wide_int_ref_storage : public wi::storage_ref
{
private:


  long scratch[2];

public:
  wide_int_ref_storage () {}

  wide_int_ref_storage (const wi::storage_ref &);

  template <typename T>
  wide_int_ref_storage (const T &);

  template <typename T>
  wide_int_ref_storage (const T &, unsigned int);
};


template <bool SE, bool HDP>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const wi::storage_ref &x)
  : storage_ref (x)
{}




template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::wide_int_ref_storage (const T &x)
  : storage_ref (wi::int_traits <T>::decompose (scratch,
      wi::get_precision (x), x))
{
}


template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const T &x, unsigned int precision)
  : storage_ref (wi::int_traits <T>::decompose (scratch, precision, x))
{
}

namespace wi
{
  template <bool SE, bool HDP>
  struct int_traits <wide_int_ref_storage <SE, HDP> >
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = HDP;
    static const bool is_sign_extended = SE;
  };
}

namespace wi
{
  unsigned int force_to_size (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         signop sgn);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool = true);
}


class wide_int_storage
{
private:
  long val[((160 + 64) / 64)];
  unsigned int len;
  unsigned int precision;

public:
  wide_int_storage ();
  template <typename T>
  wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  wide_int_storage &operator = (const T &);

  static wide_int from (const wide_int_ref &, unsigned int, signop);
  static wide_int from_array (const long *, unsigned int,
         unsigned int, bool = true);
  static wide_int create (unsigned int);


  wide_int bswap () const;
};

namespace wi
{
  template <>
  struct int_traits <wide_int_storage>
  {
    static const enum precision_type precision_type = VAR_PRECISION;

    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    template <typename T1, typename T2>
    static wide_int get_binary_result (const T1 &, const T2 &);
  };
}

inline wide_int_storage::wide_int_storage () {}





template <typename T>
inline wide_int_storage::wide_int_storage (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
}

template <typename T>
inline wide_int_storage&
wide_int_storage::operator = (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
  return *this;
}

inline unsigned int
wide_int_storage::get_precision () const
{
  return precision;
}

inline const long *
wide_int_storage::get_val () const
{
  return val;
}

inline unsigned int
wide_int_storage::get_len () const
{
  return len;
}

inline long *
wide_int_storage::write_val ()
{
  return val;
}

inline void
wide_int_storage::set_len (unsigned int l, bool is_sign_extended)
{
  len = l;
  if (!is_sign_extended && len * 64 > precision)
    val[len - 1] = sext_hwi (val[len - 1],
        precision % 64);
}



inline wide_int
wide_int_storage::from (const wide_int_ref &x, unsigned int precision,
   signop sgn)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, precision, sgn));
  return result;
}




inline wide_int
wide_int_storage::from_array (const long *val, unsigned int len,
         unsigned int precision, bool need_canon_p)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::from_array (result.write_val (), val, len, precision,
      need_canon_p));
  return result;
}


inline wide_int
wide_int_storage::create (unsigned int precision)
{
  wide_int x;
  x.precision = precision;
  return x;
}

template <typename T1, typename T2>
inline wide_int
wi::int_traits <wide_int_storage>::get_binary_result (const T1 &x, const T2 &y)
{

  static_assert ((wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION), "wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION")
                                                                ;
  if (wi::int_traits <T1>::precision_type == FLEXIBLE_PRECISION)
    return wide_int::create (wi::get_precision (y));
  else
    return wide_int::create (wi::get_precision (x));
}


template <int N>
class fixed_wide_int_storage
{
private:
  long val[(N + 64 + 1) / 64];
  unsigned int len;

public:
  fixed_wide_int_storage ();
  template <typename T>
  fixed_wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  static generic_wide_int < fixed_wide_int_storage <N> > from (const wide_int_ref &, signop);
  static generic_wide_int < fixed_wide_int_storage <N> > from_array (const long *, unsigned int,
     bool = true);
};

namespace wi
{
  template <int N>
  struct int_traits < fixed_wide_int_storage <N> >
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static const unsigned int precision = N;
    template <typename T1, typename T2>
    static generic_wide_int < fixed_wide_int_storage <N> > get_binary_result (const T1 &, const T2 &);
  };
}

template <int N>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage () {}


template <int N>
template <typename T>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage (const T &x)
{


  typename wi::binary_traits <T, generic_wide_int < fixed_wide_int_storage <N> > >::result_type *assertion __attribute__ ((__unused__));
  wi::copy (*this, generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > (x, N));
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_precision () const
{
  return N;
}

template <int N>
inline const long *
fixed_wide_int_storage <N>::get_val () const
{
  return val;
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_len () const
{
  return len;
}

template <int N>
inline long *
fixed_wide_int_storage <N>::write_val ()
{
  return val;
}

template <int N>
inline void
fixed_wide_int_storage <N>::set_len (unsigned int l, bool)
{
  len = l;

  static_assert ((N % 64 == 0), "N % HOST_BITS_PER_WIDE_INT == 0");
}


template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from (const wide_int_ref &x, signop sgn)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, N, sgn));
  return result;
}




template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from_array (const long *val,
     unsigned int len,
     bool need_canon_p)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::from_array (result.write_val (), val, len,
      N, need_canon_p));
  return result;
}

template <int N>
template <typename T1, typename T2>
inline generic_wide_int < fixed_wide_int_storage <N> >
wi::int_traits < fixed_wide_int_storage <N> >::
get_binary_result (const T1 &, const T2 &)
{
  return generic_wide_int < fixed_wide_int_storage <N> > ();
}


class trailing_wide_int_storage
{
private:


  unsigned int m_precision;


  unsigned char *m_len;



  long *m_val;

public:
  trailing_wide_int_storage (unsigned int, unsigned char *, long *);


  unsigned int get_len () const;
  unsigned int get_precision () const;
  const long *get_val () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  trailing_wide_int_storage &operator = (const T &);
};

typedef generic_wide_int <trailing_wide_int_storage> trailing_wide_int;


namespace wi
{
  template <>
  struct int_traits <trailing_wide_int_storage>
    : public int_traits <wide_int_storage> {};
}





template <int N>
struct trailing_wide_ints
{
private:

  unsigned short m_precision;


  unsigned char m_max_len;


  unsigned char m_len[N];



  long m_val[1];

public:
  typedef generic_wide_int <wide_int_ref_storage <wi::int_traits <trailing_wide_int_storage>::is_sign_extended, wi::int_traits <trailing_wide_int_storage>::host_dependent_precision> > const_reference;

  void set_precision (unsigned int);
  unsigned int get_precision () const { return m_precision; }
  trailing_wide_int operator [] (unsigned int);
  const_reference operator [] (unsigned int) const;
  static size_t extra_size (unsigned int);
  size_t extra_size () const { return extra_size (m_precision); }
};

inline trailing_wide_int_storage::
trailing_wide_int_storage (unsigned int precision, unsigned char *len,
      long *val)
  : m_precision (precision), m_len (len), m_val (val)
{
}

inline unsigned int
trailing_wide_int_storage::get_len () const
{
  return *m_len;
}

inline unsigned int
trailing_wide_int_storage::get_precision () const
{
  return m_precision;
}

inline const long *
trailing_wide_int_storage::get_val () const
{
  return m_val;
}

inline long *
trailing_wide_int_storage::write_val ()
{
  return m_val;
}

inline void
trailing_wide_int_storage::set_len (unsigned int len, bool is_sign_extended)
{
  *m_len = len;
  if (!is_sign_extended && len * 64 > m_precision)
    m_val[len - 1] = sext_hwi (m_val[len - 1],
          m_precision % 64);
}

template <typename T>
inline trailing_wide_int_storage &
trailing_wide_int_storage::operator = (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, m_precision);
  wi::copy (*this, xi);
  return *this;
}



template <int N>
inline void
trailing_wide_ints <N>::set_precision (unsigned int precision)
{
  m_precision = precision;
  m_max_len = ((precision + 64 - 1)
        / 64);
}


template <int N>
inline trailing_wide_int
trailing_wide_ints <N>::operator [] (unsigned int index)
{
  return trailing_wide_int_storage (m_precision, &m_len[index],
        &m_val[index * m_max_len]);
}

template <int N>
inline typename trailing_wide_ints <N>::const_reference
trailing_wide_ints <N>::operator [] (unsigned int index) const
{
  return wi::storage_ref (&m_val[index * m_max_len],
     m_len[index], m_precision);
}



template <int N>
inline size_t
trailing_wide_ints <N>::extra_size (unsigned int precision)
{
  unsigned int max_len = ((precision + 64 - 1)
     / 64);
  return (N * max_len - 1) * sizeof (long);
}
# 1503 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{

  template <typename T, bool signed_p>
  struct primitive_int_traits
  {
    static const enum precision_type precision_type = FLEXIBLE_PRECISION;
    static const bool host_dependent_precision = true;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (T);
    static wi::storage_ref decompose (long *, unsigned int, T);
  };
}

template <typename T, bool signed_p>
inline unsigned int
wi::primitive_int_traits <T, signed_p>::get_precision (T)
{
  return sizeof (T) * 8;
}

template <typename T, bool signed_p>
inline wi::storage_ref
wi::primitive_int_traits <T, signed_p>::decompose (long *scratch,
         unsigned int precision, T x)
{
  scratch[0] = x;
  if (signed_p || scratch[0] >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}


namespace wi
{
  template <>
  struct int_traits <unsigned char>
    : public primitive_int_traits <unsigned char, false> {};

  template <>
  struct int_traits <unsigned short>
    : public primitive_int_traits <unsigned short, false> {};

  template <>
  struct int_traits <int>
    : public primitive_int_traits <int, true> {};

  template <>
  struct int_traits <unsigned int>
    : public primitive_int_traits <unsigned int, false> {};

  template <>
  struct int_traits <long>
    : public primitive_int_traits <long, true> {};

  template <>
  struct int_traits <unsigned long>
    : public primitive_int_traits <unsigned long, false> {};


  template <>
  struct int_traits <long long>
    : public primitive_int_traits <long long, true> {};

  template <>
  struct int_traits <unsigned long long>
    : public primitive_int_traits <unsigned long long, false> {};

}

namespace wi
{


  class hwi_with_prec
  {
  public:
    hwi_with_prec () {}
    hwi_with_prec (long, unsigned int, signop);
    long val;
    unsigned int precision;
    signop sgn;
  };

  hwi_with_prec shwi (long, unsigned int);
  hwi_with_prec uhwi (unsigned long, unsigned int);

  hwi_with_prec minus_one (unsigned int);
  hwi_with_prec zero (unsigned int);
  hwi_with_prec one (unsigned int);
  hwi_with_prec two (unsigned int);
}

inline wi::hwi_with_prec::hwi_with_prec (long v, unsigned int p,
      signop s)
  : precision (p), sgn (s)
{
  if (precision < 64)
    val = sext_hwi (v, precision);
  else
    val = v;
}


inline wi::hwi_with_prec
wi::shwi (long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, SIGNED);
}


inline wi::hwi_with_prec
wi::uhwi (unsigned long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, UNSIGNED);
}


inline wi::hwi_with_prec
wi::minus_one (unsigned int precision)
{
  return wi::shwi (-1, precision);
}


inline wi::hwi_with_prec
wi::zero (unsigned int precision)
{
  return wi::shwi (0, precision);
}


inline wi::hwi_with_prec
wi::one (unsigned int precision)
{
  return wi::shwi (1, precision);
}


inline wi::hwi_with_prec
wi::two (unsigned int precision)
{
  return wi::shwi (2, precision);
}

namespace wi
{


  template<typename T, precision_type = int_traits<T>::precision_type>
  struct ints_for
  {
    static int zero (const T &) { return 0; }
  };

  template<typename T>
  struct ints_for<T, VAR_PRECISION>
  {
    static hwi_with_prec zero (const T &);
  };
}

template<typename T>
inline wi::hwi_with_prec
wi::ints_for<T, wi::VAR_PRECISION>::zero (const T &x)
{
  return wi::zero (wi::get_precision (x));
}

namespace wi
{
  template <>
  struct int_traits <wi::hwi_with_prec>
  {
    static const enum precision_type precision_type = VAR_PRECISION;


    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (const wi::hwi_with_prec &);
    static wi::storage_ref decompose (long *, unsigned int,
          const wi::hwi_with_prec &);
  };
}

inline unsigned int
wi::int_traits <wi::hwi_with_prec>::get_precision (const wi::hwi_with_prec &x)
{
  return x.precision;
}

inline wi::storage_ref
wi::int_traits <wi::hwi_with_prec>::
decompose (long *scratch, unsigned int precision,
    const wi::hwi_with_prec &x)
{
  ((void)(!(precision == x.precision) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 1700, __FUNCTION__), 0 : 0));
  scratch[0] = x.val;
  if (x.sgn == SIGNED || x.val >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}






namespace wi
{
  bool eq_p_large (const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  bool lts_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  bool ltu_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  int cmps_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  int cmpu_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  unsigned int sext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int zext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int set_bit_large (long *, const long *,
         unsigned int, unsigned int, unsigned int);
  unsigned int lshift_large (long *, const long *,
        unsigned int, unsigned int, unsigned int);
  unsigned int lrshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int arshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int and_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int and_not_large (long *, const long *,
         unsigned int, const long *,
         unsigned int, unsigned int);
  unsigned int or_large (long *, const long *, unsigned int,
    const long *, unsigned int, unsigned int);
  unsigned int or_not_large (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int);
  unsigned int xor_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int add_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int sub_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int mul_internal (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int, signop,
        overflow_type *, bool);
  unsigned int divmod_internal (long *, unsigned int *,
    long *, const long *,
    unsigned int, unsigned int,
    const long *,
    unsigned int, unsigned int,
    signop, overflow_type *);
}


template <typename T>
inline unsigned int
wi::get_precision (const T &x)
{
  return wi::int_traits <T>::get_precision (x);
}



template <typename T1, typename T2>
inline unsigned int
wi::get_binary_precision (const T1 &x, const T2 &y)
{
  return get_precision (wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::
   get_binary_result (x, y));
}


template <typename T1, typename T2>
inline void
wi::copy (T1 &x, const T2 &y)
{
  long *xval = x.write_val ();
  const long *yval = y.get_val ();
  unsigned int len = y.get_len ();
  unsigned int i = 0;
  do
    xval[i] = yval[i];
  while (++i < len);
  x.set_len (len, y.is_sign_extended);
}


template <typename T>
inline bool
wi::fits_shwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.len == 1;
}



template <typename T>
inline bool
wi::fits_uhwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (xi.precision <= 64)
    return true;
  if (xi.len == 1)
    return xi.slow () >= 0;
  return xi.len == 2 && xi.uhigh () == 0;
}



template <typename T>
inline bool
wi::neg_p (const T &x, signop sgn)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (sgn == UNSIGNED)
    return false;
  return xi.sign_mask () < 0;
}


template <typename T>
inline long
wi::sign_mask (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.sign_mask ();
}


template <typename T1, typename T2>
inline bool
wi::eq_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (xi.is_sign_extended && yi.is_sign_extended)
    {

      if (xi.len != yi.len)
 return false;
      unsigned int i = 0;
      do
 if (xi.val[i] != yi.val[i])
   return false;
      while (++i != xi.len);
      return true;
    }
  if (__builtin_expect (yi.len == 1, true))
    {

      if (xi.len != 1)
 return false;


      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return xi.val[0] == 0;

      unsigned long diff = xi.val[0] ^ yi.val[0];
      int excess = 64 - precision;
      if (excess > 0)
 diff <<= excess;
      return diff == 0;
    }
  return eq_p_large (xi.val, xi.len, yi.val, yi.len, precision);
}


template <typename T1, typename T2>
inline bool
wi::ne_p (const T1 &x, const T2 &y)
{
  return !eq_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::lts_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi);

      if (wi::fits_shwi_p (xi))
 return xi.to_shwi () < yi.to_shwi ();


      if (neg_p (xi))
 return true;


      return false;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return !neg_p (yi);
  return lts_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::ltu_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    return xi.len == 1 && xi.to_uhwi () < (unsigned long) yi.val[0];
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    return yi.len != 1 || yi.to_uhwi () > (unsigned long) xi.val[0];



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl;
    }
  return ltu_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::lt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return lts_p (x, y);
  else
    return ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::les_p (const T1 &x, const T2 &y)
{
  return !lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::leu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::le_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return les_p (x, y);
  else
    return leu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::gts_p (const T1 &x, const T2 &y)
{
  return lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gtu_p (const T1 &x, const T2 &y)
{
  return ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return gts_p (x, y);
  else
    return gtu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ges_p (const T1 &x, const T2 &y)
{
  return !lts_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::geu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ge_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return ges_p (x, y);
  else
    return geu_p (x, y);
}



template <typename T1, typename T2>
inline int
wi::cmps (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi) ? -1 : !(xi.len == 1 && xi.val[0] == 0);

      if (wi::fits_shwi_p (xi))
 {
   long xl = xi.to_shwi ();
   long yl = yi.to_shwi ();
   return xl < yl ? -1 : xl > yl;
 }


      if (neg_p (xi))
 return -1;


      return 1;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return neg_p (yi) ? 1 : -1;
  return cmps_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmpu (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    {

      if (xi.len != 1)
 return 1;

      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.val[0];
      return xl < yl ? -1 : xl > yl;
    }
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    {

      if (yi.len != 1)
 return -1;

      unsigned long xl = xi.val[0];
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }
  return cmpu_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmp (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return cmps (x, y);
  else
    return cmpu (x, y);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::bit_not (const T &x)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, get_precision (result));
  for (unsigned int i = 0; i < xi.len; ++i)
    val[i] = ~xi.val[i];
  result.set_len (xi.len);
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x)
{
  return sub (0, x);
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x, overflow_type *overflow)
{
  *overflow = only_sign_bit_p (x) ? OVF_OVERFLOW : OVF_NONE;
  return sub (0, x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::abs (const T &x)
{
  return neg_p (x) ? neg (x) : typename wi::binary_traits <T, T>::result_type (x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::sext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);

  if (offset <= 64)
    {
      val[0] = sext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (sext_large (val, xi.val, xi.len, precision, offset));
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::zext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (offset >= precision)
    {
      wi::copy (result, xi);
      return result;
    }



  if (offset < 64)
    {
      val[0] = zext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (zext_large (val, xi.val, xi.len, precision, offset), true);
  return result;
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::ext (const T &x, unsigned int offset, signop sgn)
{
  return sgn == SIGNED ? sext (x, offset) : zext (x, offset);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::set_bit (const T &x, unsigned int bit)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () | (1UL << bit);
      result.set_len (1);
    }
  else
    result.set_len (set_bit_large (val, xi.val, xi.len, precision, bit));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::min (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::le_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, UNSIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::max (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::ge_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, UNSIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_large (val, xi.val, xi.len, yi.val, yi.len,
          precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_not_large (val, xi.val, xi.len, yi.val, yi.len,
       precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_large (val, xi.val, xi.len,
         yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_not_large (val, xi.val, xi.len, yi.val, yi.len,
      precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_xor (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () ^ yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (xor_large (val, xi.val, xi.len,
          yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () + yi.ulow ();
      result.set_len (1);
    }
# 2441 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (resultl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      if (sgn == SIGNED)
 {
   if ((((resultl ^ xl) & (resultl ^ yl))
        >> (precision - 1)) & 1)
     {
       if (xl > resultl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < resultl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       < (xl << (64 - precision)))
   ? OVF_OVERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () - yi.ulow ();
      result.set_len (1);
    }
# 2527 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (xl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      if (sgn == SIGNED)
 {
   if ((((xl ^ yl) & (resultl ^ xl)) >> (precision - 1)) & 1)
     {
       if (xl > yl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < yl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       > (xl << (64 - precision)))
   ? OVF_UNDERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () * yi.ulow ();
      result.set_len (1);
    }
  else
    result.set_len (mul_internal (val, xi.val, xi.len, yi.val, yi.len,
      precision, UNSIGNED, 0, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, overflow, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, SIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, UNSIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul_high (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, 0, true));
  return result;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  quotient.set_len (divmod_internal (quotient_val, 0, 0, xi.val, xi.len,
         precision,
         yi.val, yi.len, yi.precision,
         sgn, overflow));
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return quotient - 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return quotient + 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_ceil (const T1 &x, const T2 &y)
{
  return div_ceil (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return quotient - 1;
       else
  return quotient + 1;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return quotient + 1;
 }
    }
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::divmod_trunc (const T1 &x, const T2 &y, signop sgn,
    typename wi::binary_traits <T1, T2>::result_type *remainder_ptr)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn, 0));
  remainder.set_len (remainder_len);

  *remainder_ptr = remainder;
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::gcd (const T1 &a, const T2 &b, signop sgn)
{
  T1 x, y, z;

  x = wi::abs (a);
  y = wi::abs (b);

  while (gt_p (x, 0, sgn))
    {
      z = mod_trunc (y, x, sgn);
      y = x;
      x = z;
    }

  return y;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (remainder);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  divmod_internal (0, &remainder_len, remainder_val,
     xi.val, xi.len, precision,
     yi.val, yi.len, yi.precision, sgn, overflow);
  remainder.set_len (remainder_len);

  return remainder;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return remainder + y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_floor (const T1 &x, const T2 &y)
{
  return mod_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return remainder - y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return remainder + y;
       else
  return remainder - y;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return remainder - y;
 }
    }
  return remainder;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn)
{
  return wi::mod_trunc (x, y, sgn) == 0;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn,
     typename wi::binary_traits <T1, T2>::result_type *res)
{
  typename wi::binary_traits <T1, T2>::result_type remainder;
  typename wi::binary_traits <T1, T2>::result_type quotient
    = divmod_trunc (x, y, sgn, &remainder);
  if (remainder == 0)
    {
      *res = quotient;
      return true;
    }
  return false;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3054 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? ((__builtin_constant_p (shift < 64 - 1) && (shift < 64 - 1))
      && xi.len == 1
      && ((unsigned long) (xi.val[0]) - (unsigned long) (0) <= (unsigned long) ((~((long) (1UL << (64 - 1)))) >> shift) - (unsigned long) (0)))
   : precision <= 64)
 {
   val[0] = xi.ulow () << shift;
   result.set_len (1);
 }
      else
 result.set_len (lshift_large (val, xi.val, xi.len,
          precision, shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lrshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3098 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? (shift < 64
      && xi.len == 1
      && xi.val[0] >= 0)
   : xi.precision <= 64)
 {
   val[0] = xi.to_uhwi () >> shift;
   result.set_len (1);
 }
      else
 result.set_len (lrshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::arshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = sign_mask (x);
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
      if (xi.precision <= 64)
 {
   val[0] = sext_hwi (xi.ulow () >> shift, xi.precision - shift);
   result.set_len (1, true);
 }
      else
 result.set_len (arshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::rshift (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == UNSIGNED)
    return lrshift (x, y);
  else
    return arshift (x, y);
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::lrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::rrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}



inline int
wi::parity (const wide_int_ref &x)
{
  return popcount (x) & 1;
}


template <typename T>
inline unsigned long
wi::extract_uhwi (const T &x, unsigned int bitpos, unsigned int width)
{
  unsigned precision = get_precision (x);
  if (precision < bitpos + width)
    precision = bitpos + width;
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (width == 0)
    return 0;

  unsigned int start = bitpos / 64;
  unsigned int shift = bitpos % 64;
  unsigned long res = xi.elt (start);
  res >>= shift;
  if (shift + width > 64)
    {
      unsigned long upper = xi.elt (start + 1);
      res |= upper << (-shift % 64);
    }
  return zext_hwi (res, width);
}


template <typename T>
inline unsigned int
wi::min_precision (const T &x, signop sgn)
{
  if (sgn == SIGNED)
    return get_precision (x) - clrsb (x);
  else
    return get_precision (x) - clz (x);
}
# 3248 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator < (const T1 &x, const T2 &y) { return wi::lts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator <= (const T1 &x, const T2 &y) { return wi::les_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator > (const T1 &x, const T2 &y) { return wi::gts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator >= (const T1 &x, const T2 &y) { return wi::ges_p (x, y); }
# 3287 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator ~ (const generic_wide_int<T> &x) { return wi::bit_not (x); }
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator - (const generic_wide_int<T> &x) { return wi::neg (x); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator == (const T1 &x, const T2 &y) { return wi::eq_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator != (const T1 &x, const T2 &y) { return wi::ne_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator & (const T1 &x, const T2 &y) { return wi::bit_and (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator | (const T1 &x, const T2 &y) { return wi::bit_or (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator ^ (const T1 &x, const T2 &y) { return wi::bit_xor (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator + (const T1 &x, const T2 &y) { return wi::add (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator - (const T1 &x, const T2 &y) { return wi::sub (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator * (const T1 &x, const T2 &y) { return wi::mul (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T1>::operator_result operator << (const T1 &x, const T2 &y) { return wi::lshift (x, y); }






template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator >> (const T1 &x, const T2 &y)
{
  return wi::arshift (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator / (const T1 &x, const T2 &y)
{
  return wi::sdiv_trunc (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator % (const T1 &x, const T2 &y)
{
  return wi::smod_trunc (x, y);
}

template<typename T>
void
gt_ggc_mx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *, void (*) (void *, void *), void *)
{
}

template<int N>
void
gt_ggc_mx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *, void (*) (void *, void *), void *)
{
}

namespace wi
{



  struct never_used1 {};
  struct never_used2 {};

  wide_int min_value (unsigned int, signop);
  wide_int min_value (never_used1 *);
  wide_int min_value (never_used2 *);
  wide_int max_value (unsigned int, signop);
  wide_int max_value (never_used1 *);
  wide_int max_value (never_used2 *);



  wide_int from_buffer (const unsigned char *, unsigned int);





  wide_int mask (unsigned int, bool, unsigned int);
  wide_int shifted_mask (unsigned int, unsigned int, bool, unsigned int);
  wide_int set_bit_in_zero (unsigned int, unsigned int);
  wide_int insert (const wide_int &x, const wide_int &y, unsigned int,
     unsigned int);
  wide_int round_down_for_mask (const wide_int &, const wide_int &);
  wide_int round_up_for_mask (const wide_int &, const wide_int &);

  wide_int mod_inv (const wide_int &a, const wide_int &b);

  template <typename T>
  T mask (unsigned int, bool);

  template <typename T>
  T shifted_mask (unsigned int, unsigned int, bool);

  template <typename T>
  T set_bit_in_zero (unsigned int);

  unsigned int mask (long *, unsigned int, bool, unsigned int);
  unsigned int shifted_mask (long *, unsigned int, unsigned int,
        bool, unsigned int);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool);
}



inline wide_int
wi::mask (unsigned int width, bool negate_p, unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (mask (result.write_val (), width, negate_p, precision));
  return result;
}




inline wide_int
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p,
    unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (shifted_mask (result.write_val (), start, width, negate_p,
    precision));
  return result;
}



inline wide_int
wi::set_bit_in_zero (unsigned int bit, unsigned int precision)
{
  return shifted_mask (bit, 1, false, precision);
}



template <typename T>
inline T
wi::mask (unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (mask (result.write_val (), width, negate_p,
   wi::int_traits <T>::precision));
  return result;
}




template <typename T>
inline T
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (shifted_mask (result.write_val (), start, width,
    negate_p,
    wi::int_traits <T>::precision));
  return result;
}



template <typename T>
inline T
wi::set_bit_in_zero (unsigned int bit)
{
  return shifted_mask <T> (bit, 1, false);
}



static inline void
wi::accumulate_overflow (wi::overflow_type &overflow,
    wi::overflow_type suboverflow)
{
  if (!suboverflow)
    return;
  if (!overflow)
    overflow = suboverflow;
  else if (overflow != suboverflow)
    overflow = wi::OVF_UNKNOWN;
}
# 452 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h"
extern void print_dec (const wide_int_ref &wi, char *buf, signop sgn);
extern void print_dec (const wide_int_ref &wi, FILE *file, signop sgn);
extern void print_decs (const wide_int_ref &wi, char *buf);
extern void print_decs (const wide_int_ref &wi, FILE *file);
extern void print_decu (const wide_int_ref &wi, char *buf);
extern void print_decu (const wide_int_ref &wi, FILE *file);
extern void print_hex (const wide_int_ref &wi, char *buf);
extern void print_hex (const wide_int_ref &wi, FILE *file);
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename T> struct poly_int_pod;
template<unsigned int N, typename T> class poly_int;
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T, wi::precision_type = wi::int_traits<T>::precision_type>
struct poly_coeff_traits;

template<typename T>
struct poly_coeff_traits<T, wi::FLEXIBLE_PRECISION>
{
  typedef T result;
  typedef T int_type;
  static const int signedness = (T (0) >= T (-1));
  static const int precision = sizeof (T) * 8;
  static const T max_value = (signedness
         ? ((T (1) << (precision - 2))
     + ((T (1) << (precision - 2)) - 1))
         : T (-1));
  static const int rank = sizeof (T) * 2 + !signedness;
};

template<typename T>
struct poly_coeff_traits<T, wi::VAR_PRECISION>
{
  typedef T result;
  typedef int int_type;
  static const int signedness = -1;
  static const int precision = (((160 + 64) / 64) * 64);
  static const int rank = 0x7fffffff;
};

template<typename T>
struct poly_coeff_traits<T, wi::CONST_PRECISION>
{
  typedef typename wi::binary_traits <T, T>::result_type result;
  typedef int int_type;

  static const int signedness = 1;
  static const int precision = wi::int_traits<T>::precision;
  static const int rank = precision * 2 / 8;
};


template<typename T1, typename T2>
struct poly_coeff_pair_traits
{
# 118 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  static const bool lossless_p = (poly_coeff_traits<T1>::signedness
      == poly_coeff_traits<T2>::signedness
      ? (poly_coeff_traits<T1>::precision
         >= poly_coeff_traits<T2>::precision)
      : (poly_coeff_traits<T1>::signedness == 1
         && poly_coeff_traits<T2>::signedness == 0
         && (poly_coeff_traits<T1>::precision
      > poly_coeff_traits<T2>::precision)));





  static const int result_kind
    = ((poly_coeff_traits<T1>::rank <= poly_coeff_traits<long>::rank
 && poly_coeff_traits<T2>::rank <= poly_coeff_traits<long>::rank)
       ? 0
       : (poly_coeff_traits<T1>::rank <= poly_coeff_traits<unsigned long>::rank
   && poly_coeff_traits<T2>::rank <= poly_coeff_traits<unsigned long>::rank)
       ? 1 : 2);

};



template<typename T1, typename T2, typename T3,
  bool lossless_p = poly_coeff_pair_traits<T1, T2>::lossless_p>
struct if_lossless;
template<typename T1, typename T2, typename T3>
struct if_lossless<T1, T2, T3, true>
{
  typedef T3 type;
};
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T>
struct poly_int_traits
{
  static const bool is_poly = false;
  static const unsigned int num_coeffs = 1;
  typedef T coeff_type;
  typedef typename poly_coeff_traits<T>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int_pod<N, C> >
{
  static const bool is_poly = true;
  static const unsigned int num_coeffs = N;
  typedef C coeff_type;
  typedef typename poly_coeff_traits<C>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int<N, C> > : poly_int_traits<poly_int_pod<N, C> >
{
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_nonpoly {};
template<typename T1, typename T2>
struct if_nonpoly<T1, T2, false>
{
  typedef T2 type;
};



template<typename T1, typename T2, typename T3,
  bool is_poly1 = poly_int_traits<T1>::is_poly,
  bool is_poly2 = poly_int_traits<T2>::is_poly>
struct if_nonpoly2 {};
template<typename T1, typename T2, typename T3>
struct if_nonpoly2<T1, T2, T3, false, false>
{
  typedef T3 type;
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_poly {};
template<typename T1, typename T2>
struct if_poly<T1, T2, true>
{
  typedef T2 type;
};
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2 = T1,
  int result_kind = poly_coeff_pair_traits<T1, T2>::result_kind>
struct poly_result;


template<typename T1, typename T2>
struct poly_result<T1, T2, 0>
{
  typedef long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 1>
{
  typedef unsigned long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 2>
{
  typedef typename wi::binary_traits <T1, T2>::result_type type;


  typedef const T1 &cast;
};
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename C>
struct poly_int_pod
{
public:
  template<typename Ca>
  poly_int_pod &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int_pod &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int_pod &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator *= (const Ca &);

  poly_int_pod &operator <<= (unsigned int);

  bool is_constant () const;

  template<typename T>
  typename if_lossless<T, C, bool>::type is_constant (T *) const;

  C to_constant () const;

  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, unsigned int,
         signop);
  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, signop);

  bool to_shwi (poly_int_pod<N, long> *) const;
  bool to_uhwi (poly_int_pod<N, unsigned long> *) const;
  poly_int<N, long> force_shwi () const;
  poly_int<N, unsigned long> force_uhwi () const;





  C coeffs[N];
};

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator = (const Ca &a)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = a) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (a)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::is_constant () const
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (this->coeffs[i] != 0)
 return false;
  return true;
}




template<unsigned int N, typename C>
template<typename T>
inline typename if_lossless<T, C, bool>::type
poly_int_pod<N, C>::is_constant (T *const_value) const
{
  if (is_constant ())
    {
      *const_value = this->coeffs[0];
      return true;
    }
  return false;
}







template<unsigned int N, typename C>
inline C
poly_int_pod<N, C>::to_constant () const
{
  ((void)(!(is_constant ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 504, __FUNCTION__), 0 : 0));
  return this->coeffs[0];
}





template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a,
     unsigned int bitsize, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], bitsize, sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], bitsize, sgn))));
  return r;
}




template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], sgn))));
  return r;
}





template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_shwi (poly_int_pod<N, long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_shwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_shwi ();
  return true;
}






template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_uhwi (poly_int_pod<N, unsigned long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_uhwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_uhwi ();
  return true;
}




template<unsigned int N, typename C>
inline poly_int<N, long>
poly_int_pod<N, C>::force_shwi () const
{
  poly_int_pod<N, long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_shwi ();
  return r;
}




template<unsigned int N, typename C>
inline poly_int<N, unsigned long>
poly_int_pod<N, C>::force_uhwi () const
{
  poly_int_pod<N, unsigned long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_uhwi ();
  return r;
}
# 611 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename C>
class poly_int : public poly_int_pod<N, C>
{
public:
  poly_int () {}

  template<typename Ca>
  poly_int (const poly_int<N, Ca> &);
  template<typename Ca>
  poly_int (const poly_int_pod<N, Ca> &);
  template<typename C0>
  poly_int (const C0 &);
  template<typename C0, typename C1>
  poly_int (const C0 &, const C1 &);

  template<typename Ca>
  poly_int &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator *= (const Ca &);

  poly_int &operator <<= (unsigned int);
};

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename C0>
inline
poly_int<N, C>::poly_int (const C0 &c0)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename C0, typename C1>
inline
poly_int<N, C>::poly_int (const C0 &c0, const C1 &c1)
{
  static_assert ((N >= 2), "N >= 2");
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[1] = c1) : (void) ((*this).coeffs[1].~C (), new (&(*this).coeffs[1]) C (c1)));
  for (unsigned int i = 2; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] = a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator = (const Ca &a)
{
  this->coeffs[0] = a;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      this->coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0]);
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int<N, C>&
poly_int<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const Ca &a, const Cb &b, const Cc &c)
{
  return a >= b && a <= c;
}

template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const poly_int_pod<N, Ca> &a, const Cb &b, const Cc &c)
{
  for (unsigned int i = 0; i < N; i++)
    if (a.coeffs[i] < b || a.coeffs[i] > c)
      return false;
  return true;
}

namespace wi {


template<unsigned int N>
inline poly_int<N, hwi_with_prec>
shwi (const poly_int_pod<N, long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::shwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::shwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N>
inline poly_int<N, hwi_with_prec>
uhwi (const poly_int_pod<N, unsigned long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::uhwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::uhwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
sext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sext (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
zext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::zext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::zext (a.coeffs[i], precision))));
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator + (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) + b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) + b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator + (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) + b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) + b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator + (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a + NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a + NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator - (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) - b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) - b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator - (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) - b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) - b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator - (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a - NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a - NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator - (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCa (a.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::neg (a.coeffs[0], overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::neg (a.coeffs[0], overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i], &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i], &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator ~ (const poly_int_pod<N, Ca> &a)
{
  if (N >= 2)
    return -1 - a;
  return ~a.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator * (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) * b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) * b)));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator * (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a) * b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a) * b.coeffs[i])));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a, b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a, b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::mul (a.coeffs[0], b, sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::mul (a.coeffs[0], b, sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b, sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b, sgn, &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator << (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) << b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) << b)));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
lshift (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::lshift (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::lshift (a.coeffs[i], b))));
  return r;
}
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b0, const Cb &b1)
{
  if (a1 != b1)







    return (a1 < b1
     ? b0 <= a0 && (a0 - b0) % (b1 - a1) == 0
     : b0 >= a0 && (b0 - a0) % (a1 - b1) == 0);
  return a0 == b0;
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b)
{
  if (a1 != 0)






    return (a1 < 0
     ? b <= a0 && (a0 - b) % a1 == 0
     : b >= a0 && (b - a0) % a1 == 0);
  return a0 == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_eq (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b.coeffs[0], b.coeffs[1]);
  return a.coeffs[0] == b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_eq (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b);
  return a.coeffs[0] == b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_eq (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (b.coeffs[0], b.coeffs[1], a);
  return a == b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_eq (const Ca &a, const Cb &b)
{
  return a == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_ne (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != b.coeffs[i])
 return true;
  return a.coeffs[0] != b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_ne (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != 0)
 return true;
  return a.coeffs[0] != b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_ne (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] != 0)
 return true;
  return a != b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_ne (const Ca &a, const Cb &b)
{
  return a != b;
}
# 1312 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_le (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] <= b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_le (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] <= b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_le (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a <= b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_le (const Ca &a, const Cb &b)
{
  return a <= b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_lt (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] < b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_lt (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] < b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_lt (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a < b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_lt (const Ca &a, const Cb &b)
{
  return a < b;
}
# 1414 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2>
inline bool
ordered_p (const T1 &a, const T2 &b)
{
  return ((poly_int_traits<T1>::num_coeffs == 1
    && poly_int_traits<T2>::num_coeffs == 1)
   || (!maybe_lt (b, a))
   || (!maybe_lt (a, b)));
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1439, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_min (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1453, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1467, __FUNCTION__), 0 : 0));
      return b;
    }
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1487, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_max (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1501, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1515, __FUNCTION__), 0 : 0));
      return a;
    }
}




template<unsigned int N, typename Ca>
inline Ca
constant_lower_bound (const poly_int_pod<N, Ca> &a)
{
  ((void)(!((!maybe_lt (a, typename poly_int_traits<Ca>::int_type (0)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1527, __FUNCTION__), 0 : 0));
  return a.coeffs[0];
}



template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_lower_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (a, b)))
    return a.coeffs[0];
  return b;
}




template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_upper_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a.coeffs[0];
  return b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
lower_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return lower_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}

template<typename Ca, typename Cb>
inline typename poly_result<typename if_nonpoly<Ca>::type, typename if_nonpoly<Cb>::type>::type
lower_bound (const Ca &a, const Cb &b)
{
  return a < b ? a : b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
upper_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return upper_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
coeff_gcd (const poly_int_pod<N, Ca> &a)
{

  unsigned int i;
  for (i = N - 1; i > 0; --i)
    if (a.coeffs[i] != 0)
      break;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[i];
  for (unsigned int j = 0; j < i; ++j)
    if (a.coeffs[j] != 0)
      r = gcd (r, C (a.coeffs[j]));
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
common_multiple (const poly_int_pod<N, Ca> &a, Cb b)
{
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type xgcd = coeff_gcd (a);
  return a * (least_common_multiple (xgcd, b) / xgcd);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
common_multiple (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return common_multiple (b, a);
}
# 1692 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, Cb>::type>
force_common_multiple (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return common_multiple (a, b.coeffs[0]);
  if (a.is_constant ())
    return common_multiple (a.coeffs[0], b);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Ca>::int_type ICa;

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] != ICa (0))
      {
 C lcm = least_common_multiple (NCa (a.coeffs[i]), NCb (b.coeffs[i]));
 C amul = lcm / a.coeffs[i];
 C bmul = lcm / b.coeffs[i];
 for (unsigned int j = 0; j < N; ++j)
   ((void)(!(a.coeffs[j] * amul == b.coeffs[j] * bmul) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1714, __FUNCTION__), 0 : 0));
 return a * amul;
      }
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1717, __FUNCTION__));
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline int
compare_sizes_for_sort (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b)
{
  for (unsigned int i = N; i-- > 0; )
    if (a.coeffs[i] != b.coeffs[i])
      return a.coeffs[i] < b.coeffs[i] ? -1 : 1;
  return 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_p (const poly_int_pod<N, Ca> &value, Cb align)
{
  for (unsigned int i = 1; i < N; i++)
    if ((value.coeffs[i] & (align - 1)) != 0)
      return false;
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_up (const poly_int_pod<N, Ca> &value, Cb align,
       poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value + (-value.coeffs[0] & (align - 1));
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_down (const poly_int_pod<N, Ca> &value, Cb align,
  poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value - (value.coeffs[0] & (align - 1));
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_up (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b,
       Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_up (a, align, &aligned_a)
   && can_align_up (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_down (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b,
         Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_down (a, align, &aligned_a)
   && can_align_down (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1827, __FUNCTION__), 0 : 0));
  return value + (-value.coeffs[0] & (align - 1));
}
# 1838 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1842, __FUNCTION__), 0 : 0));
  return value - (value.coeffs[0] & (align - 1));
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_lower_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)


    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] - (value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] - (value.coeffs[i] & (align - 1))))))
                                             ;
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_upper_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] + (-value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] + (-value.coeffs[i] & (align - 1))))))
                                              ;
  return r;
}
# 1886 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1890, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}
# 1910 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1914, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
known_misalignment (const poly_int_pod<N, Ca> &value, Cb align, Cm *misalign)
{
  ((void)(!(align != 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1934, __FUNCTION__), 0 : 0));
  if (!can_align_p (value, align))
    return false;
  *misalign = value.coeffs[0] & (align - 1);
  return true;
}





template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
force_get_misalignment (const poly_int_pod<N, Ca> &a, Cb align)
{
  ((void)(!(can_align_p (a, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1949, __FUNCTION__), 0 : 0));
  return a.coeffs[0] & (align - 1);
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
known_alignment (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[0];
  for (unsigned int i = 1; i < N; ++i)
    r |= a.coeffs[i];
  return r & -r;
}




template<unsigned int N, typename Ca, typename Cb, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_ior_p (const poly_int_pod<N, Ca> &a, Cb b, Cr *result)
{


  typedef typename poly_int_traits<Ca>::int_type int_type;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if ((-(a.coeffs[i] & -a.coeffs[i]) & b) != int_type (0))
 return false;
  *result = a;
  result->coeffs[0] |= b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
constant_multiple_p (const poly_int_pod<N, Ca> &a, Cb b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  if (NCa (a.coeffs[0]) % NCb (b) != 0 || !a.is_constant ())
    return false;
  *multiple = NCa (a.coeffs[0]) / NCb (b);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
constant_multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type int_type;



  if (NCa (a) % NCb (b.coeffs[0]) != 0
      || (a != int_type (0) && !b.is_constant ()))
    return false;
  *multiple = NCa (a) / NCb (b.coeffs[0]);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
constant_multiple_p (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;

  if (NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0)
    return false;

  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    if (b.coeffs[i] == ICb (0)
 ? a.coeffs[i] != ICa (0)
 : (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0
    || NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != r))
      return false;

  *multiple = r;
  return true;
}



template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b)
{
  return a % b == 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b)
{
  for (unsigned int i = 0; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  return true;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_int_traits<Ca>::int_type int_type;



  return a % b.coeffs[0] == 0 && (a == int_type (0) || b.is_constant ());
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0]);
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type tmp;
  return constant_multiple_p (a, b, &tmp);
}




template<typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b, Cm *multiple)
{
  if (a % b != 0)
    return false;
  *multiple = a / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b, poly_int_pod<N, Cm> *multiple)
{
  if (!multiple_p (a, b))
    return false;
  for (unsigned int i = 0; i < N; ++i)
    multiple->coeffs[i] = a.coeffs[i] / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;



  if (a % b.coeffs[0] != 0 || (NCa (a) != 0 && !b.is_constant ()))
    return false;
  *multiple = a / b.coeffs[0];
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     poly_int_pod<N, Cm> *multiple)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0], multiple);
  return constant_multiple_p (a, b, multiple);
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
exact_div (const poly_int_pod<N, Ca> &a, Cb b)
{
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    {
      ((void)(!(a.coeffs[i] % b == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2162, __FUNCTION__), 0 : 0));
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = a.coeffs[i] / b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (a.coeffs[i] / b)));
    }
  return r;
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
exact_div (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return exact_div (a, b.coeffs[0]);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Cb>::int_type int_type;

  ((void)(!(a.coeffs[0] % b.coeffs[0] == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2182, __FUNCTION__), 0 : 0));
  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    ((void)(!(b.coeffs[i] == int_type (0) ? a.coeffs[i] == int_type (0) : (a.coeffs[i] % b.coeffs[i] == 0 && NCa (a.coeffs[i]) / NCb (b.coeffs[i]) == r)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2185, __FUNCTION__), 0 : 0))


                                                      ;

  return r;
}
# 2201 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly2<Cb, Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b, Cq *quotient)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  Cq q = NCa (a.coeffs[0]) / NCb (b);
  if (!a.is_constant ())
    return false;
  *quotient = q;
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient)
{


  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  C q = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
# 2277 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  bool rem_p = NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0;
  for (unsigned int i = 1; i < N; ++i)
    {
      if (b.coeffs[i] == ICb (0))
 {

   if (a.coeffs[i] != ICa (0))
     return false;
 }
      else
 {
   if (q == 0)
     {

       if (a.coeffs[i] != ICa (0))
  {


    C neg_abs_a = (a.coeffs[i] < 0 ? a.coeffs[i] : -a.coeffs[i]);
    C neg_abs_b = (b.coeffs[i] < 0 ? b.coeffs[i] : -b.coeffs[i]);
    if (neg_abs_a < neg_abs_b)
      return false;
    rem_p = true;
  }
     }
   else
     {

       if (NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != q)
  return false;
       if (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0)
  rem_p = true;
     }
 }
    }




  if (rem_p && (!ordered_p (a, ICa (0)) || !ordered_p (b, ICb (0))))
    return false;

  *quotient = q;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a - *quotient * b;
  return true;
}
# 2345 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient)
{

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  for (unsigned int i = 0; i < N; ++i)
    quotient->coeffs[i] = a.coeffs[i] / b;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a.coeffs[0] % b;
  return true;
}







template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline bool
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   poly_int_pod<N, Cq> *quotient)
{
  if (b.is_constant ())
    return can_div_trunc_p (a, b.coeffs[0], quotient);
  if (!can_div_trunc_p (a, b, &quotient->coeffs[0]))
    return false;
  for (unsigned int i = 1; i < N; ++i)
    quotient->coeffs[i] = 0;
  return true;
}
# 2401 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_away_from_zero_p (const poly_int_pod<N, Ca> &a,
     const poly_int_pod<N, Cb> &b,
     Cq *quotient)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  if (maybe_ne (*quotient * b, a))
    *quotient += (*quotient < 0 ? -1 : 1);
  return true;
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file, signop sgn)
{
  if (value.is_constant ())
    print_dec (value.coeffs[0], file, sgn);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_dec (value.coeffs[i], file, sgn);
   fputc_unlocked (i == N - 1 ? ']' : ',', file);
 }
    }
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file)
{
  static_assert ((poly_coeff_traits<C>::signedness >= 0), "poly_coeff_traits<C>::signedness >= 0");
  print_dec (value, file,
      poly_coeff_traits<C>::signedness ? SIGNED : UNSIGNED);
}



template<unsigned int N, typename C>
void
print_hex (const poly_int_pod<N, C> &value, FILE *file)
{
  if (value.is_constant ())
    print_hex (value.coeffs[0], file);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_hex (value.coeffs[i], file);
   fputc_unlocked (i == N - 1 ? ']' : ',', file);
 }
    }
}
# 2482 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2,
  typename Res = typename poly_result<typename poly_int_traits<typename poly_result<typename poly_int_traits<T1>::coeff_type, typename poly_int_traits<T2>::coeff_type>::type>::coeff_type, typename poly_int_traits<unsigned long>::coeff_type>::type
                               >
struct poly_span_traits
{
  template<typename T>
  static const T &cast (const T &x) { return x; }
};

template<typename T1, typename T2>
struct poly_span_traits<T1, T2, unsigned long>
{
  template<typename T>
  static typename if_nonpoly<T, unsigned long>::type
  cast (const T &x) { return x; }

  template<unsigned int N, typename T>
  static poly_int<N, unsigned long>
  cast (const poly_int_pod<N, T> &x) { return x; }
};




template<typename T>
inline bool
known_size_p (const T &a)
{
  return maybe_ne (a, typename poly_int_traits<T>::int_type (-1));
}





template<typename T1, typename T2, typename T3>
inline bool
maybe_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  if ((!maybe_le (pos, val)))
    return false;
  if (!known_size_p (size))
    return true;
  if ((poly_int_traits<T1>::num_coeffs > 1
       || poly_int_traits<T2>::num_coeffs > 1)
      && maybe_lt (val, pos))


    return true;
  return maybe_lt (start_span::cast (val) - start_span::cast (pos),
     size_span::cast (size));
}





template<typename T1, typename T2, typename T3>
inline bool
known_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  return (known_size_p (size)
   && (!maybe_lt (val, pos))
   && (!maybe_le (size_span::cast (size), start_span::cast (val) - start_span::cast (pos)))
                                );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_maybe_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  if (maybe_in_range_p (pos2, pos1, size1))
    return maybe_ne (size2, typename poly_int_traits<T4>::int_type (0));
  if (maybe_in_range_p (pos1, pos2, size2))
    return maybe_ne (size1, typename poly_int_traits<T2>::int_type (0));
  return false;
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_known_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T2> size1_span;
  typedef poly_span_traits<T4, T4> size2_span;
# 2593 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  return (known_size_p (size1)
   && known_size_p (size2)
   && (!maybe_le (size1_span::cast (size1), start_span::cast (pos2) - start_span::cast (lower_bound (pos1, pos2))))


   && (!maybe_le (size2_span::cast (size2), start_span::cast (pos1) - start_span::cast (lower_bound (pos1, pos2))))

                                  );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
known_subrange_p (const T1 &pos1, const T2 &size1,
    const T3 &pos2, const T4 &size2)
{
  typedef typename poly_int_traits<T2>::coeff_type C2;
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T4> size_span;
  return ((!maybe_le (size1, typename poly_int_traits<T2>::int_type (0)))
   && (poly_coeff_traits<C2>::signedness > 0
       || known_size_p (size1))
   && known_size_p (size2)
   && (!maybe_lt (pos1, pos2))
   && (!maybe_lt (size2, size1))
   && (!maybe_lt (size_span::cast (size2) - size_span::cast (size1), start_span::cast (pos1) - start_span::cast (pos2)))
                                                           );
}





template<typename T>
inline typename if_nonpoly<T, bool>::type
endpoint_representable_p (const T &pos, const T &size)
{
  return (!known_size_p (size)
   || pos <= poly_coeff_traits<T>::max_value - size);
}

template<unsigned int N, typename C>
inline bool
endpoint_representable_p (const poly_int_pod<N, C> &pos,
     const poly_int_pod<N, C> &size)
{
  if (known_size_p (size))
    for (unsigned int i = 0; i < N; ++i)
      if (pos.coeffs[i] > poly_coeff_traits<C>::max_value - size.coeffs[i])
 return false;
  return true;
}

template<unsigned int N, typename C>
void
gt_ggc_mx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *, void (*) (void *, void *), void *)
{
}
# 467 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h"
typedef poly_int_pod<1, unsigned short> poly_uint16_pod;
typedef poly_int_pod<1, long> poly_int64_pod;
typedef poly_int_pod<1,
       unsigned long> poly_uint64_pod;
typedef poly_int_pod<1, offset_int> poly_offset_int_pod;
typedef poly_int_pod<1, wide_int> poly_wide_int_pod;
typedef poly_int_pod<1, widest_int> poly_widest_int_pod;

typedef poly_int<1, unsigned short> poly_uint16;
typedef poly_int<1, long> poly_int64;
typedef poly_int<1, unsigned long> poly_uint64;
typedef poly_int<1, offset_int> poly_offset_int;
typedef poly_int<1, wide_int> poly_wide_int;
typedef poly_int<1, wide_int_ref> poly_wide_int_ref;
typedef poly_int<1, widest_int> poly_widest_int;
# 468 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "./insn-modes-inline.h" 1
# 10 "./insn-modes-inline.h"
inline __attribute__((__always_inline__))



poly_uint16
mode_size_inline (machine_mode mode)
{
  extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 18, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 2;
    case E_CP2QImode: return 4;
    case E_CHImode: return 4;
    case E_CP2HImode: return 8;
    case E_CSImode: return 8;
    case E_CDImode: return 16;
    case E_CTImode: return 32;
    case E_CPOImode: return 64;
    case E_COImode: return 64;
    case E_CXImode: return 128;
    case E_SCmode: return 8;
    case E_DCmode: return 16;
    case E_TCmode: return 32;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 4;
    case E_V1SImode: return 4;
    case E_V8QImode: return 8;
    case E_V4HImode: return 8;
    case E_V2SImode: return 8;
    case E_V1DImode: return 8;
    case E_V12QImode: return 12;
    case E_V6HImode: return 12;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 16;
    case E_V4SImode: return 16;
    case E_V2DImode: return 16;
    case E_V1TImode: return 16;
    case E_V32QImode: return 32;
    case E_V16HImode: return 32;
    case E_V8SImode: return 32;
    case E_V4DImode: return 32;
    case E_V2TImode: return 32;
    case E_V64QImode: return 64;
    case E_V32HImode: return 64;
    case E_V16SImode: return 64;
    case E_V8DImode: return 64;
    case E_V4TImode: return 64;
    case E_V128QImode: return 128;
    case E_V64HImode: return 128;
    case E_V32SImode: return 128;
    case E_V16DImode: return 128;
    case E_V8TImode: return 128;
    case E_V64SImode: return 256;
    case E_V2SFmode: return 8;
    case E_V4SFmode: return 16;
    case E_V2DFmode: return 16;
    case E_V8SFmode: return 32;
    case E_V4DFmode: return 32;
    case E_V2TFmode: return 32;
    case E_V16SFmode: return 64;
    case E_V8DFmode: return 64;
    case E_V4TFmode: return 64;
    case E_V32SFmode: return 128;
    case E_V16DFmode: return 128;
    case E_V8TFmode: return 128;
    case E_V64SFmode: return 256;
    case E_V32DFmode: return 256;
    case E_V16TFmode: return 256;
    default: return mode_size[mode];
    }
}


inline __attribute__((__always_inline__))



poly_uint16
mode_nunits_inline (machine_mode mode)
{
  extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 1;
    case E_CCGCmode: return 1;
    case E_CCGOCmode: return 1;
    case E_CCNOmode: return 1;
    case E_CCGZmode: return 1;
    case E_CCAmode: return 1;
    case E_CCCmode: return 1;
    case E_CCOmode: return 1;
    case E_CCPmode: return 1;
    case E_CCSmode: return 1;
    case E_CCZmode: return 1;
    case E_CCFPmode: return 1;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 1;
    case E_SImode: return 1;
    case E_DImode: return 1;
    case E_TImode: return 1;
    case E_OImode: return 1;
    case E_XImode: return 1;
    case E_P2QImode: return 1;
    case E_P2HImode: return 1;
    case E_POImode: return 1;
    case E_QQmode: return 1;
    case E_HQmode: return 1;
    case E_SQmode: return 1;
    case E_DQmode: return 1;
    case E_TQmode: return 1;
    case E_UQQmode: return 1;
    case E_UHQmode: return 1;
    case E_USQmode: return 1;
    case E_UDQmode: return 1;
    case E_UTQmode: return 1;
    case E_HAmode: return 1;
    case E_SAmode: return 1;
    case E_DAmode: return 1;
    case E_TAmode: return 1;
    case E_UHAmode: return 1;
    case E_USAmode: return 1;
    case E_UDAmode: return 1;
    case E_UTAmode: return 1;
    case E_SFmode: return 1;
    case E_DFmode: return 1;
    case E_XFmode: return 1;
    case E_TFmode: return 1;
    case E_SDmode: return 1;
    case E_DDmode: return 1;
    case E_TDmode: return 1;
    case E_CQImode: return 2;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 2;
    case E_CSImode: return 2;
    case E_CDImode: return 2;
    case E_CTImode: return 2;
    case E_CPOImode: return 2;
    case E_COImode: return 2;
    case E_CXImode: return 2;
    case E_SCmode: return 2;
    case E_DCmode: return 2;
    case E_XCmode: return 2;
    case E_TCmode: return 2;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 2;
    case E_V1SImode: return 1;
    case E_V8QImode: return 8;
    case E_V4HImode: return 4;
    case E_V2SImode: return 2;
    case E_V1DImode: return 1;
    case E_V12QImode: return 12;
    case E_V6HImode: return 6;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 8;
    case E_V4SImode: return 4;
    case E_V2DImode: return 2;
    case E_V1TImode: return 1;
    case E_V32QImode: return 32;
    case E_V16HImode: return 16;
    case E_V8SImode: return 8;
    case E_V4DImode: return 4;
    case E_V2TImode: return 2;
    case E_V64QImode: return 64;
    case E_V32HImode: return 32;
    case E_V16SImode: return 16;
    case E_V8DImode: return 8;
    case E_V4TImode: return 4;
    case E_V128QImode: return 128;
    case E_V64HImode: return 64;
    case E_V32SImode: return 32;
    case E_V16DImode: return 16;
    case E_V8TImode: return 8;
    case E_V64SImode: return 64;
    case E_V2SFmode: return 2;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 2;
    case E_V8SFmode: return 8;
    case E_V4DFmode: return 4;
    case E_V2TFmode: return 2;
    case E_V16SFmode: return 16;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 4;
    case E_V32SFmode: return 32;
    case E_V16DFmode: return 16;
    case E_V8TFmode: return 8;
    case E_V64SFmode: return 64;
    case E_V32DFmode: return 32;
    case E_V16TFmode: return 16;
    default: return mode_nunits[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_inner_inline (machine_mode mode)
{
  extern const unsigned char mode_inner[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 269, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return E_VOIDmode;
    case E_BLKmode: return E_BLKmode;
    case E_CCmode: return E_CCmode;
    case E_CCGCmode: return E_CCGCmode;
    case E_CCGOCmode: return E_CCGOCmode;
    case E_CCNOmode: return E_CCNOmode;
    case E_CCGZmode: return E_CCGZmode;
    case E_CCAmode: return E_CCAmode;
    case E_CCCmode: return E_CCCmode;
    case E_CCOmode: return E_CCOmode;
    case E_CCPmode: return E_CCPmode;
    case E_CCSmode: return E_CCSmode;
    case E_CCZmode: return E_CCZmode;
    case E_CCFPmode: return E_CCFPmode;
    case E_BImode: return E_BImode;
    case E_QImode: return E_QImode;
    case E_HImode: return E_HImode;
    case E_SImode: return E_SImode;
    case E_DImode: return E_DImode;
    case E_TImode: return E_TImode;
    case E_OImode: return E_OImode;
    case E_XImode: return E_XImode;
    case E_P2QImode: return E_P2QImode;
    case E_P2HImode: return E_P2HImode;
    case E_POImode: return E_POImode;
    case E_QQmode: return E_QQmode;
    case E_HQmode: return E_HQmode;
    case E_SQmode: return E_SQmode;
    case E_DQmode: return E_DQmode;
    case E_TQmode: return E_TQmode;
    case E_UQQmode: return E_UQQmode;
    case E_UHQmode: return E_UHQmode;
    case E_USQmode: return E_USQmode;
    case E_UDQmode: return E_UDQmode;
    case E_UTQmode: return E_UTQmode;
    case E_HAmode: return E_HAmode;
    case E_SAmode: return E_SAmode;
    case E_DAmode: return E_DAmode;
    case E_TAmode: return E_TAmode;
    case E_UHAmode: return E_UHAmode;
    case E_USAmode: return E_USAmode;
    case E_UDAmode: return E_UDAmode;
    case E_UTAmode: return E_UTAmode;
    case E_SFmode: return E_SFmode;
    case E_DFmode: return E_DFmode;
    case E_XFmode: return E_XFmode;
    case E_TFmode: return E_TFmode;
    case E_SDmode: return E_SDmode;
    case E_DDmode: return E_DDmode;
    case E_TDmode: return E_TDmode;
    case E_CQImode: return E_QImode;
    case E_CP2QImode: return E_P2QImode;
    case E_CHImode: return E_HImode;
    case E_CP2HImode: return E_P2HImode;
    case E_CSImode: return E_SImode;
    case E_CDImode: return E_DImode;
    case E_CTImode: return E_TImode;
    case E_CPOImode: return E_POImode;
    case E_COImode: return E_OImode;
    case E_CXImode: return E_XImode;
    case E_SCmode: return E_SFmode;
    case E_DCmode: return E_DFmode;
    case E_XCmode: return E_XFmode;
    case E_TCmode: return E_TFmode;
    case E_V2QImode: return E_QImode;
    case E_V4QImode: return E_QImode;
    case E_V2HImode: return E_HImode;
    case E_V1SImode: return E_SImode;
    case E_V8QImode: return E_QImode;
    case E_V4HImode: return E_HImode;
    case E_V2SImode: return E_SImode;
    case E_V1DImode: return E_DImode;
    case E_V12QImode: return E_QImode;
    case E_V6HImode: return E_HImode;
    case E_V14QImode: return E_QImode;
    case E_V16QImode: return E_QImode;
    case E_V8HImode: return E_HImode;
    case E_V4SImode: return E_SImode;
    case E_V2DImode: return E_DImode;
    case E_V1TImode: return E_TImode;
    case E_V32QImode: return E_QImode;
    case E_V16HImode: return E_HImode;
    case E_V8SImode: return E_SImode;
    case E_V4DImode: return E_DImode;
    case E_V2TImode: return E_TImode;
    case E_V64QImode: return E_QImode;
    case E_V32HImode: return E_HImode;
    case E_V16SImode: return E_SImode;
    case E_V8DImode: return E_DImode;
    case E_V4TImode: return E_TImode;
    case E_V128QImode: return E_QImode;
    case E_V64HImode: return E_HImode;
    case E_V32SImode: return E_SImode;
    case E_V16DImode: return E_DImode;
    case E_V8TImode: return E_TImode;
    case E_V64SImode: return E_SImode;
    case E_V2SFmode: return E_SFmode;
    case E_V4SFmode: return E_SFmode;
    case E_V2DFmode: return E_DFmode;
    case E_V8SFmode: return E_SFmode;
    case E_V4DFmode: return E_DFmode;
    case E_V2TFmode: return E_TFmode;
    case E_V16SFmode: return E_SFmode;
    case E_V8DFmode: return E_DFmode;
    case E_V4TFmode: return E_TFmode;
    case E_V32SFmode: return E_SFmode;
    case E_V16DFmode: return E_DFmode;
    case E_V8TFmode: return E_TFmode;
    case E_V64SFmode: return E_SFmode;
    case E_V32DFmode: return E_DFmode;
    case E_V16TFmode: return E_TFmode;
    default: return mode_inner[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_unit_size_inline (machine_mode mode)
{
  extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 396, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 1;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 4;
    case E_CSImode: return 4;
    case E_CDImode: return 8;
    case E_CTImode: return 16;
    case E_CPOImode: return 32;
    case E_COImode: return 32;
    case E_CXImode: return 64;
    case E_SCmode: return 4;
    case E_DCmode: return 8;
    case E_TCmode: return 16;
    case E_V2QImode: return 1;
    case E_V4QImode: return 1;
    case E_V2HImode: return 2;
    case E_V1SImode: return 4;
    case E_V8QImode: return 1;
    case E_V4HImode: return 2;
    case E_V2SImode: return 4;
    case E_V1DImode: return 8;
    case E_V12QImode: return 1;
    case E_V6HImode: return 2;
    case E_V14QImode: return 1;
    case E_V16QImode: return 1;
    case E_V8HImode: return 2;
    case E_V4SImode: return 4;
    case E_V2DImode: return 8;
    case E_V1TImode: return 16;
    case E_V32QImode: return 1;
    case E_V16HImode: return 2;
    case E_V8SImode: return 4;
    case E_V4DImode: return 8;
    case E_V2TImode: return 16;
    case E_V64QImode: return 1;
    case E_V32HImode: return 2;
    case E_V16SImode: return 4;
    case E_V8DImode: return 8;
    case E_V4TImode: return 16;
    case E_V128QImode: return 1;
    case E_V64HImode: return 2;
    case E_V32SImode: return 4;
    case E_V16DImode: return 8;
    case E_V8TImode: return 16;
    case E_V64SImode: return 4;
    case E_V2SFmode: return 4;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 8;
    case E_V8SFmode: return 4;
    case E_V4DFmode: return 8;
    case E_V2TFmode: return 16;
    case E_V16SFmode: return 4;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 16;
    case E_V32SFmode: return 4;
    case E_V16DFmode: return 8;
    case E_V8TFmode: return 16;
    case E_V64SFmode: return 4;
    case E_V32DFmode: return 8;
    case E_V16TFmode: return 16;
    default: return mode_unit_size[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned short
mode_unit_precision_inline (machine_mode mode)
{
  extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 521, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4*(8);
    case E_CCGCmode: return 4*(8);
    case E_CCGOCmode: return 4*(8);
    case E_CCNOmode: return 4*(8);
    case E_CCGZmode: return 4*(8);
    case E_CCAmode: return 4*(8);
    case E_CCCmode: return 4*(8);
    case E_CCOmode: return 4*(8);
    case E_CCPmode: return 4*(8);
    case E_CCSmode: return 4*(8);
    case E_CCZmode: return 4*(8);
    case E_CCFPmode: return 4*(8);
    case E_BImode: return 1;
    case E_QImode: return 1*(8);
    case E_HImode: return 2*(8);
    case E_SImode: return 4*(8);
    case E_DImode: return 8*(8);
    case E_TImode: return 16*(8);
    case E_OImode: return 32*(8);
    case E_XImode: return 64*(8);
    case E_P2QImode: return 16;
    case E_P2HImode: return 32;
    case E_POImode: return 160;
    case E_QQmode: return 1*(8);
    case E_HQmode: return 2*(8);
    case E_SQmode: return 4*(8);
    case E_DQmode: return 8*(8);
    case E_TQmode: return 16*(8);
    case E_UQQmode: return 1*(8);
    case E_UHQmode: return 2*(8);
    case E_USQmode: return 4*(8);
    case E_UDQmode: return 8*(8);
    case E_UTQmode: return 16*(8);
    case E_HAmode: return 2*(8);
    case E_SAmode: return 4*(8);
    case E_DAmode: return 8*(8);
    case E_TAmode: return 16*(8);
    case E_UHAmode: return 2*(8);
    case E_USAmode: return 4*(8);
    case E_UDAmode: return 8*(8);
    case E_UTAmode: return 16*(8);
    case E_SFmode: return 4*(8);
    case E_DFmode: return 8*(8);
    case E_XFmode: return 80;
    case E_TFmode: return 16*(8);
    case E_SDmode: return 4*(8);
    case E_DDmode: return 8*(8);
    case E_TDmode: return 16*(8);
    case E_CQImode: return 1*(8);
    case E_CP2QImode: return 16;
    case E_CHImode: return 2*(8);
    case E_CP2HImode: return 32;
    case E_CSImode: return 4*(8);
    case E_CDImode: return 8*(8);
    case E_CTImode: return 16*(8);
    case E_CPOImode: return 160;
    case E_COImode: return 32*(8);
    case E_CXImode: return 64*(8);
    case E_SCmode: return 4*(8);
    case E_DCmode: return 8*(8);
    case E_XCmode: return 80;
    case E_TCmode: return 16*(8);
    case E_V2QImode: return 1*(8);
    case E_V4QImode: return 1*(8);
    case E_V2HImode: return 2*(8);
    case E_V1SImode: return 4*(8);
    case E_V8QImode: return 1*(8);
    case E_V4HImode: return 2*(8);
    case E_V2SImode: return 4*(8);
    case E_V1DImode: return 8*(8);
    case E_V12QImode: return 1*(8);
    case E_V6HImode: return 2*(8);
    case E_V14QImode: return 1*(8);
    case E_V16QImode: return 1*(8);
    case E_V8HImode: return 2*(8);
    case E_V4SImode: return 4*(8);
    case E_V2DImode: return 8*(8);
    case E_V1TImode: return 16*(8);
    case E_V32QImode: return 1*(8);
    case E_V16HImode: return 2*(8);
    case E_V8SImode: return 4*(8);
    case E_V4DImode: return 8*(8);
    case E_V2TImode: return 16*(8);
    case E_V64QImode: return 1*(8);
    case E_V32HImode: return 2*(8);
    case E_V16SImode: return 4*(8);
    case E_V8DImode: return 8*(8);
    case E_V4TImode: return 16*(8);
    case E_V128QImode: return 1*(8);
    case E_V64HImode: return 2*(8);
    case E_V32SImode: return 4*(8);
    case E_V16DImode: return 8*(8);
    case E_V8TImode: return 16*(8);
    case E_V64SImode: return 4*(8);
    case E_V2SFmode: return 4*(8);
    case E_V4SFmode: return 4*(8);
    case E_V2DFmode: return 8*(8);
    case E_V8SFmode: return 4*(8);
    case E_V4DFmode: return 8*(8);
    case E_V2TFmode: return 16*(8);
    case E_V16SFmode: return 4*(8);
    case E_V8DFmode: return 8*(8);
    case E_V4TFmode: return 16*(8);
    case E_V32SFmode: return 4*(8);
    case E_V16DFmode: return 8*(8);
    case E_V8TFmode: return 16*(8);
    case E_V64SFmode: return 4*(8);
    case E_V32DFmode: return 8*(8);
    case E_V16TFmode: return 16*(8);
    default: return mode_unit_precision[mode];
    }
}
# 469 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
typedef opt_mode<machine_mode> opt_machine_mode;

extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_inner[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_wider[NUM_MACHINE_MODES];
extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];

template<typename T>
struct mode_traits
{
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
  enum from_int { dummy = MAX_MACHINE_MODE };

};

template<>
struct mode_traits<machine_mode>
{

  typedef machine_mode from_int;
};
# 89 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern const char * const mode_name[NUM_MACHINE_MODES];




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mode-classes.def" 1
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 2

enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FRACT, MODE_UFRACT, MODE_ACCUM, MODE_UACCUM, MODE_FLOAT, MODE_DECIMAL_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_BOOL, MODE_VECTOR_INT, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM, MODE_VECTOR_UACCUM, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };






extern const unsigned char mode_class[NUM_MACHINE_MODES];
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
class opt_mode
{
public:
  enum from_int { dummy = MAX_MACHINE_MODE };

  inline __attribute__ ((always_inline)) constexpr opt_mode () : m_mode (E_VOIDmode) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (const T &m) : m_mode (m) {}
  template<typename U>
  inline __attribute__ ((always_inline)) constexpr opt_mode (const U &m) : m_mode (T (m)) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (from_int m) : m_mode (machine_mode (m)) {}

  machine_mode else_void () const;
  machine_mode else_blk () const { return else_mode (((void) 0, E_BLKmode)); }
  machine_mode else_mode (machine_mode) const;
  T require () const;

  bool exists () const;
  template<typename U> bool exists (U *) const;

  bool operator== (const T &m) const { return m_mode == m; }
  bool operator!= (const T &m) const { return m_mode != m; }

private:
  machine_mode m_mode;
};




template<typename T>
inline __attribute__ ((always_inline)) machine_mode
opt_mode<T>::else_void () const
{
  return m_mode;
}



template<typename T>
inline machine_mode
opt_mode<T>::else_mode (machine_mode fallback) const
{
  return m_mode == E_VOIDmode ? fallback : m_mode;
}



template<typename T>
inline T
opt_mode<T>::require () const
{
  ((void)(!(m_mode != E_VOIDmode) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 293, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m_mode);
}



template<typename T>
inline __attribute__ ((always_inline)) bool
opt_mode<T>::exists () const
{
  return m_mode != E_VOIDmode;
}



template<typename T>
template<typename U>
inline bool
opt_mode<T>::exists (U *mode) const
{
  if (m_mode != E_VOIDmode)
    {
      *mode = T (typename mode_traits<T>::from_int (m_mode));
      return true;
    }
  return false;
}



template<typename T>
struct pod_mode
{
  typedef typename mode_traits<T>::from_int from_int;
  typedef typename T::measurement_type measurement_type;

  machine_mode m_mode;
  inline __attribute__ ((always_inline)) constexpr
  operator machine_mode () const { return m_mode; }

  inline __attribute__ ((always_inline)) constexpr
  operator T () const { return from_int (m_mode); }

  inline __attribute__ ((always_inline)) pod_mode &operator = (const T &m) { m_mode = m; return *this; }
};



template<typename T>
inline bool
is_a (machine_mode m)
{
  return T::includes_p (m);
}

template<typename T, typename U>
inline bool
is_a (const opt_mode<U> &m)
{
  return T::includes_p (m.else_void ());
}



template<typename T>
inline T
as_a (machine_mode m)
{
  ((void)(!(T::includes_p (m)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 361, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m);
}

template<typename T, typename U>
inline T
as_a (const opt_mode<U> &m)
{
  return as_a <T> (m.else_void ());
}



template<typename T>
inline opt_mode<T>
dyn_cast (machine_mode m)
{
  if (T::includes_p (m))
    return T (typename mode_traits<T>::from_int (m));
  return opt_mode<T> ();
}

template<typename T, typename U>
inline opt_mode<T>
dyn_cast (const opt_mode<U> &m)
{
  return dyn_cast <T> (m.else_void ());
}




template<typename T, typename U>
inline bool
is_a (machine_mode m, U *result)
{
  if (T::includes_p (m))
    {
      *result = T (typename mode_traits<T>::from_int (m));
      return true;
    }
  return false;
}


class scalar_int_mode
{
public:
  typedef mode_traits<scalar_int_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_int_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_int_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_INT || ((enum mode_class) mode_class[m]) == MODE_PARTIAL_INT);
}


class scalar_float_mode
{
public:
  typedef mode_traits<scalar_float_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_float_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_float_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_float_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_FLOAT || ((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT);
}


class scalar_mode
{
public:
  typedef mode_traits<scalar_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_mode::includes_p (machine_mode m)
{
  switch (((enum mode_class) mode_class[m]))
    {
    case MODE_INT:
    case MODE_PARTIAL_INT:
    case MODE_FRACT:
    case MODE_UFRACT:
    case MODE_ACCUM:
    case MODE_UACCUM:
    case MODE_FLOAT:
    case MODE_DECIMAL_FLOAT:
      return true;
    default:
      return false;
    }
}


class complex_mode
{
public:
  typedef mode_traits<complex_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) complex_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  complex_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
complex_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_COMPLEX_INT || ((enum mode_class) mode_class[m]) == MODE_COMPLEX_FLOAT);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bytes (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_size_inline (mode) : mode_size[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bits (machine_mode mode)
{
  return mode_to_bytes (mode) * (8);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_precision (machine_mode mode)
{
  return mode_precision[mode];
}



inline __attribute__ ((always_inline)) scalar_mode
mode_to_inner (machine_mode mode)
{

  return scalar_mode::from_int (__builtin_constant_p (mode)
    ? mode_inner_inline (mode)
    : mode_inner[mode]);



}



inline __attribute__ ((always_inline)) unsigned char
mode_to_unit_size (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_size_inline (mode) : mode_unit_size[mode]);



}



inline __attribute__ ((always_inline)) unsigned short
mode_to_unit_precision (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_precision_inline (mode) : mode_unit_precision[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_nunits (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_nunits_inline (mode) : mode_nunits[mode]);



}






inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_SIZE (machine_mode mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode).coeffs[0];
}







inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_BITSIZE (machine_mode mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode).coeffs[0];
}
# 679 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_PRECISION (machine_mode mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode).coeffs[0];
}



extern const unsigned char mode_ibit[NUM_MACHINE_MODES];



extern const unsigned char mode_fbit[NUM_MACHINE_MODES];





extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];
# 737 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_NUNITS (machine_mode mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode).coeffs[0];
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_WIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_wider[m]);
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_2XWIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_2xwider[m]);
}


extern const unsigned char mode_complex[NUM_MACHINE_MODES];






class fixed_size_mode
{
public:
  typedef mode_traits<fixed_size_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) fixed_size_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const complex_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
fixed_size_mode::includes_p (machine_mode mode)
{
  return mode_to_bytes (mode).is_constant ();
}
# 841 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern opt_machine_mode mode_for_size (poly_uint64, enum mode_class, int);





inline opt_scalar_int_mode
int_mode_for_size (poly_uint64 size, int limit)
{
  return dyn_cast <scalar_int_mode> (mode_for_size (size, MODE_INT, limit));
}




inline opt_scalar_float_mode
float_mode_for_size (poly_uint64 size)
{
  return dyn_cast <scalar_float_mode> (mode_for_size (size, MODE_FLOAT, 0));
}



inline opt_scalar_float_mode
decimal_float_mode_for_size (unsigned int size)
{
  return dyn_cast <scalar_float_mode>
    (mode_for_size (size, MODE_DECIMAL_FLOAT, 0));
}

extern machine_mode smallest_mode_for_size (poly_uint64, enum mode_class);




inline scalar_int_mode
smallest_int_mode_for_size (poly_uint64 size)
{
  return as_a <scalar_int_mode> (smallest_mode_for_size (size, MODE_INT));
}

extern opt_scalar_int_mode int_mode_for_mode (machine_mode);
extern opt_machine_mode bitwise_mode_for_mode (machine_mode);
extern opt_machine_mode mode_for_vector (scalar_mode, poly_uint64);
extern opt_machine_mode related_vector_mode (machine_mode, scalar_mode,
          poly_uint64 = 0);
extern opt_machine_mode related_int_vector_mode (machine_mode);


class bit_field_mode_iterator
{
public:
  bit_field_mode_iterator (long, long,
      poly_int64, poly_int64,
      unsigned int, bool);
  bool next_mode (scalar_int_mode *);
  bool prefer_smaller_modes ();

private:
  opt_scalar_int_mode m_mode;


  long m_bitsize;
  long m_bitpos;
  poly_int64 m_bitregion_start;
  poly_int64 m_bitregion_end;
  unsigned int m_align;
  bool m_volatilep;
  int m_count;
};



extern bool get_best_mode (int, int, poly_uint64, poly_uint64, unsigned int,
      unsigned long, bool, scalar_int_mode *);



extern unsigned short mode_base_align[NUM_MACHINE_MODES];

extern unsigned get_mode_alignment (machine_mode);





extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];
# 939 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
inline T
get_narrowest_mode (T mode)
{
  return typename mode_traits<T>::from_int
    (class_narrowest_mode[((enum mode_class) mode_class[mode])]);
}




extern scalar_int_mode byte_mode;
extern scalar_int_mode word_mode;
extern scalar_int_mode ptr_mode;


extern void init_adjust_machine_modes (void);
# 964 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline bool
HWI_COMPUTABLE_MODE_P (machine_mode mode)
{
  machine_mode mme = mode;
  return ((((enum mode_class) mode_class[mme]) == MODE_INT || ((enum mode_class) mode_class[mme]) == MODE_PARTIAL_INT)
   && mode_to_precision (mme).coeffs[0] <= 64);
}

inline bool
HWI_COMPUTABLE_MODE_P (scalar_int_mode mode)
{
  return GET_MODE_PRECISION (mode) <= 64;
}

struct int_n_data_t {

  unsigned int bitsize;
  scalar_int_mode_pod m;

};



extern bool int_n_enabled_p[1];
extern const int_n_data_t int_n_data[1];




template<typename T>
inline bool
is_int_mode (machine_mode mode, T *int_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_INT)
    {
      *int_mode = scalar_int_mode (scalar_int_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_float_mode (machine_mode mode, T *float_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_FLOAT)
    {
      *float_mode = scalar_float_mode (scalar_float_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_int_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_INT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_float_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_FLOAT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




inline bool
is_narrower_int_mode (machine_mode mode, scalar_int_mode limit)
{
  scalar_int_mode int_mode;
  return (is_a <scalar_int_mode> (mode, &int_mode)
   && GET_MODE_PRECISION (int_mode) < GET_MODE_PRECISION (limit));
}

namespace mode_iterator
{


  template<typename T>
  inline void
  start (opt_mode<T> *iter, enum mode_class mclass)
  {
    if (((machine_mode) class_narrowest_mode[mclass]) == E_VOIDmode)
      *iter = opt_mode<T> ();
    else
      *iter = as_a<T> (((machine_mode) class_narrowest_mode[mclass]));
  }

  inline void
  start (machine_mode *iter, enum mode_class mclass)
  {
    *iter = ((machine_mode) class_narrowest_mode[mclass]);
  }



  template<typename T>
  inline bool
  iterate_p (opt_mode<T> *iter)
  {
    return iter->exists ();
  }

  inline bool
  iterate_p (machine_mode *iter)
  {
    return *iter != E_VOIDmode;
  }




  template<typename T>
  inline void
  get_wider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_WIDER_MODE (iter->require ());
  }

  inline void
  get_wider (machine_mode *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).else_void ();
  }




  template<typename T>
  inline void
  get_known_wider (T *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).require ();
  }




  template<typename T>
  inline void
  get_2xwider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (iter->require ());
  }

  inline void
  get_2xwider (machine_mode *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (*iter).else_void ();
  }
}
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
void
gt_ggc_mx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *, void (*) (void *, void *), void *)
{
}
# 470 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h" 1
# 49 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
struct double_int
{







  static double_int from_uhwi (unsigned long cst);
  static double_int from_shwi (long cst);
  static double_int from_pair (long high, unsigned long low);



  static double_int from_buffer (const unsigned char *buffer, int len);





  static double_int mask (unsigned prec);
  static double_int max_value (unsigned int prec, bool uns);
  static double_int min_value (unsigned int prec, bool uns);



  double_int &operator ++ ();
  double_int &operator -- ();
  double_int &operator *= (double_int);
  double_int &operator += (double_int);
  double_int &operator -= (double_int);
  double_int &operator &= (double_int);
  double_int &operator ^= (double_int);
  double_int &operator |= (double_int);





  long to_shwi () const;
  unsigned long to_uhwi () const;



  bool fits_uhwi () const;
  bool fits_shwi () const;
  bool fits_hwi (bool uns) const;



  int trailing_zeros () const;
  int popcount () const;



  bool multiple_of (double_int, bool, double_int *) const;







  double_int set_bit (unsigned) const;
  double_int mul_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int wide_mul_with_sign (double_int, bool unsigned_p,
     double_int *higher, bool *overflow) const;
  double_int add_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int sub_with_overflow (double_int, bool *overflow) const;
  double_int neg_with_overflow (bool *overflow) const;

  double_int operator * (double_int) const;
  double_int operator + (double_int) const;
  double_int operator - (double_int) const;
  double_int operator - () const;
  double_int operator ~ () const;
  double_int operator & (double_int) const;
  double_int operator | (double_int) const;
  double_int operator ^ (double_int) const;
  double_int and_not (double_int) const;

  double_int lshift (long count) const;
  double_int lshift (long count, unsigned int prec, bool arith) const;
  double_int rshift (long count) const;
  double_int rshift (long count, unsigned int prec, bool arith) const;
  double_int alshift (long count, unsigned int prec) const;
  double_int arshift (long count, unsigned int prec) const;
  double_int llshift (long count, unsigned int prec) const;
  double_int lrshift (long count, unsigned int prec) const;
  double_int lrotate (long count, unsigned int prec) const;
  double_int rrotate (long count, unsigned int prec) const;





  double_int div (double_int, bool, unsigned) const;
  double_int sdiv (double_int, unsigned) const;
  double_int udiv (double_int, unsigned) const;
  double_int mod (double_int, bool, unsigned) const;
  double_int smod (double_int, unsigned) const;
  double_int umod (double_int, unsigned) const;
  double_int divmod_with_overflow (double_int, bool, unsigned,
       double_int *, bool *) const;
  double_int divmod (double_int, bool, unsigned, double_int *) const;
  double_int sdivmod (double_int, unsigned, double_int *) const;
  double_int udivmod (double_int, unsigned, double_int *) const;



  double_int ext (unsigned prec, bool uns) const;
  double_int zext (unsigned prec) const;
  double_int sext (unsigned prec) const;



  bool is_zero () const;
  bool is_one () const;
  bool is_minus_one () const;
  bool is_negative () const;

  int cmp (double_int b, bool uns) const;
  int ucmp (double_int b) const;
  int scmp (double_int b) const;

  bool ult (double_int b) const;
  bool ule (double_int b) const;
  bool ugt (double_int b) const;
  bool slt (double_int b) const;
  bool sle (double_int b) const;
  bool sgt (double_int b) const;

  double_int max (double_int b, bool uns);
  double_int smax (double_int b);
  double_int umax (double_int b);

  double_int min (double_int b, bool uns);
  double_int smin (double_int b);
  double_int umin (double_int b);

  bool operator == (double_int cst2) const;
  bool operator != (double_int cst2) const;



  unsigned long low;
  long high;

};
# 207 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_shwi (long cst)
{
  double_int r;
  r.low = (unsigned long) cst;
  r.high = cst < 0 ? -1 : 0;
  return r;
}
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_uhwi (unsigned long cst)
{
  double_int r;
  r.low = cst;
  r.high = 0;
  return r;
}

inline double_int
double_int::from_pair (long high, unsigned long low)
{
  double_int r;
  r.low = low;
  r.high = high;
  return r;
}

inline double_int &
double_int::operator ++ ()
{
  *this += (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator -- ()
{
  *this -= (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator &= (double_int b)
{
  *this = *this & b;
  return *this;
}

inline double_int &
double_int::operator ^= (double_int b)
{
  *this = *this ^ b;
  return *this;
}

inline double_int &
double_int::operator |= (double_int b)
{
  *this = *this | b;
  return *this;
}




inline long
double_int::to_shwi () const
{
  return (long) low;
}




inline unsigned long
double_int::to_uhwi () const
{
  return low;
}



inline bool
double_int::fits_uhwi () const
{
  return high == 0;
}





inline double_int
double_int::operator ~ () const
{
  double_int result;
  result.low = ~low;
  result.high = ~high;
  return result;
}



inline double_int
double_int::operator | (double_int b) const
{
  double_int result;
  result.low = low | b.low;
  result.high = high | b.high;
  return result;
}



inline double_int
double_int::operator & (double_int b) const
{
  double_int result;
  result.low = low & b.low;
  result.high = high & b.high;
  return result;
}



inline double_int
double_int::and_not (double_int b) const
{
  double_int result;
  result.low = low & ~b.low;
  result.high = high & ~b.high;
  return result;
}



inline double_int
double_int::operator ^ (double_int b) const
{
  double_int result;
  result.low = low ^ b.low;
  result.high = high ^ b.high;
  return result;
}

void dump_double_int (FILE *, double_int, bool);
# 376 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline bool
double_int::is_zero () const
{
  return low == 0 && high == 0;
}



inline bool
double_int::is_one () const
{
  return low == 1 && high == 0;
}



inline bool
double_int::is_minus_one () const
{
  return low == -1UL && high == -1;
}



inline bool
double_int::is_negative () const
{
  return high < 0;
}



inline bool
double_int::operator == (double_int cst2) const
{
  return low == cst2.low && high == cst2.high;
}



inline bool
double_int::operator != (double_int cst2) const
{
  return low != cst2.low || high != cst2.high;
}



inline int
double_int::popcount () const
{
  return popcount_hwi (high) + popcount_hwi (low);
}
# 438 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
namespace wi
{
  template <>
  struct int_traits <double_int>
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = true;
    static const unsigned int precision = (2 * 64);
    static unsigned int get_precision (const double_int &);
    static wi::storage_ref decompose (long *, unsigned int,
          const double_int &);
  };
}

inline unsigned int
wi::int_traits <double_int>::get_precision (const double_int &)
{
  return precision;
}

inline wi::storage_ref
wi::int_traits <double_int>::decompose (long *scratch, unsigned int p,
     const double_int &x)
{
  ((void)(!(precision == p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h", 462, __FUNCTION__), 0 : 0));
  scratch[0] = x.low;
  if ((x.high == 0 && scratch[0] >= 0) || (x.high == -1 && scratch[0] < 0))
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = x.high;
  return wi::storage_ref (scratch, 2, precision);
}
# 471 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h" 1
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h"
struct align_flags_tuple
{



  int log;
  int maxskip;


  void normalize ()
  {
    int n = (1 << log);
    if (maxskip > n)
      maxskip = n - 1;
  }


  int get_value ()
  {
    return maxskip + 1;
  }
};




class align_flags
{
public:

  align_flags (int log0 = 0, int maxskip0 = 0, int log1 = 0, int maxskip1 = 0)
  {
    levels[0].log = log0;
    levels[0].maxskip = maxskip0;
    levels[1].log = log1;
    levels[1].maxskip = maxskip1;
    normalize ();
  }


  void normalize ()
  {
    for (unsigned i = 0; i < 2; i++)
      levels[i].normalize ();
  }


  static align_flags max (const align_flags f0, const align_flags f1)
    {
      int log0 = ((f0.levels[0].log) > (f1.levels[0].log) ? (f0.levels[0].log) : (f1.levels[0].log));
      int maxskip0 = ((f0.levels[0].maxskip) > (f1.levels[0].maxskip) ? (f0.levels[0].maxskip) : (f1.levels[0].maxskip));
      int log1 = ((f0.levels[1].log) > (f1.levels[1].log) ? (f0.levels[1].log) : (f1.levels[1].log));
      int maxskip1 = ((f0.levels[1].maxskip) > (f1.levels[1].maxskip) ? (f0.levels[1].maxskip) : (f1.levels[1].maxskip));
      return align_flags (log0, maxskip0, log1, maxskip1);
    }

  align_flags_tuple levels[2];
};
# 472 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/symtab.h" 1
# 21 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/symtab.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 1
# 111 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 112 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 2
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
extern "C" {


struct _obstack_chunk
{
  char *limit;
  struct _obstack_chunk *prev;
  char contents[4];
};

struct obstack
{
  size_t chunk_size;
  struct _obstack_chunk *chunk;
  char *object_base;
  char *next_free;
  char *chunk_limit;
  union
  {
    size_t i;
    void *p;
  } temp;
  size_t alignment_mask;


  union
  {
    void *(*plain) (size_t);
    void *(*extra) (void *, size_t);
  } chunkfun;
  union
  {
    void (*plain) (void *);
    void (*extra) (void *, void *);
  } freefun;

  void *extra_arg;
  unsigned use_extra_arg : 1;
  unsigned maybe_empty_object : 1;



  unsigned alloc_failed : 1;


};



extern void _obstack_newchunk (struct obstack *, size_t);
extern void _obstack_free (struct obstack *, void *);
extern int _obstack_begin (struct obstack *,
                           size_t, size_t,
                           void *(*) (size_t), void (*) (void *));
extern int _obstack_begin_1 (struct obstack *,
                             size_t, size_t,
                             void *(*) (void *, size_t),
                             void (*) (void *, void *), void *);
extern size_t _obstack_memory_used (struct obstack *)
  
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 3 4
 __attribute__ ((__pure__))
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
                   ;






extern void (*obstack_alloc_failed_handler) (void);


extern int obstack_exit_failure;
# 532 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
}
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/symtab.h" 2







typedef struct ht_identifier ht_identifier;
typedef struct ht_identifier *ht_identifier_ptr;
struct ht_identifier {
  const unsigned char *str;
  unsigned int len;
  unsigned int hash_value;
};




typedef struct ht cpp_hash_table;
typedef struct ht_identifier *hashnode;

enum ht_lookup_option {HT_NO_INSERT = 0, HT_ALLOC};


struct ht
{

  struct obstack stack;

  hashnode *entries;

  hashnode (*alloc_node) (cpp_hash_table *);


  void * (*alloc_subobject) (size_t);

  unsigned int nslots;
  unsigned int nelements;


  struct cpp_reader *pfile;


  unsigned int searches;
  unsigned int collisions;


  bool entries_owned;
};


extern cpp_hash_table *ht_create (unsigned int order);


extern void ht_destroy (cpp_hash_table *);

extern hashnode ht_lookup (cpp_hash_table *, const unsigned char *,
      size_t, enum ht_lookup_option);
extern hashnode ht_lookup_with_hash (cpp_hash_table *, const unsigned char *,
                                     size_t, unsigned int,
                                     enum ht_lookup_option);






typedef int (*ht_cb) (struct cpp_reader *, hashnode, const void *);
extern void ht_forall (cpp_hash_table *, ht_cb, const void *);



extern void ht_purge (cpp_hash_table *, ht_cb, const void *);


extern void ht_load (cpp_hash_table *ht, hashnode *entries,
       unsigned int nslots, unsigned int nelements, bool own);


extern void ht_dump_statistics (cpp_hash_table *);
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h" 1
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int linenum_type;


typedef long long linenum_arith_t;



inline int compare (linenum_type lhs, linenum_type rhs)
{


  linenum_arith_t diff = (linenum_arith_t)lhs - (linenum_arith_t)rhs;
  if (diff)
    return diff > 0 ? 1 : -1;
  return 0;
}


enum lc_reason
{
  LC_ENTER = 0,
  LC_LEAVE,
  LC_RENAME,
  LC_RENAME_VERBATIM,
  LC_ENTER_MACRO,

  LC_HWM
};
# 291 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int location_t;




const unsigned int LINE_MAP_MAX_COLUMN_NUMBER = (1U << 12);




const location_t LINE_MAP_MAX_LOCATION_WITH_PACKED_RANGES = 0x50000000;




const location_t LINE_MAP_MAX_LOCATION_WITH_COLS = 0x60000000;


const location_t LINE_MAP_MAX_LOCATION = 0x70000000;
# 319 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct source_range
{
  location_t m_start;
  location_t m_finish;






  static source_range from_location (location_t loc)
  {
    source_range result;
    result.m_start = loc;
    result.m_finish = loc;
    return result;
  }


  static source_range from_locations (location_t start,
          location_t finish)
  {
    source_range result;
    result.m_start = start;
    result.m_finish = finish;
    return result;
  }
};


typedef void *(*line_map_realloc) (void *, size_t);



typedef size_t (*line_map_round_alloc_size_func) (size_t);
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map {
  location_t start_location;


};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map_ordinary : public line_map {





  enum lc_reason reason : 8;





  unsigned char sysp;



  unsigned int m_column_and_range_bits : 8;
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  unsigned int m_range_bits : 8;



  const char *to_file;
  linenum_type to_line;




  location_t included_from;


};



const location_t MAX_LOCATION_T = 0x7FFFFFFF;

struct cpp_hashnode;






struct line_map_macro : public line_map {



  unsigned int n_tokens;




  struct cpp_hashnode *
   


    macro;
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  location_t * macro_locations;






  location_t expansion;


};
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
inline bool
IS_ORDINARY_LOC (location_t loc)
{
  return loc < LINE_MAP_MAX_LOCATION;
}

inline bool
IS_ADHOC_LOC (location_t loc)
{
  return loc > MAX_LOCATION_T;
}

inline bool
IS_MACRO_LOC (location_t loc)
{
  return !IS_ORDINARY_LOC (loc) && !IS_ADHOC_LOC (loc);
}



inline bool
MAP_ORDINARY_P (const line_map *map)
{
  return IS_ORDINARY_LOC (map->start_location);
}



bool
linemap_macro_expansion_map_p (const line_map *);





inline line_map_ordinary *
linemap_check_ordinary (line_map *map)
{
  do { if (! (MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 604, __FUNCTION__); } while (0);
  return (line_map_ordinary *)map;
}





inline const line_map_ordinary *
linemap_check_ordinary (const line_map *map)
{
  do { if (! (MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 615, __FUNCTION__); } while (0);
  return (const line_map_ordinary *)map;
}




inline line_map_macro *linemap_check_macro (line_map *map)
{
  do { if (! (!MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 624, __FUNCTION__); } while (0);
  return (line_map_macro *)map;
}




inline const line_map_macro *
linemap_check_macro (const line_map *map)
{
  do { if (! (!MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 634, __FUNCTION__); } while (0);
  return (const line_map_macro *)map;
}



inline location_t
MAP_START_LOCATION (const line_map *map)
{
  return map->start_location;
}



inline linenum_type
ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}






inline unsigned char
ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}



inline const char *
ORDINARY_MAP_FILE_NAME (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}



inline cpp_hashnode *
MACRO_MAP_MACRO (const line_map_macro *macro_map)
{
  return macro_map->macro;
}




inline unsigned int
MACRO_MAP_NUM_MACRO_TOKENS (const line_map_macro *macro_map)
{
  return macro_map->n_tokens;
}




inline location_t *
MACRO_MAP_LOCATIONS (const line_map_macro *macro_map)
{
  return macro_map->macro_locations;
}



inline location_t
MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map_macro *macro_map)
{
  return macro_map->expansion;
}
# 714 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct maps_info_ordinary {



  line_map_ordinary * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};

struct maps_info_macro {


  line_map_macro * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};



struct location_adhoc_data {
  location_t locus;
  source_range src_range;
  void * data;
};

struct htab;
# 765 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct location_adhoc_data_map {
  struct htab * htab;
  location_t curr_loc;
  unsigned int allocated;
  struct location_adhoc_data *data;
};


class line_maps {
public:

  ~line_maps ();

  maps_info_ordinary info_ordinary;

  maps_info_macro info_macro;


  unsigned int depth;


  bool trace_includes;


  location_t highest_location;


  location_t highest_line;



  unsigned int max_column_hint;


  line_map_realloc reallocator;



  line_map_round_alloc_size_func round_alloc_size;

  struct location_adhoc_data_map location_adhoc_data_map;



  location_t builtin_location;


  bool seen_line_directive;


  unsigned int default_range_bits;

  unsigned int num_optimized_ranges;
  unsigned int num_unoptimized_ranges;
};



inline unsigned int
LINEMAPS_ALLOCATED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int &
LINEMAPS_ALLOCATED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int
LINEMAPS_USED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}



inline unsigned int &
LINEMAPS_USED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}




inline unsigned int &
LINEMAPS_CACHE (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.cache;
  else
    return set->info_ordinary.cache;
}


inline line_map *
LINEMAPS_MAP_AT (const line_maps *set, bool map_kind, int index)
{
  if (map_kind)
    return &set->info_macro.maps[index];
  else
    return &set->info_ordinary.maps[index];
}




inline line_map *
LINEMAPS_LAST_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_USED (set, map_kind) - 1);
}




inline line_map *
LINEMAPS_LAST_ALLOCATED_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_ALLOCATED (set, map_kind) - 1);
}



inline line_map_ordinary *
LINEMAPS_ORDINARY_MAPS (const line_maps *set)
{
  return set->info_ordinary.maps;
}


inline line_map_ordinary *
LINEMAPS_ORDINARY_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, false))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 919, __FUNCTION__); } while (0)
                                                        ;
  return (line_map_ordinary *)LINEMAPS_MAP_AT (set, false, index);
}



inline unsigned int
LINEMAPS_ORDINARY_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, false);
}


inline unsigned int
LINEMAPS_ORDINARY_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, false);
}



inline unsigned int &
LINEMAPS_ORDINARY_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_MAP (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_ALLOCATED_MAP (set, false);
}



inline line_map_macro *
LINEMAPS_MACRO_MAPS (const line_maps *set)
{
  return set->info_macro.maps;
}


inline line_map_macro *
LINEMAPS_MACRO_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, true))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 975, __FUNCTION__); } while (0)
                                                       ;
  return (line_map_macro *)LINEMAPS_MAP_AT (set, true, index);
}



inline unsigned int
LINEMAPS_MACRO_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, true);
}


inline unsigned int
LINEMAPS_MACRO_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, true);
}



inline unsigned int &
LINEMAPS_MACRO_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, true);
}


inline line_map_macro *
LINEMAPS_LAST_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_MAP (set, true);
}



inline location_t
LINEMAPS_MACRO_LOWEST_LOCATION (const line_maps *set)
{
  return LINEMAPS_MACRO_USED (set)
         ? MAP_START_LOCATION (LINEMAPS_LAST_MACRO_MAP (set))
         : MAX_LOCATION_T + 1;
}


inline line_map_macro *
LINEMAPS_LAST_ALLOCATED_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_ALLOCATED_MAP (set, true);
}

extern location_t get_combined_adhoc_loc (line_maps *, location_t,
       source_range, void *);
extern void *get_data_from_adhoc_loc (const line_maps *, location_t);
extern location_t get_location_from_adhoc_loc (const line_maps *,
            location_t);

extern source_range get_range_from_loc (line_maps *set, location_t loc);




bool
pure_location_p (line_maps *set, location_t loc);




extern location_t get_pure_location (line_maps *set, location_t loc);



inline location_t
COMBINE_LOCATION_DATA (class line_maps *set,
         location_t loc,
         source_range src_range,
         void *block)
{
  return get_combined_adhoc_loc (set, loc, src_range, block);
}

extern void rebuild_location_adhoc_htab (class line_maps *);





extern void linemap_init (class line_maps *set,
     location_t builtin_location);



extern void linemap_check_files_exited (class line_maps *);







extern location_t linemap_line_start
(class line_maps *set, linenum_type to_line, unsigned int max_column_hint);
# 1092 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
extern const line_map *linemap_add
  (class line_maps *, enum lc_reason, unsigned int sysp,
   const char *to_file, linenum_type to_line);







extern const line_map *linemap_lookup
  (const line_maps *, location_t);



bool linemap_tracks_macro_expansion_locs_p (class line_maps *);


const char* linemap_map_get_macro_name (const line_map_macro *);
# 1121 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
int linemap_location_in_system_header_p (class line_maps *,
      location_t);



bool linemap_location_from_macro_expansion_p (const line_maps *,
           location_t);



bool linemap_location_from_macro_definition_p (class line_maps *,
            location_t);






extern location_t linemap_macro_map_loc_unwind_toward_spelling
  (line_maps *set, const line_map_macro *macro_map, location_t location);




const location_t RESERVED_LOCATION_COUNT = 2;


inline linenum_type
SOURCE_LINE (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   >> ord_map->m_column_and_range_bits) + ord_map->to_line;
}


inline linenum_type
SOURCE_COLUMN (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   & ((1 << ord_map->m_column_and_range_bits) - 1)) >> ord_map->m_range_bits;
}


inline location_t
linemap_included_from (const line_map_ordinary *ord_map)
{
  return ord_map->included_from;
}


const line_map_ordinary *linemap_included_from_linemap
  (line_maps *set, const line_map_ordinary *map);



inline bool
MAIN_FILE_P (const line_map_ordinary *ord_map)
{
  return ord_map->included_from == 0;
}





extern location_t
linemap_position_for_column (class line_maps *, unsigned int);



location_t
linemap_position_for_line_and_column (line_maps *set,
          const line_map_ordinary *,
          linenum_type, unsigned int);




location_t
linemap_position_for_loc_and_offset (class line_maps *set,
         location_t loc,
         unsigned int offset);


inline const char *
LINEMAP_FILE (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}


inline linenum_type
LINEMAP_LINE (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}





inline unsigned char
LINEMAP_SYSP (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}





int linemap_compare_locations (class line_maps *set,
          location_t pre,
          location_t post);




inline bool
linemap_location_before_p (class line_maps *set,
      location_t loc_a,
      location_t loc_b)
{
  return linemap_compare_locations (set, loc_a, loc_b) >= 0;
}

typedef struct
{

  const char *file;


  int line;

  int column;

  void *data;


  bool sysp;
} expanded_location;

class range_label;
# 1279 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
enum range_display_kind
{

  SHOW_RANGE_WITH_CARET,



  SHOW_RANGE_WITHOUT_CARET,





  SHOW_LINES_WITHOUT_RANGE
};





struct location_range
{
  location_t m_loc;

  enum range_display_kind m_range_display_kind;


  const range_label *m_label;
};
# 1320 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
template <typename T, int NUM_EMBEDDED>
class semi_embedded_vec
{
 public:
  semi_embedded_vec ();
  ~semi_embedded_vec ();

  unsigned int count () const { return m_num; }
  T& operator[] (int idx);
  const T& operator[] (int idx) const;

  void push (const T&);
  void truncate (int len);

 private:
  int m_num;
  T m_embedded[NUM_EMBEDDED];
  int m_alloc;
  T *m_extra;
};




template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::semi_embedded_vec ()
: m_num (0), m_alloc (0), m_extra (nullptr)
{
}



template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::~semi_embedded_vec ()
{
  free ((void*) (m_extra));
}



template <typename T, int NUM_EMBEDDED>
T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx)
{
  do { if (! (idx < m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1364, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != nullptr)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1369, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
const T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx) const
{
  do { if (! (idx < m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1380, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != nullptr)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1385, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::push (const T& value)
{
  int idx = m_num++;
  if (idx < NUM_EMBEDDED)
    m_embedded[idx] = value;
  else
    {

      idx -= NUM_EMBEDDED;
      if (nullptr == m_extra)
 {
   do { if (! (m_alloc == 0)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1405, __FUNCTION__); } while (0);
   m_alloc = 16;
   m_extra = ((T *) xmalloc (sizeof (T) * (m_alloc)));
 }
      else if (idx >= m_alloc)
 {
   do { if (! (m_alloc > 0)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1411, __FUNCTION__); } while (0);
   m_alloc *= 2;
   m_extra = ((T *) xrealloc ((void *) (m_extra), sizeof (T) * (m_alloc)));
 }
      do { if (! (m_extra)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1415, __FUNCTION__); } while (0);
      do { if (! (idx < m_alloc)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1416, __FUNCTION__); } while (0);
      m_extra[idx] = value;
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::truncate (int len)
{
  do { if (! (len <= m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1427, __FUNCTION__); } while (0);
  m_num = len;
}

class fixit_hint;
class diagnostic_path;
# 1609 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class rich_location
{
 public:



  rich_location (line_maps *set, location_t loc,
   const range_label *label = nullptr);


  ~rich_location ();


  location_t get_loc () const { return get_loc (0); }
  location_t get_loc (unsigned int idx) const;

  void
  add_range (location_t loc,
      enum range_display_kind range_display_kind
        = SHOW_RANGE_WITHOUT_CARET,
      const range_label *label = nullptr);

  void
  set_range (unsigned int idx, location_t loc,
      enum range_display_kind range_display_kind);

  unsigned int get_num_locations () const { return m_ranges.count (); }

  const location_range *get_range (unsigned int idx) const;
  location_range *get_range (unsigned int idx);

  expanded_location get_expanded_location (unsigned int idx);

  void
  override_column (int column);







  void
  add_fixit_insert_before (const char *new_content);


  void
  add_fixit_insert_before (location_t where,
      const char *new_content);



  void
  add_fixit_insert_after (const char *new_content);


  void
  add_fixit_insert_after (location_t where,
     const char *new_content);




  void
  add_fixit_remove ();



  void
  add_fixit_remove (location_t where);


  void
  add_fixit_remove (source_range src_range);




  void
  add_fixit_replace (const char *new_content);



  void
  add_fixit_replace (location_t where,
       const char *new_content);



  void
  add_fixit_replace (source_range src_range,
       const char *new_content);

  unsigned int get_num_fixit_hints () const { return m_fixit_hints.count (); }
  fixit_hint *get_fixit_hint (int idx) const { return m_fixit_hints[idx]; }
  fixit_hint *get_last_fixit_hint () const;
  bool seen_impossible_fixit_p () const { return m_seen_impossible_fixit; }
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  void fixits_cannot_be_auto_applied ()
  {
    m_fixits_cannot_be_auto_applied = true;
  }

  bool fixits_can_be_auto_applied_p () const
  {
    return !m_fixits_cannot_be_auto_applied;
  }


  const diagnostic_path *get_path () const { return m_path; }
  void set_path (const diagnostic_path *path) { m_path = path; }

private:
  bool reject_impossible_fixit (location_t where);
  void stop_supporting_fixits ();
  void maybe_add_fixit (location_t start,
   location_t next_loc,
   const char *new_content);

public:
  static const int STATICALLY_ALLOCATED_RANGES = 3;

protected:
  line_maps *m_line_table;
  semi_embedded_vec <location_range, STATICALLY_ALLOCATED_RANGES> m_ranges;

  int m_column_override;

  bool m_have_expanded_location;
  expanded_location m_expanded_location;

  static const int MAX_STATIC_FIXIT_HINTS = 2;
  semi_embedded_vec <fixit_hint *, MAX_STATIC_FIXIT_HINTS> m_fixit_hints;

  bool m_seen_impossible_fixit;
  bool m_fixits_cannot_be_auto_applied;

  const diagnostic_path *m_path;
};





class label_text
{
public:
  label_text ()
  : m_buffer (nullptr), m_caller_owned (false)
  {}

  void maybe_free ()
  {
    if (m_caller_owned)
      free (m_buffer);
  }



  static label_text borrow (const char *buffer)
  {
    return label_text (const_cast <char *> (buffer), false);
  }


  static label_text take (char *buffer)
  {
    return label_text (buffer, true);
  }


  char *take_or_copy ()
  {
    if (m_caller_owned)
      return m_buffer;
    else
      return xstrdup (m_buffer);
  }

  char *m_buffer;
  bool m_caller_owned;

private:
  label_text (char *buffer, bool owned)
  : m_buffer (buffer), m_caller_owned (owned)
  {}
};
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class range_label
{
 public:
  virtual ~range_label () {}




  virtual label_text get_text (unsigned range_idx) const = 0;
};
# 1848 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class fixit_hint
{
 public:
  fixit_hint (location_t start,
       location_t next_loc,
       const char *new_content);
  ~fixit_hint () { free (m_bytes); }

  bool affects_line_p (const char *file, int line) const;
  location_t get_start_loc () const { return m_start; }
  location_t get_next_loc () const { return m_next_loc; }
  bool maybe_append (location_t start,
       location_t next_loc,
       const char *new_content);

  const char *get_string () const { return m_bytes; }
  size_t get_length () const { return m_len; }

  bool insertion_p () const { return m_start == m_next_loc; }

  bool ends_with_newline_p () const;

 private:




  location_t m_start;
  location_t m_next_loc;
  char *m_bytes;
  size_t m_len;
};





enum location_resolution_kind
{
  LRK_MACRO_EXPANSION_POINT,
  LRK_SPELLING_LOCATION,
  LRK_MACRO_DEFINITION_LOCATION
};
# 1940 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_resolve_location (class line_maps *,
         location_t loc,
         enum location_resolution_kind lrk,
         const line_map_ordinary **loc_map);
# 1952 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_toward_expansion (class line_maps *,
         location_t loc,
         const line_map **loc_map);
# 1970 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_to_first_non_reserved_loc (class line_maps *,
           location_t loc,
           const line_map **map);





expanded_location linemap_expand_location (class line_maps *,
        const line_map *,
        location_t loc);



struct linemap_stats
{
  long num_ordinary_maps_allocated;
  long num_ordinary_maps_used;
  long ordinary_maps_allocated_size;
  long ordinary_maps_used_size;
  long num_expanded_macros;
  long num_macro_tokens;
  long num_macro_maps_used;
  long macro_maps_allocated_size;
  long macro_maps_used_size;
  long macro_maps_locations_size;
  long duplicated_macro_maps_locations_size;
  long adhoc_table_size;
  long adhoc_table_entries_used;
};





bool linemap_get_file_highest_location (class line_maps * set,
     const char *file_name,
     location_t *loc);



void linemap_get_statistics (line_maps *, struct linemap_stats *);



void linemap_dump_location (line_maps *, location_t, FILE *);




void linemap_dump (FILE *, line_maps *, unsigned, bool);




void line_table_dump (FILE *, line_maps *, unsigned int, unsigned int);



enum location_aspect
{
  LOCATION_ASPECT_CARET,
  LOCATION_ASPECT_START,
  LOCATION_ASPECT_FINISH
};







extern expanded_location
linemap_client_expand_location_to_spelling_point (location_t,
        enum location_aspect);
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h" 2

typedef struct cpp_reader cpp_reader;
typedef struct cpp_buffer cpp_buffer;
typedef struct cpp_options cpp_options;
typedef struct cpp_token cpp_token;
typedef struct cpp_string cpp_string;
typedef struct cpp_hashnode cpp_hashnode;
typedef struct cpp_macro cpp_macro;
typedef struct cpp_callbacks cpp_callbacks;
typedef struct cpp_dir cpp_dir;

struct _cpp_file;
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
enum cpp_ttype
{
  CPP_EQ, CPP_NOT, CPP_GREATER, CPP_LESS, CPP_PLUS, CPP_MINUS, CPP_MULT, CPP_DIV, CPP_MOD, CPP_AND, CPP_OR, CPP_XOR, CPP_RSHIFT, CPP_LSHIFT, CPP_COMPL, CPP_AND_AND, CPP_OR_OR, CPP_QUERY, CPP_COLON, CPP_COMMA, CPP_OPEN_PAREN, CPP_CLOSE_PAREN, CPP_EOF, CPP_EQ_EQ, CPP_NOT_EQ, CPP_GREATER_EQ, CPP_LESS_EQ, CPP_SPACESHIP, CPP_PLUS_EQ, CPP_MINUS_EQ, CPP_MULT_EQ, CPP_DIV_EQ, CPP_MOD_EQ, CPP_AND_EQ, CPP_OR_EQ, CPP_XOR_EQ, CPP_RSHIFT_EQ, CPP_LSHIFT_EQ, CPP_HASH, CPP_PASTE, CPP_OPEN_SQUARE, CPP_CLOSE_SQUARE, CPP_OPEN_BRACE, CPP_CLOSE_BRACE, CPP_SEMICOLON, CPP_ELLIPSIS, CPP_PLUS_PLUS, CPP_MINUS_MINUS, CPP_DEREF, CPP_DOT, CPP_SCOPE, CPP_DEREF_STAR, CPP_DOT_STAR, CPP_ATSIGN, CPP_NAME, CPP_AT_NAME, CPP_NUMBER, CPP_CHAR, CPP_WCHAR, CPP_CHAR16, CPP_CHAR32, CPP_UTF8CHAR, CPP_OTHER, CPP_STRING, CPP_WSTRING, CPP_STRING16, CPP_STRING32, CPP_UTF8STRING, CPP_OBJC_STRING, CPP_HEADER_NAME, CPP_CHAR_USERDEF, CPP_WCHAR_USERDEF, CPP_CHAR16_USERDEF, CPP_CHAR32_USERDEF, CPP_UTF8CHAR_USERDEF, CPP_STRING_USERDEF, CPP_WSTRING_USERDEF, CPP_STRING16_USERDEF, CPP_STRING32_USERDEF, CPP_UTF8STRING_USERDEF, CPP_COMMENT, CPP_MACRO_ARG, CPP_PRAGMA, CPP_PRAGMA_EOL, CPP_PADDING,
  N_TTYPES,


  CPP_KEYWORD,


  CPP_LAST_EQ = CPP_LSHIFT,
  CPP_FIRST_DIGRAPH = CPP_HASH,
  CPP_LAST_PUNCTUATOR= CPP_ATSIGN,
  CPP_LAST_CPP_OP = CPP_LESS_EQ
};




enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17, CLK_GNUC2X,
      CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11, CLK_STDC17,
      CLK_STDC2X,
      CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,
      CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17,
      CLK_GNUCXX20, CLK_CXX20, CLK_ASM};


struct cpp_string {
  unsigned int len;
  const unsigned char *text;
};
# 203 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
enum cpp_token_fld_kind {
  CPP_TOKEN_FLD_NODE,
  CPP_TOKEN_FLD_SOURCE,
  CPP_TOKEN_FLD_STR,
  CPP_TOKEN_FLD_ARG_NO,
  CPP_TOKEN_FLD_TOKEN_NO,
  CPP_TOKEN_FLD_PRAGMA,
  CPP_TOKEN_FLD_NONE
};


struct cpp_macro_arg {

  unsigned int arg_no;

  cpp_hashnode *
   


       spelling;
};


struct cpp_identifier {

  cpp_hashnode *
   


       node;

  cpp_hashnode *
   


       spelling;
};



struct cpp_token {


  location_t src_loc;

  enum cpp_ttype type : 8;
  unsigned short flags;

  union cpp_token_u
  {

    struct cpp_identifier node;


    cpp_token * source;


    struct cpp_string str;


    struct cpp_macro_arg macro_arg;



    unsigned int token_no;


    unsigned int pragma;
  } val;
};


extern enum cpp_token_fld_kind cpp_token_val_index (const cpp_token *tok);
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
typedef unsigned int cppchar_t;
typedef int cppchar_signed_t;


enum cpp_deps_style { DEPS_NONE = 0, DEPS_USER, DEPS_SYSTEM };


enum cpp_normalize_level {

  normalized_KC = 0,

  normalized_C,


  normalized_identifier_C,

  normalized_none
};



struct cpp_options
{

  enum c_lang lang;


  unsigned char cplusplus;


  unsigned char cplusplus_comments;




  unsigned char objc;


  unsigned char discard_comments;



  unsigned char discard_comments_in_macro_exp;


  unsigned char trigraphs;


  unsigned char digraphs;


  unsigned char extended_numbers;


  unsigned char uliterals;


  unsigned char utf8_char_literals;



  unsigned char rliterals;


  unsigned char print_include_names;


  unsigned char cpp_warn_deprecated;


  unsigned char warn_comments;


  unsigned char warn_date_time;



  unsigned char warn_missing_include_dirs;


  unsigned char warn_trigraphs;


  unsigned char warn_multichar;



  unsigned char cpp_warn_traditional;


  unsigned char cpp_warn_long_long;


  unsigned char warn_endif_labels;



  unsigned char warn_num_sign_change;



  unsigned char warn_variadic_macros;



  unsigned char warn_builtin_macro_redefined;


  unsigned char cpp_warn_implicit_fallthrough;



  unsigned char remap;


  unsigned char dollars_in_ident;


  unsigned char extended_identifiers;



  unsigned char warn_dollars;


  unsigned char warn_undef;



  unsigned char warn_expansion_to_defined;


  unsigned char warn_unused_macros;


  unsigned char c99;


  unsigned char std;


  unsigned char cpp_pedantic;



  unsigned char preprocessed;



  unsigned char debug;







  unsigned char track_macro_expansion;


  unsigned char operator_names;


  unsigned char warn_cxx_operator_names;


  unsigned char traditional;


  unsigned char user_literals;



  unsigned char warn_literal_suffix;



  unsigned char ext_numeric_literals;



  unsigned char c11_identifiers;


  unsigned char binary_constants;


  unsigned char digit_separators;


  unsigned char dfp_constants;


  unsigned char va_opt;


  unsigned char scope;


  const char *narrow_charset;


  const char *wide_charset;


  const char *input_charset;



  int warn_normalize;


  bool warn_invalid_pch;


  bool restore_pch_deps;


  signed char cpp_warn_c90_c99_compat;


  signed char cpp_warn_c11_c2x_compat;


  bool cpp_warn_cxx11_compat;


  struct
  {

    enum cpp_deps_style style;


    bool missing_files;



    bool phony_targets;


    bool ignore_main_file;



    bool need_preprocessor_output;
  } deps;





  size_t precision, char_precision, int_precision, wchar_precision;


  bool unsigned_char, unsigned_wchar;



  bool bytes_big_endian;


  unsigned char stdc_0_in_system_headers;


  bool directives_only;


  bool canonical_system_headers;


  unsigned int max_include_depth;
};





enum cpp_diagnostic_level {

  CPP_DL_WARNING = 0,

  CPP_DL_WARNING_SYSHDR,

  CPP_DL_PEDWARN,

  CPP_DL_ERROR,


  CPP_DL_ICE,

  CPP_DL_NOTE,

  CPP_DL_FATAL
};




enum cpp_warning_reason {
  CPP_W_NONE = 0,
  CPP_W_DEPRECATED,
  CPP_W_COMMENTS,
  CPP_W_MISSING_INCLUDE_DIRS,
  CPP_W_TRIGRAPHS,
  CPP_W_MULTICHAR,
  CPP_W_TRADITIONAL,
  CPP_W_LONG_LONG,
  CPP_W_ENDIF_LABELS,
  CPP_W_NUM_SIGN_CHANGE,
  CPP_W_VARIADIC_MACROS,
  CPP_W_BUILTIN_MACRO_REDEFINED,
  CPP_W_DOLLARS,
  CPP_W_UNDEF,
  CPP_W_UNUSED_MACROS,
  CPP_W_CXX_OPERATOR_NAMES,
  CPP_W_NORMALIZE,
  CPP_W_INVALID_PCH,
  CPP_W_WARNING_DIRECTIVE,
  CPP_W_LITERAL_SUFFIX,
  CPP_W_DATE_TIME,
  CPP_W_PEDANTIC,
  CPP_W_C90_C99_COMPAT,
  CPP_W_C11_C2X_COMPAT,
  CPP_W_CXX11_COMPAT,
  CPP_W_EXPANSION_TO_DEFINED
};







typedef const char *(*missing_header_cb)(cpp_reader *, const char *header, cpp_dir **);


struct cpp_callbacks
{

  void (*line_change) (cpp_reader *, const cpp_token *, int);





  void (*file_change) (cpp_reader *, const line_map_ordinary *);

  void (*dir_change) (cpp_reader *, const char *);
  void (*include) (cpp_reader *, location_t, const unsigned char *,
     const char *, int, const cpp_token **);
  void (*define) (cpp_reader *, location_t, cpp_hashnode *);
  void (*undef) (cpp_reader *, location_t, cpp_hashnode *);
  void (*ident) (cpp_reader *, location_t, const cpp_string *);
  void (*def_pragma) (cpp_reader *, location_t);
  int (*valid_pch) (cpp_reader *, const char *, int);
  void (*read_pch) (cpp_reader *, const char *, int, const char *);
  missing_header_cb missing_header;



  cpp_hashnode * (*macro_to_expand) (cpp_reader *, const cpp_token *);



  bool (*diagnostic) (cpp_reader *,
        enum cpp_diagnostic_level,
        enum cpp_warning_reason,
        rich_location *,
        const char *, va_list *)
       __attribute__ ((__format__ (__printf__, 5, 0))) __attribute__ ((__nonnull__ (5)));



  void (*used_define) (cpp_reader *, location_t, cpp_hashnode *);
  void (*used_undef) (cpp_reader *, location_t, cpp_hashnode *);


  void (*before_define) (cpp_reader *);


  void (*used) (cpp_reader *, location_t, cpp_hashnode *);


  int (*has_attribute) (cpp_reader *);


  int (*has_builtin) (cpp_reader *);


  void (*user_lazy_macro) (cpp_reader *, cpp_macro *, unsigned);


  time_t (*get_source_date_epoch) (cpp_reader *);


  const char *(*get_suggestion) (cpp_reader *, const char *, const char *const *);







  void (*comment) (cpp_reader *, location_t, const unsigned char *,
     size_t);



  const char *(*remap_filename) (const char*);
};
# 710 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
struct cpp_dir
{

  struct cpp_dir *next;


  char *name;
  unsigned int len;



  unsigned char sysp;


  bool user_supplied_p;



  char *canonical_name;



  const char **name_map;





  char *(*construct) (const char *header, cpp_dir *dir);



  ino_t ino;
  dev_t dev;
};


enum cpp_macro_kind {
  cmk_macro,
  cmk_assert,
  cmk_traditional
};



struct cpp_macro {
  union cpp_parm_u
  {



    cpp_hashnode **



                            params;


    cpp_macro * next;
  } parm;


  location_t line;



  unsigned int count;


  unsigned short paramc;


  unsigned char lazy;


  unsigned kind : 2;


  unsigned int fun_like : 1;


  unsigned int variadic : 1;


  unsigned int syshdr : 1;


  unsigned int used : 1;




  unsigned int extra_tokens : 1;



  union cpp_exp_u
  {

    cpp_token tokens[1];




    const unsigned char * text;
  } exp;
};
# 836 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
enum node_type
{
  NT_VOID = 0,
  NT_MACRO_ARG,
  NT_USER_MACRO,
  NT_BUILTIN_MACRO,
  NT_MACRO_MASK = NT_USER_MACRO
};



enum cpp_builtin_type
{
  BT_SPECLINE = 0,
  BT_DATE,
  BT_FILE,
  BT_BASE_FILE,
  BT_INCLUDE_LEVEL,
  BT_TIME,
  BT_STDC,
  BT_PRAGMA,
  BT_TIMESTAMP,
  BT_COUNTER,
  BT_HAS_ATTRIBUTE,
  BT_HAS_BUILTIN,
  BT_HAS_INCLUDE,
  BT_HAS_INCLUDE_NEXT
};
# 874 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
union _cpp_hashnode_value {

  cpp_macro * answers;

  cpp_macro * macro;

  enum cpp_builtin_type builtin;

  unsigned short arg_index;
};

struct cpp_hashnode {
  struct ht_identifier ident;
  unsigned int is_directive : 1;
  unsigned int directive_index : 7;


  unsigned char rid_code;
  enum node_type type : 2;
  unsigned int flags : 8;



  union _cpp_hashnode_value value;
};





class cpp_string_location_reader {
 public:
  cpp_string_location_reader (location_t src_loc,
         line_maps *line_table);

  source_range get_next ();

 private:
  location_t m_loc;
  int m_offset_per_column;
};







class cpp_substring_ranges
{
 public:
  cpp_substring_ranges ();
  ~cpp_substring_ranges ();

  int get_num_ranges () const { return m_num_ranges; }
  source_range get_range (int idx) const
  {
    do { if (! (idx < m_num_ranges)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h", 931, __FUNCTION__); } while (0);
    return m_ranges[idx];
  }

  void add_range (source_range range);
  void add_n_ranges (int num, cpp_string_location_reader &loc_reader);

 private:
  source_range *m_ranges;
  int m_num_ranges;
  int m_alloc_ranges;
};







extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *,
          class line_maps *);



extern void cpp_set_line_map (cpp_reader *, class line_maps *);



extern void cpp_set_lang (cpp_reader *, enum c_lang);


extern void cpp_set_include_chains (cpp_reader *, cpp_dir *, cpp_dir *, int);






extern cpp_options *cpp_get_options (cpp_reader *) __attribute__ ((__pure__));
extern cpp_callbacks *cpp_get_callbacks (cpp_reader *) __attribute__ ((__pure__));
extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);
extern class mkdeps *cpp_get_deps (cpp_reader *) __attribute__ ((__pure__));






extern const char *cpp_read_main_file (cpp_reader *, const char *,
           bool injecting = false);



extern void cpp_init_special_builtins (cpp_reader *);


extern void cpp_init_builtins (cpp_reader *, int);



extern void cpp_post_options (cpp_reader *);


extern void cpp_init_iconv (cpp_reader *);




extern void cpp_finish (cpp_reader *, FILE *deps_stream);



extern void cpp_destroy (cpp_reader *);

extern unsigned int cpp_token_len (const cpp_token *);
extern unsigned char *cpp_token_as_text (cpp_reader *, const cpp_token *);
extern unsigned char *cpp_spell_token (cpp_reader *, const cpp_token *,
           unsigned char *, bool);
extern void cpp_register_pragma (cpp_reader *, const char *, const char *,
     void (*) (cpp_reader *), bool);
extern void cpp_register_deferred_pragma (cpp_reader *, const char *,
       const char *, unsigned, bool, bool);
extern int cpp_avoid_paste (cpp_reader *, const cpp_token *,
       const cpp_token *);
extern const cpp_token *cpp_get_token (cpp_reader *);
extern const cpp_token *cpp_get_token_with_location (cpp_reader *,
           location_t *);
inline bool cpp_user_macro_p (const cpp_hashnode *node)
{
  return node->type == NT_USER_MACRO;
}
inline bool cpp_builtin_macro_p (const cpp_hashnode *node)
{
  return node->type == NT_BUILTIN_MACRO;
}
inline bool cpp_macro_p (const cpp_hashnode *node)
{
  return node->type & NT_MACRO_MASK;
}


inline bool cpp_fun_like_macro_p (cpp_hashnode *node)
{
  return cpp_user_macro_p (node) && node->value.macro->fun_like;
}

extern const unsigned char *cpp_macro_definition (cpp_reader *,
        cpp_hashnode *);
inline location_t cpp_macro_definition_location (cpp_hashnode *node)
{
  return node->value.macro->line;
}
extern void _cpp_backup_tokens (cpp_reader *, unsigned int);
extern const cpp_token *cpp_peek_token (cpp_reader *, int);


extern cppchar_t cpp_interpret_charconst (cpp_reader *, const cpp_token *,
       unsigned int *, int *);

extern bool cpp_interpret_string (cpp_reader *,
      const cpp_string *, size_t,
      cpp_string *, enum cpp_ttype);
extern const char *cpp_interpret_string_ranges (cpp_reader *pfile,
      const cpp_string *from,
      cpp_string_location_reader *,
      size_t count,
      cpp_substring_ranges *out,
      enum cpp_ttype type);
extern bool cpp_interpret_string_notranslate (cpp_reader *,
           const cpp_string *, size_t,
           cpp_string *, enum cpp_ttype);


extern cppchar_t cpp_host_to_exec_charset (cpp_reader *, cppchar_t);



extern void cpp_define (cpp_reader *, const char *);
extern void cpp_define_formatted (cpp_reader *pfile,
      const char *fmt, ...) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void cpp_assert (cpp_reader *, const char *);
extern void cpp_undef (cpp_reader *, const char *);
extern void cpp_unassert (cpp_reader *, const char *);


extern void cpp_define_lazily (cpp_reader *, cpp_hashnode *node, unsigned N);


extern void cpp_undef_all (cpp_reader *);

extern cpp_buffer *cpp_push_buffer (cpp_reader *, const unsigned char *,
        size_t, int);
extern int cpp_defined (cpp_reader *, const unsigned char *, int);






typedef uint64_t cpp_num_part;
typedef struct cpp_num cpp_num;
struct cpp_num
{
  cpp_num_part high;
  cpp_num_part low;
  bool unsignedp;
  bool overflow;
};
# 1147 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
extern unsigned cpp_classify_number (cpp_reader *, const cpp_token *,
         const char **, location_t);


extern unsigned int cpp_interpret_float_suffix (cpp_reader *, const char *,
      size_t);


extern unsigned int cpp_interpret_int_suffix (cpp_reader *, const char *,
           size_t);


extern cpp_num cpp_interpret_integer (cpp_reader *, const cpp_token *,
          unsigned int);



cpp_num cpp_num_sign_extend (cpp_num, size_t);


extern bool cpp_error (cpp_reader *, enum cpp_diagnostic_level,
         const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool cpp_warning (cpp_reader *, enum cpp_warning_reason,
    const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool cpp_pedwarning (cpp_reader *, enum cpp_warning_reason,
       const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool cpp_warning_syshdr (cpp_reader *, enum cpp_warning_reason reason,
    const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));



extern bool cpp_errno (cpp_reader *, enum cpp_diagnostic_level,
         const char *msgid);


extern bool cpp_errno_filename (cpp_reader *, enum cpp_diagnostic_level,
    const char *filename, location_t loc);




extern bool cpp_error_with_line (cpp_reader *, enum cpp_diagnostic_level,
     location_t, unsigned,
     const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool cpp_warning_with_line (cpp_reader *, enum cpp_warning_reason,
       location_t, unsigned,
       const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool cpp_pedwarning_with_line (cpp_reader *, enum cpp_warning_reason,
          location_t, unsigned,
          const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool cpp_warning_with_line_syshdr (cpp_reader *, enum cpp_warning_reason,
       location_t, unsigned,
       const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));

extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level,
     location_t src_loc, const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 4, 5))) __attribute__ ((__nonnull__ (4)));

extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level,
     rich_location *richloc, const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 4, 5))) __attribute__ ((__nonnull__ (4)));


extern int cpp_ideq (const cpp_token *, const char *);
extern void cpp_output_line (cpp_reader *, FILE *);
extern unsigned char *cpp_output_line_to_string (cpp_reader *,
       const unsigned char *);
extern void cpp_output_token (const cpp_token *, FILE *);
extern const char *cpp_type2name (enum cpp_ttype, unsigned char flags);





extern cppchar_t cpp_parse_escape (cpp_reader *, const unsigned char ** pstr,
       const unsigned char *limit, int wide);




typedef struct
{

  char *comment;


  location_t sloc;
} cpp_comment;



typedef struct
{

  cpp_comment *entries;


  int count;


  int allocated;
} cpp_comment_table;



extern cpp_comment_table *cpp_get_comments (cpp_reader *);





extern cpp_hashnode *cpp_lookup (cpp_reader *, const unsigned char *,
     unsigned int);

typedef int (*cpp_cb) (cpp_reader *, cpp_hashnode *, void *);
extern void cpp_forall_identifiers (cpp_reader *, cpp_cb, void *);


extern void cpp_scan_nooutput (cpp_reader *);
extern int cpp_sys_macro_p (cpp_reader *);
extern unsigned char *cpp_quote_string (unsigned char *, const unsigned char *,
     unsigned int);


extern bool cpp_included (cpp_reader *, const char *);
extern bool cpp_included_before (cpp_reader *, const char *, location_t);
extern void cpp_make_system_header (cpp_reader *, int, int);
extern bool cpp_push_include (cpp_reader *, const char *);
extern bool cpp_push_default_include (cpp_reader *, const char *);
extern void cpp_change_file (cpp_reader *, enum lc_reason, const char *);
extern const char *cpp_get_path (struct _cpp_file *);
extern cpp_dir *cpp_get_dir (struct _cpp_file *);
extern cpp_buffer *cpp_get_buffer (cpp_reader *);
extern struct _cpp_file *cpp_get_file (cpp_buffer *);
extern cpp_buffer *cpp_get_prev (cpp_buffer *);
extern void cpp_clear_file_cache (cpp_reader *);


struct save_macro_data;
extern int cpp_save_state (cpp_reader *, FILE *);
extern int cpp_write_pch_deps (cpp_reader *, FILE *);
extern int cpp_write_pch_state (cpp_reader *, FILE *);
extern int cpp_valid_state (cpp_reader *, const char *, int);
extern void cpp_prepare_state (cpp_reader *, struct save_macro_data **);
extern int cpp_read_state (cpp_reader *, const char *, FILE *,
      struct save_macro_data *);


extern void cpp_force_token_locations (cpp_reader *, location_t);
extern void cpp_stop_forcing_token_locations (cpp_reader *);
enum CPP_DO_task
{
  CPP_DO_print,
  CPP_DO_location,
  CPP_DO_token
};

extern void cpp_directive_only_process (cpp_reader *pfile,
     void *data,
     void (*cb) (cpp_reader *,
          CPP_DO_task,
          void *data, ...));


extern enum cpp_ttype cpp_userdef_string_remove_type
  (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_string_add_type
  (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_char_remove_type
  (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_char_add_type
  (enum cpp_ttype type);
extern bool cpp_userdef_string_p
  (enum cpp_ttype type);
extern bool cpp_userdef_char_p
  (enum cpp_ttype type);
extern const char * cpp_get_userdef_suffix
  (const cpp_token *);





class cpp_display_width_computation {
 public:
  cpp_display_width_computation (const char *data, int data_length,
     int tabstop);
  const char *next_byte () const { return m_next; }
  int bytes_processed () const { return m_next - m_begin; }
  int bytes_left () const { return m_bytes_left; }
  bool done () const { return !bytes_left (); }
  int display_cols_processed () const { return m_display_cols; }

  int process_next_codepoint ();
  int advance_display_cols (int n);

 private:
  const char *const m_begin;
  const char *m_next;
  size_t m_bytes_left;
  const int m_tabstop;
  int m_display_cols;
};




int cpp_byte_column_to_display_column (const char *data, int data_length,
           int column, int tabstop);
inline int cpp_display_width (const char *data, int data_length,
         int tabstop)
{
  return cpp_byte_column_to_display_column (data, data_length, data_length,
         tabstop);
}
int cpp_display_column_to_byte_column (const char *data, int data_length,
           int display_col, int tabstop);
int cpp_wcwidth (cppchar_t c);
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/errors.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/errors.h"
extern void warning (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1))) __attribute__ ((__cold__));
extern void error (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1))) __attribute__ ((__cold__));
extern void fatal (const char *, ...) __attribute__ ((__noreturn__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1))) __attribute__ ((__cold__));
extern void internal_error (const char *, ...) __attribute__ ((__noreturn__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1))) __attribute__ ((__cold__));
extern const char *trim_filename (const char *);

extern int have_error;
extern const char *progname;
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 1
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h" 1
# 61 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h"
struct function;


extern void statistics_early_init (void);
extern void statistics_init (void);
extern void statistics_fini (void);
extern void statistics_fini_pass (void);
extern void statistics_counter_event (struct function *, const char *, int);
extern void statistics_histogram_event (struct function *, const char *, int);
# 247 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
# 1 "./gtype-desc.h" 1
# 31 "./gtype-desc.h"
extern void gt_ggc_mx_line_maps (void *);



extern void gt_ggc_mx_cpp_token (void *);



extern void gt_ggc_mx_cpp_macro (void *);



extern void gt_ggc_mx_string_concat (void *);



extern void gt_ggc_mx_string_concat_db (void *);



extern void gt_ggc_mx_hash_map_location_hash_string_concat__ (void *);



extern void gt_ggc_mx_bitmap_head (void *);



extern void gt_ggc_mx_rtx_def (void *);



extern void gt_ggc_mx_rtvec_def (void *);



extern void gt_ggc_mx_gimple (void *);



extern void gt_ggc_mx_symtab_node (void *);



extern void gt_ggc_mx_cgraph_edge (void *);



extern void gt_ggc_mx_section (void *);



extern void gt_ggc_mx_cl_target_option (void *);



extern void gt_ggc_mx_cl_optimization (void *);



extern void gt_ggc_mx_edge_def (void *);



extern void gt_ggc_mx_basic_block_def (void *);



extern void gt_ggc_mx_stack_local_entry (void *);



extern void gt_ggc_mx_machine_function (void *);



extern void gt_ggc_mx_bitmap_element (void *);



extern void gt_ggc_mx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_ggc_mx_coverage_data (void *);



extern void gt_ggc_mx_mem_attrs (void *);



extern void gt_ggc_mx_reg_attrs (void *);



extern void gt_ggc_mx_object_block (void *);



extern void gt_ggc_mx_vec_rtx_va_gc_ (void *);



extern void gt_ggc_mx_real_value (void *);



extern void gt_ggc_mx_fixed_value (void *);



extern void gt_ggc_mx_constant_descriptor_rtx (void *);



extern void gt_ggc_mx_function (void *);



extern void gt_ggc_mx_target_rtl (void *);



extern void gt_ggc_mx_cgraph_rtl_info (void *);



extern void gt_ggc_mx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_ggc_mx_ptr_info_def (void *);



extern void gt_ggc_mx_range_info_def (void *);



extern void gt_ggc_mx_die_struct (void *);



extern void gt_ggc_mx_vec_constructor_elt_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_va_gc_ (void *);



extern void gt_ggc_mx_lang_type (void *);



extern void gt_ggc_mx_lang_decl (void *);



extern void gt_ggc_mx_tree_statement_list_node (void *);



extern void gt_ggc_mx_target_globals (void *);



extern void gt_ggc_mx_lang_tree_node (void *);



extern void gt_ggc_mx_tree_map (void *);



extern void gt_ggc_mx_tree_decl_map (void *);



extern void gt_ggc_mx_tree_int_map (void *);



extern void gt_ggc_mx_tree_vec_map (void *);



extern void gt_ggc_mx_vec_alias_pair_va_gc_ (void *);



extern void gt_ggc_mx_libfunc_entry (void *);



extern void gt_ggc_mx_hash_table_libfunc_hasher_ (void *);



extern void gt_ggc_mx_target_libfuncs (void *);



extern void gt_ggc_mx_sequence_stack (void *);



extern void gt_ggc_mx_vec_rtx_insn__va_gc_ (void *);



extern void gt_ggc_mx_call_site_record_d (void *);



extern void gt_ggc_mx_vec_uchar_va_gc_ (void *);



extern void gt_ggc_mx_vec_call_site_record_va_gc_ (void *);



extern void gt_ggc_mx_gimple_df (void *);



extern void gt_ggc_mx_dw_fde_node (void *);



extern void gt_ggc_mx_rtx_constant_pool (void *);



extern void gt_ggc_mx_frame_space (void *);



extern void gt_ggc_mx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_ggc_mx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_ggc_mx_stack_usage (void *);



extern void gt_ggc_mx_eh_status (void *);



extern void gt_ggc_mx_control_flow_graph (void *);



extern void gt_ggc_mx_loops (void *);



extern void gt_ggc_mx_language_function (void *);



extern void gt_ggc_mx_hash_set_tree_ (void *);



extern void gt_ggc_mx_types_used_by_vars_entry (void *);



extern void gt_ggc_mx_hash_table_used_type_hasher_ (void *);



extern void gt_ggc_mx_nb_iter_bound (void *);



extern void gt_ggc_mx_loop_exit (void *);



extern void gt_ggc_mx_loop (void *);



extern void gt_ggc_mx_control_iv (void *);



extern void gt_ggc_mx_vec_loop_p_va_gc_ (void *);



extern void gt_ggc_mx_niter_desc (void *);



extern void gt_ggc_mx_hash_table_loop_exit_hasher_ (void *);



extern void gt_ggc_mx_vec_basic_block_va_gc_ (void *);



extern void gt_ggc_mx_rtl_bb_info (void *);



extern void gt_ggc_mx_vec_edge_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_ggc_mx_section_hash_entry (void *);



extern void gt_ggc_mx_lto_file_decl_data (void *);



extern void gt_ggc_mx_ipa_replace_map (void *);



extern void gt_ggc_mx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_ggc_mx_ipa_param_adjustments (void *);



extern void gt_ggc_mx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_ggc_mx_cgraph_simd_clone (void *);



extern void gt_ggc_mx_cgraph_function_version_info (void *);



extern void gt_ggc_mx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_ggc_mx_cgraph_indirect_call_info (void *);



extern void gt_ggc_mx_asm_node (void *);



extern void gt_ggc_mx_symbol_table (void *);



extern void gt_ggc_mx_hash_table_section_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_asmname_hasher_ (void *);



extern void gt_ggc_mx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_ggc_mx_constant_descriptor_tree (void *);



extern void gt_ggc_mx_hash_map_alias_set_hash_int_ (void *);



extern void gt_ggc_mx_alias_set_entry (void *);



extern void gt_ggc_mx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_ggc_mx_hash_table_function_version_hasher_ (void *);



extern void gt_ggc_mx_lto_in_decl_state (void *);



extern void gt_ggc_mx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_ipa_node_params (void *);



extern void gt_ggc_mx_ipa_edge_args (void *);



extern void gt_ggc_mx_ipa_agg_replacement_value (void *);



extern void gt_ggc_mx_ipa_fn_summary (void *);



extern void gt_ggc_mx_odr_type_d (void *);



extern void gt_ggc_mx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_ggc_mx_param_access (void *);



extern void gt_ggc_mx_vec_param_access__va_gc_ (void *);



extern void gt_ggc_mx_isra_func_summary (void *);



extern void gt_ggc_mx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_ggc_mx_ipa_sra_function_summaries (void *);



extern void gt_ggc_mx_typeinfo (void *);



extern void gt_ggc_mx_dw_cfi_node (void *);



extern void gt_ggc_mx_dw_loc_descr_node (void *);



extern void gt_ggc_mx_dw_loc_list_struct (void *);



extern void gt_ggc_mx_dw_discr_list_node (void *);



extern void gt_ggc_mx_dw_cfa_location (void *);



extern void gt_ggc_mx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_ggc_mx_addr_table_entry (void *);



extern void gt_ggc_mx_indirect_string_node (void *);



extern void gt_ggc_mx_dwarf_file_data (void *);



extern void gt_ggc_mx_hash_map_char__tree_ (void *);



extern void gt_ggc_mx_dw_cfi_row (void *);



extern void gt_ggc_mx_reg_saved_in_data (void *);



extern void gt_ggc_mx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_indirect_string_hasher_ (void *);



extern void gt_ggc_mx_comdat_type_node (void *);



extern void gt_ggc_mx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_ggc_mx_dw_line_info_table (void *);



extern void gt_ggc_mx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_ggc_mx_limbo_die_struct (void *);



extern void gt_ggc_mx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_die_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_ggc_mx_variable_value_struct (void *);



extern void gt_ggc_mx_hash_table_variable_value_hasher_ (void *);



extern void gt_ggc_mx_hash_table_block_die_hasher_ (void *);



extern void gt_ggc_mx_var_loc_node (void *);



extern void gt_ggc_mx_var_loc_list_def (void *);



extern void gt_ggc_mx_call_arg_loc_node (void *);



extern void gt_ggc_mx_hash_table_decl_loc_hasher_ (void *);



extern void gt_ggc_mx_cached_dw_loc_list_def (void *);



extern void gt_ggc_mx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_ggc_mx_vec_pubname_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_ggc_mx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_addr_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_ggc_mx_inline_entry_data (void *);



extern void gt_ggc_mx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_ggc_mx_temp_slot (void *);



extern void gt_ggc_mx_initial_value_struct (void *);



extern void gt_ggc_mx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_const_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_reg_attr_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_double_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_fixed_hasher_ (void *);



extern void gt_ggc_mx_eh_region_d (void *);



extern void gt_ggc_mx_eh_landing_pad_d (void *);



extern void gt_ggc_mx_eh_catch_d (void *);



extern void gt_ggc_mx_vec_eh_region_va_gc_ (void *);



extern void gt_ggc_mx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_ggc_mx_hash_map_gimple__int_ (void *);



extern void gt_ggc_mx_hash_table_insn_cache_hasher_ (void *);



extern void gt_ggc_mx_temp_slot_address_entry (void *);



extern void gt_ggc_mx_hash_table_temp_address_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_hash_tree_ (void *);



extern void gt_ggc_mx_test_struct (void *);



extern void gt_ggc_mx_test_of_length (void *);



extern void gt_ggc_mx_test_other (void *);



extern void gt_ggc_mx_test_of_union (void *);



extern void gt_ggc_mx_example_base (void *);



extern void gt_ggc_mx_test_node (void *);



extern void gt_ggc_mx_user_struct (void *);



extern void gt_ggc_mx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_ggc_mx_string_pool_data (void *);



extern void gt_ggc_mx_type_hash (void *);



extern void gt_ggc_mx_hash_table_type_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_cl_option_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_section_hasher_ (void *);



extern void gt_ggc_mx_hash_table_object_block_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_clone_hasher_ (void *);



extern void gt_ggc_mx_tm_restart_node (void *);



extern void gt_ggc_mx_hash_map_tree_tree_ (void *);



extern void gt_ggc_mx_hash_table_ssa_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_restart_hasher_ (void *);



extern void gt_ggc_mx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_ggc_mx_scev_info_str (void *);



extern void gt_ggc_mx_hash_table_scev_info_hasher_ (void *);



extern void gt_ggc_mx_ssa_operand_memory_d (void *);



extern void gt_ggc_mx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_ggc_mx_omp_declare_variant_base_entry (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_ggc_mx_hash_table_dllimport_hasher_ (void *);



extern void gt_ggc_mx_hash_map_char__unsigned_ (void *);



extern void gt_ggc_mx_vec_gimple__va_gc_ (void *);



extern void gt_ggc_mx_int_range_1_ (void *);



extern void gt_ggc_mx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_ggc_mx_ipa_bits (void *);



extern void gt_ggc_mx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_bits__va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_vr_va_gc_ (void *);



extern void gt_ggc_mx_ipcp_transformation (void *);



extern void gt_ggc_mx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_ggc_mx_ipa_node_params_t (void *);



extern void gt_ggc_mx_ipa_edge_args_sum_t (void *);



extern void gt_ggc_mx_function_summary_ipcp_transformation__ (void *);



extern void gt_ggc_mx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_state_hasher_ (void *);



extern void gt_ggc_mx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_ggc_mx_vec_condition_va_gc_ (void *);



extern void gt_ggc_mx_vec_size_time_entry_va_gc_ (void *);



extern void gt_ggc_mx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_ggc_mx_tree_type_map (void *);



extern void gt_ggc_mx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_ggc_mx_vec_odr_type_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_value_annotation_hasher_ (void *);



extern void gt_ggc_mx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_ggc_mx_tree_entity_vec_map (void *);



extern void gt_ggc_mx_hash_table_dummy_type_hasher_ (void *);



extern void gt_ggc_mx_parm_attr_d (void *);



extern void gt_ggc_mx_vec_parm_attr_va_gc_ (void *);



extern void gt_ggc_mx_stmt_group (void *);



extern void gt_ggc_mx_elab_info (void *);



extern void gt_ggc_mx_range_check_info_d (void *);



extern void gt_ggc_mx_vec_range_check_info_va_gc_ (void *);



extern void gt_ggc_mx_loop_info_d (void *);



extern void gt_ggc_mx_vec_loop_info_va_gc_ (void *);



extern void gt_ggc_mx_gnat_binding_level (void *);



extern void gt_ggc_mx_packable_type_hash (void *);



extern void gt_ggc_mx_hash_table_packable_type_hasher_ (void *);



extern void gt_ggc_mx_pad_type_hash (void *);



extern void gt_ggc_mx_hash_table_pad_type_hasher_ (void *);



extern void gt_ggc_mx_c_label_vars (void *);



extern void gt_ggc_mx_c_binding (void *);



extern void gt_ggc_mx_c_scope (void *);



extern void gt_ggc_mx_c_goto_bindings (void *);



extern void gt_ggc_mx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_ggc_mx_c_inline_static (void *);



extern void gt_ggc_mx_sorted_fields_type (void *);



extern void gt_ggc_mx_vec_const_char_p_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_ggc_mx_align_stack (void *);



extern void gt_ggc_mx_vec_pending_weak_va_gc_ (void *);



extern void gt_ggc_mx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_ggc_mx_opt_stack (void *);



extern void gt_ggc_mx_c_parser (void *);



extern void gt_ggc_mx_vec_c_token_va_gc_ (void *);



extern void gt_ggc_mx_binding_table_s (void *);



extern void gt_ggc_mx_binding_entry_s (void *);



extern void gt_ggc_mx_cxx_binding (void *);



extern void gt_ggc_mx_cp_binding_level (void *);



extern void gt_ggc_mx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_ggc_mx_cp_token_cache (void *);



extern void gt_ggc_mx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_ggc_mx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_ggc_mx_saved_scope (void *);



extern void gt_ggc_mx_cxx_int_tree_map (void *);



extern void gt_ggc_mx_named_label_entry (void *);



extern void gt_ggc_mx_hash_table_named_label_hash_ (void *);



extern void gt_ggc_mx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_ggc_mx_tree_pair_s (void *);



extern void gt_ggc_mx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_named_decl_hash_ (void *);



extern void gt_ggc_mx_tinst_level (void *);



extern void gt_ggc_mx_tree_check (void *);



extern void gt_ggc_mx_vec_cp_token_va_gc_ (void *);



extern void gt_ggc_mx_cp_lexer (void *);



extern void gt_ggc_mx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser_context (void *);



extern void gt_ggc_mx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser (void *);



extern void gt_ggc_mx_hash_map_tree_int_ (void *);



extern void gt_ggc_mx_constexpr_fundef (void *);



extern void gt_ggc_mx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_ggc_mx_constexpr_call (void *);



extern void gt_ggc_mx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_ggc_mx_sat_entry (void *);



extern void gt_ggc_mx_hash_table_sat_hasher_ (void *);



extern void gt_ggc_mx_coroutine_info (void *);



extern void gt_ggc_mx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_ggc_mx_source_location_table_entry (void *);



extern void gt_ggc_mx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_ggc_mx_named_label_use_entry (void *);



extern void gt_ggc_mx_vec_incomplete_var_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_typename_hasher_ (void *);



extern void gt_ggc_mx_hash_table_mangled_decl_hash_ (void *);



extern void gt_ggc_mx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_int_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_conv_type_hasher_ (void *);



extern void gt_ggc_mx_subsumption_entry (void *);



extern void gt_ggc_mx_hash_table_subsumption_hasher_ (void *);



extern void gt_ggc_mx_pending_template (void *);



extern void gt_ggc_mx_spec_entry (void *);



extern void gt_ggc_mx_hash_table_spec_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_ggc_mx_vec_tinfo_s_va_gc_ (void *);



extern void gt_ggc_mx_vec_deferred_access_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_cplus_array_hasher_ (void *);



extern void gt_ggc_mx_hash_table_list_hasher_ (void *);



extern void gt_ggc_mx_pending_abstract_type (void *);



extern void gt_ggc_mx_hash_table_abstract_type_hasher_ (void *);



extern void gt_ggc_mx_Statement (void *);



extern void gt_ggc_mx_binding_level (void *);



extern void gt_ggc_mx_d_label_use_entry (void *);



extern void gt_ggc_mx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_ggc_mx_hash_table_module_hasher_ (void *);



extern void gt_ggc_mx_module_htab_entry (void *);



extern void gt_ggc_mx_hash_table_module_decl_hasher_ (void *);



extern void gt_ggc_mx_objc_map_private (void *);



extern void gt_ggc_mx_hashed_entry (void *);



extern void gt_ggc_mx_hashed_attribute (void *);



extern void gt_ggc_mx_imp_entry (void *);



extern void gt_ggc_mx_string_descriptor (void *);



extern void gt_ggc_mx_hash_table_objc_string_hasher_ (void *);



extern void gt_ggc_mx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_ggc_mx_vec_msgref_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_ivarref_entry_va_gc_ (void *);
# 1388 "./gtype-desc.h"
extern void gt_pch_nx_line_maps (void *);



extern void gt_pch_nx_cpp_token (void *);



extern void gt_pch_nx_cpp_macro (void *);



extern void gt_pch_nx_string_concat (void *);



extern void gt_pch_nx_string_concat_db (void *);



extern void gt_pch_nx_hash_map_location_hash_string_concat__ (void *);



extern void gt_pch_nx_bitmap_head (void *);



extern void gt_pch_nx_rtx_def (void *);



extern void gt_pch_nx_rtvec_def (void *);



extern void gt_pch_nx_gimple (void *);



extern void gt_pch_nx_symtab_node (void *);



extern void gt_pch_nx_cgraph_edge (void *);



extern void gt_pch_nx_section (void *);



extern void gt_pch_nx_cl_target_option (void *);



extern void gt_pch_nx_cl_optimization (void *);



extern void gt_pch_nx_edge_def (void *);



extern void gt_pch_nx_basic_block_def (void *);



extern void gt_pch_nx_stack_local_entry (void *);



extern void gt_pch_nx_machine_function (void *);



extern void gt_pch_nx_bitmap_element (void *);



extern void gt_pch_nx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_pch_nx_coverage_data (void *);



extern void gt_pch_nx_mem_attrs (void *);



extern void gt_pch_nx_reg_attrs (void *);



extern void gt_pch_nx_object_block (void *);



extern void gt_pch_nx_vec_rtx_va_gc_ (void *);



extern void gt_pch_nx_real_value (void *);



extern void gt_pch_nx_fixed_value (void *);



extern void gt_pch_nx_constant_descriptor_rtx (void *);



extern void gt_pch_nx_function (void *);



extern void gt_pch_nx_target_rtl (void *);



extern void gt_pch_nx_cgraph_rtl_info (void *);



extern void gt_pch_nx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_pch_nx_ptr_info_def (void *);



extern void gt_pch_nx_range_info_def (void *);



extern void gt_pch_nx_die_struct (void *);



extern void gt_pch_nx_vec_constructor_elt_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_va_gc_ (void *);



extern void gt_pch_nx_lang_type (void *);



extern void gt_pch_nx_lang_decl (void *);



extern void gt_pch_nx_tree_statement_list_node (void *);



extern void gt_pch_nx_target_globals (void *);



extern void gt_pch_nx_lang_tree_node (void *);



extern void gt_pch_nx_tree_map (void *);



extern void gt_pch_nx_tree_decl_map (void *);



extern void gt_pch_nx_tree_int_map (void *);



extern void gt_pch_nx_tree_vec_map (void *);



extern void gt_pch_nx_vec_alias_pair_va_gc_ (void *);



extern void gt_pch_nx_libfunc_entry (void *);



extern void gt_pch_nx_hash_table_libfunc_hasher_ (void *);



extern void gt_pch_nx_target_libfuncs (void *);



extern void gt_pch_nx_sequence_stack (void *);



extern void gt_pch_nx_vec_rtx_insn__va_gc_ (void *);



extern void gt_pch_nx_call_site_record_d (void *);



extern void gt_pch_nx_vec_uchar_va_gc_ (void *);



extern void gt_pch_nx_vec_call_site_record_va_gc_ (void *);



extern void gt_pch_nx_gimple_df (void *);



extern void gt_pch_nx_dw_fde_node (void *);



extern void gt_pch_nx_rtx_constant_pool (void *);



extern void gt_pch_nx_frame_space (void *);



extern void gt_pch_nx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_pch_nx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_pch_nx_stack_usage (void *);



extern void gt_pch_nx_eh_status (void *);



extern void gt_pch_nx_control_flow_graph (void *);



extern void gt_pch_nx_loops (void *);



extern void gt_pch_nx_language_function (void *);



extern void gt_pch_nx_hash_set_tree_ (void *);



extern void gt_pch_nx_types_used_by_vars_entry (void *);



extern void gt_pch_nx_hash_table_used_type_hasher_ (void *);



extern void gt_pch_nx_nb_iter_bound (void *);



extern void gt_pch_nx_loop_exit (void *);



extern void gt_pch_nx_loop (void *);



extern void gt_pch_nx_control_iv (void *);



extern void gt_pch_nx_vec_loop_p_va_gc_ (void *);



extern void gt_pch_nx_niter_desc (void *);



extern void gt_pch_nx_hash_table_loop_exit_hasher_ (void *);



extern void gt_pch_nx_vec_basic_block_va_gc_ (void *);



extern void gt_pch_nx_rtl_bb_info (void *);



extern void gt_pch_nx_vec_edge_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_pch_nx_section_hash_entry (void *);



extern void gt_pch_nx_lto_file_decl_data (void *);



extern void gt_pch_nx_ipa_replace_map (void *);



extern void gt_pch_nx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_pch_nx_ipa_param_adjustments (void *);



extern void gt_pch_nx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_pch_nx_cgraph_simd_clone (void *);



extern void gt_pch_nx_cgraph_function_version_info (void *);



extern void gt_pch_nx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_pch_nx_cgraph_indirect_call_info (void *);



extern void gt_pch_nx_asm_node (void *);



extern void gt_pch_nx_symbol_table (void *);



extern void gt_pch_nx_hash_table_section_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_asmname_hasher_ (void *);



extern void gt_pch_nx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_pch_nx_constant_descriptor_tree (void *);



extern void gt_pch_nx_hash_map_alias_set_hash_int_ (void *);



extern void gt_pch_nx_alias_set_entry (void *);



extern void gt_pch_nx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_pch_nx_hash_table_function_version_hasher_ (void *);



extern void gt_pch_nx_lto_in_decl_state (void *);



extern void gt_pch_nx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_pch_nx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_pch_nx_ipa_node_params (void *);



extern void gt_pch_nx_ipa_edge_args (void *);



extern void gt_pch_nx_ipa_agg_replacement_value (void *);



extern void gt_pch_nx_ipa_fn_summary (void *);



extern void gt_pch_nx_odr_type_d (void *);



extern void gt_pch_nx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_pch_nx_param_access (void *);



extern void gt_pch_nx_vec_param_access__va_gc_ (void *);



extern void gt_pch_nx_isra_func_summary (void *);



extern void gt_pch_nx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_pch_nx_ipa_sra_function_summaries (void *);



extern void gt_pch_nx_typeinfo (void *);



extern void gt_pch_nx_dw_cfi_node (void *);



extern void gt_pch_nx_dw_loc_descr_node (void *);



extern void gt_pch_nx_dw_loc_list_struct (void *);



extern void gt_pch_nx_dw_discr_list_node (void *);



extern void gt_pch_nx_dw_cfa_location (void *);



extern void gt_pch_nx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_pch_nx_addr_table_entry (void *);



extern void gt_pch_nx_indirect_string_node (void *);



extern void gt_pch_nx_dwarf_file_data (void *);



extern void gt_pch_nx_hash_map_char__tree_ (void *);



extern void gt_pch_nx_dw_cfi_row (void *);



extern void gt_pch_nx_reg_saved_in_data (void *);



extern void gt_pch_nx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_pch_nx_hash_table_indirect_string_hasher_ (void *);



extern void gt_pch_nx_comdat_type_node (void *);



extern void gt_pch_nx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_pch_nx_dw_line_info_table (void *);



extern void gt_pch_nx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_pch_nx_limbo_die_struct (void *);



extern void gt_pch_nx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_die_hasher_ (void *);



extern void gt_pch_nx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_pch_nx_variable_value_struct (void *);



extern void gt_pch_nx_hash_table_variable_value_hasher_ (void *);



extern void gt_pch_nx_hash_table_block_die_hasher_ (void *);



extern void gt_pch_nx_var_loc_node (void *);



extern void gt_pch_nx_var_loc_list_def (void *);



extern void gt_pch_nx_call_arg_loc_node (void *);



extern void gt_pch_nx_hash_table_decl_loc_hasher_ (void *);



extern void gt_pch_nx_cached_dw_loc_list_def (void *);



extern void gt_pch_nx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_pch_nx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_pch_nx_vec_pubname_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_pch_nx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_hash_table_addr_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_pch_nx_inline_entry_data (void *);



extern void gt_pch_nx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_pch_nx_temp_slot (void *);



extern void gt_pch_nx_initial_value_struct (void *);



extern void gt_pch_nx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_pch_nx_hash_table_const_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_reg_attr_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_double_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_fixed_hasher_ (void *);



extern void gt_pch_nx_eh_region_d (void *);



extern void gt_pch_nx_eh_landing_pad_d (void *);



extern void gt_pch_nx_eh_catch_d (void *);



extern void gt_pch_nx_vec_eh_region_va_gc_ (void *);



extern void gt_pch_nx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_pch_nx_hash_map_gimple__int_ (void *);



extern void gt_pch_nx_hash_table_insn_cache_hasher_ (void *);



extern void gt_pch_nx_temp_slot_address_entry (void *);



extern void gt_pch_nx_hash_table_temp_address_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_hash_tree_ (void *);



extern void gt_pch_nx_test_struct (void *);



extern void gt_pch_nx_test_of_length (void *);



extern void gt_pch_nx_test_other (void *);



extern void gt_pch_nx_test_of_union (void *);



extern void gt_pch_nx_example_base (void *);



extern void gt_pch_nx_test_node (void *);



extern void gt_pch_nx_user_struct (void *);



extern void gt_pch_nx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_pch_nx_string_pool_data (void *);



extern void gt_pch_nx_type_hash (void *);



extern void gt_pch_nx_hash_table_type_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_cl_option_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_section_hasher_ (void *);



extern void gt_pch_nx_hash_table_object_block_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_clone_hasher_ (void *);



extern void gt_pch_nx_tm_restart_node (void *);



extern void gt_pch_nx_hash_map_tree_tree_ (void *);



extern void gt_pch_nx_hash_table_ssa_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_restart_hasher_ (void *);



extern void gt_pch_nx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_pch_nx_scev_info_str (void *);



extern void gt_pch_nx_hash_table_scev_info_hasher_ (void *);



extern void gt_pch_nx_ssa_operand_memory_d (void *);



extern void gt_pch_nx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_pch_nx_omp_declare_variant_base_entry (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_pch_nx_hash_table_dllimport_hasher_ (void *);



extern void gt_pch_nx_hash_map_char__unsigned_ (void *);



extern void gt_pch_nx_vec_gimple__va_gc_ (void *);



extern void gt_pch_nx_int_range_1_ (void *);



extern void gt_pch_nx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_pch_nx_ipa_bits (void *);



extern void gt_pch_nx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_bits__va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_vr_va_gc_ (void *);



extern void gt_pch_nx_ipcp_transformation (void *);



extern void gt_pch_nx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_pch_nx_ipa_node_params_t (void *);



extern void gt_pch_nx_ipa_edge_args_sum_t (void *);



extern void gt_pch_nx_function_summary_ipcp_transformation__ (void *);



extern void gt_pch_nx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_state_hasher_ (void *);



extern void gt_pch_nx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_pch_nx_vec_condition_va_gc_ (void *);



extern void gt_pch_nx_vec_size_time_entry_va_gc_ (void *);



extern void gt_pch_nx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_pch_nx_tree_type_map (void *);



extern void gt_pch_nx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_pch_nx_vec_odr_type_va_gc_ (void *);



extern void gt_pch_nx_hash_table_value_annotation_hasher_ (void *);



extern void gt_pch_nx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_pch_nx_tree_entity_vec_map (void *);



extern void gt_pch_nx_hash_table_dummy_type_hasher_ (void *);



extern void gt_pch_nx_parm_attr_d (void *);



extern void gt_pch_nx_vec_parm_attr_va_gc_ (void *);



extern void gt_pch_nx_stmt_group (void *);



extern void gt_pch_nx_elab_info (void *);



extern void gt_pch_nx_range_check_info_d (void *);



extern void gt_pch_nx_vec_range_check_info_va_gc_ (void *);



extern void gt_pch_nx_loop_info_d (void *);



extern void gt_pch_nx_vec_loop_info_va_gc_ (void *);



extern void gt_pch_nx_gnat_binding_level (void *);



extern void gt_pch_nx_packable_type_hash (void *);



extern void gt_pch_nx_hash_table_packable_type_hasher_ (void *);



extern void gt_pch_nx_pad_type_hash (void *);



extern void gt_pch_nx_hash_table_pad_type_hasher_ (void *);



extern void gt_pch_nx_c_label_vars (void *);



extern void gt_pch_nx_c_binding (void *);



extern void gt_pch_nx_c_scope (void *);



extern void gt_pch_nx_c_goto_bindings (void *);



extern void gt_pch_nx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_pch_nx_c_inline_static (void *);



extern void gt_pch_nx_sorted_fields_type (void *);



extern void gt_pch_nx_vec_const_char_p_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_pch_nx_align_stack (void *);



extern void gt_pch_nx_vec_pending_weak_va_gc_ (void *);



extern void gt_pch_nx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_pch_nx_opt_stack (void *);



extern void gt_pch_nx_c_parser (void *);



extern void gt_pch_nx_vec_c_token_va_gc_ (void *);



extern void gt_pch_nx_binding_table_s (void *);



extern void gt_pch_nx_binding_entry_s (void *);



extern void gt_pch_nx_cxx_binding (void *);



extern void gt_pch_nx_cp_binding_level (void *);



extern void gt_pch_nx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_pch_nx_cp_token_cache (void *);



extern void gt_pch_nx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_pch_nx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_pch_nx_saved_scope (void *);



extern void gt_pch_nx_cxx_int_tree_map (void *);



extern void gt_pch_nx_named_label_entry (void *);



extern void gt_pch_nx_hash_table_named_label_hash_ (void *);



extern void gt_pch_nx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_pch_nx_tree_pair_s (void *);



extern void gt_pch_nx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_pch_nx_hash_table_named_decl_hash_ (void *);



extern void gt_pch_nx_tinst_level (void *);



extern void gt_pch_nx_tree_check (void *);



extern void gt_pch_nx_vec_cp_token_va_gc_ (void *);



extern void gt_pch_nx_cp_lexer (void *);



extern void gt_pch_nx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser_context (void *);



extern void gt_pch_nx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser (void *);



extern void gt_pch_nx_hash_map_tree_int_ (void *);



extern void gt_pch_nx_constexpr_fundef (void *);



extern void gt_pch_nx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_pch_nx_constexpr_call (void *);



extern void gt_pch_nx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_pch_nx_sat_entry (void *);



extern void gt_pch_nx_hash_table_sat_hasher_ (void *);



extern void gt_pch_nx_coroutine_info (void *);



extern void gt_pch_nx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_pch_nx_source_location_table_entry (void *);



extern void gt_pch_nx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_pch_nx_named_label_use_entry (void *);



extern void gt_pch_nx_vec_incomplete_var_va_gc_ (void *);



extern void gt_pch_nx_hash_table_typename_hasher_ (void *);



extern void gt_pch_nx_hash_table_mangled_decl_hash_ (void *);



extern void gt_pch_nx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_int_va_gc_ (void *);



extern void gt_pch_nx_hash_table_conv_type_hasher_ (void *);



extern void gt_pch_nx_subsumption_entry (void *);



extern void gt_pch_nx_hash_table_subsumption_hasher_ (void *);



extern void gt_pch_nx_pending_template (void *);



extern void gt_pch_nx_spec_entry (void *);



extern void gt_pch_nx_hash_table_spec_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_pch_nx_vec_tinfo_s_va_gc_ (void *);



extern void gt_pch_nx_vec_deferred_access_va_gc_ (void *);



extern void gt_pch_nx_hash_table_cplus_array_hasher_ (void *);



extern void gt_pch_nx_hash_table_list_hasher_ (void *);



extern void gt_pch_nx_pending_abstract_type (void *);



extern void gt_pch_nx_hash_table_abstract_type_hasher_ (void *);



extern void gt_pch_nx_Statement (void *);



extern void gt_pch_nx_binding_level (void *);



extern void gt_pch_nx_d_label_use_entry (void *);



extern void gt_pch_nx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_pch_nx_hash_table_module_hasher_ (void *);



extern void gt_pch_nx_module_htab_entry (void *);



extern void gt_pch_nx_hash_table_module_decl_hasher_ (void *);



extern void gt_pch_nx_objc_map_private (void *);



extern void gt_pch_nx_hashed_entry (void *);



extern void gt_pch_nx_hashed_attribute (void *);



extern void gt_pch_nx_imp_entry (void *);



extern void gt_pch_nx_string_descriptor (void *);



extern void gt_pch_nx_hash_table_objc_string_hasher_ (void *);



extern void gt_pch_nx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_pch_nx_vec_msgref_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_ivarref_entry_va_gc_ (void *);





extern void gt_pch_p_9line_maps
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_token
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_macro
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13string_concat
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_concat_db
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_map_location_hash_string_concat__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11bitmap_head
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9rtvec_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_edge
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7section
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cl_target_option
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cl_optimization
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8edge_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15basic_block_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17stack_local_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16machine_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14bitmap_element
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34generic_wide_int_wide_int_storage_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13coverage_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9mem_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9reg_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12object_block
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14vec_rtx_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10real_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11fixed_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23constant_descriptor_rtx
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10target_rtl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cgraph_rtl_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_decl_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_type_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12ptr_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14range_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_constructor_elt_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_tree_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_decl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24tree_statement_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14target_globals
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14lang_tree_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_decl_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_int_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_alias_pair_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13libfunc_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_libfunc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15target_libfuncs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14sequence_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_rtx_insn__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18call_site_record_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16vec_uchar_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_call_site_record_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9gimple_df
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_fde_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17rtx_constant_pool
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11frame_space
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_callee_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_dalloc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11stack_usage
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18control_flow_graph
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_5loops
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17language_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14hash_set_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24types_used_by_vars_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_used_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13nb_iter_bound
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9loop_exit
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_4loop
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10control_iv
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_loop_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10niter_desc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_loop_exit_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_basic_block_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11rtl_bb_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_edge_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_ref_t_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18section_hash_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18lto_file_decl_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_replace_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ipa_replace_map__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21ipa_param_adjustments
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_ipa_param_performed_split_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cgraph_simd_clone
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28cgraph_function_version_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cgraph_edge_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25cgraph_indirect_call_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8asm_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12symbol_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_section_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_asmname_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_symtab_node__symbol_priority_map_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24constant_descriptor_tree
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_map_alias_set_hash_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15alias_set_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_alias_set_entry__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_function_version_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17lto_in_decl_state
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_ipa_bit_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_ipa_vr_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_node_params
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13ipa_edge_args
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25ipa_agg_replacement_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14ipa_fn_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10odr_type_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_ipa_adjusted_param_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12param_access
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_param_access__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17isra_func_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_isra_param_desc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26ipa_sra_function_summaries
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8typeinfo
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_cfi_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17dw_loc_descr_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_loc_list_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_discr_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dw_cfa_location
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_cfi_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16addr_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20indirect_string_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dwarf_file_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20hash_map_char__tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10dw_cfi_row
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17reg_saved_in_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_fde_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_indirect_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16comdat_type_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_line_info_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_line_info_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_dw_attr_node_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16limbo_die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dwarf_file_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_die_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21variable_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_variable_value_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_block_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12var_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16var_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17call_arg_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_loc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22cached_dw_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_dw_loc_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30vec_dw_line_info_table__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_pubname_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_macinfo_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_dw_ranges_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_ranges_by_label_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_die_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_addr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_map_tree_sym_off_pair_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17inline_entry_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36hash_table_inline_entry_data_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9temp_slot
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20initial_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_temp_slot_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_const_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_wide_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_poly_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_reg_attr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_const_double_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_const_fixed_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11eh_region_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16eh_landing_pad_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10eh_catch_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_eh_region_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_eh_landing_pad_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21hash_map_gimple__int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_insn_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23temp_slot_address_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_temp_address_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_tree_hash_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11test_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14test_of_length
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10test_other
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13test_of_union
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9test_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11user_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_libfunc_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_pool_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_type_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_poly_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_cl_option_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_decl_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_37hash_table_tree_vec_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_section_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_object_block_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_tree_descriptor_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_rtx_desc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_tm_clone_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15tm_restart_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19hash_map_tree_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_ssa_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_restart_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_mem_addr_template_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13scev_info_str
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_scev_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20ssa_operand_memory_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_omp_declare_variant_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30omp_declare_variant_base_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_omp_declare_variant_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_table_omp_declare_variant_alt_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_dllimport_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_char__unsigned_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_gimple__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12int_range_1_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_ipa_agg_jf_item_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8ipa_bits
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_ipa_param_descriptor_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_bits__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_ipa_vr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipcp_transformation
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ipa_jump_func_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_39vec_ipa_polymorphic_call_context_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17ipa_node_params_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipa_edge_args_sum_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38function_summary_ipcp_transformation__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_wrapper_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_decl_state_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_expr_eval_op_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_condition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_size_time_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44fast_function_summary_ipa_fn_summary__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_type_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_type_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_odr_type_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_value_annotation_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_Entity_Id_va_gc_atomic_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19tree_entity_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dummy_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11parm_attr_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_parm_attr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10stmt_group
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9elab_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18range_check_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_range_check_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11loop_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_loop_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18gnat_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18packable_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_packable_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13pad_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_pad_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12c_label_vars
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9c_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7c_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_goto_bindings
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_c_goto_bindings_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_inline_static
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18sorted_fields_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_const_char_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_gc_vec_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11align_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_pending_weak_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_pending_redefinition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9opt_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8c_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_c_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_table_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_entry_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cxx_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cp_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_cp_class_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14cp_token_cache
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32vec_deferred_access_check_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_cxx_saved_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11saved_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cxx_int_tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17named_label_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_named_label_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_cxx_int_tree_map_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tree_pair_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_pair_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_named_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tinst_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10tree_check
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_cp_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8cp_lexer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_cp_default_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cp_parser_context
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38vec_cp_unparsed_functions_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cp_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18hash_map_tree_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16constexpr_fundef
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_constexpr_fundef_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14constexpr_call
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_constexpr_call_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9sat_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22hash_table_sat_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14coroutine_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_coroutine_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27source_location_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44hash_table_source_location_table_entry_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21named_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_incomplete_var_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_typename_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_mangled_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_pending_noexcept_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_tree_int_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_conv_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17subsumption_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_subsumption_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16pending_template
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10spec_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_spec_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_map_tree_tree_pair_p_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_tinfo_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_deferred_access_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cplus_array_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21pending_abstract_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_abstract_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9Statement
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17d_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_map_Statement__d_label_entry_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25hash_table_module_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17module_htab_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_module_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16objc_map_private
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12hashed_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16hashed_attribute
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9imp_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17string_descriptor
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_objc_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ident_data_tuple_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_msgref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_prot_list_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ivarref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 2




typedef void (*gt_note_pointers) (void *, void *, gt_pointer_operator,
      void *);






typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,
       void *);


extern int gt_pch_note_object (void *, void *, gt_note_pointers);



extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);


extern void gt_clear_caches ();


typedef void (*gt_pointer_walker) (void *);



struct ggc_root_tab {
  void *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
};


extern const struct ggc_root_tab * const gt_ggc_rtab[];
extern const struct ggc_root_tab * const gt_ggc_deletable_rtab[];
extern const struct ggc_root_tab * const gt_pch_scalar_rtab[];
# 91 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
extern int ggc_set_mark (const void *);




extern int ggc_marked_p (const void *);


extern void gt_pch_n_S (const void *);
extern void gt_ggc_m_S (const void *);




extern void init_stringpool (void);


extern void init_ggc (void);





extern bool ggc_protect_identifiers;


extern void gt_pch_save (FILE *f);





extern void *ggc_internal_alloc (size_t, void (*)(void *), size_t,
     size_t )
     __attribute__ ((__malloc__));

inline void *
ggc_internal_alloc (size_t s )
{
  return ggc_internal_alloc (s, nullptr, 0, 1 );
}

extern size_t ggc_round_alloc_size (size_t requested_size);


extern void *ggc_internal_cleared_alloc (size_t, void (*)(void *),
      size_t, size_t
      ) __attribute__ ((__malloc__));

inline void *
ggc_internal_cleared_alloc (size_t s )
{
  return ggc_internal_cleared_alloc (s, nullptr, 0, 1 );
}


extern void *ggc_realloc (void *, size_t );


extern void ggc_free (void *);

extern void dump_ggc_loc_statistics ();





template<typename T>
void
finalize (void *p)
{
  static_cast<T *> (p)->~T ();
}

template<typename T>
inline bool
need_finalization_p ()
{

  return !__has_trivial_destructor (T);



}

template<typename T>
inline T *
ggc_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), finalize<T>, 0, 1
       ));
  else
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
       ));
}





template<typename T>
inline T *
ggc_alloc_no_dtor ()
{
  return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
            ));
}

template<typename T>
inline T *
ggc_cleared_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T),
        finalize<T>, 0, 1
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T), nullptr, 0, 1
        ));
}

template<typename T>
inline T *
ggc_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), finalize<T>,
       sizeof (T), c ));
  else
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), nullptr, 0, 0
       ));
}

template<typename T>
inline T *
ggc_cleared_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T),
        finalize<T>,
        sizeof (T), c
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T), nullptr,
        0, 0 ));
}

inline void *
ggc_alloc_atomic (size_t s )
{
    return ggc_internal_alloc (s );
}



template <typename T>
inline void
ggc_delete (T *ptr)
{
  ptr->~T ();
  ggc_free (ptr);
}




extern const char *ggc_alloc_string (const char *contents, int length
                                     );






extern void ggc_collect (void);


extern void ggc_trim (void);


extern void ggc_grow (void);



extern void ggc_register_root_tab (const struct ggc_root_tab *);


extern void gt_pch_restore (FILE *f);




extern void ggc_print_statistics (void);

extern void stringpool_statistics (void);


extern void init_ggc_heuristics (void);


extern void report_heap_memory_use (void);







inline struct rtx_def *
ggc_alloc_rtx_def_stat (size_t s )
{
  return (struct rtx_def *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_cleared_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_cleared_alloc (s );
}

inline gimple *
ggc_alloc_cleared_gimple_statement_stat (size_t s )
{
  return (gimple *) ggc_internal_cleared_alloc (s );
}

inline void
gt_ggc_mx (const char *s)
{
  ((const_cast<char *> (s)) != nullptr && ((void *) (const_cast<char *> (s))) != (void *) 1 && ! ggc_set_mark (const_cast<char *> (s)));
}

inline void
gt_pch_nx (const char *)
{
}

inline void
gt_ggc_mx (int)
{
}

inline void
gt_pch_nx (int)
{
}

inline void
gt_pch_nx (unsigned int)
{
}
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void ggc_free (void *);
extern size_t ggc_round_alloc_size (size_t requested_size);
extern void *ggc_realloc (void *, size_t );
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void dump_vec_loc_statistics (void);


extern htab_t vec_mem_usage_hash;




struct vec_prefix
{




  void register_overhead (void *, size_t, size_t );
  void release_overhead (void *, size_t, size_t, bool );
  static unsigned calculate_allocation (vec_prefix *, unsigned, bool);
  static unsigned calculate_allocation_1 (unsigned, unsigned);







  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;

  unsigned m_alloc : 31;
  unsigned m_using_auto_storage : 1;
  unsigned m_num;
};





inline unsigned
vec_prefix::calculate_allocation (vec_prefix *pfx, unsigned reserve,
      bool exact)
{
  if (exact)
    return (pfx ? pfx->m_num : 0) + reserve;
  else if (!pfx)
    return ((4) > (reserve) ? (4) : (reserve));
  return calculate_allocation_1 (pfx->m_alloc, pfx->m_num + reserve);
}

template<typename, typename, typename> struct vec;






struct vl_embed { };
struct vl_ptr { };
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
struct va_heap
{


  typedef vl_ptr default_layout;

  template<typename T>
  static void reserve (vec<T, va_heap, vl_embed> *&, unsigned, bool
         );

  template<typename T>
  static void release (vec<T, va_heap, vl_embed> *&);
};







template<typename T>
inline void
va_heap::reserve (vec<T, va_heap, vl_embed> *&v, unsigned reserve, bool exact
    )
{
  size_t elt_size = sizeof (T);
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  ((void)(!(alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 282, __FUNCTION__), 0 : 0));

  if (0 && v)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), false);

  size_t size = vec<T, va_heap, vl_embed>::embedded_size (alloc);
  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, va_heap, vl_embed> *> (xrealloc (v, size));
  v->embedded_init (alloc, nelem);

  if (0)
    v->m_vecpfx.register_overhead (v, alloc, elt_size );
}



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfree-nonheap-object"




template<typename T>
void
va_heap::release (vec<T, va_heap, vl_embed> *&v)
{
  size_t elt_size = sizeof (T);
  if (v == nullptr)
    return;

  if (0)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), true);
  ::free (v);
  v = nullptr;
}


#pragma GCC diagnostic pop





struct va_gc
{




  typedef vl_embed default_layout;

  template<typename T, typename A>
  static void reserve (vec<T, A, vl_embed> *&, unsigned, bool
         );

  template<typename T, typename A>
  static void release (vec<T, A, vl_embed> *&v);
};




template<typename T, typename A>
inline void
va_gc::release (vec<T, A, vl_embed> *&v)
{
  if (v)
    ::ggc_free (v);
  v = nullptr;
}







template<typename T, typename A>
void
va_gc::reserve (vec<T, A, vl_embed> *&v, unsigned reserve, bool exact
  )
{
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  if (!alloc)
    {
      ::ggc_free (v);
      v = nullptr;
      return;
    }


  size_t size = vec<T, A, vl_embed>::embedded_size (alloc);


  size = ::ggc_round_alloc_size (size);


  size_t vec_offset = sizeof (vec_prefix);
  size_t elt_size = sizeof (T);
  alloc = (size - vec_offset) / elt_size;


  size = vec_offset + alloc * elt_size;

  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, A, vl_embed> *> (::ggc_realloc (v, size
              ));
  v->embedded_init (alloc, nelem);
}





struct va_gc_atomic : va_gc
{
};
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T,
         typename A = va_heap,
         typename L = typename A::default_layout>
struct vec
{
};
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
void
debug_helper (vec<T> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc_unlocked ('\n', 
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
     stderr
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
     );
    }
}






template<typename T>
void
debug_helper (vec<T, va_gc> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc_unlocked ('\n', 
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
     stderr
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
     );
    }
}
# 501 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
inline void
vec_default_construct (T *dst, unsigned n)
{
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
  for ( ; n; ++dst, --n)
    ::new (static_cast<void*>(dst)) T ();
}



template <typename T>
inline void
vec_copy_construct (T *dst, const T *src, unsigned n)
{
  for ( ; n; ++dst, ++src, --n)
    ::new (static_cast<void*>(dst)) T (*src);
}







struct vnull
{
  template <typename T, typename A, typename L>
  constexpr operator vec<T, A, L> () { return vec<T, A, L>(); }
};
extern vnull vNULL;
# 574 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
struct vec<T, A, vl_embed>
{
public:
  unsigned allocated (void) const { return m_vecpfx.m_alloc; }
  unsigned length (void) const { return m_vecpfx.m_num; }
  bool is_empty (void) const { return m_vecpfx.m_num == 0; }
  T *address (void) { return m_vecdata; }
  const T *address (void) const { return m_vecdata; }
  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return address () + length (); }
  const T *end () const { return address () + length (); }
  const T &operator[] (unsigned) const;
  T &operator[] (unsigned);
  T &last (void);
  bool space (unsigned) const;
  bool iterate (unsigned, T *) const;
  bool iterate (unsigned, T **) const;
  vec *copy () const;
  void splice (const vec &);
  void splice (const vec *src);
  T *quick_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void quick_insert (unsigned, const T &);
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  static size_t embedded_size (unsigned);
  void embedded_init (unsigned, unsigned = 0, unsigned = 0);
  void quick_grow (unsigned len);
  void quick_grow_cleared (unsigned len);


  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;



  vec_prefix m_vecpfx;
  T m_vecdata[1];
};
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec_safe_space (const vec<T, A, vl_embed> *v, unsigned nelems)
{
  return v ? v->space (nelems) : nelems == 0;
}



template<typename T, typename A>
inline unsigned
vec_safe_length (const vec<T, A, vl_embed> *v)
{
  return v ? v->length () : 0;
}



template<typename T, typename A>
inline T *
vec_safe_address (vec<T, A, vl_embed> *v)
{
  return v ? v->address () : nullptr;
}



template<typename T, typename A>
inline bool
vec_safe_is_empty (vec<T, A, vl_embed> *v)
{
  return v ? v->is_empty () : true;
}



template<typename T, typename A>
inline bool
vec_safe_reserve (vec<T, A, vl_embed> *&v, unsigned nelems, bool exact = false
    )
{
  bool extend = nelems ? !vec_safe_space (v, nelems) : false;
  if (extend)
    A::reserve (v, nelems, exact );
  return extend;
}

template<typename T, typename A>
inline bool
vec_safe_reserve_exact (vec<T, A, vl_embed> *&v, unsigned nelems
   )
{
  return vec_safe_reserve (v, nelems, true );
}





template<typename T, typename A>
inline void
vec_alloc (vec<T, A, vl_embed> *&v, unsigned nelems )
{
  v = nullptr;
  vec_safe_reserve (v, nelems, false );
}




template<typename T, typename A>
inline void
vec_free (vec<T, A, vl_embed> *&v)
{
  A::release (v);
}



template<typename T, typename A>
inline void
vec_safe_grow (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  ((void)(!(len >= oldlen) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 729, __FUNCTION__), 0 : 0));
  vec_safe_reserve_exact (v, len - oldlen );
  v->quick_grow (len);
}



template<typename T, typename A>
inline void
vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  vec_safe_grow (v, len );
  vec_default_construct (v->address () + oldlen, len - oldlen);
}




template<typename T>
inline void
vec_safe_grow_cleared (vec<T, va_heap, vl_ptr> *&v,
         unsigned len )
{
  v->safe_grow_cleared (len );
}




template<typename T>
inline bool
vec_safe_reserve (vec<T, va_heap, vl_ptr> *&v, unsigned nelems, bool exact = false
    )
{
  return v->reserve (nelems, exact);
}



template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T **ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}

template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T *ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline T *
vec_safe_push (vec<T, A, vl_embed> *&v, const T &obj )
{
  vec_safe_reserve (v, 1, false );
  return v->quick_push (obj);
}




template<typename T, typename A>
inline void
vec_safe_insert (vec<T, A, vl_embed> *&v, unsigned ix, const T &obj
   )
{
  vec_safe_reserve (v, 1, false );
  v->quick_insert (ix, obj);
}



template<typename T, typename A>
inline void
vec_safe_truncate (vec<T, A, vl_embed> *v, unsigned size)
{
  if (v)
    v->truncate (size);
}



template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec_safe_copy (vec<T, A, vl_embed> *src )
{
  return src ? src->copy () : nullptr;
}



template<typename T, typename A>
inline void
vec_safe_splice (vec<T, A, vl_embed> *&dst, const vec<T, A, vl_embed> *src
   )
{
  unsigned src_len = vec_safe_length (src);
  if (src_len)
    {
      vec_safe_reserve_exact (dst, vec_safe_length (dst) + src_len
         );
      dst->splice (*src);
    }
}




template<typename T, typename A>
inline bool
vec_safe_contains (vec<T, A, vl_embed> *v, const T &search)
{
  return v ? v->contains (search) : false;
}




template<typename T, typename A>
inline const T &
vec<T, A, vl_embed>::operator[] (unsigned ix) const
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 870, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}

template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::operator[] (unsigned ix)
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 878, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::last (void)
{
  ((void)(!(m_vecpfx.m_num > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 889, __FUNCTION__), 0 : 0));
  return (*this)[m_vecpfx.m_num - 1];
}
# 900 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::space (unsigned nelems) const
{
  return m_vecpfx.m_alloc - m_vecpfx.m_num >= nelems;
}
# 915 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T *ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = m_vecdata[ix];
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}
# 941 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T **ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = (const_cast<T *> ((&m_vecdata[ix])));
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec<T, A, vl_embed>::copy (void) const
{
  vec<T, A, vl_embed> *new_vec = nullptr;
  unsigned len = length ();
  if (len)
    {
      vec_alloc (new_vec, len );
      new_vec->embedded_init (len, len);
      vec_copy_construct (new_vec->address (), m_vecdata, len);
    }
  return new_vec;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> &src)
{
  unsigned len = src.length ();
  if (len)
    {
      ((void)(!(space (len)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 986, __FUNCTION__), 0 : 0));
      vec_copy_construct (end (), src.address (), len);
      m_vecpfx.m_num += len;
    }
}

template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> *src)
{
  if (src)
    splice (*src);
}






template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::quick_push (const T &obj)
{
  ((void)(!(space (1)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1009, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[m_vecpfx.m_num++];
  *slot = obj;
  return slot;
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::pop (void)
{
  ((void)(!(length () > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1022, __FUNCTION__), 0 : 0));
  return m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::truncate (unsigned size)
{
  ((void)(!(length () >= size) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1034, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = size;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_insert (unsigned ix, const T &obj)
{
  ((void)(!(length () < allocated ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1046, __FUNCTION__), 0 : 0));
  ((void)(!(ix <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1047, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot + 1, slot, (m_vecpfx.m_num++ - ix) * sizeof (T));
  *slot = obj;
}






template<typename T, typename A>
inline void
vec<T, A, vl_embed>::ordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1062, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot, slot + 1, (--m_vecpfx.m_num - ix) * sizeof (T));
}
# 1105 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline void
vec<T, A, vl_embed>::unordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1109, __FUNCTION__), 0 : 0));
  m_vecdata[ix] = m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::block_remove (unsigned ix, unsigned len)
{
  ((void)(!(ix + len <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1121, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  m_vecpfx.m_num -= len;
  memmove (slot, slot + len, (m_vecpfx.m_num - ix) * sizeof (T));
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::qsort (int (*cmp) (const void *, const void *))
{
  if (length () > 1)
    gcc_qsort (address (), length (), sizeof (T), cmp);
}




template<typename T, typename A>
inline void
vec<T, A, vl_embed>::sort (int (*cmp) (const void *, const void *, void *),
      void *data)
{
  if (length () > 1)
    gcc_sort_r (address (), length (), sizeof (T), cmp, data);
}





template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *))
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *,
          void *), void *data)
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p, data);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::contains (const T &search) const
{
  unsigned int len = length ();
  for (unsigned int i = 0; i < len; i++)
    if ((*this)[i] == search)
      return true;

  return false;
}






template<typename T, typename A>
unsigned
vec<T, A, vl_embed>::lower_bound (T obj, bool (*lessthan)(const T &, const T &))
  const
{
  unsigned int len = length ();
  unsigned int half, middle;
  unsigned int first = 0;
  while (len > 0)
    {
      half = len / 2;
      middle = first;
      middle += half;
      T middle_elem = (*this)[middle];
      if (lessthan (middle_elem, obj))
 {
   first = middle;
   ++first;
   len = len - half - 1;
 }
      else
 len = half;
    }
  return first;
}
# 1280 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline size_t
vec<T, A, vl_embed>::embedded_size (unsigned alloc)
{
  struct alignas (T) U { char data[sizeof (T)]; };
  typedef vec<U, A, vl_embed> vec_embedded;
  typedef typename std::conditional<std::is_standard_layout<T>::value,
        vec, vec_embedded>::type vec_stdlayout;
  static_assert (sizeof (vec_stdlayout) == sizeof (vec), "");
  static_assert (alignof (vec_stdlayout) == alignof (vec), "");
  return 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        __builtin_offsetof (
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        vec_stdlayout
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        , 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        m_vecdata
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        ) 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                                            + alloc * sizeof (T);
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::embedded_init (unsigned alloc, unsigned num, unsigned aut)
{
  m_vecpfx.m_alloc = alloc;
  m_vecpfx.m_using_auto_storage = aut;
  m_vecpfx.m_num = num;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow (unsigned len)
{
  ((void)(!(length () <= len && len <= m_vecpfx.m_alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1314, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = len;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow_cleared (unsigned len)
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  quick_grow (len);
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}



template<typename T>
void
gt_ggc_mx (vec<T, va_gc> *v)
{
  extern void gt_ggc_mx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_ggc_mx ((*v)[i]);
}

template<typename T>
void
gt_ggc_mx (vec<T, va_gc_atomic, vl_embed> *v __attribute__ ((__unused__)))
{


}




template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v)
{
  extern void gt_pch_nx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx ((*v)[i]);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T *, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  for (unsigned i = 0; i < v->length (); i++)
    op (&((*v)[i]), cookie);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  extern void gt_pch_nx (T *, gt_pointer_operator, void *);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx (&((*v)[i]), op, cookie);
}
# 1410 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
struct vec<T, va_heap, vl_ptr>
{
public:


  void create (unsigned nelems );
  void release (void);


  bool exists (void) const
  { return m_vec != nullptr; }

  bool is_empty (void) const
  { return m_vec ? m_vec->is_empty () : true; }

  unsigned length (void) const
  { return m_vec ? m_vec->length () : 0; }

  T *address (void)
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  const T *address (void) const
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return begin () + length (); }
  const T *end () const { return begin () + length (); }
  const T &operator[] (unsigned ix) const
  { return (*m_vec)[ix]; }

  bool operator!=(const vec &other) const
  { return !(*this == other); }

  bool operator==(const vec &other) const
  { return address () == other.address (); }

  T &operator[] (unsigned ix)
  { return (*m_vec)[ix]; }

  T &last (void)
  { return m_vec->last (); }

  bool space (int nelems) const
  { return m_vec ? m_vec->space (nelems) : nelems == 0; }

  bool iterate (unsigned ix, T *p) const;
  bool iterate (unsigned ix, T **p) const;
  vec copy () const;
  bool reserve (unsigned, bool = false );
  bool reserve_exact (unsigned );
  void splice (const vec &);
  void safe_splice (const vec & );
  T *quick_push (const T &);
  T *safe_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void safe_grow (unsigned );
  void safe_grow_cleared (unsigned );
  void quick_grow (unsigned);
  void quick_grow_cleared (unsigned);
  void quick_insert (unsigned, const T &);
  void safe_insert (unsigned, const T & );
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  void reverse (void);

  bool using_auto_storage () const;



  vec<T, va_heap, vl_embed> *m_vec;
};
# 1500 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, size_t N = 0>
class auto_vec : public vec<T, va_heap>
{
public:
  auto_vec ()
  {
    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  auto_vec (size_t s)
  {
    if (s > N)
      {
 this->create (s);
 return;
      }

    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  ~auto_vec ()
  {
    this->release ();
  }

private:
  vec<T, va_heap, vl_embed> m_auto;
  T m_data[((N - 1) > (1) ? (N - 1) : (1))];
};



template<typename T>
class auto_vec<T, 0> : public vec<T, va_heap>
{
public:
  auto_vec () { this->m_vec = nullptr; }
  auto_vec (size_t n) { this->create (n); }
  ~auto_vec () { this->release (); }
};






template<typename T>
inline void
vec_alloc (vec<T> *&v, unsigned nelems )
{
  v = new vec<T>;
  v->create (nelems );
}





class auto_string_vec : public auto_vec <char *>
{
 public:
  ~auto_string_vec ();
};
# 1578 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
class auto_delete_vec : public auto_vec <T *>
{
 public:
  auto_delete_vec () {}
  auto_delete_vec (size_t s) : auto_vec <T *> (s) {}

  ~auto_delete_vec ();

private:
  auto_delete_vec<T> (const auto_delete_vec<T>&) = delete; void operator= (const auto_delete_vec<T> &) = delete;
};



template<typename T>
inline void
vec_check_alloc (vec<T, va_heap> *&vec, unsigned nelems )
{
  if (!vec)
    vec_alloc (vec, nelems );
}




template<typename T>
inline void
vec_free (vec<T> *&v)
{
  if (v == nullptr)
    return;

  v->release ();
  delete v;
  v = nullptr;
}
# 1624 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T *ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1647 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T **ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1686 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
inline
auto_string_vec::~auto_string_vec ()
{
  int i;
  char *str;
  for (i = 0; (*this).iterate ((i), &(str)); ++(i))
    free (str);
}




template <typename T>
inline
auto_delete_vec<T>::~auto_delete_vec ()
{
  int i;
  T *item;
  for (i = 0; (*this).iterate ((i), &(item)); ++(i))
    delete item;
}




template<typename T>
inline vec<T, va_heap, vl_ptr>
vec<T, va_heap, vl_ptr>::copy (void) const
{
  vec<T, va_heap, vl_ptr> new_vec = vNULL;
  if (length ())
    new_vec.m_vec = m_vec->copy ();
  return new_vec;
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve (unsigned nelems, bool exact )
{
  if (space (nelems))
    return false;




  vec<T, va_heap, vl_embed> *oldvec = m_vec;
  unsigned int oldsize = 0;
  bool handle_auto_vec = m_vec && using_auto_storage ();
  if (handle_auto_vec)
    {
      m_vec = nullptr;
      oldsize = oldvec->length ();
      nelems += oldsize;
    }

  va_heap::reserve (m_vec, nelems, exact );
  if (handle_auto_vec)
    {
      vec_copy_construct (m_vec->address (), oldvec->address (), oldsize);
      m_vec->m_vecpfx.m_num = oldsize;
    }

  return true;
}







template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve_exact (unsigned nelems )
{
  return reserve (nelems, true );
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::create (unsigned nelems )
{
  m_vec = nullptr;
  if (nelems > 0)
    reserve_exact (nelems );
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::release (void)
{
  if (!m_vec)
    return;

  if (using_auto_storage ())
    {
      m_vec->m_vecpfx.m_num = 0;
      return;
    }

  va_heap::release (m_vec);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::splice (const vec<T, va_heap, vl_ptr> &src)
{
  if (src.length ())
    m_vec->splice (*(src.m_vec));
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_splice (const vec<T, va_heap, vl_ptr> &src
          )
{
  if (src.length ())
    {
      reserve_exact (src.length ());
      splice (src);
    }
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::quick_push (const T &obj)
{
  return m_vec->quick_push (obj);
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::safe_push (const T &obj )
{
  reserve (1, false );
  return quick_push (obj);
}




template<typename T>
inline T &
vec<T, va_heap, vl_ptr>::pop (void)
{
  return m_vec->pop ();
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::truncate (unsigned size)
{
  if (m_vec)
    m_vec->truncate (size);
  else
    ((void)(!(size == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1885, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow (unsigned len )
{
  unsigned oldlen = length ();
  ((void)(!(oldlen <= len) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1898, __FUNCTION__), 0 : 0));
  reserve_exact (len - oldlen );
  if (m_vec)
    m_vec->quick_grow (len);
  else
    ((void)(!(len == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1903, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow_cleared (unsigned len )
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  safe_grow (len );
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1930, __FUNCTION__), 0 : 0));
  m_vec->quick_grow (len);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow_cleared (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1943, __FUNCTION__), 0 : 0));
  m_vec->quick_grow_cleared (len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_insert (unsigned ix, const T &obj)
{
  m_vec->quick_insert (ix, obj);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_insert (unsigned ix, const T &obj )
{
  reserve (1, false );
  quick_insert (ix, obj);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::ordered_remove (unsigned ix)
{
  m_vec->ordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::unordered_remove (unsigned ix)
{
  m_vec->unordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::block_remove (unsigned ix, unsigned len)
{
  m_vec->block_remove (ix, len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::qsort (int (*cmp) (const void *, const void *))
{
  if (m_vec)
    m_vec->qsort (cmp);
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::sort (int (*cmp) (const void *, const void *,
        void *), void *data)
{
  if (m_vec)
    m_vec->sort (cmp, data);
}





template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *))
{
  if (m_vec)
    return m_vec->bsearch (key, cmp);
  return nullptr;
}




template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *,
           void *), void *data)
{
  if (m_vec)
    return m_vec->bsearch (key, cmp, data);
  return nullptr;
}







template<typename T>
inline unsigned
vec<T, va_heap, vl_ptr>::lower_bound (T obj,
          bool (*lessthan)(const T &, const T &))
    const
{
  return m_vec ? m_vec->lower_bound (obj, lessthan) : 0;
}




template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::contains (const T &search) const
{
  return m_vec ? m_vec->contains (search) : false;
}



template<typename T>
inline void
vec<T, va_heap, vl_ptr>::reverse (void)
{
  unsigned l = length ();
  T *ptr = address ();

  for (unsigned i = 0; i < l / 2; i++)
    std::swap (ptr[i], ptr[l - i - 1]);
}

template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::using_auto_storage () const
{
  return m_vec->m_vecpfx.m_using_auto_storage;
}



template<typename T>
inline void
release_vec_vec (vec<vec<T> > &vec)
{
  for (unsigned i = 0; i < vec.length (); i++)
    vec[i].release ();

  vec.release ();
}


        
# 249 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 250 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
hashval_t iterative_hash_host_wide_int (long, hashval_t);
hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);

namespace inchash
{

class hash
{
 public:


  hash (hashval_t seed = 0)
  {
    val = seed;
    bits = 0;
  }


  hashval_t end ()
  {
    return val;
  }


  void add_int (unsigned v)
  {
    val = iterative_hash_hashval_t (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_int (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_int (v.coeffs[i]);
  }


  void add_hwi (long v)
  {
    val = iterative_hash_host_wide_int (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_hwi (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_hwi (v.coeffs[i]);
  }


  template<typename T>
  void add_wide_int (const generic_wide_int<T> &x)
  {
    add_int (x.get_len ());
    for (unsigned i = 0; i < x.get_len (); i++)
      add_hwi (x.sext_elt (i));
  }


  void add_ptr (const void *ptr)
  {
    add (&ptr, sizeof (ptr));
  }


  void add (const void *data, size_t len)
  {
    val = iterative_hash (data, len, val);
  }


  void merge_hash (hashval_t other)
  {
    val = iterative_hash_hashval_t (other, val);
  }


  void merge (hash &other)
  {
    merge_hash (other.val);
  }

  template<class T> void add_object(T &obj)
  {
    add (&obj, sizeof(T));
  }



  void add_flag (bool flag)
  {
    bits = (bits << 1) | flag;
  }

  void commit_flag ()
  {
    add_int (bits);
    bits = 0;
  }





  void add_commutative (hash &a, hash &b)
  {
    if (a.end() > b.end())
      {
 merge (b);
 merge (a);
      }
    else
      {
 merge (a);
 merge (b);
      }
  }

 private:
  hashval_t val;
  unsigned bits;
};

}
# 174 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
inline
hashval_t
iterative_hash_hashval_t (hashval_t val, hashval_t val2)
{

  hashval_t a = 0x9e3779b9;

  { a -= val; a -= val2; a ^= (val2>>13); val -= val2; val -= a; val ^= (a<< 8); val2 -= a; val2 -= val; val2 ^= ((val&0xffffffff)>>13); a -= val; a -= val2; a ^= ((val2&0xffffffff)>>12); val -= val2; val -= a; val = (val ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>> 5)) & 0xffffffff; a -= val; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; val -= val2; val -= a; val = (val ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>>15)) & 0xffffffff; };
  return val2;
}



inline
hashval_t
iterative_hash_host_wide_int (long val, hashval_t val2)
{
  if (sizeof (long) == sizeof (hashval_t))
    return iterative_hash_hashval_t (val, val2);
  else
    {
      hashval_t a = (hashval_t) val;


      int zero = 0;
      hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 8 + zero));
      { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
      if (sizeof (long) > 2 * sizeof (hashval_t))
 {
   hashval_t a = (hashval_t) (val >> (sizeof (hashval_t) * 16 + zero));
   hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 24 + zero));
   { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
 }
      return val2;
    }
}
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h"
enum mem_alloc_origin
{
  HASH_TABLE_ORIGIN,
  HASH_MAP_ORIGIN,
  HASH_SET_ORIGIN,
  VEC_ORIGIN,
  BITMAP_ORIGIN,
  GGC_ORIGIN,
  ALLOC_POOL_ORIGIN,
  MEM_ALLOC_ORIGIN_LENGTH
};


static const char * mem_alloc_origin_names[] = { "Hash tables", "Hash maps",
  "Hash sets", "Heap vectors", "Bitmaps", "GGC memory", "Allocation pool" };
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h"
template <typename Type>
struct typed_free_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_free_remove <Type>::remove (Type *p)
{
  free (p);
}



template <typename Type>
struct typed_delete_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_delete_remove <Type>::remove (Type *p)
{
  delete p;
}



template <typename Type>
struct typed_noop_remove
{
  static inline void remove (Type &);
};




template <typename Type>
inline void
typed_noop_remove <Type>::remove (Type &)
{
}







template <typename Type, Type Empty, Type Deleted = Empty>
struct int_hash : typed_noop_remove <Type>
{
  typedef Type value_type;
  typedef Type compare_type;

  static inline hashval_t hash (value_type);
  static inline bool equal (value_type existing, value_type candidate);
  static inline void mark_deleted (Type &);
  static const bool empty_zero_p = Empty == 0;
  static inline void mark_empty (Type &);
  static inline bool is_deleted (Type);
  static inline bool is_empty (Type);
};

template <typename Type, Type Empty, Type Deleted>
inline hashval_t
int_hash <Type, Empty, Deleted>::hash (value_type x)
{
  return x;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::equal (value_type x, value_type y)
{
  return x == y;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_deleted (Type &x)
{
  ((void)(!(Empty != Deleted) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h", 115, __FUNCTION__), 0 : 0));
  x = Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_empty (Type &x)
{
  x = Empty;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_deleted (Type x)
{
  return Empty != Deleted && x == Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_empty (Type x)
{
  return x == Empty;
}





template <typename Type>
struct pointer_hash
{
  typedef Type *value_type;
  typedef Type *compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &existing,
       const compare_type &candidate);
  static inline void mark_deleted (Type *&);
  static const bool empty_zero_p = true;
  static inline void mark_empty (Type *&);
  static inline bool is_deleted (Type *);
  static inline bool is_empty (Type *);
};

template <typename Type>
inline hashval_t
pointer_hash <Type>::hash (const value_type &candidate)
{


  return (hashval_t) ((intptr_t)candidate >> 3);
}

template <typename Type>
inline bool
pointer_hash <Type>::equal (const value_type &existing,
      const compare_type &candidate)
{
  return existing == candidate;
}

template <typename Type>
inline void
pointer_hash <Type>::mark_deleted (Type *&e)
{
  e = reinterpret_cast<Type *> (1);
}

template <typename Type>
inline void
pointer_hash <Type>::mark_empty (Type *&e)
{
  e = nullptr;
}

template <typename Type>
inline bool
pointer_hash <Type>::is_deleted (Type *e)
{
  return e == reinterpret_cast<Type *> (1);
}

template <typename Type>
inline bool
pointer_hash <Type>::is_empty (Type *e)
{
  return e == nullptr;
}




struct string_hash : pointer_hash <const char>
{
  static inline hashval_t hash (const char *);
  static inline bool equal (const char *, const char *);
};

inline hashval_t
string_hash::hash (const char *id)
{
  return htab_hash_string (id);
}

inline bool
string_hash::equal (const char *id1, const char *id2)
{
  return strcmp (id1, id2) == 0;
}



template<typename T>
struct ggc_remove
{
  static void remove (T &) {}

  static void
  ggc_mx (T &p)
  {
    extern void gt_ggc_mx (T &);
    gt_ggc_mx (p);
  }


  static void
  ggc_maybe_mx (T &p)
  {
    ggc_mx (p);
  }

  static void
  pch_nx (T &p)
  {
    extern void gt_pch_nx (T &);
    gt_pch_nx (p);
  }

  static void
  pch_nx (T &p, gt_pointer_operator op, void *cookie)
  {
    op (&p, cookie);
  }
};




template<typename T>
struct ggc_cache_remove : ggc_remove<T>
{

  static void ggc_maybe_mx (T &) {}

  static int
  keep_cache_entry (T &e)
  {
    return ggc_marked_p (e) ? -1 : 0;
  }
};




template <typename T>
struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T *> {};




template <typename T>
struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};




template <typename T>
struct delete_ptr_hash : pointer_hash <T>, typed_delete_remove <T> {};




template <typename T>
struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};





template <typename T>
struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};




struct nofree_string_hash : string_hash, typed_noop_remove <const char *> {};




template <typename T1, typename T2>
struct pair_hash
{
  typedef std::pair <typename T1::value_type,
       typename T2::value_type> value_type;
  typedef std::pair <typename T1::compare_type,
       typename T2::compare_type> compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &, const compare_type &);
  static inline void remove (value_type &);
  static inline void mark_deleted (value_type &);
  static const bool empty_zero_p = T1::empty_zero_p;
  static inline void mark_empty (value_type &);
  static inline bool is_deleted (const value_type &);
  static inline bool is_empty (const value_type &);
};

template <typename T1, typename T2>
inline hashval_t
pair_hash <T1, T2>::hash (const value_type &x)
{
  return iterative_hash_hashval_t (T1::hash (x.first), T2::hash (x.second));
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::equal (const value_type &x, const compare_type &y)
{
  return T1::equal (x.first, y.first) && T2::equal (x.second, y.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::remove (value_type &x)
{
  T1::remove (x.first);
  T2::remove (x.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_deleted (value_type &x)
{
  T1::mark_deleted (x.first);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_empty (value_type &x)
{
  T1::mark_empty (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_deleted (const value_type &x)
{
  return T1::is_deleted (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_empty (const value_type &x)
{
  return T1::is_empty (x.first);
}

template <typename T> struct default_hash_traits : T {};

template <typename T>
struct default_hash_traits <T *> : ggc_ptr_hash <T> {};
# 253 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h"
template <typename H, typename Value>
struct simple_hashmap_traits
{
  typedef typename H::value_type key_type;
  static const bool maybe_mx = true;
  static inline hashval_t hash (const key_type &);
  static inline bool equal_keys (const key_type &, const key_type &);
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = H::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename H, typename Value>
inline hashval_t
simple_hashmap_traits <H, Value>::hash (const key_type &h)
{
  return H::hash (h);
}

template <typename H, typename Value>
inline bool
simple_hashmap_traits <H, Value>::equal_keys (const key_type &k1,
           const key_type &k2)
{
  return H::equal (k1, k2);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::remove (T &entry)
{
  H::remove (entry.m_key);
  entry.m_value.~Value ();
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_empty (const T &entry)
{
  return H::is_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_deleted (const T &entry)
{
  return H::is_deleted (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_empty (T &entry)
{
  H::mark_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_deleted (T &entry)
{
  H::mark_deleted (entry.m_key);
}

template <typename H, typename Value>
struct simple_cache_map_traits: public simple_hashmap_traits<H,Value>
{
  static const bool maybe_mx = false;
};






template <typename Value>
struct unbounded_hashmap_traits
{
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = default_hash_traits <Value>::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::remove (T &entry)
{
  default_hash_traits <Value>::remove (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_empty (const T &entry)
{
  return default_hash_traits <Value>::is_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_deleted (const T &entry)
{
  return default_hash_traits <Value>::is_deleted (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_empty (T &entry)
{
  default_hash_traits <Value>::mark_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_deleted (T &entry)
{
  default_hash_traits <Value>::mark_deleted (entry.m_value);
}





template <typename Key, typename Value>
struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>
{
  typedef Key key_type;
  static inline hashval_t hash (Key);
  static inline bool equal_keys (Key, Key);
};

template <typename Key, typename Value>
inline hashval_t
unbounded_int_hashmap_traits <Key, Value>::hash (Key k)
{
  return k;
}

template <typename Key, typename Value>
inline bool
unbounded_int_hashmap_traits <Key, Value>::equal_keys (Key k1, Key k2)
{
  return k1 == k2;
}
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

template<typename, typename, typename> class hash_map;
template<typename, bool, typename> class hash_set;




template <typename Type>
struct xcallocator
{
  static Type *data_alloc (size_t count);
  static void data_free (Type *memory);
};




template <typename Type>
inline Type *
xcallocator <Type>::data_alloc (size_t count)
{
  return static_cast <Type *> (xcalloc (count, sizeof (Type)));
}




template <typename Type>
inline void
xcallocator <Type>::data_free (Type *memory)
{
  return ::free (memory);
}




struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;
  hashval_t shift;
};

extern struct prime_ent const prime_tab[];


extern unsigned int hash_table_sanitize_eq_limit;



extern unsigned int hash_table_higher_prime_index (unsigned long n)
   __attribute__ ((__pure__));

extern __attribute__ ((__noreturn__)) __attribute__ ((__cold__)) void hashtab_chk_error ();
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
inline hashval_t
mul_mod (hashval_t x, hashval_t y, hashval_t inv, int shift)
{
   hashval_t t1, t2, t3, t4, q, r;

   t1 = ((uint64_t)x * inv) >> 32;
   t2 = x - t1;
   t3 = t2 >> 1;
   t4 = t1 + t3;
   q = t4 >> shift;
   r = x - (q * y);

   return r;
}



inline hashval_t
hash_table_mod1 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 343, __FUNCTION__), 0 : 0));
  return mul_mod (hash, p->prime, p->inv, p->shift);
}



inline hashval_t
hash_table_mod2 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 353, __FUNCTION__), 0 : 0));
  return 1 + mul_mod (hash, p->prime - 2, p->inv_m2, p->shift);
}

class mem_usage;
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template <typename Descriptor, bool Lazy = false,
   template<typename Type> class Allocator = xcallocator>
class hash_table
{
  typedef typename Descriptor::value_type value_type;
  typedef typename Descriptor::compare_type compare_type;

public:
  explicit hash_table (size_t, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  explicit hash_table (const hash_table &, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  ~hash_table ();


  static hash_table *
  create_ggc (size_t n, bool sanitize_eq_and_hash = true )
  {
    hash_table *table = ggc_alloc<hash_table> ();
    new (table) hash_table (n, true, sanitize_eq_and_hash, 0,
       HASH_TABLE_ORIGIN );
    return table;
  }


  size_t size () const { return m_size; }


  size_t elements () const { return m_n_elements - m_n_deleted; }


  size_t elements_with_deleted () const { return m_n_elements; }


  void empty () { if (elements ()) empty_slow (); }


  bool is_empty () const { return elements () == 0; }




  void clear_slot (value_type *);




  value_type &find_with_hash (const compare_type &, hashval_t);


  value_type &find (const value_type &value)
    {
      return find_with_hash (value, Descriptor::hash (value));
    }

  value_type *find_slot (const value_type &value, insert_option insert)
    {
      return find_slot_with_hash (value, Descriptor::hash (value), insert);
    }
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
  value_type *find_slot_with_hash (const compare_type &comparable,
       hashval_t hash, enum insert_option insert);




  void remove_elt_with_hash (const compare_type &, hashval_t);



  void remove_elt (const value_type &value)
    {
      remove_elt_with_hash (value, Descriptor::hash (value));
    }




  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse_noresize (Argument argument);



  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse (Argument argument);

  class iterator
  {
  public:
    iterator () : m_slot (nullptr), m_limit (nullptr) {}

    iterator (value_type *slot, value_type *limit) :
      m_slot (slot), m_limit (limit) {}

    inline value_type &operator * () { return *m_slot; }
    void slide ();
    inline iterator &operator ++ ();
    bool operator != (const iterator &other) const
      {
 return m_slot != other.m_slot || m_limit != other.m_limit;
      }

  private:
    value_type *m_slot;
    value_type *m_limit;
  };

  iterator begin () const
    {
      if (Lazy && m_entries == nullptr)
 return iterator ();
      iterator iter (m_entries, m_entries + m_size);
      iter.slide ();
      return iter;
    }

  iterator end () const { return iterator (); }

  double collisions () const
    {
      return m_searches ? static_cast <double> (m_collisions) / m_searches : 0;
    }

private:

  void operator= (hash_table&);

  template<typename T> friend void gt_ggc_mx (hash_table<T> *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *);
  template<typename T> friend void
    hashtab_entry_note_pointers (void *, void *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void
  gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *,
           gt_pointer_operator, void *);

  template<typename T> friend void gt_cleare_cache (hash_table<T> *);

  void empty_slow ();

  value_type *alloc_entries (size_t n ) const;
  value_type *find_empty_slot_for_expand (hashval_t);
  void verify (const compare_type &comparable, hashval_t hash);
  bool too_empty_p (unsigned int);
  void expand ();
  static bool is_deleted (value_type &v)
  {
    return Descriptor::is_deleted (v);
  }

  static bool is_empty (value_type &v)
  {
    return Descriptor::is_empty (v);
  }

  static void mark_deleted (value_type &v)
  {
    Descriptor::mark_deleted (v);
  }

  static void mark_empty (value_type &v)
  {
    Descriptor::mark_empty (v);
  }


  typename Descriptor::value_type *m_entries;

  size_t m_size;


  size_t m_n_elements;


  size_t m_n_deleted;



  unsigned int m_searches;



  unsigned int m_collisions;



  unsigned int m_size_prime_index;


  bool m_ggc;


  bool m_sanitize_eq_and_hash;





  static const bool m_gather_mem_stats = false;

};




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
template<typename Key, typename Value,
  typename Traits = simple_hashmap_traits<default_hash_traits<Key>,
       Value> >
class hash_map;





class mem_location
{
public:

  inline
  mem_location () {}


  inline
  mem_location (mem_alloc_origin origin, bool ggc,
  const char *filename = nullptr, int line = 0,
  const char *function = nullptr):
    m_filename (filename), m_function (function), m_line (line), m_origin
    (origin), m_ggc (ggc) {}


  inline
  mem_location (mem_location &other): m_filename (other.m_filename),
    m_function (other.m_function), m_line (other.m_line),
    m_origin (other.m_origin), m_ggc (other.m_ggc) {}





  hashval_t
  hash ()
  {
    inchash::hash hash;

    hash.add_ptr (m_filename);
    hash.add_ptr (m_function);
    hash.add_int (m_line);

    return hash.end ();
  }


  int
  equal (const mem_location &other)
  {
    return m_filename == other.m_filename && m_function == other.m_function
      && m_line == other.m_line;
  }


  inline const char *
  get_trimmed_filename ()
  {
    const char *s1 = m_filename;
    const char *s2;

    while ((s2 = strstr (s1, "gcc/")))
      s1 = s2 + 4;

    return s1;
  }

  inline char *
  to_string ()
  {
    unsigned l = strlen (get_trimmed_filename ()) + strlen (m_function)
      + 30;

    char *s = ((char *) xmalloc (sizeof (char) * (l)));
    sprintf (s, "%s:%i (%s)", get_trimmed_filename (),
      m_line, m_function);

    s[((48) < (l - 1) ? (48) : (l - 1))] = '\0';

    return s;
  }


  static const char *
  get_origin_name (mem_alloc_origin origin)
  {
    return mem_alloc_origin_names[(unsigned) origin];
  }


  const char *m_filename;

  const char *m_function;

  int m_line;

  mem_alloc_origin m_origin;

  bool m_ggc;
};


class mem_usage
{
public:

  mem_usage (): m_allocated (0), m_times (0), m_peak (0), m_instances (1) {}


  mem_usage (size_t allocated, size_t times, size_t peak, size_t instances = 0):
    m_allocated (allocated), m_times (times), m_peak (peak),
    m_instances (instances) {}


  inline void
  register_overhead (size_t size)
  {
    m_allocated += size;
    m_times++;

    if (m_peak < m_allocated)
      m_peak = m_allocated;
  }


  inline void
  release_overhead (size_t size)
  {
    ((void)(!(size <= m_allocated) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h", 153, __FUNCTION__), 0 : 0));

    m_allocated -= size;
  }


  mem_usage
  operator+ (const mem_usage &second)
  {
    return mem_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_instances + second.m_instances);
  }


  inline bool
  operator== (const mem_usage &second) const
  {
    return (m_allocated == second.m_allocated
     && m_peak == second.m_peak
     && m_times == second.m_times);
  }


  inline bool
  operator< (const mem_usage &second) const
  {
    if (*this == second)
      return false;

    return (m_allocated == second.m_allocated ?
     (m_peak == second.m_peak ? m_times < second.m_times
      : m_peak < second.m_peak) : m_allocated < second.m_allocated);
  }


  static int
  compare (const void *first, const void *second)
  {
    typedef std::pair<mem_location *, mem_usage *> mem_pair_t;

    const mem_pair_t f = *(const mem_pair_t *)first;
    const mem_pair_t s = *(const mem_pair_t *)second;

    if (*f.second == *s.second)
      return 0;

    return *f.second < *s.second ? 1 : -1;
  }


  inline void
  dump (mem_location *loc, const mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s " "%" "9" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                             "l" "u" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                             "%c" ":%5.1f%%"
      "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
     "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
     "%c" "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
              "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
              "%c" ":%5.1f%%%10s\n",
      location_string, (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)(((m_peak) < 10 * 1024 ? (m_peak) : ((m_peak) < 10 * (1024 * 1024) ? (m_peak) / 1024 : (m_peak) / (1024 * 1024)))), ((m_peak) < 10 * 1024 ? ' ' : ((m_peak) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_times, total.m_times), loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  inline void
  dump_footer () const
  {
    fprintf (
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%s" "%" "53" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                         "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                         "%c" "%" "26" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                                   "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                                   "%c" "\n", "Total",
      (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')));
  }


  static inline float
  get_percent (size_t nominator, size_t denominator)
  {
    return denominator == 0 ? 0.0f : nominator * 100.0 / denominator;
  }


  static inline void
  print_dash_line (size_t count = 140)
  {
    while (count--)
      fputc_unlocked ('-', 
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
     stderr
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
     );
    fputc_unlocked ('\n', 
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
   stderr
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
   );
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s %11s%16s%10s%17s\n", name, "Leak", "Peak",
      "Times", "Type");
  }


  size_t m_allocated;

  size_t m_times;

  size_t m_peak;

  size_t m_instances;
};



template <class T>
class mem_usage_pair
{
public:
  mem_usage_pair (T *usage_, size_t allocated_): usage (usage_),
  allocated (allocated_) {}

  T *usage;
  size_t allocated;
};


template <class T>
class mem_alloc_description
{
public:
  struct mem_location_hash : nofree_ptr_hash <mem_location>
  {
    static hashval_t
    hash (value_type l)
    {
      inchash::hash hstate;

      hstate.add_ptr ((const void *)l->m_filename);
      hstate.add_ptr (l->m_function);
      hstate.add_int (l->m_line);

      return hstate.end ();
    }

    static bool
    equal (value_type l1, value_type l2)
    {
      return (l1->m_filename == l2->m_filename
       && l1->m_function == l2->m_function
       && l1->m_line == l2->m_line);
    }
  };


  typedef hash_map <mem_location_hash, T *> mem_map_t;
  typedef hash_map <const void *, mem_usage_pair<T> > reverse_mem_map_t;
  typedef hash_map <const void *, std::pair<T *, size_t> > reverse_object_map_t;
  typedef std::pair <mem_location *, T *> mem_list_t;


  mem_alloc_description ();


  ~mem_alloc_description ();


  bool contains_descriptor_for_instance (const void *ptr);


  T *get_descriptor_for_instance (const void *ptr);



  T *register_descriptor (const void *ptr, mem_location *location);





  T *register_descriptor (const void *ptr, mem_alloc_origin origin,
     bool ggc, const char *name, int line,
     const char *function);



  T *register_instance_overhead (size_t size, const void *ptr);




  void register_object_overhead (T *usage, size_t size, const void *ptr);




  T *release_instance_overhead (void *ptr, size_t size,
    bool remove_from_map = false);


  void release_object_overhead (void *ptr);





  void unregister_descriptor (void *ptr);


  T get_sum (mem_alloc_origin origin);





  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length);



  void dump (mem_alloc_origin origin);


  reverse_object_map_t *m_reverse_object_map;

private:


  T *register_overhead (size_t size, mem_alloc_origin origin, const char *name,
   int line, const char *function, const void *ptr);


  mem_location m_location;


  mem_map_t *m_map;


  reverse_mem_map_t *m_reverse_map;
};



template <class T>
inline bool
mem_alloc_description<T>::contains_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr);
}



template <class T>
inline T*
mem_alloc_description<T>::get_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr) ? (*m_reverse_map->get (ptr)).usage : nullptr;
}




template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_location *location)
{
  T *usage = nullptr;

  T **slot = m_map->get (location);
  if (slot)
    {
      delete location;
      usage = *slot;
      usage->m_instances++;
    }
  else
    {
      usage = new T ();
      m_map->put (location, usage);
    }

  if (!m_reverse_map->get (ptr))
    m_reverse_map->put (ptr, mem_usage_pair<T> (usage, 0));

  return usage;
}






template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_alloc_origin origin,
            bool ggc,
            const char *filename,
            int line,
            const char *function)
{
  mem_location *l = new mem_location (origin, ggc, filename, line, function);
  return register_descriptor (ptr, l);
}




template <class T>
inline T*
mem_alloc_description<T>::register_instance_overhead (size_t size,
            const void *ptr)
{
  mem_usage_pair <T> *slot = m_reverse_map->get (ptr);
  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->register_overhead (size);

  return usage;
}





template <class T>
void
mem_alloc_description<T>::register_object_overhead (T *usage, size_t size,
          const void *ptr)
{


  m_reverse_object_map->put (ptr, std::pair<T *, size_t> (usage, size));
}




template <class T>
inline T*
mem_alloc_description<T>::register_overhead (size_t size,
          mem_alloc_origin origin,
          const char *filename,
          int line,
          const char *function,
          const void *ptr)
{
  T *usage = register_descriptor (ptr, origin, filename, line, function);
  usage->register_overhead (size);

  return usage;
}



template <class T>
inline T *
mem_alloc_description<T>::release_instance_overhead (void *ptr, size_t size,
           bool remove_from_map)
{
  mem_usage_pair<T> *slot = m_reverse_map->get (ptr);

  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->release_overhead (size);

  if (remove_from_map)
    m_reverse_map->remove (ptr);

  return usage;
}



template <class T>
inline void
mem_alloc_description<T>::release_object_overhead (void *ptr)
{
  std::pair <T *, size_t> *entry = m_reverse_object_map->get (ptr);
  entry->first->release_overhead (entry->second);
  m_reverse_object_map->remove (ptr);
}





template <class T>
inline void
mem_alloc_description<T>::unregister_descriptor (void *ptr)
{
  m_reverse_map->remove (ptr);
}



template <class T>
inline
mem_alloc_description<T>::mem_alloc_description ()
{
  m_map = new mem_map_t (13, false, false, false);
  m_reverse_map = new reverse_mem_map_t (13, false, false, false);
  m_reverse_object_map = new reverse_object_map_t (13, false, false, false);
}



template <class T>
inline
mem_alloc_description<T>::~mem_alloc_description ()
{
  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    {
      delete (*it).first;
      delete (*it).second;
    }

  delete m_map;
  delete m_reverse_map;
  delete m_reverse_object_map;
}






template <class T>
inline
typename mem_alloc_description<T>::mem_list_t *
mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length)
{


  size_t element_size = sizeof (mem_list_t);
  mem_list_t *list = ((mem_list_t *) xcalloc ((m_map->elements ()), sizeof (mem_list_t)));
  unsigned i = 0;

  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    if ((*it).first->m_origin == origin)
      list[i++] = std::pair<mem_location*, T*> (*it);

  gcc_qsort (list, i, element_size, T::compare);
  *length = i;

  return list;
}



template <class T>
inline T
mem_alloc_description<T>::get_sum (mem_alloc_origin origin)
{
  unsigned length;
  mem_list_t *list = get_list (origin, &length);
  T sum;

  for (unsigned i = 0; i < length; i++)
    sum = sum + *list[i].second;

  free ((void*) (list));

  return sum;
}




template <class T>
inline void
mem_alloc_description<T>::dump (mem_alloc_origin origin)
{
  unsigned length;

  fprintf (
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");

  mem_list_t *list = get_list (origin, &length);
  T total = get_sum (origin);

  T::print_dash_line ();
  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  for (int i = length - 1; i >= 0; i--)
    list[i].second->dump (list[i].first, total);
  T::print_dash_line ();

  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  total.dump_footer ();
  T::print_dash_line ();

  free ((void*) (list));

  fprintf (
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");
}
# 595 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h" 1
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h"
const size_t default_hash_map_size = 13;
template<typename KeyId, typename Value,
  typename Traits
                                        >
class hash_map
{
  typedef typename Traits::key_type Key;
  struct hash_entry
  {
    Key m_key;
    Value m_value;

    typedef hash_entry value_type;
    typedef Key compare_type;

    static hashval_t hash (const hash_entry &e)
      {
        return Traits::hash (e.m_key);
      }

    static bool equal (const hash_entry &a, const Key &b)
        {
   return Traits::equal_keys (a.m_key, b);
        }

    static void remove (hash_entry &e) { Traits::remove (e); }

    static void mark_deleted (hash_entry &e) { Traits::mark_deleted (e); }

    static bool is_deleted (const hash_entry &e)
      {
        return Traits::is_deleted (e);
      }

    static const bool empty_zero_p = Traits::empty_zero_p;
    static void mark_empty (hash_entry &e) { Traits::mark_empty (e); }
    static bool is_empty (const hash_entry &e) { return Traits::is_empty (e); }

    static void ggc_mx (hash_entry &e)
      {
 gt_ggc_mx (e.m_key);
 gt_ggc_mx (e.m_value);
      }

    static void ggc_maybe_mx (hash_entry &e)
      {
 if (Traits::maybe_mx)
   ggc_mx (e);
      }

    static void pch_nx (hash_entry &e)
      {
 gt_pch_nx (e.m_key);
 gt_pch_nx (e.m_value);
      }

    static void pch_nx (hash_entry &e, gt_pointer_operator op, void *c)
      {
 pch_nx_helper (e.m_key, op, c);
 pch_nx_helper (e.m_value, op, c);
      }

    static int keep_cache_entry (hash_entry &e)
      {
 return ggc_marked_p (e.m_key);
      }

  private:
    template<typename T>
    static void
      pch_nx_helper (T &x, gt_pointer_operator op, void *cookie)
 {
   gt_pch_nx (&x, op, cookie);
 }

    static void
      pch_nx_helper (int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (unsigned int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (bool, gt_pointer_operator, void *)
 {
 }

    template<typename T>
      static void
      pch_nx_helper (T *&x, gt_pointer_operator op, void *cookie)
 {
   op (&x, cookie);
 }
  };

public:
  explicit hash_map (size_t n = default_hash_map_size, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (n, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN )
  {
  }

  explicit hash_map (const hash_map &h, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (h.m_table, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN ) {}


  static hash_map *create_ggc (size_t size = default_hash_map_size,
          bool gather_mem_stats = 0
          )
    {
      hash_map *map = ggc_alloc<hash_map> ();
      new (map) hash_map (size, true, true, gather_mem_stats );
      return map;
    }





  bool put (const Key &k, const Value &v)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = hash_entry::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *) &e->m_value) Value (v);
 }
      else
 e->m_value = v;

      return !ins;
    }




  Value *get (const Key &k)
    {
      hash_entry &e = m_table.find_with_hash (k, Traits::hash (k));
      return Traits::is_empty (e) ? nullptr : &e.m_value;
    }





  Value &get_or_insert (const Key &k, bool *existed = nullptr)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = Traits::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *)&e->m_value) Value ();
 }

      if (existed != nullptr)
 *existed = !ins;

      return e->m_value;
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       const Value &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f ((*iter).m_key, (*iter).m_value, a);
    }

  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       Value *, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 if (!f ((*iter).m_key, &(*iter).m_value, a))
   break;
    }

  size_t elements () const { return m_table.elements (); }

  void empty () { m_table.empty(); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<hash_entry>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
    {
      ++m_iter;
      return *this;
    }




    class reference_pair {
    public:
      const Key &first;
      Value &second;

      reference_pair (const Key &key, Value &value) : first (key), second (value) {}

      template <typename K, typename V>
      operator std::pair<K, V> () const { return std::pair<K, V> (first, second); }
    };

    reference_pair operator* ()
    {
      hash_entry &e = *m_iter;
      return reference_pair (e.m_key, e.m_value);
    }

    bool
    operator != (const iterator &other) const
    {
      return m_iter != other.m_iter;
    }

  private:
    typename hash_table<hash_entry>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }

private:

  template<typename T, typename U, typename V> friend void gt_ggc_mx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void gt_cleare_cache (hash_map<T, U, V> *);

  hash_table<hash_entry> m_table;
};



template<typename K, typename V, typename H>
static inline void
gt_ggc_mx (hash_map<K, V, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_cleare_cache (hash_map<K, V, H> *h)
{
  if (h)
    gt_cleare_cache (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}

enum hm_alloc { hm_heap = false, hm_ggc = true };
template<bool ggc, typename K, typename V, typename H>
inline hash_map<K,V,H> *
hash_map_maybe_create (hash_map<K,V,H> *&h,
         size_t size = default_hash_map_size)
{
  if (!h)
    {
      if (ggc)
 h = hash_map<K,V,H>::create_ggc (size);
      else
 h = new hash_map<K,V,H> (size);
    }
  return h;
}


template<typename K, typename V, typename H>
inline V*
hash_map_safe_get (hash_map<K,V,H> *h, const K& k)
{
  return h ? h->get (k) : nullptr;
}


template<bool ggc, typename K, typename V, typename H>
inline V&
hash_map_safe_get_or_insert (hash_map<K,V,H> *&h, const K& k, bool *e = nullptr,
        size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->get_or_insert (k, e);
}


template<bool ggc, typename K, typename V, typename H>
inline bool
hash_map_safe_put (hash_map<K,V,H> *&h, const K& k, const V& v,
     size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->put (k, v);
}
# 596 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

extern mem_alloc_description<mem_usage>& hash_table_usage (void);


extern void dump_hash_table_loc_statistics (void);

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (size_t size, bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (0), m_n_deleted (0), m_searches (0), m_collisions (0),
  m_ggc (ggc), m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  unsigned int size_prime_index;

  size_prime_index = hash_table_higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
          , 0,0,0);

  if (Lazy)
    m_entries = nullptr;
  else
    m_entries = alloc_entries (size );
  m_size = size;
  m_size_prime_index = size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (const hash_table &h,
           bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (h.m_n_elements), m_n_deleted (h.m_n_deleted),
  m_searches (0), m_collisions (0), m_ggc (ggc),
  m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  size_t size = h.m_size;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
       , 0,0,0);

  if (Lazy && h.m_entries == nullptr)
    m_entries = nullptr;
  else
    {
      value_type *nentries = alloc_entries (size );
      for (size_t i = 0; i < size; ++i)
 {
   value_type &entry = h.m_entries[i];
   if (is_deleted (entry))
     mark_deleted (nentries[i]);
   else if (!is_empty (entry))
     new ((void*) (nentries + i)) value_type (entry);
 }
      m_entries = nentries;
    }
  m_size = size;
  m_size_prime_index = h.m_size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::~hash_table ()
{
  if (!Lazy || m_entries)
    {
      for (size_t i = m_size - 1; i < m_size; i--)
 if (!is_empty (m_entries[i]) && !is_deleted (m_entries[i]))
   Descriptor::remove (m_entries[i]);

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);
      if (m_gather_mem_stats)
 hash_table_usage ().release_instance_overhead (this,
             sizeof (value_type)
             * m_size, true);
    }
  else if (m_gather_mem_stats)
    hash_table_usage ().unregister_descriptor (this);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::alloc_entries (size_t n ) const
{
  value_type *nentries;

  if (m_gather_mem_stats)
    hash_table_usage ().register_instance_overhead (sizeof (value_type) * n, this);

  if (!m_ggc)
    nentries = Allocator <value_type> ::data_alloc (n);
  else
    nentries = ::ggc_cleared_vec_alloc<value_type> (n );

  ((void)(!(nentries != nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 715, __FUNCTION__), 0 : 0));
  if (!Descriptor::empty_zero_p)
    for (size_t i = 0; i < n; i++)
      mark_empty (nentries[i]);

  return nentries;
}
# 730 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::find_empty_slot_for_expand (hashval_t hash)
{
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  size_t size = m_size;
  value_type *slot = m_entries + index;
  hashval_t hash2;

  if (is_empty (*slot))
    return slot;
  ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 743, __FUNCTION__), 0 : 0));

  hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      index += hash2;
      if (index >= size)
        index -= size;

      slot = m_entries + index;
      if (is_empty (*slot))
        return slot;
      ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 755, __FUNCTION__), 0 : 0));
    }
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline bool
hash_table<Descriptor, Lazy, Allocator>::too_empty_p (unsigned int elts)
{
  return elts * 8 < m_size && m_size > 32;
}
# 776 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::expand ()
{
  value_type *oentries = m_entries;
  unsigned int oindex = m_size_prime_index;
  size_t osize = size ();
  value_type *olimit = oentries + osize;
  size_t elts = elements ();



  unsigned int nindex;
  size_t nsize;
  if (elts * 2 > osize || too_empty_p (elts))
    {
      nindex = hash_table_higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
  else
    {
      nindex = oindex;
      nsize = osize;
    }

  value_type *nentries = alloc_entries (nsize);

  if (m_gather_mem_stats)
    hash_table_usage ().release_instance_overhead (this, sizeof (value_type)
          * osize);

  m_entries = nentries;
  m_size = nsize;
  m_size_prime_index = nindex;
  m_n_elements -= m_n_deleted;
  m_n_deleted = 0;

  value_type *p = oentries;
  do
    {
      value_type &x = *p;

      if (!is_empty (x) && !is_deleted (x))
        {
          value_type *q = find_empty_slot_for_expand (Descriptor::hash (x));
   new ((void*) q) value_type (x);
        }

      p++;
    }
  while (p < olimit);

  if (!m_ggc)
    Allocator <value_type> ::data_free (oentries);
  else
    ggc_free (oentries);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::empty_slow ()
{
  size_t size = m_size;
  size_t nsize = size;
  value_type *entries = m_entries;

  for (size_t i = size - 1; i < size; i--)
    if (!is_empty (entries[i]) && !is_deleted (entries[i]))
      Descriptor::remove (entries[i]);


  if (size > 1024*1024 / sizeof (value_type))
    nsize = 1024 / sizeof (value_type);
  else if (too_empty_p (m_n_elements))
    nsize = m_n_elements * 2;

  if (nsize != size)
    {
      unsigned int nindex = hash_table_higher_prime_index (nsize);

      nsize = prime_tab[nindex].prime;

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);

      m_entries = alloc_entries (nsize);
      m_size = nsize;
      m_size_prime_index = nindex;
    }
  else if (Descriptor::empty_zero_p)
    memset ((void *) entries, 0, size * sizeof (value_type));
  else
    for (size_t i = 0; i < size; i++)
      mark_empty (entries[i]);

  m_n_deleted = 0;
  m_n_elements = 0;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::clear_slot (value_type *slot)
{
  ((void)(!(!(slot < m_entries || slot >= m_entries + size () || is_empty (*slot) || is_deleted (*slot))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 890, __FUNCTION__), 0 : 0))
                                                      ;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type &
hash_table<Descriptor, Lazy, Allocator>
::find_with_hash (const compare_type &comparable, hashval_t hash)
{
  m_searches++;
  size_t size = m_size;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);

  if (Lazy && m_entries == nullptr)
    m_entries = alloc_entries (size);


  if (m_sanitize_eq_and_hash)
    verify (comparable, hash);


  value_type *entry = &m_entries[index];
  if (is_empty (*entry)
      || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
    return *entry;

  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
        index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry)
          || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
 return *entry;
    }
}
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy, Allocator>
::find_slot_with_hash (const compare_type &comparable, hashval_t hash,
         enum insert_option insert)
{
  if (Lazy && m_entries == nullptr)
    {
      if (insert == INSERT)
 m_entries = alloc_entries (m_size);
      else
 return nullptr;
    }
  if (insert == INSERT && m_size * 3 <= m_n_elements * 4)
    expand ();


  if (m_sanitize_eq_and_hash)
    verify (comparable, hash);


  m_searches++;
  value_type *first_deleted_slot = nullptr;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  value_type *entry = &m_entries[index];
  size_t size = m_size;
  if (is_empty (*entry))
    goto empty_entry;
  else if (is_deleted (*entry))
    first_deleted_slot = &m_entries[index];
  else if (Descriptor::equal (*entry, comparable))
    return &m_entries[index];

  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
 index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry))
 goto empty_entry;
      else if (is_deleted (*entry))
 {
   if (!first_deleted_slot)
     first_deleted_slot = &m_entries[index];
 }
      else if (Descriptor::equal (*entry, comparable))
 return &m_entries[index];
    }

 empty_entry:
  if (insert == NO_INSERT)
    return nullptr;

  if (first_deleted_slot)
    {
      m_n_deleted--;
      mark_empty (*first_deleted_slot);
      return first_deleted_slot;
    }

  m_n_elements++;
  return &m_entries[index];
}




template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::verify (const compare_type &comparable, hashval_t hash)
{
  for (size_t i = 0; i < ((hash_table_sanitize_eq_limit) < (m_size) ? (hash_table_sanitize_eq_limit) : (m_size)); i++)
    {
      value_type *entry = &m_entries[i];
      if (!is_empty (*entry) && !is_deleted (*entry)
   && hash != Descriptor::hash (*entry)
   && Descriptor::equal (*entry, comparable))
 hashtab_chk_error ();
    }
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::remove_elt_with_hash (const compare_type &comparable, hashval_t hash)
{
  value_type *slot = find_slot_with_hash (comparable, hash, NO_INSERT);
  if (slot == nullptr)
    return;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
   template<typename Type> class Allocator>
template<typename Argument,
  int (*Callback)
  (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
  Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse_noresize (Argument argument)
{
  if (Lazy && m_entries == nullptr)
    return;

  value_type *slot = m_entries;
  value_type *limit = slot + size ();

  do
    {
      value_type &x = *slot;

      if (!is_empty (x) && !is_deleted (x))
        if (! Callback (slot, argument))
          break;
    }
  while (++slot < limit);
}




template <typename Descriptor, bool Lazy,
   template <typename Type> class Allocator>
template <typename Argument,
   int (*Callback)
   (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
   Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse (Argument argument)
{
  if (too_empty_p (elements ()) && (!Lazy || m_entries))
    expand ();

  traverse_noresize <Argument, Callback> (argument);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::iterator::slide ()
{
  for ( ; m_slot < m_limit; ++m_slot )
    {
      value_type &x = *m_slot;
      if (!is_empty (x) && !is_deleted (x))
        return;
    }
  m_slot = nullptr;
  m_limit = nullptr;
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::iterator &
hash_table<Descriptor, Lazy, Allocator>::iterator::operator ++ ()
{
  ++m_slot;
  slide ();
  return *this;
}
# 1146 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename E>
static inline void
gt_ggc_mx (hash_table<E> *h)
{
  typedef hash_table<E> table;

  if (!((h->m_entries) != nullptr && ((void *) (h->m_entries)) != (void *) 1 && ! ggc_set_mark (h->m_entries)))
    return;

  for (size_t i = 0; i < h->m_size; i++)
    {
      if (table::is_empty (h->m_entries[i])
   || table::is_deleted (h->m_entries[i]))
 continue;



      E::ggc_maybe_mx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
hashtab_entry_note_pointers (void *obj, void *h, gt_pointer_operator op,
        void *cookie)
{
  hash_table<D> *map = static_cast<hash_table<D> *> (h);
  ((void)(!(map->m_entries == obj) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1173, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < map->m_size; i++)
    {
      typedef hash_table<D> table;
      if (table::is_empty (map->m_entries[i])
   || table::is_deleted (map->m_entries[i]))
 continue;

      D::pch_nx (map->m_entries[i], op, cookie);
    }
}

template<typename D>
static void
gt_pch_nx (hash_table<D> *h)
{
  bool success
    = gt_pch_note_object (h->m_entries, h, hashtab_entry_note_pointers<D>);
  ((void)(!(success) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1191, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < h->m_size; i++)
    {
      if (hash_table<D>::is_empty (h->m_entries[i])
   || hash_table<D>::is_deleted (h->m_entries[i]))
 continue;

      D::pch_nx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
gt_pch_nx (hash_table<D> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_entries, cookie);
}

template<typename H>
inline void
gt_cleare_cache (hash_table<H> *h)
{
  typedef hash_table<H> table;
  if (!h)
    return;

  for (typename table::iterator iter = h->begin (); iter != h->end (); ++iter)
    if (!table::is_empty (*iter) && !table::is_deleted (*iter))
      {
 int res = H::keep_cache_entry (*iter);
 if (res == 0)
   h->clear_slot (&*iter);
 else if (res != -1)
   H::ggc_mx (*iter);
      }
}
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename KeyId, bool Lazy = false,
  typename Traits = default_hash_traits<KeyId> >
class hash_set
{
public:
  typedef typename Traits::value_type Key;
  explicit hash_set (size_t n = 13, bool ggc = false )
    : m_table (n, ggc, true, 0, HASH_SET_ORIGIN ) {}



  static hash_set *
  create_ggc (size_t n)
    {
      hash_set *set = ggc_alloc<hash_set> ();
      new (set) hash_set (n, true);
      return set;
    }




  bool add (const Key &k)
    {
      Key *e = m_table.find_slot_with_hash (k, Traits::hash (k), INSERT);
      bool existed = !Traits::is_empty (*e);
      if (!existed)
 new (e) Key (k);

      return existed;
    }



  bool contains (const Key &k)
    {
      if (Lazy)
 return (m_table.find_slot_with_hash (k, Traits::hash (k), NO_INSERT)
  != nullptr);
      Key &e = m_table.find_with_hash (k, Traits::hash (k));
      return !Traits::is_empty (e);
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::value_type &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<Traits, Lazy>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f (*iter, a);
    }



  size_t elements () const { return m_table.elements (); }



  void empty () { m_table.empty (); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<Traits,
       Lazy>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
      {
 ++m_iter;
 return *this;
      }

    Key
    operator* ()
      {
 return *m_iter;
      }

    bool
    operator != (const iterator &other) const
      {
 return m_iter != other.m_iter;
      }

  private:
    typename hash_table<Traits, Lazy>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }


private:

  template<typename T, typename U>
  friend void gt_ggc_mx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);

  hash_table<Traits, Lazy> m_table;
};
# 161 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename T>
void
debug_helper (hash_set<T> &ref)
{
  for (typename hash_set<T>::iterator it = ref.begin ();
       it != ref.end (); ++it)
    {
      debug_slim (*it);
      fputc_unlocked ('\n', 
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 3 4
     stderr
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
     );
    }
}
# 191 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename K, typename H>
static inline void
gt_ggc_mx (hash_set<K, false, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h" 1
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
struct is_a_helper
{
  template <typename U>
  static inline bool test (U *p);
  template <typename U>
  static inline T cast (U *p);
};
# 168 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
template <typename U>
inline T
is_a_helper <T>::cast (U *p)
{
  return reinterpret_cast <T> (p);
}
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T, typename U>
inline bool
is_a (U *p)
{
  return is_a_helper<T>::test (p);
}




template <typename T, typename U>
inline T
as_a (U *p)
{
  ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 197, __FUNCTION__), 0 : 0));
  return is_a_helper <T>::cast (p);
}




template <typename T, typename U>
inline T
safe_as_a (U *p)
{
  if (p)
    {
      ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 210, __FUNCTION__), 0 : 0));
      return is_a_helper <T>::cast (p);
    }
  else
    return nullptr;
}




template <typename T, typename U>
inline T
dyn_cast (U *p)
{
  if (is_a <T> (p))
    return is_a_helper <T>::cast (p);
  else
    return static_cast <T> (0);
}



template <typename T, typename U>
inline T
safe_dyn_cast (U *p)
{
  return p ? dyn_cast <T> (p) : 0;
}
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2



void *ggc_internal_cleared_alloc (size_t, void (*)(void *),
      size_t, size_t )
{
  return nullptr;
}
void ggc_free (void *)
{
}





unsigned verbose;




static class line_maps *line_table;
# 63 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
expanded_location
linemap_client_expand_location_to_spelling_point (location_t loc,
        enum location_aspect)
{
  const struct line_map_ordinary *map;
  loc = linemap_resolve_location (line_table, loc, LRK_SPELLING_LOCATION, &map);
  return linemap_expand_location (line_table, map, loc);
}

static bool

__attribute__((format (printf, 5, 0)))

diagnostic_cb (cpp_reader *, enum cpp_diagnostic_level errtype,
        enum cpp_warning_reason, rich_location *richloc,
        const char *msg, va_list *ap)
{
  const line_map_ordinary *map;
  location_t location = richloc->get_loc ();
  linemap_resolve_location (line_table, location, LRK_SPELLING_LOCATION, &map);
  expanded_location loc = linemap_expand_location (line_table, map, location);
  fprintf (
# 84 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
          stderr
# 84 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                , "%s:%d:%d %s: ", loc.file, loc.line, loc.column,
    (errtype == CPP_DL_WARNING) ? "warning" : "error");
  vfprintf (
# 86 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
           stderr
# 86 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                 , msg, *ap);
  fprintf (
# 87 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
          stderr
# 87 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                , "\n");
  FILE *f = fopen_unlocked (loc.file, "r");
  if (f)
    {
      char buf[128];
      while (loc.line > 0)
 {
   if (!fgets_unlocked (buf, 128, f))
     goto notfound;
   if (buf[strlen (buf) - 1] != '\n')
     {
       if (loc.line > 1)
  loc.line++;
     }
   loc.line--;
 }
      fprintf (
# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
              stderr
# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                    , "%s", buf);
      for (int i = 0; i < loc.column - 1; ++i)
 fputc_unlocked (' ', 
# 105 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
stderr
# 105 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
);
      fputc_unlocked ('^', 
# 106 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
     stderr
# 106 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
     );
      fputc_unlocked ('\n', 
# 107 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
     stderr
# 107 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
     );
notfound:
      fclose (f);
    }

  if (errtype == CPP_DL_FATAL)
    exit (1);
  return false;
}

static void

__attribute__((format (printf, 2, 3)))

fatal_at (const cpp_token *tk, const char *msg, ...)
{
  rich_location richloc (line_table, tk->src_loc);
  va_list ap;
  
# 125 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_start(
# 125 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 125 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 ,
# 125 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 msg
# 125 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 125 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                   ;
  diagnostic_cb (nullptr, CPP_DL_FATAL, CPP_W_NONE, &richloc, msg, &ap);
  
# 127 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_end(
# 127 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 127 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 127 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
            ;
}

static void

__attribute__((format (printf, 2, 3)))

fatal_at (location_t loc, const char *msg, ...)
{
  rich_location richloc (line_table, loc);
  va_list ap;
  
# 138 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_start(
# 138 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 138 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 ,
# 138 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 msg
# 138 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 138 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                   ;
  diagnostic_cb (nullptr, CPP_DL_FATAL, CPP_W_NONE, &richloc, msg, &ap);
  
# 140 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_end(
# 140 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 140 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 140 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
            ;
}

static void

__attribute__((format (printf, 2, 3)))

warning_at (const cpp_token *tk, const char *msg, ...)
{
  rich_location richloc (line_table, tk->src_loc);
  va_list ap;
  
# 151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_start(
# 151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 ,
# 151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 msg
# 151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                   ;
  diagnostic_cb (nullptr, CPP_DL_WARNING, CPP_W_NONE, &richloc, msg, &ap);
  
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_end(
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
            ;
}

static void

__attribute__((format (printf, 2, 3)))

warning_at (location_t loc, const char *msg, ...)
{
  rich_location richloc (line_table, loc);
  va_list ap;
  
# 164 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_start(
# 164 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 164 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 ,
# 164 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 msg
# 164 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 164 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                   ;
  diagnostic_cb (nullptr, CPP_DL_WARNING, CPP_W_NONE, &richloc, msg, &ap);
  
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_end(
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
            ;
}



static void

__attribute__((format (printf, 3, 4)))

fprintf_indent (FILE *f, unsigned int indent, const char *format, ...)
{
  va_list ap;
  for (; indent >= 8; indent -= 8)
    fputc_unlocked ('\t', f);
  fprintf (f, "%*s", indent, "");
  
# 181 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_start(
# 181 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 181 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 ,
# 181 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 format
# 181 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 181 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                      ;
  vfprintf (f, format, ap);
  
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 __builtin_va_end(
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
 ap
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
 )
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
            ;
}

static void
output_line_directive (FILE *f, location_t location,
         bool dumpfile = false, bool fnargs = false)
{
  const line_map_ordinary *map;
  linemap_resolve_location (line_table, location, LRK_SPELLING_LOCATION, &map);
  expanded_location loc = linemap_expand_location (line_table, map, location);
  if (dumpfile)
    {

      const char *file = strrchr (loc.file, '/');





      if (!file)
 file = loc.file;
      else
 ++file;

      if (fnargs)
 fprintf (f, "\"%s\", %d", file, loc.line);
      else
 fprintf (f, "%s:%d", file, loc.line);
    }
  else




    fprintf (f, "/* #line %d \"%s\" */\n", loc.line, loc.file);
}






enum tree_code {
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def" 1
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ERROR_MARK,





IDENTIFIER_NODE,






TREE_LIST,


TREE_VEC,
# 75 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BLOCK,
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OFFSET_TYPE,
# 135 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ENUMERAL_TYPE,



BOOLEAN_TYPE,





INTEGER_TYPE,



REAL_TYPE,
# 158 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
POINTER_TYPE,



REFERENCE_TYPE,


NULLPTR_TYPE,




FIXED_POINT_TYPE,
# 179 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COMPLEX_TYPE,




VECTOR_TYPE,
# 200 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ARRAY_TYPE,
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
RECORD_TYPE,





UNION_TYPE,





QUAL_UNION_TYPE,






VOID_TYPE,
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
FUNCTION_TYPE,






METHOD_TYPE,





LANG_TYPE,





VOID_CST,
# 278 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
INTEGER_CST,


POLY_INT_CST,


REAL_CST,


FIXED_CST,



COMPLEX_CST,


VECTOR_CST,


STRING_CST,
# 357 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
FUNCTION_DECL,
LABEL_DECL,




FIELD_DECL,
VAR_DECL,
CONST_DECL,
PARM_DECL,
TYPE_DECL,
RESULT_DECL,



DEBUG_EXPR_DECL,


DEBUG_BEGIN_STMT,



NAMESPACE_DECL,
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
IMPORTED_DECL,
# 400 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
NAMELIST_DECL,



TRANSLATION_UNIT_DECL,
# 417 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COMPONENT_REF,
# 427 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BIT_FIELD_REF,






ARRAY_REF,




ARRAY_RANGE_REF,



REALPART_EXPR,
IMAGPART_EXPR,
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VIEW_CONVERT_EXPR,


INDIRECT_REF,
# 468 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OBJ_TYPE_REF,
# 487 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
CONSTRUCTOR,
# 497 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COMPOUND_EXPR,


MODIFY_EXPR,




INIT_EXPR,







TARGET_EXPR,
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COND_EXPR,


VEC_DUPLICATE_EXPR,
# 540 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_SERIES_EXPR,
# 552 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_COND_EXPR,
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_PERM_EXPR,
# 589 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BIND_EXPR,







CALL_EXPR,






WITH_CLEANUP_EXPR,
# 621 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
CLEANUP_POINT_EXPR,
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
PLACEHOLDER_EXPR,


PLUS_EXPR,
MINUS_EXPR,
MULT_EXPR,



POINTER_PLUS_EXPR,







POINTER_DIFF_EXPR,



MULT_HIGHPART_EXPR,


TRUNC_DIV_EXPR,


CEIL_DIV_EXPR,


FLOOR_DIV_EXPR,


ROUND_DIV_EXPR,




TRUNC_MOD_EXPR,


CEIL_MOD_EXPR,


FLOOR_MOD_EXPR,


ROUND_MOD_EXPR,


RDIV_EXPR,



EXACT_DIV_EXPR,


FIX_TRUNC_EXPR,


FLOAT_EXPR,


NEGATE_EXPR,




MIN_EXPR,
MAX_EXPR,





ABS_EXPR,




ABSU_EXPR,
# 768 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
LSHIFT_EXPR,
RSHIFT_EXPR,
LROTATE_EXPR,
RROTATE_EXPR,


BIT_IOR_EXPR,
BIT_XOR_EXPR,
BIT_AND_EXPR,
BIT_NOT_EXPR,
# 788 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
TRUTH_ANDIF_EXPR,
TRUTH_ORIF_EXPR,
TRUTH_AND_EXPR,
TRUTH_OR_EXPR,
TRUTH_XOR_EXPR,
TRUTH_NOT_EXPR,
# 807 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
LT_EXPR,
LE_EXPR,
GT_EXPR,
GE_EXPR,
LTGT_EXPR,
EQ_EXPR,
NE_EXPR,


UNORDERED_EXPR,
ORDERED_EXPR,


UNLT_EXPR,
UNLE_EXPR,
UNGT_EXPR,
UNGE_EXPR,
UNEQ_EXPR,

RANGE_EXPR,



PAREN_EXPR,




CONVERT_EXPR,



ADDR_SPACE_CONVERT_EXPR,




FIXED_CONVERT_EXPR,


NOP_EXPR,


NON_LVALUE_EXPR,






COMPOUND_LITERAL_EXPR,




SAVE_EXPR,



ADDR_EXPR,



FDESC_EXPR,
# 885 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BIT_INSERT_EXPR,



COMPLEX_EXPR,


CONJ_EXPR,




PREDECREMENT_EXPR,
PREINCREMENT_EXPR,
POSTDECREMENT_EXPR,
POSTINCREMENT_EXPR,


VA_ARG_EXPR,






TRY_CATCH_EXPR,




TRY_FINALLY_EXPR,






EH_ELSE_EXPR,





DECL_EXPR,




LABEL_EXPR,



GOTO_EXPR,






RETURN_EXPR,



EXIT_EXPR,




LOOP_EXPR,
# 965 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
SWITCH_EXPR,
# 977 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
CASE_LABEL_EXPR,






ASM_EXPR,




SSA_NAME,



CATCH_EXPR,




EH_FILTER_EXPR,



SCEV_KNOWN,



SCEV_NOT_KNOWN,



POLYNOMIAL_CHREC,



STATEMENT_LIST,
# 1033 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ASSERT_EXPR,



TREE_BINFO,






WITH_SIZE_EXPR,
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
REALIGN_LOAD_EXPR,
# 1071 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
TARGET_MEM_REF,
# 1081 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
MEM_REF,
# 1090 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OACC_PARALLEL,





OACC_KERNELS,





OACC_SERIAL,





OACC_DATA,





OACC_HOST_DATA,





OMP_PARALLEL,





OMP_TASK,
# 1152 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OMP_FOR,



OMP_SIMD,



OMP_DISTRIBUTE,



OMP_TASKLOOP,



OMP_LOOP,



OACC_LOOP,




OMP_TEAMS,




OMP_TARGET_DATA,




OMP_TARGET,




OMP_SECTIONS,




OMP_ORDERED,





OMP_CRITICAL,




OMP_SINGLE,




OMP_TASKGROUP,




OMP_SCAN,



OMP_SECTION,



OMP_MASTER,




OACC_CACHE,



OACC_DECLARE,



OACC_ENTER_DATA,



OACC_EXIT_DATA,



OACC_UPDATE,



OMP_TARGET_UPDATE,



OMP_TARGET_ENTER_DATA,



OMP_TARGET_EXIT_DATA,
# 1270 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OMP_ATOMIC,




OMP_ATOMIC_READ,
# 1285 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OMP_ATOMIC_CAPTURE_OLD,
OMP_ATOMIC_CAPTURE_NEW,


OMP_CLAUSE,



TRANSACTION_EXPR,
# 1304 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
DOT_PROD_EXPR,
# 1313 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
WIDEN_SUM_EXPR,
# 1329 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
SAD_EXPR,






WIDEN_MULT_EXPR,
# 1345 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
WIDEN_MULT_PLUS_EXPR,


WIDEN_MULT_MINUS_EXPR,
# 1361 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
WIDEN_LSHIFT_EXPR,






VEC_WIDEN_MULT_HI_EXPR,
VEC_WIDEN_MULT_LO_EXPR,


VEC_WIDEN_MULT_EVEN_EXPR,
VEC_WIDEN_MULT_ODD_EXPR,





VEC_UNPACK_HI_EXPR,
VEC_UNPACK_LO_EXPR,





VEC_UNPACK_FLOAT_HI_EXPR,
VEC_UNPACK_FLOAT_LO_EXPR,





VEC_UNPACK_FIX_TRUNC_HI_EXPR,

VEC_UNPACK_FIX_TRUNC_LO_EXPR,






VEC_PACK_TRUNC_EXPR,
VEC_PACK_SAT_EXPR,





VEC_PACK_FIX_TRUNC_EXPR,





VEC_PACK_FLOAT_EXPR,
# 1424 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_WIDEN_LSHIFT_HI_EXPR,
VEC_WIDEN_LSHIFT_LO_EXPR,






PREDICT_EXPR,


OPTIMIZATION_NODE,


TARGET_OPTION_NODE,





ANNOTATE_EXPR,
# 227 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
MAX_TREE_CODES
};



enum built_in_function {
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 1
# 282 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
BUILT_IN_NONE,


BUILT_IN_ACOS,
BUILT_IN_ACOSF,
BUILT_IN_ACOSH,
BUILT_IN_ACOSHF,
BUILT_IN_ACOSHL,
BUILT_IN_ACOSL,
BUILT_IN_ALIGNED_ALLOC,
BUILT_IN_ASIN,
BUILT_IN_ASINF,
BUILT_IN_ASINH,
BUILT_IN_ASINHF,
BUILT_IN_ASINHL,
BUILT_IN_ASINL,
BUILT_IN_ATAN,
BUILT_IN_ATAN2,
BUILT_IN_ATAN2F,
BUILT_IN_ATAN2L,
BUILT_IN_ATANF,
BUILT_IN_ATANH,
BUILT_IN_ATANHF,
BUILT_IN_ATANHL,
BUILT_IN_ATANL,
BUILT_IN_CBRT,
BUILT_IN_CBRTF,
BUILT_IN_CBRTL,
BUILT_IN_CEIL,
BUILT_IN_CEILF,
BUILT_IN_CEILL,

BUILT_IN_CEILF16, BUILT_IN_CEILF32, BUILT_IN_CEILF64, BUILT_IN_CEILF128, BUILT_IN_CEILF32X, BUILT_IN_CEILF64X, BUILT_IN_CEILF128X,

BUILT_IN_COPYSIGN,
BUILT_IN_COPYSIGNF,
BUILT_IN_COPYSIGNL,

BUILT_IN_COPYSIGNF16, BUILT_IN_COPYSIGNF32, BUILT_IN_COPYSIGNF64, BUILT_IN_COPYSIGNF128, BUILT_IN_COPYSIGNF32X, BUILT_IN_COPYSIGNF64X, BUILT_IN_COPYSIGNF128X,

BUILT_IN_COS,
BUILT_IN_COSF,
BUILT_IN_COSH,
BUILT_IN_COSHF,
BUILT_IN_COSHL,
BUILT_IN_COSL,
BUILT_IN_DREM,
BUILT_IN_DREMF,
BUILT_IN_DREML,
BUILT_IN_ERF,
BUILT_IN_ERFC,
BUILT_IN_ERFCF,
BUILT_IN_ERFCL,
BUILT_IN_ERFF,
BUILT_IN_ERFL,
BUILT_IN_EXP,
BUILT_IN_EXP10,
BUILT_IN_EXP10F,
BUILT_IN_EXP10L,
BUILT_IN_EXP2,
BUILT_IN_EXP2F,
BUILT_IN_EXP2L,
BUILT_IN_EXPF,
BUILT_IN_EXPL,
BUILT_IN_EXPM1,
BUILT_IN_EXPM1F,
BUILT_IN_EXPM1L,
BUILT_IN_FABS,
BUILT_IN_FABSF,
BUILT_IN_FABSL,

BUILT_IN_FABSF16, BUILT_IN_FABSF32, BUILT_IN_FABSF64, BUILT_IN_FABSF128, BUILT_IN_FABSF32X, BUILT_IN_FABSF64X, BUILT_IN_FABSF128X,

BUILT_IN_FABSD32,
BUILT_IN_FABSD64,
BUILT_IN_FABSD128,
BUILT_IN_FDIM,
BUILT_IN_FDIMF,
BUILT_IN_FDIML,
BUILT_IN_FECLEAREXCEPT,
BUILT_IN_FEGETENV,
BUILT_IN_FEGETEXCEPTFLAG,
BUILT_IN_FEGETROUND,
BUILT_IN_FEHOLDEXCEPT,
BUILT_IN_FERAISEEXCEPT,
BUILT_IN_FESETENV,
BUILT_IN_FESETEXCEPTFLAG,
BUILT_IN_FESETROUND,
BUILT_IN_FETESTEXCEPT,
BUILT_IN_FEUPDATEENV,
BUILT_IN_FLOOR,
BUILT_IN_FLOORF,
BUILT_IN_FLOORL,

BUILT_IN_FLOORF16, BUILT_IN_FLOORF32, BUILT_IN_FLOORF64, BUILT_IN_FLOORF128, BUILT_IN_FLOORF32X, BUILT_IN_FLOORF64X, BUILT_IN_FLOORF128X,

BUILT_IN_FMA,
BUILT_IN_FMAF,
BUILT_IN_FMAL,

BUILT_IN_FMAF16, BUILT_IN_FMAF32, BUILT_IN_FMAF64, BUILT_IN_FMAF128, BUILT_IN_FMAF32X, BUILT_IN_FMAF64X, BUILT_IN_FMAF128X,

BUILT_IN_FMAX,
BUILT_IN_FMAXF,
BUILT_IN_FMAXL,

BUILT_IN_FMAXF16, BUILT_IN_FMAXF32, BUILT_IN_FMAXF64, BUILT_IN_FMAXF128, BUILT_IN_FMAXF32X, BUILT_IN_FMAXF64X, BUILT_IN_FMAXF128X,

BUILT_IN_FMIN,
BUILT_IN_FMINF,
BUILT_IN_FMINL,

BUILT_IN_FMINF16, BUILT_IN_FMINF32, BUILT_IN_FMINF64, BUILT_IN_FMINF128, BUILT_IN_FMINF32X, BUILT_IN_FMINF64X, BUILT_IN_FMINF128X,

BUILT_IN_FMOD,
BUILT_IN_FMODF,
BUILT_IN_FMODL,
BUILT_IN_FREXP,
BUILT_IN_FREXPF,
BUILT_IN_FREXPL,
BUILT_IN_GAMMA,
BUILT_IN_GAMMAF,
BUILT_IN_GAMMAL,
BUILT_IN_GAMMA_R,
BUILT_IN_GAMMAF_R,
BUILT_IN_GAMMAL_R,
BUILT_IN_HUGE_VAL,
BUILT_IN_HUGE_VALF,
BUILT_IN_HUGE_VALL,

BUILT_IN_HUGE_VALF16, BUILT_IN_HUGE_VALF32, BUILT_IN_HUGE_VALF64, BUILT_IN_HUGE_VALF128, BUILT_IN_HUGE_VALF32X, BUILT_IN_HUGE_VALF64X, BUILT_IN_HUGE_VALF128X,
BUILT_IN_HYPOT,
BUILT_IN_HYPOTF,
BUILT_IN_HYPOTL,
BUILT_IN_ICEIL,
BUILT_IN_ICEILF,
BUILT_IN_ICEILL,
BUILT_IN_IFLOOR,
BUILT_IN_IFLOORF,
BUILT_IN_IFLOORL,
BUILT_IN_ILOGB,
BUILT_IN_ILOGBF,
BUILT_IN_ILOGBL,
BUILT_IN_INF,
BUILT_IN_INFF,
BUILT_IN_INFL,
BUILT_IN_INFF16, BUILT_IN_INFF32, BUILT_IN_INFF64, BUILT_IN_INFF128, BUILT_IN_INFF32X, BUILT_IN_INFF64X, BUILT_IN_INFF128X,

BUILT_IN_INFD32,
BUILT_IN_INFD64,
BUILT_IN_INFD128,
BUILT_IN_IRINT,
BUILT_IN_IRINTF,
BUILT_IN_IRINTL,
BUILT_IN_IROUND,
BUILT_IN_IROUNDF,
BUILT_IN_IROUNDL,
BUILT_IN_J0,
BUILT_IN_J0F,
BUILT_IN_J0L,
BUILT_IN_J1,
BUILT_IN_J1F,
BUILT_IN_J1L,
BUILT_IN_JN,
BUILT_IN_JNF,
BUILT_IN_JNL,
BUILT_IN_LCEIL,
BUILT_IN_LCEILF,
BUILT_IN_LCEILL,
BUILT_IN_LDEXP,
BUILT_IN_LDEXPF,
BUILT_IN_LDEXPL,
BUILT_IN_LFLOOR,
BUILT_IN_LFLOORF,
BUILT_IN_LFLOORL,
BUILT_IN_LGAMMA,
BUILT_IN_LGAMMAF,
BUILT_IN_LGAMMAL,
BUILT_IN_LGAMMA_R,
BUILT_IN_LGAMMAF_R,
BUILT_IN_LGAMMAL_R,
BUILT_IN_LLCEIL,
BUILT_IN_LLCEILF,
BUILT_IN_LLCEILL,
BUILT_IN_LLFLOOR,
BUILT_IN_LLFLOORF,
BUILT_IN_LLFLOORL,
BUILT_IN_LLRINT,
BUILT_IN_LLRINTF,
BUILT_IN_LLRINTL,
BUILT_IN_LLROUND,
BUILT_IN_LLROUNDF,
BUILT_IN_LLROUNDL,
BUILT_IN_LOG,
BUILT_IN_LOG10,
BUILT_IN_LOG10F,
BUILT_IN_LOG10L,
BUILT_IN_LOG1P,
BUILT_IN_LOG1PF,
BUILT_IN_LOG1PL,
BUILT_IN_LOG2,
BUILT_IN_LOG2F,
BUILT_IN_LOG2L,
BUILT_IN_LOGB,
BUILT_IN_LOGBF,
BUILT_IN_LOGBL,
BUILT_IN_LOGF,
BUILT_IN_LOGL,
BUILT_IN_LRINT,
BUILT_IN_LRINTF,
BUILT_IN_LRINTL,
BUILT_IN_LROUND,
BUILT_IN_LROUNDF,
BUILT_IN_LROUNDL,
BUILT_IN_MODF,
BUILT_IN_MODFF,
BUILT_IN_MODFL,
BUILT_IN_NAN,
BUILT_IN_NANF,
BUILT_IN_NANL,

BUILT_IN_NANF16, BUILT_IN_NANF32, BUILT_IN_NANF64, BUILT_IN_NANF128, BUILT_IN_NANF32X, BUILT_IN_NANF64X, BUILT_IN_NANF128X,
BUILT_IN_NAND32,
BUILT_IN_NAND64,
BUILT_IN_NAND128,
BUILT_IN_NANS,
BUILT_IN_NANSF,
BUILT_IN_NANSL,
BUILT_IN_NANSF16, BUILT_IN_NANSF32, BUILT_IN_NANSF64, BUILT_IN_NANSF128, BUILT_IN_NANSF32X, BUILT_IN_NANSF64X, BUILT_IN_NANSF128X,

BUILT_IN_NEARBYINT,
BUILT_IN_NEARBYINTF,
BUILT_IN_NEARBYINTL,

BUILT_IN_NEARBYINTF16, BUILT_IN_NEARBYINTF32, BUILT_IN_NEARBYINTF64, BUILT_IN_NEARBYINTF128, BUILT_IN_NEARBYINTF32X, BUILT_IN_NEARBYINTF64X, BUILT_IN_NEARBYINTF128X,

BUILT_IN_NEXTAFTER,
BUILT_IN_NEXTAFTERF,
BUILT_IN_NEXTAFTERL,
BUILT_IN_NEXTTOWARD,
BUILT_IN_NEXTTOWARDF,
BUILT_IN_NEXTTOWARDL,
BUILT_IN_POW,
BUILT_IN_POW10,
BUILT_IN_POW10F,
BUILT_IN_POW10L,
BUILT_IN_POWF,
BUILT_IN_POWI,
BUILT_IN_POWIF,
BUILT_IN_POWIL,
BUILT_IN_POWL,
BUILT_IN_REMAINDER,
BUILT_IN_REMAINDERF,
BUILT_IN_REMAINDERL,
BUILT_IN_REMQUO,
BUILT_IN_REMQUOF,
BUILT_IN_REMQUOL,
BUILT_IN_RINT,
BUILT_IN_RINTF,
BUILT_IN_RINTL,

BUILT_IN_RINTF16, BUILT_IN_RINTF32, BUILT_IN_RINTF64, BUILT_IN_RINTF128, BUILT_IN_RINTF32X, BUILT_IN_RINTF64X, BUILT_IN_RINTF128X,

BUILT_IN_ROUNDEVEN,
BUILT_IN_ROUNDEVENF,
BUILT_IN_ROUNDEVENL,
BUILT_IN_ROUND,
BUILT_IN_ROUNDF,
BUILT_IN_ROUNDL,

BUILT_IN_ROUNDF16, BUILT_IN_ROUNDF32, BUILT_IN_ROUNDF64, BUILT_IN_ROUNDF128, BUILT_IN_ROUNDF32X, BUILT_IN_ROUNDF64X, BUILT_IN_ROUNDF128X,


BUILT_IN_ROUNDEVENF16, BUILT_IN_ROUNDEVENF32, BUILT_IN_ROUNDEVENF64, BUILT_IN_ROUNDEVENF128, BUILT_IN_ROUNDEVENF32X, BUILT_IN_ROUNDEVENF64X, BUILT_IN_ROUNDEVENF128X,

BUILT_IN_SCALB,
BUILT_IN_SCALBF,
BUILT_IN_SCALBL,
BUILT_IN_SCALBLN,
BUILT_IN_SCALBLNF,
BUILT_IN_SCALBLNL,
BUILT_IN_SCALBN,
BUILT_IN_SCALBNF,
BUILT_IN_SCALBNL,
BUILT_IN_SIGNBIT,
BUILT_IN_SIGNBITF,
BUILT_IN_SIGNBITL,
BUILT_IN_SIGNBITD32,
BUILT_IN_SIGNBITD64,
BUILT_IN_SIGNBITD128,
BUILT_IN_SIGNIFICAND,
BUILT_IN_SIGNIFICANDF,
BUILT_IN_SIGNIFICANDL,
BUILT_IN_SIN,
BUILT_IN_SINCOS,
BUILT_IN_SINCOSF,
BUILT_IN_SINCOSL,
BUILT_IN_SINF,
BUILT_IN_SINH,
BUILT_IN_SINHF,
BUILT_IN_SINHL,
BUILT_IN_SINL,
BUILT_IN_SQRT,
BUILT_IN_SQRTF,
BUILT_IN_SQRTL,

BUILT_IN_SQRTF16, BUILT_IN_SQRTF32, BUILT_IN_SQRTF64, BUILT_IN_SQRTF128, BUILT_IN_SQRTF32X, BUILT_IN_SQRTF64X, BUILT_IN_SQRTF128X,

BUILT_IN_TAN,
BUILT_IN_TANF,
BUILT_IN_TANH,
BUILT_IN_TANHF,
BUILT_IN_TANHL,
BUILT_IN_TANL,
BUILT_IN_TGAMMA,
BUILT_IN_TGAMMAF,
BUILT_IN_TGAMMAL,
BUILT_IN_TRUNC,
BUILT_IN_TRUNCF,
BUILT_IN_TRUNCL,

BUILT_IN_TRUNCF16, BUILT_IN_TRUNCF32, BUILT_IN_TRUNCF64, BUILT_IN_TRUNCF128, BUILT_IN_TRUNCF32X, BUILT_IN_TRUNCF64X, BUILT_IN_TRUNCF128X,

BUILT_IN_Y0,
BUILT_IN_Y0F,
BUILT_IN_Y0L,
BUILT_IN_Y1,
BUILT_IN_Y1F,
BUILT_IN_Y1L,
BUILT_IN_YN,
BUILT_IN_YNF,
BUILT_IN_YNL,


BUILT_IN_CABS,
BUILT_IN_CABSF,
BUILT_IN_CABSL,
BUILT_IN_CACOS,
BUILT_IN_CACOSF,
BUILT_IN_CACOSH,
BUILT_IN_CACOSHF,
BUILT_IN_CACOSHL,
BUILT_IN_CACOSL,
BUILT_IN_CARG,
BUILT_IN_CARGF,
BUILT_IN_CARGL,
BUILT_IN_CASIN,
BUILT_IN_CASINF,
BUILT_IN_CASINH,
BUILT_IN_CASINHF,
BUILT_IN_CASINHL,
BUILT_IN_CASINL,
BUILT_IN_CATAN,
BUILT_IN_CATANF,
BUILT_IN_CATANH,
BUILT_IN_CATANHF,
BUILT_IN_CATANHL,
BUILT_IN_CATANL,
BUILT_IN_CCOS,
BUILT_IN_CCOSF,
BUILT_IN_CCOSH,
BUILT_IN_CCOSHF,
BUILT_IN_CCOSHL,
BUILT_IN_CCOSL,
BUILT_IN_CEXP,
BUILT_IN_CEXPF,
BUILT_IN_CEXPL,
BUILT_IN_CEXPI,
BUILT_IN_CEXPIF,
BUILT_IN_CEXPIL,
BUILT_IN_CIMAG,
BUILT_IN_CIMAGF,
BUILT_IN_CIMAGL,
BUILT_IN_CLOG,
BUILT_IN_CLOGF,
BUILT_IN_CLOGL,
BUILT_IN_CLOG10,
BUILT_IN_CLOG10F,
BUILT_IN_CLOG10L,
BUILT_IN_CONJ,
BUILT_IN_CONJF,
BUILT_IN_CONJL,
BUILT_IN_CPOW,
BUILT_IN_CPOWF,
BUILT_IN_CPOWL,
BUILT_IN_CPROJ,
BUILT_IN_CPROJF,
BUILT_IN_CPROJL,
BUILT_IN_CREAL,
BUILT_IN_CREALF,
BUILT_IN_CREALL,
BUILT_IN_CSIN,
BUILT_IN_CSINF,
BUILT_IN_CSINH,
BUILT_IN_CSINHF,
BUILT_IN_CSINHL,
BUILT_IN_CSINL,
BUILT_IN_CSQRT,
BUILT_IN_CSQRTF,
BUILT_IN_CSQRTL,
BUILT_IN_CTAN,
BUILT_IN_CTANF,
BUILT_IN_CTANH,
BUILT_IN_CTANHF,
BUILT_IN_CTANHL,
BUILT_IN_CTANL,


BUILT_IN_BCMP,
BUILT_IN_BCOPY,
BUILT_IN_BZERO,
BUILT_IN_INDEX,
BUILT_IN_MEMCHR,
BUILT_IN_MEMCMP,
BUILT_IN_MEMCPY,
BUILT_IN_MEMMOVE,
BUILT_IN_MEMPCPY,
BUILT_IN_MEMSET,
BUILT_IN_RINDEX,
BUILT_IN_STPCPY,
BUILT_IN_STPNCPY,
BUILT_IN_STRCASECMP,
BUILT_IN_STRCAT,
BUILT_IN_STRCHR,
BUILT_IN_STRCMP,
BUILT_IN_STRCPY,
BUILT_IN_STRCSPN,
BUILT_IN_STRDUP,
BUILT_IN_STRNDUP,
BUILT_IN_STRLEN,
BUILT_IN_STRNCASECMP,
BUILT_IN_STRNCAT,
BUILT_IN_STRNCMP,
BUILT_IN_STRNCPY,
BUILT_IN_STRNLEN,
BUILT_IN_STRPBRK,
BUILT_IN_STRRCHR,
BUILT_IN_STRSPN,
BUILT_IN_STRSTR,


BUILT_IN_FPRINTF,
BUILT_IN_FPRINTF_UNLOCKED,
BUILT_IN_PUTC,
BUILT_IN_PUTC_UNLOCKED,
BUILT_IN_FPUTC,
BUILT_IN_FPUTC_UNLOCKED,
BUILT_IN_FPUTS,
BUILT_IN_FPUTS_UNLOCKED,
BUILT_IN_FSCANF,
BUILT_IN_FWRITE,
BUILT_IN_FWRITE_UNLOCKED,
BUILT_IN_PRINTF,
BUILT_IN_PRINTF_UNLOCKED,
BUILT_IN_PUTCHAR,
BUILT_IN_PUTCHAR_UNLOCKED,
BUILT_IN_PUTS,
BUILT_IN_PUTS_UNLOCKED,
BUILT_IN_SCANF,
BUILT_IN_SNPRINTF,

BUILT_IN_SPRINTF,
BUILT_IN_SSCANF,
BUILT_IN_VFPRINTF,
BUILT_IN_VFSCANF,
BUILT_IN_VPRINTF,
BUILT_IN_VSCANF,
BUILT_IN_VSNPRINTF,
BUILT_IN_VSPRINTF,
BUILT_IN_VSSCANF,


BUILT_IN_ISALNUM,
BUILT_IN_ISALPHA,
BUILT_IN_ISASCII,
BUILT_IN_ISBLANK,
BUILT_IN_ISCNTRL,
BUILT_IN_ISDIGIT,
BUILT_IN_ISGRAPH,
BUILT_IN_ISLOWER,
BUILT_IN_ISPRINT,
BUILT_IN_ISPUNCT,
BUILT_IN_ISSPACE,
BUILT_IN_ISUPPER,
BUILT_IN_ISXDIGIT,
BUILT_IN_TOASCII,
BUILT_IN_TOLOWER,
BUILT_IN_TOUPPER,


BUILT_IN_ISWALNUM,
BUILT_IN_ISWALPHA,
BUILT_IN_ISWBLANK,
BUILT_IN_ISWCNTRL,
BUILT_IN_ISWDIGIT,
BUILT_IN_ISWGRAPH,
BUILT_IN_ISWLOWER,
BUILT_IN_ISWPRINT,
BUILT_IN_ISWPUNCT,
BUILT_IN_ISWSPACE,
BUILT_IN_ISWUPPER,
BUILT_IN_ISWXDIGIT,
BUILT_IN_TOWLOWER,
BUILT_IN_TOWUPPER,


BUILT_IN_ADD_OVERFLOW,
BUILT_IN_SUB_OVERFLOW,
BUILT_IN_MUL_OVERFLOW,
BUILT_IN_ADD_OVERFLOW_P,
BUILT_IN_SUB_OVERFLOW_P,
BUILT_IN_MUL_OVERFLOW_P,

BUILT_IN_SADD_OVERFLOW,
BUILT_IN_SADDL_OVERFLOW,
BUILT_IN_SADDLL_OVERFLOW,
BUILT_IN_SSUB_OVERFLOW,
BUILT_IN_SSUBL_OVERFLOW,
BUILT_IN_SSUBLL_OVERFLOW,
BUILT_IN_SMUL_OVERFLOW,
BUILT_IN_SMULL_OVERFLOW,
BUILT_IN_SMULLL_OVERFLOW,
BUILT_IN_UADD_OVERFLOW,
BUILT_IN_UADDL_OVERFLOW,
BUILT_IN_UADDLL_OVERFLOW,
BUILT_IN_USUB_OVERFLOW,
BUILT_IN_USUBL_OVERFLOW,
BUILT_IN_USUBLL_OVERFLOW,
BUILT_IN_UMUL_OVERFLOW,
BUILT_IN_UMULL_OVERFLOW,
BUILT_IN_UMULLL_OVERFLOW,


BUILT_IN_ABORT,
BUILT_IN_ABS,
BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
BUILT_IN_ALLOCA,
BUILT_IN_APPLY,
BUILT_IN_APPLY_ARGS,
BUILT_IN_BSWAP16,
BUILT_IN_BSWAP32,
BUILT_IN_BSWAP64,
BUILT_IN_BSWAP128,

BUILT_IN_CLEAR_CACHE,

BUILT_IN_CALLOC,
BUILT_IN_CLASSIFY_TYPE,
BUILT_IN_CLZ,
BUILT_IN_CLZIMAX,
BUILT_IN_CLZL,
BUILT_IN_CLZLL,
BUILT_IN_CONSTANT_P,
BUILT_IN_CTZ,
BUILT_IN_CTZIMAX,
BUILT_IN_CTZL,
BUILT_IN_CTZLL,
BUILT_IN_CLRSB,
BUILT_IN_CLRSBIMAX,
BUILT_IN_CLRSBL,
BUILT_IN_CLRSBLL,
BUILT_IN_DCGETTEXT,
BUILT_IN_DGETTEXT,
BUILT_IN_DWARF_CFA,
BUILT_IN_DWARF_SP_COLUMN,
BUILT_IN_EH_RETURN,
BUILT_IN_EH_RETURN_DATA_REGNO,
BUILT_IN_EXECL,
BUILT_IN_EXECLP,
BUILT_IN_EXECLE,
BUILT_IN_EXECV,
BUILT_IN_EXECVP,
BUILT_IN_EXECVE,
BUILT_IN_EXIT,
BUILT_IN_EXPECT,
BUILT_IN_EXPECT_WITH_PROBABILITY,
BUILT_IN_ASSUME_ALIGNED,
BUILT_IN_EXTEND_POINTER,
BUILT_IN_EXTRACT_RETURN_ADDR,
BUILT_IN_FFS,
BUILT_IN_FFSIMAX,
BUILT_IN_FFSL,
BUILT_IN_FFSLL,
BUILT_IN_FORK,
BUILT_IN_FRAME_ADDRESS,

BUILT_IN_FREE,
BUILT_IN_FROB_RETURN_ADDR,
BUILT_IN_GETTEXT,
BUILT_IN_IMAXABS,
BUILT_IN_INIT_DWARF_REG_SIZES,
BUILT_IN_FINITE,
BUILT_IN_FINITEF,
BUILT_IN_FINITEL,
BUILT_IN_FINITED32,
BUILT_IN_FINITED64,
BUILT_IN_FINITED128,
BUILT_IN_FPCLASSIFY,
BUILT_IN_ISFINITE,
BUILT_IN_ISINF_SIGN,
BUILT_IN_ISINF,
BUILT_IN_ISINFF,
BUILT_IN_ISINFL,
BUILT_IN_ISINFD32,
BUILT_IN_ISINFD64,
BUILT_IN_ISINFD128,
BUILT_IN_ISNAN,
BUILT_IN_ISNANF,
BUILT_IN_ISNANL,
BUILT_IN_ISNAND32,
BUILT_IN_ISNAND64,
BUILT_IN_ISNAND128,
BUILT_IN_ISNORMAL,
BUILT_IN_ISGREATER,
BUILT_IN_ISGREATEREQUAL,
BUILT_IN_ISLESS,
BUILT_IN_ISLESSEQUAL,
BUILT_IN_ISLESSGREATER,
BUILT_IN_ISUNORDERED,
BUILT_IN_LABS,
BUILT_IN_LLABS,
BUILT_IN_LONGJMP,

BUILT_IN_MALLOC,
BUILT_IN_NEXT_ARG,
BUILT_IN_PARITY,
BUILT_IN_PARITYIMAX,
BUILT_IN_PARITYL,
BUILT_IN_PARITYLL,
BUILT_IN_POPCOUNT,
BUILT_IN_POPCOUNTIMAX,
BUILT_IN_POPCOUNTL,
BUILT_IN_POPCOUNTLL,
BUILT_IN_POSIX_MEMALIGN,
BUILT_IN_PREFETCH,
BUILT_IN_REALLOC,
BUILT_IN_RETURN,
BUILT_IN_RETURN_ADDRESS,
BUILT_IN_SAVEREGS,
BUILT_IN_SETJMP,
BUILT_IN_STRFMON,
BUILT_IN_STRFTIME,
BUILT_IN_TRAP,
BUILT_IN_UNREACHABLE,
BUILT_IN_UNWIND_INIT,
BUILT_IN_UPDATE_SETJMP_BUF,
BUILT_IN_VA_COPY,
BUILT_IN_VA_END,
BUILT_IN_VA_START,
BUILT_IN_VA_ARG_PACK,
BUILT_IN_VA_ARG_PACK_LEN,
BUILT_IN__EXIT,
BUILT_IN__EXIT2,


BUILT_IN_INIT_TRAMPOLINE,
BUILT_IN_INIT_HEAP_TRAMPOLINE,
BUILT_IN_ADJUST_TRAMPOLINE,
BUILT_IN_INIT_DESCRIPTOR,
BUILT_IN_ADJUST_DESCRIPTOR,
BUILT_IN_NONLOCAL_GOTO,


BUILT_IN_SETJMP_SETUP,
BUILT_IN_SETJMP_RECEIVER,


BUILT_IN_STACK_SAVE,
BUILT_IN_STACK_RESTORE,
BUILT_IN_ALLOCA_WITH_ALIGN,
BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX,



BUILT_IN_MEMCMP_EQ,



BUILT_IN_STRCMP_EQ,
BUILT_IN_STRNCMP_EQ,


BUILT_IN_OBJECT_SIZE,
BUILT_IN_MEMCPY_CHK,
BUILT_IN_MEMMOVE_CHK,
BUILT_IN_MEMPCPY_CHK,
BUILT_IN_MEMSET_CHK,
BUILT_IN_STPCPY_CHK,
BUILT_IN_STPNCPY_CHK,
BUILT_IN_STRCAT_CHK,
BUILT_IN_STRCPY_CHK,
BUILT_IN_STRNCAT_CHK,
BUILT_IN_STRNCPY_CHK,
BUILT_IN_SNPRINTF_CHK,
BUILT_IN_SPRINTF_CHK,
BUILT_IN_VSNPRINTF_CHK,
BUILT_IN_VSPRINTF_CHK,
BUILT_IN_FPRINTF_CHK,
BUILT_IN_PRINTF_CHK,
BUILT_IN_VFPRINTF_CHK,
BUILT_IN_VPRINTF_CHK,


BUILT_IN_PROFILE_FUNC_ENTER,

BUILT_IN_PROFILE_FUNC_EXIT,



BUILT_IN_THREAD_POINTER,




BUILT_IN_SET_THREAD_POINTER,





BUILT_IN_EMUTLS_GET_ADDRESS,




BUILT_IN_EMUTLS_REGISTER_COMMON,
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
BUILT_IN_SPECULATION_SAFE_VALUE_N,


BUILT_IN_SPECULATION_SAFE_VALUE_PTR,


BUILT_IN_SPECULATION_SAFE_VALUE_1,

BUILT_IN_SPECULATION_SAFE_VALUE_2,

BUILT_IN_SPECULATION_SAFE_VALUE_4,

BUILT_IN_SPECULATION_SAFE_VALUE_8,

BUILT_IN_SPECULATION_SAFE_VALUE_16,




BUILT_IN_UNWIND_RESUME,
BUILT_IN_CXA_END_CLEANUP,
BUILT_IN_EH_POINTER,
BUILT_IN_EH_FILTER,
BUILT_IN_EH_COPY_VALUES,


BUILT_IN_FILE,
BUILT_IN_FUNCTION,
BUILT_IN_LINE,


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def"
BUILT_IN_SYNC_FETCH_AND_ADD_N,

BUILT_IN_SYNC_FETCH_AND_ADD_1,

BUILT_IN_SYNC_FETCH_AND_ADD_2,

BUILT_IN_SYNC_FETCH_AND_ADD_4,

BUILT_IN_SYNC_FETCH_AND_ADD_8,

BUILT_IN_SYNC_FETCH_AND_ADD_16,


BUILT_IN_SYNC_FETCH_AND_SUB_N,

BUILT_IN_SYNC_FETCH_AND_SUB_1,

BUILT_IN_SYNC_FETCH_AND_SUB_2,

BUILT_IN_SYNC_FETCH_AND_SUB_4,

BUILT_IN_SYNC_FETCH_AND_SUB_8,

BUILT_IN_SYNC_FETCH_AND_SUB_16,


BUILT_IN_SYNC_FETCH_AND_OR_N,

BUILT_IN_SYNC_FETCH_AND_OR_1,

BUILT_IN_SYNC_FETCH_AND_OR_2,

BUILT_IN_SYNC_FETCH_AND_OR_4,

BUILT_IN_SYNC_FETCH_AND_OR_8,

BUILT_IN_SYNC_FETCH_AND_OR_16,


BUILT_IN_SYNC_FETCH_AND_AND_N,

BUILT_IN_SYNC_FETCH_AND_AND_1,

BUILT_IN_SYNC_FETCH_AND_AND_2,

BUILT_IN_SYNC_FETCH_AND_AND_4,

BUILT_IN_SYNC_FETCH_AND_AND_8,

BUILT_IN_SYNC_FETCH_AND_AND_16,


BUILT_IN_SYNC_FETCH_AND_XOR_N,

BUILT_IN_SYNC_FETCH_AND_XOR_1,

BUILT_IN_SYNC_FETCH_AND_XOR_2,

BUILT_IN_SYNC_FETCH_AND_XOR_4,

BUILT_IN_SYNC_FETCH_AND_XOR_8,

BUILT_IN_SYNC_FETCH_AND_XOR_16,


BUILT_IN_SYNC_FETCH_AND_NAND_N,

BUILT_IN_SYNC_FETCH_AND_NAND_1,

BUILT_IN_SYNC_FETCH_AND_NAND_2,

BUILT_IN_SYNC_FETCH_AND_NAND_4,

BUILT_IN_SYNC_FETCH_AND_NAND_8,

BUILT_IN_SYNC_FETCH_AND_NAND_16,


BUILT_IN_SYNC_ADD_AND_FETCH_N,

BUILT_IN_SYNC_ADD_AND_FETCH_1,

BUILT_IN_SYNC_ADD_AND_FETCH_2,

BUILT_IN_SYNC_ADD_AND_FETCH_4,

BUILT_IN_SYNC_ADD_AND_FETCH_8,

BUILT_IN_SYNC_ADD_AND_FETCH_16,


BUILT_IN_SYNC_SUB_AND_FETCH_N,

BUILT_IN_SYNC_SUB_AND_FETCH_1,

BUILT_IN_SYNC_SUB_AND_FETCH_2,

BUILT_IN_SYNC_SUB_AND_FETCH_4,

BUILT_IN_SYNC_SUB_AND_FETCH_8,

BUILT_IN_SYNC_SUB_AND_FETCH_16,


BUILT_IN_SYNC_OR_AND_FETCH_N,

BUILT_IN_SYNC_OR_AND_FETCH_1,

BUILT_IN_SYNC_OR_AND_FETCH_2,

BUILT_IN_SYNC_OR_AND_FETCH_4,

BUILT_IN_SYNC_OR_AND_FETCH_8,

BUILT_IN_SYNC_OR_AND_FETCH_16,


BUILT_IN_SYNC_AND_AND_FETCH_N,

BUILT_IN_SYNC_AND_AND_FETCH_1,

BUILT_IN_SYNC_AND_AND_FETCH_2,

BUILT_IN_SYNC_AND_AND_FETCH_4,

BUILT_IN_SYNC_AND_AND_FETCH_8,

BUILT_IN_SYNC_AND_AND_FETCH_16,


BUILT_IN_SYNC_XOR_AND_FETCH_N,

BUILT_IN_SYNC_XOR_AND_FETCH_1,

BUILT_IN_SYNC_XOR_AND_FETCH_2,

BUILT_IN_SYNC_XOR_AND_FETCH_4,

BUILT_IN_SYNC_XOR_AND_FETCH_8,

BUILT_IN_SYNC_XOR_AND_FETCH_16,


BUILT_IN_SYNC_NAND_AND_FETCH_N,

BUILT_IN_SYNC_NAND_AND_FETCH_1,

BUILT_IN_SYNC_NAND_AND_FETCH_2,

BUILT_IN_SYNC_NAND_AND_FETCH_4,

BUILT_IN_SYNC_NAND_AND_FETCH_8,

BUILT_IN_SYNC_NAND_AND_FETCH_16,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16,



BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16,



BUILT_IN_SYNC_LOCK_TEST_AND_SET_N,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_1,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_2,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_4,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_8,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_16,



BUILT_IN_SYNC_LOCK_RELEASE_N,

BUILT_IN_SYNC_LOCK_RELEASE_1,

BUILT_IN_SYNC_LOCK_RELEASE_2,

BUILT_IN_SYNC_LOCK_RELEASE_4,

BUILT_IN_SYNC_LOCK_RELEASE_8,

BUILT_IN_SYNC_LOCK_RELEASE_16,


BUILT_IN_SYNC_SYNCHRONIZE,




BUILT_IN_ATOMIC_TEST_AND_SET,


BUILT_IN_ATOMIC_CLEAR,


BUILT_IN_ATOMIC_EXCHANGE,


BUILT_IN_ATOMIC_EXCHANGE_N,


BUILT_IN_ATOMIC_EXCHANGE_1,


BUILT_IN_ATOMIC_EXCHANGE_2,


BUILT_IN_ATOMIC_EXCHANGE_4,


BUILT_IN_ATOMIC_EXCHANGE_8,


BUILT_IN_ATOMIC_EXCHANGE_16,



BUILT_IN_ATOMIC_LOAD,



BUILT_IN_ATOMIC_LOAD_N,


BUILT_IN_ATOMIC_LOAD_1,


BUILT_IN_ATOMIC_LOAD_2,


BUILT_IN_ATOMIC_LOAD_4,


BUILT_IN_ATOMIC_LOAD_8,


BUILT_IN_ATOMIC_LOAD_16,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N,


BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16,




BUILT_IN_ATOMIC_STORE,


BUILT_IN_ATOMIC_STORE_N,


BUILT_IN_ATOMIC_STORE_1,


BUILT_IN_ATOMIC_STORE_2,


BUILT_IN_ATOMIC_STORE_4,


BUILT_IN_ATOMIC_STORE_8,


BUILT_IN_ATOMIC_STORE_16,



BUILT_IN_ATOMIC_ADD_FETCH_N,


BUILT_IN_ATOMIC_ADD_FETCH_1,


BUILT_IN_ATOMIC_ADD_FETCH_2,


BUILT_IN_ATOMIC_ADD_FETCH_4,


BUILT_IN_ATOMIC_ADD_FETCH_8,


BUILT_IN_ATOMIC_ADD_FETCH_16,



BUILT_IN_ATOMIC_SUB_FETCH_N,


BUILT_IN_ATOMIC_SUB_FETCH_1,


BUILT_IN_ATOMIC_SUB_FETCH_2,


BUILT_IN_ATOMIC_SUB_FETCH_4,


BUILT_IN_ATOMIC_SUB_FETCH_8,


BUILT_IN_ATOMIC_SUB_FETCH_16,



BUILT_IN_ATOMIC_AND_FETCH_N,


BUILT_IN_ATOMIC_AND_FETCH_1,


BUILT_IN_ATOMIC_AND_FETCH_2,


BUILT_IN_ATOMIC_AND_FETCH_4,


BUILT_IN_ATOMIC_AND_FETCH_8,


BUILT_IN_ATOMIC_AND_FETCH_16,



BUILT_IN_ATOMIC_NAND_FETCH_N,


BUILT_IN_ATOMIC_NAND_FETCH_1,


BUILT_IN_ATOMIC_NAND_FETCH_2,


BUILT_IN_ATOMIC_NAND_FETCH_4,


BUILT_IN_ATOMIC_NAND_FETCH_8,


BUILT_IN_ATOMIC_NAND_FETCH_16,



BUILT_IN_ATOMIC_XOR_FETCH_N,


BUILT_IN_ATOMIC_XOR_FETCH_1,


BUILT_IN_ATOMIC_XOR_FETCH_2,


BUILT_IN_ATOMIC_XOR_FETCH_4,


BUILT_IN_ATOMIC_XOR_FETCH_8,


BUILT_IN_ATOMIC_XOR_FETCH_16,



BUILT_IN_ATOMIC_OR_FETCH_N,


BUILT_IN_ATOMIC_OR_FETCH_1,


BUILT_IN_ATOMIC_OR_FETCH_2,


BUILT_IN_ATOMIC_OR_FETCH_4,


BUILT_IN_ATOMIC_OR_FETCH_8,


BUILT_IN_ATOMIC_OR_FETCH_16,



BUILT_IN_ATOMIC_FETCH_ADD_N,


BUILT_IN_ATOMIC_FETCH_ADD_1,


BUILT_IN_ATOMIC_FETCH_ADD_2,


BUILT_IN_ATOMIC_FETCH_ADD_4,


BUILT_IN_ATOMIC_FETCH_ADD_8,


BUILT_IN_ATOMIC_FETCH_ADD_16,



BUILT_IN_ATOMIC_FETCH_SUB_N,


BUILT_IN_ATOMIC_FETCH_SUB_1,


BUILT_IN_ATOMIC_FETCH_SUB_2,


BUILT_IN_ATOMIC_FETCH_SUB_4,


BUILT_IN_ATOMIC_FETCH_SUB_8,


BUILT_IN_ATOMIC_FETCH_SUB_16,



BUILT_IN_ATOMIC_FETCH_AND_N,


BUILT_IN_ATOMIC_FETCH_AND_1,


BUILT_IN_ATOMIC_FETCH_AND_2,


BUILT_IN_ATOMIC_FETCH_AND_4,


BUILT_IN_ATOMIC_FETCH_AND_8,


BUILT_IN_ATOMIC_FETCH_AND_16,



BUILT_IN_ATOMIC_FETCH_NAND_N,


BUILT_IN_ATOMIC_FETCH_NAND_1,


BUILT_IN_ATOMIC_FETCH_NAND_2,


BUILT_IN_ATOMIC_FETCH_NAND_4,


BUILT_IN_ATOMIC_FETCH_NAND_8,


BUILT_IN_ATOMIC_FETCH_NAND_16,



BUILT_IN_ATOMIC_FETCH_XOR_N,


BUILT_IN_ATOMIC_FETCH_XOR_1,


BUILT_IN_ATOMIC_FETCH_XOR_2,


BUILT_IN_ATOMIC_FETCH_XOR_4,


BUILT_IN_ATOMIC_FETCH_XOR_8,


BUILT_IN_ATOMIC_FETCH_XOR_16,




BUILT_IN_ATOMIC_FETCH_OR_N,


BUILT_IN_ATOMIC_FETCH_OR_1,


BUILT_IN_ATOMIC_FETCH_OR_2,


BUILT_IN_ATOMIC_FETCH_OR_4,


BUILT_IN_ATOMIC_FETCH_OR_8,


BUILT_IN_ATOMIC_FETCH_OR_16,



BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE,



BUILT_IN_ATOMIC_IS_LOCK_FREE,




BUILT_IN_ATOMIC_THREAD_FENCE,



BUILT_IN_ATOMIC_SIGNAL_FENCE,






BUILT_IN_ATOMIC_FERAISEEXCEPT,
# 1049 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def"
BUILT_IN_ACC_GET_DEVICE_TYPE,

BUILT_IN_GOACC_DATA_START,

BUILT_IN_GOACC_DATA_END,

BUILT_IN_GOACC_ENTER_EXIT_DATA,


BUILT_IN_GOACC_PARALLEL,


BUILT_IN_GOACC_UPDATE,


BUILT_IN_GOACC_WAIT,



BUILT_IN_ACC_ON_DEVICE,


BUILT_IN_GOACC_PARLEVEL_ID,

BUILT_IN_GOACC_PARLEVEL_SIZE,


BUILT_IN_OMP_GET_THREAD_NUM,

BUILT_IN_OMP_GET_NUM_THREADS,

BUILT_IN_OMP_GET_TEAM_NUM,

BUILT_IN_OMP_GET_NUM_TEAMS,


BUILT_IN_GOMP_ATOMIC_START,

BUILT_IN_GOMP_ATOMIC_END,

BUILT_IN_GOMP_BARRIER,

BUILT_IN_GOMP_BARRIER_CANCEL,

BUILT_IN_GOMP_TASKWAIT,

BUILT_IN_GOMP_TASKWAIT_DEPEND,

BUILT_IN_GOMP_TASKYIELD,

BUILT_IN_GOMP_TASKGROUP_START,

BUILT_IN_GOMP_TASKGROUP_END,

BUILT_IN_GOMP_CANCEL,

BUILT_IN_GOMP_CANCELLATION_POINT,

BUILT_IN_GOMP_CRITICAL_START,

BUILT_IN_GOMP_CRITICAL_END,

BUILT_IN_GOMP_CRITICAL_NAME_START,


BUILT_IN_GOMP_CRITICAL_NAME_END,





BUILT_IN_GOMP_LOOP_STATIC_START,



BUILT_IN_GOMP_LOOP_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_GUIDED_START,



BUILT_IN_GOMP_LOOP_RUNTIME_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START,



BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START,



BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START,



BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START,



BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START,



BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START,



BUILT_IN_GOMP_LOOP_START,



BUILT_IN_GOMP_LOOP_ORDERED_START,



BUILT_IN_GOMP_LOOP_DOACROSS_START,



BUILT_IN_GOMP_LOOP_STATIC_NEXT,

BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT,

BUILT_IN_GOMP_LOOP_GUIDED_NEXT,

BUILT_IN_GOMP_LOOP_RUNTIME_NEXT,

BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START,



BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT,





BUILT_IN_GOMP_PARALLEL_LOOP_STATIC,



BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC,



BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED,



BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME,



BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME,



BUILT_IN_GOMP_LOOP_END,

BUILT_IN_GOMP_LOOP_END_CANCEL,

BUILT_IN_GOMP_LOOP_END_NOWAIT,

BUILT_IN_GOMP_ORDERED_START,

BUILT_IN_GOMP_ORDERED_END,

BUILT_IN_GOMP_DOACROSS_POST,

BUILT_IN_GOMP_DOACROSS_WAIT,

BUILT_IN_GOMP_DOACROSS_ULL_POST,

BUILT_IN_GOMP_DOACROSS_ULL_WAIT,

BUILT_IN_GOMP_PARALLEL,

BUILT_IN_GOMP_PARALLEL_REDUCTIONS,


BUILT_IN_GOMP_TASK,


BUILT_IN_GOMP_TASKLOOP,


BUILT_IN_GOMP_TASKLOOP_ULL,


BUILT_IN_GOMP_SECTIONS_START,

BUILT_IN_GOMP_SECTIONS2_START,

BUILT_IN_GOMP_SECTIONS_NEXT,

BUILT_IN_GOMP_PARALLEL_SECTIONS,


BUILT_IN_GOMP_SECTIONS_END,

BUILT_IN_GOMP_SECTIONS_END_CANCEL,


BUILT_IN_GOMP_SECTIONS_END_NOWAIT,


BUILT_IN_GOMP_SINGLE_START,

BUILT_IN_GOMP_SINGLE_COPY_START,

BUILT_IN_GOMP_SINGLE_COPY_END,

BUILT_IN_GOMP_OFFLOAD_REGISTER,

BUILT_IN_GOMP_OFFLOAD_UNREGISTER,


BUILT_IN_GOMP_TARGET,


BUILT_IN_GOMP_TARGET_DATA,

BUILT_IN_GOMP_TARGET_END_DATA,

BUILT_IN_GOMP_TARGET_UPDATE,


BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA,


BUILT_IN_GOMP_TEAMS,

BUILT_IN_GOMP_TEAMS_REG,

BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER,


BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER,


BUILT_IN_GOMP_TASK_REDUCTION_REMAP,


BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER,


BUILT_IN_GOACC_DECLARE,
# 1052 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def" 1
BUILT_IN_TM_START,


BUILT_IN_TM_COMMIT,

BUILT_IN_TM_COMMIT_EH,

BUILT_IN_TM_ABORT,

BUILT_IN_TM_IRREVOCABLE,


BUILT_IN_TM_MEMCPY,

BUILT_IN_TM_MEMCPY_RNWT,

BUILT_IN_TM_MEMCPY_RTWN,

BUILT_IN_TM_MEMMOVE,

BUILT_IN_TM_MEMSET,


BUILT_IN_TM_GETTMCLONE_IRR,

BUILT_IN_TM_GETTMCLONE_SAFE,



BUILT_IN_TM_MALLOC,

BUILT_IN_TM_CALLOC,

BUILT_IN_TM_FREE,



BUILT_IN_TM_LOG_1,

BUILT_IN_TM_LOG_2,

BUILT_IN_TM_LOG_4,

BUILT_IN_TM_LOG_8,

BUILT_IN_TM_LOG_FLOAT,

BUILT_IN_TM_LOG_DOUBLE,

BUILT_IN_TM_LOG_LDOUBLE,

BUILT_IN_TM_LOG,



BUILT_IN_TM_LOG_M64,
BUILT_IN_TM_LOG_M128,
BUILT_IN_TM_LOG_M256,
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
BUILT_IN_TM_STORE_1,

BUILT_IN_TM_STORE_WAR_1,

BUILT_IN_TM_STORE_WAW_1,


BUILT_IN_TM_STORE_2,

BUILT_IN_TM_STORE_WAR_2,

BUILT_IN_TM_STORE_WAW_2,


BUILT_IN_TM_STORE_4,

BUILT_IN_TM_STORE_WAR_4,

BUILT_IN_TM_STORE_WAW_4,


BUILT_IN_TM_STORE_8,

BUILT_IN_TM_STORE_WAR_8,

BUILT_IN_TM_STORE_WAW_8,


BUILT_IN_TM_STORE_FLOAT,

BUILT_IN_TM_STORE_WAR_FLOAT,

BUILT_IN_TM_STORE_WAW_FLOAT,


BUILT_IN_TM_STORE_DOUBLE,

BUILT_IN_TM_STORE_WAR_DOUBLE,

BUILT_IN_TM_STORE_WAW_DOUBLE,



BUILT_IN_TM_STORE_M64,
BUILT_IN_TM_STORE_WAR_M64,
BUILT_IN_TM_STORE_WAW_M64,
BUILT_IN_TM_STORE_M128,
BUILT_IN_TM_STORE_WAR_M128,
BUILT_IN_TM_STORE_WAW_M128,
BUILT_IN_TM_STORE_M256,
BUILT_IN_TM_STORE_WAR_M256,
BUILT_IN_TM_STORE_WAW_M256,

BUILT_IN_TM_STORE_LDOUBLE,

BUILT_IN_TM_STORE_WAR_LDOUBLE,

BUILT_IN_TM_STORE_WAW_LDOUBLE,
# 133 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
BUILT_IN_TM_LOAD_1,

BUILT_IN_TM_LOAD_RAR_1,

BUILT_IN_TM_LOAD_RAW_1,

BUILT_IN_TM_LOAD_RFW_1,


BUILT_IN_TM_LOAD_2,

BUILT_IN_TM_LOAD_RAR_2,

BUILT_IN_TM_LOAD_RAW_2,

BUILT_IN_TM_LOAD_RFW_2,


BUILT_IN_TM_LOAD_4,

BUILT_IN_TM_LOAD_RAR_4,

BUILT_IN_TM_LOAD_RAW_4,

BUILT_IN_TM_LOAD_RFW_4,


BUILT_IN_TM_LOAD_8,

BUILT_IN_TM_LOAD_RAR_8,

BUILT_IN_TM_LOAD_RAW_8,

BUILT_IN_TM_LOAD_RFW_8,


BUILT_IN_TM_LOAD_FLOAT,

BUILT_IN_TM_LOAD_RAR_FLOAT,

BUILT_IN_TM_LOAD_RAW_FLOAT,

BUILT_IN_TM_LOAD_RFW_FLOAT,


BUILT_IN_TM_LOAD_DOUBLE,

BUILT_IN_TM_LOAD_RAR_DOUBLE,

BUILT_IN_TM_LOAD_RAW_DOUBLE,

BUILT_IN_TM_LOAD_RFW_DOUBLE,



BUILT_IN_TM_LOAD_M64,
BUILT_IN_TM_LOAD_RAR_M64,
BUILT_IN_TM_LOAD_RAW_M64,
BUILT_IN_TM_LOAD_RFW_M64,
BUILT_IN_TM_LOAD_M128,
BUILT_IN_TM_LOAD_RAR_M128,
BUILT_IN_TM_LOAD_RAW_M128,
BUILT_IN_TM_LOAD_RFW_M128,
BUILT_IN_TM_LOAD_M256,
BUILT_IN_TM_LOAD_RAR_M256,
BUILT_IN_TM_LOAD_RAW_M256,
BUILT_IN_TM_LOAD_RFW_M256,

BUILT_IN_TM_LOAD_LDOUBLE,

BUILT_IN_TM_LOAD_RAR_LDOUBLE,

BUILT_IN_TM_LOAD_RAW_LDOUBLE,

BUILT_IN_TM_LOAD_RFW_LDOUBLE,
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def"
BEGIN_SANITIZER_BUILTINS,


BUILT_IN_ASAN_INIT,

BUILT_IN_ASAN_VERSION_MISMATCH_CHECK,




BUILT_IN_ASAN_REPORT_LOAD1,

BUILT_IN_ASAN_REPORT_LOAD2,

BUILT_IN_ASAN_REPORT_LOAD4,

BUILT_IN_ASAN_REPORT_LOAD8,

BUILT_IN_ASAN_REPORT_LOAD16,

BUILT_IN_ASAN_REPORT_LOAD_N,


BUILT_IN_ASAN_REPORT_STORE1,

BUILT_IN_ASAN_REPORT_STORE2,

BUILT_IN_ASAN_REPORT_STORE4,

BUILT_IN_ASAN_REPORT_STORE8,

BUILT_IN_ASAN_REPORT_STORE16,

BUILT_IN_ASAN_REPORT_STORE_N,


BUILT_IN_ASAN_REPORT_LOAD1_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD2_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD4_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD8_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD16_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT,



BUILT_IN_ASAN_REPORT_STORE1_NOABORT,


BUILT_IN_ASAN_REPORT_STORE2_NOABORT,


BUILT_IN_ASAN_REPORT_STORE4_NOABORT,


BUILT_IN_ASAN_REPORT_STORE8_NOABORT,


BUILT_IN_ASAN_REPORT_STORE16_NOABORT,


BUILT_IN_ASAN_REPORT_STORE_N_NOABORT,



BUILT_IN_ASAN_LOAD1,

BUILT_IN_ASAN_LOAD2,

BUILT_IN_ASAN_LOAD4,

BUILT_IN_ASAN_LOAD8,

BUILT_IN_ASAN_LOAD16,

BUILT_IN_ASAN_LOADN,

BUILT_IN_ASAN_STORE1,

BUILT_IN_ASAN_STORE2,

BUILT_IN_ASAN_STORE4,

BUILT_IN_ASAN_STORE8,

BUILT_IN_ASAN_STORE16,

BUILT_IN_ASAN_STOREN,

BUILT_IN_ASAN_LOAD1_NOABORT,

BUILT_IN_ASAN_LOAD2_NOABORT,

BUILT_IN_ASAN_LOAD4_NOABORT,

BUILT_IN_ASAN_LOAD8_NOABORT,

BUILT_IN_ASAN_LOAD16_NOABORT,

BUILT_IN_ASAN_LOADN_NOABORT,

BUILT_IN_ASAN_STORE1_NOABORT,

BUILT_IN_ASAN_STORE2_NOABORT,

BUILT_IN_ASAN_STORE4_NOABORT,

BUILT_IN_ASAN_STORE8_NOABORT,

BUILT_IN_ASAN_STORE16_NOABORT,

BUILT_IN_ASAN_STOREN_NOABORT,

BUILT_IN_ASAN_REGISTER_GLOBALS,


BUILT_IN_ASAN_UNREGISTER_GLOBALS,


BUILT_IN_ASAN_HANDLE_NO_RETURN,


BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT,


BUILT_IN_ASAN_AFTER_DYNAMIC_INIT,


BUILT_IN_ASAN_POISON_STACK_MEMORY,


BUILT_IN_ASAN_UNPOISON_STACK_MEMORY,


BUILT_IN_ASAN_ALLOCA_POISON,

BUILT_IN_ASAN_ALLOCAS_UNPOISON,

BUILT_IN_ASAN_POINTER_COMPARE,

BUILT_IN_ASAN_POINTER_SUBTRACT,



BUILT_IN_TSAN_INIT,

BUILT_IN_TSAN_FUNC_ENTRY,

BUILT_IN_TSAN_FUNC_EXIT,

BUILT_IN_TSAN_VPTR_UPDATE,

BUILT_IN_TSAN_READ1,

BUILT_IN_TSAN_READ2,

BUILT_IN_TSAN_READ4,

BUILT_IN_TSAN_READ8,

BUILT_IN_TSAN_READ16,

BUILT_IN_TSAN_WRITE1,

BUILT_IN_TSAN_WRITE2,

BUILT_IN_TSAN_WRITE4,

BUILT_IN_TSAN_WRITE8,

BUILT_IN_TSAN_WRITE16,

BUILT_IN_TSAN_READ_RANGE,

BUILT_IN_TSAN_WRITE_RANGE,


BUILT_IN_TSAN_VOLATILE_READ1,

BUILT_IN_TSAN_VOLATILE_READ2,

BUILT_IN_TSAN_VOLATILE_READ4,

BUILT_IN_TSAN_VOLATILE_READ8,

BUILT_IN_TSAN_VOLATILE_READ16,

BUILT_IN_TSAN_VOLATILE_WRITE1,

BUILT_IN_TSAN_VOLATILE_WRITE2,

BUILT_IN_TSAN_VOLATILE_WRITE4,

BUILT_IN_TSAN_VOLATILE_WRITE8,

BUILT_IN_TSAN_VOLATILE_WRITE16,


BUILT_IN_TSAN_ATOMIC8_LOAD,


BUILT_IN_TSAN_ATOMIC16_LOAD,


BUILT_IN_TSAN_ATOMIC32_LOAD,


BUILT_IN_TSAN_ATOMIC64_LOAD,


BUILT_IN_TSAN_ATOMIC128_LOAD,



BUILT_IN_TSAN_ATOMIC8_STORE,


BUILT_IN_TSAN_ATOMIC16_STORE,


BUILT_IN_TSAN_ATOMIC32_STORE,


BUILT_IN_TSAN_ATOMIC64_STORE,


BUILT_IN_TSAN_ATOMIC128_STORE,



BUILT_IN_TSAN_ATOMIC8_EXCHANGE,


BUILT_IN_TSAN_ATOMIC16_EXCHANGE,


BUILT_IN_TSAN_ATOMIC32_EXCHANGE,


BUILT_IN_TSAN_ATOMIC64_EXCHANGE,


BUILT_IN_TSAN_ATOMIC128_EXCHANGE,



BUILT_IN_TSAN_ATOMIC8_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC16_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC32_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC64_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC128_FETCH_ADD,



BUILT_IN_TSAN_ATOMIC8_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC16_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC32_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC64_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC128_FETCH_SUB,



BUILT_IN_TSAN_ATOMIC8_FETCH_AND,


BUILT_IN_TSAN_ATOMIC16_FETCH_AND,


BUILT_IN_TSAN_ATOMIC32_FETCH_AND,


BUILT_IN_TSAN_ATOMIC64_FETCH_AND,


BUILT_IN_TSAN_ATOMIC128_FETCH_AND,



BUILT_IN_TSAN_ATOMIC8_FETCH_OR,


BUILT_IN_TSAN_ATOMIC16_FETCH_OR,


BUILT_IN_TSAN_ATOMIC32_FETCH_OR,


BUILT_IN_TSAN_ATOMIC64_FETCH_OR,


BUILT_IN_TSAN_ATOMIC128_FETCH_OR,



BUILT_IN_TSAN_ATOMIC8_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC16_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC32_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC64_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC128_FETCH_XOR,



BUILT_IN_TSAN_ATOMIC8_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC16_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC32_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC64_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC128_FETCH_NAND,



BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG,




BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK,




BUILT_IN_TSAN_ATOMIC_THREAD_FENCE,


BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE,




BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS,



BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE,



BUILT_IN_UBSAN_HANDLE_MISSING_RETURN,



BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE,



BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1,



BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE,



BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT,



BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT,



BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT,



BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT,



BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS,



BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT,



BUILT_IN_UBSAN_HANDLE_NONNULL_ARG,



BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT,



BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1,



BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT,



BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN,



BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT,



BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS,



BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT,





BUILT_IN_SANITIZER_COV_TRACE_PC,


BUILT_IN_SANITIZER_COV_TRACE_CMP1,


BUILT_IN_SANITIZER_COV_TRACE_CMP2,


BUILT_IN_SANITIZER_COV_TRACE_CMP4,


BUILT_IN_SANITIZER_COV_TRACE_CMP8,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8,


BUILT_IN_SANITIZER_COV_TRACE_CMPF,


BUILT_IN_SANITIZER_COV_TRACE_CMPD,


BUILT_IN_SANITIZER_COV_TRACE_SWITCH,




END_SANITIZER_BUILTINS,
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def"
BEGIN_COROUTINE_BUILTINS,




BUILT_IN_CORO_PROMISE,



BUILT_IN_CORO_RESUME,


BUILT_IN_CORO_DESTROY,


BUILT_IN_CORO_DONE,



END_COROUTINE_BUILTINS,
# 1061 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 1103 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def" 1
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
BUILT_IN_HSAIL_WORKITEMABSID,



BUILT_IN_HSAIL_GRIDSIZE,



BUILT_IN_HSAIL_WORKITEMFLATABSID_U32,




BUILT_IN_HSAIL_WORKITEMFLATABSID_U64,




BUILT_IN_HSAIL_WORKITEMFLATID,



BUILT_IN_HSAIL_WORKITEMID,



BUILT_IN_HSAIL_WORKGROUPID,



BUILT_IN_HSAIL_CURRENTWORKITEMFLATID,




BUILT_IN_HSAIL_WORKITEMABSID_U64,



BUILT_IN_HSAIL_PACKETID,



BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64,




BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32,




BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE,




BUILT_IN_HSAIL_WORKGROUPSIZE,




BUILT_IN_HSAIL_DIM,



BUILT_IN_HSAIL_GRIDGROUPS,



BUILT_IN_HSAIL_BITEXTRACT_S32,



BUILT_IN_HSAIL_BITEXTRACT_U32,



BUILT_IN_HSAIL_BITEXTRACT_S64,



BUILT_IN_HSAIL_BITEXTRACT_U64,



BUILT_IN_HSAIL_BITINSERT_U32,



BUILT_IN_HSAIL_BITINSERT_U64,




BUILT_IN_HSAIL_BITMASK_B32,



BUILT_IN_HSAIL_BITMASK_B64,



BUILT_IN_HSAIL_BITREV_B32,



BUILT_IN_HSAIL_BITREV_B64,



BUILT_IN_HSAIL_BITSELECT_B32,



BUILT_IN_HSAIL_BITSELECT_U64,



BUILT_IN_HSAIL_FIRSTBIT_U32,



BUILT_IN_HSAIL_FIRSTBIT_S32,



BUILT_IN_HSAIL_FIRSTBIT_U64,



BUILT_IN_HSAIL_FIRSTBIT_S64,



BUILT_IN_HSAIL_LASTBIT_U32,



BUILT_IN_HSAIL_LASTBIT_U64,



BUILT_IN_HSAIL_BORROW_U32,



BUILT_IN_HSAIL_BORROW_U64,



BUILT_IN_HSAIL_CARRY_U32,



BUILT_IN_HSAIL_CARRY_U64,



BUILT_IN_HSAIL_REM_S32,



BUILT_IN_HSAIL_REM_S64,



BUILT_IN_HSAIL_MIN_F32,



BUILT_IN_HSAIL_MAX_F32,



BUILT_IN_HSAIL_MIN_F64,



BUILT_IN_HSAIL_MAX_F64,



BUILT_IN_HSAIL_CLASS_F32,



BUILT_IN_HSAIL_CLASS_F64,



BUILT_IN_HSAIL_CLASS_F32_F16,



BUILT_IN_HSAIL_FRACT_F32,



BUILT_IN_HSAIL_FRACT_F64,



BUILT_IN_HSAIL_BARRIER,



BUILT_IN_HSAIL_INITFBAR,



BUILT_IN_HSAIL_JOINFBAR,



BUILT_IN_HSAIL_WAITFBAR,



BUILT_IN_HSAIL_ARRIVEFBAR,



BUILT_IN_HSAIL_LEAVEFBAR,



BUILT_IN_HSAIL_RELEASEFBAR,



BUILT_IN_HSAIL_BITALIGN,



BUILT_IN_HSAIL_BYTEALIGN,



BUILT_IN_HSAIL_LERP,



BUILT_IN_HSAIL_PACKCVT,




BUILT_IN_HSAIL_UNPACKCVT,



BUILT_IN_HSAIL_SAD_U16X2,



BUILT_IN_HSAIL_SAD_U32,



BUILT_IN_HSAIL_SAD_U8X4,



BUILT_IN_HSAIL_SADHI_U8X4,




BUILT_IN_HSAIL_CLOCK,



BUILT_IN_HSAIL_CUID,



BUILT_IN_HSAIL_MAXCUID,



BUILT_IN_HSAIL_DEBUGTRAP,



BUILT_IN_HSAIL_GROUPBASEPTR,



BUILT_IN_HSAIL_KERNARGBASEPTR_U64,




BUILT_IN_HSAIL_KERNARGBASEPTR_U32,




BUILT_IN_HSAIL_ALLOCA,



BUILT_IN_HSAIL_LDQUEUEWRITEINDEX,




BUILT_IN_HSAIL_LDQUEUEREADINDEX,




BUILT_IN_HSAIL_STQUEUEWRITEINDEX,




BUILT_IN_HSAIL_STQUEUEREADINDEX,




BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX,




BUILT_IN_HSAIL_CASQUEUEWRITEINDEX,




BUILT_IN_HSAIL_SEGMENTP_GLOBAL,




BUILT_IN_HSAIL_SEGMENTP_GROUP,




BUILT_IN_HSAIL_SEGMENTP_PRIVATE,
# 392 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
BUILT_IN_HSAIL_ATOMIC_MIN_S32,



BUILT_IN_HSAIL_ATOMIC_MIN_S64,



BUILT_IN_HSAIL_ATOMIC_MIN_U32,



BUILT_IN_HSAIL_ATOMIC_MIN_U64,



BUILT_IN_HSAIL_ATOMIC_MAX_S32,



BUILT_IN_HSAIL_ATOMIC_MAX_S64,



BUILT_IN_HSAIL_ATOMIC_MAX_U32,



BUILT_IN_HSAIL_ATOMIC_MAX_U64,



BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32,




BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64,




BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32,




BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64,
# 449 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
BUILT_IN_HSAIL_SAT_ADD_U64,



BUILT_IN_HSAIL_SAT_ADD_S64,



BUILT_IN_HSAIL_SAT_ADD_U32,



BUILT_IN_HSAIL_SAT_ADD_S32,



BUILT_IN_HSAIL_SAT_ADD_U16,



BUILT_IN_HSAIL_SAT_ADD_S16,



BUILT_IN_HSAIL_SAT_ADD_U8,



BUILT_IN_HSAIL_SAT_ADD_S8,



BUILT_IN_HSAIL_SAT_SUB_U64,



BUILT_IN_HSAIL_SAT_SUB_S64,



BUILT_IN_HSAIL_SAT_SUB_U32,



BUILT_IN_HSAIL_SAT_SUB_S32,



BUILT_IN_HSAIL_SAT_SUB_U16,



BUILT_IN_HSAIL_SAT_SUB_S16,



BUILT_IN_HSAIL_SAT_SUB_U8,



BUILT_IN_HSAIL_SAT_SUB_S8,



BUILT_IN_HSAIL_SAT_MUL_U64,



BUILT_IN_HSAIL_SAT_MUL_S64,



BUILT_IN_HSAIL_SAT_MUL_U32,



BUILT_IN_HSAIL_SAT_MUL_S32,



BUILT_IN_HSAIL_SAT_MUL_U16,



BUILT_IN_HSAIL_SAT_MUL_S16,



BUILT_IN_HSAIL_SAT_MUL_U8,



BUILT_IN_HSAIL_SAT_MUL_S8,







BUILT_IN_HSAIL_FTZ_F32_F16,


BUILT_IN_HSAIL_FTZ_F32,


BUILT_IN_HSAIL_FTZ_F64,


BUILT_IN_HSAIL_PUSH_FRAME,


BUILT_IN_HSAIL_POP_FRAME,


BUILT_IN_HSAIL_SETWORKITEMID,


BUILT_IN_HSAIL_LAUNCH_WG_FUNC,



BUILT_IN_HSAIL_LAUNCH_KERNEL,



BUILT_IN_HSAIL_F32_TO_F16,


BUILT_IN_HSAIL_F16_TO_F32,







BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64,
# 1104 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
END_BUILTINS
};


enum internal_fn {
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def" 1
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def"
IFN_MASK_LOAD,
IFN_LOAD_LANES,
IFN_MASK_LOAD_LANES,


IFN_GATHER_LOAD,
IFN_MASK_GATHER_LOAD,


IFN_LEN_LOAD,

IFN_SCATTER_STORE,
IFN_MASK_SCATTER_STORE,


IFN_MASK_STORE,
IFN_STORE_LANES,
IFN_MASK_STORE_LANES,


IFN_VCOND,
IFN_VCONDU,
IFN_VCONDEQ,
IFN_VCOND_MASK,

IFN_LEN_STORE,

IFN_WHILE_ULT,
IFN_CHECK_RAW_PTRS,

IFN_CHECK_WAR_PTRS,


IFN_VEC_SHL_INSERT,


IFN_DIV_POW2,

IFN_FMS,
IFN_FNMA,
IFN_FNMS,

IFN_AVG_FLOOR,

IFN_AVG_CEIL,


IFN_MULHS,

IFN_MULHRS,


IFN_COND_ADD,
IFN_COND_SUB,
IFN_COND_MUL,
IFN_COND_DIV,

IFN_COND_MOD,

IFN_COND_RDIV,
IFN_COND_MIN,

IFN_COND_MAX,

IFN_COND_AND,

IFN_COND_IOR,

IFN_COND_XOR,

IFN_COND_SHL,

IFN_COND_SHR,


IFN_COND_FMA,
IFN_COND_FMS,
IFN_COND_FNMA,
IFN_COND_FNMS,

IFN_RSQRT,

IFN_REDUC_PLUS,

IFN_REDUC_MAX,

IFN_REDUC_MIN,

IFN_REDUC_AND,

IFN_REDUC_IOR,

IFN_REDUC_XOR,



IFN_EXTRACT_LAST,



IFN_FOLD_EXTRACT_LAST,


IFN_FOLD_LEFT_PLUS,


IFN_MASK_FOLD_LEFT_PLUS,



IFN_ACOS,
IFN_ACOSH,
IFN_ASIN,
IFN_ASINH,
IFN_ATAN,
IFN_ATANH,
IFN_COS,
IFN_COSH,
IFN_EXP,
IFN_EXP10,
IFN_EXP2,
IFN_EXPM1,
IFN_LOG,
IFN_LOG10,
IFN_LOG1P,
IFN_LOG2,
IFN_LOGB,
IFN_SIGNBIT,
IFN_SIGNIFICAND,
IFN_SIN,
IFN_SINH,
IFN_SQRT,
IFN_TAN,
IFN_TANH,


IFN_CEIL,
IFN_FLOOR,
IFN_NEARBYINT,
IFN_RINT,
IFN_ROUND,
IFN_ROUNDEVEN,
IFN_TRUNC,


IFN_ATAN2,
IFN_COPYSIGN,
IFN_FMOD,
IFN_HYPOT,
IFN_POW,
IFN_REMAINDER,
IFN_SCALB,
IFN_FMIN,
IFN_FMAX,
IFN_XORSIGN,


IFN_LDEXP,


IFN_FMA,


IFN_CLRSB,
IFN_CLZ,
IFN_CTZ,
IFN_FFS,
IFN_PARITY,
IFN_POPCOUNT,

IFN_GOMP_USE_SIMT,
IFN_GOMP_SIMT_ENTER,
IFN_GOMP_SIMT_ENTER_ALLOC,
IFN_GOMP_SIMT_EXIT,
IFN_GOMP_SIMT_LANE,
IFN_GOMP_SIMT_VF,
IFN_GOMP_SIMT_LAST_LANE,
IFN_GOMP_SIMT_ORDERED_PRED,
IFN_GOMP_SIMT_VOTE_ANY,
IFN_GOMP_SIMT_XCHG_BFLY,
IFN_GOMP_SIMT_XCHG_IDX,
IFN_GOMP_SIMD_LANE,
IFN_GOMP_SIMD_VF,
IFN_GOMP_SIMD_LAST_LANE,
IFN_GOMP_SIMD_ORDERED_START,
IFN_GOMP_SIMD_ORDERED_END,
IFN_LOOP_VECTORIZED,
IFN_LOOP_DIST_ALIAS,
IFN_ANNOTATE,
IFN_UBSAN_NULL,
IFN_UBSAN_BOUNDS,
IFN_UBSAN_VPTR,
IFN_UBSAN_CHECK_ADD,
IFN_UBSAN_CHECK_SUB,
IFN_UBSAN_CHECK_MUL,
IFN_UBSAN_PTR,
IFN_UBSAN_OBJECT_SIZE,
IFN_ABNORMAL_DISPATCHER,
IFN_BUILTIN_EXPECT,
IFN_ASAN_CHECK,
IFN_ASAN_MARK,
IFN_ASAN_POISON,
IFN_ASAN_POISON_USE,
IFN_ADD_OVERFLOW,
IFN_SUB_OVERFLOW,
IFN_MUL_OVERFLOW,
IFN_TSAN_FUNC_EXIT,
IFN_VA_ARG,
IFN_VEC_CONVERT,





IFN_UNIQUE,
IFN_PHI,







IFN_GOACC_DIM_SIZE,
IFN_GOACC_DIM_POS,


IFN_GOACC_LOOP,


IFN_GOACC_REDUCTION,



IFN_GOACC_TILE,



IFN_SET_EDOM,




IFN_ATOMIC_BIT_TEST_AND_SET,
IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT,
IFN_ATOMIC_BIT_TEST_AND_RESET,
IFN_ATOMIC_COMPARE_EXCHANGE,


IFN_FALLTHROUGH,


IFN_LAUNDER,


IFN_DIVMOD,


IFN_CO_ACTOR,
IFN_CO_YIELD,
IFN_CO_SUSPN,
IFN_CO_FRAME,


IFN_NOP,
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
  IFN_LAST
};

enum combined_fn {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 1
# 282 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
CFN_BUILT_IN_NONE = int (BUILT_IN_NONE),


CFN_BUILT_IN_ACOS = int (BUILT_IN_ACOS),
CFN_BUILT_IN_ACOSF = int (BUILT_IN_ACOSF),
CFN_BUILT_IN_ACOSH = int (BUILT_IN_ACOSH),
CFN_BUILT_IN_ACOSHF = int (BUILT_IN_ACOSHF),
CFN_BUILT_IN_ACOSHL = int (BUILT_IN_ACOSHL),
CFN_BUILT_IN_ACOSL = int (BUILT_IN_ACOSL),
CFN_BUILT_IN_ALIGNED_ALLOC = int (BUILT_IN_ALIGNED_ALLOC),
CFN_BUILT_IN_ASIN = int (BUILT_IN_ASIN),
CFN_BUILT_IN_ASINF = int (BUILT_IN_ASINF),
CFN_BUILT_IN_ASINH = int (BUILT_IN_ASINH),
CFN_BUILT_IN_ASINHF = int (BUILT_IN_ASINHF),
CFN_BUILT_IN_ASINHL = int (BUILT_IN_ASINHL),
CFN_BUILT_IN_ASINL = int (BUILT_IN_ASINL),
CFN_BUILT_IN_ATAN = int (BUILT_IN_ATAN),
CFN_BUILT_IN_ATAN2 = int (BUILT_IN_ATAN2),
CFN_BUILT_IN_ATAN2F = int (BUILT_IN_ATAN2F),
CFN_BUILT_IN_ATAN2L = int (BUILT_IN_ATAN2L),
CFN_BUILT_IN_ATANF = int (BUILT_IN_ATANF),
CFN_BUILT_IN_ATANH = int (BUILT_IN_ATANH),
CFN_BUILT_IN_ATANHF = int (BUILT_IN_ATANHF),
CFN_BUILT_IN_ATANHL = int (BUILT_IN_ATANHL),
CFN_BUILT_IN_ATANL = int (BUILT_IN_ATANL),
CFN_BUILT_IN_CBRT = int (BUILT_IN_CBRT),
CFN_BUILT_IN_CBRTF = int (BUILT_IN_CBRTF),
CFN_BUILT_IN_CBRTL = int (BUILT_IN_CBRTL),
CFN_BUILT_IN_CEIL = int (BUILT_IN_CEIL),
CFN_BUILT_IN_CEILF = int (BUILT_IN_CEILF),
CFN_BUILT_IN_CEILL = int (BUILT_IN_CEILL),

CFN_BUILT_IN_CEILF16 = int (BUILT_IN_CEILF16), CFN_BUILT_IN_CEILF32 = int (BUILT_IN_CEILF32), CFN_BUILT_IN_CEILF64 = int (BUILT_IN_CEILF64), CFN_BUILT_IN_CEILF128 = int (BUILT_IN_CEILF128), CFN_BUILT_IN_CEILF32X = int (BUILT_IN_CEILF32X), CFN_BUILT_IN_CEILF64X = int (BUILT_IN_CEILF64X), CFN_BUILT_IN_CEILF128X = int (BUILT_IN_CEILF128X),

CFN_BUILT_IN_COPYSIGN = int (BUILT_IN_COPYSIGN),
CFN_BUILT_IN_COPYSIGNF = int (BUILT_IN_COPYSIGNF),
CFN_BUILT_IN_COPYSIGNL = int (BUILT_IN_COPYSIGNL),

CFN_BUILT_IN_COPYSIGNF16 = int (BUILT_IN_COPYSIGNF16), CFN_BUILT_IN_COPYSIGNF32 = int (BUILT_IN_COPYSIGNF32), CFN_BUILT_IN_COPYSIGNF64 = int (BUILT_IN_COPYSIGNF64), CFN_BUILT_IN_COPYSIGNF128 = int (BUILT_IN_COPYSIGNF128), CFN_BUILT_IN_COPYSIGNF32X = int (BUILT_IN_COPYSIGNF32X), CFN_BUILT_IN_COPYSIGNF64X = int (BUILT_IN_COPYSIGNF64X), CFN_BUILT_IN_COPYSIGNF128X = int (BUILT_IN_COPYSIGNF128X),

CFN_BUILT_IN_COS = int (BUILT_IN_COS),
CFN_BUILT_IN_COSF = int (BUILT_IN_COSF),
CFN_BUILT_IN_COSH = int (BUILT_IN_COSH),
CFN_BUILT_IN_COSHF = int (BUILT_IN_COSHF),
CFN_BUILT_IN_COSHL = int (BUILT_IN_COSHL),
CFN_BUILT_IN_COSL = int (BUILT_IN_COSL),
CFN_BUILT_IN_DREM = int (BUILT_IN_DREM),
CFN_BUILT_IN_DREMF = int (BUILT_IN_DREMF),
CFN_BUILT_IN_DREML = int (BUILT_IN_DREML),
CFN_BUILT_IN_ERF = int (BUILT_IN_ERF),
CFN_BUILT_IN_ERFC = int (BUILT_IN_ERFC),
CFN_BUILT_IN_ERFCF = int (BUILT_IN_ERFCF),
CFN_BUILT_IN_ERFCL = int (BUILT_IN_ERFCL),
CFN_BUILT_IN_ERFF = int (BUILT_IN_ERFF),
CFN_BUILT_IN_ERFL = int (BUILT_IN_ERFL),
CFN_BUILT_IN_EXP = int (BUILT_IN_EXP),
CFN_BUILT_IN_EXP10 = int (BUILT_IN_EXP10),
CFN_BUILT_IN_EXP10F = int (BUILT_IN_EXP10F),
CFN_BUILT_IN_EXP10L = int (BUILT_IN_EXP10L),
CFN_BUILT_IN_EXP2 = int (BUILT_IN_EXP2),
CFN_BUILT_IN_EXP2F = int (BUILT_IN_EXP2F),
CFN_BUILT_IN_EXP2L = int (BUILT_IN_EXP2L),
CFN_BUILT_IN_EXPF = int (BUILT_IN_EXPF),
CFN_BUILT_IN_EXPL = int (BUILT_IN_EXPL),
CFN_BUILT_IN_EXPM1 = int (BUILT_IN_EXPM1),
CFN_BUILT_IN_EXPM1F = int (BUILT_IN_EXPM1F),
CFN_BUILT_IN_EXPM1L = int (BUILT_IN_EXPM1L),
CFN_BUILT_IN_FABS = int (BUILT_IN_FABS),
CFN_BUILT_IN_FABSF = int (BUILT_IN_FABSF),
CFN_BUILT_IN_FABSL = int (BUILT_IN_FABSL),

CFN_BUILT_IN_FABSF16 = int (BUILT_IN_FABSF16), CFN_BUILT_IN_FABSF32 = int (BUILT_IN_FABSF32), CFN_BUILT_IN_FABSF64 = int (BUILT_IN_FABSF64), CFN_BUILT_IN_FABSF128 = int (BUILT_IN_FABSF128), CFN_BUILT_IN_FABSF32X = int (BUILT_IN_FABSF32X), CFN_BUILT_IN_FABSF64X = int (BUILT_IN_FABSF64X), CFN_BUILT_IN_FABSF128X = int (BUILT_IN_FABSF128X),

CFN_BUILT_IN_FABSD32 = int (BUILT_IN_FABSD32),
CFN_BUILT_IN_FABSD64 = int (BUILT_IN_FABSD64),
CFN_BUILT_IN_FABSD128 = int (BUILT_IN_FABSD128),
CFN_BUILT_IN_FDIM = int (BUILT_IN_FDIM),
CFN_BUILT_IN_FDIMF = int (BUILT_IN_FDIMF),
CFN_BUILT_IN_FDIML = int (BUILT_IN_FDIML),
CFN_BUILT_IN_FECLEAREXCEPT = int (BUILT_IN_FECLEAREXCEPT),
CFN_BUILT_IN_FEGETENV = int (BUILT_IN_FEGETENV),
CFN_BUILT_IN_FEGETEXCEPTFLAG = int (BUILT_IN_FEGETEXCEPTFLAG),
CFN_BUILT_IN_FEGETROUND = int (BUILT_IN_FEGETROUND),
CFN_BUILT_IN_FEHOLDEXCEPT = int (BUILT_IN_FEHOLDEXCEPT),
CFN_BUILT_IN_FERAISEEXCEPT = int (BUILT_IN_FERAISEEXCEPT),
CFN_BUILT_IN_FESETENV = int (BUILT_IN_FESETENV),
CFN_BUILT_IN_FESETEXCEPTFLAG = int (BUILT_IN_FESETEXCEPTFLAG),
CFN_BUILT_IN_FESETROUND = int (BUILT_IN_FESETROUND),
CFN_BUILT_IN_FETESTEXCEPT = int (BUILT_IN_FETESTEXCEPT),
CFN_BUILT_IN_FEUPDATEENV = int (BUILT_IN_FEUPDATEENV),
CFN_BUILT_IN_FLOOR = int (BUILT_IN_FLOOR),
CFN_BUILT_IN_FLOORF = int (BUILT_IN_FLOORF),
CFN_BUILT_IN_FLOORL = int (BUILT_IN_FLOORL),

CFN_BUILT_IN_FLOORF16 = int (BUILT_IN_FLOORF16), CFN_BUILT_IN_FLOORF32 = int (BUILT_IN_FLOORF32), CFN_BUILT_IN_FLOORF64 = int (BUILT_IN_FLOORF64), CFN_BUILT_IN_FLOORF128 = int (BUILT_IN_FLOORF128), CFN_BUILT_IN_FLOORF32X = int (BUILT_IN_FLOORF32X), CFN_BUILT_IN_FLOORF64X = int (BUILT_IN_FLOORF64X), CFN_BUILT_IN_FLOORF128X = int (BUILT_IN_FLOORF128X),

CFN_BUILT_IN_FMA = int (BUILT_IN_FMA),
CFN_BUILT_IN_FMAF = int (BUILT_IN_FMAF),
CFN_BUILT_IN_FMAL = int (BUILT_IN_FMAL),

CFN_BUILT_IN_FMAF16 = int (BUILT_IN_FMAF16), CFN_BUILT_IN_FMAF32 = int (BUILT_IN_FMAF32), CFN_BUILT_IN_FMAF64 = int (BUILT_IN_FMAF64), CFN_BUILT_IN_FMAF128 = int (BUILT_IN_FMAF128), CFN_BUILT_IN_FMAF32X = int (BUILT_IN_FMAF32X), CFN_BUILT_IN_FMAF64X = int (BUILT_IN_FMAF64X), CFN_BUILT_IN_FMAF128X = int (BUILT_IN_FMAF128X),

CFN_BUILT_IN_FMAX = int (BUILT_IN_FMAX),
CFN_BUILT_IN_FMAXF = int (BUILT_IN_FMAXF),
CFN_BUILT_IN_FMAXL = int (BUILT_IN_FMAXL),

CFN_BUILT_IN_FMAXF16 = int (BUILT_IN_FMAXF16), CFN_BUILT_IN_FMAXF32 = int (BUILT_IN_FMAXF32), CFN_BUILT_IN_FMAXF64 = int (BUILT_IN_FMAXF64), CFN_BUILT_IN_FMAXF128 = int (BUILT_IN_FMAXF128), CFN_BUILT_IN_FMAXF32X = int (BUILT_IN_FMAXF32X), CFN_BUILT_IN_FMAXF64X = int (BUILT_IN_FMAXF64X), CFN_BUILT_IN_FMAXF128X = int (BUILT_IN_FMAXF128X),

CFN_BUILT_IN_FMIN = int (BUILT_IN_FMIN),
CFN_BUILT_IN_FMINF = int (BUILT_IN_FMINF),
CFN_BUILT_IN_FMINL = int (BUILT_IN_FMINL),

CFN_BUILT_IN_FMINF16 = int (BUILT_IN_FMINF16), CFN_BUILT_IN_FMINF32 = int (BUILT_IN_FMINF32), CFN_BUILT_IN_FMINF64 = int (BUILT_IN_FMINF64), CFN_BUILT_IN_FMINF128 = int (BUILT_IN_FMINF128), CFN_BUILT_IN_FMINF32X = int (BUILT_IN_FMINF32X), CFN_BUILT_IN_FMINF64X = int (BUILT_IN_FMINF64X), CFN_BUILT_IN_FMINF128X = int (BUILT_IN_FMINF128X),

CFN_BUILT_IN_FMOD = int (BUILT_IN_FMOD),
CFN_BUILT_IN_FMODF = int (BUILT_IN_FMODF),
CFN_BUILT_IN_FMODL = int (BUILT_IN_FMODL),
CFN_BUILT_IN_FREXP = int (BUILT_IN_FREXP),
CFN_BUILT_IN_FREXPF = int (BUILT_IN_FREXPF),
CFN_BUILT_IN_FREXPL = int (BUILT_IN_FREXPL),
CFN_BUILT_IN_GAMMA = int (BUILT_IN_GAMMA),
CFN_BUILT_IN_GAMMAF = int (BUILT_IN_GAMMAF),
CFN_BUILT_IN_GAMMAL = int (BUILT_IN_GAMMAL),
CFN_BUILT_IN_GAMMA_R = int (BUILT_IN_GAMMA_R),
CFN_BUILT_IN_GAMMAF_R = int (BUILT_IN_GAMMAF_R),
CFN_BUILT_IN_GAMMAL_R = int (BUILT_IN_GAMMAL_R),
CFN_BUILT_IN_HUGE_VAL = int (BUILT_IN_HUGE_VAL),
CFN_BUILT_IN_HUGE_VALF = int (BUILT_IN_HUGE_VALF),
CFN_BUILT_IN_HUGE_VALL = int (BUILT_IN_HUGE_VALL),

CFN_BUILT_IN_HUGE_VALF16 = int (BUILT_IN_HUGE_VALF16), CFN_BUILT_IN_HUGE_VALF32 = int (BUILT_IN_HUGE_VALF32), CFN_BUILT_IN_HUGE_VALF64 = int (BUILT_IN_HUGE_VALF64), CFN_BUILT_IN_HUGE_VALF128 = int (BUILT_IN_HUGE_VALF128), CFN_BUILT_IN_HUGE_VALF32X = int (BUILT_IN_HUGE_VALF32X), CFN_BUILT_IN_HUGE_VALF64X = int (BUILT_IN_HUGE_VALF64X), CFN_BUILT_IN_HUGE_VALF128X = int (BUILT_IN_HUGE_VALF128X),
CFN_BUILT_IN_HYPOT = int (BUILT_IN_HYPOT),
CFN_BUILT_IN_HYPOTF = int (BUILT_IN_HYPOTF),
CFN_BUILT_IN_HYPOTL = int (BUILT_IN_HYPOTL),
CFN_BUILT_IN_ICEIL = int (BUILT_IN_ICEIL),
CFN_BUILT_IN_ICEILF = int (BUILT_IN_ICEILF),
CFN_BUILT_IN_ICEILL = int (BUILT_IN_ICEILL),
CFN_BUILT_IN_IFLOOR = int (BUILT_IN_IFLOOR),
CFN_BUILT_IN_IFLOORF = int (BUILT_IN_IFLOORF),
CFN_BUILT_IN_IFLOORL = int (BUILT_IN_IFLOORL),
CFN_BUILT_IN_ILOGB = int (BUILT_IN_ILOGB),
CFN_BUILT_IN_ILOGBF = int (BUILT_IN_ILOGBF),
CFN_BUILT_IN_ILOGBL = int (BUILT_IN_ILOGBL),
CFN_BUILT_IN_INF = int (BUILT_IN_INF),
CFN_BUILT_IN_INFF = int (BUILT_IN_INFF),
CFN_BUILT_IN_INFL = int (BUILT_IN_INFL),
CFN_BUILT_IN_INFF16 = int (BUILT_IN_INFF16), CFN_BUILT_IN_INFF32 = int (BUILT_IN_INFF32), CFN_BUILT_IN_INFF64 = int (BUILT_IN_INFF64), CFN_BUILT_IN_INFF128 = int (BUILT_IN_INFF128), CFN_BUILT_IN_INFF32X = int (BUILT_IN_INFF32X), CFN_BUILT_IN_INFF64X = int (BUILT_IN_INFF64X), CFN_BUILT_IN_INFF128X = int (BUILT_IN_INFF128X),

CFN_BUILT_IN_INFD32 = int (BUILT_IN_INFD32),
CFN_BUILT_IN_INFD64 = int (BUILT_IN_INFD64),
CFN_BUILT_IN_INFD128 = int (BUILT_IN_INFD128),
CFN_BUILT_IN_IRINT = int (BUILT_IN_IRINT),
CFN_BUILT_IN_IRINTF = int (BUILT_IN_IRINTF),
CFN_BUILT_IN_IRINTL = int (BUILT_IN_IRINTL),
CFN_BUILT_IN_IROUND = int (BUILT_IN_IROUND),
CFN_BUILT_IN_IROUNDF = int (BUILT_IN_IROUNDF),
CFN_BUILT_IN_IROUNDL = int (BUILT_IN_IROUNDL),
CFN_BUILT_IN_J0 = int (BUILT_IN_J0),
CFN_BUILT_IN_J0F = int (BUILT_IN_J0F),
CFN_BUILT_IN_J0L = int (BUILT_IN_J0L),
CFN_BUILT_IN_J1 = int (BUILT_IN_J1),
CFN_BUILT_IN_J1F = int (BUILT_IN_J1F),
CFN_BUILT_IN_J1L = int (BUILT_IN_J1L),
CFN_BUILT_IN_JN = int (BUILT_IN_JN),
CFN_BUILT_IN_JNF = int (BUILT_IN_JNF),
CFN_BUILT_IN_JNL = int (BUILT_IN_JNL),
CFN_BUILT_IN_LCEIL = int (BUILT_IN_LCEIL),
CFN_BUILT_IN_LCEILF = int (BUILT_IN_LCEILF),
CFN_BUILT_IN_LCEILL = int (BUILT_IN_LCEILL),
CFN_BUILT_IN_LDEXP = int (BUILT_IN_LDEXP),
CFN_BUILT_IN_LDEXPF = int (BUILT_IN_LDEXPF),
CFN_BUILT_IN_LDEXPL = int (BUILT_IN_LDEXPL),
CFN_BUILT_IN_LFLOOR = int (BUILT_IN_LFLOOR),
CFN_BUILT_IN_LFLOORF = int (BUILT_IN_LFLOORF),
CFN_BUILT_IN_LFLOORL = int (BUILT_IN_LFLOORL),
CFN_BUILT_IN_LGAMMA = int (BUILT_IN_LGAMMA),
CFN_BUILT_IN_LGAMMAF = int (BUILT_IN_LGAMMAF),
CFN_BUILT_IN_LGAMMAL = int (BUILT_IN_LGAMMAL),
CFN_BUILT_IN_LGAMMA_R = int (BUILT_IN_LGAMMA_R),
CFN_BUILT_IN_LGAMMAF_R = int (BUILT_IN_LGAMMAF_R),
CFN_BUILT_IN_LGAMMAL_R = int (BUILT_IN_LGAMMAL_R),
CFN_BUILT_IN_LLCEIL = int (BUILT_IN_LLCEIL),
CFN_BUILT_IN_LLCEILF = int (BUILT_IN_LLCEILF),
CFN_BUILT_IN_LLCEILL = int (BUILT_IN_LLCEILL),
CFN_BUILT_IN_LLFLOOR = int (BUILT_IN_LLFLOOR),
CFN_BUILT_IN_LLFLOORF = int (BUILT_IN_LLFLOORF),
CFN_BUILT_IN_LLFLOORL = int (BUILT_IN_LLFLOORL),
CFN_BUILT_IN_LLRINT = int (BUILT_IN_LLRINT),
CFN_BUILT_IN_LLRINTF = int (BUILT_IN_LLRINTF),
CFN_BUILT_IN_LLRINTL = int (BUILT_IN_LLRINTL),
CFN_BUILT_IN_LLROUND = int (BUILT_IN_LLROUND),
CFN_BUILT_IN_LLROUNDF = int (BUILT_IN_LLROUNDF),
CFN_BUILT_IN_LLROUNDL = int (BUILT_IN_LLROUNDL),
CFN_BUILT_IN_LOG = int (BUILT_IN_LOG),
CFN_BUILT_IN_LOG10 = int (BUILT_IN_LOG10),
CFN_BUILT_IN_LOG10F = int (BUILT_IN_LOG10F),
CFN_BUILT_IN_LOG10L = int (BUILT_IN_LOG10L),
CFN_BUILT_IN_LOG1P = int (BUILT_IN_LOG1P),
CFN_BUILT_IN_LOG1PF = int (BUILT_IN_LOG1PF),
CFN_BUILT_IN_LOG1PL = int (BUILT_IN_LOG1PL),
CFN_BUILT_IN_LOG2 = int (BUILT_IN_LOG2),
CFN_BUILT_IN_LOG2F = int (BUILT_IN_LOG2F),
CFN_BUILT_IN_LOG2L = int (BUILT_IN_LOG2L),
CFN_BUILT_IN_LOGB = int (BUILT_IN_LOGB),
CFN_BUILT_IN_LOGBF = int (BUILT_IN_LOGBF),
CFN_BUILT_IN_LOGBL = int (BUILT_IN_LOGBL),
CFN_BUILT_IN_LOGF = int (BUILT_IN_LOGF),
CFN_BUILT_IN_LOGL = int (BUILT_IN_LOGL),
CFN_BUILT_IN_LRINT = int (BUILT_IN_LRINT),
CFN_BUILT_IN_LRINTF = int (BUILT_IN_LRINTF),
CFN_BUILT_IN_LRINTL = int (BUILT_IN_LRINTL),
CFN_BUILT_IN_LROUND = int (BUILT_IN_LROUND),
CFN_BUILT_IN_LROUNDF = int (BUILT_IN_LROUNDF),
CFN_BUILT_IN_LROUNDL = int (BUILT_IN_LROUNDL),
CFN_BUILT_IN_MODF = int (BUILT_IN_MODF),
CFN_BUILT_IN_MODFF = int (BUILT_IN_MODFF),
CFN_BUILT_IN_MODFL = int (BUILT_IN_MODFL),
CFN_BUILT_IN_NAN = int (BUILT_IN_NAN),
CFN_BUILT_IN_NANF = int (BUILT_IN_NANF),
CFN_BUILT_IN_NANL = int (BUILT_IN_NANL),

CFN_BUILT_IN_NANF16 = int (BUILT_IN_NANF16), CFN_BUILT_IN_NANF32 = int (BUILT_IN_NANF32), CFN_BUILT_IN_NANF64 = int (BUILT_IN_NANF64), CFN_BUILT_IN_NANF128 = int (BUILT_IN_NANF128), CFN_BUILT_IN_NANF32X = int (BUILT_IN_NANF32X), CFN_BUILT_IN_NANF64X = int (BUILT_IN_NANF64X), CFN_BUILT_IN_NANF128X = int (BUILT_IN_NANF128X),
CFN_BUILT_IN_NAND32 = int (BUILT_IN_NAND32),
CFN_BUILT_IN_NAND64 = int (BUILT_IN_NAND64),
CFN_BUILT_IN_NAND128 = int (BUILT_IN_NAND128),
CFN_BUILT_IN_NANS = int (BUILT_IN_NANS),
CFN_BUILT_IN_NANSF = int (BUILT_IN_NANSF),
CFN_BUILT_IN_NANSL = int (BUILT_IN_NANSL),
CFN_BUILT_IN_NANSF16 = int (BUILT_IN_NANSF16), CFN_BUILT_IN_NANSF32 = int (BUILT_IN_NANSF32), CFN_BUILT_IN_NANSF64 = int (BUILT_IN_NANSF64), CFN_BUILT_IN_NANSF128 = int (BUILT_IN_NANSF128), CFN_BUILT_IN_NANSF32X = int (BUILT_IN_NANSF32X), CFN_BUILT_IN_NANSF64X = int (BUILT_IN_NANSF64X), CFN_BUILT_IN_NANSF128X = int (BUILT_IN_NANSF128X),

CFN_BUILT_IN_NEARBYINT = int (BUILT_IN_NEARBYINT),
CFN_BUILT_IN_NEARBYINTF = int (BUILT_IN_NEARBYINTF),
CFN_BUILT_IN_NEARBYINTL = int (BUILT_IN_NEARBYINTL),

CFN_BUILT_IN_NEARBYINTF16 = int (BUILT_IN_NEARBYINTF16), CFN_BUILT_IN_NEARBYINTF32 = int (BUILT_IN_NEARBYINTF32), CFN_BUILT_IN_NEARBYINTF64 = int (BUILT_IN_NEARBYINTF64), CFN_BUILT_IN_NEARBYINTF128 = int (BUILT_IN_NEARBYINTF128), CFN_BUILT_IN_NEARBYINTF32X = int (BUILT_IN_NEARBYINTF32X), CFN_BUILT_IN_NEARBYINTF64X = int (BUILT_IN_NEARBYINTF64X), CFN_BUILT_IN_NEARBYINTF128X = int (BUILT_IN_NEARBYINTF128X),

CFN_BUILT_IN_NEXTAFTER = int (BUILT_IN_NEXTAFTER),
CFN_BUILT_IN_NEXTAFTERF = int (BUILT_IN_NEXTAFTERF),
CFN_BUILT_IN_NEXTAFTERL = int (BUILT_IN_NEXTAFTERL),
CFN_BUILT_IN_NEXTTOWARD = int (BUILT_IN_NEXTTOWARD),
CFN_BUILT_IN_NEXTTOWARDF = int (BUILT_IN_NEXTTOWARDF),
CFN_BUILT_IN_NEXTTOWARDL = int (BUILT_IN_NEXTTOWARDL),
CFN_BUILT_IN_POW = int (BUILT_IN_POW),
CFN_BUILT_IN_POW10 = int (BUILT_IN_POW10),
CFN_BUILT_IN_POW10F = int (BUILT_IN_POW10F),
CFN_BUILT_IN_POW10L = int (BUILT_IN_POW10L),
CFN_BUILT_IN_POWF = int (BUILT_IN_POWF),
CFN_BUILT_IN_POWI = int (BUILT_IN_POWI),
CFN_BUILT_IN_POWIF = int (BUILT_IN_POWIF),
CFN_BUILT_IN_POWIL = int (BUILT_IN_POWIL),
CFN_BUILT_IN_POWL = int (BUILT_IN_POWL),
CFN_BUILT_IN_REMAINDER = int (BUILT_IN_REMAINDER),
CFN_BUILT_IN_REMAINDERF = int (BUILT_IN_REMAINDERF),
CFN_BUILT_IN_REMAINDERL = int (BUILT_IN_REMAINDERL),
CFN_BUILT_IN_REMQUO = int (BUILT_IN_REMQUO),
CFN_BUILT_IN_REMQUOF = int (BUILT_IN_REMQUOF),
CFN_BUILT_IN_REMQUOL = int (BUILT_IN_REMQUOL),
CFN_BUILT_IN_RINT = int (BUILT_IN_RINT),
CFN_BUILT_IN_RINTF = int (BUILT_IN_RINTF),
CFN_BUILT_IN_RINTL = int (BUILT_IN_RINTL),

CFN_BUILT_IN_RINTF16 = int (BUILT_IN_RINTF16), CFN_BUILT_IN_RINTF32 = int (BUILT_IN_RINTF32), CFN_BUILT_IN_RINTF64 = int (BUILT_IN_RINTF64), CFN_BUILT_IN_RINTF128 = int (BUILT_IN_RINTF128), CFN_BUILT_IN_RINTF32X = int (BUILT_IN_RINTF32X), CFN_BUILT_IN_RINTF64X = int (BUILT_IN_RINTF64X), CFN_BUILT_IN_RINTF128X = int (BUILT_IN_RINTF128X),

CFN_BUILT_IN_ROUNDEVEN = int (BUILT_IN_ROUNDEVEN),
CFN_BUILT_IN_ROUNDEVENF = int (BUILT_IN_ROUNDEVENF),
CFN_BUILT_IN_ROUNDEVENL = int (BUILT_IN_ROUNDEVENL),
CFN_BUILT_IN_ROUND = int (BUILT_IN_ROUND),
CFN_BUILT_IN_ROUNDF = int (BUILT_IN_ROUNDF),
CFN_BUILT_IN_ROUNDL = int (BUILT_IN_ROUNDL),

CFN_BUILT_IN_ROUNDF16 = int (BUILT_IN_ROUNDF16), CFN_BUILT_IN_ROUNDF32 = int (BUILT_IN_ROUNDF32), CFN_BUILT_IN_ROUNDF64 = int (BUILT_IN_ROUNDF64), CFN_BUILT_IN_ROUNDF128 = int (BUILT_IN_ROUNDF128), CFN_BUILT_IN_ROUNDF32X = int (BUILT_IN_ROUNDF32X), CFN_BUILT_IN_ROUNDF64X = int (BUILT_IN_ROUNDF64X), CFN_BUILT_IN_ROUNDF128X = int (BUILT_IN_ROUNDF128X),


CFN_BUILT_IN_ROUNDEVENF16 = int (BUILT_IN_ROUNDEVENF16), CFN_BUILT_IN_ROUNDEVENF32 = int (BUILT_IN_ROUNDEVENF32), CFN_BUILT_IN_ROUNDEVENF64 = int (BUILT_IN_ROUNDEVENF64), CFN_BUILT_IN_ROUNDEVENF128 = int (BUILT_IN_ROUNDEVENF128), CFN_BUILT_IN_ROUNDEVENF32X = int (BUILT_IN_ROUNDEVENF32X), CFN_BUILT_IN_ROUNDEVENF64X = int (BUILT_IN_ROUNDEVENF64X), CFN_BUILT_IN_ROUNDEVENF128X = int (BUILT_IN_ROUNDEVENF128X),

CFN_BUILT_IN_SCALB = int (BUILT_IN_SCALB),
CFN_BUILT_IN_SCALBF = int (BUILT_IN_SCALBF),
CFN_BUILT_IN_SCALBL = int (BUILT_IN_SCALBL),
CFN_BUILT_IN_SCALBLN = int (BUILT_IN_SCALBLN),
CFN_BUILT_IN_SCALBLNF = int (BUILT_IN_SCALBLNF),
CFN_BUILT_IN_SCALBLNL = int (BUILT_IN_SCALBLNL),
CFN_BUILT_IN_SCALBN = int (BUILT_IN_SCALBN),
CFN_BUILT_IN_SCALBNF = int (BUILT_IN_SCALBNF),
CFN_BUILT_IN_SCALBNL = int (BUILT_IN_SCALBNL),
CFN_BUILT_IN_SIGNBIT = int (BUILT_IN_SIGNBIT),
CFN_BUILT_IN_SIGNBITF = int (BUILT_IN_SIGNBITF),
CFN_BUILT_IN_SIGNBITL = int (BUILT_IN_SIGNBITL),
CFN_BUILT_IN_SIGNBITD32 = int (BUILT_IN_SIGNBITD32),
CFN_BUILT_IN_SIGNBITD64 = int (BUILT_IN_SIGNBITD64),
CFN_BUILT_IN_SIGNBITD128 = int (BUILT_IN_SIGNBITD128),
CFN_BUILT_IN_SIGNIFICAND = int (BUILT_IN_SIGNIFICAND),
CFN_BUILT_IN_SIGNIFICANDF = int (BUILT_IN_SIGNIFICANDF),
CFN_BUILT_IN_SIGNIFICANDL = int (BUILT_IN_SIGNIFICANDL),
CFN_BUILT_IN_SIN = int (BUILT_IN_SIN),
CFN_BUILT_IN_SINCOS = int (BUILT_IN_SINCOS),
CFN_BUILT_IN_SINCOSF = int (BUILT_IN_SINCOSF),
CFN_BUILT_IN_SINCOSL = int (BUILT_IN_SINCOSL),
CFN_BUILT_IN_SINF = int (BUILT_IN_SINF),
CFN_BUILT_IN_SINH = int (BUILT_IN_SINH),
CFN_BUILT_IN_SINHF = int (BUILT_IN_SINHF),
CFN_BUILT_IN_SINHL = int (BUILT_IN_SINHL),
CFN_BUILT_IN_SINL = int (BUILT_IN_SINL),
CFN_BUILT_IN_SQRT = int (BUILT_IN_SQRT),
CFN_BUILT_IN_SQRTF = int (BUILT_IN_SQRTF),
CFN_BUILT_IN_SQRTL = int (BUILT_IN_SQRTL),

CFN_BUILT_IN_SQRTF16 = int (BUILT_IN_SQRTF16), CFN_BUILT_IN_SQRTF32 = int (BUILT_IN_SQRTF32), CFN_BUILT_IN_SQRTF64 = int (BUILT_IN_SQRTF64), CFN_BUILT_IN_SQRTF128 = int (BUILT_IN_SQRTF128), CFN_BUILT_IN_SQRTF32X = int (BUILT_IN_SQRTF32X), CFN_BUILT_IN_SQRTF64X = int (BUILT_IN_SQRTF64X), CFN_BUILT_IN_SQRTF128X = int (BUILT_IN_SQRTF128X),

CFN_BUILT_IN_TAN = int (BUILT_IN_TAN),
CFN_BUILT_IN_TANF = int (BUILT_IN_TANF),
CFN_BUILT_IN_TANH = int (BUILT_IN_TANH),
CFN_BUILT_IN_TANHF = int (BUILT_IN_TANHF),
CFN_BUILT_IN_TANHL = int (BUILT_IN_TANHL),
CFN_BUILT_IN_TANL = int (BUILT_IN_TANL),
CFN_BUILT_IN_TGAMMA = int (BUILT_IN_TGAMMA),
CFN_BUILT_IN_TGAMMAF = int (BUILT_IN_TGAMMAF),
CFN_BUILT_IN_TGAMMAL = int (BUILT_IN_TGAMMAL),
CFN_BUILT_IN_TRUNC = int (BUILT_IN_TRUNC),
CFN_BUILT_IN_TRUNCF = int (BUILT_IN_TRUNCF),
CFN_BUILT_IN_TRUNCL = int (BUILT_IN_TRUNCL),

CFN_BUILT_IN_TRUNCF16 = int (BUILT_IN_TRUNCF16), CFN_BUILT_IN_TRUNCF32 = int (BUILT_IN_TRUNCF32), CFN_BUILT_IN_TRUNCF64 = int (BUILT_IN_TRUNCF64), CFN_BUILT_IN_TRUNCF128 = int (BUILT_IN_TRUNCF128), CFN_BUILT_IN_TRUNCF32X = int (BUILT_IN_TRUNCF32X), CFN_BUILT_IN_TRUNCF64X = int (BUILT_IN_TRUNCF64X), CFN_BUILT_IN_TRUNCF128X = int (BUILT_IN_TRUNCF128X),

CFN_BUILT_IN_Y0 = int (BUILT_IN_Y0),
CFN_BUILT_IN_Y0F = int (BUILT_IN_Y0F),
CFN_BUILT_IN_Y0L = int (BUILT_IN_Y0L),
CFN_BUILT_IN_Y1 = int (BUILT_IN_Y1),
CFN_BUILT_IN_Y1F = int (BUILT_IN_Y1F),
CFN_BUILT_IN_Y1L = int (BUILT_IN_Y1L),
CFN_BUILT_IN_YN = int (BUILT_IN_YN),
CFN_BUILT_IN_YNF = int (BUILT_IN_YNF),
CFN_BUILT_IN_YNL = int (BUILT_IN_YNL),


CFN_BUILT_IN_CABS = int (BUILT_IN_CABS),
CFN_BUILT_IN_CABSF = int (BUILT_IN_CABSF),
CFN_BUILT_IN_CABSL = int (BUILT_IN_CABSL),
CFN_BUILT_IN_CACOS = int (BUILT_IN_CACOS),
CFN_BUILT_IN_CACOSF = int (BUILT_IN_CACOSF),
CFN_BUILT_IN_CACOSH = int (BUILT_IN_CACOSH),
CFN_BUILT_IN_CACOSHF = int (BUILT_IN_CACOSHF),
CFN_BUILT_IN_CACOSHL = int (BUILT_IN_CACOSHL),
CFN_BUILT_IN_CACOSL = int (BUILT_IN_CACOSL),
CFN_BUILT_IN_CARG = int (BUILT_IN_CARG),
CFN_BUILT_IN_CARGF = int (BUILT_IN_CARGF),
CFN_BUILT_IN_CARGL = int (BUILT_IN_CARGL),
CFN_BUILT_IN_CASIN = int (BUILT_IN_CASIN),
CFN_BUILT_IN_CASINF = int (BUILT_IN_CASINF),
CFN_BUILT_IN_CASINH = int (BUILT_IN_CASINH),
CFN_BUILT_IN_CASINHF = int (BUILT_IN_CASINHF),
CFN_BUILT_IN_CASINHL = int (BUILT_IN_CASINHL),
CFN_BUILT_IN_CASINL = int (BUILT_IN_CASINL),
CFN_BUILT_IN_CATAN = int (BUILT_IN_CATAN),
CFN_BUILT_IN_CATANF = int (BUILT_IN_CATANF),
CFN_BUILT_IN_CATANH = int (BUILT_IN_CATANH),
CFN_BUILT_IN_CATANHF = int (BUILT_IN_CATANHF),
CFN_BUILT_IN_CATANHL = int (BUILT_IN_CATANHL),
CFN_BUILT_IN_CATANL = int (BUILT_IN_CATANL),
CFN_BUILT_IN_CCOS = int (BUILT_IN_CCOS),
CFN_BUILT_IN_CCOSF = int (BUILT_IN_CCOSF),
CFN_BUILT_IN_CCOSH = int (BUILT_IN_CCOSH),
CFN_BUILT_IN_CCOSHF = int (BUILT_IN_CCOSHF),
CFN_BUILT_IN_CCOSHL = int (BUILT_IN_CCOSHL),
CFN_BUILT_IN_CCOSL = int (BUILT_IN_CCOSL),
CFN_BUILT_IN_CEXP = int (BUILT_IN_CEXP),
CFN_BUILT_IN_CEXPF = int (BUILT_IN_CEXPF),
CFN_BUILT_IN_CEXPL = int (BUILT_IN_CEXPL),
CFN_BUILT_IN_CEXPI = int (BUILT_IN_CEXPI),
CFN_BUILT_IN_CEXPIF = int (BUILT_IN_CEXPIF),
CFN_BUILT_IN_CEXPIL = int (BUILT_IN_CEXPIL),
CFN_BUILT_IN_CIMAG = int (BUILT_IN_CIMAG),
CFN_BUILT_IN_CIMAGF = int (BUILT_IN_CIMAGF),
CFN_BUILT_IN_CIMAGL = int (BUILT_IN_CIMAGL),
CFN_BUILT_IN_CLOG = int (BUILT_IN_CLOG),
CFN_BUILT_IN_CLOGF = int (BUILT_IN_CLOGF),
CFN_BUILT_IN_CLOGL = int (BUILT_IN_CLOGL),
CFN_BUILT_IN_CLOG10 = int (BUILT_IN_CLOG10),
CFN_BUILT_IN_CLOG10F = int (BUILT_IN_CLOG10F),
CFN_BUILT_IN_CLOG10L = int (BUILT_IN_CLOG10L),
CFN_BUILT_IN_CONJ = int (BUILT_IN_CONJ),
CFN_BUILT_IN_CONJF = int (BUILT_IN_CONJF),
CFN_BUILT_IN_CONJL = int (BUILT_IN_CONJL),
CFN_BUILT_IN_CPOW = int (BUILT_IN_CPOW),
CFN_BUILT_IN_CPOWF = int (BUILT_IN_CPOWF),
CFN_BUILT_IN_CPOWL = int (BUILT_IN_CPOWL),
CFN_BUILT_IN_CPROJ = int (BUILT_IN_CPROJ),
CFN_BUILT_IN_CPROJF = int (BUILT_IN_CPROJF),
CFN_BUILT_IN_CPROJL = int (BUILT_IN_CPROJL),
CFN_BUILT_IN_CREAL = int (BUILT_IN_CREAL),
CFN_BUILT_IN_CREALF = int (BUILT_IN_CREALF),
CFN_BUILT_IN_CREALL = int (BUILT_IN_CREALL),
CFN_BUILT_IN_CSIN = int (BUILT_IN_CSIN),
CFN_BUILT_IN_CSINF = int (BUILT_IN_CSINF),
CFN_BUILT_IN_CSINH = int (BUILT_IN_CSINH),
CFN_BUILT_IN_CSINHF = int (BUILT_IN_CSINHF),
CFN_BUILT_IN_CSINHL = int (BUILT_IN_CSINHL),
CFN_BUILT_IN_CSINL = int (BUILT_IN_CSINL),
CFN_BUILT_IN_CSQRT = int (BUILT_IN_CSQRT),
CFN_BUILT_IN_CSQRTF = int (BUILT_IN_CSQRTF),
CFN_BUILT_IN_CSQRTL = int (BUILT_IN_CSQRTL),
CFN_BUILT_IN_CTAN = int (BUILT_IN_CTAN),
CFN_BUILT_IN_CTANF = int (BUILT_IN_CTANF),
CFN_BUILT_IN_CTANH = int (BUILT_IN_CTANH),
CFN_BUILT_IN_CTANHF = int (BUILT_IN_CTANHF),
CFN_BUILT_IN_CTANHL = int (BUILT_IN_CTANHL),
CFN_BUILT_IN_CTANL = int (BUILT_IN_CTANL),


CFN_BUILT_IN_BCMP = int (BUILT_IN_BCMP),
CFN_BUILT_IN_BCOPY = int (BUILT_IN_BCOPY),
CFN_BUILT_IN_BZERO = int (BUILT_IN_BZERO),
CFN_BUILT_IN_INDEX = int (BUILT_IN_INDEX),
CFN_BUILT_IN_MEMCHR = int (BUILT_IN_MEMCHR),
CFN_BUILT_IN_MEMCMP = int (BUILT_IN_MEMCMP),
CFN_BUILT_IN_MEMCPY = int (BUILT_IN_MEMCPY),
CFN_BUILT_IN_MEMMOVE = int (BUILT_IN_MEMMOVE),
CFN_BUILT_IN_MEMPCPY = int (BUILT_IN_MEMPCPY),
CFN_BUILT_IN_MEMSET = int (BUILT_IN_MEMSET),
CFN_BUILT_IN_RINDEX = int (BUILT_IN_RINDEX),
CFN_BUILT_IN_STPCPY = int (BUILT_IN_STPCPY),
CFN_BUILT_IN_STPNCPY = int (BUILT_IN_STPNCPY),
CFN_BUILT_IN_STRCASECMP = int (BUILT_IN_STRCASECMP),
CFN_BUILT_IN_STRCAT = int (BUILT_IN_STRCAT),
CFN_BUILT_IN_STRCHR = int (BUILT_IN_STRCHR),
CFN_BUILT_IN_STRCMP = int (BUILT_IN_STRCMP),
CFN_BUILT_IN_STRCPY = int (BUILT_IN_STRCPY),
CFN_BUILT_IN_STRCSPN = int (BUILT_IN_STRCSPN),
CFN_BUILT_IN_STRDUP = int (BUILT_IN_STRDUP),
CFN_BUILT_IN_STRNDUP = int (BUILT_IN_STRNDUP),
CFN_BUILT_IN_STRLEN = int (BUILT_IN_STRLEN),
CFN_BUILT_IN_STRNCASECMP = int (BUILT_IN_STRNCASECMP),
CFN_BUILT_IN_STRNCAT = int (BUILT_IN_STRNCAT),
CFN_BUILT_IN_STRNCMP = int (BUILT_IN_STRNCMP),
CFN_BUILT_IN_STRNCPY = int (BUILT_IN_STRNCPY),
CFN_BUILT_IN_STRNLEN = int (BUILT_IN_STRNLEN),
CFN_BUILT_IN_STRPBRK = int (BUILT_IN_STRPBRK),
CFN_BUILT_IN_STRRCHR = int (BUILT_IN_STRRCHR),
CFN_BUILT_IN_STRSPN = int (BUILT_IN_STRSPN),
CFN_BUILT_IN_STRSTR = int (BUILT_IN_STRSTR),


CFN_BUILT_IN_FPRINTF = int (BUILT_IN_FPRINTF),
CFN_BUILT_IN_FPRINTF_UNLOCKED = int (BUILT_IN_FPRINTF_UNLOCKED),
CFN_BUILT_IN_PUTC = int (BUILT_IN_PUTC),
CFN_BUILT_IN_PUTC_UNLOCKED = int (BUILT_IN_PUTC_UNLOCKED),
CFN_BUILT_IN_FPUTC = int (BUILT_IN_FPUTC),
CFN_BUILT_IN_FPUTC_UNLOCKED = int (BUILT_IN_FPUTC_UNLOCKED),
CFN_BUILT_IN_FPUTS = int (BUILT_IN_FPUTS),
CFN_BUILT_IN_FPUTS_UNLOCKED = int (BUILT_IN_FPUTS_UNLOCKED),
CFN_BUILT_IN_FSCANF = int (BUILT_IN_FSCANF),
CFN_BUILT_IN_FWRITE = int (BUILT_IN_FWRITE),
CFN_BUILT_IN_FWRITE_UNLOCKED = int (BUILT_IN_FWRITE_UNLOCKED),
CFN_BUILT_IN_PRINTF = int (BUILT_IN_PRINTF),
CFN_BUILT_IN_PRINTF_UNLOCKED = int (BUILT_IN_PRINTF_UNLOCKED),
CFN_BUILT_IN_PUTCHAR = int (BUILT_IN_PUTCHAR),
CFN_BUILT_IN_PUTCHAR_UNLOCKED = int (BUILT_IN_PUTCHAR_UNLOCKED),
CFN_BUILT_IN_PUTS = int (BUILT_IN_PUTS),
CFN_BUILT_IN_PUTS_UNLOCKED = int (BUILT_IN_PUTS_UNLOCKED),
CFN_BUILT_IN_SCANF = int (BUILT_IN_SCANF),
CFN_BUILT_IN_SNPRINTF = int (BUILT_IN_SNPRINTF),

CFN_BUILT_IN_SPRINTF = int (BUILT_IN_SPRINTF),
CFN_BUILT_IN_SSCANF = int (BUILT_IN_SSCANF),
CFN_BUILT_IN_VFPRINTF = int (BUILT_IN_VFPRINTF),
CFN_BUILT_IN_VFSCANF = int (BUILT_IN_VFSCANF),
CFN_BUILT_IN_VPRINTF = int (BUILT_IN_VPRINTF),
CFN_BUILT_IN_VSCANF = int (BUILT_IN_VSCANF),
CFN_BUILT_IN_VSNPRINTF = int (BUILT_IN_VSNPRINTF),
CFN_BUILT_IN_VSPRINTF = int (BUILT_IN_VSPRINTF),
CFN_BUILT_IN_VSSCANF = int (BUILT_IN_VSSCANF),


CFN_BUILT_IN_ISALNUM = int (BUILT_IN_ISALNUM),
CFN_BUILT_IN_ISALPHA = int (BUILT_IN_ISALPHA),
CFN_BUILT_IN_ISASCII = int (BUILT_IN_ISASCII),
CFN_BUILT_IN_ISBLANK = int (BUILT_IN_ISBLANK),
CFN_BUILT_IN_ISCNTRL = int (BUILT_IN_ISCNTRL),
CFN_BUILT_IN_ISDIGIT = int (BUILT_IN_ISDIGIT),
CFN_BUILT_IN_ISGRAPH = int (BUILT_IN_ISGRAPH),
CFN_BUILT_IN_ISLOWER = int (BUILT_IN_ISLOWER),
CFN_BUILT_IN_ISPRINT = int (BUILT_IN_ISPRINT),
CFN_BUILT_IN_ISPUNCT = int (BUILT_IN_ISPUNCT),
CFN_BUILT_IN_ISSPACE = int (BUILT_IN_ISSPACE),
CFN_BUILT_IN_ISUPPER = int (BUILT_IN_ISUPPER),
CFN_BUILT_IN_ISXDIGIT = int (BUILT_IN_ISXDIGIT),
CFN_BUILT_IN_TOASCII = int (BUILT_IN_TOASCII),
CFN_BUILT_IN_TOLOWER = int (BUILT_IN_TOLOWER),
CFN_BUILT_IN_TOUPPER = int (BUILT_IN_TOUPPER),


CFN_BUILT_IN_ISWALNUM = int (BUILT_IN_ISWALNUM),
CFN_BUILT_IN_ISWALPHA = int (BUILT_IN_ISWALPHA),
CFN_BUILT_IN_ISWBLANK = int (BUILT_IN_ISWBLANK),
CFN_BUILT_IN_ISWCNTRL = int (BUILT_IN_ISWCNTRL),
CFN_BUILT_IN_ISWDIGIT = int (BUILT_IN_ISWDIGIT),
CFN_BUILT_IN_ISWGRAPH = int (BUILT_IN_ISWGRAPH),
CFN_BUILT_IN_ISWLOWER = int (BUILT_IN_ISWLOWER),
CFN_BUILT_IN_ISWPRINT = int (BUILT_IN_ISWPRINT),
CFN_BUILT_IN_ISWPUNCT = int (BUILT_IN_ISWPUNCT),
CFN_BUILT_IN_ISWSPACE = int (BUILT_IN_ISWSPACE),
CFN_BUILT_IN_ISWUPPER = int (BUILT_IN_ISWUPPER),
CFN_BUILT_IN_ISWXDIGIT = int (BUILT_IN_ISWXDIGIT),
CFN_BUILT_IN_TOWLOWER = int (BUILT_IN_TOWLOWER),
CFN_BUILT_IN_TOWUPPER = int (BUILT_IN_TOWUPPER),


CFN_BUILT_IN_ADD_OVERFLOW = int (BUILT_IN_ADD_OVERFLOW),
CFN_BUILT_IN_SUB_OVERFLOW = int (BUILT_IN_SUB_OVERFLOW),
CFN_BUILT_IN_MUL_OVERFLOW = int (BUILT_IN_MUL_OVERFLOW),
CFN_BUILT_IN_ADD_OVERFLOW_P = int (BUILT_IN_ADD_OVERFLOW_P),
CFN_BUILT_IN_SUB_OVERFLOW_P = int (BUILT_IN_SUB_OVERFLOW_P),
CFN_BUILT_IN_MUL_OVERFLOW_P = int (BUILT_IN_MUL_OVERFLOW_P),

CFN_BUILT_IN_SADD_OVERFLOW = int (BUILT_IN_SADD_OVERFLOW),
CFN_BUILT_IN_SADDL_OVERFLOW = int (BUILT_IN_SADDL_OVERFLOW),
CFN_BUILT_IN_SADDLL_OVERFLOW = int (BUILT_IN_SADDLL_OVERFLOW),
CFN_BUILT_IN_SSUB_OVERFLOW = int (BUILT_IN_SSUB_OVERFLOW),
CFN_BUILT_IN_SSUBL_OVERFLOW = int (BUILT_IN_SSUBL_OVERFLOW),
CFN_BUILT_IN_SSUBLL_OVERFLOW = int (BUILT_IN_SSUBLL_OVERFLOW),
CFN_BUILT_IN_SMUL_OVERFLOW = int (BUILT_IN_SMUL_OVERFLOW),
CFN_BUILT_IN_SMULL_OVERFLOW = int (BUILT_IN_SMULL_OVERFLOW),
CFN_BUILT_IN_SMULLL_OVERFLOW = int (BUILT_IN_SMULLL_OVERFLOW),
CFN_BUILT_IN_UADD_OVERFLOW = int (BUILT_IN_UADD_OVERFLOW),
CFN_BUILT_IN_UADDL_OVERFLOW = int (BUILT_IN_UADDL_OVERFLOW),
CFN_BUILT_IN_UADDLL_OVERFLOW = int (BUILT_IN_UADDLL_OVERFLOW),
CFN_BUILT_IN_USUB_OVERFLOW = int (BUILT_IN_USUB_OVERFLOW),
CFN_BUILT_IN_USUBL_OVERFLOW = int (BUILT_IN_USUBL_OVERFLOW),
CFN_BUILT_IN_USUBLL_OVERFLOW = int (BUILT_IN_USUBLL_OVERFLOW),
CFN_BUILT_IN_UMUL_OVERFLOW = int (BUILT_IN_UMUL_OVERFLOW),
CFN_BUILT_IN_UMULL_OVERFLOW = int (BUILT_IN_UMULL_OVERFLOW),
CFN_BUILT_IN_UMULLL_OVERFLOW = int (BUILT_IN_UMULLL_OVERFLOW),


CFN_BUILT_IN_ABORT = int (BUILT_IN_ABORT),
CFN_BUILT_IN_ABS = int (BUILT_IN_ABS),
CFN_BUILT_IN_AGGREGATE_INCOMING_ADDRESS = int (BUILT_IN_AGGREGATE_INCOMING_ADDRESS),
CFN_BUILT_IN_ALLOCA = int (BUILT_IN_ALLOCA),
CFN_BUILT_IN_APPLY = int (BUILT_IN_APPLY),
CFN_BUILT_IN_APPLY_ARGS = int (BUILT_IN_APPLY_ARGS),
CFN_BUILT_IN_BSWAP16 = int (BUILT_IN_BSWAP16),
CFN_BUILT_IN_BSWAP32 = int (BUILT_IN_BSWAP32),
CFN_BUILT_IN_BSWAP64 = int (BUILT_IN_BSWAP64),
CFN_BUILT_IN_BSWAP128 = int (BUILT_IN_BSWAP128),

CFN_BUILT_IN_CLEAR_CACHE = int (BUILT_IN_CLEAR_CACHE),

CFN_BUILT_IN_CALLOC = int (BUILT_IN_CALLOC),
CFN_BUILT_IN_CLASSIFY_TYPE = int (BUILT_IN_CLASSIFY_TYPE),
CFN_BUILT_IN_CLZ = int (BUILT_IN_CLZ),
CFN_BUILT_IN_CLZIMAX = int (BUILT_IN_CLZIMAX),
CFN_BUILT_IN_CLZL = int (BUILT_IN_CLZL),
CFN_BUILT_IN_CLZLL = int (BUILT_IN_CLZLL),
CFN_BUILT_IN_CONSTANT_P = int (BUILT_IN_CONSTANT_P),
CFN_BUILT_IN_CTZ = int (BUILT_IN_CTZ),
CFN_BUILT_IN_CTZIMAX = int (BUILT_IN_CTZIMAX),
CFN_BUILT_IN_CTZL = int (BUILT_IN_CTZL),
CFN_BUILT_IN_CTZLL = int (BUILT_IN_CTZLL),
CFN_BUILT_IN_CLRSB = int (BUILT_IN_CLRSB),
CFN_BUILT_IN_CLRSBIMAX = int (BUILT_IN_CLRSBIMAX),
CFN_BUILT_IN_CLRSBL = int (BUILT_IN_CLRSBL),
CFN_BUILT_IN_CLRSBLL = int (BUILT_IN_CLRSBLL),
CFN_BUILT_IN_DCGETTEXT = int (BUILT_IN_DCGETTEXT),
CFN_BUILT_IN_DGETTEXT = int (BUILT_IN_DGETTEXT),
CFN_BUILT_IN_DWARF_CFA = int (BUILT_IN_DWARF_CFA),
CFN_BUILT_IN_DWARF_SP_COLUMN = int (BUILT_IN_DWARF_SP_COLUMN),
CFN_BUILT_IN_EH_RETURN = int (BUILT_IN_EH_RETURN),
CFN_BUILT_IN_EH_RETURN_DATA_REGNO = int (BUILT_IN_EH_RETURN_DATA_REGNO),
CFN_BUILT_IN_EXECL = int (BUILT_IN_EXECL),
CFN_BUILT_IN_EXECLP = int (BUILT_IN_EXECLP),
CFN_BUILT_IN_EXECLE = int (BUILT_IN_EXECLE),
CFN_BUILT_IN_EXECV = int (BUILT_IN_EXECV),
CFN_BUILT_IN_EXECVP = int (BUILT_IN_EXECVP),
CFN_BUILT_IN_EXECVE = int (BUILT_IN_EXECVE),
CFN_BUILT_IN_EXIT = int (BUILT_IN_EXIT),
CFN_BUILT_IN_EXPECT = int (BUILT_IN_EXPECT),
CFN_BUILT_IN_EXPECT_WITH_PROBABILITY = int (BUILT_IN_EXPECT_WITH_PROBABILITY),
CFN_BUILT_IN_ASSUME_ALIGNED = int (BUILT_IN_ASSUME_ALIGNED),
CFN_BUILT_IN_EXTEND_POINTER = int (BUILT_IN_EXTEND_POINTER),
CFN_BUILT_IN_EXTRACT_RETURN_ADDR = int (BUILT_IN_EXTRACT_RETURN_ADDR),
CFN_BUILT_IN_FFS = int (BUILT_IN_FFS),
CFN_BUILT_IN_FFSIMAX = int (BUILT_IN_FFSIMAX),
CFN_BUILT_IN_FFSL = int (BUILT_IN_FFSL),
CFN_BUILT_IN_FFSLL = int (BUILT_IN_FFSLL),
CFN_BUILT_IN_FORK = int (BUILT_IN_FORK),
CFN_BUILT_IN_FRAME_ADDRESS = int (BUILT_IN_FRAME_ADDRESS),

CFN_BUILT_IN_FREE = int (BUILT_IN_FREE),
CFN_BUILT_IN_FROB_RETURN_ADDR = int (BUILT_IN_FROB_RETURN_ADDR),
CFN_BUILT_IN_GETTEXT = int (BUILT_IN_GETTEXT),
CFN_BUILT_IN_IMAXABS = int (BUILT_IN_IMAXABS),
CFN_BUILT_IN_INIT_DWARF_REG_SIZES = int (BUILT_IN_INIT_DWARF_REG_SIZES),
CFN_BUILT_IN_FINITE = int (BUILT_IN_FINITE),
CFN_BUILT_IN_FINITEF = int (BUILT_IN_FINITEF),
CFN_BUILT_IN_FINITEL = int (BUILT_IN_FINITEL),
CFN_BUILT_IN_FINITED32 = int (BUILT_IN_FINITED32),
CFN_BUILT_IN_FINITED64 = int (BUILT_IN_FINITED64),
CFN_BUILT_IN_FINITED128 = int (BUILT_IN_FINITED128),
CFN_BUILT_IN_FPCLASSIFY = int (BUILT_IN_FPCLASSIFY),
CFN_BUILT_IN_ISFINITE = int (BUILT_IN_ISFINITE),
CFN_BUILT_IN_ISINF_SIGN = int (BUILT_IN_ISINF_SIGN),
CFN_BUILT_IN_ISINF = int (BUILT_IN_ISINF),
CFN_BUILT_IN_ISINFF = int (BUILT_IN_ISINFF),
CFN_BUILT_IN_ISINFL = int (BUILT_IN_ISINFL),
CFN_BUILT_IN_ISINFD32 = int (BUILT_IN_ISINFD32),
CFN_BUILT_IN_ISINFD64 = int (BUILT_IN_ISINFD64),
CFN_BUILT_IN_ISINFD128 = int (BUILT_IN_ISINFD128),
CFN_BUILT_IN_ISNAN = int (BUILT_IN_ISNAN),
CFN_BUILT_IN_ISNANF = int (BUILT_IN_ISNANF),
CFN_BUILT_IN_ISNANL = int (BUILT_IN_ISNANL),
CFN_BUILT_IN_ISNAND32 = int (BUILT_IN_ISNAND32),
CFN_BUILT_IN_ISNAND64 = int (BUILT_IN_ISNAND64),
CFN_BUILT_IN_ISNAND128 = int (BUILT_IN_ISNAND128),
CFN_BUILT_IN_ISNORMAL = int (BUILT_IN_ISNORMAL),
CFN_BUILT_IN_ISGREATER = int (BUILT_IN_ISGREATER),
CFN_BUILT_IN_ISGREATEREQUAL = int (BUILT_IN_ISGREATEREQUAL),
CFN_BUILT_IN_ISLESS = int (BUILT_IN_ISLESS),
CFN_BUILT_IN_ISLESSEQUAL = int (BUILT_IN_ISLESSEQUAL),
CFN_BUILT_IN_ISLESSGREATER = int (BUILT_IN_ISLESSGREATER),
CFN_BUILT_IN_ISUNORDERED = int (BUILT_IN_ISUNORDERED),
CFN_BUILT_IN_LABS = int (BUILT_IN_LABS),
CFN_BUILT_IN_LLABS = int (BUILT_IN_LLABS),
CFN_BUILT_IN_LONGJMP = int (BUILT_IN_LONGJMP),

CFN_BUILT_IN_MALLOC = int (BUILT_IN_MALLOC),
CFN_BUILT_IN_NEXT_ARG = int (BUILT_IN_NEXT_ARG),
CFN_BUILT_IN_PARITY = int (BUILT_IN_PARITY),
CFN_BUILT_IN_PARITYIMAX = int (BUILT_IN_PARITYIMAX),
CFN_BUILT_IN_PARITYL = int (BUILT_IN_PARITYL),
CFN_BUILT_IN_PARITYLL = int (BUILT_IN_PARITYLL),
CFN_BUILT_IN_POPCOUNT = int (BUILT_IN_POPCOUNT),
CFN_BUILT_IN_POPCOUNTIMAX = int (BUILT_IN_POPCOUNTIMAX),
CFN_BUILT_IN_POPCOUNTL = int (BUILT_IN_POPCOUNTL),
CFN_BUILT_IN_POPCOUNTLL = int (BUILT_IN_POPCOUNTLL),
CFN_BUILT_IN_POSIX_MEMALIGN = int (BUILT_IN_POSIX_MEMALIGN),
CFN_BUILT_IN_PREFETCH = int (BUILT_IN_PREFETCH),
CFN_BUILT_IN_REALLOC = int (BUILT_IN_REALLOC),
CFN_BUILT_IN_RETURN = int (BUILT_IN_RETURN),
CFN_BUILT_IN_RETURN_ADDRESS = int (BUILT_IN_RETURN_ADDRESS),
CFN_BUILT_IN_SAVEREGS = int (BUILT_IN_SAVEREGS),
CFN_BUILT_IN_SETJMP = int (BUILT_IN_SETJMP),
CFN_BUILT_IN_STRFMON = int (BUILT_IN_STRFMON),
CFN_BUILT_IN_STRFTIME = int (BUILT_IN_STRFTIME),
CFN_BUILT_IN_TRAP = int (BUILT_IN_TRAP),
CFN_BUILT_IN_UNREACHABLE = int (BUILT_IN_UNREACHABLE),
CFN_BUILT_IN_UNWIND_INIT = int (BUILT_IN_UNWIND_INIT),
CFN_BUILT_IN_UPDATE_SETJMP_BUF = int (BUILT_IN_UPDATE_SETJMP_BUF),
CFN_BUILT_IN_VA_COPY = int (BUILT_IN_VA_COPY),
CFN_BUILT_IN_VA_END = int (BUILT_IN_VA_END),
CFN_BUILT_IN_VA_START = int (BUILT_IN_VA_START),
CFN_BUILT_IN_VA_ARG_PACK = int (BUILT_IN_VA_ARG_PACK),
CFN_BUILT_IN_VA_ARG_PACK_LEN = int (BUILT_IN_VA_ARG_PACK_LEN),
CFN_BUILT_IN__EXIT = int (BUILT_IN__EXIT),
CFN_BUILT_IN__EXIT2 = int (BUILT_IN__EXIT2),


CFN_BUILT_IN_INIT_TRAMPOLINE = int (BUILT_IN_INIT_TRAMPOLINE),
CFN_BUILT_IN_INIT_HEAP_TRAMPOLINE = int (BUILT_IN_INIT_HEAP_TRAMPOLINE),
CFN_BUILT_IN_ADJUST_TRAMPOLINE = int (BUILT_IN_ADJUST_TRAMPOLINE),
CFN_BUILT_IN_INIT_DESCRIPTOR = int (BUILT_IN_INIT_DESCRIPTOR),
CFN_BUILT_IN_ADJUST_DESCRIPTOR = int (BUILT_IN_ADJUST_DESCRIPTOR),
CFN_BUILT_IN_NONLOCAL_GOTO = int (BUILT_IN_NONLOCAL_GOTO),


CFN_BUILT_IN_SETJMP_SETUP = int (BUILT_IN_SETJMP_SETUP),
CFN_BUILT_IN_SETJMP_RECEIVER = int (BUILT_IN_SETJMP_RECEIVER),


CFN_BUILT_IN_STACK_SAVE = int (BUILT_IN_STACK_SAVE),
CFN_BUILT_IN_STACK_RESTORE = int (BUILT_IN_STACK_RESTORE),
CFN_BUILT_IN_ALLOCA_WITH_ALIGN = int (BUILT_IN_ALLOCA_WITH_ALIGN),
CFN_BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX = int (BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX),



CFN_BUILT_IN_MEMCMP_EQ = int (BUILT_IN_MEMCMP_EQ),



CFN_BUILT_IN_STRCMP_EQ = int (BUILT_IN_STRCMP_EQ),
CFN_BUILT_IN_STRNCMP_EQ = int (BUILT_IN_STRNCMP_EQ),


CFN_BUILT_IN_OBJECT_SIZE = int (BUILT_IN_OBJECT_SIZE),
CFN_BUILT_IN_MEMCPY_CHK = int (BUILT_IN_MEMCPY_CHK),
CFN_BUILT_IN_MEMMOVE_CHK = int (BUILT_IN_MEMMOVE_CHK),
CFN_BUILT_IN_MEMPCPY_CHK = int (BUILT_IN_MEMPCPY_CHK),
CFN_BUILT_IN_MEMSET_CHK = int (BUILT_IN_MEMSET_CHK),
CFN_BUILT_IN_STPCPY_CHK = int (BUILT_IN_STPCPY_CHK),
CFN_BUILT_IN_STPNCPY_CHK = int (BUILT_IN_STPNCPY_CHK),
CFN_BUILT_IN_STRCAT_CHK = int (BUILT_IN_STRCAT_CHK),
CFN_BUILT_IN_STRCPY_CHK = int (BUILT_IN_STRCPY_CHK),
CFN_BUILT_IN_STRNCAT_CHK = int (BUILT_IN_STRNCAT_CHK),
CFN_BUILT_IN_STRNCPY_CHK = int (BUILT_IN_STRNCPY_CHK),
CFN_BUILT_IN_SNPRINTF_CHK = int (BUILT_IN_SNPRINTF_CHK),
CFN_BUILT_IN_SPRINTF_CHK = int (BUILT_IN_SPRINTF_CHK),
CFN_BUILT_IN_VSNPRINTF_CHK = int (BUILT_IN_VSNPRINTF_CHK),
CFN_BUILT_IN_VSPRINTF_CHK = int (BUILT_IN_VSPRINTF_CHK),
CFN_BUILT_IN_FPRINTF_CHK = int (BUILT_IN_FPRINTF_CHK),
CFN_BUILT_IN_PRINTF_CHK = int (BUILT_IN_PRINTF_CHK),
CFN_BUILT_IN_VFPRINTF_CHK = int (BUILT_IN_VFPRINTF_CHK),
CFN_BUILT_IN_VPRINTF_CHK = int (BUILT_IN_VPRINTF_CHK),


CFN_BUILT_IN_PROFILE_FUNC_ENTER = int (BUILT_IN_PROFILE_FUNC_ENTER),

CFN_BUILT_IN_PROFILE_FUNC_EXIT = int (BUILT_IN_PROFILE_FUNC_EXIT),



CFN_BUILT_IN_THREAD_POINTER = int (BUILT_IN_THREAD_POINTER),




CFN_BUILT_IN_SET_THREAD_POINTER = int (BUILT_IN_SET_THREAD_POINTER),





CFN_BUILT_IN_EMUTLS_GET_ADDRESS = int (BUILT_IN_EMUTLS_GET_ADDRESS),




CFN_BUILT_IN_EMUTLS_REGISTER_COMMON = int (BUILT_IN_EMUTLS_REGISTER_COMMON),
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
CFN_BUILT_IN_SPECULATION_SAFE_VALUE_N = int (BUILT_IN_SPECULATION_SAFE_VALUE_N),


CFN_BUILT_IN_SPECULATION_SAFE_VALUE_PTR = int (BUILT_IN_SPECULATION_SAFE_VALUE_PTR),


CFN_BUILT_IN_SPECULATION_SAFE_VALUE_1 = int (BUILT_IN_SPECULATION_SAFE_VALUE_1),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_2 = int (BUILT_IN_SPECULATION_SAFE_VALUE_2),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_4 = int (BUILT_IN_SPECULATION_SAFE_VALUE_4),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_8 = int (BUILT_IN_SPECULATION_SAFE_VALUE_8),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_16 = int (BUILT_IN_SPECULATION_SAFE_VALUE_16),




CFN_BUILT_IN_UNWIND_RESUME = int (BUILT_IN_UNWIND_RESUME),
CFN_BUILT_IN_CXA_END_CLEANUP = int (BUILT_IN_CXA_END_CLEANUP),
CFN_BUILT_IN_EH_POINTER = int (BUILT_IN_EH_POINTER),
CFN_BUILT_IN_EH_FILTER = int (BUILT_IN_EH_FILTER),
CFN_BUILT_IN_EH_COPY_VALUES = int (BUILT_IN_EH_COPY_VALUES),


CFN_BUILT_IN_FILE = int (BUILT_IN_FILE),
CFN_BUILT_IN_FUNCTION = int (BUILT_IN_FUNCTION),
CFN_BUILT_IN_LINE = int (BUILT_IN_LINE),


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def"
CFN_BUILT_IN_SYNC_FETCH_AND_ADD_N = int (BUILT_IN_SYNC_FETCH_AND_ADD_N),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_1 = int (BUILT_IN_SYNC_FETCH_AND_ADD_1),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_2 = int (BUILT_IN_SYNC_FETCH_AND_ADD_2),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_4 = int (BUILT_IN_SYNC_FETCH_AND_ADD_4),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_8 = int (BUILT_IN_SYNC_FETCH_AND_ADD_8),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_16 = int (BUILT_IN_SYNC_FETCH_AND_ADD_16),


CFN_BUILT_IN_SYNC_FETCH_AND_SUB_N = int (BUILT_IN_SYNC_FETCH_AND_SUB_N),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_1 = int (BUILT_IN_SYNC_FETCH_AND_SUB_1),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_2 = int (BUILT_IN_SYNC_FETCH_AND_SUB_2),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_4 = int (BUILT_IN_SYNC_FETCH_AND_SUB_4),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_8 = int (BUILT_IN_SYNC_FETCH_AND_SUB_8),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_16 = int (BUILT_IN_SYNC_FETCH_AND_SUB_16),


CFN_BUILT_IN_SYNC_FETCH_AND_OR_N = int (BUILT_IN_SYNC_FETCH_AND_OR_N),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_1 = int (BUILT_IN_SYNC_FETCH_AND_OR_1),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_2 = int (BUILT_IN_SYNC_FETCH_AND_OR_2),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_4 = int (BUILT_IN_SYNC_FETCH_AND_OR_4),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_8 = int (BUILT_IN_SYNC_FETCH_AND_OR_8),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_16 = int (BUILT_IN_SYNC_FETCH_AND_OR_16),


CFN_BUILT_IN_SYNC_FETCH_AND_AND_N = int (BUILT_IN_SYNC_FETCH_AND_AND_N),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_1 = int (BUILT_IN_SYNC_FETCH_AND_AND_1),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_2 = int (BUILT_IN_SYNC_FETCH_AND_AND_2),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_4 = int (BUILT_IN_SYNC_FETCH_AND_AND_4),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_8 = int (BUILT_IN_SYNC_FETCH_AND_AND_8),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_16 = int (BUILT_IN_SYNC_FETCH_AND_AND_16),


CFN_BUILT_IN_SYNC_FETCH_AND_XOR_N = int (BUILT_IN_SYNC_FETCH_AND_XOR_N),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_1 = int (BUILT_IN_SYNC_FETCH_AND_XOR_1),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_2 = int (BUILT_IN_SYNC_FETCH_AND_XOR_2),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_4 = int (BUILT_IN_SYNC_FETCH_AND_XOR_4),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_8 = int (BUILT_IN_SYNC_FETCH_AND_XOR_8),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_16 = int (BUILT_IN_SYNC_FETCH_AND_XOR_16),


CFN_BUILT_IN_SYNC_FETCH_AND_NAND_N = int (BUILT_IN_SYNC_FETCH_AND_NAND_N),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_1 = int (BUILT_IN_SYNC_FETCH_AND_NAND_1),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_2 = int (BUILT_IN_SYNC_FETCH_AND_NAND_2),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_4 = int (BUILT_IN_SYNC_FETCH_AND_NAND_4),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_8 = int (BUILT_IN_SYNC_FETCH_AND_NAND_8),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_16 = int (BUILT_IN_SYNC_FETCH_AND_NAND_16),


CFN_BUILT_IN_SYNC_ADD_AND_FETCH_N = int (BUILT_IN_SYNC_ADD_AND_FETCH_N),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_1 = int (BUILT_IN_SYNC_ADD_AND_FETCH_1),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_2 = int (BUILT_IN_SYNC_ADD_AND_FETCH_2),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_4 = int (BUILT_IN_SYNC_ADD_AND_FETCH_4),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_8 = int (BUILT_IN_SYNC_ADD_AND_FETCH_8),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_16 = int (BUILT_IN_SYNC_ADD_AND_FETCH_16),


CFN_BUILT_IN_SYNC_SUB_AND_FETCH_N = int (BUILT_IN_SYNC_SUB_AND_FETCH_N),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_1 = int (BUILT_IN_SYNC_SUB_AND_FETCH_1),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_2 = int (BUILT_IN_SYNC_SUB_AND_FETCH_2),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_4 = int (BUILT_IN_SYNC_SUB_AND_FETCH_4),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_8 = int (BUILT_IN_SYNC_SUB_AND_FETCH_8),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_16 = int (BUILT_IN_SYNC_SUB_AND_FETCH_16),


CFN_BUILT_IN_SYNC_OR_AND_FETCH_N = int (BUILT_IN_SYNC_OR_AND_FETCH_N),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_1 = int (BUILT_IN_SYNC_OR_AND_FETCH_1),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_2 = int (BUILT_IN_SYNC_OR_AND_FETCH_2),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_4 = int (BUILT_IN_SYNC_OR_AND_FETCH_4),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_8 = int (BUILT_IN_SYNC_OR_AND_FETCH_8),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_16 = int (BUILT_IN_SYNC_OR_AND_FETCH_16),


CFN_BUILT_IN_SYNC_AND_AND_FETCH_N = int (BUILT_IN_SYNC_AND_AND_FETCH_N),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_1 = int (BUILT_IN_SYNC_AND_AND_FETCH_1),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_2 = int (BUILT_IN_SYNC_AND_AND_FETCH_2),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_4 = int (BUILT_IN_SYNC_AND_AND_FETCH_4),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_8 = int (BUILT_IN_SYNC_AND_AND_FETCH_8),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_16 = int (BUILT_IN_SYNC_AND_AND_FETCH_16),


CFN_BUILT_IN_SYNC_XOR_AND_FETCH_N = int (BUILT_IN_SYNC_XOR_AND_FETCH_N),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_1 = int (BUILT_IN_SYNC_XOR_AND_FETCH_1),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_2 = int (BUILT_IN_SYNC_XOR_AND_FETCH_2),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_4 = int (BUILT_IN_SYNC_XOR_AND_FETCH_4),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_8 = int (BUILT_IN_SYNC_XOR_AND_FETCH_8),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_16 = int (BUILT_IN_SYNC_XOR_AND_FETCH_16),


CFN_BUILT_IN_SYNC_NAND_AND_FETCH_N = int (BUILT_IN_SYNC_NAND_AND_FETCH_N),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_1 = int (BUILT_IN_SYNC_NAND_AND_FETCH_1),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_2 = int (BUILT_IN_SYNC_NAND_AND_FETCH_2),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_4 = int (BUILT_IN_SYNC_NAND_AND_FETCH_4),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_8 = int (BUILT_IN_SYNC_NAND_AND_FETCH_8),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_16 = int (BUILT_IN_SYNC_NAND_AND_FETCH_16),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16),



CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16),



CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_N = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_N),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_1 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_1),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_2 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_2),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_4 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_4),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_8 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_8),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_16 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_16),



CFN_BUILT_IN_SYNC_LOCK_RELEASE_N = int (BUILT_IN_SYNC_LOCK_RELEASE_N),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_1 = int (BUILT_IN_SYNC_LOCK_RELEASE_1),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_2 = int (BUILT_IN_SYNC_LOCK_RELEASE_2),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_4 = int (BUILT_IN_SYNC_LOCK_RELEASE_4),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_8 = int (BUILT_IN_SYNC_LOCK_RELEASE_8),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_16 = int (BUILT_IN_SYNC_LOCK_RELEASE_16),


CFN_BUILT_IN_SYNC_SYNCHRONIZE = int (BUILT_IN_SYNC_SYNCHRONIZE),




CFN_BUILT_IN_ATOMIC_TEST_AND_SET = int (BUILT_IN_ATOMIC_TEST_AND_SET),


CFN_BUILT_IN_ATOMIC_CLEAR = int (BUILT_IN_ATOMIC_CLEAR),


CFN_BUILT_IN_ATOMIC_EXCHANGE = int (BUILT_IN_ATOMIC_EXCHANGE),


CFN_BUILT_IN_ATOMIC_EXCHANGE_N = int (BUILT_IN_ATOMIC_EXCHANGE_N),


CFN_BUILT_IN_ATOMIC_EXCHANGE_1 = int (BUILT_IN_ATOMIC_EXCHANGE_1),


CFN_BUILT_IN_ATOMIC_EXCHANGE_2 = int (BUILT_IN_ATOMIC_EXCHANGE_2),


CFN_BUILT_IN_ATOMIC_EXCHANGE_4 = int (BUILT_IN_ATOMIC_EXCHANGE_4),


CFN_BUILT_IN_ATOMIC_EXCHANGE_8 = int (BUILT_IN_ATOMIC_EXCHANGE_8),


CFN_BUILT_IN_ATOMIC_EXCHANGE_16 = int (BUILT_IN_ATOMIC_EXCHANGE_16),



CFN_BUILT_IN_ATOMIC_LOAD = int (BUILT_IN_ATOMIC_LOAD),



CFN_BUILT_IN_ATOMIC_LOAD_N = int (BUILT_IN_ATOMIC_LOAD_N),


CFN_BUILT_IN_ATOMIC_LOAD_1 = int (BUILT_IN_ATOMIC_LOAD_1),


CFN_BUILT_IN_ATOMIC_LOAD_2 = int (BUILT_IN_ATOMIC_LOAD_2),


CFN_BUILT_IN_ATOMIC_LOAD_4 = int (BUILT_IN_ATOMIC_LOAD_4),


CFN_BUILT_IN_ATOMIC_LOAD_8 = int (BUILT_IN_ATOMIC_LOAD_8),


CFN_BUILT_IN_ATOMIC_LOAD_16 = int (BUILT_IN_ATOMIC_LOAD_16),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N),


CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16),




CFN_BUILT_IN_ATOMIC_STORE = int (BUILT_IN_ATOMIC_STORE),


CFN_BUILT_IN_ATOMIC_STORE_N = int (BUILT_IN_ATOMIC_STORE_N),


CFN_BUILT_IN_ATOMIC_STORE_1 = int (BUILT_IN_ATOMIC_STORE_1),


CFN_BUILT_IN_ATOMIC_STORE_2 = int (BUILT_IN_ATOMIC_STORE_2),


CFN_BUILT_IN_ATOMIC_STORE_4 = int (BUILT_IN_ATOMIC_STORE_4),


CFN_BUILT_IN_ATOMIC_STORE_8 = int (BUILT_IN_ATOMIC_STORE_8),


CFN_BUILT_IN_ATOMIC_STORE_16 = int (BUILT_IN_ATOMIC_STORE_16),



CFN_BUILT_IN_ATOMIC_ADD_FETCH_N = int (BUILT_IN_ATOMIC_ADD_FETCH_N),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_1 = int (BUILT_IN_ATOMIC_ADD_FETCH_1),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_2 = int (BUILT_IN_ATOMIC_ADD_FETCH_2),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_4 = int (BUILT_IN_ATOMIC_ADD_FETCH_4),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_8 = int (BUILT_IN_ATOMIC_ADD_FETCH_8),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_16 = int (BUILT_IN_ATOMIC_ADD_FETCH_16),



CFN_BUILT_IN_ATOMIC_SUB_FETCH_N = int (BUILT_IN_ATOMIC_SUB_FETCH_N),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_1 = int (BUILT_IN_ATOMIC_SUB_FETCH_1),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_2 = int (BUILT_IN_ATOMIC_SUB_FETCH_2),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_4 = int (BUILT_IN_ATOMIC_SUB_FETCH_4),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_8 = int (BUILT_IN_ATOMIC_SUB_FETCH_8),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_16 = int (BUILT_IN_ATOMIC_SUB_FETCH_16),



CFN_BUILT_IN_ATOMIC_AND_FETCH_N = int (BUILT_IN_ATOMIC_AND_FETCH_N),


CFN_BUILT_IN_ATOMIC_AND_FETCH_1 = int (BUILT_IN_ATOMIC_AND_FETCH_1),


CFN_BUILT_IN_ATOMIC_AND_FETCH_2 = int (BUILT_IN_ATOMIC_AND_FETCH_2),


CFN_BUILT_IN_ATOMIC_AND_FETCH_4 = int (BUILT_IN_ATOMIC_AND_FETCH_4),


CFN_BUILT_IN_ATOMIC_AND_FETCH_8 = int (BUILT_IN_ATOMIC_AND_FETCH_8),


CFN_BUILT_IN_ATOMIC_AND_FETCH_16 = int (BUILT_IN_ATOMIC_AND_FETCH_16),



CFN_BUILT_IN_ATOMIC_NAND_FETCH_N = int (BUILT_IN_ATOMIC_NAND_FETCH_N),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_1 = int (BUILT_IN_ATOMIC_NAND_FETCH_1),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_2 = int (BUILT_IN_ATOMIC_NAND_FETCH_2),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_4 = int (BUILT_IN_ATOMIC_NAND_FETCH_4),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_8 = int (BUILT_IN_ATOMIC_NAND_FETCH_8),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_16 = int (BUILT_IN_ATOMIC_NAND_FETCH_16),



CFN_BUILT_IN_ATOMIC_XOR_FETCH_N = int (BUILT_IN_ATOMIC_XOR_FETCH_N),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_1 = int (BUILT_IN_ATOMIC_XOR_FETCH_1),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_2 = int (BUILT_IN_ATOMIC_XOR_FETCH_2),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_4 = int (BUILT_IN_ATOMIC_XOR_FETCH_4),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_8 = int (BUILT_IN_ATOMIC_XOR_FETCH_8),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_16 = int (BUILT_IN_ATOMIC_XOR_FETCH_16),



CFN_BUILT_IN_ATOMIC_OR_FETCH_N = int (BUILT_IN_ATOMIC_OR_FETCH_N),


CFN_BUILT_IN_ATOMIC_OR_FETCH_1 = int (BUILT_IN_ATOMIC_OR_FETCH_1),


CFN_BUILT_IN_ATOMIC_OR_FETCH_2 = int (BUILT_IN_ATOMIC_OR_FETCH_2),


CFN_BUILT_IN_ATOMIC_OR_FETCH_4 = int (BUILT_IN_ATOMIC_OR_FETCH_4),


CFN_BUILT_IN_ATOMIC_OR_FETCH_8 = int (BUILT_IN_ATOMIC_OR_FETCH_8),


CFN_BUILT_IN_ATOMIC_OR_FETCH_16 = int (BUILT_IN_ATOMIC_OR_FETCH_16),



CFN_BUILT_IN_ATOMIC_FETCH_ADD_N = int (BUILT_IN_ATOMIC_FETCH_ADD_N),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_1 = int (BUILT_IN_ATOMIC_FETCH_ADD_1),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_2 = int (BUILT_IN_ATOMIC_FETCH_ADD_2),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_4 = int (BUILT_IN_ATOMIC_FETCH_ADD_4),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_8 = int (BUILT_IN_ATOMIC_FETCH_ADD_8),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_16 = int (BUILT_IN_ATOMIC_FETCH_ADD_16),



CFN_BUILT_IN_ATOMIC_FETCH_SUB_N = int (BUILT_IN_ATOMIC_FETCH_SUB_N),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_1 = int (BUILT_IN_ATOMIC_FETCH_SUB_1),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_2 = int (BUILT_IN_ATOMIC_FETCH_SUB_2),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_4 = int (BUILT_IN_ATOMIC_FETCH_SUB_4),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_8 = int (BUILT_IN_ATOMIC_FETCH_SUB_8),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_16 = int (BUILT_IN_ATOMIC_FETCH_SUB_16),



CFN_BUILT_IN_ATOMIC_FETCH_AND_N = int (BUILT_IN_ATOMIC_FETCH_AND_N),


CFN_BUILT_IN_ATOMIC_FETCH_AND_1 = int (BUILT_IN_ATOMIC_FETCH_AND_1),


CFN_BUILT_IN_ATOMIC_FETCH_AND_2 = int (BUILT_IN_ATOMIC_FETCH_AND_2),


CFN_BUILT_IN_ATOMIC_FETCH_AND_4 = int (BUILT_IN_ATOMIC_FETCH_AND_4),


CFN_BUILT_IN_ATOMIC_FETCH_AND_8 = int (BUILT_IN_ATOMIC_FETCH_AND_8),


CFN_BUILT_IN_ATOMIC_FETCH_AND_16 = int (BUILT_IN_ATOMIC_FETCH_AND_16),



CFN_BUILT_IN_ATOMIC_FETCH_NAND_N = int (BUILT_IN_ATOMIC_FETCH_NAND_N),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_1 = int (BUILT_IN_ATOMIC_FETCH_NAND_1),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_2 = int (BUILT_IN_ATOMIC_FETCH_NAND_2),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_4 = int (BUILT_IN_ATOMIC_FETCH_NAND_4),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_8 = int (BUILT_IN_ATOMIC_FETCH_NAND_8),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_16 = int (BUILT_IN_ATOMIC_FETCH_NAND_16),



CFN_BUILT_IN_ATOMIC_FETCH_XOR_N = int (BUILT_IN_ATOMIC_FETCH_XOR_N),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_1 = int (BUILT_IN_ATOMIC_FETCH_XOR_1),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_2 = int (BUILT_IN_ATOMIC_FETCH_XOR_2),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_4 = int (BUILT_IN_ATOMIC_FETCH_XOR_4),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_8 = int (BUILT_IN_ATOMIC_FETCH_XOR_8),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_16 = int (BUILT_IN_ATOMIC_FETCH_XOR_16),




CFN_BUILT_IN_ATOMIC_FETCH_OR_N = int (BUILT_IN_ATOMIC_FETCH_OR_N),


CFN_BUILT_IN_ATOMIC_FETCH_OR_1 = int (BUILT_IN_ATOMIC_FETCH_OR_1),


CFN_BUILT_IN_ATOMIC_FETCH_OR_2 = int (BUILT_IN_ATOMIC_FETCH_OR_2),


CFN_BUILT_IN_ATOMIC_FETCH_OR_4 = int (BUILT_IN_ATOMIC_FETCH_OR_4),


CFN_BUILT_IN_ATOMIC_FETCH_OR_8 = int (BUILT_IN_ATOMIC_FETCH_OR_8),


CFN_BUILT_IN_ATOMIC_FETCH_OR_16 = int (BUILT_IN_ATOMIC_FETCH_OR_16),



CFN_BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE = int (BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE),



CFN_BUILT_IN_ATOMIC_IS_LOCK_FREE = int (BUILT_IN_ATOMIC_IS_LOCK_FREE),




CFN_BUILT_IN_ATOMIC_THREAD_FENCE = int (BUILT_IN_ATOMIC_THREAD_FENCE),



CFN_BUILT_IN_ATOMIC_SIGNAL_FENCE = int (BUILT_IN_ATOMIC_SIGNAL_FENCE),






CFN_BUILT_IN_ATOMIC_FERAISEEXCEPT = int (BUILT_IN_ATOMIC_FERAISEEXCEPT),
# 1049 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def"
CFN_BUILT_IN_ACC_GET_DEVICE_TYPE = int (BUILT_IN_ACC_GET_DEVICE_TYPE),

CFN_BUILT_IN_GOACC_DATA_START = int (BUILT_IN_GOACC_DATA_START),

CFN_BUILT_IN_GOACC_DATA_END = int (BUILT_IN_GOACC_DATA_END),

CFN_BUILT_IN_GOACC_ENTER_EXIT_DATA = int (BUILT_IN_GOACC_ENTER_EXIT_DATA),


CFN_BUILT_IN_GOACC_PARALLEL = int (BUILT_IN_GOACC_PARALLEL),


CFN_BUILT_IN_GOACC_UPDATE = int (BUILT_IN_GOACC_UPDATE),


CFN_BUILT_IN_GOACC_WAIT = int (BUILT_IN_GOACC_WAIT),



CFN_BUILT_IN_ACC_ON_DEVICE = int (BUILT_IN_ACC_ON_DEVICE),


CFN_BUILT_IN_GOACC_PARLEVEL_ID = int (BUILT_IN_GOACC_PARLEVEL_ID),

CFN_BUILT_IN_GOACC_PARLEVEL_SIZE = int (BUILT_IN_GOACC_PARLEVEL_SIZE),


CFN_BUILT_IN_OMP_GET_THREAD_NUM = int (BUILT_IN_OMP_GET_THREAD_NUM),

CFN_BUILT_IN_OMP_GET_NUM_THREADS = int (BUILT_IN_OMP_GET_NUM_THREADS),

CFN_BUILT_IN_OMP_GET_TEAM_NUM = int (BUILT_IN_OMP_GET_TEAM_NUM),

CFN_BUILT_IN_OMP_GET_NUM_TEAMS = int (BUILT_IN_OMP_GET_NUM_TEAMS),


CFN_BUILT_IN_GOMP_ATOMIC_START = int (BUILT_IN_GOMP_ATOMIC_START),

CFN_BUILT_IN_GOMP_ATOMIC_END = int (BUILT_IN_GOMP_ATOMIC_END),

CFN_BUILT_IN_GOMP_BARRIER = int (BUILT_IN_GOMP_BARRIER),

CFN_BUILT_IN_GOMP_BARRIER_CANCEL = int (BUILT_IN_GOMP_BARRIER_CANCEL),

CFN_BUILT_IN_GOMP_TASKWAIT = int (BUILT_IN_GOMP_TASKWAIT),

CFN_BUILT_IN_GOMP_TASKWAIT_DEPEND = int (BUILT_IN_GOMP_TASKWAIT_DEPEND),

CFN_BUILT_IN_GOMP_TASKYIELD = int (BUILT_IN_GOMP_TASKYIELD),

CFN_BUILT_IN_GOMP_TASKGROUP_START = int (BUILT_IN_GOMP_TASKGROUP_START),

CFN_BUILT_IN_GOMP_TASKGROUP_END = int (BUILT_IN_GOMP_TASKGROUP_END),

CFN_BUILT_IN_GOMP_CANCEL = int (BUILT_IN_GOMP_CANCEL),

CFN_BUILT_IN_GOMP_CANCELLATION_POINT = int (BUILT_IN_GOMP_CANCELLATION_POINT),

CFN_BUILT_IN_GOMP_CRITICAL_START = int (BUILT_IN_GOMP_CRITICAL_START),

CFN_BUILT_IN_GOMP_CRITICAL_END = int (BUILT_IN_GOMP_CRITICAL_END),

CFN_BUILT_IN_GOMP_CRITICAL_NAME_START = int (BUILT_IN_GOMP_CRITICAL_NAME_START),


CFN_BUILT_IN_GOMP_CRITICAL_NAME_END = int (BUILT_IN_GOMP_CRITICAL_NAME_END),





CFN_BUILT_IN_GOMP_LOOP_STATIC_START = int (BUILT_IN_GOMP_LOOP_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_GUIDED_START = int (BUILT_IN_GOMP_LOOP_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START = int (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_START = int (BUILT_IN_GOMP_LOOP_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_START = int (BUILT_IN_GOMP_LOOP_ORDERED_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_START),



CFN_BUILT_IN_GOMP_LOOP_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_STATIC_NEXT),

CFN_BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT),

CFN_BUILT_IN_GOMP_LOOP_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_GUIDED_NEXT),

CFN_BUILT_IN_GOMP_LOOP_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_RUNTIME_NEXT),

CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_START = int (BUILT_IN_GOMP_LOOP_ULL_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT),





CFN_BUILT_IN_GOMP_PARALLEL_LOOP_STATIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_STATIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED = int (BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME = int (BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME = int (BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME),



CFN_BUILT_IN_GOMP_LOOP_END = int (BUILT_IN_GOMP_LOOP_END),

CFN_BUILT_IN_GOMP_LOOP_END_CANCEL = int (BUILT_IN_GOMP_LOOP_END_CANCEL),

CFN_BUILT_IN_GOMP_LOOP_END_NOWAIT = int (BUILT_IN_GOMP_LOOP_END_NOWAIT),

CFN_BUILT_IN_GOMP_ORDERED_START = int (BUILT_IN_GOMP_ORDERED_START),

CFN_BUILT_IN_GOMP_ORDERED_END = int (BUILT_IN_GOMP_ORDERED_END),

CFN_BUILT_IN_GOMP_DOACROSS_POST = int (BUILT_IN_GOMP_DOACROSS_POST),

CFN_BUILT_IN_GOMP_DOACROSS_WAIT = int (BUILT_IN_GOMP_DOACROSS_WAIT),

CFN_BUILT_IN_GOMP_DOACROSS_ULL_POST = int (BUILT_IN_GOMP_DOACROSS_ULL_POST),

CFN_BUILT_IN_GOMP_DOACROSS_ULL_WAIT = int (BUILT_IN_GOMP_DOACROSS_ULL_WAIT),

CFN_BUILT_IN_GOMP_PARALLEL = int (BUILT_IN_GOMP_PARALLEL),

CFN_BUILT_IN_GOMP_PARALLEL_REDUCTIONS = int (BUILT_IN_GOMP_PARALLEL_REDUCTIONS),


CFN_BUILT_IN_GOMP_TASK = int (BUILT_IN_GOMP_TASK),


CFN_BUILT_IN_GOMP_TASKLOOP = int (BUILT_IN_GOMP_TASKLOOP),


CFN_BUILT_IN_GOMP_TASKLOOP_ULL = int (BUILT_IN_GOMP_TASKLOOP_ULL),


CFN_BUILT_IN_GOMP_SECTIONS_START = int (BUILT_IN_GOMP_SECTIONS_START),

CFN_BUILT_IN_GOMP_SECTIONS2_START = int (BUILT_IN_GOMP_SECTIONS2_START),

CFN_BUILT_IN_GOMP_SECTIONS_NEXT = int (BUILT_IN_GOMP_SECTIONS_NEXT),

CFN_BUILT_IN_GOMP_PARALLEL_SECTIONS = int (BUILT_IN_GOMP_PARALLEL_SECTIONS),


CFN_BUILT_IN_GOMP_SECTIONS_END = int (BUILT_IN_GOMP_SECTIONS_END),

CFN_BUILT_IN_GOMP_SECTIONS_END_CANCEL = int (BUILT_IN_GOMP_SECTIONS_END_CANCEL),


CFN_BUILT_IN_GOMP_SECTIONS_END_NOWAIT = int (BUILT_IN_GOMP_SECTIONS_END_NOWAIT),


CFN_BUILT_IN_GOMP_SINGLE_START = int (BUILT_IN_GOMP_SINGLE_START),

CFN_BUILT_IN_GOMP_SINGLE_COPY_START = int (BUILT_IN_GOMP_SINGLE_COPY_START),

CFN_BUILT_IN_GOMP_SINGLE_COPY_END = int (BUILT_IN_GOMP_SINGLE_COPY_END),

CFN_BUILT_IN_GOMP_OFFLOAD_REGISTER = int (BUILT_IN_GOMP_OFFLOAD_REGISTER),

CFN_BUILT_IN_GOMP_OFFLOAD_UNREGISTER = int (BUILT_IN_GOMP_OFFLOAD_UNREGISTER),


CFN_BUILT_IN_GOMP_TARGET = int (BUILT_IN_GOMP_TARGET),


CFN_BUILT_IN_GOMP_TARGET_DATA = int (BUILT_IN_GOMP_TARGET_DATA),

CFN_BUILT_IN_GOMP_TARGET_END_DATA = int (BUILT_IN_GOMP_TARGET_END_DATA),

CFN_BUILT_IN_GOMP_TARGET_UPDATE = int (BUILT_IN_GOMP_TARGET_UPDATE),


CFN_BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA = int (BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA),


CFN_BUILT_IN_GOMP_TEAMS = int (BUILT_IN_GOMP_TEAMS),

CFN_BUILT_IN_GOMP_TEAMS_REG = int (BUILT_IN_GOMP_TEAMS_REG),

CFN_BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER = int (BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER),


CFN_BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER = int (BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER),


CFN_BUILT_IN_GOMP_TASK_REDUCTION_REMAP = int (BUILT_IN_GOMP_TASK_REDUCTION_REMAP),


CFN_BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER = int (BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER),


CFN_BUILT_IN_GOACC_DECLARE = int (BUILT_IN_GOACC_DECLARE),
# 1052 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def" 1
CFN_BUILT_IN_TM_START = int (BUILT_IN_TM_START),


CFN_BUILT_IN_TM_COMMIT = int (BUILT_IN_TM_COMMIT),

CFN_BUILT_IN_TM_COMMIT_EH = int (BUILT_IN_TM_COMMIT_EH),

CFN_BUILT_IN_TM_ABORT = int (BUILT_IN_TM_ABORT),

CFN_BUILT_IN_TM_IRREVOCABLE = int (BUILT_IN_TM_IRREVOCABLE),


CFN_BUILT_IN_TM_MEMCPY = int (BUILT_IN_TM_MEMCPY),

CFN_BUILT_IN_TM_MEMCPY_RNWT = int (BUILT_IN_TM_MEMCPY_RNWT),

CFN_BUILT_IN_TM_MEMCPY_RTWN = int (BUILT_IN_TM_MEMCPY_RTWN),

CFN_BUILT_IN_TM_MEMMOVE = int (BUILT_IN_TM_MEMMOVE),

CFN_BUILT_IN_TM_MEMSET = int (BUILT_IN_TM_MEMSET),


CFN_BUILT_IN_TM_GETTMCLONE_IRR = int (BUILT_IN_TM_GETTMCLONE_IRR),

CFN_BUILT_IN_TM_GETTMCLONE_SAFE = int (BUILT_IN_TM_GETTMCLONE_SAFE),



CFN_BUILT_IN_TM_MALLOC = int (BUILT_IN_TM_MALLOC),

CFN_BUILT_IN_TM_CALLOC = int (BUILT_IN_TM_CALLOC),

CFN_BUILT_IN_TM_FREE = int (BUILT_IN_TM_FREE),



CFN_BUILT_IN_TM_LOG_1 = int (BUILT_IN_TM_LOG_1),

CFN_BUILT_IN_TM_LOG_2 = int (BUILT_IN_TM_LOG_2),

CFN_BUILT_IN_TM_LOG_4 = int (BUILT_IN_TM_LOG_4),

CFN_BUILT_IN_TM_LOG_8 = int (BUILT_IN_TM_LOG_8),

CFN_BUILT_IN_TM_LOG_FLOAT = int (BUILT_IN_TM_LOG_FLOAT),

CFN_BUILT_IN_TM_LOG_DOUBLE = int (BUILT_IN_TM_LOG_DOUBLE),

CFN_BUILT_IN_TM_LOG_LDOUBLE = int (BUILT_IN_TM_LOG_LDOUBLE),

CFN_BUILT_IN_TM_LOG = int (BUILT_IN_TM_LOG),



CFN_BUILT_IN_TM_LOG_M64 = int (BUILT_IN_TM_LOG_M64),
CFN_BUILT_IN_TM_LOG_M128 = int (BUILT_IN_TM_LOG_M128),
CFN_BUILT_IN_TM_LOG_M256 = int (BUILT_IN_TM_LOG_M256),
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
CFN_BUILT_IN_TM_STORE_1 = int (BUILT_IN_TM_STORE_1),

CFN_BUILT_IN_TM_STORE_WAR_1 = int (BUILT_IN_TM_STORE_WAR_1),

CFN_BUILT_IN_TM_STORE_WAW_1 = int (BUILT_IN_TM_STORE_WAW_1),


CFN_BUILT_IN_TM_STORE_2 = int (BUILT_IN_TM_STORE_2),

CFN_BUILT_IN_TM_STORE_WAR_2 = int (BUILT_IN_TM_STORE_WAR_2),

CFN_BUILT_IN_TM_STORE_WAW_2 = int (BUILT_IN_TM_STORE_WAW_2),


CFN_BUILT_IN_TM_STORE_4 = int (BUILT_IN_TM_STORE_4),

CFN_BUILT_IN_TM_STORE_WAR_4 = int (BUILT_IN_TM_STORE_WAR_4),

CFN_BUILT_IN_TM_STORE_WAW_4 = int (BUILT_IN_TM_STORE_WAW_4),


CFN_BUILT_IN_TM_STORE_8 = int (BUILT_IN_TM_STORE_8),

CFN_BUILT_IN_TM_STORE_WAR_8 = int (BUILT_IN_TM_STORE_WAR_8),

CFN_BUILT_IN_TM_STORE_WAW_8 = int (BUILT_IN_TM_STORE_WAW_8),


CFN_BUILT_IN_TM_STORE_FLOAT = int (BUILT_IN_TM_STORE_FLOAT),

CFN_BUILT_IN_TM_STORE_WAR_FLOAT = int (BUILT_IN_TM_STORE_WAR_FLOAT),

CFN_BUILT_IN_TM_STORE_WAW_FLOAT = int (BUILT_IN_TM_STORE_WAW_FLOAT),


CFN_BUILT_IN_TM_STORE_DOUBLE = int (BUILT_IN_TM_STORE_DOUBLE),

CFN_BUILT_IN_TM_STORE_WAR_DOUBLE = int (BUILT_IN_TM_STORE_WAR_DOUBLE),

CFN_BUILT_IN_TM_STORE_WAW_DOUBLE = int (BUILT_IN_TM_STORE_WAW_DOUBLE),



CFN_BUILT_IN_TM_STORE_M64 = int (BUILT_IN_TM_STORE_M64),
CFN_BUILT_IN_TM_STORE_WAR_M64 = int (BUILT_IN_TM_STORE_WAR_M64),
CFN_BUILT_IN_TM_STORE_WAW_M64 = int (BUILT_IN_TM_STORE_WAW_M64),
CFN_BUILT_IN_TM_STORE_M128 = int (BUILT_IN_TM_STORE_M128),
CFN_BUILT_IN_TM_STORE_WAR_M128 = int (BUILT_IN_TM_STORE_WAR_M128),
CFN_BUILT_IN_TM_STORE_WAW_M128 = int (BUILT_IN_TM_STORE_WAW_M128),
CFN_BUILT_IN_TM_STORE_M256 = int (BUILT_IN_TM_STORE_M256),
CFN_BUILT_IN_TM_STORE_WAR_M256 = int (BUILT_IN_TM_STORE_WAR_M256),
CFN_BUILT_IN_TM_STORE_WAW_M256 = int (BUILT_IN_TM_STORE_WAW_M256),

CFN_BUILT_IN_TM_STORE_LDOUBLE = int (BUILT_IN_TM_STORE_LDOUBLE),

CFN_BUILT_IN_TM_STORE_WAR_LDOUBLE = int (BUILT_IN_TM_STORE_WAR_LDOUBLE),

CFN_BUILT_IN_TM_STORE_WAW_LDOUBLE = int (BUILT_IN_TM_STORE_WAW_LDOUBLE),
# 133 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
CFN_BUILT_IN_TM_LOAD_1 = int (BUILT_IN_TM_LOAD_1),

CFN_BUILT_IN_TM_LOAD_RAR_1 = int (BUILT_IN_TM_LOAD_RAR_1),

CFN_BUILT_IN_TM_LOAD_RAW_1 = int (BUILT_IN_TM_LOAD_RAW_1),

CFN_BUILT_IN_TM_LOAD_RFW_1 = int (BUILT_IN_TM_LOAD_RFW_1),


CFN_BUILT_IN_TM_LOAD_2 = int (BUILT_IN_TM_LOAD_2),

CFN_BUILT_IN_TM_LOAD_RAR_2 = int (BUILT_IN_TM_LOAD_RAR_2),

CFN_BUILT_IN_TM_LOAD_RAW_2 = int (BUILT_IN_TM_LOAD_RAW_2),

CFN_BUILT_IN_TM_LOAD_RFW_2 = int (BUILT_IN_TM_LOAD_RFW_2),


CFN_BUILT_IN_TM_LOAD_4 = int (BUILT_IN_TM_LOAD_4),

CFN_BUILT_IN_TM_LOAD_RAR_4 = int (BUILT_IN_TM_LOAD_RAR_4),

CFN_BUILT_IN_TM_LOAD_RAW_4 = int (BUILT_IN_TM_LOAD_RAW_4),

CFN_BUILT_IN_TM_LOAD_RFW_4 = int (BUILT_IN_TM_LOAD_RFW_4),


CFN_BUILT_IN_TM_LOAD_8 = int (BUILT_IN_TM_LOAD_8),

CFN_BUILT_IN_TM_LOAD_RAR_8 = int (BUILT_IN_TM_LOAD_RAR_8),

CFN_BUILT_IN_TM_LOAD_RAW_8 = int (BUILT_IN_TM_LOAD_RAW_8),

CFN_BUILT_IN_TM_LOAD_RFW_8 = int (BUILT_IN_TM_LOAD_RFW_8),


CFN_BUILT_IN_TM_LOAD_FLOAT = int (BUILT_IN_TM_LOAD_FLOAT),

CFN_BUILT_IN_TM_LOAD_RAR_FLOAT = int (BUILT_IN_TM_LOAD_RAR_FLOAT),

CFN_BUILT_IN_TM_LOAD_RAW_FLOAT = int (BUILT_IN_TM_LOAD_RAW_FLOAT),

CFN_BUILT_IN_TM_LOAD_RFW_FLOAT = int (BUILT_IN_TM_LOAD_RFW_FLOAT),


CFN_BUILT_IN_TM_LOAD_DOUBLE = int (BUILT_IN_TM_LOAD_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RAR_DOUBLE = int (BUILT_IN_TM_LOAD_RAR_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RAW_DOUBLE = int (BUILT_IN_TM_LOAD_RAW_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RFW_DOUBLE = int (BUILT_IN_TM_LOAD_RFW_DOUBLE),



CFN_BUILT_IN_TM_LOAD_M64 = int (BUILT_IN_TM_LOAD_M64),
CFN_BUILT_IN_TM_LOAD_RAR_M64 = int (BUILT_IN_TM_LOAD_RAR_M64),
CFN_BUILT_IN_TM_LOAD_RAW_M64 = int (BUILT_IN_TM_LOAD_RAW_M64),
CFN_BUILT_IN_TM_LOAD_RFW_M64 = int (BUILT_IN_TM_LOAD_RFW_M64),
CFN_BUILT_IN_TM_LOAD_M128 = int (BUILT_IN_TM_LOAD_M128),
CFN_BUILT_IN_TM_LOAD_RAR_M128 = int (BUILT_IN_TM_LOAD_RAR_M128),
CFN_BUILT_IN_TM_LOAD_RAW_M128 = int (BUILT_IN_TM_LOAD_RAW_M128),
CFN_BUILT_IN_TM_LOAD_RFW_M128 = int (BUILT_IN_TM_LOAD_RFW_M128),
CFN_BUILT_IN_TM_LOAD_M256 = int (BUILT_IN_TM_LOAD_M256),
CFN_BUILT_IN_TM_LOAD_RAR_M256 = int (BUILT_IN_TM_LOAD_RAR_M256),
CFN_BUILT_IN_TM_LOAD_RAW_M256 = int (BUILT_IN_TM_LOAD_RAW_M256),
CFN_BUILT_IN_TM_LOAD_RFW_M256 = int (BUILT_IN_TM_LOAD_RFW_M256),

CFN_BUILT_IN_TM_LOAD_LDOUBLE = int (BUILT_IN_TM_LOAD_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RAR_LDOUBLE = int (BUILT_IN_TM_LOAD_RAR_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RAW_LDOUBLE = int (BUILT_IN_TM_LOAD_RAW_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RFW_LDOUBLE = int (BUILT_IN_TM_LOAD_RFW_LDOUBLE),
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def"
CFN_BEGIN_SANITIZER_BUILTINS = int (BEGIN_SANITIZER_BUILTINS),


CFN_BUILT_IN_ASAN_INIT = int (BUILT_IN_ASAN_INIT),

CFN_BUILT_IN_ASAN_VERSION_MISMATCH_CHECK = int (BUILT_IN_ASAN_VERSION_MISMATCH_CHECK),




CFN_BUILT_IN_ASAN_REPORT_LOAD1 = int (BUILT_IN_ASAN_REPORT_LOAD1),

CFN_BUILT_IN_ASAN_REPORT_LOAD2 = int (BUILT_IN_ASAN_REPORT_LOAD2),

CFN_BUILT_IN_ASAN_REPORT_LOAD4 = int (BUILT_IN_ASAN_REPORT_LOAD4),

CFN_BUILT_IN_ASAN_REPORT_LOAD8 = int (BUILT_IN_ASAN_REPORT_LOAD8),

CFN_BUILT_IN_ASAN_REPORT_LOAD16 = int (BUILT_IN_ASAN_REPORT_LOAD16),

CFN_BUILT_IN_ASAN_REPORT_LOAD_N = int (BUILT_IN_ASAN_REPORT_LOAD_N),


CFN_BUILT_IN_ASAN_REPORT_STORE1 = int (BUILT_IN_ASAN_REPORT_STORE1),

CFN_BUILT_IN_ASAN_REPORT_STORE2 = int (BUILT_IN_ASAN_REPORT_STORE2),

CFN_BUILT_IN_ASAN_REPORT_STORE4 = int (BUILT_IN_ASAN_REPORT_STORE4),

CFN_BUILT_IN_ASAN_REPORT_STORE8 = int (BUILT_IN_ASAN_REPORT_STORE8),

CFN_BUILT_IN_ASAN_REPORT_STORE16 = int (BUILT_IN_ASAN_REPORT_STORE16),

CFN_BUILT_IN_ASAN_REPORT_STORE_N = int (BUILT_IN_ASAN_REPORT_STORE_N),


CFN_BUILT_IN_ASAN_REPORT_LOAD1_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD1_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD2_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD2_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD4_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD4_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD8_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD8_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD16_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD16_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT),



CFN_BUILT_IN_ASAN_REPORT_STORE1_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE1_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE2_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE2_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE4_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE4_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE8_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE8_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE16_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE16_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE_N_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE_N_NOABORT),



CFN_BUILT_IN_ASAN_LOAD1 = int (BUILT_IN_ASAN_LOAD1),

CFN_BUILT_IN_ASAN_LOAD2 = int (BUILT_IN_ASAN_LOAD2),

CFN_BUILT_IN_ASAN_LOAD4 = int (BUILT_IN_ASAN_LOAD4),

CFN_BUILT_IN_ASAN_LOAD8 = int (BUILT_IN_ASAN_LOAD8),

CFN_BUILT_IN_ASAN_LOAD16 = int (BUILT_IN_ASAN_LOAD16),

CFN_BUILT_IN_ASAN_LOADN = int (BUILT_IN_ASAN_LOADN),

CFN_BUILT_IN_ASAN_STORE1 = int (BUILT_IN_ASAN_STORE1),

CFN_BUILT_IN_ASAN_STORE2 = int (BUILT_IN_ASAN_STORE2),

CFN_BUILT_IN_ASAN_STORE4 = int (BUILT_IN_ASAN_STORE4),

CFN_BUILT_IN_ASAN_STORE8 = int (BUILT_IN_ASAN_STORE8),

CFN_BUILT_IN_ASAN_STORE16 = int (BUILT_IN_ASAN_STORE16),

CFN_BUILT_IN_ASAN_STOREN = int (BUILT_IN_ASAN_STOREN),

CFN_BUILT_IN_ASAN_LOAD1_NOABORT = int (BUILT_IN_ASAN_LOAD1_NOABORT),

CFN_BUILT_IN_ASAN_LOAD2_NOABORT = int (BUILT_IN_ASAN_LOAD2_NOABORT),

CFN_BUILT_IN_ASAN_LOAD4_NOABORT = int (BUILT_IN_ASAN_LOAD4_NOABORT),

CFN_BUILT_IN_ASAN_LOAD8_NOABORT = int (BUILT_IN_ASAN_LOAD8_NOABORT),

CFN_BUILT_IN_ASAN_LOAD16_NOABORT = int (BUILT_IN_ASAN_LOAD16_NOABORT),

CFN_BUILT_IN_ASAN_LOADN_NOABORT = int (BUILT_IN_ASAN_LOADN_NOABORT),

CFN_BUILT_IN_ASAN_STORE1_NOABORT = int (BUILT_IN_ASAN_STORE1_NOABORT),

CFN_BUILT_IN_ASAN_STORE2_NOABORT = int (BUILT_IN_ASAN_STORE2_NOABORT),

CFN_BUILT_IN_ASAN_STORE4_NOABORT = int (BUILT_IN_ASAN_STORE4_NOABORT),

CFN_BUILT_IN_ASAN_STORE8_NOABORT = int (BUILT_IN_ASAN_STORE8_NOABORT),

CFN_BUILT_IN_ASAN_STORE16_NOABORT = int (BUILT_IN_ASAN_STORE16_NOABORT),

CFN_BUILT_IN_ASAN_STOREN_NOABORT = int (BUILT_IN_ASAN_STOREN_NOABORT),

CFN_BUILT_IN_ASAN_REGISTER_GLOBALS = int (BUILT_IN_ASAN_REGISTER_GLOBALS),


CFN_BUILT_IN_ASAN_UNREGISTER_GLOBALS = int (BUILT_IN_ASAN_UNREGISTER_GLOBALS),


CFN_BUILT_IN_ASAN_HANDLE_NO_RETURN = int (BUILT_IN_ASAN_HANDLE_NO_RETURN),


CFN_BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT = int (BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT),


CFN_BUILT_IN_ASAN_AFTER_DYNAMIC_INIT = int (BUILT_IN_ASAN_AFTER_DYNAMIC_INIT),


CFN_BUILT_IN_ASAN_POISON_STACK_MEMORY = int (BUILT_IN_ASAN_POISON_STACK_MEMORY),


CFN_BUILT_IN_ASAN_UNPOISON_STACK_MEMORY = int (BUILT_IN_ASAN_UNPOISON_STACK_MEMORY),


CFN_BUILT_IN_ASAN_ALLOCA_POISON = int (BUILT_IN_ASAN_ALLOCA_POISON),

CFN_BUILT_IN_ASAN_ALLOCAS_UNPOISON = int (BUILT_IN_ASAN_ALLOCAS_UNPOISON),

CFN_BUILT_IN_ASAN_POINTER_COMPARE = int (BUILT_IN_ASAN_POINTER_COMPARE),

CFN_BUILT_IN_ASAN_POINTER_SUBTRACT = int (BUILT_IN_ASAN_POINTER_SUBTRACT),



CFN_BUILT_IN_TSAN_INIT = int (BUILT_IN_TSAN_INIT),

CFN_BUILT_IN_TSAN_FUNC_ENTRY = int (BUILT_IN_TSAN_FUNC_ENTRY),

CFN_BUILT_IN_TSAN_FUNC_EXIT = int (BUILT_IN_TSAN_FUNC_EXIT),

CFN_BUILT_IN_TSAN_VPTR_UPDATE = int (BUILT_IN_TSAN_VPTR_UPDATE),

CFN_BUILT_IN_TSAN_READ1 = int (BUILT_IN_TSAN_READ1),

CFN_BUILT_IN_TSAN_READ2 = int (BUILT_IN_TSAN_READ2),

CFN_BUILT_IN_TSAN_READ4 = int (BUILT_IN_TSAN_READ4),

CFN_BUILT_IN_TSAN_READ8 = int (BUILT_IN_TSAN_READ8),

CFN_BUILT_IN_TSAN_READ16 = int (BUILT_IN_TSAN_READ16),

CFN_BUILT_IN_TSAN_WRITE1 = int (BUILT_IN_TSAN_WRITE1),

CFN_BUILT_IN_TSAN_WRITE2 = int (BUILT_IN_TSAN_WRITE2),

CFN_BUILT_IN_TSAN_WRITE4 = int (BUILT_IN_TSAN_WRITE4),

CFN_BUILT_IN_TSAN_WRITE8 = int (BUILT_IN_TSAN_WRITE8),

CFN_BUILT_IN_TSAN_WRITE16 = int (BUILT_IN_TSAN_WRITE16),

CFN_BUILT_IN_TSAN_READ_RANGE = int (BUILT_IN_TSAN_READ_RANGE),

CFN_BUILT_IN_TSAN_WRITE_RANGE = int (BUILT_IN_TSAN_WRITE_RANGE),


CFN_BUILT_IN_TSAN_VOLATILE_READ1 = int (BUILT_IN_TSAN_VOLATILE_READ1),

CFN_BUILT_IN_TSAN_VOLATILE_READ2 = int (BUILT_IN_TSAN_VOLATILE_READ2),

CFN_BUILT_IN_TSAN_VOLATILE_READ4 = int (BUILT_IN_TSAN_VOLATILE_READ4),

CFN_BUILT_IN_TSAN_VOLATILE_READ8 = int (BUILT_IN_TSAN_VOLATILE_READ8),

CFN_BUILT_IN_TSAN_VOLATILE_READ16 = int (BUILT_IN_TSAN_VOLATILE_READ16),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE1 = int (BUILT_IN_TSAN_VOLATILE_WRITE1),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE2 = int (BUILT_IN_TSAN_VOLATILE_WRITE2),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE4 = int (BUILT_IN_TSAN_VOLATILE_WRITE4),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE8 = int (BUILT_IN_TSAN_VOLATILE_WRITE8),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE16 = int (BUILT_IN_TSAN_VOLATILE_WRITE16),


CFN_BUILT_IN_TSAN_ATOMIC8_LOAD = int (BUILT_IN_TSAN_ATOMIC8_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC16_LOAD = int (BUILT_IN_TSAN_ATOMIC16_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC32_LOAD = int (BUILT_IN_TSAN_ATOMIC32_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC64_LOAD = int (BUILT_IN_TSAN_ATOMIC64_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC128_LOAD = int (BUILT_IN_TSAN_ATOMIC128_LOAD),



CFN_BUILT_IN_TSAN_ATOMIC8_STORE = int (BUILT_IN_TSAN_ATOMIC8_STORE),


CFN_BUILT_IN_TSAN_ATOMIC16_STORE = int (BUILT_IN_TSAN_ATOMIC16_STORE),


CFN_BUILT_IN_TSAN_ATOMIC32_STORE = int (BUILT_IN_TSAN_ATOMIC32_STORE),


CFN_BUILT_IN_TSAN_ATOMIC64_STORE = int (BUILT_IN_TSAN_ATOMIC64_STORE),


CFN_BUILT_IN_TSAN_ATOMIC128_STORE = int (BUILT_IN_TSAN_ATOMIC128_STORE),



CFN_BUILT_IN_TSAN_ATOMIC8_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC8_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC16_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC16_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC32_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC32_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC64_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC64_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC128_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC128_EXCHANGE),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC8_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC16_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC32_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC64_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC128_FETCH_ADD),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC8_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC16_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC32_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC64_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC128_FETCH_SUB),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC8_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC16_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC32_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC64_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC128_FETCH_AND),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC8_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC16_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC32_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC64_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC128_FETCH_OR),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC8_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC16_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC32_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC64_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC128_FETCH_XOR),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC8_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC16_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC32_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC64_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC128_FETCH_NAND),



CFN_BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG),




CFN_BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK),




CFN_BUILT_IN_TSAN_ATOMIC_THREAD_FENCE = int (BUILT_IN_TSAN_ATOMIC_THREAD_FENCE),


CFN_BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE = int (BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE),




CFN_BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS = int (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS),



CFN_BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE = int (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE),



CFN_BUILT_IN_UBSAN_HANDLE_MISSING_RETURN = int (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN),



CFN_BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE = int (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE),



CFN_BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1 = int (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1),



CFN_BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE = int (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE),



CFN_BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT = int (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT = int (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT = int (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT = int (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS = int (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS),



CFN_BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT = int (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_ARG = int (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT = int (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1 = int (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT = int (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN = int (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN),



CFN_BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT = int (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS = int (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS),



CFN_BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT = int (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT),





CFN_BUILT_IN_SANITIZER_COV_TRACE_PC = int (BUILT_IN_SANITIZER_COV_TRACE_PC),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP1 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP1),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP2 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP2),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP4 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP4),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP8 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP8),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMPF = int (BUILT_IN_SANITIZER_COV_TRACE_CMPF),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMPD = int (BUILT_IN_SANITIZER_COV_TRACE_CMPD),


CFN_BUILT_IN_SANITIZER_COV_TRACE_SWITCH = int (BUILT_IN_SANITIZER_COV_TRACE_SWITCH),




CFN_END_SANITIZER_BUILTINS = int (END_SANITIZER_BUILTINS),
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def"
CFN_BEGIN_COROUTINE_BUILTINS = int (BEGIN_COROUTINE_BUILTINS),




CFN_BUILT_IN_CORO_PROMISE = int (BUILT_IN_CORO_PROMISE),



CFN_BUILT_IN_CORO_RESUME = int (BUILT_IN_CORO_RESUME),


CFN_BUILT_IN_CORO_DESTROY = int (BUILT_IN_CORO_DESTROY),


CFN_BUILT_IN_CORO_DONE = int (BUILT_IN_CORO_DONE),



CFN_END_COROUTINE_BUILTINS = int (END_COROUTINE_BUILTINS),
# 1061 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 1103 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def" 1
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_WORKITEMABSID = int (BUILT_IN_HSAIL_WORKITEMABSID),



CFN_BUILT_IN_HSAIL_GRIDSIZE = int (BUILT_IN_HSAIL_GRIDSIZE),



CFN_BUILT_IN_HSAIL_WORKITEMFLATABSID_U32 = int (BUILT_IN_HSAIL_WORKITEMFLATABSID_U32),




CFN_BUILT_IN_HSAIL_WORKITEMFLATABSID_U64 = int (BUILT_IN_HSAIL_WORKITEMFLATABSID_U64),




CFN_BUILT_IN_HSAIL_WORKITEMFLATID = int (BUILT_IN_HSAIL_WORKITEMFLATID),



CFN_BUILT_IN_HSAIL_WORKITEMID = int (BUILT_IN_HSAIL_WORKITEMID),



CFN_BUILT_IN_HSAIL_WORKGROUPID = int (BUILT_IN_HSAIL_WORKGROUPID),



CFN_BUILT_IN_HSAIL_CURRENTWORKITEMFLATID = int (BUILT_IN_HSAIL_CURRENTWORKITEMFLATID),




CFN_BUILT_IN_HSAIL_WORKITEMABSID_U64 = int (BUILT_IN_HSAIL_WORKITEMABSID_U64),



CFN_BUILT_IN_HSAIL_PACKETID = int (BUILT_IN_HSAIL_PACKETID),



CFN_BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64 = int (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64),




CFN_BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32 = int (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32),




CFN_BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE = int (BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE),




CFN_BUILT_IN_HSAIL_WORKGROUPSIZE = int (BUILT_IN_HSAIL_WORKGROUPSIZE),




CFN_BUILT_IN_HSAIL_DIM = int (BUILT_IN_HSAIL_DIM),



CFN_BUILT_IN_HSAIL_GRIDGROUPS = int (BUILT_IN_HSAIL_GRIDGROUPS),



CFN_BUILT_IN_HSAIL_BITEXTRACT_S32 = int (BUILT_IN_HSAIL_BITEXTRACT_S32),



CFN_BUILT_IN_HSAIL_BITEXTRACT_U32 = int (BUILT_IN_HSAIL_BITEXTRACT_U32),



CFN_BUILT_IN_HSAIL_BITEXTRACT_S64 = int (BUILT_IN_HSAIL_BITEXTRACT_S64),



CFN_BUILT_IN_HSAIL_BITEXTRACT_U64 = int (BUILT_IN_HSAIL_BITEXTRACT_U64),



CFN_BUILT_IN_HSAIL_BITINSERT_U32 = int (BUILT_IN_HSAIL_BITINSERT_U32),



CFN_BUILT_IN_HSAIL_BITINSERT_U64 = int (BUILT_IN_HSAIL_BITINSERT_U64),




CFN_BUILT_IN_HSAIL_BITMASK_B32 = int (BUILT_IN_HSAIL_BITMASK_B32),



CFN_BUILT_IN_HSAIL_BITMASK_B64 = int (BUILT_IN_HSAIL_BITMASK_B64),



CFN_BUILT_IN_HSAIL_BITREV_B32 = int (BUILT_IN_HSAIL_BITREV_B32),



CFN_BUILT_IN_HSAIL_BITREV_B64 = int (BUILT_IN_HSAIL_BITREV_B64),



CFN_BUILT_IN_HSAIL_BITSELECT_B32 = int (BUILT_IN_HSAIL_BITSELECT_B32),



CFN_BUILT_IN_HSAIL_BITSELECT_U64 = int (BUILT_IN_HSAIL_BITSELECT_U64),



CFN_BUILT_IN_HSAIL_FIRSTBIT_U32 = int (BUILT_IN_HSAIL_FIRSTBIT_U32),



CFN_BUILT_IN_HSAIL_FIRSTBIT_S32 = int (BUILT_IN_HSAIL_FIRSTBIT_S32),



CFN_BUILT_IN_HSAIL_FIRSTBIT_U64 = int (BUILT_IN_HSAIL_FIRSTBIT_U64),



CFN_BUILT_IN_HSAIL_FIRSTBIT_S64 = int (BUILT_IN_HSAIL_FIRSTBIT_S64),



CFN_BUILT_IN_HSAIL_LASTBIT_U32 = int (BUILT_IN_HSAIL_LASTBIT_U32),



CFN_BUILT_IN_HSAIL_LASTBIT_U64 = int (BUILT_IN_HSAIL_LASTBIT_U64),



CFN_BUILT_IN_HSAIL_BORROW_U32 = int (BUILT_IN_HSAIL_BORROW_U32),



CFN_BUILT_IN_HSAIL_BORROW_U64 = int (BUILT_IN_HSAIL_BORROW_U64),



CFN_BUILT_IN_HSAIL_CARRY_U32 = int (BUILT_IN_HSAIL_CARRY_U32),



CFN_BUILT_IN_HSAIL_CARRY_U64 = int (BUILT_IN_HSAIL_CARRY_U64),



CFN_BUILT_IN_HSAIL_REM_S32 = int (BUILT_IN_HSAIL_REM_S32),



CFN_BUILT_IN_HSAIL_REM_S64 = int (BUILT_IN_HSAIL_REM_S64),



CFN_BUILT_IN_HSAIL_MIN_F32 = int (BUILT_IN_HSAIL_MIN_F32),



CFN_BUILT_IN_HSAIL_MAX_F32 = int (BUILT_IN_HSAIL_MAX_F32),



CFN_BUILT_IN_HSAIL_MIN_F64 = int (BUILT_IN_HSAIL_MIN_F64),



CFN_BUILT_IN_HSAIL_MAX_F64 = int (BUILT_IN_HSAIL_MAX_F64),



CFN_BUILT_IN_HSAIL_CLASS_F32 = int (BUILT_IN_HSAIL_CLASS_F32),



CFN_BUILT_IN_HSAIL_CLASS_F64 = int (BUILT_IN_HSAIL_CLASS_F64),



CFN_BUILT_IN_HSAIL_CLASS_F32_F16 = int (BUILT_IN_HSAIL_CLASS_F32_F16),



CFN_BUILT_IN_HSAIL_FRACT_F32 = int (BUILT_IN_HSAIL_FRACT_F32),



CFN_BUILT_IN_HSAIL_FRACT_F64 = int (BUILT_IN_HSAIL_FRACT_F64),



CFN_BUILT_IN_HSAIL_BARRIER = int (BUILT_IN_HSAIL_BARRIER),



CFN_BUILT_IN_HSAIL_INITFBAR = int (BUILT_IN_HSAIL_INITFBAR),



CFN_BUILT_IN_HSAIL_JOINFBAR = int (BUILT_IN_HSAIL_JOINFBAR),



CFN_BUILT_IN_HSAIL_WAITFBAR = int (BUILT_IN_HSAIL_WAITFBAR),



CFN_BUILT_IN_HSAIL_ARRIVEFBAR = int (BUILT_IN_HSAIL_ARRIVEFBAR),



CFN_BUILT_IN_HSAIL_LEAVEFBAR = int (BUILT_IN_HSAIL_LEAVEFBAR),



CFN_BUILT_IN_HSAIL_RELEASEFBAR = int (BUILT_IN_HSAIL_RELEASEFBAR),



CFN_BUILT_IN_HSAIL_BITALIGN = int (BUILT_IN_HSAIL_BITALIGN),



CFN_BUILT_IN_HSAIL_BYTEALIGN = int (BUILT_IN_HSAIL_BYTEALIGN),



CFN_BUILT_IN_HSAIL_LERP = int (BUILT_IN_HSAIL_LERP),



CFN_BUILT_IN_HSAIL_PACKCVT = int (BUILT_IN_HSAIL_PACKCVT),




CFN_BUILT_IN_HSAIL_UNPACKCVT = int (BUILT_IN_HSAIL_UNPACKCVT),



CFN_BUILT_IN_HSAIL_SAD_U16X2 = int (BUILT_IN_HSAIL_SAD_U16X2),



CFN_BUILT_IN_HSAIL_SAD_U32 = int (BUILT_IN_HSAIL_SAD_U32),



CFN_BUILT_IN_HSAIL_SAD_U8X4 = int (BUILT_IN_HSAIL_SAD_U8X4),



CFN_BUILT_IN_HSAIL_SADHI_U8X4 = int (BUILT_IN_HSAIL_SADHI_U8X4),




CFN_BUILT_IN_HSAIL_CLOCK = int (BUILT_IN_HSAIL_CLOCK),



CFN_BUILT_IN_HSAIL_CUID = int (BUILT_IN_HSAIL_CUID),



CFN_BUILT_IN_HSAIL_MAXCUID = int (BUILT_IN_HSAIL_MAXCUID),



CFN_BUILT_IN_HSAIL_DEBUGTRAP = int (BUILT_IN_HSAIL_DEBUGTRAP),



CFN_BUILT_IN_HSAIL_GROUPBASEPTR = int (BUILT_IN_HSAIL_GROUPBASEPTR),



CFN_BUILT_IN_HSAIL_KERNARGBASEPTR_U64 = int (BUILT_IN_HSAIL_KERNARGBASEPTR_U64),




CFN_BUILT_IN_HSAIL_KERNARGBASEPTR_U32 = int (BUILT_IN_HSAIL_KERNARGBASEPTR_U32),




CFN_BUILT_IN_HSAIL_ALLOCA = int (BUILT_IN_HSAIL_ALLOCA),



CFN_BUILT_IN_HSAIL_LDQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_LDQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_LDQUEUEREADINDEX = int (BUILT_IN_HSAIL_LDQUEUEREADINDEX),




CFN_BUILT_IN_HSAIL_STQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_STQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_STQUEUEREADINDEX = int (BUILT_IN_HSAIL_STQUEUEREADINDEX),




CFN_BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_CASQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_CASQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_SEGMENTP_GLOBAL = int (BUILT_IN_HSAIL_SEGMENTP_GLOBAL),




CFN_BUILT_IN_HSAIL_SEGMENTP_GROUP = int (BUILT_IN_HSAIL_SEGMENTP_GROUP),




CFN_BUILT_IN_HSAIL_SEGMENTP_PRIVATE = int (BUILT_IN_HSAIL_SEGMENTP_PRIVATE),
# 392 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_ATOMIC_MIN_S32 = int (BUILT_IN_HSAIL_ATOMIC_MIN_S32),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_S64 = int (BUILT_IN_HSAIL_ATOMIC_MIN_S64),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_U32 = int (BUILT_IN_HSAIL_ATOMIC_MIN_U32),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_U64 = int (BUILT_IN_HSAIL_ATOMIC_MIN_U64),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_S32 = int (BUILT_IN_HSAIL_ATOMIC_MAX_S32),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_S64 = int (BUILT_IN_HSAIL_ATOMIC_MAX_S64),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_U32 = int (BUILT_IN_HSAIL_ATOMIC_MAX_U32),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_U64 = int (BUILT_IN_HSAIL_ATOMIC_MAX_U64),



CFN_BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32 = int (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64 = int (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32 = int (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64 = int (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64),
# 449 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_SAT_ADD_U64 = int (BUILT_IN_HSAIL_SAT_ADD_U64),



CFN_BUILT_IN_HSAIL_SAT_ADD_S64 = int (BUILT_IN_HSAIL_SAT_ADD_S64),



CFN_BUILT_IN_HSAIL_SAT_ADD_U32 = int (BUILT_IN_HSAIL_SAT_ADD_U32),



CFN_BUILT_IN_HSAIL_SAT_ADD_S32 = int (BUILT_IN_HSAIL_SAT_ADD_S32),



CFN_BUILT_IN_HSAIL_SAT_ADD_U16 = int (BUILT_IN_HSAIL_SAT_ADD_U16),



CFN_BUILT_IN_HSAIL_SAT_ADD_S16 = int (BUILT_IN_HSAIL_SAT_ADD_S16),



CFN_BUILT_IN_HSAIL_SAT_ADD_U8 = int (BUILT_IN_HSAIL_SAT_ADD_U8),



CFN_BUILT_IN_HSAIL_SAT_ADD_S8 = int (BUILT_IN_HSAIL_SAT_ADD_S8),



CFN_BUILT_IN_HSAIL_SAT_SUB_U64 = int (BUILT_IN_HSAIL_SAT_SUB_U64),



CFN_BUILT_IN_HSAIL_SAT_SUB_S64 = int (BUILT_IN_HSAIL_SAT_SUB_S64),



CFN_BUILT_IN_HSAIL_SAT_SUB_U32 = int (BUILT_IN_HSAIL_SAT_SUB_U32),



CFN_BUILT_IN_HSAIL_SAT_SUB_S32 = int (BUILT_IN_HSAIL_SAT_SUB_S32),



CFN_BUILT_IN_HSAIL_SAT_SUB_U16 = int (BUILT_IN_HSAIL_SAT_SUB_U16),



CFN_BUILT_IN_HSAIL_SAT_SUB_S16 = int (BUILT_IN_HSAIL_SAT_SUB_S16),



CFN_BUILT_IN_HSAIL_SAT_SUB_U8 = int (BUILT_IN_HSAIL_SAT_SUB_U8),



CFN_BUILT_IN_HSAIL_SAT_SUB_S8 = int (BUILT_IN_HSAIL_SAT_SUB_S8),



CFN_BUILT_IN_HSAIL_SAT_MUL_U64 = int (BUILT_IN_HSAIL_SAT_MUL_U64),



CFN_BUILT_IN_HSAIL_SAT_MUL_S64 = int (BUILT_IN_HSAIL_SAT_MUL_S64),



CFN_BUILT_IN_HSAIL_SAT_MUL_U32 = int (BUILT_IN_HSAIL_SAT_MUL_U32),



CFN_BUILT_IN_HSAIL_SAT_MUL_S32 = int (BUILT_IN_HSAIL_SAT_MUL_S32),



CFN_BUILT_IN_HSAIL_SAT_MUL_U16 = int (BUILT_IN_HSAIL_SAT_MUL_U16),



CFN_BUILT_IN_HSAIL_SAT_MUL_S16 = int (BUILT_IN_HSAIL_SAT_MUL_S16),



CFN_BUILT_IN_HSAIL_SAT_MUL_U8 = int (BUILT_IN_HSAIL_SAT_MUL_U8),



CFN_BUILT_IN_HSAIL_SAT_MUL_S8 = int (BUILT_IN_HSAIL_SAT_MUL_S8),







CFN_BUILT_IN_HSAIL_FTZ_F32_F16 = int (BUILT_IN_HSAIL_FTZ_F32_F16),


CFN_BUILT_IN_HSAIL_FTZ_F32 = int (BUILT_IN_HSAIL_FTZ_F32),


CFN_BUILT_IN_HSAIL_FTZ_F64 = int (BUILT_IN_HSAIL_FTZ_F64),


CFN_BUILT_IN_HSAIL_PUSH_FRAME = int (BUILT_IN_HSAIL_PUSH_FRAME),


CFN_BUILT_IN_HSAIL_POP_FRAME = int (BUILT_IN_HSAIL_POP_FRAME),


CFN_BUILT_IN_HSAIL_SETWORKITEMID = int (BUILT_IN_HSAIL_SETWORKITEMID),


CFN_BUILT_IN_HSAIL_LAUNCH_WG_FUNC = int (BUILT_IN_HSAIL_LAUNCH_WG_FUNC),



CFN_BUILT_IN_HSAIL_LAUNCH_KERNEL = int (BUILT_IN_HSAIL_LAUNCH_KERNEL),



CFN_BUILT_IN_HSAIL_F32_TO_F16 = int (BUILT_IN_HSAIL_F32_TO_F16),


CFN_BUILT_IN_HSAIL_F16_TO_F32 = int (BUILT_IN_HSAIL_F16_TO_F32),







CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64),
# 1104 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 247 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2



# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def" 1
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def"
CFN_MASK_LOAD = int (END_BUILTINS) + int (IFN_MASK_LOAD),
CFN_LOAD_LANES = int (END_BUILTINS) + int (IFN_LOAD_LANES),
CFN_MASK_LOAD_LANES = int (END_BUILTINS) + int (IFN_MASK_LOAD_LANES),


CFN_GATHER_LOAD = int (END_BUILTINS) + int (IFN_GATHER_LOAD),
CFN_MASK_GATHER_LOAD = int (END_BUILTINS) + int (IFN_MASK_GATHER_LOAD),


CFN_LEN_LOAD = int (END_BUILTINS) + int (IFN_LEN_LOAD),

CFN_SCATTER_STORE = int (END_BUILTINS) + int (IFN_SCATTER_STORE),
CFN_MASK_SCATTER_STORE = int (END_BUILTINS) + int (IFN_MASK_SCATTER_STORE),


CFN_MASK_STORE = int (END_BUILTINS) + int (IFN_MASK_STORE),
CFN_STORE_LANES = int (END_BUILTINS) + int (IFN_STORE_LANES),
CFN_MASK_STORE_LANES = int (END_BUILTINS) + int (IFN_MASK_STORE_LANES),


CFN_VCOND = int (END_BUILTINS) + int (IFN_VCOND),
CFN_VCONDU = int (END_BUILTINS) + int (IFN_VCONDU),
CFN_VCONDEQ = int (END_BUILTINS) + int (IFN_VCONDEQ),
CFN_VCOND_MASK = int (END_BUILTINS) + int (IFN_VCOND_MASK),

CFN_LEN_STORE = int (END_BUILTINS) + int (IFN_LEN_STORE),

CFN_WHILE_ULT = int (END_BUILTINS) + int (IFN_WHILE_ULT),
CFN_CHECK_RAW_PTRS = int (END_BUILTINS) + int (IFN_CHECK_RAW_PTRS),

CFN_CHECK_WAR_PTRS = int (END_BUILTINS) + int (IFN_CHECK_WAR_PTRS),


CFN_VEC_SHL_INSERT = int (END_BUILTINS) + int (IFN_VEC_SHL_INSERT),


CFN_DIV_POW2 = int (END_BUILTINS) + int (IFN_DIV_POW2),

CFN_FMS = int (END_BUILTINS) + int (IFN_FMS),
CFN_FNMA = int (END_BUILTINS) + int (IFN_FNMA),
CFN_FNMS = int (END_BUILTINS) + int (IFN_FNMS),

CFN_AVG_FLOOR = int (END_BUILTINS) + int (IFN_AVG_FLOOR),

CFN_AVG_CEIL = int (END_BUILTINS) + int (IFN_AVG_CEIL),


CFN_MULHS = int (END_BUILTINS) + int (IFN_MULHS),

CFN_MULHRS = int (END_BUILTINS) + int (IFN_MULHRS),


CFN_COND_ADD = int (END_BUILTINS) + int (IFN_COND_ADD),
CFN_COND_SUB = int (END_BUILTINS) + int (IFN_COND_SUB),
CFN_COND_MUL = int (END_BUILTINS) + int (IFN_COND_MUL),
CFN_COND_DIV = int (END_BUILTINS) + int (IFN_COND_DIV),

CFN_COND_MOD = int (END_BUILTINS) + int (IFN_COND_MOD),

CFN_COND_RDIV = int (END_BUILTINS) + int (IFN_COND_RDIV),
CFN_COND_MIN = int (END_BUILTINS) + int (IFN_COND_MIN),

CFN_COND_MAX = int (END_BUILTINS) + int (IFN_COND_MAX),

CFN_COND_AND = int (END_BUILTINS) + int (IFN_COND_AND),

CFN_COND_IOR = int (END_BUILTINS) + int (IFN_COND_IOR),

CFN_COND_XOR = int (END_BUILTINS) + int (IFN_COND_XOR),

CFN_COND_SHL = int (END_BUILTINS) + int (IFN_COND_SHL),

CFN_COND_SHR = int (END_BUILTINS) + int (IFN_COND_SHR),


CFN_COND_FMA = int (END_BUILTINS) + int (IFN_COND_FMA),
CFN_COND_FMS = int (END_BUILTINS) + int (IFN_COND_FMS),
CFN_COND_FNMA = int (END_BUILTINS) + int (IFN_COND_FNMA),
CFN_COND_FNMS = int (END_BUILTINS) + int (IFN_COND_FNMS),

CFN_RSQRT = int (END_BUILTINS) + int (IFN_RSQRT),

CFN_REDUC_PLUS = int (END_BUILTINS) + int (IFN_REDUC_PLUS),

CFN_REDUC_MAX = int (END_BUILTINS) + int (IFN_REDUC_MAX),

CFN_REDUC_MIN = int (END_BUILTINS) + int (IFN_REDUC_MIN),

CFN_REDUC_AND = int (END_BUILTINS) + int (IFN_REDUC_AND),

CFN_REDUC_IOR = int (END_BUILTINS) + int (IFN_REDUC_IOR),

CFN_REDUC_XOR = int (END_BUILTINS) + int (IFN_REDUC_XOR),



CFN_EXTRACT_LAST = int (END_BUILTINS) + int (IFN_EXTRACT_LAST),



CFN_FOLD_EXTRACT_LAST = int (END_BUILTINS) + int (IFN_FOLD_EXTRACT_LAST),


CFN_FOLD_LEFT_PLUS = int (END_BUILTINS) + int (IFN_FOLD_LEFT_PLUS),


CFN_MASK_FOLD_LEFT_PLUS = int (END_BUILTINS) + int (IFN_MASK_FOLD_LEFT_PLUS),



CFN_ACOS = int (END_BUILTINS) + int (IFN_ACOS),
CFN_ACOSH = int (END_BUILTINS) + int (IFN_ACOSH),
CFN_ASIN = int (END_BUILTINS) + int (IFN_ASIN),
CFN_ASINH = int (END_BUILTINS) + int (IFN_ASINH),
CFN_ATAN = int (END_BUILTINS) + int (IFN_ATAN),
CFN_ATANH = int (END_BUILTINS) + int (IFN_ATANH),
CFN_COS = int (END_BUILTINS) + int (IFN_COS),
CFN_COSH = int (END_BUILTINS) + int (IFN_COSH),
CFN_EXP = int (END_BUILTINS) + int (IFN_EXP),
CFN_EXP10 = int (END_BUILTINS) + int (IFN_EXP10),
CFN_EXP2 = int (END_BUILTINS) + int (IFN_EXP2),
CFN_EXPM1 = int (END_BUILTINS) + int (IFN_EXPM1),
CFN_LOG = int (END_BUILTINS) + int (IFN_LOG),
CFN_LOG10 = int (END_BUILTINS) + int (IFN_LOG10),
CFN_LOG1P = int (END_BUILTINS) + int (IFN_LOG1P),
CFN_LOG2 = int (END_BUILTINS) + int (IFN_LOG2),
CFN_LOGB = int (END_BUILTINS) + int (IFN_LOGB),
CFN_SIGNBIT = int (END_BUILTINS) + int (IFN_SIGNBIT),
CFN_SIGNIFICAND = int (END_BUILTINS) + int (IFN_SIGNIFICAND),
CFN_SIN = int (END_BUILTINS) + int (IFN_SIN),
CFN_SINH = int (END_BUILTINS) + int (IFN_SINH),
CFN_SQRT = int (END_BUILTINS) + int (IFN_SQRT),
CFN_TAN = int (END_BUILTINS) + int (IFN_TAN),
CFN_TANH = int (END_BUILTINS) + int (IFN_TANH),


CFN_CEIL = int (END_BUILTINS) + int (IFN_CEIL),
CFN_FLOOR = int (END_BUILTINS) + int (IFN_FLOOR),
CFN_NEARBYINT = int (END_BUILTINS) + int (IFN_NEARBYINT),
CFN_RINT = int (END_BUILTINS) + int (IFN_RINT),
CFN_ROUND = int (END_BUILTINS) + int (IFN_ROUND),
CFN_ROUNDEVEN = int (END_BUILTINS) + int (IFN_ROUNDEVEN),
CFN_TRUNC = int (END_BUILTINS) + int (IFN_TRUNC),


CFN_ATAN2 = int (END_BUILTINS) + int (IFN_ATAN2),
CFN_COPYSIGN = int (END_BUILTINS) + int (IFN_COPYSIGN),
CFN_FMOD = int (END_BUILTINS) + int (IFN_FMOD),
CFN_HYPOT = int (END_BUILTINS) + int (IFN_HYPOT),
CFN_POW = int (END_BUILTINS) + int (IFN_POW),
CFN_REMAINDER = int (END_BUILTINS) + int (IFN_REMAINDER),
CFN_SCALB = int (END_BUILTINS) + int (IFN_SCALB),
CFN_FMIN = int (END_BUILTINS) + int (IFN_FMIN),
CFN_FMAX = int (END_BUILTINS) + int (IFN_FMAX),
CFN_XORSIGN = int (END_BUILTINS) + int (IFN_XORSIGN),


CFN_LDEXP = int (END_BUILTINS) + int (IFN_LDEXP),


CFN_FMA = int (END_BUILTINS) + int (IFN_FMA),


CFN_CLRSB = int (END_BUILTINS) + int (IFN_CLRSB),
CFN_CLZ = int (END_BUILTINS) + int (IFN_CLZ),
CFN_CTZ = int (END_BUILTINS) + int (IFN_CTZ),
CFN_FFS = int (END_BUILTINS) + int (IFN_FFS),
CFN_PARITY = int (END_BUILTINS) + int (IFN_PARITY),
CFN_POPCOUNT = int (END_BUILTINS) + int (IFN_POPCOUNT),

CFN_GOMP_USE_SIMT = int (END_BUILTINS) + int (IFN_GOMP_USE_SIMT),
CFN_GOMP_SIMT_ENTER = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ENTER),
CFN_GOMP_SIMT_ENTER_ALLOC = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ENTER_ALLOC),
CFN_GOMP_SIMT_EXIT = int (END_BUILTINS) + int (IFN_GOMP_SIMT_EXIT),
CFN_GOMP_SIMT_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMT_LANE),
CFN_GOMP_SIMT_VF = int (END_BUILTINS) + int (IFN_GOMP_SIMT_VF),
CFN_GOMP_SIMT_LAST_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMT_LAST_LANE),
CFN_GOMP_SIMT_ORDERED_PRED = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ORDERED_PRED),
CFN_GOMP_SIMT_VOTE_ANY = int (END_BUILTINS) + int (IFN_GOMP_SIMT_VOTE_ANY),
CFN_GOMP_SIMT_XCHG_BFLY = int (END_BUILTINS) + int (IFN_GOMP_SIMT_XCHG_BFLY),
CFN_GOMP_SIMT_XCHG_IDX = int (END_BUILTINS) + int (IFN_GOMP_SIMT_XCHG_IDX),
CFN_GOMP_SIMD_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMD_LANE),
CFN_GOMP_SIMD_VF = int (END_BUILTINS) + int (IFN_GOMP_SIMD_VF),
CFN_GOMP_SIMD_LAST_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMD_LAST_LANE),
CFN_GOMP_SIMD_ORDERED_START = int (END_BUILTINS) + int (IFN_GOMP_SIMD_ORDERED_START),
CFN_GOMP_SIMD_ORDERED_END = int (END_BUILTINS) + int (IFN_GOMP_SIMD_ORDERED_END),
CFN_LOOP_VECTORIZED = int (END_BUILTINS) + int (IFN_LOOP_VECTORIZED),
CFN_LOOP_DIST_ALIAS = int (END_BUILTINS) + int (IFN_LOOP_DIST_ALIAS),
CFN_ANNOTATE = int (END_BUILTINS) + int (IFN_ANNOTATE),
CFN_UBSAN_NULL = int (END_BUILTINS) + int (IFN_UBSAN_NULL),
CFN_UBSAN_BOUNDS = int (END_BUILTINS) + int (IFN_UBSAN_BOUNDS),
CFN_UBSAN_VPTR = int (END_BUILTINS) + int (IFN_UBSAN_VPTR),
CFN_UBSAN_CHECK_ADD = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_ADD),
CFN_UBSAN_CHECK_SUB = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_SUB),
CFN_UBSAN_CHECK_MUL = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_MUL),
CFN_UBSAN_PTR = int (END_BUILTINS) + int (IFN_UBSAN_PTR),
CFN_UBSAN_OBJECT_SIZE = int (END_BUILTINS) + int (IFN_UBSAN_OBJECT_SIZE),
CFN_ABNORMAL_DISPATCHER = int (END_BUILTINS) + int (IFN_ABNORMAL_DISPATCHER),
CFN_BUILTIN_EXPECT = int (END_BUILTINS) + int (IFN_BUILTIN_EXPECT),
CFN_ASAN_CHECK = int (END_BUILTINS) + int (IFN_ASAN_CHECK),
CFN_ASAN_MARK = int (END_BUILTINS) + int (IFN_ASAN_MARK),
CFN_ASAN_POISON = int (END_BUILTINS) + int (IFN_ASAN_POISON),
CFN_ASAN_POISON_USE = int (END_BUILTINS) + int (IFN_ASAN_POISON_USE),
CFN_ADD_OVERFLOW = int (END_BUILTINS) + int (IFN_ADD_OVERFLOW),
CFN_SUB_OVERFLOW = int (END_BUILTINS) + int (IFN_SUB_OVERFLOW),
CFN_MUL_OVERFLOW = int (END_BUILTINS) + int (IFN_MUL_OVERFLOW),
CFN_TSAN_FUNC_EXIT = int (END_BUILTINS) + int (IFN_TSAN_FUNC_EXIT),
CFN_VA_ARG = int (END_BUILTINS) + int (IFN_VA_ARG),
CFN_VEC_CONVERT = int (END_BUILTINS) + int (IFN_VEC_CONVERT),





CFN_UNIQUE = int (END_BUILTINS) + int (IFN_UNIQUE),
CFN_PHI = int (END_BUILTINS) + int (IFN_PHI),







CFN_GOACC_DIM_SIZE = int (END_BUILTINS) + int (IFN_GOACC_DIM_SIZE),
CFN_GOACC_DIM_POS = int (END_BUILTINS) + int (IFN_GOACC_DIM_POS),


CFN_GOACC_LOOP = int (END_BUILTINS) + int (IFN_GOACC_LOOP),


CFN_GOACC_REDUCTION = int (END_BUILTINS) + int (IFN_GOACC_REDUCTION),



CFN_GOACC_TILE = int (END_BUILTINS) + int (IFN_GOACC_TILE),



CFN_SET_EDOM = int (END_BUILTINS) + int (IFN_SET_EDOM),




CFN_ATOMIC_BIT_TEST_AND_SET = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_SET),
CFN_ATOMIC_BIT_TEST_AND_COMPLEMENT = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT),
CFN_ATOMIC_BIT_TEST_AND_RESET = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_RESET),
CFN_ATOMIC_COMPARE_EXCHANGE = int (END_BUILTINS) + int (IFN_ATOMIC_COMPARE_EXCHANGE),


CFN_FALLTHROUGH = int (END_BUILTINS) + int (IFN_FALLTHROUGH),


CFN_LAUNDER = int (END_BUILTINS) + int (IFN_LAUNDER),


CFN_DIVMOD = int (END_BUILTINS) + int (IFN_DIVMOD),


CFN_CO_ACTOR = int (END_BUILTINS) + int (IFN_CO_ACTOR),
CFN_CO_YIELD = int (END_BUILTINS) + int (IFN_CO_YIELD),
CFN_CO_SUSPN = int (END_BUILTINS) + int (IFN_CO_SUSPN),
CFN_CO_FRAME = int (END_BUILTINS) + int (IFN_CO_FRAME),


CFN_NOP = int (END_BUILTINS) + int (IFN_NOP),
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2

  CFN_LAST
};

# 1 "./case-cfn-macros.h" 1
# 256 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2



bool
commutative_tree_code (enum tree_code code)
{
  switch (code)
    {
    case PLUS_EXPR:
    case MULT_EXPR:
    case MULT_HIGHPART_EXPR:
    case MIN_EXPR:
    case MAX_EXPR:
    case BIT_IOR_EXPR:
    case BIT_XOR_EXPR:
    case BIT_AND_EXPR:
    case NE_EXPR:
    case EQ_EXPR:
    case UNORDERED_EXPR:
    case ORDERED_EXPR:
    case UNEQ_EXPR:
    case LTGT_EXPR:
    case TRUTH_AND_EXPR:
    case TRUTH_XOR_EXPR:
    case TRUTH_OR_EXPR:
    case WIDEN_MULT_EXPR:
    case VEC_WIDEN_MULT_HI_EXPR:
    case VEC_WIDEN_MULT_LO_EXPR:
    case VEC_WIDEN_MULT_EVEN_EXPR:
    case VEC_WIDEN_MULT_ODD_EXPR:
      return true;

    default:
      break;
    }
  return false;
}



bool
commutative_ternary_tree_code (enum tree_code code)
{
  switch (code)
    {
    case WIDEN_MULT_PLUS_EXPR:
    case WIDEN_MULT_MINUS_EXPR:
    case DOT_PROD_EXPR:
      return true;

    default:
      break;
    }
  return false;
}



bool
comparison_code_p (enum tree_code code)
{
  switch (code)
    {
    case EQ_EXPR:
    case NE_EXPR:
    case ORDERED_EXPR:
    case UNORDERED_EXPR:
    case LTGT_EXPR:
    case UNEQ_EXPR:
    case GT_EXPR:
    case GE_EXPR:
    case LT_EXPR:
    case LE_EXPR:
    case UNGT_EXPR:
    case UNGE_EXPR:
    case UNLT_EXPR:
    case UNLE_EXPR:
      return true;

    default:
      break;
    }
  return false;
}




class id_base : public nofree_ptr_hash<id_base>
{
public:
  enum id_kind { CODE, FN, PREDICATE, USER, NULL_ID } kind;

  id_base (id_kind, const char *, int = -1);

  hashval_t hashval;
  int nargs;
  const char *id;


  static inline hashval_t hash (const id_base *);
  static inline int equal (const id_base *, const id_base *);
};

inline hashval_t
id_base::hash (const id_base *op)
{
  return op->hashval;
}

inline int
id_base::equal (const id_base *op1,
   const id_base *op2)
{
  return (op1->hashval == op2->hashval
   && strcmp (op1->id, op2->id) == 0);
}


static id_base *null_id;



static hash_table<id_base> *operators;

id_base::id_base (id_kind kind_, const char *id_, int nargs_)
{
  kind = kind_;
  id = id_;
  nargs = nargs_;
  hashval = htab_hash_string (id);
}



class operator_id : public id_base
{
public:
  operator_id (enum tree_code code_, const char *id_, unsigned nargs_,
        const char *tcc_)
      : id_base (id_base::CODE, id_, nargs_), code (code_), tcc (tcc_) {}
  enum tree_code code;
  const char *tcc;
};



class fn_id : public id_base
{
public:
  fn_id (enum built_in_function fn_, const char *id_)
      : id_base (id_base::FN, id_), fn (fn_) {}
  fn_id (enum internal_fn fn_, const char *id_)
      : id_base (id_base::FN, id_), fn (int (END_BUILTINS) + int (fn_)) {}
  unsigned int fn;
};

class simplify;



class predicate_id : public id_base
{
public:
  predicate_id (const char *id_)
    : id_base (id_base::PREDICATE, id_), matchers (vNULL) {}
  vec<simplify *> matchers;
};



class user_id : public id_base
{
public:
  user_id (const char *id_, bool is_oper_list_ = false)
    : id_base (id_base::USER, id_), substitutes (vNULL),
      used (false), is_oper_list (is_oper_list_) {}
  vec<id_base *> substitutes;
  bool used;
  bool is_oper_list;
};

template<>
template<>
inline bool
is_a_helper <fn_id *>::test (id_base *id)
{
  return id->kind == id_base::FN;
}

template<>
template<>
inline bool
is_a_helper <operator_id *>::test (id_base *id)
{
  return id->kind == id_base::CODE;
}

template<>
template<>
inline bool
is_a_helper <predicate_id *>::test (id_base *id)
{
  return id->kind == id_base::PREDICATE;
}

template<>
template<>
inline bool
is_a_helper <user_id *>::test (id_base *id)
{
  return id->kind == id_base::USER;
}




static int
commutative_op (id_base *id)
{
  if (operator_id *code = dyn_cast <operator_id *> (id))
    {
      if (commutative_tree_code (code->code)
   || commutative_ternary_tree_code (code->code))
 return 0;
      return -1;
    }
  if (fn_id *fn = dyn_cast <fn_id *> (id))
    switch (fn->fn)
      {
      case CFN_FMA: case CFN_BUILT_IN_FMAF: case CFN_BUILT_IN_FMA: case CFN_BUILT_IN_FMAL:
      case CFN_FMS:
      case CFN_FNMA:
      case CFN_FNMS:
 return 0;

      default:
 return -1;
      }
  if (user_id *uid = dyn_cast<user_id *> (id))
    {
      int res = commutative_op (uid->substitutes[0]);
      if (res < 0)
 return 0;
      for (unsigned i = 1; i < uid->substitutes.length (); ++i)
 if (res != commutative_op (uid->substitutes[i]))
   return -1;
      return res;
    }
  return -1;
}



static predicate_id *
add_predicate (const char *id)
{
  predicate_id *p = new predicate_id (id);
  id_base **slot = operators->find_slot_with_hash (p, p->hashval, INSERT);
  if (*slot)
    fatal ("duplicate id definition");
  *slot = p;
  return p;
}



static void
add_operator (enum tree_code code, const char *id,
       const char *tcc, unsigned nargs)
{
  if (strcmp (tcc, "tcc_unary") != 0
      && strcmp (tcc, "tcc_binary") != 0
      && strcmp (tcc, "tcc_comparison") != 0
      && strcmp (tcc, "tcc_expression") != 0

      && strcmp (tcc, "tcc_reference") != 0

      && strcmp (tcc, "tcc_constant") != 0

      && !(code == CONSTRUCTOR)

      && !(code == SSA_NAME))
    return;

  if (code == ADDR_EXPR)
    nargs = 0;
  operator_id *op = new operator_id (code, id, nargs, tcc);
  id_base **slot = operators->find_slot_with_hash (op, op->hashval, INSERT);
  if (*slot)
    fatal ("duplicate id definition");
  *slot = op;
}




template <typename T>
static void
add_function (T code, const char *id)
{
  fn_id *fn = new fn_id (code, id);
  id_base **slot = operators->find_slot_with_hash (fn, fn->hashval, INSERT);
  if (*slot)
    fatal ("duplicate id definition");
  *slot = fn;
}



static bool
operator==(id_base &id, enum tree_code code)
{
  if (operator_id *oid = dyn_cast <operator_id *> (&id))
    return oid->code == code;
  return false;
}



id_base *
get_operator (const char *id, bool allow_null = false)
{
  if (allow_null && strcmp (id, "null") == 0)
    return null_id;

  id_base tem (id_base::CODE, id);

  id_base *op = operators->find_with_hash (&tem, tem.hashval);
  if (op)
    {

      if (user_id *uid = dyn_cast<user_id *> (op))
 uid->used = true;
      return op;
    }

  char *id2;
  bool all_upper = true;
  bool all_lower = true;
  for (unsigned int i = 0; id[i]; ++i)
    if ((_sch_istable[(id[i]) & 0xff] & (unsigned short)(_sch_isupper)))
      all_lower = false;
    else if ((_sch_istable[(id[i]) & 0xff] & (unsigned short)(_sch_islower)))
      all_upper = false;
  if (all_lower)
    {

      id2 = (libiberty_concat_ptr = (char *) __builtin_alloca(concat_length (id, "_EXPR", nullptr) + 1), concat_copy2 (id, "_EXPR", nullptr));
      for (unsigned int i = 0; id2[i]; ++i)
 id2[i] = _sch_toupper[(id2[i]) & 0xff];
    }
  else if (all_upper && strncmp (id, "IFN_", 4) == 0)

    id2 = (libiberty_concat_ptr = (char *) __builtin_alloca(concat_length ("CFN_", id + 4, nullptr) + 1), concat_copy2 ("CFN_", id + 4, nullptr));
  else if (all_upper && strncmp (id, "BUILT_IN_", 9) == 0)

    id2 = (libiberty_concat_ptr = (char *) __builtin_alloca(concat_length ("CFN_", id, nullptr) + 1), concat_copy2 ("CFN_", id, nullptr));
  else
    return nullptr;

  new (&tem) id_base (id_base::CODE, id2);
  return operators->find_with_hash (&tem, tem.hashval);
}




id_base *
swap_tree_comparison (operator_id *p)
{
  switch (p->code)
    {
    case EQ_EXPR:
    case NE_EXPR:
    case ORDERED_EXPR:
    case UNORDERED_EXPR:
    case LTGT_EXPR:
    case UNEQ_EXPR:
      return p;
    case GT_EXPR:
      return get_operator ("LT_EXPR");
    case GE_EXPR:
      return get_operator ("LE_EXPR");
    case LT_EXPR:
      return get_operator ("GT_EXPR");
    case LE_EXPR:
      return get_operator ("GE_EXPR");
    case UNGT_EXPR:
      return get_operator ("UNLT_EXPR");
    case UNGE_EXPR:
      return get_operator ("UNLE_EXPR");
    case UNLT_EXPR:
      return get_operator ("UNGT_EXPR");
    case UNLE_EXPR:
      return get_operator ("UNGE_EXPR");
    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 653, __FUNCTION__));
    }
}

typedef hash_map<nofree_string_hash, unsigned> cid_map_t;




class dt_operand;
class capture_info;



class operand {
public:
  enum op_type { OP_PREDICATE, OP_EXPR, OP_CAPTURE, OP_C_EXPR, OP_IF, OP_WITH };
  operand (enum op_type type_, location_t loc_)
    : type (type_), location (loc_) {}
  enum op_type type;
  location_t location;
  virtual void gen_transform (FILE *, int, const char *, bool, int,
         const char *, capture_info *,
         dt_operand ** = 0,
         int = 0)
    { (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 678, __FUNCTION__)); }
};



class predicate : public operand
{
public:
  predicate (predicate_id *p_, location_t loc)
    : operand (OP_PREDICATE, loc), p (p_) {}
  predicate_id *p;
};




class expr : public operand
{
public:
  expr (id_base *operation_, location_t loc, bool is_commutative_ = false)
    : operand (OP_EXPR, loc), operation (operation_),
      ops (vNULL), expr_type (nullptr), is_commutative (is_commutative_),
      is_generic (false), force_single_use (false), force_leaf (false),
      opt_grp (0) {}
  expr (expr *e)
    : operand (OP_EXPR, e->location), operation (e->operation),
      ops (vNULL), expr_type (e->expr_type), is_commutative (e->is_commutative),
      is_generic (e->is_generic), force_single_use (e->force_single_use),
      force_leaf (e->force_leaf), opt_grp (e->opt_grp) {}
  void append_op (operand *op) { ops.safe_push (op); }

  id_base *operation;
  vec<operand *> ops;

  const char *expr_type;


  bool is_commutative;

  bool is_generic;


  bool force_single_use;


  bool force_leaf;

  unsigned char opt_grp;
  virtual void gen_transform (FILE *f, int, const char *, bool, int,
         const char *, capture_info *,
         dt_operand ** = 0, int = 0);
};





class c_expr : public operand
{
public:


  class id_tab {
  public:
    const char *id;
    const char *oper;
    id_tab (const char *id_, const char *oper_): id (id_), oper (oper_) {}
  };

  c_expr (cpp_reader *r_, location_t loc,
   vec<cpp_token> code_, unsigned nr_stmts_,
   vec<id_tab> ids_, cid_map_t *capture_ids_)
    : operand (OP_C_EXPR, loc), r (r_), code (code_),
      capture_ids (capture_ids_), nr_stmts (nr_stmts_), ids (ids_) {}

  cpp_reader *r;
  vec<cpp_token> code;
  cid_map_t *capture_ids;

  unsigned nr_stmts;

  vec<id_tab> ids;
  virtual void gen_transform (FILE *f, int, const char *, bool, int,
         const char *, capture_info *,
         dt_operand ** = 0, int = 0);
};



class capture : public operand
{
public:
  capture (location_t loc, unsigned where_, operand *what_, bool value_)
      : operand (OP_CAPTURE, loc), where (where_), value_match (value_),
        what (what_) {}

  unsigned where;



  bool value_match;

  operand *what;
  virtual void gen_transform (FILE *f, int, const char *, bool, int,
         const char *, capture_info *,
         dt_operand ** = 0, int = 0);
};



class if_expr : public operand
{
public:
  if_expr (location_t loc)
    : operand (OP_IF, loc), cond (nullptr), trueexpr (nullptr), falseexpr (nullptr) {}
  c_expr *cond;
  operand *trueexpr;
  operand *falseexpr;
};



class with_expr : public operand
{
public:
  with_expr (location_t loc)
    : operand (OP_WITH, loc), with (nullptr), subexpr (nullptr) {}
  c_expr *with;
  operand *subexpr;
};

template<>
template<>
inline bool
is_a_helper <capture *>::test (operand *op)
{
  return op->type == operand::OP_CAPTURE;
}

template<>
template<>
inline bool
is_a_helper <predicate *>::test (operand *op)
{
  return op->type == operand::OP_PREDICATE;
}

template<>
template<>
inline bool
is_a_helper <c_expr *>::test (operand *op)
{
  return op->type == operand::OP_C_EXPR;
}

template<>
template<>
inline bool
is_a_helper <expr *>::test (operand *op)
{
  return op->type == operand::OP_EXPR;
}

template<>
template<>
inline bool
is_a_helper <if_expr *>::test (operand *op)
{
  return op->type == operand::OP_IF;
}

template<>
template<>
inline bool
is_a_helper <with_expr *>::test (operand *op)
{
  return op->type == operand::OP_WITH;
}






class simplify
{
public:
  enum simplify_kind { SIMPLIFY, MATCH };

  simplify (simplify_kind kind_, unsigned id_, operand *match_,
     operand *result_, vec<vec<user_id *> > for_vec_,
     cid_map_t *capture_ids_)
      : kind (kind_), id (id_), match (match_), result (result_),
      for_vec (for_vec_), for_subst_vec (vNULL),
      capture_ids (capture_ids_), capture_max (capture_ids_->elements () - 1) {}

  simplify_kind kind;


  unsigned id;

  operand *match;




  class operand *result;


  vec<vec<user_id *> > for_vec;
  vec<std::pair<user_id *, id_base *> > for_subst_vec;

  cid_map_t *capture_ids;
  int capture_max;
};



__attribute__ ((__used__)) void
print_operand (operand *o, FILE *f = 
# 897 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                                    stderr
# 897 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                                          , bool flattened = false)
{
  if (capture *c = dyn_cast<capture *> (o))
    {
      if (c->what && flattened == false)
 print_operand (c->what, f, flattened);
      fprintf (f, "@%u", c->where);
    }

  else if (predicate *p = dyn_cast<predicate *> (o))
    fprintf (f, "%s", p->p->id);

  else if (is_a<c_expr *> (o))
    fprintf (f, "c_expr");

  else if (expr *e = dyn_cast<expr *> (o))
    {
      if (e->ops.length () == 0)
 fprintf (f, "%s", e->operation->id);
      else
 {
   fprintf (f, "(%s", e->operation->id);

   if (flattened == false)
     {
       for (unsigned i = 0; i < e->ops.length (); ++i)
  {
    putc_unlocked (' ', f);
    print_operand (e->ops[i], f, flattened);
  }
     }
   putc_unlocked (')', f);
 }
    }

  else
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 933, __FUNCTION__));
}

__attribute__ ((__used__)) void
print_matches (class simplify *s, FILE *f = 
# 937 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                                           stderr
# 937 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                                                 )
{
  fprintf (f, "for expression: ");
  print_operand (s->match, f);
  putc_unlocked ('\n', f);
}






static void
cartesian_product (const vec< vec<operand *> >& ops_vector,
     vec< vec<operand *> >& result, vec<operand *>& v, unsigned n)
{
  if (n == ops_vector.length ())
    {
      vec<operand *> xv = v.copy ();
      result.safe_push (xv);
      return;
    }

  for (unsigned i = 0; i < ops_vector[n].length (); ++i)
    {
      v[n] = ops_vector[n][i];
      cartesian_product (ops_vector, result, v, n + 1);
    }
}



static vec<operand *>
commutate (operand *op, vec<vec<user_id *> > &for_vec)
{
  vec<operand *> ret = vNULL;

  if (capture *c = dyn_cast <capture *> (op))
    {
      if (!c->what)
 {
   ret.safe_push (op);
   return ret;
 }
      vec<operand *> v = commutate (c->what, for_vec);
      for (unsigned i = 0; i < v.length (); ++i)
 {
   capture *nc = new capture (c->location, c->where, v[i],
         c->value_match);
   ret.safe_push (nc);
 }
      return ret;
    }

  expr *e = dyn_cast <expr *> (op);
  if (!e || e->ops.length () == 0)
    {
      ret.safe_push (op);
      return ret;
    }

  vec< vec<operand *> > ops_vector = vNULL;
  for (unsigned i = 0; i < e->ops.length (); ++i)
    ops_vector.safe_push (commutate (e->ops[i], for_vec));

  auto_vec< vec<operand *> > result;
  auto_vec<operand *> v (e->ops.length ());
  v.quick_grow_cleared (e->ops.length ());
  cartesian_product (ops_vector, result, v, 0);


  for (unsigned i = 0; i < result.length (); ++i)
    {
      expr *ne = new expr (e);
      ne->is_commutative = false;
      for (unsigned j = 0; j < result[i].length (); ++j)
 ne->append_op (result[i][j]);
      ret.safe_push (ne);
    }

  if (!e->is_commutative)
    return ret;


  int natural_opno = commutative_op (e->operation);
  unsigned int opno = natural_opno >= 0 ? natural_opno : 0;
  for (unsigned i = 0; i < result.length (); ++i)
    {
      expr *ne = new expr (e);
      if (operator_id *r = dyn_cast <operator_id *> (ne->operation))
 {
   if (comparison_code_p (r->code))
     ne->operation = swap_tree_comparison (r);
 }
      else if (user_id *p = dyn_cast <user_id *> (ne->operation))
 {
   bool found_compare = false;
   for (unsigned j = 0; j < p->substitutes.length (); ++j)
     if (operator_id *q = dyn_cast <operator_id *> (p->substitutes[j]))
       {
  if (comparison_code_p (q->code)
      && swap_tree_comparison (q) != q)
    {
      found_compare = true;
      break;
    }
       }
   if (found_compare)
     {
       user_id *newop = new user_id ("<internal>");
       for (unsigned j = 0; j < p->substitutes.length (); ++j)
  {
    id_base *subst = p->substitutes[j];
    if (operator_id *q = dyn_cast <operator_id *> (subst))
      {
        if (comparison_code_p (q->code))
   subst = swap_tree_comparison (q);
      }
    newop->substitutes.safe_push (subst);
  }
       ne->operation = newop;


       for (unsigned j = 0; newop && j < for_vec.length (); ++j)
  for (unsigned k = 0; k < for_vec[j].length (); ++k)
    if (for_vec[j][k] == p)
      {
        for_vec[j].safe_push (newop);
        newop = nullptr;
        break;
      }
     }
 }
      ne->is_commutative = false;
      for (unsigned j = 0; j < result[i].length (); ++j)
 {
   int old_j = (j == opno ? opno + 1 : j == opno + 1 ? opno : j);
   ne->append_op (result[i][old_j]);
 }
      ret.safe_push (ne);
    }

  return ret;
}




static void
lower_commutative (simplify *s, vec<simplify *>& simplifiers)
{
  vec<operand *> matchers = commutate (s->match, s->for_vec);
  for (unsigned i = 0; i < matchers.length (); ++i)
    {
      simplify *ns = new simplify (s->kind, s->id, matchers[i], s->result,
       s->for_vec, s->capture_ids);
      simplifiers.safe_push (ns);
    }
}




operand *
lower_opt (operand *o, unsigned char grp, bool strip)
{
  if (capture *c = dyn_cast<capture *> (o))
    {
      if (c->what)
 return new capture (c->location, c->where,
       lower_opt (c->what, grp, strip),
       c->value_match);
      else
 return c;
    }

  expr *e = dyn_cast<expr *> (o);
  if (!e)
    return o;

  if (e->opt_grp == grp)
    {
      if (strip)
 return lower_opt (e->ops[0], grp, strip);

      expr *ne = new expr (e);
      ne->opt_grp = 0;
      ne->append_op (lower_opt (e->ops[0], grp, strip));
      return ne;
    }

  expr *ne = new expr (e);
  for (unsigned i = 0; i < e->ops.length (); ++i)
    ne->append_op (lower_opt (e->ops[i], grp, strip));

  return ne;
}




static bool
has_opt (operand *o, unsigned char grp)
{
  if (capture *c = dyn_cast<capture *> (o))
    {
      if (c->what)
 return has_opt (c->what, grp);
      else
 return false;
    }

  expr *e = dyn_cast<expr *> (o);
  if (!e)
    return false;

  if (e->opt_grp == grp)
    return true;

  for (unsigned i = 0; i < e->ops.length (); ++i)
    if (has_opt (e->ops[i], grp))
      return true;

  return false;
}




static vec<operand *>
lower_opt (operand *o)
{
  vec<operand *> v1 = vNULL, v2;

  v1.safe_push (o);





  for (unsigned i = 1; i <= 10; ++i)
    {
      v2 = vNULL;
      for (unsigned j = 0; j < v1.length (); ++j)
 if (has_opt (v1[j], i))
   {
     v2.safe_push (lower_opt (v1[j], i, false));
     v2.safe_push (lower_opt (v1[j], i, true));
   }

      if (v2 != vNULL)
 {
   v1 = vNULL;
   for (unsigned j = 0; j < v2.length (); ++j)
     v1.safe_push (v2[j]);
 }
    }

  return v1;
}




static void
lower_opt (simplify *s, vec<simplify *>& simplifiers)
{
  vec<operand *> matchers = lower_opt (s->match);
  for (unsigned i = 0; i < matchers.length (); ++i)
    {
      simplify *ns = new simplify (s->kind, s->id, matchers[i], s->result,
       s->for_vec, s->capture_ids);
      simplifiers.safe_push (ns);
    }
}




static vec<operand *>
lower_cond (operand *o)
{
  vec<operand *> ro = vNULL;

  if (capture *c = dyn_cast<capture *> (o))
    {
      if (c->what)
 {
   vec<operand *> lop = vNULL;
   lop = lower_cond (c->what);

   for (unsigned i = 0; i < lop.length (); ++i)
     ro.safe_push (new capture (c->location, c->where, lop[i],
           c->value_match));
   return ro;
 }
    }

  expr *e = dyn_cast<expr *> (o);
  if (!e || e->ops.length () == 0)
    {
      ro.safe_push (o);
      return ro;
    }

  vec< vec<operand *> > ops_vector = vNULL;
  for (unsigned i = 0; i < e->ops.length (); ++i)
    ops_vector.safe_push (lower_cond (e->ops[i]));

  auto_vec< vec<operand *> > result;
  auto_vec<operand *> v (e->ops.length ());
  v.quick_grow_cleared (e->ops.length ());
  cartesian_product (ops_vector, result, v, 0);

  for (unsigned i = 0; i < result.length (); ++i)
    {
      expr *ne = new expr (e);
      for (unsigned j = 0; j < result[i].length (); ++j)
 ne->append_op (result[i][j]);
      ro.safe_push (ne);



      if ((*e->operation == COND_EXPR
    || *e->operation == VEC_COND_EXPR)
   && ((is_a <capture *> (e->ops[0])
        && as_a <capture *> (e->ops[0])->what
        && is_a <expr *> (as_a <capture *> (e->ops[0])->what)
        && as_a <expr *>
             (as_a <capture *> (e->ops[0])->what)->ops.length () == 2)
       || (is_a <expr *> (e->ops[0])
    && as_a <expr *> (e->ops[0])->ops.length () == 2)))
 {
   ne = new expr (e);
   for (unsigned j = 0; j < result[i].length (); ++j)
     ne->append_op (result[i][j]);
   if (capture *c = dyn_cast <capture *> (ne->ops[0]))
     {
       expr *ocmp = as_a <expr *> (c->what);
       expr *cmp = new expr (ocmp);
       for (unsigned j = 0; j < ocmp->ops.length (); ++j)
  cmp->append_op (ocmp->ops[j]);
       cmp->is_generic = true;
       ne->ops[0] = new capture (c->location, c->where, cmp,
     c->value_match);
     }
   else
     {
       expr *ocmp = as_a <expr *> (ne->ops[0]);
       expr *cmp = new expr (ocmp);
       for (unsigned j = 0; j < ocmp->ops.length (); ++j)
  cmp->append_op (ocmp->ops[j]);
       cmp->is_generic = true;
       ne->ops[0] = cmp;
     }
   ro.safe_push (ne);
 }
    }

  return ro;
}




static void
lower_cond (simplify *s, vec<simplify *>& simplifiers)
{
  vec<operand *> matchers = lower_cond (s->match);
  for (unsigned i = 0; i < matchers.length (); ++i)
    {
      simplify *ns = new simplify (s->kind, s->id, matchers[i], s->result,
       s->for_vec, s->capture_ids);
      simplifiers.safe_push (ns);
    }
}



bool
contains_id (operand *o, user_id *id)
{
  if (capture *c = dyn_cast<capture *> (o))
    return c->what && contains_id (c->what, id);

  if (expr *e = dyn_cast<expr *> (o))
    {
      if (e->operation == id)
 return true;
      for (unsigned i = 0; i < e->ops.length (); ++i)
 if (contains_id (e->ops[i], id))
   return true;
      return false;
    }

  if (with_expr *w = dyn_cast <with_expr *> (o))
    return (contains_id (w->with, id)
     || contains_id (w->subexpr, id));

  if (if_expr *ife = dyn_cast <if_expr *> (o))
    return (contains_id (ife->cond, id)
     || contains_id (ife->trueexpr, id)
     || (ife->falseexpr && contains_id (ife->falseexpr, id)));

  if (c_expr *ce = dyn_cast<c_expr *> (o))
    return ce->capture_ids && ce->capture_ids->get (id->id);

  return false;
}




operand *
replace_id (operand *o, user_id *id, id_base *with)
{


  if (capture *c = dyn_cast<capture *> (o))
    {
      if (!c->what)
 return c;
      return new capture (c->location, c->where,
     replace_id (c->what, id, with), c->value_match);
    }
  else if (expr *e = dyn_cast<expr *> (o))
    {
      expr *ne = new expr (e);
      if (e->operation == id)
 ne->operation = with;
      for (unsigned i = 0; i < e->ops.length (); ++i)
 ne->append_op (replace_id (e->ops[i], id, with));
      return ne;
    }
  else if (with_expr *w = dyn_cast <with_expr *> (o))
    {
      with_expr *nw = new with_expr (w->location);
      nw->with = as_a <c_expr *> (replace_id (w->with, id, with));
      nw->subexpr = replace_id (w->subexpr, id, with);
      return nw;
    }
  else if (if_expr *ife = dyn_cast <if_expr *> (o))
    {
      if_expr *nife = new if_expr (ife->location);
      nife->cond = as_a <c_expr *> (replace_id (ife->cond, id, with));
      nife->trueexpr = replace_id (ife->trueexpr, id, with);
      if (ife->falseexpr)
 nife->falseexpr = replace_id (ife->falseexpr, id, with);
      return nife;
    }



  if (c_expr *ce = dyn_cast<c_expr *> (o))
    {
      vec<c_expr::id_tab> ids = ce->ids.copy ();
      ids.safe_push (c_expr::id_tab (id->id, with->id));
      return new c_expr (ce->r, ce->location,
    ce->code, ce->nr_stmts, ids, ce->capture_ids);
    }

  return o;
}




static bool
binary_ok (operator_id *op)
{
  switch (op->code)
    {
    case PLUS_EXPR:
    case MINUS_EXPR:
    case MULT_EXPR:
    case TRUNC_DIV_EXPR:
    case CEIL_DIV_EXPR:
    case FLOOR_DIV_EXPR:
    case ROUND_DIV_EXPR:
    case TRUNC_MOD_EXPR:
    case CEIL_MOD_EXPR:
    case FLOOR_MOD_EXPR:
    case ROUND_MOD_EXPR:
    case RDIV_EXPR:
    case EXACT_DIV_EXPR:
    case MIN_EXPR:
    case MAX_EXPR:
    case BIT_IOR_EXPR:
    case BIT_XOR_EXPR:
    case BIT_AND_EXPR:
      return true;
    default:
      return false;
    }
}



static void
lower_for (simplify *sin, vec<simplify *>& simplifiers)
{
  vec<vec<user_id *> >& for_vec = sin->for_vec;
  unsigned worklist_start = 0;
  auto_vec<simplify *> worklist;
  worklist.safe_push (sin);





  for (int fi = for_vec.length () - 1; fi >= 0; --fi)
    {
      vec<user_id *>& ids = for_vec[fi];
      unsigned n_ids = ids.length ();
      unsigned max_n_opers = 0;
      bool can_delay_subst = (sin->kind == simplify::SIMPLIFY);
      for (unsigned i = 0; i < n_ids; ++i)
 {
   if (ids[i]->substitutes.length () > max_n_opers)
     max_n_opers = ids[i]->substitutes.length ();




   enum id_base::id_kind kind = ids[i]->substitutes[0]->kind;
   for (unsigned j = 0; j < ids[i]->substitutes.length (); ++j)
     if (ids[i]->substitutes[j]->kind != kind)
       can_delay_subst = false;
     else if (operator_id *op
         = dyn_cast <operator_id *> (ids[i]->substitutes[j]))
       {
  operator_id *op0
    = as_a <operator_id *> (ids[i]->substitutes[0]);
  if (strcmp (op->tcc, "tcc_comparison") == 0
      && strcmp (op0->tcc, "tcc_comparison") == 0)
    ;

  else if (strcmp (op->tcc, "tcc_binary") == 0
    && strcmp (op0->tcc, "tcc_binary") == 0
    && binary_ok (op)
    && binary_ok (op0))
    ;
  else if ((strcmp (op->id + 1, "SHIFT_EXPR") == 0
     || strcmp (op->id + 1, "ROTATE_EXPR") == 0)
    && (strcmp (op0->id + 1, "SHIFT_EXPR") == 0
        || strcmp (op0->id + 1, "ROTATE_EXPR") == 0))
    ;
  else
    can_delay_subst = false;
       }
     else if (is_a <fn_id *> (ids[i]->substitutes[j]))
       ;
     else
       can_delay_subst = false;
 }

      unsigned worklist_end = worklist.length ();
      for (unsigned si = worklist_start; si < worklist_end; ++si)
 {
   simplify *s = worklist[si];
   for (unsigned j = 0; j < max_n_opers; ++j)
     {
       operand *match_op = s->match;
       operand *result_op = s->result;
       auto_vec<std::pair<user_id *, id_base *> > subst (n_ids);
       bool skip = false;
       for (unsigned i = 0; i < n_ids; ++i)
  {
    user_id *id = ids[i];
    id_base *oper = id->substitutes[j % id->substitutes.length ()];
    if (oper == null_id
        && (contains_id (match_op, id)
     || contains_id (result_op, id)))
      {
        skip = true;
        break;
      }
    subst.quick_push (std::make_pair (id, oper));
    match_op = replace_id (match_op, id, oper);
    if (result_op
        && !can_delay_subst)
      result_op = replace_id (result_op, id, oper);
  }
       if (skip)
  continue;

       simplify *ns = new simplify (s->kind, s->id, match_op, result_op,
        vNULL, s->capture_ids);
       ns->for_subst_vec.safe_splice (s->for_subst_vec);
       if (result_op
    && can_delay_subst)
  ns->for_subst_vec.safe_splice (subst);

       worklist.safe_push (ns);
     }
 }
      worklist_start = worklist_end;
    }


  for (unsigned i = worklist_start; i < worklist.length (); ++i)
    simplifiers.safe_push (worklist[i]);
}



static void
lower (vec<simplify *>& simplifiers, bool gimple)
{
  auto_vec<simplify *> out_simplifiers;
  for (unsigned i = 0; i < simplifiers.length (); ++i)
    lower_opt (simplifiers[i], out_simplifiers);

  simplifiers.truncate (0);
  for (unsigned i = 0; i < out_simplifiers.length (); ++i)
    lower_commutative (out_simplifiers[i], simplifiers);

  out_simplifiers.truncate (0);
  if (gimple)
    for (unsigned i = 0; i < simplifiers.length (); ++i)
      lower_cond (simplifiers[i], out_simplifiers);
  else
    out_simplifiers.safe_splice (simplifiers);


  simplifiers.truncate (0);
  for (unsigned i = 0; i < out_simplifiers.length (); ++i)
    lower_for (out_simplifiers[i], simplifiers);
}
# 1574 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
class dt_simplify;



struct sinfo
{
  dt_simplify *s;

  const char *fname;
  unsigned cnt;
};

struct sinfo_hashmap_traits : simple_hashmap_traits<pointer_hash<dt_simplify>,
          sinfo *>
{
  static inline hashval_t hash (const key_type &);
  static inline bool equal_keys (const key_type &, const key_type &);
  template <typename T> static inline void remove (T &) {}
};

typedef hash_map<void * , sinfo *, sinfo_hashmap_traits>
  sinfo_map_t;



static unsigned current_id;



class dt_node
{
public:
  enum dt_type { DT_NODE, DT_OPERAND, DT_TRUE, DT_MATCH, DT_SIMPLIFY };

  enum dt_type type;
  unsigned level;
  dt_node *parent;
  vec<dt_node *> kids;


  unsigned num_leafs;
  unsigned total_size;
  unsigned max_level;

  dt_node (enum dt_type type_, dt_node *parent_)
    : type (type_), level (0), parent (parent_), kids (vNULL) {}

  dt_node *append_node (dt_node *);
  dt_node *append_op (operand *, dt_node *parent, unsigned pos);
  dt_node *append_true_op (operand *, dt_node *parent, unsigned pos);
  dt_node *append_match_op (operand *, dt_operand *, dt_node *parent,
       unsigned pos);
  dt_node *append_simplify (simplify *, unsigned, dt_operand **);

  virtual void gen (FILE *, int, bool, int) {}

  void gen_kids (FILE *, int, bool, int);
  void gen_kids_1 (FILE *, int, bool, int,
     vec<dt_operand *>, vec<dt_operand *>, vec<dt_operand *>,
     vec<dt_operand *>, vec<dt_operand *>, vec<dt_node *>);

  void analyze (sinfo_map_t &);
};



class dt_operand : public dt_node
{
public:
  operand *op;
  dt_operand *match_dop;
  unsigned pos;
  bool value_match;
  unsigned for_id;

  dt_operand (enum dt_type type, operand *op_, dt_operand *match_dop_,
       dt_operand *parent_, unsigned pos_)
      : dt_node (type, parent_), op (op_), match_dop (match_dop_),
      pos (pos_), value_match (false), for_id (current_id) {}

  void gen (FILE *, int, bool, int);
  unsigned gen_predicate (FILE *, int, const char *, bool);
  unsigned gen_match_op (FILE *, int, const char *, bool);

  unsigned gen_gimple_expr (FILE *, int, int);
  unsigned gen_generic_expr (FILE *, int, const char *);

  char *get_name (char *);
  void gen_opname (char *, unsigned);
};



class dt_simplify : public dt_node
{
public:
  simplify *s;
  unsigned pattern_no;
  dt_operand **indexes;
  sinfo *info;

  dt_simplify (simplify *s_, unsigned pattern_no_, dt_operand **indexes_)
 : dt_node (DT_SIMPLIFY, nullptr), s (s_), pattern_no (pattern_no_),
   indexes (indexes_), info (nullptr) {}

  void gen_1 (FILE *, int, bool, operand *);
  void gen (FILE *f, int, bool, int);
};

template<>
template<>
inline bool
is_a_helper <dt_operand *>::test (dt_node *n)
{
  return (n->type == dt_node::DT_OPERAND
   || n->type == dt_node::DT_MATCH
   || n->type == dt_node::DT_TRUE);
}

template<>
template<>
inline bool
is_a_helper <dt_simplify *>::test (dt_node *n)
{
  return n->type == dt_node::DT_SIMPLIFY;
}





class decision_tree
{
public:
  dt_node *root;

  void insert (class simplify *, unsigned);
  void gen (FILE *f, bool gimple);
  void print (FILE *f = 
# 1712 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                       stderr
# 1712 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                             );

  decision_tree () { root = new dt_node (dt_node::DT_NODE, nullptr); }

  static dt_node *insert_operand (dt_node *, operand *, dt_operand **indexes,
      unsigned pos = 0, dt_node *parent = 0);
  static dt_node *find_node (vec<dt_node *>&, dt_node *);
  static bool cmp_node (dt_node *, dt_node *);
  static void print_node (dt_node *, FILE *f = 
# 1720 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                                              stderr
# 1720 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                                                    , unsigned = 0);
};



bool
cmp_operand (operand *o1, operand *o2)
{
  if (!o1 || !o2 || o1->type != o2->type)
    return false;

  if (o1->type == operand::OP_PREDICATE)
    {
      predicate *p1 = as_a<predicate *>(o1);
      predicate *p2 = as_a<predicate *>(o2);
      return p1->p == p2->p;
    }
  else if (o1->type == operand::OP_EXPR)
    {
      expr *e1 = static_cast<expr *>(o1);
      expr *e2 = static_cast<expr *>(o2);
      return (e1->operation == e2->operation
       && e1->is_generic == e2->is_generic);
    }
  else
    return false;
}




bool
decision_tree::cmp_node (dt_node *n1, dt_node *n2)
{
  if (!n1 || !n2 || n1->type != n2->type)
    return false;

  if (n1 == n2)
    return true;

  if (n1->type == dt_node::DT_TRUE)
    return false;

  if (n1->type == dt_node::DT_OPERAND)
    return cmp_operand ((as_a<dt_operand *> (n1))->op,
   (as_a<dt_operand *> (n2))->op);
  else if (n1->type == dt_node::DT_MATCH)
    return (((as_a<dt_operand *> (n1))->match_dop
      == (as_a<dt_operand *> (n2))->match_dop)
     && ((as_a<dt_operand *> (n1))->value_match
  == (as_a<dt_operand *> (n2))->value_match));
  return false;
}



dt_node *
decision_tree::find_node (vec<dt_node *>& ops, dt_node *p)
{

  if (p->type == dt_node::DT_TRUE
      && !ops.is_empty ()
      && ops.last ()->type == dt_node::DT_TRUE)
    return ops.last ();
  dt_operand *true_node = nullptr;
  for (int i = ops.length () - 1; i >= 0; --i)
    {



      if (ops[i]->type == dt_node::DT_TRUE)
 {
   if (! true_node
       || as_a <dt_operand *> (ops[i])->for_id > true_node->for_id)
     true_node = as_a <dt_operand *> (ops[i]);
 }
      if (decision_tree::cmp_node (ops[i], p))
 {


   if (true_node
       && true_node->for_id != current_id
       && true_node->for_id > as_a <dt_operand *> (ops[i])->for_id)
     {
       if (verbose >= 1)
  {
    location_t p_loc = 0;
    if (p->type == dt_node::DT_OPERAND)
      p_loc = as_a <dt_operand *> (p)->op->location;
    location_t op_loc = 0;
    if (ops[i]->type == dt_node::DT_OPERAND)
      op_loc = as_a <dt_operand *> (ops[i])->op->location;
    location_t true_loc = 0;
    true_loc = true_node->op->location;
    warning_at (p_loc,
         "failed to merge decision tree node");
    warning_at (op_loc,
         "with the following");
    warning_at (true_loc,
         "because of the following which serves as ordering "
         "barrier");
  }
       return nullptr;
     }
   return ops[i];
 }
    }
  return nullptr;
}




dt_node *
dt_node::append_node (dt_node *n)
{
  dt_node *kid;

  kid = decision_tree::find_node (kids, n);
  if (kid)
    return kid;

  kids.safe_push (n);
  n->level = this->level + 1;

  return n;
}



dt_node *
dt_node::append_op (operand *op, dt_node *parent, unsigned pos)
{
  dt_operand *parent_ = safe_as_a<dt_operand *> (parent);
  dt_operand *n = new dt_operand (DT_OPERAND, op, 0, parent_, pos);
  return append_node (n);
}



dt_node *
dt_node::append_true_op (operand *op, dt_node *parent, unsigned pos)
{
  dt_operand *parent_ = safe_as_a<dt_operand *> (parent);
  dt_operand *n = new dt_operand (DT_TRUE, op, 0, parent_, pos);
  return append_node (n);
}



dt_node *
dt_node::append_match_op (operand *op, dt_operand *match_dop,
     dt_node *parent, unsigned pos)
{
  dt_operand *parent_ = as_a<dt_operand *> (parent);
  dt_operand *n = new dt_operand (DT_MATCH, op, match_dop, parent_, pos);
  return append_node (n);
}



dt_node *
dt_node::append_simplify (simplify *s, unsigned pattern_no,
     dt_operand **indexes)
{
  dt_simplify *s2;
  dt_simplify *n = new dt_simplify (s, pattern_no, indexes);
  for (unsigned i = 0; i < kids.length (); ++i)
    if ((s2 = dyn_cast <dt_simplify *> (kids[i]))
 && (verbose >= 1
     || s->match->location != s2->s->match->location))
      {


 warning_at (s->match->location, "duplicate pattern");
 warning_at (s2->s->match->location, "previous pattern defined here");
 print_operand (s->match, 
# 1896 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                         stderr
# 1896 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                               );
 fprintf (
# 1897 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
         stderr
# 1897 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
               , "\n");
      }
  return append_node (n);
}



void
dt_node::analyze (sinfo_map_t &map)
{
  num_leafs = 0;
  total_size = 1;
  max_level = level;

  if (type == DT_SIMPLIFY)
    {

      dt_simplify *s = as_a <dt_simplify *> (this);
      bool existed;
      sinfo *&si = map.get_or_insert (s, &existed);
      if (!existed)
 {
   si = new sinfo;
   si->s = s;
   si->cnt = 1;
   si->fname = nullptr;
 }
      else
 si->cnt++;
      s->info = si;
      num_leafs = 1;
      return;
    }

  for (unsigned i = 0; i < kids.length (); ++i)
    {
      kids[i]->analyze (map);
      num_leafs += kids[i]->num_leafs;
      total_size += kids[i]->total_size;
      max_level = ((max_level) > (kids[i]->max_level) ? (max_level) : (kids[i]->max_level));
    }
}




dt_node *
decision_tree::insert_operand (dt_node *p, operand *o, dt_operand **indexes,
          unsigned pos, dt_node *parent)
{
  dt_node *q, *elm = 0;

  if (capture *c = dyn_cast<capture *> (o))
    {
      unsigned capt_index = c->where;

      if (indexes[capt_index] == 0)
 {
   if (c->what)
     q = insert_operand (p, c->what, indexes, pos, parent);
   else
     {
       q = elm = p->append_true_op (o, parent, pos);
       goto at_assert_elm;
     }

   for (operand *what = c->what;
        what && is_a<capture *> (what);
        c = as_a<capture *> (what), what = c->what)
     ;

   if (!c->what)
     {
       unsigned cc_index = c->where;
       dt_operand *match_op = indexes[cc_index];

       dt_operand temp (dt_node::DT_TRUE, 0, 0, 0, 0);
       elm = decision_tree::find_node (p->kids, &temp);

       if (elm == 0)
  {
    dt_operand match (dt_node::DT_MATCH, 0, match_op, 0, 0);
    match.value_match = c->value_match;
    elm = decision_tree::find_node (p->kids, &match);
  }
     }
   else
     {
       dt_operand temp (dt_node::DT_OPERAND, c->what, 0, 0, 0);
       elm = decision_tree::find_node (p->kids, &temp);
     }

at_assert_elm:
   ((void)(!(elm->type == dt_node::DT_TRUE || elm->type == dt_node::DT_OPERAND || elm->type == dt_node::DT_MATCH) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 1990, __FUNCTION__), 0 : 0))

                                          ;
   indexes[capt_index] = static_cast<dt_operand *> (elm);
   return q;
 }
      else
 {
   p = p->append_match_op (o, indexes[capt_index], parent, pos);
   as_a <dt_operand *>(p)->value_match = c->value_match;
   if (c->what)
     return insert_operand (p, c->what, indexes, 0, p);
   else
     return p;
 }
    }
  p = p->append_op (o, parent, pos);
  q = p;

  if (expr *e = dyn_cast <expr *>(o))
    {
      for (unsigned i = 0; i < e->ops.length (); ++i)
 q = decision_tree::insert_operand (q, e->ops[i], indexes, i, p);
    }

  return q;
}



void
decision_tree::insert (class simplify *s, unsigned pattern_no)
{
  current_id = s->id;
  dt_operand **indexes = ((dt_operand * *) xcalloc ((s->capture_max + 1), sizeof (dt_operand *)));
  dt_node *p = decision_tree::insert_operand (root, s->match, indexes);
  p->append_simplify (s, pattern_no, indexes);
}



__attribute__ ((__used__)) void
decision_tree::print_node (dt_node *p, FILE *f, unsigned indent)
{
  if (p->type == dt_node::DT_NODE)
    fprintf (f, "root");
  else
    {
      fprintf (f, "|");
      for (unsigned i = 0; i < indent; i++)
 fprintf (f, "-");

      if (p->type == dt_node::DT_OPERAND)
 {
   dt_operand *dop = static_cast<dt_operand *>(p);
   print_operand (dop->op, f, true);
 }
      else if (p->type == dt_node::DT_TRUE)
 fprintf (f, "true");
      else if (p->type == dt_node::DT_MATCH)
 fprintf (f, "match (%p)", (void *)((as_a<dt_operand *>(p))->match_dop));
      else if (p->type == dt_node::DT_SIMPLIFY)
 {
   dt_simplify *s = static_cast<dt_simplify *> (p);
   fprintf (f, "simplify_%u { ", s->pattern_no);
   for (int i = 0; i <= s->s->capture_max; ++i)
     fprintf (f, "%p, ", (void *) s->indexes[i]);
   fprintf (f, " } ");
 }
      if (is_a <dt_operand *> (p))
 fprintf (f, " [%u]", as_a <dt_operand *> (p)->for_id);
    }

  fprintf (
# 2063 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
          stderr
# 2063 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                , " (%p, %p), %u, %u\n",
    (void *) p, (void *) p->parent, p->level, p->kids.length ());

  for (unsigned i = 0; i < p->kids.length (); ++i)
    decision_tree::print_node (p->kids[i], f, indent + 2);
}

__attribute__ ((__used__)) void
decision_tree::print (FILE *f)
{
  return decision_tree::print_node (root, f);
}
# 2084 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
class capture_info
{
public:
  capture_info (simplify *s, operand *, bool);
  void walk_match (operand *o, unsigned toplevel_arg, bool, bool);
  bool walk_result (operand *o, bool, operand *);
  void walk_c_expr (c_expr *);

  struct cinfo
    {
      bool expr_p;
      bool cse_p;
      bool force_no_side_effects_p;
      bool force_single_use;
      bool cond_expr_cond_p;
      unsigned long toplevel_msk;
      unsigned match_use_count;
      unsigned result_use_count;
      unsigned same_as;
      capture *c;
    };

  auto_vec<cinfo> info;
  unsigned long force_no_side_effects;
  bool gimple;
};



capture_info::capture_info (simplify *s, operand *result, bool gimple_)
{
  gimple = gimple_;

  expr *e;
  if (s->kind == simplify::MATCH)
    {
      force_no_side_effects = -1;
      return;
    }

  force_no_side_effects = 0;
  info.safe_grow_cleared (s->capture_max + 1);
  for (int i = 0; i <= s->capture_max; ++i)
    info[i].same_as = i;

  e = as_a <expr *> (s->match);
  for (unsigned i = 0; i < e->ops.length (); ++i)
    walk_match (e->ops[i], i,
  (i != 0 && *e->operation == COND_EXPR)
  || *e->operation == TRUTH_ANDIF_EXPR
  || *e->operation == TRUTH_ORIF_EXPR,
  i == 0
  && (*e->operation == COND_EXPR
      || *e->operation == VEC_COND_EXPR));

  walk_result (s->result, false, result);
}



void
capture_info::walk_match (operand *o, unsigned toplevel_arg,
     bool conditional_p, bool cond_expr_cond_p)
{
  if (capture *c = dyn_cast <capture *> (o))
    {
      unsigned where = c->where;
      info[where].match_use_count++;
      info[where].toplevel_msk |= 1 << toplevel_arg;
      info[where].force_no_side_effects_p |= conditional_p;
      info[where].cond_expr_cond_p |= cond_expr_cond_p;
      if (!info[where].c)
 info[where].c = c;
      if (!c->what)
 return;

      if (is_a <capture *> (c->what)
   || is_a <expr *> (c->what))
 walk_match (c->what, toplevel_arg, conditional_p, false);




      while (c->what && is_a <capture *> (c->what))
 {
   c = as_a <capture *> (c->what);
   if (info[c->where].same_as != c->where
       && info[c->where].same_as != info[where].same_as)
     fatal_at (c->location, "cannot handle this collapsed capture");
   info[c->where].same_as = info[where].same_as;
 }

      expr *e;
      if (c->what
   && (e = dyn_cast <expr *> (c->what)))
 {



   if (e->ops.length () != 0)
     info[where].expr_p = true;
   info[where].force_single_use |= e->force_single_use;
 }
    }
  else if (expr *e = dyn_cast <expr *> (o))
    {
      for (unsigned i = 0; i < e->ops.length (); ++i)
 {
   bool cond_p = conditional_p;
   bool expr_cond_p = false;
   if (i != 0 && *e->operation == COND_EXPR)
     cond_p = true;
   else if (*e->operation == TRUTH_ANDIF_EXPR
     || *e->operation == TRUTH_ORIF_EXPR)
     cond_p = true;
   if (i == 0
       && (*e->operation == COND_EXPR
    || *e->operation == VEC_COND_EXPR))
     expr_cond_p = true;
   walk_match (e->ops[i], toplevel_arg, cond_p, expr_cond_p);
 }
    }
  else if (is_a <predicate *> (o))
    {

      force_no_side_effects |= 1 << toplevel_arg;
      if (verbose >= 1
   && !gimple)
 warning_at (o->location,
      "forcing no side-effects on possibly lost leaf");
    }
  else
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 2216, __FUNCTION__));
}





bool
capture_info::walk_result (operand *o, bool conditional_p, operand *result)
{
  if (capture *c = dyn_cast <capture *> (o))
    {
      unsigned where = info[c->where].same_as;
      info[where].result_use_count++;





      if (info[where].expr_p)
 force_no_side_effects |= info[where].toplevel_msk;

      if (c->what
   && is_a <expr *> (c->what))
 {
   info[where].cse_p = true;
   walk_result (c->what, true, result);
 }
    }
  else if (expr *e = dyn_cast <expr *> (o))
    {
      id_base *opr = e->operation;
      if (user_id *uid = dyn_cast <user_id *> (opr))
 opr = uid->substitutes[0];
      for (unsigned i = 0; i < e->ops.length (); ++i)
 {
   bool cond_p = conditional_p;
   if (i != 0 && *e->operation == COND_EXPR)
     cond_p = true;
   else if (*e->operation == TRUTH_ANDIF_EXPR
     || *e->operation == TRUTH_ORIF_EXPR)
     cond_p = true;
   walk_result (e->ops[i], cond_p, result);
 }
    }
  else if (if_expr *ie = dyn_cast <if_expr *> (o))
    {

      if (ie->trueexpr == result)
 {
   walk_result (ie->trueexpr, false, result);
   return true;
 }
      if (ie->falseexpr == result)
 {
   walk_result (ie->falseexpr, false, result);
   return true;
 }
      bool res = false;
      if (is_a <if_expr *> (ie->trueexpr)
   || is_a <with_expr *> (ie->trueexpr))
 res |= walk_result (ie->trueexpr, false, result);
      if (ie->falseexpr
   && (is_a <if_expr *> (ie->falseexpr)
       || is_a <with_expr *> (ie->falseexpr)))
 res |= walk_result (ie->falseexpr, false, result);
      return res;
    }
  else if (with_expr *we = dyn_cast <with_expr *> (o))
    {
      bool res = (we->subexpr == result);
      if (res
   || is_a <if_expr *> (we->subexpr)
   || is_a <with_expr *> (we->subexpr))
 res |= walk_result (we->subexpr, false, result);
      if (res)
 walk_c_expr (we->with);
      return res;
    }
  else if (c_expr *ce = dyn_cast <c_expr *> (o))
    walk_c_expr (ce);
  else
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 2298, __FUNCTION__));

  return false;
}



void
capture_info::walk_c_expr (c_expr *e)
{



  unsigned p_depth = 0;
  for (unsigned i = 0; i < e->code.length (); ++i)
    {
      const cpp_token *t = &e->code[i];
      const cpp_token *n = i < e->code.length () - 1 ? &e->code[i+1] : nullptr;
      id_base *id;
      if (t->type == CPP_NAME
   && (strcmp ((const char *)((cpp_hashnode *) (t->val.node.node))
                          ->ident.str, "TREE_TYPE") == 0
       || strcmp ((const char *)((cpp_hashnode *) (t->val.node.node))
                      ->ident.str, "TREE_CODE") == 0
       || strcmp ((const char *)((cpp_hashnode *) (t->val.node.node))
                      ->ident.str, "TREE_REAL_CST") == 0
       || ((id = get_operator ((const char *)((cpp_hashnode *) (t->val.node.node))
                            ->ident.str))
    && is_a <predicate_id *> (id)))
   && n->type == CPP_OPEN_PAREN)
 p_depth++;
      else if (t->type == CPP_CLOSE_PAREN
        && p_depth > 0)
 p_depth--;
      else if (p_depth == 0
        && t->type == CPP_ATSIGN
        && (n->type == CPP_NUMBER
     || n->type == CPP_NAME)
        && !(n->flags & (1 << 0)))
 {
   const char *id1;
   if (n->type == CPP_NUMBER)
     id1 = (const char *)n->val.str.text;
   else
     id1 = (const char *)((cpp_hashnode *) (n->val.node.node))->ident.str;
   unsigned *where = e->capture_ids->get(id1);
   if (! where)
     fatal_at (n, "unknown capture id '%s'", id1);
   info[info[*where].same_as].force_no_side_effects_p = true;
   if (verbose >= 1
       && !gimple)
     warning_at (t, "capture escapes");
 }
    }
}




static char *fail_label;



bool
is_conversion (id_base *op)
{
  return (*op == CONVERT_EXPR
   || *op == NOP_EXPR
   || *op == FLOAT_EXPR
   || *op == FIX_TRUNC_EXPR
   || *op == VIEW_CONVERT_EXPR);
}




static const char *
get_operand_type (id_base *op, unsigned pos,
    const char *in_type,
    const char *expr_type,
    const char *other_oprnd_type)
{



  if (is_conversion (op))
    return other_oprnd_type;
  else if (*op == REALPART_EXPR
    || *op == IMAGPART_EXPR)
    return other_oprnd_type;
  else if (is_a <operator_id *> (op)
    && strcmp (as_a <operator_id *> (op)->tcc, "tcc_comparison") == 0)
    return other_oprnd_type;
  else if (*op == COND_EXPR
    && pos == 0)
    return "boolean_type_node";
  else if (strncmp (op->id, "CFN_COND_", 9) == 0)
    {



      if (pos > 0 && expr_type)
 return expr_type;
      else if (pos > 0 && in_type)
 return in_type;
      else
 return nullptr;
    }
  else
    {


      if (expr_type)
 return expr_type;
      else if (in_type)
 return in_type;
      else
 return other_oprnd_type;
    }
}



void
expr::gen_transform (FILE *f, int indent, const char *dest, bool gimple,
       int depth, const char *in_type, capture_info *cinfo,
       dt_operand **indexes, int)
{
  id_base *opr = operation;



  if (user_id *uid = dyn_cast <user_id *> (opr))
    opr = uid->substitutes[0];

  bool conversion_p = is_conversion (opr);
  const char *type = expr_type;
  char optype[64];
  if (type)

    ;
  else if (conversion_p)


    type = in_type;
  else if (*opr == REALPART_EXPR
    || *opr == IMAGPART_EXPR)
    {

      snprintf (optype, sizeof (optype), "TREE_TYPE (TREE_TYPE (_o%d[0]))",
  depth);
      type = optype;
    }
  else if (is_a <operator_id *> (opr)
    && !strcmp (as_a <operator_id *> (opr)->tcc, "tcc_comparison"))
    {


      if (in_type)
 type = in_type;
      else
 {
   snprintf (optype, sizeof (optype), "boolean_type_node");
   type = optype;
 }
      in_type = nullptr;
    }
  else if (*opr == COND_EXPR
    || *opr == VEC_COND_EXPR
    || strncmp (opr->id, "CFN_COND_", 9) == 0)
    {

      snprintf (optype, sizeof (optype), "TREE_TYPE (_o%d[1])", depth);
      type = optype;
    }
  else
    {

      snprintf (optype, sizeof (optype), "TREE_TYPE (_o%d[0])", depth);
      type = optype;
    }
  if (!type)
    fatal_at (location, "cannot determine type of operand");

  fprintf_indent (f, indent, "{\n");
  indent += 2;
  fprintf_indent (f, indent,
    "tree _o%d[%u], _r%d;\n", depth, ops.length (), depth);
  char op0type[64];
  snprintf (op0type, sizeof (op0type), "TREE_TYPE (_o%d[0])", depth);
  for (unsigned i = 0; i < ops.length (); ++i)
    {
      char dest1[32];
      snprintf (dest1, sizeof (dest1), "_o%d[%u]", depth, i);
      const char *optype1
 = get_operand_type (opr, i, in_type, expr_type,
       i == 0 ? nullptr : op0type);
      ops[i]->gen_transform (f, indent, dest1, gimple, depth + 1, optype1,
        cinfo, indexes,
        (*opr == COND_EXPR
         || *opr == VEC_COND_EXPR) && i == 0 ? 1 : 2);
    }

  const char *opr_name;
  if (*operation == CONVERT_EXPR)
    opr_name = "NOP_EXPR";
  else
    opr_name = operation->id;

  if (gimple)
    {
      if (*opr == CONVERT_EXPR)
 {
   fprintf_indent (f, indent,
     "if (%s != TREE_TYPE (_o%d[0])\n",
     type, depth);
   fprintf_indent (f, indent,
     "    && !useless_type_conversion_p (%s, TREE_TYPE "
     "(_o%d[0])))\n",
     type, depth);
   fprintf_indent (f, indent + 2, "{\n");
   indent += 4;
 }



      fprintf_indent (f, indent, "gimple_match_op tem_op "
        "(res_op->cond.any_else (), %s, %s", opr_name, type);
      for (unsigned i = 0; i < ops.length (); ++i)
 fprintf (f, ", _o%d[%u]", depth, i);
      fprintf (f, ");\n");
      fprintf_indent (f, indent, "tem_op.resimplify (lseq, valueize);\n");
      fprintf_indent (f, indent,
        "_r%d = maybe_push_res_to_seq (&tem_op, %s);\n", depth,
        !force_leaf ? "lseq" : "NULL");
      fprintf_indent (f, indent,
        "if (!_r%d) goto %s;\n",
        depth, fail_label);
      if (*opr == CONVERT_EXPR)
 {
   indent -= 4;
   fprintf_indent (f, indent, "  }\n");
   fprintf_indent (f, indent, "else\n");
   fprintf_indent (f, indent, "  _r%d = _o%d[0];\n", depth, depth);
 }
    }
  else
    {
      if (*opr == CONVERT_EXPR)
 {
   fprintf_indent (f, indent, "if (TREE_TYPE (_o%d[0]) != %s)\n",
     depth, type);
   indent += 2;
 }
      if (opr->kind == id_base::CODE)
 fprintf_indent (f, indent, "_r%d = fold_build%d_loc (loc, %s, %s",
   depth, ops.length(), opr_name, type);
      else
 {
   fprintf_indent (f, indent, "{\n");
   fprintf_indent (f, indent, "  _r%d = maybe_build_call_expr_loc (loc, "
     "%s, %s, %d", depth, opr_name, type, ops.length());
 }
      for (unsigned i = 0; i < ops.length (); ++i)
 fprintf (f, ", _o%d[%u]", depth, i);
      fprintf (f, ");\n");
      if (opr->kind != id_base::CODE)
 {
   fprintf_indent (f, indent, "  if (!_r%d)\n", depth);
   fprintf_indent (f, indent, "    goto %s;\n", fail_label);
   fprintf_indent (f, indent, "}\n");
 }
      if (*opr == CONVERT_EXPR)
 {
   indent -= 2;
   fprintf_indent (f, indent, "else\n");
   fprintf_indent (f, indent, "  _r%d = _o%d[0];\n", depth, depth);
 }
    }
  fprintf_indent (f, indent, "%s = _r%d;\n", dest, depth);
  indent -= 2;
  fprintf_indent (f, indent, "}\n");
}





void
c_expr::gen_transform (FILE *f, int indent, const char *dest,
         bool, int, const char *, capture_info *,
         dt_operand **, int)
{
  if (dest && nr_stmts == 1)
    fprintf_indent (f, indent, "%s = ", dest);

  unsigned stmt_nr = 1;
  int prev_line = -1;
  for (unsigned i = 0; i < code.length (); ++i)
    {
      const cpp_token *token = &code[i];



      const line_map_ordinary *map;
      linemap_resolve_location (line_table, token->src_loc,
    LRK_SPELLING_LOCATION, &map);
      expanded_location loc = linemap_expand_location (line_table, map,
             token->src_loc);
      if (prev_line != -1 && loc.line != prev_line)
 fputc_unlocked ('\n', f);
      prev_line = loc.line;


      if (token->type == CPP_ATSIGN)
 {
   const cpp_token *n = &code[i+1];
   if ((n->type == CPP_NUMBER
        || n->type == CPP_NAME)
       && !(n->flags & (1 << 0)))
     {
       if (token->flags & (1 << 0))
  fputc_unlocked (' ', f);
       const char *id;
       if (n->type == CPP_NUMBER)
  id = (const char *)n->val.str.text;
       else
  id = (const char *)((cpp_hashnode *) (n->val.node.node))->ident.str;
       unsigned *cid = capture_ids->get (id);
       if (!cid)
  fatal_at (token, "unknown capture id");
       fprintf (f, "captures[%u]", *cid);
       ++i;
       continue;
     }
 }

      if (token->flags & (1 << 0))
 fputc_unlocked (' ', f);

      if (token->type == CPP_NAME)
 {
   const char *id = (const char *) (((&(token->val.node.node)->ident))->str);
   unsigned j;
   for (j = 0; j < ids.length (); ++j)
     {
     if (strcmp (id, ids[j].id) == 0)
       {
  fprintf (f, "%s", ids[j].oper);
  break;
       }
     }
   if (j < ids.length ())
     continue;
 }


      char *tk = (char *)cpp_token_as_text (r, token);
      fputs_unlocked (tk, f);

      if (token->type == CPP_SEMICOLON)
 {
   stmt_nr++;
   if (dest && stmt_nr == nr_stmts)
     fprintf_indent (f, indent, "%s = ", dest);
 }
    }
  fputc_unlocked ('\n', f);
}



void
capture::gen_transform (FILE *f, int indent, const char *dest, bool gimple,
   int depth, const char *in_type, capture_info *cinfo,
   dt_operand **indexes, int cond_handling)
{
  if (what && is_a<expr *> (what))
    {
      if (indexes[where] == 0)
 {
   char buf[20];
   snprintf (buf, sizeof (buf), "captures[%u]", where);
   what->gen_transform (f, indent, buf, gimple, depth, in_type,
          cinfo, nullptr);
 }
    }



  if (!gimple
      && cinfo->info.exists ()
      && cinfo->info[cinfo->info[where].same_as].result_use_count > 1)
    {
      fprintf_indent (f, indent, "%s = unshare_expr (captures[%u]);\n",
        dest, where);
      cinfo->info[cinfo->info[where].same_as].result_use_count--;
    }
  else
    fprintf_indent (f, indent, "%s = captures[%u];\n", dest, where);



  if (gimple
      && cond_handling != 0
      && cinfo->info[where].cond_expr_cond_p)
    {

      if (cond_handling == 1)
 fprintf_indent (f, indent, "%s = unshare_expr (%s);\n", dest, dest);

      else if (cond_handling == 2)
 {


   fprintf_indent (f, indent, "if (COMPARISON_CLASS_P (%s))\n", dest);
   fprintf_indent (f, indent, "  {\n");
   fprintf_indent (f, indent, "    if (!seq) return false;\n");
   fprintf_indent (f, indent, "    %s = gimple_build (seq,"
     " TREE_CODE (%s),"
     " TREE_TYPE (%s), TREE_OPERAND (%s, 0),"
     " TREE_OPERAND (%s, 1));\n",
     dest, dest, dest, dest, dest);
   fprintf_indent (f, indent, "  }\n");
 }
    }
}




char *
dt_operand::get_name (char *name)
{
  if (! parent)
    sprintf (name, "t");
  else if (parent->level == 1)
    sprintf (name, "_p%u", pos);
  else if (parent->type == dt_node::DT_MATCH)
    return as_a <dt_operand *> (parent)->get_name (name);
  else
    sprintf (name, "_q%u%u", parent->level, pos);
  return name;
}



void
dt_operand::gen_opname (char *name, unsigned pos)
{
  if (! parent)
    sprintf (name, "_p%u", pos);
  else
    sprintf (name, "_q%u%u", level, pos);
}




unsigned
dt_operand::gen_predicate (FILE *f, int indent, const char *opname, bool gimple)
{
  predicate *p = as_a <predicate *> (op);

  if (p->p->matchers.exists ())
    {


      if (gimple)
 fprintf_indent (f, indent, "if (gimple_%s (%s, valueize))\n",
   p->p->id, opname);
      else
 fprintf_indent (f, indent, "if (tree_%s (%s))\n", p->p->id, opname);
    }
  else
    fprintf_indent (f, indent, "if (%s (%s))\n", p->p->id, opname);
  fprintf_indent (f, indent + 2, "{\n");
  return 1;
}




unsigned
dt_operand::gen_match_op (FILE *f, int indent, const char *opname, bool)
{
  char match_opname[20];
  match_dop->get_name (match_opname);
  if (value_match)
    fprintf_indent (f, indent, "if ((%s == %s && ! TREE_SIDE_EFFECTS (%s)) "
      "|| operand_equal_p (%s, %s, 0))\n",
      opname, match_opname, opname, opname, match_opname);
  else
    fprintf_indent (f, indent, "if ((%s == %s && ! TREE_SIDE_EFFECTS (%s)) "
      "|| (operand_equal_p (%s, %s, 0) "
      "&& types_match (%s, %s)))\n",
      opname, match_opname, opname, opname, match_opname,
      opname, match_opname);
  fprintf_indent (f, indent + 2, "{\n");
  return 1;
}



unsigned
dt_operand::gen_gimple_expr (FILE *f, int indent, int depth)
{
  expr *e = static_cast<expr *> (op);
  id_base *id = e->operation;
  unsigned n_ops = e->ops.length ();
  unsigned n_braces = 0;

  for (unsigned i = 0; i < n_ops; ++i)
    {
      char child_opname[20];
      gen_opname (child_opname, i);

      if (id->kind == id_base::CODE)
 {
   if (e->is_generic
       || *id == REALPART_EXPR || *id == IMAGPART_EXPR
       || *id == BIT_FIELD_REF || *id == VIEW_CONVERT_EXPR)
     {



       if (e->is_generic)
  {
    char opname[20];
    get_name (opname);
    fprintf_indent (f, indent,
      "tree %s = TREE_OPERAND (%s, %i);\n",
      child_opname, opname, i);
  }
       else
  fprintf_indent (f, indent,
    "tree %s = TREE_OPERAND "
    "(gimple_assign_rhs1 (_a%d), %i);\n",
    child_opname, depth, i);
       fprintf_indent (f, indent,
         "if ((TREE_CODE (%s) == SSA_NAME\n",
         child_opname);
       fprintf_indent (f, indent,
         "     || is_gimple_min_invariant (%s)))\n",
         child_opname);
       fprintf_indent (f, indent,
         "  {\n");
       indent += 4;
       n_braces++;
       fprintf_indent (f, indent,
         "%s = do_valueize (valueize, %s);\n",
         child_opname, child_opname);
       continue;
     }
   else
     fprintf_indent (f, indent,
       "tree %s = gimple_assign_rhs%u (_a%d);\n",
       child_opname, i + 1, depth);
 }
      else
 fprintf_indent (f, indent,
   "tree %s = gimple_call_arg (_c%d, %u);\n",
   child_opname, depth, i);
      fprintf_indent (f, indent,
        "%s = do_valueize (valueize, %s);\n",
        child_opname, child_opname);
    }



  int opno = commutative_op (id);
  if (opno >= 0)
    {
      char child_opname0[20], child_opname1[20];
      gen_opname (child_opname0, opno);
      gen_opname (child_opname1, opno + 1);
      fprintf_indent (f, indent,
        "if (tree_swap_operands_p (%s, %s))\n",
        child_opname0, child_opname1);
      fprintf_indent (f, indent,
        "  std::swap (%s, %s);\n",
        child_opname0, child_opname1);
    }

  return n_braces;
}



unsigned
dt_operand::gen_generic_expr (FILE *f, int indent, const char *opname)
{
  expr *e = static_cast<expr *> (op);
  unsigned n_ops = e->ops.length ();

  for (unsigned i = 0; i < n_ops; ++i)
    {
      char child_opname[20];
      gen_opname (child_opname, i);

      if (e->operation->kind == id_base::CODE)
 fprintf_indent (f, indent, "tree %s = TREE_OPERAND (%s, %u);\n",
   child_opname, opname, i);
      else
 fprintf_indent (f, indent, "tree %s = CALL_EXPR_ARG (%s, %u);\n",
   child_opname, opname, i);
    }

  return 0;
}



void
dt_node::gen_kids (FILE *f, int indent, bool gimple, int depth)
{
  auto_vec<dt_operand *> gimple_exprs;
  auto_vec<dt_operand *> generic_exprs;
  auto_vec<dt_operand *> fns;
  auto_vec<dt_operand *> generic_fns;
  auto_vec<dt_operand *> preds;
  auto_vec<dt_node *> others;

  for (unsigned i = 0; i < kids.length (); ++i)
    {
      if (kids[i]->type == dt_node::DT_OPERAND)
 {
   dt_operand *op = as_a<dt_operand *> (kids[i]);
   if (expr *e = dyn_cast <expr *> (op->op))
     {
       if (e->ops.length () == 0
    && (!gimple || !(*e->operation == CONSTRUCTOR)))
  generic_exprs.safe_push (op);
       else if (e->operation->kind == id_base::FN)
  {
    if (gimple)
      fns.safe_push (op);
    else
      generic_fns.safe_push (op);
  }
       else if (e->operation->kind == id_base::PREDICATE)
  preds.safe_push (op);
       else
  {
    if (gimple && !e->is_generic)
      gimple_exprs.safe_push (op);
    else
      generic_exprs.safe_push (op);
  }
     }
   else if (op->op->type == operand::OP_PREDICATE)
     others.safe_push (kids[i]);
   else
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 2951, __FUNCTION__));
 }
      else if (kids[i]->type == dt_node::DT_SIMPLIFY)
 others.safe_push (kids[i]);
      else if (kids[i]->type == dt_node::DT_MATCH
        || kids[i]->type == dt_node::DT_TRUE)
 {





   gen_kids_1 (f, indent, gimple, depth, gimple_exprs, generic_exprs,
        fns, generic_fns, preds, others);

   kids[i]->gen (f, indent, gimple, depth);
   gimple_exprs.truncate (0);
   generic_exprs.truncate (0);
   fns.truncate (0);
   generic_fns.truncate (0);
   preds.truncate (0);
   others.truncate (0);
 }
      else
 (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 2975, __FUNCTION__));
    }


  gen_kids_1 (f, indent, gimple, depth, gimple_exprs, generic_exprs,
       fns, generic_fns, preds, others);
}



void
dt_node::gen_kids_1 (FILE *f, int indent, bool gimple, int depth,
       vec<dt_operand *> gimple_exprs,
       vec<dt_operand *> generic_exprs,
       vec<dt_operand *> fns,
       vec<dt_operand *> generic_fns,
       vec<dt_operand *> preds,
       vec<dt_node *> others)
{
  char buf[128];
  char *kid_opname = buf;

  unsigned exprs_len = gimple_exprs.length ();
  unsigned gexprs_len = generic_exprs.length ();
  unsigned fns_len = fns.length ();
  unsigned gfns_len = generic_fns.length ();

  if (exprs_len || fns_len || gexprs_len || gfns_len)
    {
      if (exprs_len)
 gimple_exprs[0]->get_name (kid_opname);
      else if (fns_len)
 fns[0]->get_name (kid_opname);
      else if (gfns_len)
 generic_fns[0]->get_name (kid_opname);
      else
 generic_exprs[0]->get_name (kid_opname);

      fprintf_indent (f, indent, "switch (TREE_CODE (%s))\n", kid_opname);
      fprintf_indent (f, indent, "  {\n");
      indent += 2;
    }

  if (exprs_len || fns_len)
    {
      depth++;
      fprintf_indent (f, indent,
        "case SSA_NAME:\n");
      fprintf_indent (f, indent,
        "  if (gimple *_d%d = get_def (valueize, %s))\n",
        depth, kid_opname);
      fprintf_indent (f, indent,
        "    {\n");
      indent += 6;
      if (exprs_len)
 {
   fprintf_indent (f, indent,
     "if (gassign *_a%d = dyn_cast <gassign *> (_d%d))\n",
     depth, depth);
   fprintf_indent (f, indent,
     "  switch (gimple_assign_rhs_code (_a%d))\n",
     depth);
   indent += 4;
   fprintf_indent (f, indent, "{\n");
   for (unsigned i = 0; i < exprs_len; ++i)
     {
       expr *e = as_a <expr *> (gimple_exprs[i]->op);
       id_base *op = e->operation;
       if (*op == CONVERT_EXPR || *op == NOP_EXPR)
  fprintf_indent (f, indent, "CASE_CONVERT:\n");
       else
  fprintf_indent (f, indent, "case %s:\n", op->id);
       fprintf_indent (f, indent, "  {\n");
       gimple_exprs[i]->gen (f, indent + 4, true, depth);
       fprintf_indent (f, indent, "    break;\n");
       fprintf_indent (f, indent, "  }\n");
     }
   fprintf_indent (f, indent, "default:;\n");
   fprintf_indent (f, indent, "}\n");
   indent -= 4;
 }

      if (fns_len)
 {
   fprintf_indent (f, indent,
     "%sif (gcall *_c%d = dyn_cast <gcall *> (_d%d))\n",
     exprs_len ? "else " : "", depth, depth);
   fprintf_indent (f, indent,
     "  switch (gimple_call_combined_fn (_c%d))\n",
     depth);

   indent += 4;
   fprintf_indent (f, indent, "{\n");
   for (unsigned i = 0; i < fns_len; ++i)
     {
       expr *e = as_a <expr *>(fns[i]->op);
       fprintf_indent (f, indent, "case %s:\n", e->operation->id);


       fprintf_indent (f, indent,
         "  if (gimple_call_num_args (_c%d) == %d)\n",
         depth, e->ops.length ());
       fprintf_indent (f, indent, "    {\n");
       fns[i]->gen (f, indent + 6, true, depth);
       fprintf_indent (f, indent, "    }\n");
       fprintf_indent (f, indent, "  break;\n");
     }

   fprintf_indent (f, indent, "default:;\n");
   fprintf_indent (f, indent, "}\n");
   indent -= 4;
 }

      indent -= 6;
      depth--;
      fprintf_indent (f, indent, "    }\n");


      for (unsigned i = 0; i < generic_exprs.length (); ++i)
 {
   expr *e = as_a <expr *>(generic_exprs[i]->op);
   id_base *op = e->operation;
   if (*op == SSA_NAME && (exprs_len || fns_len))
     {
       fprintf_indent (f, indent + 4, "{\n");
       generic_exprs[i]->gen (f, indent + 6, gimple, depth);
       fprintf_indent (f, indent + 4, "}\n");
     }
 }

      fprintf_indent (f, indent, "  break;\n");
    }

  for (unsigned i = 0; i < generic_exprs.length (); ++i)
    {
      expr *e = as_a <expr *>(generic_exprs[i]->op);
      id_base *op = e->operation;
      if (*op == CONVERT_EXPR || *op == NOP_EXPR)
 fprintf_indent (f, indent, "CASE_CONVERT:\n");
      else if (*op == SSA_NAME && (exprs_len || fns_len))

 continue;
      else
 fprintf_indent (f, indent, "case %s:\n", op->id);
      fprintf_indent (f, indent, "  {\n");
      generic_exprs[i]->gen (f, indent + 4, gimple, depth);
      fprintf_indent (f, indent, "    break;\n");
      fprintf_indent (f, indent, "  }\n");
    }

  if (gfns_len)
    {
      fprintf_indent (f, indent,
        "case CALL_EXPR:\n");
      fprintf_indent (f, indent,
        "  switch (get_call_combined_fn (%s))\n",
        kid_opname);
      fprintf_indent (f, indent,
        "    {\n");
      indent += 4;

      for (unsigned j = 0; j < generic_fns.length (); ++j)
 {
   expr *e = as_a <expr *>(generic_fns[j]->op);
   ((void)(!(e->operation->kind == id_base::FN) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 3139, __FUNCTION__), 0 : 0));

   fprintf_indent (f, indent, "case %s:\n", e->operation->id);
   fprintf_indent (f, indent, "  if (call_expr_nargs (%s) == %d)\n"
         "    {\n", kid_opname, e->ops.length ());
   generic_fns[j]->gen (f, indent + 6, false, depth);
   fprintf_indent (f, indent, "    }\n"
         "  break;\n");
 }
      fprintf_indent (f, indent, "default:;\n");

      indent -= 4;
      fprintf_indent (f, indent, "    }\n");
      fprintf_indent (f, indent, "  break;\n");
    }


  if (exprs_len || fns_len || gexprs_len || gfns_len)
    {
      indent -= 4;
      fprintf_indent (f, indent, "    default:;\n");
      fprintf_indent (f, indent, "    }\n");
    }

  for (unsigned i = 0; i < preds.length (); ++i)
    {
      expr *e = as_a <expr *> (preds[i]->op);
      predicate_id *p = as_a <predicate_id *> (e->operation);
      preds[i]->get_name (kid_opname);
      fprintf_indent (f, indent, "{\n");
      indent += 2;
      fprintf_indent (f, indent, "tree %s_pops[%d];\n", kid_opname, p->nargs);
      fprintf_indent (f, indent, "if (%s_%s (%s, %s_pops%s))\n",
        gimple ? "gimple" : "tree",
        p->id, kid_opname, kid_opname,
        gimple ? ", valueize" : "");
      fprintf_indent (f, indent, "  {\n");
      for (int j = 0; j < p->nargs; ++j)
 {
   char child_opname[20];
   preds[i]->gen_opname (child_opname, j);
   fprintf_indent (f, indent + 4, "tree %s = %s_pops[%d];\n",
     child_opname, kid_opname, j);
 }
      preds[i]->gen_kids (f, indent + 4, gimple, depth);
      fprintf (f, "}\n");
      indent -= 2;
      fprintf_indent (f, indent, "}\n");
    }

  for (unsigned i = 0; i < others.length (); ++i)
    others[i]->gen (f, indent, gimple, depth);
}



void
dt_operand::gen (FILE *f, int indent, bool gimple, int depth)
{
  char opname[20];
  get_name (opname);

  unsigned n_braces = 0;

  if (type == DT_OPERAND)
    switch (op->type)
      {
 case operand::OP_PREDICATE:
   n_braces = gen_predicate (f, indent, opname, gimple);
   break;

 case operand::OP_EXPR:
   if (gimple)
     n_braces = gen_gimple_expr (f, indent, depth);
   else
     n_braces = gen_generic_expr (f, indent, opname);
   break;

 default:
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 3218, __FUNCTION__));
      }
  else if (type == DT_TRUE)
    ;
  else if (type == DT_MATCH)
    n_braces = gen_match_op (f, indent, opname, gimple);
  else
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 3225, __FUNCTION__));

  indent += 4 * n_braces;
  gen_kids (f, indent, gimple, depth);

  for (unsigned i = 0; i < n_braces; ++i)
    {
      indent -= 4;
      if (indent < 0)
 indent = 0;
      fprintf_indent (f, indent, "  }\n");
    }
}







void
dt_simplify::gen_1 (FILE *f, int indent, bool gimple, operand *result)
{
  if (result)
    {
      if (with_expr *w = dyn_cast <with_expr *> (result))
 {
   fprintf_indent (f, indent, "{\n");
   indent += 4;
   output_line_directive (f, w->location);
   w->with->gen_transform (f, indent, nullptr, true, 1, "type", nullptr);
   gen_1 (f, indent, gimple, w->subexpr);
   indent -= 4;
   fprintf_indent (f, indent, "}\n");
   return;
 }
      else if (if_expr *ife = dyn_cast <if_expr *> (result))
 {
   output_line_directive (f, ife->location);
   fprintf_indent (f, indent, "if (");
   ife->cond->gen_transform (f, indent, nullptr, true, 1, "type", nullptr);
   fprintf (f, ")\n");
   fprintf_indent (f, indent + 2, "{\n");
   indent += 4;
   gen_1 (f, indent, gimple, ife->trueexpr);
   indent -= 4;
   fprintf_indent (f, indent + 2, "}\n");
   if (ife->falseexpr)
     {
       fprintf_indent (f, indent, "else\n");
       fprintf_indent (f, indent + 2, "{\n");
       indent += 4;
       gen_1 (f, indent, gimple, ife->falseexpr);
       indent -= 4;
       fprintf_indent (f, indent + 2, "}\n");
     }
   return;
 }
    }

  static unsigned fail_label_cnt;
  char local_fail_label[256];
  snprintf (local_fail_label, 256, "next_after_fail%u", ++fail_label_cnt);
  fail_label = local_fail_label;



  capture_info cinfo (s, result, gimple);
  if (s->kind == simplify::SIMPLIFY)
    {
      if (!gimple)
 {
   for (unsigned i = 0; i < as_a <expr *> (s->match)->ops.length (); ++i)
     if (cinfo.force_no_side_effects & (1 << i))
       {
  fprintf_indent (f, indent,
    "if (TREE_SIDE_EFFECTS (_p%d)) goto %s;\n",
    i, fail_label);
  if (verbose >= 1)
    warning_at (as_a <expr *> (s->match)->ops[i]->location,
         "forcing toplevel operand to have no "
         "side-effects");
       }
   for (int i = 0; i <= s->capture_max; ++i)
     if (cinfo.info[i].cse_p)
       ;
     else if (cinfo.info[i].force_no_side_effects_p
       && (cinfo.info[i].toplevel_msk
    & cinfo.force_no_side_effects) == 0)
       {
  fprintf_indent (f, indent,
    "if (TREE_SIDE_EFFECTS (captures[%d])) "
    "goto %s;\n", i, fail_label);
  if (verbose >= 1)
    warning_at (cinfo.info[i].c->location,
         "forcing captured operand to have no "
         "side-effects");
       }
     else if ((cinfo.info[i].toplevel_msk
        & cinfo.force_no_side_effects) != 0)


       cinfo.info[i].force_no_side_effects_p = true;
 }
      if (gimple)
 {


   fprintf_indent (f, indent, "gimple_seq *lseq = seq;\n");
   bool first_p = true;
   for (int i = 0; i <= s->capture_max; ++i)
     if (cinfo.info[i].force_single_use)
       {
  if (first_p)
    {
      fprintf_indent (f, indent, "if (lseq\n");
      fprintf_indent (f, indent, "    && (");
      first_p = false;
    }
  else
    {
      fprintf (f, "\n");
      fprintf_indent (f, indent, "        || ");
    }
  fprintf (f, "!single_use (captures[%d])", i);
       }
   if (!first_p)
     {
       fprintf (f, "))\n");
       fprintf_indent (f, indent, "  lseq = NULL;\n");
     }
 }
    }

  if (s->kind == simplify::SIMPLIFY)
    fprintf_indent (f, indent, "if (__builtin_expect (!dbg_cnt (match), 0)) goto %s;\n", fail_label);

  fprintf_indent (f, indent, "if (__builtin_expect (dump_file && (dump_flags & TDF_FOLDING), 0)) "
    "fprintf (dump_file, \"%s ",
    s->kind == simplify::SIMPLIFY
    ? "Applying pattern" : "Matching expression");
  fprintf (f, "%%s:%%d, %%s:%%d\\n\", ");
  output_line_directive (f,
    result ? result->location : s->match->location, true,
    true);
  fprintf (f, ", __FILE__, __LINE__);\n");

  fprintf_indent (f, indent, "{\n");
  indent += 2;
  if (!result)
    {

      fprintf_indent (f, indent, "return true;\n");
    }
  else if (gimple)
    {


      if (result->type == operand::OP_EXPR
   && *as_a <expr *> (result)->operation == NON_LVALUE_EXPR)
 result = as_a <expr *> (result)->ops[0];
      if (result->type == operand::OP_EXPR)
 {
   expr *e = as_a <expr *> (result);
   id_base *opr = e->operation;
   bool is_predicate = false;



   if (user_id *uid = dyn_cast <user_id *> (opr))
     opr = uid->substitutes[0];
   else if (is_a <predicate_id *> (opr))
     is_predicate = true;
   if (!is_predicate)
     fprintf_indent (f, indent, "res_op->set_op (%s, type, %d);\n",
       *e->operation == CONVERT_EXPR
       ? "NOP_EXPR" : e->operation->id,
       e->ops.length ());
   for (unsigned j = 0; j < e->ops.length (); ++j)
     {
       char dest[32];
       if (is_predicate)
  snprintf (dest, sizeof (dest), "res_ops[%d]", j);
       else
  snprintf (dest, sizeof (dest), "res_op->ops[%d]", j);
       const char *optype
  = get_operand_type (opr, j,
        "type", e->expr_type,
        j == 0 ? nullptr
        : "TREE_TYPE (res_op->ops[0])");



       int cond_handling = 0;
       if (!is_predicate)
  cond_handling = ((*opr == COND_EXPR
      || *opr == VEC_COND_EXPR) && j == 0) ? 1 : 2;
       e->ops[j]->gen_transform (f, indent, dest, true, 1, optype,
     &cinfo, indexes, cond_handling);
     }



   if (!is_predicate)
     fprintf_indent (f, indent,
       "res_op->resimplify (lseq, valueize);\n");
 }
      else if (result->type == operand::OP_CAPTURE
        || result->type == operand::OP_C_EXPR)
 {
   fprintf_indent (f, indent, "tree tem;\n");
   result->gen_transform (f, indent, "tem", true, 1, "type",
     &cinfo, indexes);
   fprintf_indent (f, indent, "res_op->set_value (tem);\n");
   if (is_a <capture *> (result)
       && cinfo.info[as_a <capture *> (result)->where].cond_expr_cond_p)
     {


       fprintf_indent (f, indent,
         "if (COMPARISON_CLASS_P (tem))\n");
       fprintf_indent (f, indent,
         "  {\n");
       fprintf_indent (f, indent,
         "    res_op->ops[0] = TREE_OPERAND (tem, 0);\n");
       fprintf_indent (f, indent,
         "    res_op->ops[1] = TREE_OPERAND (tem, 1);\n");
       fprintf_indent (f, indent,
         "  }\n");
     }
 }
      else
 (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 3457, __FUNCTION__));
      fprintf_indent (f, indent, "return true;\n");
    }
  else
    {
      bool is_predicate = false;
      if (result->type == operand::OP_EXPR)
 {
   expr *e = as_a <expr *> (result);
   id_base *opr = e->operation;



   if (user_id *uid = dyn_cast <user_id *> (opr))
     opr = uid->substitutes[0];
   else if (is_a <predicate_id *> (opr))
     is_predicate = true;



   if (!is_predicate)
     for (int i = 0; i < s->capture_max + 1; ++i)
       {
  if (cinfo.info[i].same_as != (unsigned)i
      || cinfo.info[i].cse_p)
    continue;
  if (cinfo.info[i].result_use_count
      > cinfo.info[i].match_use_count)
    fprintf_indent (f, indent,
      "if (! tree_invariant_p (captures[%d])) "
      "goto %s;\n", i, fail_label);
       }
   for (unsigned j = 0; j < e->ops.length (); ++j)
     {
       char dest[32];
       if (is_predicate)
  snprintf (dest, sizeof (dest), "res_ops[%d]", j);
       else
  {
    fprintf_indent (f, indent, "tree res_op%d;\n", j);
    snprintf (dest, sizeof (dest), "res_op%d", j);
  }
       const char *optype
         = get_operand_type (opr, j,
        "type", e->expr_type,
        j == 0
        ? nullptr : "TREE_TYPE (res_op0)");
       e->ops[j]->gen_transform (f, indent, dest, false, 1, optype,
     &cinfo, indexes);
     }
   if (is_predicate)
     fprintf_indent (f, indent, "return true;\n");
   else
     {
       fprintf_indent (f, indent, "tree _r;\n");



       if (*opr == NON_LVALUE_EXPR)
  fprintf_indent (f, indent,
    "_r = non_lvalue_loc (loc, res_op0);\n");
       else
  {
    if (is_a <operator_id *> (opr))
      fprintf_indent (f, indent,
        "_r = fold_build%d_loc (loc, %s, type",
        e->ops.length (),
        *e->operation == CONVERT_EXPR
        ? "NOP_EXPR" : e->operation->id);
    else
      fprintf_indent (f, indent,
        "_r = maybe_build_call_expr_loc (loc, "
        "%s, type, %d", e->operation->id,
        e->ops.length());
    for (unsigned j = 0; j < e->ops.length (); ++j)
      fprintf (f, ", res_op%d", j);
    fprintf (f, ");\n");
    if (!is_a <operator_id *> (opr))
      {
        fprintf_indent (f, indent, "if (!_r)\n");
        fprintf_indent (f, indent, "  goto %s;\n", fail_label);
      }
  }
     }
 }
      else if (result->type == operand::OP_CAPTURE
        || result->type == operand::OP_C_EXPR)

 {
   fprintf_indent (f, indent, "tree _r;\n");
   result->gen_transform (f, indent, "_r", false, 1, "type",
        &cinfo, indexes);
 }
      else
 (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 3551, __FUNCTION__));
      if (!is_predicate)
 {


   for (int i = 0; i < s->capture_max + 1; ++i)
     {
       if (cinfo.info[i].same_as != (unsigned)i)
  continue;
       if (!cinfo.info[i].force_no_side_effects_p
    && !cinfo.info[i].expr_p
    && cinfo.info[i].result_use_count == 0)
  {
    fprintf_indent (f, indent,
      "if (TREE_SIDE_EFFECTS (captures[%d]))\n",
      i);
    fprintf_indent (f, indent + 2,
      "_r = build2_loc (loc, COMPOUND_EXPR, type, "
      "fold_ignored_result (captures[%d]), _r);\n",
      i);
  }
     }
   fprintf_indent (f, indent, "return _r;\n");
 }
    }
  indent -= 2;
  fprintf_indent (f, indent, "}\n");
  fprintf (f, "%s:;\n", fail_label);
  fail_label = nullptr;
}





void
dt_simplify::gen (FILE *f, int indent, bool gimple, int depth __attribute__ ((__unused__)))
{
  fprintf_indent (f, indent, "{\n");
  indent += 2;
  output_line_directive (f,
    s->result ? s->result->location : s->match->location);
  if (s->capture_max >= 0)
    {
      char opname[20];
      fprintf_indent (f, indent, "tree captures[%u] ATTRIBUTE_UNUSED = { %s",
        s->capture_max + 1, indexes[0]->get_name (opname));

      for (int i = 1; i <= s->capture_max; ++i)
 {
   if (!indexes[i])
     break;
   fprintf (f, ", %s", indexes[i]->get_name (opname));
 }
      fprintf (f, " };\n");
    }


  if (info && info->fname)
    {
      if (gimple)
 {
   fprintf_indent (f, indent, "if (%s (res_op, seq, "
     "valueize, type, captures", info->fname);
   for (unsigned i = 0; i < s->for_subst_vec.length (); ++i)
     if (s->for_subst_vec[i].first->used)
       fprintf (f, ", %s", s->for_subst_vec[i].second->id);
   fprintf (f, "))\n");
   fprintf_indent (f, indent, "  return true;\n");
 }
      else
 {
   fprintf_indent (f, indent, "tree res = %s (loc, type",
     info->fname);
   for (unsigned i = 0; i < as_a <expr *> (s->match)->ops.length (); ++i)
     fprintf (f, ", _p%d", i);
   fprintf (f, ", captures");
   for (unsigned i = 0; i < s->for_subst_vec.length (); ++i)
     {
       if (s->for_subst_vec[i].first->used)
  fprintf (f, ", %s", s->for_subst_vec[i].second->id);
     }
   fprintf (f, ");\n");
   fprintf_indent (f, indent, "if (res) return res;\n");
 }
    }
  else
    {
      for (unsigned i = 0; i < s->for_subst_vec.length (); ++i)
 {
   if (! s->for_subst_vec[i].first->used)
     continue;
   if (is_a <operator_id *> (s->for_subst_vec[i].second))
     fprintf_indent (f, indent, "const enum tree_code %s = %s;\n",
       s->for_subst_vec[i].first->id,
       s->for_subst_vec[i].second->id);
   else if (is_a <fn_id *> (s->for_subst_vec[i].second))
     fprintf_indent (f, indent, "const combined_fn %s = %s;\n",
       s->for_subst_vec[i].first->id,
       s->for_subst_vec[i].second->id);
   else
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 3652, __FUNCTION__));
 }
      gen_1 (f, indent, gimple, s->result);
    }

  indent -= 2;
  fprintf_indent (f, indent, "}\n");
}




hashval_t
sinfo_hashmap_traits::hash (const key_type &v)
{

  return v->s->result->location;
}



static bool
compare_op (operand *o1, simplify *s1, operand *o2, simplify *s2)
{
  if (o1->type != o2->type)
    return false;

  switch (o1->type)
    {
    case operand::OP_IF:
      {
 if_expr *if1 = as_a <if_expr *> (o1);
 if_expr *if2 = as_a <if_expr *> (o2);

 if (if1->cond != if2->cond)
   return false;
 if (!compare_op (if1->trueexpr, s1, if2->trueexpr, s2))
   return false;
 if (if1->falseexpr != if2->falseexpr
     || (if1->falseexpr
  && !compare_op (if1->falseexpr, s1, if2->falseexpr, s2)))
   return false;
 return true;
      }
    case operand::OP_WITH:
      {
 with_expr *with1 = as_a <with_expr *> (o1);
 with_expr *with2 = as_a <with_expr *> (o2);
 if (with1->with != with2->with)
   return false;
 return compare_op (with1->subexpr, s1, with2->subexpr, s2);
      }
    default:;
    }



  capture_info cinfo1 (s1, o1, true);
  capture_info cinfo2 (s2, o2, true);

  if (cinfo1.force_no_side_effects != cinfo2.force_no_side_effects
      || cinfo1.info.length () != cinfo2.info.length ())
    return false;

  for (unsigned i = 0; i < cinfo1.info.length (); ++i)
    {
      if (cinfo1.info[i].expr_p != cinfo2.info[i].expr_p
   || cinfo1.info[i].cse_p != cinfo2.info[i].cse_p
   || (cinfo1.info[i].force_no_side_effects_p
       != cinfo2.info[i].force_no_side_effects_p)
   || cinfo1.info[i].force_single_use != cinfo2.info[i].force_single_use
   || cinfo1.info[i].cond_expr_cond_p != cinfo2.info[i].cond_expr_cond_p

   || cinfo1.info[i].result_use_count != cinfo2.info[i].result_use_count
   || cinfo1.info[i].same_as != cinfo2.info[i].same_as
                                                                )
 return false;
    }


  return o1 == o2;
}

bool
sinfo_hashmap_traits::equal_keys (const key_type &v,
      const key_type &candidate)
{
  return compare_op (v->s->result, v->s, candidate->s->result, candidate->s);
}





void
decision_tree::gen (FILE *f, bool gimple)
{
  sinfo_map_t si;

  root->analyze (si);

  fprintf (
# 3753 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
          stderr
# 3753 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                , "%s decision tree has %u leafs, maximum depth %u and "
    "a total number of %u nodes\n",
    gimple ? "GIMPLE" : "GENERIC",
    root->num_leafs, root->max_level, root->total_size);


  unsigned rcnt = 0;
  unsigned fcnt = 1;
  for (sinfo_map_t::iterator iter = si.begin ();
       iter != si.end (); ++iter)
    {
      sinfo *s = (*iter).second;

      if (s->cnt <= 1)
 continue;

      rcnt += s->cnt - 1;
      if (verbose >= 1)
 {
   fprintf (
# 3772 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
           stderr
# 3772 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                 , "found %u uses of", s->cnt);
   output_line_directive (
# 3773 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                         stderr
# 3773 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                               , s->s->s->result->location);
 }


      s->fname = xasprintf ("%s_simplify_%u", gimple ? "gimple" : "generic",
       fcnt++);
      if (gimple)
 fprintf (f, "\nstatic bool\n"
   "%s (gimple_match_op *res_op, gimple_seq *seq,\n"
   "                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,\n"
   "                 const tree ARG_UNUSED (type), tree *ARG_UNUSED "
   "(captures)\n",
   s->fname);
      else
 {
   fprintf (f, "\nstatic tree\n"
     "%s (location_t ARG_UNUSED (loc), const tree ARG_UNUSED (type),\n",
     (*iter).second->fname);
   for (unsigned i = 0;
        i < as_a <expr *>(s->s->s->match)->ops.length (); ++i)
     fprintf (f, " tree ARG_UNUSED (_p%d),", i);
   fprintf (f, " tree *captures\n");
 }
      for (unsigned i = 0; i < s->s->s->for_subst_vec.length (); ++i)
 {
   if (! s->s->s->for_subst_vec[i].first->used)
     continue;
   if (is_a <operator_id *> (s->s->s->for_subst_vec[i].second))
     fprintf (f, ", const enum tree_code ARG_UNUSED (%s)",
       s->s->s->for_subst_vec[i].first->id);
   else if (is_a <fn_id *> (s->s->s->for_subst_vec[i].second))
     fprintf (f, ", const combined_fn ARG_UNUSED (%s)",
       s->s->s->for_subst_vec[i].first->id);
 }

      fprintf (f, ")\n{\n");
      s->s->gen_1 (f, 2, gimple, s->s->s->result);
      if (gimple)
 fprintf (f, "  return false;\n");
      else
 fprintf (f, "  return NULL_TREE;\n");
      fprintf (f, "}\n");
    }
  fprintf (
# 3816 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
          stderr
# 3816 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                , "removed %u duplicate tails\n", rcnt);

  for (unsigned n = 1; n <= 5; ++n)
    {
      bool has_kids_p = false;


      for (unsigned j = 0; j < root->kids.length (); j++)
 {
   dt_operand *dop = static_cast<dt_operand *>(root->kids[j]);
   expr *e = static_cast<expr *>(dop->op);
   if (e->ops.length () != n




       || (!gimple
    && e->operation->kind != id_base::CODE))
     continue;

   if (gimple)
     fprintf (f, "\nstatic bool\n"
       "gimple_simplify_%s (gimple_match_op *res_op,"
       " gimple_seq *seq,\n"
       "                 tree (*valueize)(tree) "
       "ATTRIBUTE_UNUSED,\n"
       "                 code_helper ARG_UNUSED (code), tree "
       "ARG_UNUSED (type)\n",
       e->operation->id);
   else
     fprintf (f, "\nstatic tree\n"
       "generic_simplify_%s (location_t ARG_UNUSED (loc), enum "
       "tree_code ARG_UNUSED (code), const tree ARG_UNUSED (type)",
       e->operation->id);
   for (unsigned i = 0; i < n; ++i)
     fprintf (f, ", tree _p%d", i);
   fprintf (f, ")\n");
   fprintf (f, "{\n");
   dop->gen_kids (f, 2, gimple, 0);
   if (gimple)
     fprintf (f, "  return false;\n");
   else
     fprintf (f, "  return NULL_TREE;\n");
   fprintf (f, "}\n");
   has_kids_p = true;
 }



      if (! has_kids_p)
 {
   if (gimple)
     fprintf (f, "\nstatic bool\n"
   "gimple_simplify (gimple_match_op*, gimple_seq*,\n"
   "                 tree (*)(tree), code_helper,\n"
   "                 const tree");
   else
     fprintf (f, "\ntree\n"
   "generic_simplify (location_t, enum tree_code,\n"
   "                  const tree");
   for (unsigned i = 0; i < n; ++i)
     fprintf (f, ", tree");
   fprintf (f, ")\n");
   fprintf (f, "{\n");
   if (gimple)
     fprintf (f, "  return false;\n");
   else
     fprintf (f, "  return NULL_TREE;\n");
   fprintf (f, "}\n");
   continue;
 }



      if (gimple)
 fprintf (f, "\nstatic bool\n"
   "gimple_simplify (gimple_match_op *res_op, gimple_seq *seq,\n"
   "                 tree (*valueize)(tree) ATTRIBUTE_UNUSED,\n"
   "                 code_helper code, const tree type");
      else
 fprintf (f, "\ntree\n"
   "generic_simplify (location_t loc, enum tree_code code, "
   "const tree type ATTRIBUTE_UNUSED");
      for (unsigned i = 0; i < n; ++i)
 fprintf (f, ", tree _p%d", i);
      fprintf (f, ")\n");
      fprintf (f, "{\n");

      if (gimple)
 fprintf (f, "  switch (code.get_rep())\n"
   "    {\n");
      else
 fprintf (f, "  switch (code)\n"
   "    {\n");
      for (unsigned i = 0; i < root->kids.length (); i++)
 {
   dt_operand *dop = static_cast<dt_operand *>(root->kids[i]);
   expr *e = static_cast<expr *>(dop->op);
   if (e->ops.length () != n




       || (!gimple
    && e->operation->kind != id_base::CODE))
     continue;

   if (*e->operation == CONVERT_EXPR
       || *e->operation == NOP_EXPR)
     fprintf (f, "    CASE_CONVERT:\n");
   else
     fprintf (f, "    case %s%s:\n",
       is_a <fn_id *> (e->operation) ? "-" : "",
       e->operation->id);
   if (gimple)
     fprintf (f, "      return gimple_simplify_%s (res_op, "
       "seq, valueize, code, type", e->operation->id);
   else
     fprintf (f, "      return generic_simplify_%s (loc, code, type",
       e->operation->id);
   for (unsigned j = 0; j < n; ++j)
     fprintf (f, ", _p%d", j);
   fprintf (f, ");\n");
 }
      fprintf (f, "    default:;\n"
                 "    }\n");

      if (gimple)
 fprintf (f, "  return false;\n");
      else
 fprintf (f, "  return NULL_TREE;\n");
      fprintf (f, "}\n");
    }
}



void
write_predicate (FILE *f, predicate_id *p, decision_tree &dt, bool gimple)
{
  fprintf (f, "\nbool\n"
    "%s%s (tree t%s%s)\n"
    "{\n", gimple ? "gimple_" : "tree_", p->id,
    p->nargs > 0 ? ", tree *res_ops" : "",
    gimple ? ", tree (*valueize)(tree) ATTRIBUTE_UNUSED" : "");

  fprintf_indent (f, 2, "const tree type = TREE_TYPE (t);\n");

  if (!gimple)
    fprintf_indent (f, 2, "if (TREE_SIDE_EFFECTS (t)) return false;\n");
  dt.root->gen_kids (f, 2, gimple, 0);

  fprintf_indent (f, 2, "return false;\n"
    "}\n");
}



static void
write_header (FILE *f, const char *head)
{
  fprintf (f, "/* Generated automatically by the program `genmatch' from\n");
  fprintf (f, "   a IL pattern matching and simplification description.  */\n");


  fprintf (f, "\n#include \"%s\"\n", head);
}





class parser
{
public:
  parser (cpp_reader *, bool gimple);

private:
  const cpp_token *next ();
  const cpp_token *peek (unsigned = 1);
  const cpp_token *peek_ident (const char * = nullptr, unsigned = 1);
  const cpp_token *expect (enum cpp_ttype);
  const cpp_token *eat_token (enum cpp_ttype);
  const char *get_string ();
  const char *get_ident ();
  const cpp_token *eat_ident (const char *);
  const char *get_number ();

  unsigned get_internal_capture_id ();

  id_base *parse_operation (unsigned char &);
  operand *parse_capture (operand *, bool);
  operand *parse_expr ();
  c_expr *parse_c_expr (cpp_ttype);
  operand *parse_op ();

  void record_operlist (location_t, user_id *);

  void parse_pattern ();
  operand *parse_result (operand *, predicate_id *);
  void push_simplify (simplify::simplify_kind,
        vec<simplify *>&, operand *, operand *);
  void parse_simplify (simplify::simplify_kind,
         vec<simplify *>&, predicate_id *, operand *);
  void parse_for (location_t);
  void parse_if (location_t);
  void parse_predicates (location_t);
  void parse_operator_list (location_t);

  void finish_match_operand (operand *);

  cpp_reader *r;
  bool gimple;
  vec<c_expr *> active_ifs;
  vec<vec<user_id *> > active_fors;
  hash_set<user_id *> *oper_lists_set;
  vec<user_id *> oper_lists;

  cid_map_t *capture_ids;
  unsigned last_id;

public:
  vec<simplify *> simplifiers;
  vec<predicate_id *> user_predicates;
  bool parsing_match_operand;
};





const cpp_token *
parser::next ()
{
  const cpp_token *token;
  do
    {
      token = cpp_get_token (r);
    }
  while (token->type == CPP_PADDING);
  return token;
}



const cpp_token *
parser::peek (unsigned num)
{
  const cpp_token *token;
  unsigned i = 0;
  do
    {
      token = cpp_peek_token (r, i++);
    }
  while (token->type == CPP_PADDING
  || (--num > 0));



  if (token->type == CPP_EOF)
    fatal_at (token, "unexpected end of file");
  return token;
}




const cpp_token *
parser::peek_ident (const char *id, unsigned num)
{
  const cpp_token *token = peek (num);
  if (token->type != CPP_NAME)
    return 0;

  if (id == 0)
    return token;

  const char *t = (const char *) ((cpp_hashnode *) (token->val.node.node))->ident.str;
  if (strcmp (id, t) == 0)
    return token;

  return 0;
}



const cpp_token *
parser::expect (enum cpp_ttype tk)
{
  const cpp_token *token = next ();
  if (token->type != tk)
    fatal_at (token, "expected %s, got %s",
       cpp_type2name (tk, 0), cpp_type2name (token->type, 0));

  return token;
}



const cpp_token *
parser::eat_token (enum cpp_ttype tk)
{
  return expect (tk);
}




const char *
parser::get_string ()
{
  const cpp_token *token = expect (CPP_STRING);
  return (const char *)token->val.str.text;
}




const char *
parser::get_ident ()
{
  const cpp_token *token = expect (CPP_NAME);
  return (const char *)((cpp_hashnode *) (token->val.node.node))->ident.str;
}



const cpp_token *
parser::eat_ident (const char *s)
{
  const cpp_token *token = peek ();
  const char *t = get_ident ();
  if (strcmp (s, t) != 0)
    fatal_at (token, "expected '%s' got '%s'\n", s, t);
  return token;
}




const char *
parser::get_number ()
{
  const cpp_token *token = expect (CPP_NUMBER);
  return (const char *)token->val.str.text;
}



unsigned
parser::get_internal_capture_id ()
{
  unsigned newid = capture_ids->elements ();

  char id[13];
  bool existed;
  snprintf (id, sizeof (id), "__%u", newid);
  capture_ids->get_or_insert (xstrdup (id), &existed);
  if (existed)
    fatal ("reserved capture id '%s' already used", id);
  return newid;
}



void
parser::record_operlist (location_t loc, user_id *p)
{
  if (!oper_lists_set->add (p))
    {
      if (!oper_lists.is_empty ()
   && oper_lists[0]->substitutes.length () != p->substitutes.length ())
 fatal_at (loc, "User-defined operator list does not have the "
    "same number of entries as others used in the pattern");
      oper_lists.safe_push (p);
    }
}




id_base *
parser::parse_operation (unsigned char &opt_grp)
{
  const cpp_token *id_tok = peek ();
  char *alt_id = nullptr;
  const char *id = get_ident ();
  const cpp_token *token = peek ();
  opt_grp = 0;
  if (token->type == CPP_QUERY
      && !(token->flags & (1 << 0)))
    {
      if (!parsing_match_operand)
 fatal_at (id_tok, "conditional convert can only be used in "
    "match expression");
      if ((_sch_istable[(id[strlen (id) - 1]) & 0xff] & (unsigned short)(_sch_isdigit)))
 {
   opt_grp = id[strlen (id) - 1] - '0' + 1;
   alt_id = xstrdup (id);
   alt_id[strlen (id) - 1] = '\0';
   if (opt_grp == 1)
     fatal_at (id_tok, "use '%s?' here", alt_id);
 }
      else
 opt_grp = 1;
      eat_token (CPP_QUERY);
    }
  id_base *op = get_operator (alt_id ? alt_id : id);
  if (!op)
    fatal_at (id_tok, "unknown operator %s", alt_id ? alt_id : id);
  if (alt_id)
    free (alt_id);
  user_id *p = dyn_cast<user_id *> (op);
  if (p && p->is_oper_list)
    {
      if (active_fors.length() == 0)
 record_operlist (id_tok->src_loc, p);
      else
 fatal_at (id_tok, "operator-list %s cannot be expanded inside 'for'", id);
    }
  return op;
}




class operand *
parser::parse_capture (operand *op, bool require_existing)
{
  location_t src_loc = eat_token (CPP_ATSIGN)->src_loc;
  const cpp_token *token = peek ();
  const char *id = nullptr;
  bool value_match = false;

  if (token->type == CPP_ATSIGN
      && ! (token->flags & (1 << 0))
      && parsing_match_operand)
    {
      eat_token (CPP_ATSIGN);
      token = peek ();
      value_match = true;
    }
  if (token->type == CPP_NUMBER)
    id = get_number ();
  else if (token->type == CPP_NAME)
    id = get_ident ();
  else
    fatal_at (token, "expected number or identifier");
  unsigned next_id = capture_ids->elements ();
  bool existed;
  unsigned &num = capture_ids->get_or_insert (id, &existed);
  if (!existed)
    {
      if (require_existing)
 fatal_at (src_loc, "unknown capture id");
      num = next_id;
    }
  return new capture (src_loc, num, op, value_match);
}




class operand *
parser::parse_expr ()
{
  const cpp_token *token = peek ();
  unsigned char opt_grp;
  expr *e = new expr (parse_operation (opt_grp), token->src_loc);
  token = peek ();
  operand *op;
  bool is_commutative = false;
  bool force_capture = false;
  const char *expr_type = nullptr;

  if (!parsing_match_operand
      && token->type == CPP_NOT
      && !(token->flags & (1 << 0)))
    {
      if (!gimple)
 fatal_at (token, "forcing simplification to a leaf is not supported "
    "for GENERIC");
      eat_token (CPP_NOT);
      e->force_leaf = true;
    }

  if (token->type == CPP_COLON
      && !(token->flags & (1 << 0)))
    {
      eat_token (CPP_COLON);
      token = peek ();
      if (token->type == CPP_NAME
   && !(token->flags & (1 << 0)))
 {
   const char *s = get_ident ();
   if (!parsing_match_operand)
     expr_type = s;
   else
     {
       const char *sp = s;
       while (*sp)
  {
    if (*sp == 'c')
      {
        if (operator_id *o
       = dyn_cast<operator_id *> (e->operation))
   {
     if (!commutative_tree_code (o->code)
         && !comparison_code_p (o->code))
       fatal_at (token, "operation is not commutative");
   }
        else if (user_id *p = dyn_cast<user_id *> (e->operation))
   for (unsigned i = 0;
        i < p->substitutes.length (); ++i)
     {
       if (operator_id *q
      = dyn_cast<operator_id *> (p->substitutes[i]))
         {
    if (!commutative_tree_code (q->code)
        && !comparison_code_p (q->code))
      fatal_at (token, "operation %s is not "
         "commutative", q->id);
         }
     }
        is_commutative = true;
      }
    else if (*sp == 'C')
      is_commutative = true;
    else if (*sp == 's')
      {
        e->force_single_use = true;
        force_capture = true;
      }
          else
      fatal_at (token, "flag %c not recognized", *sp);
    sp++;
  }
     }
   token = peek ();
 }
      else
 fatal_at (token, "expected flag or type specifying identifier");
    }

  if (token->type == CPP_ATSIGN
      && !(token->flags & (1 << 0)))
    op = parse_capture (e, false);
  else if (force_capture)
    {
      unsigned num = get_internal_capture_id ();
      op = new capture (token->src_loc, num, e, false);
    }
  else
    op = e;
  do
    {
      token = peek ();
      if (token->type == CPP_CLOSE_PAREN)
 {
   if (e->operation->nargs != -1
       && e->operation->nargs != (int) e->ops.length ())
     fatal_at (token, "'%s' expects %u operands, not %u",
        e->operation->id, e->operation->nargs, e->ops.length ());
   if (is_commutative)
     {
       if (e->ops.length () == 2
    || commutative_op (e->operation) >= 0)
  e->is_commutative = true;
       else
  fatal_at (token, "only binary operators or functions with "
     "two arguments can be marked commutative, "
     "unless the operation is known to be inherently "
     "commutative");
     }
   e->expr_type = expr_type;
   if (opt_grp != 0)
     {
       if (e->ops.length () != 1)
  fatal_at (token, "only unary operations can be conditional");
       e->opt_grp = opt_grp;
     }
   return op;
 }
      else if (!(token->flags & (1 << 0)))
 fatal_at (token, "expected expression operand");

      e->append_op (parse_op ());
    }
  while (1);
}





c_expr *
parser::parse_c_expr (cpp_ttype start)
{
  const cpp_token *token;
  cpp_ttype end;
  unsigned opencnt;
  vec<cpp_token> code = vNULL;
  unsigned nr_stmts = 0;
  location_t loc = eat_token (start)->src_loc;
  if (start == CPP_OPEN_PAREN)
    end = CPP_CLOSE_PAREN;
  else if (start == CPP_OPEN_BRACE)
    end = CPP_CLOSE_BRACE;
  else
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c", 4425, __FUNCTION__));
  opencnt = 1;
  do
    {
      token = next ();


      if (token->type == start)
 opencnt++;
      else if (token->type == end
        && --opencnt == 0)
 break;
      else if (token->type == CPP_EOF)
 fatal_at (token, "unexpected end of file");


      if (token->type == CPP_SEMICOLON)
 nr_stmts++;


      if (token->type == CPP_NAME)
 {
   id_base *idb = get_operator ((const char *)((cpp_hashnode *) (token->val.node.node))
                                ->ident.str);
   user_id *p;
   if (idb && (p = dyn_cast<user_id *> (idb)) && p->is_oper_list)
     record_operlist (token->src_loc, p);
 }


      code.safe_push (*token);
    }
  while (1);
  return new c_expr (r, loc, code, nr_stmts, vNULL, capture_ids);
}





class operand *
parser::parse_op ()
{
  const cpp_token *token = peek ();
  class operand *op = nullptr;
  if (token->type == CPP_OPEN_PAREN)
    {
      eat_token (CPP_OPEN_PAREN);
      op = parse_expr ();
      eat_token (CPP_CLOSE_PAREN);
    }
  else if (token->type == CPP_OPEN_BRACE)
    {
      op = parse_c_expr (CPP_OPEN_BRACE);
    }
  else
    {

      if (token->type == CPP_NAME)
 {
   const char *id = get_ident ();
   id_base *opr = get_operator (id);
   if (!opr)
     fatal_at (token, "expected predicate name");
   if (operator_id *code1 = dyn_cast <operator_id *> (opr))
     {
       if (code1->nargs != 0)
  fatal_at (token, "using an operator with operands as predicate");


       op = new expr (opr, token->src_loc);
     }
   else if (user_id *code2 = dyn_cast <user_id *> (opr))
     {
       if (code2->nargs != 0)
  fatal_at (token, "using an operator with operands as predicate");


       op = new expr (opr, token->src_loc);
     }
   else if (predicate_id *p = dyn_cast <predicate_id *> (opr))
     op = new predicate (p, token->src_loc);
   else
     fatal_at (token, "using an unsupported operator as predicate");
   if (!parsing_match_operand)
     fatal_at (token, "predicates are only allowed in match expression");
   token = peek ();
   if (token->flags & (1 << 0))
     return op;
 }
      else if (token->type != CPP_COLON
        && token->type != CPP_ATSIGN)
 fatal_at (token, "expected expression or predicate");

      if (token->type == CPP_COLON)
 fatal_at (token, "not implemented: predicate on leaf operand");
      if (token->type == CPP_ATSIGN)
 op = parse_capture (op, !parsing_match_operand);
    }

  return op;
}




void
parser::push_simplify (simplify::simplify_kind kind,
         vec<simplify *>& simplifiers,
         operand *match, operand *result)
{

  if (!oper_lists.is_empty ())
    active_fors.safe_push (oper_lists);

  simplifiers.safe_push
    (new simplify (kind, last_id++, match, result,
     active_fors.copy (), capture_ids));

  if (!oper_lists.is_empty ())
    active_fors.pop ();
}







operand *
parser::parse_result (operand *result, predicate_id *matcher)
{
  const cpp_token *token = peek ();
  if (token->type != CPP_OPEN_PAREN)
    return parse_op ();

  eat_token (CPP_OPEN_PAREN);
  if (peek_ident ("if"))
    {
      eat_ident ("if");
      if_expr *ife = new if_expr (token->src_loc);
      ife->cond = parse_c_expr (CPP_OPEN_PAREN);
      if (peek ()->type == CPP_OPEN_PAREN)
 {
   ife->trueexpr = parse_result (result, matcher);
   if (peek ()->type == CPP_OPEN_PAREN)
     ife->falseexpr = parse_result (result, matcher);
   else if (peek ()->type != CPP_CLOSE_PAREN)
     ife->falseexpr = parse_op ();
 }
      else if (peek ()->type != CPP_CLOSE_PAREN)
 {
   ife->trueexpr = parse_op ();
   if (peek ()->type == CPP_OPEN_PAREN)
     ife->falseexpr = parse_result (result, matcher);
   else if (peek ()->type != CPP_CLOSE_PAREN)
     ife->falseexpr = parse_op ();
 }


      else
 {
   if (!matcher)
     fatal_at (peek (), "manual transform not implemented");
   ife->trueexpr = result;
 }
      eat_token (CPP_CLOSE_PAREN);
      return ife;
    }
  else if (peek_ident ("with"))
    {
      eat_ident ("with");
      with_expr *withe = new with_expr (token->src_loc);

      withe->with = parse_c_expr (CPP_OPEN_BRACE);
      withe->with->nr_stmts = 0;
      withe->subexpr = parse_result (result, matcher);
      eat_token (CPP_CLOSE_PAREN);
      return withe;
    }
  else if (peek_ident ("switch"))
    {
      token = eat_ident ("switch");
      location_t ifloc = eat_token (CPP_OPEN_PAREN)->src_loc;
      eat_ident ("if");
      if_expr *ife = new if_expr (ifloc);
      operand *res = ife;
      ife->cond = parse_c_expr (CPP_OPEN_PAREN);
      if (peek ()->type == CPP_OPEN_PAREN)
 ife->trueexpr = parse_result (result, matcher);
      else
 ife->trueexpr = parse_op ();
      eat_token (CPP_CLOSE_PAREN);
      if (peek ()->type != CPP_OPEN_PAREN
   || !peek_ident ("if", 2))
 fatal_at (token, "switch can be implemented with a single if");
      while (peek ()->type != CPP_CLOSE_PAREN)
 {
   if (peek ()->type == CPP_OPEN_PAREN)
     {
       if (peek_ident ("if", 2))
  {
    ifloc = eat_token (CPP_OPEN_PAREN)->src_loc;
    eat_ident ("if");
    ife->falseexpr = new if_expr (ifloc);
    ife = as_a <if_expr *> (ife->falseexpr);
    ife->cond = parse_c_expr (CPP_OPEN_PAREN);
    if (peek ()->type == CPP_OPEN_PAREN)
      ife->trueexpr = parse_result (result, matcher);
    else
      ife->trueexpr = parse_op ();
    eat_token (CPP_CLOSE_PAREN);
  }
       else
  {

    ife->falseexpr = parse_result (result, matcher);
    eat_token (CPP_CLOSE_PAREN);
    return res;
  }
     }
   else
     {

       ife->falseexpr = parse_op ();
       eat_token (CPP_CLOSE_PAREN);
       return res;
     }
 }
      eat_token (CPP_CLOSE_PAREN);
      return res;
    }
  else
    {
      operand *op = result;
      if (!matcher)
 op = parse_expr ();
      eat_token (CPP_CLOSE_PAREN);
      return op;
    }
}







void
parser::parse_simplify (simplify::simplify_kind kind,
   vec<simplify *>& simplifiers, predicate_id *matcher,
   operand *result)
{

  if (!capture_ids)
    capture_ids = new cid_map_t;

  hash_set <user_id *> olist;
  oper_lists_set = &olist;
  oper_lists = vNULL;

  const cpp_token *loc = peek ();
  parsing_match_operand = true;
  class operand *match = parse_op ();
  finish_match_operand (match);
  parsing_match_operand = false;
  if (match->type == operand::OP_CAPTURE && !matcher)
    fatal_at (loc, "outermost expression cannot be captured");
  if (match->type == operand::OP_EXPR
      && is_a <predicate_id *> (as_a <expr *> (match)->operation))
    fatal_at (loc, "outermost expression cannot be a predicate");



  if_expr *active_if = nullptr;
  for (int i = active_ifs.length (); i > 0; --i)
    {
      if_expr *ifc = new if_expr (active_ifs[i-1]->location);
      ifc->cond = active_ifs[i-1];
      ifc->trueexpr = active_if;
      active_if = ifc;
    }
  if_expr *outermost_if = active_if;
  while (active_if && active_if->trueexpr)
    active_if = as_a <if_expr *> (active_if->trueexpr);

  const cpp_token *token = peek ();



  if (token->type == CPP_CLOSE_PAREN)
    {
      if (!matcher)
 fatal_at (token, "expected transform expression");
      if (active_if)
 {
   active_if->trueexpr = result;
   result = outermost_if;
 }
      push_simplify (kind, simplifiers, match, result);
      return;
    }

  operand *tem = parse_result (result, matcher);
  if (active_if)
    {
      active_if->trueexpr = tem;
      result = outermost_if;
    }
  else
    result = tem;

  push_simplify (kind, simplifiers, match, result);
}







void
parser::parse_for (location_t)
{
  auto_vec<const cpp_token *> user_id_tokens;
  vec<user_id *> user_ids = vNULL;
  const cpp_token *token;
  unsigned min_n_opers = 0, max_n_opers = 0;

  while (1)
    {
      token = peek ();
      if (token->type != CPP_NAME)
 break;


      const char *id = get_ident ();
      if (get_operator (id, true) != nullptr)
 fatal_at (token, "operator already defined");
      user_id *op = new user_id (id);
      id_base **slot = operators->find_slot_with_hash (op, op->hashval, INSERT);
      *slot = op;
      user_ids.safe_push (op);
      user_id_tokens.safe_push (token);

      eat_token (CPP_OPEN_PAREN);

      int arity = -1;
      while ((token = peek_ident ()) != 0)
 {
   const char *oper = get_ident ();
   id_base *idb = get_operator (oper, true);
   if (idb == nullptr)
     fatal_at (token, "no such operator '%s'", oper);

   if (arity == -1)
     arity = idb->nargs;
   else if (idb->nargs == -1)
     ;
   else if (idb->nargs != arity)
     fatal_at (token, "operator '%s' with arity %d does not match "
        "others with arity %d", oper, idb->nargs, arity);

   user_id *p = dyn_cast<user_id *> (idb);
   if (p)
     {
       if (p->is_oper_list)
  op->substitutes.safe_splice (p->substitutes);
       else
  fatal_at (token, "iterator cannot be used as operator-list");
     }
   else
     op->substitutes.safe_push (idb);
 }
      op->nargs = arity;
      token = expect (CPP_CLOSE_PAREN);

      unsigned nsubstitutes = op->substitutes.length ();
      if (nsubstitutes == 0)
 fatal_at (token, "A user-defined operator must have at least "
    "one substitution");
      if (max_n_opers == 0)
 {
   min_n_opers = nsubstitutes;
   max_n_opers = nsubstitutes;
 }
      else
 {
   if (nsubstitutes % min_n_opers != 0
       && min_n_opers % nsubstitutes != 0)
     fatal_at (token, "All user-defined identifiers must have a "
        "multiple number of operator substitutions of the "
        "smallest number of substitutions");
   if (nsubstitutes < min_n_opers)
     min_n_opers = nsubstitutes;
   else if (nsubstitutes > max_n_opers)
     max_n_opers = nsubstitutes;
 }
    }

  unsigned n_ids = user_ids.length ();
  if (n_ids == 0)
    fatal_at (token, "for requires at least one user-defined identifier");

  token = peek ();
  if (token->type == CPP_CLOSE_PAREN)
    fatal_at (token, "no pattern defined in for");

  active_fors.safe_push (user_ids);
  while (1)
    {
      token = peek ();
      if (token->type == CPP_CLOSE_PAREN)
  break;
      parse_pattern ();
    }
  active_fors.pop ();


  for (unsigned i = 0; i < user_ids.length (); ++i)
    {
      if (!user_ids[i]->used)
 warning_at (user_id_tokens[i],
      "operator %s defined but not used", user_ids[i]->id);
      operators->remove_elt (user_ids[i]);
    }
}




void
parser::parse_operator_list (location_t)
{
  const cpp_token *token = peek ();
  const char *id = get_ident ();

  if (get_operator (id, true) != 0)
    fatal_at (token, "operator %s already defined", id);

  user_id *op = new user_id (id, true);
  int arity = -1;

  while ((token = peek_ident ()) != 0)
    {
      token = peek ();
      const char *oper = get_ident ();
      id_base *idb = get_operator (oper, true);

      if (idb == 0)
 fatal_at (token, "no such operator '%s'", oper);

      if (arity == -1)
 arity = idb->nargs;
      else if (idb->nargs == -1)
 ;
      else if (arity != idb->nargs)
 fatal_at (token, "operator '%s' with arity %d does not match "
    "others with arity %d", oper, idb->nargs, arity);


      if (user_id *p = dyn_cast<user_id *> (idb))
 op->substitutes.safe_splice (p->substitutes);
      else
 op->substitutes.safe_push (idb);
    }


  token = peek();
  if (token->type != CPP_CLOSE_PAREN)
    fatal_at (token, "expected identifier got %s", cpp_type2name (token->type, 0));

  if (op->substitutes.length () == 0)
    fatal_at (token, "operator-list cannot be empty");

  op->nargs = arity;
  id_base **slot = operators->find_slot_with_hash (op, op->hashval, INSERT);
  *slot = op;
}




void
parser::parse_if (location_t)
{
  c_expr *ifexpr = parse_c_expr (CPP_OPEN_PAREN);

  const cpp_token *token = peek ();
  if (token->type == CPP_CLOSE_PAREN)
    fatal_at (token, "no pattern defined in if");

  active_ifs.safe_push (ifexpr);
  while (1)
    {
      token = peek ();
      if (token->type == CPP_CLOSE_PAREN)
 break;

      parse_pattern ();
    }
  active_ifs.pop ();
}




void
parser::parse_predicates (location_t)
{
  do
    {
      const cpp_token *token = peek ();
      if (token->type != CPP_NAME)
 break;

      add_predicate (get_ident ());
    }
  while (1);
}




void
parser::parse_pattern ()
{

  eat_token (CPP_OPEN_PAREN);
  const cpp_token *token = peek ();
  const char *id = get_ident ();
  if (strcmp (id, "simplify") == 0)
    {
      parse_simplify (simplify::SIMPLIFY, simplifiers, nullptr, nullptr);
      capture_ids = nullptr;
    }
  else if (strcmp (id, "match") == 0)
    {
      bool with_args = false;
      location_t e_loc = peek ()->src_loc;
      if (peek ()->type == CPP_OPEN_PAREN)
 {
   eat_token (CPP_OPEN_PAREN);
   with_args = true;
 }
      const char *name = get_ident ();
      id_base *id1 = get_operator (name);
      predicate_id *p;
      if (!id1)
 {
   p = add_predicate (name);
   user_predicates.safe_push (p);
 }
      else if ((p = dyn_cast <predicate_id *> (id1)))
 ;
      else
 fatal_at (token, "cannot add a match to a non-predicate ID");

      expr *e = nullptr;
      if (with_args)
 {
   capture_ids = new cid_map_t;
   e = new expr (p, e_loc);
   while (peek ()->type == CPP_ATSIGN)
     e->append_op (parse_capture (nullptr, false));
   eat_token (CPP_CLOSE_PAREN);
 }
      if (p->nargs != -1
   && ((e && e->ops.length () != (unsigned)p->nargs)
       || (!e && p->nargs != 0)))
 fatal_at (token, "non-matching number of match operands");
      p->nargs = e ? e->ops.length () : 0;
      parse_simplify (simplify::MATCH, p->matchers, p, e);
      capture_ids = nullptr;
    }
  else if (strcmp (id, "for") == 0)
    parse_for (token->src_loc);
  else if (strcmp (id, "if") == 0)
    parse_if (token->src_loc);
  else if (strcmp (id, "define_predicates") == 0)
    {
      if (active_ifs.length () > 0
   || active_fors.length () > 0)
 fatal_at (token, "define_predicates inside if or for is not supported");
      parse_predicates (token->src_loc);
    }
  else if (strcmp (id, "define_operator_list") == 0)
    {
      if (active_ifs.length () > 0
   || active_fors.length () > 0)
 fatal_at (token, "operator-list inside if or for is not supported");
      parse_operator_list (token->src_loc);
    }
  else
    fatal_at (token, "expected %s'simplify', 'match', 'for' or 'if'",
       active_ifs.length () == 0 && active_fors.length () == 0
       ? "'define_predicates', " : "");

  eat_token (CPP_CLOSE_PAREN);
}




static void
walk_captures (operand *op, vec<vec<capture *> > cpts)
{
  if (! op)
    return;

  if (capture *c = dyn_cast <capture *> (op))
    {
      cpts[c->where].safe_push (c);
      walk_captures (c->what, cpts);
    }
  else if (expr *e = dyn_cast <expr *> (op))
    for (unsigned i = 0; i < e->ops.length (); ++i)
      walk_captures (e->ops[i], cpts);
}



void
parser::finish_match_operand (operand *op)
{


  auto_vec<vec<capture *> > cpts;
  cpts.safe_grow_cleared (capture_ids->elements ());
  walk_captures (op, cpts);
  for (unsigned i = 0; i < cpts.length (); ++i)
    {
      capture *value_match = nullptr;
      for (unsigned j = 0; j < cpts[i].length (); ++j)
 {
   if (cpts[i][j]->value_match)
     {
       if (value_match)
  fatal_at (cpts[i][j]->location, "duplicate @@");
       value_match = cpts[i][j];
     }
 }
      if (cpts[i].length () == 1 && value_match)
 fatal_at (value_match->location, "@@ without a matching capture");
      if (value_match)
 {



   value_match->what = new capture (value_match->location,
        value_match->where,
        value_match->what, false);

   unsigned newid = get_internal_capture_id ();
   for (unsigned j = 0; j < cpts[i].length (); ++j)
     {
       cpts[i][j]->where = newid;
       cpts[i][j]->value_match = true;
     }
 }
      cpts[i].release ();
    }
}



parser::parser (cpp_reader *r_, bool gimple_)
{
  r = r_;
  gimple = gimple_;
  active_ifs = vNULL;
  active_fors = vNULL;
  simplifiers = vNULL;
  oper_lists_set = nullptr;
  oper_lists = vNULL;
  capture_ids = nullptr;
  user_predicates = vNULL;
  parsing_match_operand = false;
  last_id = 0;

  const cpp_token *token = next ();
  while (token->type != CPP_EOF)
    {
      _cpp_backup_tokens (r, 1);
      parse_pattern ();
      token = next ();
    }
}




static size_t
round_alloc_size (size_t s)
{
  return s;
}





int
main (int argc, char **argv)
{
  cpp_reader *r;

  progname = "genmatch";

  if (argc < 2)
    return 1;

  bool gimple = true;
  char *input = argv[argc-1];
  for (int i = 1; i < argc - 1; ++i)
    {
      if (strcmp (argv[i], "--gimple") == 0)
 gimple = true;
      else if (strcmp (argv[i], "--generic") == 0)
 gimple = false;
      else if (strcmp (argv[i], "-v") == 0)
 verbose = 1;
      else if (strcmp (argv[i], "-vv") == 0)
 verbose = 2;
      else
 {
   fprintf (
# 5151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
           stderr
# 5151 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                 , "Usage: genmatch "
     "[--gimple] [--generic] [-v[v]] input\n");
   return 1;
 }
    }

  line_table = ((class line_maps *) xcalloc (1, sizeof (class line_maps)));
  linemap_init (line_table, 0);
  line_table->reallocator = xrealloc;
  line_table->round_alloc_size = round_alloc_size;

  r = cpp_create_reader (CLK_GNUC99, nullptr, line_table);
  cpp_callbacks *cb = cpp_get_callbacks (r);
  cb->diagnostic = diagnostic_cb;


  cpp_dir *dir = ((cpp_dir *) xcalloc (1, sizeof (cpp_dir)));
  dir->name = getpwd ();
  if (!dir->name)
    dir->name = (__extension__ ({ const char *const libiberty_optr = ("."); const unsigned long libiberty_len = strlen (libiberty_optr) + 1; char *const libiberty_nptr = (char *) __builtin_alloca(libiberty_len); (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len); }));
  cpp_set_include_chains (r, dir, nullptr, false);

  if (!cpp_read_main_file (r, input))
    return 1;
  cpp_define (r, gimple ? "GIMPLE=1": "GENERIC=1");
  cpp_define (r, gimple ? "GENERIC=0": "GIMPLE=0");

  null_id = new id_base (id_base::NULL_ID, "null");


  operators = new hash_table<id_base> (1024);



# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def" 1
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (ERROR_MARK, "ERROR_MARK", "tcc_exceptional", 0);





add_operator (IDENTIFIER_NODE, "IDENTIFIER_NODE", "tcc_exceptional", 0);






add_operator (TREE_LIST, "TREE_LIST", "tcc_exceptional", 0);


add_operator (TREE_VEC, "TREE_VEC", "tcc_exceptional", 0);
# 75 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (BLOCK, "BLOCK", "tcc_exceptional", 0);
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (OFFSET_TYPE, "OFFSET_TYPE", "tcc_type", 0);
# 135 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (ENUMERAL_TYPE, "ENUMERAL_TYPE", "tcc_type", 0);



add_operator (BOOLEAN_TYPE, "BOOLEAN_TYPE", "tcc_type", 0);





add_operator (INTEGER_TYPE, "INTEGER_TYPE", "tcc_type", 0);



add_operator (REAL_TYPE, "REAL_TYPE", "tcc_type", 0);
# 158 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (POINTER_TYPE, "POINTER_TYPE", "tcc_type", 0);



add_operator (REFERENCE_TYPE, "REFERENCE_TYPE", "tcc_type", 0);


add_operator (NULLPTR_TYPE, "NULLPTR_TYPE", "tcc_type", 0);




add_operator (FIXED_POINT_TYPE, "FIXED_POINT_TYPE", "tcc_type", 0);
# 179 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (COMPLEX_TYPE, "COMPLEX_TYPE", "tcc_type", 0);




add_operator (VECTOR_TYPE, "VECTOR_TYPE", "tcc_type", 0);
# 200 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (ARRAY_TYPE, "ARRAY_TYPE", "tcc_type", 0);
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (RECORD_TYPE, "RECORD_TYPE", "tcc_type", 0);





add_operator (UNION_TYPE, "UNION_TYPE", "tcc_type", 0);





add_operator (QUAL_UNION_TYPE, "QUAL_UNION_TYPE", "tcc_type", 0);






add_operator (VOID_TYPE, "VOID_TYPE", "tcc_type", 0);
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (FUNCTION_TYPE, "FUNCTION_TYPE", "tcc_type", 0);






add_operator (METHOD_TYPE, "METHOD_TYPE", "tcc_type", 0);





add_operator (LANG_TYPE, "LANG_TYPE", "tcc_type", 0);





add_operator (VOID_CST, "VOID_CST", "tcc_constant", 0);
# 278 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (INTEGER_CST, "INTEGER_CST", "tcc_constant", 0);


add_operator (POLY_INT_CST, "POLY_INT_CST", "tcc_constant", 0);


add_operator (REAL_CST, "REAL_CST", "tcc_constant", 0);


add_operator (FIXED_CST, "FIXED_CST", "tcc_constant", 0);



add_operator (COMPLEX_CST, "COMPLEX_CST", "tcc_constant", 0);


add_operator (VECTOR_CST, "VECTOR_CST", "tcc_constant", 0);


add_operator (STRING_CST, "STRING_CST", "tcc_constant", 0);
# 357 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (FUNCTION_DECL, "FUNCTION_DECL", "tcc_declaration", 0);
add_operator (LABEL_DECL, "LABEL_DECL", "tcc_declaration", 0);




add_operator (FIELD_DECL, "FIELD_DECL", "tcc_declaration", 0);
add_operator (VAR_DECL, "VAR_DECL", "tcc_declaration", 0);
add_operator (CONST_DECL, "CONST_DECL", "tcc_declaration", 0);
add_operator (PARM_DECL, "PARM_DECL", "tcc_declaration", 0);
add_operator (TYPE_DECL, "TYPE_DECL", "tcc_declaration", 0);
add_operator (RESULT_DECL, "RESULT_DECL", "tcc_declaration", 0);



add_operator (DEBUG_EXPR_DECL, "DEBUG_EXPR_DECL", "tcc_declaration", 0);


add_operator (DEBUG_BEGIN_STMT, "DEBUG_BEGIN_STMT", "tcc_statement", 0);



add_operator (NAMESPACE_DECL, "NAMESPACE_DECL", "tcc_declaration", 0);
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (IMPORTED_DECL, "IMPORTED_DECL", "tcc_declaration", 0);
# 400 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (NAMELIST_DECL, "NAMELIST_DECL", "tcc_declaration", 0);



add_operator (TRANSLATION_UNIT_DECL, "TRANSLATION_UNIT_DECL", "tcc_declaration", 0);
# 417 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (COMPONENT_REF, "COMPONENT_REF", "tcc_reference", 3);
# 427 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (BIT_FIELD_REF, "BIT_FIELD_REF", "tcc_reference", 3);






add_operator (ARRAY_REF, "ARRAY_REF", "tcc_reference", 4);




add_operator (ARRAY_RANGE_REF, "ARRAY_RANGE_REF", "tcc_reference", 4);



add_operator (REALPART_EXPR, "REALPART_EXPR", "tcc_reference", 1);
add_operator (IMAGPART_EXPR, "IMAGPART_EXPR", "tcc_reference", 1);
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (VIEW_CONVERT_EXPR, "VIEW_CONVERT_EXPR", "tcc_reference", 1);


add_operator (INDIRECT_REF, "INDIRECT_REF", "tcc_reference", 1);
# 468 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (OBJ_TYPE_REF, "OBJ_TYPE_REF", "tcc_expression", 3);
# 487 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (CONSTRUCTOR, "CONSTRUCTOR", "tcc_exceptional", 0);
# 497 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (COMPOUND_EXPR, "COMPOUND_EXPR", "tcc_expression", 2);


add_operator (MODIFY_EXPR, "MODIFY_EXPR", "tcc_expression", 2);




add_operator (INIT_EXPR, "INIT_EXPR", "tcc_expression", 2);







add_operator (TARGET_EXPR, "TARGET_EXPR", "tcc_expression", 4);
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (COND_EXPR, "COND_EXPR", "tcc_expression", 3);


add_operator (VEC_DUPLICATE_EXPR, "VEC_DUPLICATE_EXPR", "tcc_unary", 1);
# 540 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (VEC_SERIES_EXPR, "VEC_SERIES_EXPR", "tcc_binary", 2);
# 552 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (VEC_COND_EXPR, "VEC_COND_EXPR", "tcc_expression", 3);
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (VEC_PERM_EXPR, "VEC_PERM_EXPR", "tcc_expression", 3);
# 589 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (BIND_EXPR, "BIND_EXPR", "tcc_expression", 3);







add_operator (CALL_EXPR, "CALL_EXPR", "tcc_vl_exp", 3);






add_operator (WITH_CLEANUP_EXPR, "WITH_CLEANUP_EXPR", "tcc_expression", 1);
# 621 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (CLEANUP_POINT_EXPR, "CLEANUP_POINT_EXPR", "tcc_expression", 1);
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (PLACEHOLDER_EXPR, "PLACEHOLDER_EXPR", "tcc_exceptional", 0);


add_operator (PLUS_EXPR, "PLUS_EXPR", "tcc_binary", 2);
add_operator (MINUS_EXPR, "MINUS_EXPR", "tcc_binary", 2);
add_operator (MULT_EXPR, "MULT_EXPR", "tcc_binary", 2);



add_operator (POINTER_PLUS_EXPR, "POINTER_PLUS_EXPR", "tcc_binary", 2);







add_operator (POINTER_DIFF_EXPR, "POINTER_DIFF_EXPR", "tcc_binary", 2);



add_operator (MULT_HIGHPART_EXPR, "MULT_HIGHPART_EXPR", "tcc_binary", 2);


add_operator (TRUNC_DIV_EXPR, "TRUNC_DIV_EXPR", "tcc_binary", 2);


add_operator (CEIL_DIV_EXPR, "CEIL_DIV_EXPR", "tcc_binary", 2);


add_operator (FLOOR_DIV_EXPR, "FLOOR_DIV_EXPR", "tcc_binary", 2);


add_operator (ROUND_DIV_EXPR, "ROUND_DIV_EXPR", "tcc_binary", 2);




add_operator (TRUNC_MOD_EXPR, "TRUNC_MOD_EXPR", "tcc_binary", 2);


add_operator (CEIL_MOD_EXPR, "CEIL_MOD_EXPR", "tcc_binary", 2);


add_operator (FLOOR_MOD_EXPR, "FLOOR_MOD_EXPR", "tcc_binary", 2);


add_operator (ROUND_MOD_EXPR, "ROUND_MOD_EXPR", "tcc_binary", 2);


add_operator (RDIV_EXPR, "RDIV_EXPR", "tcc_binary", 2);



add_operator (EXACT_DIV_EXPR, "EXACT_DIV_EXPR", "tcc_binary", 2);


add_operator (FIX_TRUNC_EXPR, "FIX_TRUNC_EXPR", "tcc_unary", 1);


add_operator (FLOAT_EXPR, "FLOAT_EXPR", "tcc_unary", 1);


add_operator (NEGATE_EXPR, "NEGATE_EXPR", "tcc_unary", 1);




add_operator (MIN_EXPR, "MIN_EXPR", "tcc_binary", 2);
add_operator (MAX_EXPR, "MAX_EXPR", "tcc_binary", 2);





add_operator (ABS_EXPR, "ABS_EXPR", "tcc_unary", 1);




add_operator (ABSU_EXPR, "ABSU_EXPR", "tcc_unary", 1);
# 768 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (LSHIFT_EXPR, "LSHIFT_EXPR", "tcc_binary", 2);
add_operator (RSHIFT_EXPR, "RSHIFT_EXPR", "tcc_binary", 2);
add_operator (LROTATE_EXPR, "LROTATE_EXPR", "tcc_binary", 2);
add_operator (RROTATE_EXPR, "RROTATE_EXPR", "tcc_binary", 2);


add_operator (BIT_IOR_EXPR, "BIT_IOR_EXPR", "tcc_binary", 2);
add_operator (BIT_XOR_EXPR, "BIT_XOR_EXPR", "tcc_binary", 2);
add_operator (BIT_AND_EXPR, "BIT_AND_EXPR", "tcc_binary", 2);
add_operator (BIT_NOT_EXPR, "BIT_NOT_EXPR", "tcc_unary", 1);
# 788 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (TRUTH_ANDIF_EXPR, "TRUTH_ANDIF_EXPR", "tcc_expression", 2);
add_operator (TRUTH_ORIF_EXPR, "TRUTH_ORIF_EXPR", "tcc_expression", 2);
add_operator (TRUTH_AND_EXPR, "TRUTH_AND_EXPR", "tcc_expression", 2);
add_operator (TRUTH_OR_EXPR, "TRUTH_OR_EXPR", "tcc_expression", 2);
add_operator (TRUTH_XOR_EXPR, "TRUTH_XOR_EXPR", "tcc_expression", 2);
add_operator (TRUTH_NOT_EXPR, "TRUTH_NOT_EXPR", "tcc_expression", 1);
# 807 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (LT_EXPR, "LT_EXPR", "tcc_comparison", 2);
add_operator (LE_EXPR, "LE_EXPR", "tcc_comparison", 2);
add_operator (GT_EXPR, "GT_EXPR", "tcc_comparison", 2);
add_operator (GE_EXPR, "GE_EXPR", "tcc_comparison", 2);
add_operator (LTGT_EXPR, "LTGT_EXPR", "tcc_comparison", 2);
add_operator (EQ_EXPR, "EQ_EXPR", "tcc_comparison", 2);
add_operator (NE_EXPR, "NE_EXPR", "tcc_comparison", 2);


add_operator (UNORDERED_EXPR, "UNORDERED_EXPR", "tcc_comparison", 2);
add_operator (ORDERED_EXPR, "ORDERED_EXPR", "tcc_comparison", 2);


add_operator (UNLT_EXPR, "UNLT_EXPR", "tcc_comparison", 2);
add_operator (UNLE_EXPR, "UNLE_EXPR", "tcc_comparison", 2);
add_operator (UNGT_EXPR, "UNGT_EXPR", "tcc_comparison", 2);
add_operator (UNGE_EXPR, "UNGE_EXPR", "tcc_comparison", 2);
add_operator (UNEQ_EXPR, "UNEQ_EXPR", "tcc_comparison", 2);

add_operator (RANGE_EXPR, "RANGE_EXPR", "tcc_binary", 2);



add_operator (PAREN_EXPR, "PAREN_EXPR", "tcc_unary", 1);




add_operator (CONVERT_EXPR, "CONVERT_EXPR", "tcc_unary", 1);



add_operator (ADDR_SPACE_CONVERT_EXPR, "ADDR_SPACE_CONVERT_EXPR", "tcc_unary", 1);




add_operator (FIXED_CONVERT_EXPR, "FIXED_CONVERT_EXPR", "tcc_unary", 1);


add_operator (NOP_EXPR, "NOP_EXPR", "tcc_unary", 1);


add_operator (NON_LVALUE_EXPR, "NON_LVALUE_EXPR", "tcc_unary", 1);






add_operator (COMPOUND_LITERAL_EXPR, "COMPOUND_LITERAL_EXPR", "tcc_expression", 1);




add_operator (SAVE_EXPR, "SAVE_EXPR", "tcc_expression", 1);



add_operator (ADDR_EXPR, "ADDR_EXPR", "tcc_expression", 1);



add_operator (FDESC_EXPR, "FDESC_EXPR", "tcc_expression", 2);
# 885 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (BIT_INSERT_EXPR, "BIT_INSERT_EXPR", "tcc_expression", 3);



add_operator (COMPLEX_EXPR, "COMPLEX_EXPR", "tcc_binary", 2);


add_operator (CONJ_EXPR, "CONJ_EXPR", "tcc_unary", 1);




add_operator (PREDECREMENT_EXPR, "PREDECREMENT_EXPR", "tcc_expression", 2);
add_operator (PREINCREMENT_EXPR, "PREINCREMENT_EXPR", "tcc_expression", 2);
add_operator (POSTDECREMENT_EXPR, "POSTDECREMENT_EXPR", "tcc_expression", 2);
add_operator (POSTINCREMENT_EXPR, "POSTINCREMENT_EXPR", "tcc_expression", 2);


add_operator (VA_ARG_EXPR, "VA_ARG_EXPR", "tcc_expression", 1);






add_operator (TRY_CATCH_EXPR, "TRY_CATCH_EXPR", "tcc_statement", 2);




add_operator (TRY_FINALLY_EXPR, "TRY_FINALLY_EXPR", "tcc_statement", 2);






add_operator (EH_ELSE_EXPR, "EH_ELSE_EXPR", "tcc_statement", 2);





add_operator (DECL_EXPR, "DECL_EXPR", "tcc_statement", 1);




add_operator (LABEL_EXPR, "LABEL_EXPR", "tcc_statement", 1);



add_operator (GOTO_EXPR, "GOTO_EXPR", "tcc_statement", 1);






add_operator (RETURN_EXPR, "RETURN_EXPR", "tcc_statement", 1);



add_operator (EXIT_EXPR, "EXIT_EXPR", "tcc_statement", 1);




add_operator (LOOP_EXPR, "LOOP_EXPR", "tcc_statement", 1);
# 965 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (SWITCH_EXPR, "SWITCH_EXPR", "tcc_statement", 2);
# 977 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (CASE_LABEL_EXPR, "CASE_LABEL_EXPR", "tcc_statement", 4);






add_operator (ASM_EXPR, "ASM_EXPR", "tcc_statement", 5);




add_operator (SSA_NAME, "SSA_NAME", "tcc_exceptional", 0);



add_operator (CATCH_EXPR, "CATCH_EXPR", "tcc_statement", 2);




add_operator (EH_FILTER_EXPR, "EH_FILTER_EXPR", "tcc_statement", 2);



add_operator (SCEV_KNOWN, "SCEV_KNOWN", "tcc_expression", 0);



add_operator (SCEV_NOT_KNOWN, "SCEV_NOT_KNOWN", "tcc_expression", 0);



add_operator (POLYNOMIAL_CHREC, "POLYNOMIAL_CHREC", "tcc_expression", 2);



add_operator (STATEMENT_LIST, "STATEMENT_LIST", "tcc_exceptional", 0);
# 1033 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (ASSERT_EXPR, "ASSERT_EXPR", "tcc_expression", 2);



add_operator (TREE_BINFO, "TREE_BINFO", "tcc_exceptional", 0);






add_operator (WITH_SIZE_EXPR, "WITH_SIZE_EXPR", "tcc_expression", 2);
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (REALIGN_LOAD_EXPR, "REALIGN_LOAD_EXPR", "tcc_expression", 3);
# 1071 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (TARGET_MEM_REF, "TARGET_MEM_REF", "tcc_reference", 5);
# 1081 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (MEM_REF, "MEM_REF", "tcc_reference", 2);
# 1090 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (OACC_PARALLEL, "OACC_PARALLEL", "tcc_statement", 2);





add_operator (OACC_KERNELS, "OACC_KERNELS", "tcc_statement", 2);





add_operator (OACC_SERIAL, "OACC_SERIAL", "tcc_statement", 2);





add_operator (OACC_DATA, "OACC_DATA", "tcc_statement", 2);





add_operator (OACC_HOST_DATA, "OACC_HOST_DATA", "tcc_statement", 2);





add_operator (OMP_PARALLEL, "OMP_PARALLEL", "tcc_statement", 2);





add_operator (OMP_TASK, "OMP_TASK", "tcc_statement", 2);
# 1152 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (OMP_FOR, "OMP_FOR", "tcc_statement", 7);



add_operator (OMP_SIMD, "OMP_SIMD", "tcc_statement", 7);



add_operator (OMP_DISTRIBUTE, "OMP_DISTRIBUTE", "tcc_statement", 7);



add_operator (OMP_TASKLOOP, "OMP_TASKLOOP", "tcc_statement", 7);



add_operator (OMP_LOOP, "OMP_LOOP", "tcc_statement", 7);



add_operator (OACC_LOOP, "OACC_LOOP", "tcc_statement", 7);




add_operator (OMP_TEAMS, "OMP_TEAMS", "tcc_statement", 2);




add_operator (OMP_TARGET_DATA, "OMP_TARGET_DATA", "tcc_statement", 2);




add_operator (OMP_TARGET, "OMP_TARGET", "tcc_statement", 2);




add_operator (OMP_SECTIONS, "OMP_SECTIONS", "tcc_statement", 2);




add_operator (OMP_ORDERED, "OMP_ORDERED", "tcc_statement", 2);





add_operator (OMP_CRITICAL, "OMP_CRITICAL", "tcc_statement", 3);




add_operator (OMP_SINGLE, "OMP_SINGLE", "tcc_statement", 2);




add_operator (OMP_TASKGROUP, "OMP_TASKGROUP", "tcc_statement", 2);




add_operator (OMP_SCAN, "OMP_SCAN", "tcc_statement", 2);



add_operator (OMP_SECTION, "OMP_SECTION", "tcc_statement", 1);



add_operator (OMP_MASTER, "OMP_MASTER", "tcc_statement", 1);




add_operator (OACC_CACHE, "OACC_CACHE", "tcc_statement", 1);



add_operator (OACC_DECLARE, "OACC_DECLARE", "tcc_statement", 1);



add_operator (OACC_ENTER_DATA, "OACC_ENTER_DATA", "tcc_statement", 1);



add_operator (OACC_EXIT_DATA, "OACC_EXIT_DATA", "tcc_statement", 1);



add_operator (OACC_UPDATE, "OACC_UPDATE", "tcc_statement", 1);



add_operator (OMP_TARGET_UPDATE, "OMP_TARGET_UPDATE", "tcc_statement", 1);



add_operator (OMP_TARGET_ENTER_DATA, "OMP_TARGET_ENTER_DATA", "tcc_statement", 1);



add_operator (OMP_TARGET_EXIT_DATA, "OMP_TARGET_EXIT_DATA", "tcc_statement", 1);
# 1270 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (OMP_ATOMIC, "OMP_ATOMIC", "tcc_statement", 2);




add_operator (OMP_ATOMIC_READ, "OMP_ATOMIC_READ", "tcc_statement", 1);
# 1285 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (OMP_ATOMIC_CAPTURE_OLD, "OMP_ATOMIC_CAPTURE_OLD", "tcc_statement", 2);
add_operator (OMP_ATOMIC_CAPTURE_NEW, "OMP_ATOMIC_CAPTURE_NEW", "tcc_statement", 2);


add_operator (OMP_CLAUSE, "OMP_CLAUSE", "tcc_exceptional", 0);



add_operator (TRANSACTION_EXPR, "TRANSACTION_EXPR", "tcc_expression", 1);
# 1304 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (DOT_PROD_EXPR, "DOT_PROD_EXPR", "tcc_expression", 3);
# 1313 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (WIDEN_SUM_EXPR, "WIDEN_SUM_EXPR", "tcc_binary", 2);
# 1329 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (SAD_EXPR, "SAD_EXPR", "tcc_expression", 3);






add_operator (WIDEN_MULT_EXPR, "WIDEN_MULT_EXPR", "tcc_binary", 2);
# 1345 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (WIDEN_MULT_PLUS_EXPR, "WIDEN_MULT_PLUS_EXPR", "tcc_expression", 3);


add_operator (WIDEN_MULT_MINUS_EXPR, "WIDEN_MULT_MINUS_EXPR", "tcc_expression", 3);
# 1361 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (WIDEN_LSHIFT_EXPR, "WIDEN_LSHIFT_EXPR", "tcc_binary", 2);






add_operator (VEC_WIDEN_MULT_HI_EXPR, "VEC_WIDEN_MULT_HI_EXPR", "tcc_binary", 2);
add_operator (VEC_WIDEN_MULT_LO_EXPR, "VEC_WIDEN_MULT_LO_EXPR", "tcc_binary", 2);


add_operator (VEC_WIDEN_MULT_EVEN_EXPR, "VEC_WIDEN_MULT_EVEN_EXPR", "tcc_binary", 2);
add_operator (VEC_WIDEN_MULT_ODD_EXPR, "VEC_WIDEN_MULT_ODD_EXPR", "tcc_binary", 2);





add_operator (VEC_UNPACK_HI_EXPR, "VEC_UNPACK_HI_EXPR", "tcc_unary", 1);
add_operator (VEC_UNPACK_LO_EXPR, "VEC_UNPACK_LO_EXPR", "tcc_unary", 1);





add_operator (VEC_UNPACK_FLOAT_HI_EXPR, "VEC_UNPACK_FLOAT_HI_EXPR", "tcc_unary", 1);
add_operator (VEC_UNPACK_FLOAT_LO_EXPR, "VEC_UNPACK_FLOAT_LO_EXPR", "tcc_unary", 1);





add_operator (VEC_UNPACK_FIX_TRUNC_HI_EXPR, "VEC_UNPACK_FIX_TRUNC_HI_EXPR", "tcc_unary", 1);

add_operator (VEC_UNPACK_FIX_TRUNC_LO_EXPR, "VEC_UNPACK_FIX_TRUNC_LO_EXPR", "tcc_unary", 1);






add_operator (VEC_PACK_TRUNC_EXPR, "VEC_PACK_TRUNC_EXPR", "tcc_binary", 2);
add_operator (VEC_PACK_SAT_EXPR, "VEC_PACK_SAT_EXPR", "tcc_binary", 2);





add_operator (VEC_PACK_FIX_TRUNC_EXPR, "VEC_PACK_FIX_TRUNC_EXPR", "tcc_binary", 2);





add_operator (VEC_PACK_FLOAT_EXPR, "VEC_PACK_FLOAT_EXPR", "tcc_binary", 2);
# 1424 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
add_operator (VEC_WIDEN_LSHIFT_HI_EXPR, "VEC_WIDEN_LSHIFT_HI_EXPR", "tcc_binary", 2);
add_operator (VEC_WIDEN_LSHIFT_LO_EXPR, "VEC_WIDEN_LSHIFT_LO_EXPR", "tcc_binary", 2);






add_operator (PREDICT_EXPR, "PREDICT_EXPR", "tcc_expression", 1);


add_operator (OPTIMIZATION_NODE, "OPTIMIZATION_NODE", "tcc_exceptional", 0);


add_operator (TARGET_OPTION_NODE, "TARGET_OPTION_NODE", "tcc_exceptional", 0);





add_operator (ANNOTATE_EXPR, "ANNOTATE_EXPR", "tcc_expression", 3);
# 5186 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2
# 5194 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 1
# 282 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
add_function (BUILT_IN_NONE, "CFN_" "BUILT_IN_NONE");


add_function (BUILT_IN_ACOS, "CFN_" "BUILT_IN_ACOS");
add_function (BUILT_IN_ACOSF, "CFN_" "BUILT_IN_ACOSF");
add_function (BUILT_IN_ACOSH, "CFN_" "BUILT_IN_ACOSH");
add_function (BUILT_IN_ACOSHF, "CFN_" "BUILT_IN_ACOSHF");
add_function (BUILT_IN_ACOSHL, "CFN_" "BUILT_IN_ACOSHL");
add_function (BUILT_IN_ACOSL, "CFN_" "BUILT_IN_ACOSL");
add_function (BUILT_IN_ALIGNED_ALLOC, "CFN_" "BUILT_IN_ALIGNED_ALLOC");
add_function (BUILT_IN_ASIN, "CFN_" "BUILT_IN_ASIN");
add_function (BUILT_IN_ASINF, "CFN_" "BUILT_IN_ASINF");
add_function (BUILT_IN_ASINH, "CFN_" "BUILT_IN_ASINH");
add_function (BUILT_IN_ASINHF, "CFN_" "BUILT_IN_ASINHF");
add_function (BUILT_IN_ASINHL, "CFN_" "BUILT_IN_ASINHL");
add_function (BUILT_IN_ASINL, "CFN_" "BUILT_IN_ASINL");
add_function (BUILT_IN_ATAN, "CFN_" "BUILT_IN_ATAN");
add_function (BUILT_IN_ATAN2, "CFN_" "BUILT_IN_ATAN2");
add_function (BUILT_IN_ATAN2F, "CFN_" "BUILT_IN_ATAN2F");
add_function (BUILT_IN_ATAN2L, "CFN_" "BUILT_IN_ATAN2L");
add_function (BUILT_IN_ATANF, "CFN_" "BUILT_IN_ATANF");
add_function (BUILT_IN_ATANH, "CFN_" "BUILT_IN_ATANH");
add_function (BUILT_IN_ATANHF, "CFN_" "BUILT_IN_ATANHF");
add_function (BUILT_IN_ATANHL, "CFN_" "BUILT_IN_ATANHL");
add_function (BUILT_IN_ATANL, "CFN_" "BUILT_IN_ATANL");
add_function (BUILT_IN_CBRT, "CFN_" "BUILT_IN_CBRT");
add_function (BUILT_IN_CBRTF, "CFN_" "BUILT_IN_CBRTF");
add_function (BUILT_IN_CBRTL, "CFN_" "BUILT_IN_CBRTL");
add_function (BUILT_IN_CEIL, "CFN_" "BUILT_IN_CEIL");
add_function (BUILT_IN_CEILF, "CFN_" "BUILT_IN_CEILF");
add_function (BUILT_IN_CEILL, "CFN_" "BUILT_IN_CEILL");

add_function (BUILT_IN_CEILF16, "CFN_" "BUILT_IN_CEILF16"); add_function (BUILT_IN_CEILF32, "CFN_" "BUILT_IN_CEILF32"); add_function (BUILT_IN_CEILF64, "CFN_" "BUILT_IN_CEILF64"); add_function (BUILT_IN_CEILF128, "CFN_" "BUILT_IN_CEILF128"); add_function (BUILT_IN_CEILF32X, "CFN_" "BUILT_IN_CEILF32X"); add_function (BUILT_IN_CEILF64X, "CFN_" "BUILT_IN_CEILF64X"); add_function (BUILT_IN_CEILF128X, "CFN_" "BUILT_IN_CEILF128X");

add_function (BUILT_IN_COPYSIGN, "CFN_" "BUILT_IN_COPYSIGN");
add_function (BUILT_IN_COPYSIGNF, "CFN_" "BUILT_IN_COPYSIGNF");
add_function (BUILT_IN_COPYSIGNL, "CFN_" "BUILT_IN_COPYSIGNL");

add_function (BUILT_IN_COPYSIGNF16, "CFN_" "BUILT_IN_COPYSIGNF16"); add_function (BUILT_IN_COPYSIGNF32, "CFN_" "BUILT_IN_COPYSIGNF32"); add_function (BUILT_IN_COPYSIGNF64, "CFN_" "BUILT_IN_COPYSIGNF64"); add_function (BUILT_IN_COPYSIGNF128, "CFN_" "BUILT_IN_COPYSIGNF128"); add_function (BUILT_IN_COPYSIGNF32X, "CFN_" "BUILT_IN_COPYSIGNF32X"); add_function (BUILT_IN_COPYSIGNF64X, "CFN_" "BUILT_IN_COPYSIGNF64X"); add_function (BUILT_IN_COPYSIGNF128X, "CFN_" "BUILT_IN_COPYSIGNF128X");

add_function (BUILT_IN_COS, "CFN_" "BUILT_IN_COS");
add_function (BUILT_IN_COSF, "CFN_" "BUILT_IN_COSF");
add_function (BUILT_IN_COSH, "CFN_" "BUILT_IN_COSH");
add_function (BUILT_IN_COSHF, "CFN_" "BUILT_IN_COSHF");
add_function (BUILT_IN_COSHL, "CFN_" "BUILT_IN_COSHL");
add_function (BUILT_IN_COSL, "CFN_" "BUILT_IN_COSL");
add_function (BUILT_IN_DREM, "CFN_" "BUILT_IN_DREM");
add_function (BUILT_IN_DREMF, "CFN_" "BUILT_IN_DREMF");
add_function (BUILT_IN_DREML, "CFN_" "BUILT_IN_DREML");
add_function (BUILT_IN_ERF, "CFN_" "BUILT_IN_ERF");
add_function (BUILT_IN_ERFC, "CFN_" "BUILT_IN_ERFC");
add_function (BUILT_IN_ERFCF, "CFN_" "BUILT_IN_ERFCF");
add_function (BUILT_IN_ERFCL, "CFN_" "BUILT_IN_ERFCL");
add_function (BUILT_IN_ERFF, "CFN_" "BUILT_IN_ERFF");
add_function (BUILT_IN_ERFL, "CFN_" "BUILT_IN_ERFL");
add_function (BUILT_IN_EXP, "CFN_" "BUILT_IN_EXP");
add_function (BUILT_IN_EXP10, "CFN_" "BUILT_IN_EXP10");
add_function (BUILT_IN_EXP10F, "CFN_" "BUILT_IN_EXP10F");
add_function (BUILT_IN_EXP10L, "CFN_" "BUILT_IN_EXP10L");
add_function (BUILT_IN_EXP2, "CFN_" "BUILT_IN_EXP2");
add_function (BUILT_IN_EXP2F, "CFN_" "BUILT_IN_EXP2F");
add_function (BUILT_IN_EXP2L, "CFN_" "BUILT_IN_EXP2L");
add_function (BUILT_IN_EXPF, "CFN_" "BUILT_IN_EXPF");
add_function (BUILT_IN_EXPL, "CFN_" "BUILT_IN_EXPL");
add_function (BUILT_IN_EXPM1, "CFN_" "BUILT_IN_EXPM1");
add_function (BUILT_IN_EXPM1F, "CFN_" "BUILT_IN_EXPM1F");
add_function (BUILT_IN_EXPM1L, "CFN_" "BUILT_IN_EXPM1L");
add_function (BUILT_IN_FABS, "CFN_" "BUILT_IN_FABS");
add_function (BUILT_IN_FABSF, "CFN_" "BUILT_IN_FABSF");
add_function (BUILT_IN_FABSL, "CFN_" "BUILT_IN_FABSL");

add_function (BUILT_IN_FABSF16, "CFN_" "BUILT_IN_FABSF16"); add_function (BUILT_IN_FABSF32, "CFN_" "BUILT_IN_FABSF32"); add_function (BUILT_IN_FABSF64, "CFN_" "BUILT_IN_FABSF64"); add_function (BUILT_IN_FABSF128, "CFN_" "BUILT_IN_FABSF128"); add_function (BUILT_IN_FABSF32X, "CFN_" "BUILT_IN_FABSF32X"); add_function (BUILT_IN_FABSF64X, "CFN_" "BUILT_IN_FABSF64X"); add_function (BUILT_IN_FABSF128X, "CFN_" "BUILT_IN_FABSF128X");

add_function (BUILT_IN_FABSD32, "CFN_" "BUILT_IN_FABSD32");
add_function (BUILT_IN_FABSD64, "CFN_" "BUILT_IN_FABSD64");
add_function (BUILT_IN_FABSD128, "CFN_" "BUILT_IN_FABSD128");
add_function (BUILT_IN_FDIM, "CFN_" "BUILT_IN_FDIM");
add_function (BUILT_IN_FDIMF, "CFN_" "BUILT_IN_FDIMF");
add_function (BUILT_IN_FDIML, "CFN_" "BUILT_IN_FDIML");
add_function (BUILT_IN_FECLEAREXCEPT, "CFN_" "BUILT_IN_FECLEAREXCEPT");
add_function (BUILT_IN_FEGETENV, "CFN_" "BUILT_IN_FEGETENV");
add_function (BUILT_IN_FEGETEXCEPTFLAG, "CFN_" "BUILT_IN_FEGETEXCEPTFLAG");
add_function (BUILT_IN_FEGETROUND, "CFN_" "BUILT_IN_FEGETROUND");
add_function (BUILT_IN_FEHOLDEXCEPT, "CFN_" "BUILT_IN_FEHOLDEXCEPT");
add_function (BUILT_IN_FERAISEEXCEPT, "CFN_" "BUILT_IN_FERAISEEXCEPT");
add_function (BUILT_IN_FESETENV, "CFN_" "BUILT_IN_FESETENV");
add_function (BUILT_IN_FESETEXCEPTFLAG, "CFN_" "BUILT_IN_FESETEXCEPTFLAG");
add_function (BUILT_IN_FESETROUND, "CFN_" "BUILT_IN_FESETROUND");
add_function (BUILT_IN_FETESTEXCEPT, "CFN_" "BUILT_IN_FETESTEXCEPT");
add_function (BUILT_IN_FEUPDATEENV, "CFN_" "BUILT_IN_FEUPDATEENV");
add_function (BUILT_IN_FLOOR, "CFN_" "BUILT_IN_FLOOR");
add_function (BUILT_IN_FLOORF, "CFN_" "BUILT_IN_FLOORF");
add_function (BUILT_IN_FLOORL, "CFN_" "BUILT_IN_FLOORL");

add_function (BUILT_IN_FLOORF16, "CFN_" "BUILT_IN_FLOORF16"); add_function (BUILT_IN_FLOORF32, "CFN_" "BUILT_IN_FLOORF32"); add_function (BUILT_IN_FLOORF64, "CFN_" "BUILT_IN_FLOORF64"); add_function (BUILT_IN_FLOORF128, "CFN_" "BUILT_IN_FLOORF128"); add_function (BUILT_IN_FLOORF32X, "CFN_" "BUILT_IN_FLOORF32X"); add_function (BUILT_IN_FLOORF64X, "CFN_" "BUILT_IN_FLOORF64X"); add_function (BUILT_IN_FLOORF128X, "CFN_" "BUILT_IN_FLOORF128X");

add_function (BUILT_IN_FMA, "CFN_" "BUILT_IN_FMA");
add_function (BUILT_IN_FMAF, "CFN_" "BUILT_IN_FMAF");
add_function (BUILT_IN_FMAL, "CFN_" "BUILT_IN_FMAL");

add_function (BUILT_IN_FMAF16, "CFN_" "BUILT_IN_FMAF16"); add_function (BUILT_IN_FMAF32, "CFN_" "BUILT_IN_FMAF32"); add_function (BUILT_IN_FMAF64, "CFN_" "BUILT_IN_FMAF64"); add_function (BUILT_IN_FMAF128, "CFN_" "BUILT_IN_FMAF128"); add_function (BUILT_IN_FMAF32X, "CFN_" "BUILT_IN_FMAF32X"); add_function (BUILT_IN_FMAF64X, "CFN_" "BUILT_IN_FMAF64X"); add_function (BUILT_IN_FMAF128X, "CFN_" "BUILT_IN_FMAF128X");

add_function (BUILT_IN_FMAX, "CFN_" "BUILT_IN_FMAX");
add_function (BUILT_IN_FMAXF, "CFN_" "BUILT_IN_FMAXF");
add_function (BUILT_IN_FMAXL, "CFN_" "BUILT_IN_FMAXL");

add_function (BUILT_IN_FMAXF16, "CFN_" "BUILT_IN_FMAXF16"); add_function (BUILT_IN_FMAXF32, "CFN_" "BUILT_IN_FMAXF32"); add_function (BUILT_IN_FMAXF64, "CFN_" "BUILT_IN_FMAXF64"); add_function (BUILT_IN_FMAXF128, "CFN_" "BUILT_IN_FMAXF128"); add_function (BUILT_IN_FMAXF32X, "CFN_" "BUILT_IN_FMAXF32X"); add_function (BUILT_IN_FMAXF64X, "CFN_" "BUILT_IN_FMAXF64X"); add_function (BUILT_IN_FMAXF128X, "CFN_" "BUILT_IN_FMAXF128X");

add_function (BUILT_IN_FMIN, "CFN_" "BUILT_IN_FMIN");
add_function (BUILT_IN_FMINF, "CFN_" "BUILT_IN_FMINF");
add_function (BUILT_IN_FMINL, "CFN_" "BUILT_IN_FMINL");

add_function (BUILT_IN_FMINF16, "CFN_" "BUILT_IN_FMINF16"); add_function (BUILT_IN_FMINF32, "CFN_" "BUILT_IN_FMINF32"); add_function (BUILT_IN_FMINF64, "CFN_" "BUILT_IN_FMINF64"); add_function (BUILT_IN_FMINF128, "CFN_" "BUILT_IN_FMINF128"); add_function (BUILT_IN_FMINF32X, "CFN_" "BUILT_IN_FMINF32X"); add_function (BUILT_IN_FMINF64X, "CFN_" "BUILT_IN_FMINF64X"); add_function (BUILT_IN_FMINF128X, "CFN_" "BUILT_IN_FMINF128X");

add_function (BUILT_IN_FMOD, "CFN_" "BUILT_IN_FMOD");
add_function (BUILT_IN_FMODF, "CFN_" "BUILT_IN_FMODF");
add_function (BUILT_IN_FMODL, "CFN_" "BUILT_IN_FMODL");
add_function (BUILT_IN_FREXP, "CFN_" "BUILT_IN_FREXP");
add_function (BUILT_IN_FREXPF, "CFN_" "BUILT_IN_FREXPF");
add_function (BUILT_IN_FREXPL, "CFN_" "BUILT_IN_FREXPL");
add_function (BUILT_IN_GAMMA, "CFN_" "BUILT_IN_GAMMA");
add_function (BUILT_IN_GAMMAF, "CFN_" "BUILT_IN_GAMMAF");
add_function (BUILT_IN_GAMMAL, "CFN_" "BUILT_IN_GAMMAL");
add_function (BUILT_IN_GAMMA_R, "CFN_" "BUILT_IN_GAMMA_R");
add_function (BUILT_IN_GAMMAF_R, "CFN_" "BUILT_IN_GAMMAF_R");
add_function (BUILT_IN_GAMMAL_R, "CFN_" "BUILT_IN_GAMMAL_R");
add_function (BUILT_IN_HUGE_VAL, "CFN_" "BUILT_IN_HUGE_VAL");
add_function (BUILT_IN_HUGE_VALF, "CFN_" "BUILT_IN_HUGE_VALF");
add_function (BUILT_IN_HUGE_VALL, "CFN_" "BUILT_IN_HUGE_VALL");

add_function (BUILT_IN_HUGE_VALF16, "CFN_" "BUILT_IN_HUGE_VALF16"); add_function (BUILT_IN_HUGE_VALF32, "CFN_" "BUILT_IN_HUGE_VALF32"); add_function (BUILT_IN_HUGE_VALF64, "CFN_" "BUILT_IN_HUGE_VALF64"); add_function (BUILT_IN_HUGE_VALF128, "CFN_" "BUILT_IN_HUGE_VALF128"); add_function (BUILT_IN_HUGE_VALF32X, "CFN_" "BUILT_IN_HUGE_VALF32X"); add_function (BUILT_IN_HUGE_VALF64X, "CFN_" "BUILT_IN_HUGE_VALF64X"); add_function (BUILT_IN_HUGE_VALF128X, "CFN_" "BUILT_IN_HUGE_VALF128X");
add_function (BUILT_IN_HYPOT, "CFN_" "BUILT_IN_HYPOT");
add_function (BUILT_IN_HYPOTF, "CFN_" "BUILT_IN_HYPOTF");
add_function (BUILT_IN_HYPOTL, "CFN_" "BUILT_IN_HYPOTL");
add_function (BUILT_IN_ICEIL, "CFN_" "BUILT_IN_ICEIL");
add_function (BUILT_IN_ICEILF, "CFN_" "BUILT_IN_ICEILF");
add_function (BUILT_IN_ICEILL, "CFN_" "BUILT_IN_ICEILL");
add_function (BUILT_IN_IFLOOR, "CFN_" "BUILT_IN_IFLOOR");
add_function (BUILT_IN_IFLOORF, "CFN_" "BUILT_IN_IFLOORF");
add_function (BUILT_IN_IFLOORL, "CFN_" "BUILT_IN_IFLOORL");
add_function (BUILT_IN_ILOGB, "CFN_" "BUILT_IN_ILOGB");
add_function (BUILT_IN_ILOGBF, "CFN_" "BUILT_IN_ILOGBF");
add_function (BUILT_IN_ILOGBL, "CFN_" "BUILT_IN_ILOGBL");
add_function (BUILT_IN_INF, "CFN_" "BUILT_IN_INF");
add_function (BUILT_IN_INFF, "CFN_" "BUILT_IN_INFF");
add_function (BUILT_IN_INFL, "CFN_" "BUILT_IN_INFL");
add_function (BUILT_IN_INFF16, "CFN_" "BUILT_IN_INFF16"); add_function (BUILT_IN_INFF32, "CFN_" "BUILT_IN_INFF32"); add_function (BUILT_IN_INFF64, "CFN_" "BUILT_IN_INFF64"); add_function (BUILT_IN_INFF128, "CFN_" "BUILT_IN_INFF128"); add_function (BUILT_IN_INFF32X, "CFN_" "BUILT_IN_INFF32X"); add_function (BUILT_IN_INFF64X, "CFN_" "BUILT_IN_INFF64X"); add_function (BUILT_IN_INFF128X, "CFN_" "BUILT_IN_INFF128X");

add_function (BUILT_IN_INFD32, "CFN_" "BUILT_IN_INFD32");
add_function (BUILT_IN_INFD64, "CFN_" "BUILT_IN_INFD64");
add_function (BUILT_IN_INFD128, "CFN_" "BUILT_IN_INFD128");
add_function (BUILT_IN_IRINT, "CFN_" "BUILT_IN_IRINT");
add_function (BUILT_IN_IRINTF, "CFN_" "BUILT_IN_IRINTF");
add_function (BUILT_IN_IRINTL, "CFN_" "BUILT_IN_IRINTL");
add_function (BUILT_IN_IROUND, "CFN_" "BUILT_IN_IROUND");
add_function (BUILT_IN_IROUNDF, "CFN_" "BUILT_IN_IROUNDF");
add_function (BUILT_IN_IROUNDL, "CFN_" "BUILT_IN_IROUNDL");
add_function (BUILT_IN_J0, "CFN_" "BUILT_IN_J0");
add_function (BUILT_IN_J0F, "CFN_" "BUILT_IN_J0F");
add_function (BUILT_IN_J0L, "CFN_" "BUILT_IN_J0L");
add_function (BUILT_IN_J1, "CFN_" "BUILT_IN_J1");
add_function (BUILT_IN_J1F, "CFN_" "BUILT_IN_J1F");
add_function (BUILT_IN_J1L, "CFN_" "BUILT_IN_J1L");
add_function (BUILT_IN_JN, "CFN_" "BUILT_IN_JN");
add_function (BUILT_IN_JNF, "CFN_" "BUILT_IN_JNF");
add_function (BUILT_IN_JNL, "CFN_" "BUILT_IN_JNL");
add_function (BUILT_IN_LCEIL, "CFN_" "BUILT_IN_LCEIL");
add_function (BUILT_IN_LCEILF, "CFN_" "BUILT_IN_LCEILF");
add_function (BUILT_IN_LCEILL, "CFN_" "BUILT_IN_LCEILL");
add_function (BUILT_IN_LDEXP, "CFN_" "BUILT_IN_LDEXP");
add_function (BUILT_IN_LDEXPF, "CFN_" "BUILT_IN_LDEXPF");
add_function (BUILT_IN_LDEXPL, "CFN_" "BUILT_IN_LDEXPL");
add_function (BUILT_IN_LFLOOR, "CFN_" "BUILT_IN_LFLOOR");
add_function (BUILT_IN_LFLOORF, "CFN_" "BUILT_IN_LFLOORF");
add_function (BUILT_IN_LFLOORL, "CFN_" "BUILT_IN_LFLOORL");
add_function (BUILT_IN_LGAMMA, "CFN_" "BUILT_IN_LGAMMA");
add_function (BUILT_IN_LGAMMAF, "CFN_" "BUILT_IN_LGAMMAF");
add_function (BUILT_IN_LGAMMAL, "CFN_" "BUILT_IN_LGAMMAL");
add_function (BUILT_IN_LGAMMA_R, "CFN_" "BUILT_IN_LGAMMA_R");
add_function (BUILT_IN_LGAMMAF_R, "CFN_" "BUILT_IN_LGAMMAF_R");
add_function (BUILT_IN_LGAMMAL_R, "CFN_" "BUILT_IN_LGAMMAL_R");
add_function (BUILT_IN_LLCEIL, "CFN_" "BUILT_IN_LLCEIL");
add_function (BUILT_IN_LLCEILF, "CFN_" "BUILT_IN_LLCEILF");
add_function (BUILT_IN_LLCEILL, "CFN_" "BUILT_IN_LLCEILL");
add_function (BUILT_IN_LLFLOOR, "CFN_" "BUILT_IN_LLFLOOR");
add_function (BUILT_IN_LLFLOORF, "CFN_" "BUILT_IN_LLFLOORF");
add_function (BUILT_IN_LLFLOORL, "CFN_" "BUILT_IN_LLFLOORL");
add_function (BUILT_IN_LLRINT, "CFN_" "BUILT_IN_LLRINT");
add_function (BUILT_IN_LLRINTF, "CFN_" "BUILT_IN_LLRINTF");
add_function (BUILT_IN_LLRINTL, "CFN_" "BUILT_IN_LLRINTL");
add_function (BUILT_IN_LLROUND, "CFN_" "BUILT_IN_LLROUND");
add_function (BUILT_IN_LLROUNDF, "CFN_" "BUILT_IN_LLROUNDF");
add_function (BUILT_IN_LLROUNDL, "CFN_" "BUILT_IN_LLROUNDL");
add_function (BUILT_IN_LOG, "CFN_" "BUILT_IN_LOG");
add_function (BUILT_IN_LOG10, "CFN_" "BUILT_IN_LOG10");
add_function (BUILT_IN_LOG10F, "CFN_" "BUILT_IN_LOG10F");
add_function (BUILT_IN_LOG10L, "CFN_" "BUILT_IN_LOG10L");
add_function (BUILT_IN_LOG1P, "CFN_" "BUILT_IN_LOG1P");
add_function (BUILT_IN_LOG1PF, "CFN_" "BUILT_IN_LOG1PF");
add_function (BUILT_IN_LOG1PL, "CFN_" "BUILT_IN_LOG1PL");
add_function (BUILT_IN_LOG2, "CFN_" "BUILT_IN_LOG2");
add_function (BUILT_IN_LOG2F, "CFN_" "BUILT_IN_LOG2F");
add_function (BUILT_IN_LOG2L, "CFN_" "BUILT_IN_LOG2L");
add_function (BUILT_IN_LOGB, "CFN_" "BUILT_IN_LOGB");
add_function (BUILT_IN_LOGBF, "CFN_" "BUILT_IN_LOGBF");
add_function (BUILT_IN_LOGBL, "CFN_" "BUILT_IN_LOGBL");
add_function (BUILT_IN_LOGF, "CFN_" "BUILT_IN_LOGF");
add_function (BUILT_IN_LOGL, "CFN_" "BUILT_IN_LOGL");
add_function (BUILT_IN_LRINT, "CFN_" "BUILT_IN_LRINT");
add_function (BUILT_IN_LRINTF, "CFN_" "BUILT_IN_LRINTF");
add_function (BUILT_IN_LRINTL, "CFN_" "BUILT_IN_LRINTL");
add_function (BUILT_IN_LROUND, "CFN_" "BUILT_IN_LROUND");
add_function (BUILT_IN_LROUNDF, "CFN_" "BUILT_IN_LROUNDF");
add_function (BUILT_IN_LROUNDL, "CFN_" "BUILT_IN_LROUNDL");
add_function (BUILT_IN_MODF, "CFN_" "BUILT_IN_MODF");
add_function (BUILT_IN_MODFF, "CFN_" "BUILT_IN_MODFF");
add_function (BUILT_IN_MODFL, "CFN_" "BUILT_IN_MODFL");
add_function (BUILT_IN_NAN, "CFN_" "BUILT_IN_NAN");
add_function (BUILT_IN_NANF, "CFN_" "BUILT_IN_NANF");
add_function (BUILT_IN_NANL, "CFN_" "BUILT_IN_NANL");

add_function (BUILT_IN_NANF16, "CFN_" "BUILT_IN_NANF16"); add_function (BUILT_IN_NANF32, "CFN_" "BUILT_IN_NANF32"); add_function (BUILT_IN_NANF64, "CFN_" "BUILT_IN_NANF64"); add_function (BUILT_IN_NANF128, "CFN_" "BUILT_IN_NANF128"); add_function (BUILT_IN_NANF32X, "CFN_" "BUILT_IN_NANF32X"); add_function (BUILT_IN_NANF64X, "CFN_" "BUILT_IN_NANF64X"); add_function (BUILT_IN_NANF128X, "CFN_" "BUILT_IN_NANF128X");
add_function (BUILT_IN_NAND32, "CFN_" "BUILT_IN_NAND32");
add_function (BUILT_IN_NAND64, "CFN_" "BUILT_IN_NAND64");
add_function (BUILT_IN_NAND128, "CFN_" "BUILT_IN_NAND128");
add_function (BUILT_IN_NANS, "CFN_" "BUILT_IN_NANS");
add_function (BUILT_IN_NANSF, "CFN_" "BUILT_IN_NANSF");
add_function (BUILT_IN_NANSL, "CFN_" "BUILT_IN_NANSL");
add_function (BUILT_IN_NANSF16, "CFN_" "BUILT_IN_NANSF16"); add_function (BUILT_IN_NANSF32, "CFN_" "BUILT_IN_NANSF32"); add_function (BUILT_IN_NANSF64, "CFN_" "BUILT_IN_NANSF64"); add_function (BUILT_IN_NANSF128, "CFN_" "BUILT_IN_NANSF128"); add_function (BUILT_IN_NANSF32X, "CFN_" "BUILT_IN_NANSF32X"); add_function (BUILT_IN_NANSF64X, "CFN_" "BUILT_IN_NANSF64X"); add_function (BUILT_IN_NANSF128X, "CFN_" "BUILT_IN_NANSF128X");

add_function (BUILT_IN_NEARBYINT, "CFN_" "BUILT_IN_NEARBYINT");
add_function (BUILT_IN_NEARBYINTF, "CFN_" "BUILT_IN_NEARBYINTF");
add_function (BUILT_IN_NEARBYINTL, "CFN_" "BUILT_IN_NEARBYINTL");

add_function (BUILT_IN_NEARBYINTF16, "CFN_" "BUILT_IN_NEARBYINTF16"); add_function (BUILT_IN_NEARBYINTF32, "CFN_" "BUILT_IN_NEARBYINTF32"); add_function (BUILT_IN_NEARBYINTF64, "CFN_" "BUILT_IN_NEARBYINTF64"); add_function (BUILT_IN_NEARBYINTF128, "CFN_" "BUILT_IN_NEARBYINTF128"); add_function (BUILT_IN_NEARBYINTF32X, "CFN_" "BUILT_IN_NEARBYINTF32X"); add_function (BUILT_IN_NEARBYINTF64X, "CFN_" "BUILT_IN_NEARBYINTF64X"); add_function (BUILT_IN_NEARBYINTF128X, "CFN_" "BUILT_IN_NEARBYINTF128X");

add_function (BUILT_IN_NEXTAFTER, "CFN_" "BUILT_IN_NEXTAFTER");
add_function (BUILT_IN_NEXTAFTERF, "CFN_" "BUILT_IN_NEXTAFTERF");
add_function (BUILT_IN_NEXTAFTERL, "CFN_" "BUILT_IN_NEXTAFTERL");
add_function (BUILT_IN_NEXTTOWARD, "CFN_" "BUILT_IN_NEXTTOWARD");
add_function (BUILT_IN_NEXTTOWARDF, "CFN_" "BUILT_IN_NEXTTOWARDF");
add_function (BUILT_IN_NEXTTOWARDL, "CFN_" "BUILT_IN_NEXTTOWARDL");
add_function (BUILT_IN_POW, "CFN_" "BUILT_IN_POW");
add_function (BUILT_IN_POW10, "CFN_" "BUILT_IN_POW10");
add_function (BUILT_IN_POW10F, "CFN_" "BUILT_IN_POW10F");
add_function (BUILT_IN_POW10L, "CFN_" "BUILT_IN_POW10L");
add_function (BUILT_IN_POWF, "CFN_" "BUILT_IN_POWF");
add_function (BUILT_IN_POWI, "CFN_" "BUILT_IN_POWI");
add_function (BUILT_IN_POWIF, "CFN_" "BUILT_IN_POWIF");
add_function (BUILT_IN_POWIL, "CFN_" "BUILT_IN_POWIL");
add_function (BUILT_IN_POWL, "CFN_" "BUILT_IN_POWL");
add_function (BUILT_IN_REMAINDER, "CFN_" "BUILT_IN_REMAINDER");
add_function (BUILT_IN_REMAINDERF, "CFN_" "BUILT_IN_REMAINDERF");
add_function (BUILT_IN_REMAINDERL, "CFN_" "BUILT_IN_REMAINDERL");
add_function (BUILT_IN_REMQUO, "CFN_" "BUILT_IN_REMQUO");
add_function (BUILT_IN_REMQUOF, "CFN_" "BUILT_IN_REMQUOF");
add_function (BUILT_IN_REMQUOL, "CFN_" "BUILT_IN_REMQUOL");
add_function (BUILT_IN_RINT, "CFN_" "BUILT_IN_RINT");
add_function (BUILT_IN_RINTF, "CFN_" "BUILT_IN_RINTF");
add_function (BUILT_IN_RINTL, "CFN_" "BUILT_IN_RINTL");

add_function (BUILT_IN_RINTF16, "CFN_" "BUILT_IN_RINTF16"); add_function (BUILT_IN_RINTF32, "CFN_" "BUILT_IN_RINTF32"); add_function (BUILT_IN_RINTF64, "CFN_" "BUILT_IN_RINTF64"); add_function (BUILT_IN_RINTF128, "CFN_" "BUILT_IN_RINTF128"); add_function (BUILT_IN_RINTF32X, "CFN_" "BUILT_IN_RINTF32X"); add_function (BUILT_IN_RINTF64X, "CFN_" "BUILT_IN_RINTF64X"); add_function (BUILT_IN_RINTF128X, "CFN_" "BUILT_IN_RINTF128X");

add_function (BUILT_IN_ROUNDEVEN, "CFN_" "BUILT_IN_ROUNDEVEN");
add_function (BUILT_IN_ROUNDEVENF, "CFN_" "BUILT_IN_ROUNDEVENF");
add_function (BUILT_IN_ROUNDEVENL, "CFN_" "BUILT_IN_ROUNDEVENL");
add_function (BUILT_IN_ROUND, "CFN_" "BUILT_IN_ROUND");
add_function (BUILT_IN_ROUNDF, "CFN_" "BUILT_IN_ROUNDF");
add_function (BUILT_IN_ROUNDL, "CFN_" "BUILT_IN_ROUNDL");

add_function (BUILT_IN_ROUNDF16, "CFN_" "BUILT_IN_ROUNDF16"); add_function (BUILT_IN_ROUNDF32, "CFN_" "BUILT_IN_ROUNDF32"); add_function (BUILT_IN_ROUNDF64, "CFN_" "BUILT_IN_ROUNDF64"); add_function (BUILT_IN_ROUNDF128, "CFN_" "BUILT_IN_ROUNDF128"); add_function (BUILT_IN_ROUNDF32X, "CFN_" "BUILT_IN_ROUNDF32X"); add_function (BUILT_IN_ROUNDF64X, "CFN_" "BUILT_IN_ROUNDF64X"); add_function (BUILT_IN_ROUNDF128X, "CFN_" "BUILT_IN_ROUNDF128X");


add_function (BUILT_IN_ROUNDEVENF16, "CFN_" "BUILT_IN_ROUNDEVENF16"); add_function (BUILT_IN_ROUNDEVENF32, "CFN_" "BUILT_IN_ROUNDEVENF32"); add_function (BUILT_IN_ROUNDEVENF64, "CFN_" "BUILT_IN_ROUNDEVENF64"); add_function (BUILT_IN_ROUNDEVENF128, "CFN_" "BUILT_IN_ROUNDEVENF128"); add_function (BUILT_IN_ROUNDEVENF32X, "CFN_" "BUILT_IN_ROUNDEVENF32X"); add_function (BUILT_IN_ROUNDEVENF64X, "CFN_" "BUILT_IN_ROUNDEVENF64X"); add_function (BUILT_IN_ROUNDEVENF128X, "CFN_" "BUILT_IN_ROUNDEVENF128X");

add_function (BUILT_IN_SCALB, "CFN_" "BUILT_IN_SCALB");
add_function (BUILT_IN_SCALBF, "CFN_" "BUILT_IN_SCALBF");
add_function (BUILT_IN_SCALBL, "CFN_" "BUILT_IN_SCALBL");
add_function (BUILT_IN_SCALBLN, "CFN_" "BUILT_IN_SCALBLN");
add_function (BUILT_IN_SCALBLNF, "CFN_" "BUILT_IN_SCALBLNF");
add_function (BUILT_IN_SCALBLNL, "CFN_" "BUILT_IN_SCALBLNL");
add_function (BUILT_IN_SCALBN, "CFN_" "BUILT_IN_SCALBN");
add_function (BUILT_IN_SCALBNF, "CFN_" "BUILT_IN_SCALBNF");
add_function (BUILT_IN_SCALBNL, "CFN_" "BUILT_IN_SCALBNL");
add_function (BUILT_IN_SIGNBIT, "CFN_" "BUILT_IN_SIGNBIT");
add_function (BUILT_IN_SIGNBITF, "CFN_" "BUILT_IN_SIGNBITF");
add_function (BUILT_IN_SIGNBITL, "CFN_" "BUILT_IN_SIGNBITL");
add_function (BUILT_IN_SIGNBITD32, "CFN_" "BUILT_IN_SIGNBITD32");
add_function (BUILT_IN_SIGNBITD64, "CFN_" "BUILT_IN_SIGNBITD64");
add_function (BUILT_IN_SIGNBITD128, "CFN_" "BUILT_IN_SIGNBITD128");
add_function (BUILT_IN_SIGNIFICAND, "CFN_" "BUILT_IN_SIGNIFICAND");
add_function (BUILT_IN_SIGNIFICANDF, "CFN_" "BUILT_IN_SIGNIFICANDF");
add_function (BUILT_IN_SIGNIFICANDL, "CFN_" "BUILT_IN_SIGNIFICANDL");
add_function (BUILT_IN_SIN, "CFN_" "BUILT_IN_SIN");
add_function (BUILT_IN_SINCOS, "CFN_" "BUILT_IN_SINCOS");
add_function (BUILT_IN_SINCOSF, "CFN_" "BUILT_IN_SINCOSF");
add_function (BUILT_IN_SINCOSL, "CFN_" "BUILT_IN_SINCOSL");
add_function (BUILT_IN_SINF, "CFN_" "BUILT_IN_SINF");
add_function (BUILT_IN_SINH, "CFN_" "BUILT_IN_SINH");
add_function (BUILT_IN_SINHF, "CFN_" "BUILT_IN_SINHF");
add_function (BUILT_IN_SINHL, "CFN_" "BUILT_IN_SINHL");
add_function (BUILT_IN_SINL, "CFN_" "BUILT_IN_SINL");
add_function (BUILT_IN_SQRT, "CFN_" "BUILT_IN_SQRT");
add_function (BUILT_IN_SQRTF, "CFN_" "BUILT_IN_SQRTF");
add_function (BUILT_IN_SQRTL, "CFN_" "BUILT_IN_SQRTL");

add_function (BUILT_IN_SQRTF16, "CFN_" "BUILT_IN_SQRTF16"); add_function (BUILT_IN_SQRTF32, "CFN_" "BUILT_IN_SQRTF32"); add_function (BUILT_IN_SQRTF64, "CFN_" "BUILT_IN_SQRTF64"); add_function (BUILT_IN_SQRTF128, "CFN_" "BUILT_IN_SQRTF128"); add_function (BUILT_IN_SQRTF32X, "CFN_" "BUILT_IN_SQRTF32X"); add_function (BUILT_IN_SQRTF64X, "CFN_" "BUILT_IN_SQRTF64X"); add_function (BUILT_IN_SQRTF128X, "CFN_" "BUILT_IN_SQRTF128X");

add_function (BUILT_IN_TAN, "CFN_" "BUILT_IN_TAN");
add_function (BUILT_IN_TANF, "CFN_" "BUILT_IN_TANF");
add_function (BUILT_IN_TANH, "CFN_" "BUILT_IN_TANH");
add_function (BUILT_IN_TANHF, "CFN_" "BUILT_IN_TANHF");
add_function (BUILT_IN_TANHL, "CFN_" "BUILT_IN_TANHL");
add_function (BUILT_IN_TANL, "CFN_" "BUILT_IN_TANL");
add_function (BUILT_IN_TGAMMA, "CFN_" "BUILT_IN_TGAMMA");
add_function (BUILT_IN_TGAMMAF, "CFN_" "BUILT_IN_TGAMMAF");
add_function (BUILT_IN_TGAMMAL, "CFN_" "BUILT_IN_TGAMMAL");
add_function (BUILT_IN_TRUNC, "CFN_" "BUILT_IN_TRUNC");
add_function (BUILT_IN_TRUNCF, "CFN_" "BUILT_IN_TRUNCF");
add_function (BUILT_IN_TRUNCL, "CFN_" "BUILT_IN_TRUNCL");

add_function (BUILT_IN_TRUNCF16, "CFN_" "BUILT_IN_TRUNCF16"); add_function (BUILT_IN_TRUNCF32, "CFN_" "BUILT_IN_TRUNCF32"); add_function (BUILT_IN_TRUNCF64, "CFN_" "BUILT_IN_TRUNCF64"); add_function (BUILT_IN_TRUNCF128, "CFN_" "BUILT_IN_TRUNCF128"); add_function (BUILT_IN_TRUNCF32X, "CFN_" "BUILT_IN_TRUNCF32X"); add_function (BUILT_IN_TRUNCF64X, "CFN_" "BUILT_IN_TRUNCF64X"); add_function (BUILT_IN_TRUNCF128X, "CFN_" "BUILT_IN_TRUNCF128X");

add_function (BUILT_IN_Y0, "CFN_" "BUILT_IN_Y0");
add_function (BUILT_IN_Y0F, "CFN_" "BUILT_IN_Y0F");
add_function (BUILT_IN_Y0L, "CFN_" "BUILT_IN_Y0L");
add_function (BUILT_IN_Y1, "CFN_" "BUILT_IN_Y1");
add_function (BUILT_IN_Y1F, "CFN_" "BUILT_IN_Y1F");
add_function (BUILT_IN_Y1L, "CFN_" "BUILT_IN_Y1L");
add_function (BUILT_IN_YN, "CFN_" "BUILT_IN_YN");
add_function (BUILT_IN_YNF, "CFN_" "BUILT_IN_YNF");
add_function (BUILT_IN_YNL, "CFN_" "BUILT_IN_YNL");


add_function (BUILT_IN_CABS, "CFN_" "BUILT_IN_CABS");
add_function (BUILT_IN_CABSF, "CFN_" "BUILT_IN_CABSF");
add_function (BUILT_IN_CABSL, "CFN_" "BUILT_IN_CABSL");
add_function (BUILT_IN_CACOS, "CFN_" "BUILT_IN_CACOS");
add_function (BUILT_IN_CACOSF, "CFN_" "BUILT_IN_CACOSF");
add_function (BUILT_IN_CACOSH, "CFN_" "BUILT_IN_CACOSH");
add_function (BUILT_IN_CACOSHF, "CFN_" "BUILT_IN_CACOSHF");
add_function (BUILT_IN_CACOSHL, "CFN_" "BUILT_IN_CACOSHL");
add_function (BUILT_IN_CACOSL, "CFN_" "BUILT_IN_CACOSL");
add_function (BUILT_IN_CARG, "CFN_" "BUILT_IN_CARG");
add_function (BUILT_IN_CARGF, "CFN_" "BUILT_IN_CARGF");
add_function (BUILT_IN_CARGL, "CFN_" "BUILT_IN_CARGL");
add_function (BUILT_IN_CASIN, "CFN_" "BUILT_IN_CASIN");
add_function (BUILT_IN_CASINF, "CFN_" "BUILT_IN_CASINF");
add_function (BUILT_IN_CASINH, "CFN_" "BUILT_IN_CASINH");
add_function (BUILT_IN_CASINHF, "CFN_" "BUILT_IN_CASINHF");
add_function (BUILT_IN_CASINHL, "CFN_" "BUILT_IN_CASINHL");
add_function (BUILT_IN_CASINL, "CFN_" "BUILT_IN_CASINL");
add_function (BUILT_IN_CATAN, "CFN_" "BUILT_IN_CATAN");
add_function (BUILT_IN_CATANF, "CFN_" "BUILT_IN_CATANF");
add_function (BUILT_IN_CATANH, "CFN_" "BUILT_IN_CATANH");
add_function (BUILT_IN_CATANHF, "CFN_" "BUILT_IN_CATANHF");
add_function (BUILT_IN_CATANHL, "CFN_" "BUILT_IN_CATANHL");
add_function (BUILT_IN_CATANL, "CFN_" "BUILT_IN_CATANL");
add_function (BUILT_IN_CCOS, "CFN_" "BUILT_IN_CCOS");
add_function (BUILT_IN_CCOSF, "CFN_" "BUILT_IN_CCOSF");
add_function (BUILT_IN_CCOSH, "CFN_" "BUILT_IN_CCOSH");
add_function (BUILT_IN_CCOSHF, "CFN_" "BUILT_IN_CCOSHF");
add_function (BUILT_IN_CCOSHL, "CFN_" "BUILT_IN_CCOSHL");
add_function (BUILT_IN_CCOSL, "CFN_" "BUILT_IN_CCOSL");
add_function (BUILT_IN_CEXP, "CFN_" "BUILT_IN_CEXP");
add_function (BUILT_IN_CEXPF, "CFN_" "BUILT_IN_CEXPF");
add_function (BUILT_IN_CEXPL, "CFN_" "BUILT_IN_CEXPL");
add_function (BUILT_IN_CEXPI, "CFN_" "BUILT_IN_CEXPI");
add_function (BUILT_IN_CEXPIF, "CFN_" "BUILT_IN_CEXPIF");
add_function (BUILT_IN_CEXPIL, "CFN_" "BUILT_IN_CEXPIL");
add_function (BUILT_IN_CIMAG, "CFN_" "BUILT_IN_CIMAG");
add_function (BUILT_IN_CIMAGF, "CFN_" "BUILT_IN_CIMAGF");
add_function (BUILT_IN_CIMAGL, "CFN_" "BUILT_IN_CIMAGL");
add_function (BUILT_IN_CLOG, "CFN_" "BUILT_IN_CLOG");
add_function (BUILT_IN_CLOGF, "CFN_" "BUILT_IN_CLOGF");
add_function (BUILT_IN_CLOGL, "CFN_" "BUILT_IN_CLOGL");
add_function (BUILT_IN_CLOG10, "CFN_" "BUILT_IN_CLOG10");
add_function (BUILT_IN_CLOG10F, "CFN_" "BUILT_IN_CLOG10F");
add_function (BUILT_IN_CLOG10L, "CFN_" "BUILT_IN_CLOG10L");
add_function (BUILT_IN_CONJ, "CFN_" "BUILT_IN_CONJ");
add_function (BUILT_IN_CONJF, "CFN_" "BUILT_IN_CONJF");
add_function (BUILT_IN_CONJL, "CFN_" "BUILT_IN_CONJL");
add_function (BUILT_IN_CPOW, "CFN_" "BUILT_IN_CPOW");
add_function (BUILT_IN_CPOWF, "CFN_" "BUILT_IN_CPOWF");
add_function (BUILT_IN_CPOWL, "CFN_" "BUILT_IN_CPOWL");
add_function (BUILT_IN_CPROJ, "CFN_" "BUILT_IN_CPROJ");
add_function (BUILT_IN_CPROJF, "CFN_" "BUILT_IN_CPROJF");
add_function (BUILT_IN_CPROJL, "CFN_" "BUILT_IN_CPROJL");
add_function (BUILT_IN_CREAL, "CFN_" "BUILT_IN_CREAL");
add_function (BUILT_IN_CREALF, "CFN_" "BUILT_IN_CREALF");
add_function (BUILT_IN_CREALL, "CFN_" "BUILT_IN_CREALL");
add_function (BUILT_IN_CSIN, "CFN_" "BUILT_IN_CSIN");
add_function (BUILT_IN_CSINF, "CFN_" "BUILT_IN_CSINF");
add_function (BUILT_IN_CSINH, "CFN_" "BUILT_IN_CSINH");
add_function (BUILT_IN_CSINHF, "CFN_" "BUILT_IN_CSINHF");
add_function (BUILT_IN_CSINHL, "CFN_" "BUILT_IN_CSINHL");
add_function (BUILT_IN_CSINL, "CFN_" "BUILT_IN_CSINL");
add_function (BUILT_IN_CSQRT, "CFN_" "BUILT_IN_CSQRT");
add_function (BUILT_IN_CSQRTF, "CFN_" "BUILT_IN_CSQRTF");
add_function (BUILT_IN_CSQRTL, "CFN_" "BUILT_IN_CSQRTL");
add_function (BUILT_IN_CTAN, "CFN_" "BUILT_IN_CTAN");
add_function (BUILT_IN_CTANF, "CFN_" "BUILT_IN_CTANF");
add_function (BUILT_IN_CTANH, "CFN_" "BUILT_IN_CTANH");
add_function (BUILT_IN_CTANHF, "CFN_" "BUILT_IN_CTANHF");
add_function (BUILT_IN_CTANHL, "CFN_" "BUILT_IN_CTANHL");
add_function (BUILT_IN_CTANL, "CFN_" "BUILT_IN_CTANL");


add_function (BUILT_IN_BCMP, "CFN_" "BUILT_IN_BCMP");
add_function (BUILT_IN_BCOPY, "CFN_" "BUILT_IN_BCOPY");
add_function (BUILT_IN_BZERO, "CFN_" "BUILT_IN_BZERO");
add_function (BUILT_IN_INDEX, "CFN_" "BUILT_IN_INDEX");
add_function (BUILT_IN_MEMCHR, "CFN_" "BUILT_IN_MEMCHR");
add_function (BUILT_IN_MEMCMP, "CFN_" "BUILT_IN_MEMCMP");
add_function (BUILT_IN_MEMCPY, "CFN_" "BUILT_IN_MEMCPY");
add_function (BUILT_IN_MEMMOVE, "CFN_" "BUILT_IN_MEMMOVE");
add_function (BUILT_IN_MEMPCPY, "CFN_" "BUILT_IN_MEMPCPY");
add_function (BUILT_IN_MEMSET, "CFN_" "BUILT_IN_MEMSET");
add_function (BUILT_IN_RINDEX, "CFN_" "BUILT_IN_RINDEX");
add_function (BUILT_IN_STPCPY, "CFN_" "BUILT_IN_STPCPY");
add_function (BUILT_IN_STPNCPY, "CFN_" "BUILT_IN_STPNCPY");
add_function (BUILT_IN_STRCASECMP, "CFN_" "BUILT_IN_STRCASECMP");
add_function (BUILT_IN_STRCAT, "CFN_" "BUILT_IN_STRCAT");
add_function (BUILT_IN_STRCHR, "CFN_" "BUILT_IN_STRCHR");
add_function (BUILT_IN_STRCMP, "CFN_" "BUILT_IN_STRCMP");
add_function (BUILT_IN_STRCPY, "CFN_" "BUILT_IN_STRCPY");
add_function (BUILT_IN_STRCSPN, "CFN_" "BUILT_IN_STRCSPN");
add_function (BUILT_IN_STRDUP, "CFN_" "BUILT_IN_STRDUP");
add_function (BUILT_IN_STRNDUP, "CFN_" "BUILT_IN_STRNDUP");
add_function (BUILT_IN_STRLEN, "CFN_" "BUILT_IN_STRLEN");
add_function (BUILT_IN_STRNCASECMP, "CFN_" "BUILT_IN_STRNCASECMP");
add_function (BUILT_IN_STRNCAT, "CFN_" "BUILT_IN_STRNCAT");
add_function (BUILT_IN_STRNCMP, "CFN_" "BUILT_IN_STRNCMP");
add_function (BUILT_IN_STRNCPY, "CFN_" "BUILT_IN_STRNCPY");
add_function (BUILT_IN_STRNLEN, "CFN_" "BUILT_IN_STRNLEN");
add_function (BUILT_IN_STRPBRK, "CFN_" "BUILT_IN_STRPBRK");
add_function (BUILT_IN_STRRCHR, "CFN_" "BUILT_IN_STRRCHR");
add_function (BUILT_IN_STRSPN, "CFN_" "BUILT_IN_STRSPN");
add_function (BUILT_IN_STRSTR, "CFN_" "BUILT_IN_STRSTR");


add_function (BUILT_IN_FPRINTF, "CFN_" "BUILT_IN_FPRINTF");
add_function (BUILT_IN_FPRINTF_UNLOCKED, "CFN_" "BUILT_IN_FPRINTF_UNLOCKED");
add_function (BUILT_IN_PUTC, "CFN_" "BUILT_IN_PUTC");
add_function (BUILT_IN_PUTC_UNLOCKED, "CFN_" "BUILT_IN_PUTC_UNLOCKED");
add_function (BUILT_IN_FPUTC, "CFN_" "BUILT_IN_FPUTC");
add_function (BUILT_IN_FPUTC_UNLOCKED, "CFN_" "BUILT_IN_FPUTC_UNLOCKED");
add_function (BUILT_IN_FPUTS, "CFN_" "BUILT_IN_FPUTS");
add_function (BUILT_IN_FPUTS_UNLOCKED, "CFN_" "BUILT_IN_FPUTS_UNLOCKED");
add_function (BUILT_IN_FSCANF, "CFN_" "BUILT_IN_FSCANF");
add_function (BUILT_IN_FWRITE, "CFN_" "BUILT_IN_FWRITE");
add_function (BUILT_IN_FWRITE_UNLOCKED, "CFN_" "BUILT_IN_FWRITE_UNLOCKED");
add_function (BUILT_IN_PRINTF, "CFN_" "BUILT_IN_PRINTF");
add_function (BUILT_IN_PRINTF_UNLOCKED, "CFN_" "BUILT_IN_PRINTF_UNLOCKED");
add_function (BUILT_IN_PUTCHAR, "CFN_" "BUILT_IN_PUTCHAR");
add_function (BUILT_IN_PUTCHAR_UNLOCKED, "CFN_" "BUILT_IN_PUTCHAR_UNLOCKED");
add_function (BUILT_IN_PUTS, "CFN_" "BUILT_IN_PUTS");
add_function (BUILT_IN_PUTS_UNLOCKED, "CFN_" "BUILT_IN_PUTS_UNLOCKED");
add_function (BUILT_IN_SCANF, "CFN_" "BUILT_IN_SCANF");
add_function (BUILT_IN_SNPRINTF, "CFN_" "BUILT_IN_SNPRINTF");

add_function (BUILT_IN_SPRINTF, "CFN_" "BUILT_IN_SPRINTF");
add_function (BUILT_IN_SSCANF, "CFN_" "BUILT_IN_SSCANF");
add_function (BUILT_IN_VFPRINTF, "CFN_" "BUILT_IN_VFPRINTF");
add_function (BUILT_IN_VFSCANF, "CFN_" "BUILT_IN_VFSCANF");
add_function (BUILT_IN_VPRINTF, "CFN_" "BUILT_IN_VPRINTF");
add_function (BUILT_IN_VSCANF, "CFN_" "BUILT_IN_VSCANF");
add_function (BUILT_IN_VSNPRINTF, "CFN_" "BUILT_IN_VSNPRINTF");
add_function (BUILT_IN_VSPRINTF, "CFN_" "BUILT_IN_VSPRINTF");
add_function (BUILT_IN_VSSCANF, "CFN_" "BUILT_IN_VSSCANF");


add_function (BUILT_IN_ISALNUM, "CFN_" "BUILT_IN_ISALNUM");
add_function (BUILT_IN_ISALPHA, "CFN_" "BUILT_IN_ISALPHA");
add_function (BUILT_IN_ISASCII, "CFN_" "BUILT_IN_ISASCII");
add_function (BUILT_IN_ISBLANK, "CFN_" "BUILT_IN_ISBLANK");
add_function (BUILT_IN_ISCNTRL, "CFN_" "BUILT_IN_ISCNTRL");
add_function (BUILT_IN_ISDIGIT, "CFN_" "BUILT_IN_ISDIGIT");
add_function (BUILT_IN_ISGRAPH, "CFN_" "BUILT_IN_ISGRAPH");
add_function (BUILT_IN_ISLOWER, "CFN_" "BUILT_IN_ISLOWER");
add_function (BUILT_IN_ISPRINT, "CFN_" "BUILT_IN_ISPRINT");
add_function (BUILT_IN_ISPUNCT, "CFN_" "BUILT_IN_ISPUNCT");
add_function (BUILT_IN_ISSPACE, "CFN_" "BUILT_IN_ISSPACE");
add_function (BUILT_IN_ISUPPER, "CFN_" "BUILT_IN_ISUPPER");
add_function (BUILT_IN_ISXDIGIT, "CFN_" "BUILT_IN_ISXDIGIT");
add_function (BUILT_IN_TOASCII, "CFN_" "BUILT_IN_TOASCII");
add_function (BUILT_IN_TOLOWER, "CFN_" "BUILT_IN_TOLOWER");
add_function (BUILT_IN_TOUPPER, "CFN_" "BUILT_IN_TOUPPER");


add_function (BUILT_IN_ISWALNUM, "CFN_" "BUILT_IN_ISWALNUM");
add_function (BUILT_IN_ISWALPHA, "CFN_" "BUILT_IN_ISWALPHA");
add_function (BUILT_IN_ISWBLANK, "CFN_" "BUILT_IN_ISWBLANK");
add_function (BUILT_IN_ISWCNTRL, "CFN_" "BUILT_IN_ISWCNTRL");
add_function (BUILT_IN_ISWDIGIT, "CFN_" "BUILT_IN_ISWDIGIT");
add_function (BUILT_IN_ISWGRAPH, "CFN_" "BUILT_IN_ISWGRAPH");
add_function (BUILT_IN_ISWLOWER, "CFN_" "BUILT_IN_ISWLOWER");
add_function (BUILT_IN_ISWPRINT, "CFN_" "BUILT_IN_ISWPRINT");
add_function (BUILT_IN_ISWPUNCT, "CFN_" "BUILT_IN_ISWPUNCT");
add_function (BUILT_IN_ISWSPACE, "CFN_" "BUILT_IN_ISWSPACE");
add_function (BUILT_IN_ISWUPPER, "CFN_" "BUILT_IN_ISWUPPER");
add_function (BUILT_IN_ISWXDIGIT, "CFN_" "BUILT_IN_ISWXDIGIT");
add_function (BUILT_IN_TOWLOWER, "CFN_" "BUILT_IN_TOWLOWER");
add_function (BUILT_IN_TOWUPPER, "CFN_" "BUILT_IN_TOWUPPER");


add_function (BUILT_IN_ADD_OVERFLOW, "CFN_" "BUILT_IN_ADD_OVERFLOW");
add_function (BUILT_IN_SUB_OVERFLOW, "CFN_" "BUILT_IN_SUB_OVERFLOW");
add_function (BUILT_IN_MUL_OVERFLOW, "CFN_" "BUILT_IN_MUL_OVERFLOW");
add_function (BUILT_IN_ADD_OVERFLOW_P, "CFN_" "BUILT_IN_ADD_OVERFLOW_P");
add_function (BUILT_IN_SUB_OVERFLOW_P, "CFN_" "BUILT_IN_SUB_OVERFLOW_P");
add_function (BUILT_IN_MUL_OVERFLOW_P, "CFN_" "BUILT_IN_MUL_OVERFLOW_P");

add_function (BUILT_IN_SADD_OVERFLOW, "CFN_" "BUILT_IN_SADD_OVERFLOW");
add_function (BUILT_IN_SADDL_OVERFLOW, "CFN_" "BUILT_IN_SADDL_OVERFLOW");
add_function (BUILT_IN_SADDLL_OVERFLOW, "CFN_" "BUILT_IN_SADDLL_OVERFLOW");
add_function (BUILT_IN_SSUB_OVERFLOW, "CFN_" "BUILT_IN_SSUB_OVERFLOW");
add_function (BUILT_IN_SSUBL_OVERFLOW, "CFN_" "BUILT_IN_SSUBL_OVERFLOW");
add_function (BUILT_IN_SSUBLL_OVERFLOW, "CFN_" "BUILT_IN_SSUBLL_OVERFLOW");
add_function (BUILT_IN_SMUL_OVERFLOW, "CFN_" "BUILT_IN_SMUL_OVERFLOW");
add_function (BUILT_IN_SMULL_OVERFLOW, "CFN_" "BUILT_IN_SMULL_OVERFLOW");
add_function (BUILT_IN_SMULLL_OVERFLOW, "CFN_" "BUILT_IN_SMULLL_OVERFLOW");
add_function (BUILT_IN_UADD_OVERFLOW, "CFN_" "BUILT_IN_UADD_OVERFLOW");
add_function (BUILT_IN_UADDL_OVERFLOW, "CFN_" "BUILT_IN_UADDL_OVERFLOW");
add_function (BUILT_IN_UADDLL_OVERFLOW, "CFN_" "BUILT_IN_UADDLL_OVERFLOW");
add_function (BUILT_IN_USUB_OVERFLOW, "CFN_" "BUILT_IN_USUB_OVERFLOW");
add_function (BUILT_IN_USUBL_OVERFLOW, "CFN_" "BUILT_IN_USUBL_OVERFLOW");
add_function (BUILT_IN_USUBLL_OVERFLOW, "CFN_" "BUILT_IN_USUBLL_OVERFLOW");
add_function (BUILT_IN_UMUL_OVERFLOW, "CFN_" "BUILT_IN_UMUL_OVERFLOW");
add_function (BUILT_IN_UMULL_OVERFLOW, "CFN_" "BUILT_IN_UMULL_OVERFLOW");
add_function (BUILT_IN_UMULLL_OVERFLOW, "CFN_" "BUILT_IN_UMULLL_OVERFLOW");


add_function (BUILT_IN_ABORT, "CFN_" "BUILT_IN_ABORT");
add_function (BUILT_IN_ABS, "CFN_" "BUILT_IN_ABS");
add_function (BUILT_IN_AGGREGATE_INCOMING_ADDRESS, "CFN_" "BUILT_IN_AGGREGATE_INCOMING_ADDRESS");
add_function (BUILT_IN_ALLOCA, "CFN_" "BUILT_IN_ALLOCA");
add_function (BUILT_IN_APPLY, "CFN_" "BUILT_IN_APPLY");
add_function (BUILT_IN_APPLY_ARGS, "CFN_" "BUILT_IN_APPLY_ARGS");
add_function (BUILT_IN_BSWAP16, "CFN_" "BUILT_IN_BSWAP16");
add_function (BUILT_IN_BSWAP32, "CFN_" "BUILT_IN_BSWAP32");
add_function (BUILT_IN_BSWAP64, "CFN_" "BUILT_IN_BSWAP64");
add_function (BUILT_IN_BSWAP128, "CFN_" "BUILT_IN_BSWAP128");

add_function (BUILT_IN_CLEAR_CACHE, "CFN_" "BUILT_IN_CLEAR_CACHE");

add_function (BUILT_IN_CALLOC, "CFN_" "BUILT_IN_CALLOC");
add_function (BUILT_IN_CLASSIFY_TYPE, "CFN_" "BUILT_IN_CLASSIFY_TYPE");
add_function (BUILT_IN_CLZ, "CFN_" "BUILT_IN_CLZ");
add_function (BUILT_IN_CLZIMAX, "CFN_" "BUILT_IN_CLZIMAX");
add_function (BUILT_IN_CLZL, "CFN_" "BUILT_IN_CLZL");
add_function (BUILT_IN_CLZLL, "CFN_" "BUILT_IN_CLZLL");
add_function (BUILT_IN_CONSTANT_P, "CFN_" "BUILT_IN_CONSTANT_P");
add_function (BUILT_IN_CTZ, "CFN_" "BUILT_IN_CTZ");
add_function (BUILT_IN_CTZIMAX, "CFN_" "BUILT_IN_CTZIMAX");
add_function (BUILT_IN_CTZL, "CFN_" "BUILT_IN_CTZL");
add_function (BUILT_IN_CTZLL, "CFN_" "BUILT_IN_CTZLL");
add_function (BUILT_IN_CLRSB, "CFN_" "BUILT_IN_CLRSB");
add_function (BUILT_IN_CLRSBIMAX, "CFN_" "BUILT_IN_CLRSBIMAX");
add_function (BUILT_IN_CLRSBL, "CFN_" "BUILT_IN_CLRSBL");
add_function (BUILT_IN_CLRSBLL, "CFN_" "BUILT_IN_CLRSBLL");
add_function (BUILT_IN_DCGETTEXT, "CFN_" "BUILT_IN_DCGETTEXT");
add_function (BUILT_IN_DGETTEXT, "CFN_" "BUILT_IN_DGETTEXT");
add_function (BUILT_IN_DWARF_CFA, "CFN_" "BUILT_IN_DWARF_CFA");
add_function (BUILT_IN_DWARF_SP_COLUMN, "CFN_" "BUILT_IN_DWARF_SP_COLUMN");
add_function (BUILT_IN_EH_RETURN, "CFN_" "BUILT_IN_EH_RETURN");
add_function (BUILT_IN_EH_RETURN_DATA_REGNO, "CFN_" "BUILT_IN_EH_RETURN_DATA_REGNO");
add_function (BUILT_IN_EXECL, "CFN_" "BUILT_IN_EXECL");
add_function (BUILT_IN_EXECLP, "CFN_" "BUILT_IN_EXECLP");
add_function (BUILT_IN_EXECLE, "CFN_" "BUILT_IN_EXECLE");
add_function (BUILT_IN_EXECV, "CFN_" "BUILT_IN_EXECV");
add_function (BUILT_IN_EXECVP, "CFN_" "BUILT_IN_EXECVP");
add_function (BUILT_IN_EXECVE, "CFN_" "BUILT_IN_EXECVE");
add_function (BUILT_IN_EXIT, "CFN_" "BUILT_IN_EXIT");
add_function (BUILT_IN_EXPECT, "CFN_" "BUILT_IN_EXPECT");
add_function (BUILT_IN_EXPECT_WITH_PROBABILITY, "CFN_" "BUILT_IN_EXPECT_WITH_PROBABILITY");
add_function (BUILT_IN_ASSUME_ALIGNED, "CFN_" "BUILT_IN_ASSUME_ALIGNED");
add_function (BUILT_IN_EXTEND_POINTER, "CFN_" "BUILT_IN_EXTEND_POINTER");
add_function (BUILT_IN_EXTRACT_RETURN_ADDR, "CFN_" "BUILT_IN_EXTRACT_RETURN_ADDR");
add_function (BUILT_IN_FFS, "CFN_" "BUILT_IN_FFS");
add_function (BUILT_IN_FFSIMAX, "CFN_" "BUILT_IN_FFSIMAX");
add_function (BUILT_IN_FFSL, "CFN_" "BUILT_IN_FFSL");
add_function (BUILT_IN_FFSLL, "CFN_" "BUILT_IN_FFSLL");
add_function (BUILT_IN_FORK, "CFN_" "BUILT_IN_FORK");
add_function (BUILT_IN_FRAME_ADDRESS, "CFN_" "BUILT_IN_FRAME_ADDRESS");

add_function (BUILT_IN_FREE, "CFN_" "BUILT_IN_FREE");
add_function (BUILT_IN_FROB_RETURN_ADDR, "CFN_" "BUILT_IN_FROB_RETURN_ADDR");
add_function (BUILT_IN_GETTEXT, "CFN_" "BUILT_IN_GETTEXT");
add_function (BUILT_IN_IMAXABS, "CFN_" "BUILT_IN_IMAXABS");
add_function (BUILT_IN_INIT_DWARF_REG_SIZES, "CFN_" "BUILT_IN_INIT_DWARF_REG_SIZES");
add_function (BUILT_IN_FINITE, "CFN_" "BUILT_IN_FINITE");
add_function (BUILT_IN_FINITEF, "CFN_" "BUILT_IN_FINITEF");
add_function (BUILT_IN_FINITEL, "CFN_" "BUILT_IN_FINITEL");
add_function (BUILT_IN_FINITED32, "CFN_" "BUILT_IN_FINITED32");
add_function (BUILT_IN_FINITED64, "CFN_" "BUILT_IN_FINITED64");
add_function (BUILT_IN_FINITED128, "CFN_" "BUILT_IN_FINITED128");
add_function (BUILT_IN_FPCLASSIFY, "CFN_" "BUILT_IN_FPCLASSIFY");
add_function (BUILT_IN_ISFINITE, "CFN_" "BUILT_IN_ISFINITE");
add_function (BUILT_IN_ISINF_SIGN, "CFN_" "BUILT_IN_ISINF_SIGN");
add_function (BUILT_IN_ISINF, "CFN_" "BUILT_IN_ISINF");
add_function (BUILT_IN_ISINFF, "CFN_" "BUILT_IN_ISINFF");
add_function (BUILT_IN_ISINFL, "CFN_" "BUILT_IN_ISINFL");
add_function (BUILT_IN_ISINFD32, "CFN_" "BUILT_IN_ISINFD32");
add_function (BUILT_IN_ISINFD64, "CFN_" "BUILT_IN_ISINFD64");
add_function (BUILT_IN_ISINFD128, "CFN_" "BUILT_IN_ISINFD128");
add_function (BUILT_IN_ISNAN, "CFN_" "BUILT_IN_ISNAN");
add_function (BUILT_IN_ISNANF, "CFN_" "BUILT_IN_ISNANF");
add_function (BUILT_IN_ISNANL, "CFN_" "BUILT_IN_ISNANL");
add_function (BUILT_IN_ISNAND32, "CFN_" "BUILT_IN_ISNAND32");
add_function (BUILT_IN_ISNAND64, "CFN_" "BUILT_IN_ISNAND64");
add_function (BUILT_IN_ISNAND128, "CFN_" "BUILT_IN_ISNAND128");
add_function (BUILT_IN_ISNORMAL, "CFN_" "BUILT_IN_ISNORMAL");
add_function (BUILT_IN_ISGREATER, "CFN_" "BUILT_IN_ISGREATER");
add_function (BUILT_IN_ISGREATEREQUAL, "CFN_" "BUILT_IN_ISGREATEREQUAL");
add_function (BUILT_IN_ISLESS, "CFN_" "BUILT_IN_ISLESS");
add_function (BUILT_IN_ISLESSEQUAL, "CFN_" "BUILT_IN_ISLESSEQUAL");
add_function (BUILT_IN_ISLESSGREATER, "CFN_" "BUILT_IN_ISLESSGREATER");
add_function (BUILT_IN_ISUNORDERED, "CFN_" "BUILT_IN_ISUNORDERED");
add_function (BUILT_IN_LABS, "CFN_" "BUILT_IN_LABS");
add_function (BUILT_IN_LLABS, "CFN_" "BUILT_IN_LLABS");
add_function (BUILT_IN_LONGJMP, "CFN_" "BUILT_IN_LONGJMP");

add_function (BUILT_IN_MALLOC, "CFN_" "BUILT_IN_MALLOC");
add_function (BUILT_IN_NEXT_ARG, "CFN_" "BUILT_IN_NEXT_ARG");
add_function (BUILT_IN_PARITY, "CFN_" "BUILT_IN_PARITY");
add_function (BUILT_IN_PARITYIMAX, "CFN_" "BUILT_IN_PARITYIMAX");
add_function (BUILT_IN_PARITYL, "CFN_" "BUILT_IN_PARITYL");
add_function (BUILT_IN_PARITYLL, "CFN_" "BUILT_IN_PARITYLL");
add_function (BUILT_IN_POPCOUNT, "CFN_" "BUILT_IN_POPCOUNT");
add_function (BUILT_IN_POPCOUNTIMAX, "CFN_" "BUILT_IN_POPCOUNTIMAX");
add_function (BUILT_IN_POPCOUNTL, "CFN_" "BUILT_IN_POPCOUNTL");
add_function (BUILT_IN_POPCOUNTLL, "CFN_" "BUILT_IN_POPCOUNTLL");
add_function (BUILT_IN_POSIX_MEMALIGN, "CFN_" "BUILT_IN_POSIX_MEMALIGN");
add_function (BUILT_IN_PREFETCH, "CFN_" "BUILT_IN_PREFETCH");
add_function (BUILT_IN_REALLOC, "CFN_" "BUILT_IN_REALLOC");
add_function (BUILT_IN_RETURN, "CFN_" "BUILT_IN_RETURN");
add_function (BUILT_IN_RETURN_ADDRESS, "CFN_" "BUILT_IN_RETURN_ADDRESS");
add_function (BUILT_IN_SAVEREGS, "CFN_" "BUILT_IN_SAVEREGS");
add_function (BUILT_IN_SETJMP, "CFN_" "BUILT_IN_SETJMP");
add_function (BUILT_IN_STRFMON, "CFN_" "BUILT_IN_STRFMON");
add_function (BUILT_IN_STRFTIME, "CFN_" "BUILT_IN_STRFTIME");
add_function (BUILT_IN_TRAP, "CFN_" "BUILT_IN_TRAP");
add_function (BUILT_IN_UNREACHABLE, "CFN_" "BUILT_IN_UNREACHABLE");
add_function (BUILT_IN_UNWIND_INIT, "CFN_" "BUILT_IN_UNWIND_INIT");
add_function (BUILT_IN_UPDATE_SETJMP_BUF, "CFN_" "BUILT_IN_UPDATE_SETJMP_BUF");
add_function (BUILT_IN_VA_COPY, "CFN_" "BUILT_IN_VA_COPY");
add_function (BUILT_IN_VA_END, "CFN_" "BUILT_IN_VA_END");
add_function (BUILT_IN_VA_START, "CFN_" "BUILT_IN_VA_START");
add_function (BUILT_IN_VA_ARG_PACK, "CFN_" "BUILT_IN_VA_ARG_PACK");
add_function (BUILT_IN_VA_ARG_PACK_LEN, "CFN_" "BUILT_IN_VA_ARG_PACK_LEN");
add_function (BUILT_IN__EXIT, "CFN_" "BUILT_IN__EXIT");
add_function (BUILT_IN__EXIT2, "CFN_" "BUILT_IN__EXIT2");


add_function (BUILT_IN_INIT_TRAMPOLINE, "CFN_" "BUILT_IN_INIT_TRAMPOLINE");
add_function (BUILT_IN_INIT_HEAP_TRAMPOLINE, "CFN_" "BUILT_IN_INIT_HEAP_TRAMPOLINE");
add_function (BUILT_IN_ADJUST_TRAMPOLINE, "CFN_" "BUILT_IN_ADJUST_TRAMPOLINE");
add_function (BUILT_IN_INIT_DESCRIPTOR, "CFN_" "BUILT_IN_INIT_DESCRIPTOR");
add_function (BUILT_IN_ADJUST_DESCRIPTOR, "CFN_" "BUILT_IN_ADJUST_DESCRIPTOR");
add_function (BUILT_IN_NONLOCAL_GOTO, "CFN_" "BUILT_IN_NONLOCAL_GOTO");


add_function (BUILT_IN_SETJMP_SETUP, "CFN_" "BUILT_IN_SETJMP_SETUP");
add_function (BUILT_IN_SETJMP_RECEIVER, "CFN_" "BUILT_IN_SETJMP_RECEIVER");


add_function (BUILT_IN_STACK_SAVE, "CFN_" "BUILT_IN_STACK_SAVE");
add_function (BUILT_IN_STACK_RESTORE, "CFN_" "BUILT_IN_STACK_RESTORE");
add_function (BUILT_IN_ALLOCA_WITH_ALIGN, "CFN_" "BUILT_IN_ALLOCA_WITH_ALIGN");
add_function (BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX, "CFN_" "BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX");



add_function (BUILT_IN_MEMCMP_EQ, "CFN_" "BUILT_IN_MEMCMP_EQ");



add_function (BUILT_IN_STRCMP_EQ, "CFN_" "BUILT_IN_STRCMP_EQ");
add_function (BUILT_IN_STRNCMP_EQ, "CFN_" "BUILT_IN_STRNCMP_EQ");


add_function (BUILT_IN_OBJECT_SIZE, "CFN_" "BUILT_IN_OBJECT_SIZE");
add_function (BUILT_IN_MEMCPY_CHK, "CFN_" "BUILT_IN_MEMCPY_CHK");
add_function (BUILT_IN_MEMMOVE_CHK, "CFN_" "BUILT_IN_MEMMOVE_CHK");
add_function (BUILT_IN_MEMPCPY_CHK, "CFN_" "BUILT_IN_MEMPCPY_CHK");
add_function (BUILT_IN_MEMSET_CHK, "CFN_" "BUILT_IN_MEMSET_CHK");
add_function (BUILT_IN_STPCPY_CHK, "CFN_" "BUILT_IN_STPCPY_CHK");
add_function (BUILT_IN_STPNCPY_CHK, "CFN_" "BUILT_IN_STPNCPY_CHK");
add_function (BUILT_IN_STRCAT_CHK, "CFN_" "BUILT_IN_STRCAT_CHK");
add_function (BUILT_IN_STRCPY_CHK, "CFN_" "BUILT_IN_STRCPY_CHK");
add_function (BUILT_IN_STRNCAT_CHK, "CFN_" "BUILT_IN_STRNCAT_CHK");
add_function (BUILT_IN_STRNCPY_CHK, "CFN_" "BUILT_IN_STRNCPY_CHK");
add_function (BUILT_IN_SNPRINTF_CHK, "CFN_" "BUILT_IN_SNPRINTF_CHK");
add_function (BUILT_IN_SPRINTF_CHK, "CFN_" "BUILT_IN_SPRINTF_CHK");
add_function (BUILT_IN_VSNPRINTF_CHK, "CFN_" "BUILT_IN_VSNPRINTF_CHK");
add_function (BUILT_IN_VSPRINTF_CHK, "CFN_" "BUILT_IN_VSPRINTF_CHK");
add_function (BUILT_IN_FPRINTF_CHK, "CFN_" "BUILT_IN_FPRINTF_CHK");
add_function (BUILT_IN_PRINTF_CHK, "CFN_" "BUILT_IN_PRINTF_CHK");
add_function (BUILT_IN_VFPRINTF_CHK, "CFN_" "BUILT_IN_VFPRINTF_CHK");
add_function (BUILT_IN_VPRINTF_CHK, "CFN_" "BUILT_IN_VPRINTF_CHK");


add_function (BUILT_IN_PROFILE_FUNC_ENTER, "CFN_" "BUILT_IN_PROFILE_FUNC_ENTER");

add_function (BUILT_IN_PROFILE_FUNC_EXIT, "CFN_" "BUILT_IN_PROFILE_FUNC_EXIT");



add_function (BUILT_IN_THREAD_POINTER, "CFN_" "BUILT_IN_THREAD_POINTER");




add_function (BUILT_IN_SET_THREAD_POINTER, "CFN_" "BUILT_IN_SET_THREAD_POINTER");





add_function (BUILT_IN_EMUTLS_GET_ADDRESS, "CFN_" "BUILT_IN_EMUTLS_GET_ADDRESS");




add_function (BUILT_IN_EMUTLS_REGISTER_COMMON, "CFN_" "BUILT_IN_EMUTLS_REGISTER_COMMON");
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
add_function (BUILT_IN_SPECULATION_SAFE_VALUE_N, "CFN_" "BUILT_IN_SPECULATION_SAFE_VALUE_N");


add_function (BUILT_IN_SPECULATION_SAFE_VALUE_PTR, "CFN_" "BUILT_IN_SPECULATION_SAFE_VALUE_PTR");


add_function (BUILT_IN_SPECULATION_SAFE_VALUE_1, "CFN_" "BUILT_IN_SPECULATION_SAFE_VALUE_1");

add_function (BUILT_IN_SPECULATION_SAFE_VALUE_2, "CFN_" "BUILT_IN_SPECULATION_SAFE_VALUE_2");

add_function (BUILT_IN_SPECULATION_SAFE_VALUE_4, "CFN_" "BUILT_IN_SPECULATION_SAFE_VALUE_4");

add_function (BUILT_IN_SPECULATION_SAFE_VALUE_8, "CFN_" "BUILT_IN_SPECULATION_SAFE_VALUE_8");

add_function (BUILT_IN_SPECULATION_SAFE_VALUE_16, "CFN_" "BUILT_IN_SPECULATION_SAFE_VALUE_16");




add_function (BUILT_IN_UNWIND_RESUME, "CFN_" "BUILT_IN_UNWIND_RESUME");
add_function (BUILT_IN_CXA_END_CLEANUP, "CFN_" "BUILT_IN_CXA_END_CLEANUP");
add_function (BUILT_IN_EH_POINTER, "CFN_" "BUILT_IN_EH_POINTER");
add_function (BUILT_IN_EH_FILTER, "CFN_" "BUILT_IN_EH_FILTER");
add_function (BUILT_IN_EH_COPY_VALUES, "CFN_" "BUILT_IN_EH_COPY_VALUES");


add_function (BUILT_IN_FILE, "CFN_" "BUILT_IN_FILE");
add_function (BUILT_IN_FUNCTION, "CFN_" "BUILT_IN_FUNCTION");
add_function (BUILT_IN_LINE, "CFN_" "BUILT_IN_LINE");


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def"
add_function (BUILT_IN_SYNC_FETCH_AND_ADD_N, "CFN_" "BUILT_IN_SYNC_FETCH_AND_ADD_N");

add_function (BUILT_IN_SYNC_FETCH_AND_ADD_1, "CFN_" "BUILT_IN_SYNC_FETCH_AND_ADD_1");

add_function (BUILT_IN_SYNC_FETCH_AND_ADD_2, "CFN_" "BUILT_IN_SYNC_FETCH_AND_ADD_2");

add_function (BUILT_IN_SYNC_FETCH_AND_ADD_4, "CFN_" "BUILT_IN_SYNC_FETCH_AND_ADD_4");

add_function (BUILT_IN_SYNC_FETCH_AND_ADD_8, "CFN_" "BUILT_IN_SYNC_FETCH_AND_ADD_8");

add_function (BUILT_IN_SYNC_FETCH_AND_ADD_16, "CFN_" "BUILT_IN_SYNC_FETCH_AND_ADD_16");


add_function (BUILT_IN_SYNC_FETCH_AND_SUB_N, "CFN_" "BUILT_IN_SYNC_FETCH_AND_SUB_N");

add_function (BUILT_IN_SYNC_FETCH_AND_SUB_1, "CFN_" "BUILT_IN_SYNC_FETCH_AND_SUB_1");

add_function (BUILT_IN_SYNC_FETCH_AND_SUB_2, "CFN_" "BUILT_IN_SYNC_FETCH_AND_SUB_2");

add_function (BUILT_IN_SYNC_FETCH_AND_SUB_4, "CFN_" "BUILT_IN_SYNC_FETCH_AND_SUB_4");

add_function (BUILT_IN_SYNC_FETCH_AND_SUB_8, "CFN_" "BUILT_IN_SYNC_FETCH_AND_SUB_8");

add_function (BUILT_IN_SYNC_FETCH_AND_SUB_16, "CFN_" "BUILT_IN_SYNC_FETCH_AND_SUB_16");


add_function (BUILT_IN_SYNC_FETCH_AND_OR_N, "CFN_" "BUILT_IN_SYNC_FETCH_AND_OR_N");

add_function (BUILT_IN_SYNC_FETCH_AND_OR_1, "CFN_" "BUILT_IN_SYNC_FETCH_AND_OR_1");

add_function (BUILT_IN_SYNC_FETCH_AND_OR_2, "CFN_" "BUILT_IN_SYNC_FETCH_AND_OR_2");

add_function (BUILT_IN_SYNC_FETCH_AND_OR_4, "CFN_" "BUILT_IN_SYNC_FETCH_AND_OR_4");

add_function (BUILT_IN_SYNC_FETCH_AND_OR_8, "CFN_" "BUILT_IN_SYNC_FETCH_AND_OR_8");

add_function (BUILT_IN_SYNC_FETCH_AND_OR_16, "CFN_" "BUILT_IN_SYNC_FETCH_AND_OR_16");


add_function (BUILT_IN_SYNC_FETCH_AND_AND_N, "CFN_" "BUILT_IN_SYNC_FETCH_AND_AND_N");

add_function (BUILT_IN_SYNC_FETCH_AND_AND_1, "CFN_" "BUILT_IN_SYNC_FETCH_AND_AND_1");

add_function (BUILT_IN_SYNC_FETCH_AND_AND_2, "CFN_" "BUILT_IN_SYNC_FETCH_AND_AND_2");

add_function (BUILT_IN_SYNC_FETCH_AND_AND_4, "CFN_" "BUILT_IN_SYNC_FETCH_AND_AND_4");

add_function (BUILT_IN_SYNC_FETCH_AND_AND_8, "CFN_" "BUILT_IN_SYNC_FETCH_AND_AND_8");

add_function (BUILT_IN_SYNC_FETCH_AND_AND_16, "CFN_" "BUILT_IN_SYNC_FETCH_AND_AND_16");


add_function (BUILT_IN_SYNC_FETCH_AND_XOR_N, "CFN_" "BUILT_IN_SYNC_FETCH_AND_XOR_N");

add_function (BUILT_IN_SYNC_FETCH_AND_XOR_1, "CFN_" "BUILT_IN_SYNC_FETCH_AND_XOR_1");

add_function (BUILT_IN_SYNC_FETCH_AND_XOR_2, "CFN_" "BUILT_IN_SYNC_FETCH_AND_XOR_2");

add_function (BUILT_IN_SYNC_FETCH_AND_XOR_4, "CFN_" "BUILT_IN_SYNC_FETCH_AND_XOR_4");

add_function (BUILT_IN_SYNC_FETCH_AND_XOR_8, "CFN_" "BUILT_IN_SYNC_FETCH_AND_XOR_8");

add_function (BUILT_IN_SYNC_FETCH_AND_XOR_16, "CFN_" "BUILT_IN_SYNC_FETCH_AND_XOR_16");


add_function (BUILT_IN_SYNC_FETCH_AND_NAND_N, "CFN_" "BUILT_IN_SYNC_FETCH_AND_NAND_N");

add_function (BUILT_IN_SYNC_FETCH_AND_NAND_1, "CFN_" "BUILT_IN_SYNC_FETCH_AND_NAND_1");

add_function (BUILT_IN_SYNC_FETCH_AND_NAND_2, "CFN_" "BUILT_IN_SYNC_FETCH_AND_NAND_2");

add_function (BUILT_IN_SYNC_FETCH_AND_NAND_4, "CFN_" "BUILT_IN_SYNC_FETCH_AND_NAND_4");

add_function (BUILT_IN_SYNC_FETCH_AND_NAND_8, "CFN_" "BUILT_IN_SYNC_FETCH_AND_NAND_8");

add_function (BUILT_IN_SYNC_FETCH_AND_NAND_16, "CFN_" "BUILT_IN_SYNC_FETCH_AND_NAND_16");


add_function (BUILT_IN_SYNC_ADD_AND_FETCH_N, "CFN_" "BUILT_IN_SYNC_ADD_AND_FETCH_N");

add_function (BUILT_IN_SYNC_ADD_AND_FETCH_1, "CFN_" "BUILT_IN_SYNC_ADD_AND_FETCH_1");

add_function (BUILT_IN_SYNC_ADD_AND_FETCH_2, "CFN_" "BUILT_IN_SYNC_ADD_AND_FETCH_2");

add_function (BUILT_IN_SYNC_ADD_AND_FETCH_4, "CFN_" "BUILT_IN_SYNC_ADD_AND_FETCH_4");

add_function (BUILT_IN_SYNC_ADD_AND_FETCH_8, "CFN_" "BUILT_IN_SYNC_ADD_AND_FETCH_8");

add_function (BUILT_IN_SYNC_ADD_AND_FETCH_16, "CFN_" "BUILT_IN_SYNC_ADD_AND_FETCH_16");


add_function (BUILT_IN_SYNC_SUB_AND_FETCH_N, "CFN_" "BUILT_IN_SYNC_SUB_AND_FETCH_N");

add_function (BUILT_IN_SYNC_SUB_AND_FETCH_1, "CFN_" "BUILT_IN_SYNC_SUB_AND_FETCH_1");

add_function (BUILT_IN_SYNC_SUB_AND_FETCH_2, "CFN_" "BUILT_IN_SYNC_SUB_AND_FETCH_2");

add_function (BUILT_IN_SYNC_SUB_AND_FETCH_4, "CFN_" "BUILT_IN_SYNC_SUB_AND_FETCH_4");

add_function (BUILT_IN_SYNC_SUB_AND_FETCH_8, "CFN_" "BUILT_IN_SYNC_SUB_AND_FETCH_8");

add_function (BUILT_IN_SYNC_SUB_AND_FETCH_16, "CFN_" "BUILT_IN_SYNC_SUB_AND_FETCH_16");


add_function (BUILT_IN_SYNC_OR_AND_FETCH_N, "CFN_" "BUILT_IN_SYNC_OR_AND_FETCH_N");

add_function (BUILT_IN_SYNC_OR_AND_FETCH_1, "CFN_" "BUILT_IN_SYNC_OR_AND_FETCH_1");

add_function (BUILT_IN_SYNC_OR_AND_FETCH_2, "CFN_" "BUILT_IN_SYNC_OR_AND_FETCH_2");

add_function (BUILT_IN_SYNC_OR_AND_FETCH_4, "CFN_" "BUILT_IN_SYNC_OR_AND_FETCH_4");

add_function (BUILT_IN_SYNC_OR_AND_FETCH_8, "CFN_" "BUILT_IN_SYNC_OR_AND_FETCH_8");

add_function (BUILT_IN_SYNC_OR_AND_FETCH_16, "CFN_" "BUILT_IN_SYNC_OR_AND_FETCH_16");


add_function (BUILT_IN_SYNC_AND_AND_FETCH_N, "CFN_" "BUILT_IN_SYNC_AND_AND_FETCH_N");

add_function (BUILT_IN_SYNC_AND_AND_FETCH_1, "CFN_" "BUILT_IN_SYNC_AND_AND_FETCH_1");

add_function (BUILT_IN_SYNC_AND_AND_FETCH_2, "CFN_" "BUILT_IN_SYNC_AND_AND_FETCH_2");

add_function (BUILT_IN_SYNC_AND_AND_FETCH_4, "CFN_" "BUILT_IN_SYNC_AND_AND_FETCH_4");

add_function (BUILT_IN_SYNC_AND_AND_FETCH_8, "CFN_" "BUILT_IN_SYNC_AND_AND_FETCH_8");

add_function (BUILT_IN_SYNC_AND_AND_FETCH_16, "CFN_" "BUILT_IN_SYNC_AND_AND_FETCH_16");


add_function (BUILT_IN_SYNC_XOR_AND_FETCH_N, "CFN_" "BUILT_IN_SYNC_XOR_AND_FETCH_N");

add_function (BUILT_IN_SYNC_XOR_AND_FETCH_1, "CFN_" "BUILT_IN_SYNC_XOR_AND_FETCH_1");

add_function (BUILT_IN_SYNC_XOR_AND_FETCH_2, "CFN_" "BUILT_IN_SYNC_XOR_AND_FETCH_2");

add_function (BUILT_IN_SYNC_XOR_AND_FETCH_4, "CFN_" "BUILT_IN_SYNC_XOR_AND_FETCH_4");

add_function (BUILT_IN_SYNC_XOR_AND_FETCH_8, "CFN_" "BUILT_IN_SYNC_XOR_AND_FETCH_8");

add_function (BUILT_IN_SYNC_XOR_AND_FETCH_16, "CFN_" "BUILT_IN_SYNC_XOR_AND_FETCH_16");


add_function (BUILT_IN_SYNC_NAND_AND_FETCH_N, "CFN_" "BUILT_IN_SYNC_NAND_AND_FETCH_N");

add_function (BUILT_IN_SYNC_NAND_AND_FETCH_1, "CFN_" "BUILT_IN_SYNC_NAND_AND_FETCH_1");

add_function (BUILT_IN_SYNC_NAND_AND_FETCH_2, "CFN_" "BUILT_IN_SYNC_NAND_AND_FETCH_2");

add_function (BUILT_IN_SYNC_NAND_AND_FETCH_4, "CFN_" "BUILT_IN_SYNC_NAND_AND_FETCH_4");

add_function (BUILT_IN_SYNC_NAND_AND_FETCH_8, "CFN_" "BUILT_IN_SYNC_NAND_AND_FETCH_8");

add_function (BUILT_IN_SYNC_NAND_AND_FETCH_16, "CFN_" "BUILT_IN_SYNC_NAND_AND_FETCH_16");


add_function (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N, "CFN_" "BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N");


add_function (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1, "CFN_" "BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1");


add_function (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2, "CFN_" "BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2");


add_function (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4, "CFN_" "BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4");


add_function (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8, "CFN_" "BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8");


add_function (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16, "CFN_" "BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16");



add_function (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N, "CFN_" "BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N");


add_function (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1, "CFN_" "BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1");


add_function (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2, "CFN_" "BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2");


add_function (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4, "CFN_" "BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4");


add_function (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8, "CFN_" "BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8");


add_function (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16, "CFN_" "BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16");



add_function (BUILT_IN_SYNC_LOCK_TEST_AND_SET_N, "CFN_" "BUILT_IN_SYNC_LOCK_TEST_AND_SET_N");


add_function (BUILT_IN_SYNC_LOCK_TEST_AND_SET_1, "CFN_" "BUILT_IN_SYNC_LOCK_TEST_AND_SET_1");


add_function (BUILT_IN_SYNC_LOCK_TEST_AND_SET_2, "CFN_" "BUILT_IN_SYNC_LOCK_TEST_AND_SET_2");


add_function (BUILT_IN_SYNC_LOCK_TEST_AND_SET_4, "CFN_" "BUILT_IN_SYNC_LOCK_TEST_AND_SET_4");


add_function (BUILT_IN_SYNC_LOCK_TEST_AND_SET_8, "CFN_" "BUILT_IN_SYNC_LOCK_TEST_AND_SET_8");


add_function (BUILT_IN_SYNC_LOCK_TEST_AND_SET_16, "CFN_" "BUILT_IN_SYNC_LOCK_TEST_AND_SET_16");



add_function (BUILT_IN_SYNC_LOCK_RELEASE_N, "CFN_" "BUILT_IN_SYNC_LOCK_RELEASE_N");

add_function (BUILT_IN_SYNC_LOCK_RELEASE_1, "CFN_" "BUILT_IN_SYNC_LOCK_RELEASE_1");

add_function (BUILT_IN_SYNC_LOCK_RELEASE_2, "CFN_" "BUILT_IN_SYNC_LOCK_RELEASE_2");

add_function (BUILT_IN_SYNC_LOCK_RELEASE_4, "CFN_" "BUILT_IN_SYNC_LOCK_RELEASE_4");

add_function (BUILT_IN_SYNC_LOCK_RELEASE_8, "CFN_" "BUILT_IN_SYNC_LOCK_RELEASE_8");

add_function (BUILT_IN_SYNC_LOCK_RELEASE_16, "CFN_" "BUILT_IN_SYNC_LOCK_RELEASE_16");


add_function (BUILT_IN_SYNC_SYNCHRONIZE, "CFN_" "BUILT_IN_SYNC_SYNCHRONIZE");




add_function (BUILT_IN_ATOMIC_TEST_AND_SET, "CFN_" "BUILT_IN_ATOMIC_TEST_AND_SET");


add_function (BUILT_IN_ATOMIC_CLEAR, "CFN_" "BUILT_IN_ATOMIC_CLEAR");


add_function (BUILT_IN_ATOMIC_EXCHANGE, "CFN_" "BUILT_IN_ATOMIC_EXCHANGE");


add_function (BUILT_IN_ATOMIC_EXCHANGE_N, "CFN_" "BUILT_IN_ATOMIC_EXCHANGE_N");


add_function (BUILT_IN_ATOMIC_EXCHANGE_1, "CFN_" "BUILT_IN_ATOMIC_EXCHANGE_1");


add_function (BUILT_IN_ATOMIC_EXCHANGE_2, "CFN_" "BUILT_IN_ATOMIC_EXCHANGE_2");


add_function (BUILT_IN_ATOMIC_EXCHANGE_4, "CFN_" "BUILT_IN_ATOMIC_EXCHANGE_4");


add_function (BUILT_IN_ATOMIC_EXCHANGE_8, "CFN_" "BUILT_IN_ATOMIC_EXCHANGE_8");


add_function (BUILT_IN_ATOMIC_EXCHANGE_16, "CFN_" "BUILT_IN_ATOMIC_EXCHANGE_16");



add_function (BUILT_IN_ATOMIC_LOAD, "CFN_" "BUILT_IN_ATOMIC_LOAD");



add_function (BUILT_IN_ATOMIC_LOAD_N, "CFN_" "BUILT_IN_ATOMIC_LOAD_N");


add_function (BUILT_IN_ATOMIC_LOAD_1, "CFN_" "BUILT_IN_ATOMIC_LOAD_1");


add_function (BUILT_IN_ATOMIC_LOAD_2, "CFN_" "BUILT_IN_ATOMIC_LOAD_2");


add_function (BUILT_IN_ATOMIC_LOAD_4, "CFN_" "BUILT_IN_ATOMIC_LOAD_4");


add_function (BUILT_IN_ATOMIC_LOAD_8, "CFN_" "BUILT_IN_ATOMIC_LOAD_8");


add_function (BUILT_IN_ATOMIC_LOAD_16, "CFN_" "BUILT_IN_ATOMIC_LOAD_16");



add_function (BUILT_IN_ATOMIC_COMPARE_EXCHANGE, "CFN_" "BUILT_IN_ATOMIC_COMPARE_EXCHANGE");



add_function (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N, "CFN_" "BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N");


add_function (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1, "CFN_" "BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1");



add_function (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2, "CFN_" "BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2");



add_function (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4, "CFN_" "BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4");



add_function (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8, "CFN_" "BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8");



add_function (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16, "CFN_" "BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16");




add_function (BUILT_IN_ATOMIC_STORE, "CFN_" "BUILT_IN_ATOMIC_STORE");


add_function (BUILT_IN_ATOMIC_STORE_N, "CFN_" "BUILT_IN_ATOMIC_STORE_N");


add_function (BUILT_IN_ATOMIC_STORE_1, "CFN_" "BUILT_IN_ATOMIC_STORE_1");


add_function (BUILT_IN_ATOMIC_STORE_2, "CFN_" "BUILT_IN_ATOMIC_STORE_2");


add_function (BUILT_IN_ATOMIC_STORE_4, "CFN_" "BUILT_IN_ATOMIC_STORE_4");


add_function (BUILT_IN_ATOMIC_STORE_8, "CFN_" "BUILT_IN_ATOMIC_STORE_8");


add_function (BUILT_IN_ATOMIC_STORE_16, "CFN_" "BUILT_IN_ATOMIC_STORE_16");



add_function (BUILT_IN_ATOMIC_ADD_FETCH_N, "CFN_" "BUILT_IN_ATOMIC_ADD_FETCH_N");


add_function (BUILT_IN_ATOMIC_ADD_FETCH_1, "CFN_" "BUILT_IN_ATOMIC_ADD_FETCH_1");


add_function (BUILT_IN_ATOMIC_ADD_FETCH_2, "CFN_" "BUILT_IN_ATOMIC_ADD_FETCH_2");


add_function (BUILT_IN_ATOMIC_ADD_FETCH_4, "CFN_" "BUILT_IN_ATOMIC_ADD_FETCH_4");


add_function (BUILT_IN_ATOMIC_ADD_FETCH_8, "CFN_" "BUILT_IN_ATOMIC_ADD_FETCH_8");


add_function (BUILT_IN_ATOMIC_ADD_FETCH_16, "CFN_" "BUILT_IN_ATOMIC_ADD_FETCH_16");



add_function (BUILT_IN_ATOMIC_SUB_FETCH_N, "CFN_" "BUILT_IN_ATOMIC_SUB_FETCH_N");


add_function (BUILT_IN_ATOMIC_SUB_FETCH_1, "CFN_" "BUILT_IN_ATOMIC_SUB_FETCH_1");


add_function (BUILT_IN_ATOMIC_SUB_FETCH_2, "CFN_" "BUILT_IN_ATOMIC_SUB_FETCH_2");


add_function (BUILT_IN_ATOMIC_SUB_FETCH_4, "CFN_" "BUILT_IN_ATOMIC_SUB_FETCH_4");


add_function (BUILT_IN_ATOMIC_SUB_FETCH_8, "CFN_" "BUILT_IN_ATOMIC_SUB_FETCH_8");


add_function (BUILT_IN_ATOMIC_SUB_FETCH_16, "CFN_" "BUILT_IN_ATOMIC_SUB_FETCH_16");



add_function (BUILT_IN_ATOMIC_AND_FETCH_N, "CFN_" "BUILT_IN_ATOMIC_AND_FETCH_N");


add_function (BUILT_IN_ATOMIC_AND_FETCH_1, "CFN_" "BUILT_IN_ATOMIC_AND_FETCH_1");


add_function (BUILT_IN_ATOMIC_AND_FETCH_2, "CFN_" "BUILT_IN_ATOMIC_AND_FETCH_2");


add_function (BUILT_IN_ATOMIC_AND_FETCH_4, "CFN_" "BUILT_IN_ATOMIC_AND_FETCH_4");


add_function (BUILT_IN_ATOMIC_AND_FETCH_8, "CFN_" "BUILT_IN_ATOMIC_AND_FETCH_8");


add_function (BUILT_IN_ATOMIC_AND_FETCH_16, "CFN_" "BUILT_IN_ATOMIC_AND_FETCH_16");



add_function (BUILT_IN_ATOMIC_NAND_FETCH_N, "CFN_" "BUILT_IN_ATOMIC_NAND_FETCH_N");


add_function (BUILT_IN_ATOMIC_NAND_FETCH_1, "CFN_" "BUILT_IN_ATOMIC_NAND_FETCH_1");


add_function (BUILT_IN_ATOMIC_NAND_FETCH_2, "CFN_" "BUILT_IN_ATOMIC_NAND_FETCH_2");


add_function (BUILT_IN_ATOMIC_NAND_FETCH_4, "CFN_" "BUILT_IN_ATOMIC_NAND_FETCH_4");


add_function (BUILT_IN_ATOMIC_NAND_FETCH_8, "CFN_" "BUILT_IN_ATOMIC_NAND_FETCH_8");


add_function (BUILT_IN_ATOMIC_NAND_FETCH_16, "CFN_" "BUILT_IN_ATOMIC_NAND_FETCH_16");



add_function (BUILT_IN_ATOMIC_XOR_FETCH_N, "CFN_" "BUILT_IN_ATOMIC_XOR_FETCH_N");


add_function (BUILT_IN_ATOMIC_XOR_FETCH_1, "CFN_" "BUILT_IN_ATOMIC_XOR_FETCH_1");


add_function (BUILT_IN_ATOMIC_XOR_FETCH_2, "CFN_" "BUILT_IN_ATOMIC_XOR_FETCH_2");


add_function (BUILT_IN_ATOMIC_XOR_FETCH_4, "CFN_" "BUILT_IN_ATOMIC_XOR_FETCH_4");


add_function (BUILT_IN_ATOMIC_XOR_FETCH_8, "CFN_" "BUILT_IN_ATOMIC_XOR_FETCH_8");


add_function (BUILT_IN_ATOMIC_XOR_FETCH_16, "CFN_" "BUILT_IN_ATOMIC_XOR_FETCH_16");



add_function (BUILT_IN_ATOMIC_OR_FETCH_N, "CFN_" "BUILT_IN_ATOMIC_OR_FETCH_N");


add_function (BUILT_IN_ATOMIC_OR_FETCH_1, "CFN_" "BUILT_IN_ATOMIC_OR_FETCH_1");


add_function (BUILT_IN_ATOMIC_OR_FETCH_2, "CFN_" "BUILT_IN_ATOMIC_OR_FETCH_2");


add_function (BUILT_IN_ATOMIC_OR_FETCH_4, "CFN_" "BUILT_IN_ATOMIC_OR_FETCH_4");


add_function (BUILT_IN_ATOMIC_OR_FETCH_8, "CFN_" "BUILT_IN_ATOMIC_OR_FETCH_8");


add_function (BUILT_IN_ATOMIC_OR_FETCH_16, "CFN_" "BUILT_IN_ATOMIC_OR_FETCH_16");



add_function (BUILT_IN_ATOMIC_FETCH_ADD_N, "CFN_" "BUILT_IN_ATOMIC_FETCH_ADD_N");


add_function (BUILT_IN_ATOMIC_FETCH_ADD_1, "CFN_" "BUILT_IN_ATOMIC_FETCH_ADD_1");


add_function (BUILT_IN_ATOMIC_FETCH_ADD_2, "CFN_" "BUILT_IN_ATOMIC_FETCH_ADD_2");


add_function (BUILT_IN_ATOMIC_FETCH_ADD_4, "CFN_" "BUILT_IN_ATOMIC_FETCH_ADD_4");


add_function (BUILT_IN_ATOMIC_FETCH_ADD_8, "CFN_" "BUILT_IN_ATOMIC_FETCH_ADD_8");


add_function (BUILT_IN_ATOMIC_FETCH_ADD_16, "CFN_" "BUILT_IN_ATOMIC_FETCH_ADD_16");



add_function (BUILT_IN_ATOMIC_FETCH_SUB_N, "CFN_" "BUILT_IN_ATOMIC_FETCH_SUB_N");


add_function (BUILT_IN_ATOMIC_FETCH_SUB_1, "CFN_" "BUILT_IN_ATOMIC_FETCH_SUB_1");


add_function (BUILT_IN_ATOMIC_FETCH_SUB_2, "CFN_" "BUILT_IN_ATOMIC_FETCH_SUB_2");


add_function (BUILT_IN_ATOMIC_FETCH_SUB_4, "CFN_" "BUILT_IN_ATOMIC_FETCH_SUB_4");


add_function (BUILT_IN_ATOMIC_FETCH_SUB_8, "CFN_" "BUILT_IN_ATOMIC_FETCH_SUB_8");


add_function (BUILT_IN_ATOMIC_FETCH_SUB_16, "CFN_" "BUILT_IN_ATOMIC_FETCH_SUB_16");



add_function (BUILT_IN_ATOMIC_FETCH_AND_N, "CFN_" "BUILT_IN_ATOMIC_FETCH_AND_N");


add_function (BUILT_IN_ATOMIC_FETCH_AND_1, "CFN_" "BUILT_IN_ATOMIC_FETCH_AND_1");


add_function (BUILT_IN_ATOMIC_FETCH_AND_2, "CFN_" "BUILT_IN_ATOMIC_FETCH_AND_2");


add_function (BUILT_IN_ATOMIC_FETCH_AND_4, "CFN_" "BUILT_IN_ATOMIC_FETCH_AND_4");


add_function (BUILT_IN_ATOMIC_FETCH_AND_8, "CFN_" "BUILT_IN_ATOMIC_FETCH_AND_8");


add_function (BUILT_IN_ATOMIC_FETCH_AND_16, "CFN_" "BUILT_IN_ATOMIC_FETCH_AND_16");



add_function (BUILT_IN_ATOMIC_FETCH_NAND_N, "CFN_" "BUILT_IN_ATOMIC_FETCH_NAND_N");


add_function (BUILT_IN_ATOMIC_FETCH_NAND_1, "CFN_" "BUILT_IN_ATOMIC_FETCH_NAND_1");


add_function (BUILT_IN_ATOMIC_FETCH_NAND_2, "CFN_" "BUILT_IN_ATOMIC_FETCH_NAND_2");


add_function (BUILT_IN_ATOMIC_FETCH_NAND_4, "CFN_" "BUILT_IN_ATOMIC_FETCH_NAND_4");


add_function (BUILT_IN_ATOMIC_FETCH_NAND_8, "CFN_" "BUILT_IN_ATOMIC_FETCH_NAND_8");


add_function (BUILT_IN_ATOMIC_FETCH_NAND_16, "CFN_" "BUILT_IN_ATOMIC_FETCH_NAND_16");



add_function (BUILT_IN_ATOMIC_FETCH_XOR_N, "CFN_" "BUILT_IN_ATOMIC_FETCH_XOR_N");


add_function (BUILT_IN_ATOMIC_FETCH_XOR_1, "CFN_" "BUILT_IN_ATOMIC_FETCH_XOR_1");


add_function (BUILT_IN_ATOMIC_FETCH_XOR_2, "CFN_" "BUILT_IN_ATOMIC_FETCH_XOR_2");


add_function (BUILT_IN_ATOMIC_FETCH_XOR_4, "CFN_" "BUILT_IN_ATOMIC_FETCH_XOR_4");


add_function (BUILT_IN_ATOMIC_FETCH_XOR_8, "CFN_" "BUILT_IN_ATOMIC_FETCH_XOR_8");


add_function (BUILT_IN_ATOMIC_FETCH_XOR_16, "CFN_" "BUILT_IN_ATOMIC_FETCH_XOR_16");




add_function (BUILT_IN_ATOMIC_FETCH_OR_N, "CFN_" "BUILT_IN_ATOMIC_FETCH_OR_N");


add_function (BUILT_IN_ATOMIC_FETCH_OR_1, "CFN_" "BUILT_IN_ATOMIC_FETCH_OR_1");


add_function (BUILT_IN_ATOMIC_FETCH_OR_2, "CFN_" "BUILT_IN_ATOMIC_FETCH_OR_2");


add_function (BUILT_IN_ATOMIC_FETCH_OR_4, "CFN_" "BUILT_IN_ATOMIC_FETCH_OR_4");


add_function (BUILT_IN_ATOMIC_FETCH_OR_8, "CFN_" "BUILT_IN_ATOMIC_FETCH_OR_8");


add_function (BUILT_IN_ATOMIC_FETCH_OR_16, "CFN_" "BUILT_IN_ATOMIC_FETCH_OR_16");



add_function (BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE, "CFN_" "BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE");



add_function (BUILT_IN_ATOMIC_IS_LOCK_FREE, "CFN_" "BUILT_IN_ATOMIC_IS_LOCK_FREE");




add_function (BUILT_IN_ATOMIC_THREAD_FENCE, "CFN_" "BUILT_IN_ATOMIC_THREAD_FENCE");



add_function (BUILT_IN_ATOMIC_SIGNAL_FENCE, "CFN_" "BUILT_IN_ATOMIC_SIGNAL_FENCE");






add_function (BUILT_IN_ATOMIC_FERAISEEXCEPT, "CFN_" "BUILT_IN_ATOMIC_FERAISEEXCEPT");
# 1049 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def"
add_function (BUILT_IN_ACC_GET_DEVICE_TYPE, "CFN_" "BUILT_IN_ACC_GET_DEVICE_TYPE");

add_function (BUILT_IN_GOACC_DATA_START, "CFN_" "BUILT_IN_GOACC_DATA_START");

add_function (BUILT_IN_GOACC_DATA_END, "CFN_" "BUILT_IN_GOACC_DATA_END");

add_function (BUILT_IN_GOACC_ENTER_EXIT_DATA, "CFN_" "BUILT_IN_GOACC_ENTER_EXIT_DATA");


add_function (BUILT_IN_GOACC_PARALLEL, "CFN_" "BUILT_IN_GOACC_PARALLEL");


add_function (BUILT_IN_GOACC_UPDATE, "CFN_" "BUILT_IN_GOACC_UPDATE");


add_function (BUILT_IN_GOACC_WAIT, "CFN_" "BUILT_IN_GOACC_WAIT");



add_function (BUILT_IN_ACC_ON_DEVICE, "CFN_" "BUILT_IN_ACC_ON_DEVICE");


add_function (BUILT_IN_GOACC_PARLEVEL_ID, "CFN_" "BUILT_IN_GOACC_PARLEVEL_ID");

add_function (BUILT_IN_GOACC_PARLEVEL_SIZE, "CFN_" "BUILT_IN_GOACC_PARLEVEL_SIZE");


add_function (BUILT_IN_OMP_GET_THREAD_NUM, "CFN_" "BUILT_IN_OMP_GET_THREAD_NUM");

add_function (BUILT_IN_OMP_GET_NUM_THREADS, "CFN_" "BUILT_IN_OMP_GET_NUM_THREADS");

add_function (BUILT_IN_OMP_GET_TEAM_NUM, "CFN_" "BUILT_IN_OMP_GET_TEAM_NUM");

add_function (BUILT_IN_OMP_GET_NUM_TEAMS, "CFN_" "BUILT_IN_OMP_GET_NUM_TEAMS");


add_function (BUILT_IN_GOMP_ATOMIC_START, "CFN_" "BUILT_IN_GOMP_ATOMIC_START");

add_function (BUILT_IN_GOMP_ATOMIC_END, "CFN_" "BUILT_IN_GOMP_ATOMIC_END");

add_function (BUILT_IN_GOMP_BARRIER, "CFN_" "BUILT_IN_GOMP_BARRIER");

add_function (BUILT_IN_GOMP_BARRIER_CANCEL, "CFN_" "BUILT_IN_GOMP_BARRIER_CANCEL");

add_function (BUILT_IN_GOMP_TASKWAIT, "CFN_" "BUILT_IN_GOMP_TASKWAIT");

add_function (BUILT_IN_GOMP_TASKWAIT_DEPEND, "CFN_" "BUILT_IN_GOMP_TASKWAIT_DEPEND");

add_function (BUILT_IN_GOMP_TASKYIELD, "CFN_" "BUILT_IN_GOMP_TASKYIELD");

add_function (BUILT_IN_GOMP_TASKGROUP_START, "CFN_" "BUILT_IN_GOMP_TASKGROUP_START");

add_function (BUILT_IN_GOMP_TASKGROUP_END, "CFN_" "BUILT_IN_GOMP_TASKGROUP_END");

add_function (BUILT_IN_GOMP_CANCEL, "CFN_" "BUILT_IN_GOMP_CANCEL");

add_function (BUILT_IN_GOMP_CANCELLATION_POINT, "CFN_" "BUILT_IN_GOMP_CANCELLATION_POINT");

add_function (BUILT_IN_GOMP_CRITICAL_START, "CFN_" "BUILT_IN_GOMP_CRITICAL_START");

add_function (BUILT_IN_GOMP_CRITICAL_END, "CFN_" "BUILT_IN_GOMP_CRITICAL_END");

add_function (BUILT_IN_GOMP_CRITICAL_NAME_START, "CFN_" "BUILT_IN_GOMP_CRITICAL_NAME_START");


add_function (BUILT_IN_GOMP_CRITICAL_NAME_END, "CFN_" "BUILT_IN_GOMP_CRITICAL_NAME_END");





add_function (BUILT_IN_GOMP_LOOP_STATIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_STATIC_START");



add_function (BUILT_IN_GOMP_LOOP_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START");



add_function (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START");



add_function (BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_START, "CFN_" "BUILT_IN_GOMP_LOOP_START");



add_function (BUILT_IN_GOMP_LOOP_ORDERED_START, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_START");



add_function (BUILT_IN_GOMP_LOOP_DOACROSS_START, "CFN_" "BUILT_IN_GOMP_LOOP_DOACROSS_START");



add_function (BUILT_IN_GOMP_LOOP_STATIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_STATIC_NEXT");

add_function (BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT");

add_function (BUILT_IN_GOMP_LOOP_GUIDED_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_GUIDED_NEXT");

add_function (BUILT_IN_GOMP_LOOP_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT");

add_function (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT");


add_function (BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT");


add_function (BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_STATIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_STATIC_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START");



add_function (BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT");


add_function (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT, "CFN_" "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT");





add_function (BUILT_IN_GOMP_PARALLEL_LOOP_STATIC, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC");



add_function (BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC");



add_function (BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED");



add_function (BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME");



add_function (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC");



add_function (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED");



add_function (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME");



add_function (BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME, "CFN_" "BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME");



add_function (BUILT_IN_GOMP_LOOP_END, "CFN_" "BUILT_IN_GOMP_LOOP_END");

add_function (BUILT_IN_GOMP_LOOP_END_CANCEL, "CFN_" "BUILT_IN_GOMP_LOOP_END_CANCEL");

add_function (BUILT_IN_GOMP_LOOP_END_NOWAIT, "CFN_" "BUILT_IN_GOMP_LOOP_END_NOWAIT");

add_function (BUILT_IN_GOMP_ORDERED_START, "CFN_" "BUILT_IN_GOMP_ORDERED_START");

add_function (BUILT_IN_GOMP_ORDERED_END, "CFN_" "BUILT_IN_GOMP_ORDERED_END");

add_function (BUILT_IN_GOMP_DOACROSS_POST, "CFN_" "BUILT_IN_GOMP_DOACROSS_POST");

add_function (BUILT_IN_GOMP_DOACROSS_WAIT, "CFN_" "BUILT_IN_GOMP_DOACROSS_WAIT");

add_function (BUILT_IN_GOMP_DOACROSS_ULL_POST, "CFN_" "BUILT_IN_GOMP_DOACROSS_ULL_POST");

add_function (BUILT_IN_GOMP_DOACROSS_ULL_WAIT, "CFN_" "BUILT_IN_GOMP_DOACROSS_ULL_WAIT");

add_function (BUILT_IN_GOMP_PARALLEL, "CFN_" "BUILT_IN_GOMP_PARALLEL");

add_function (BUILT_IN_GOMP_PARALLEL_REDUCTIONS, "CFN_" "BUILT_IN_GOMP_PARALLEL_REDUCTIONS");


add_function (BUILT_IN_GOMP_TASK, "CFN_" "BUILT_IN_GOMP_TASK");


add_function (BUILT_IN_GOMP_TASKLOOP, "CFN_" "BUILT_IN_GOMP_TASKLOOP");


add_function (BUILT_IN_GOMP_TASKLOOP_ULL, "CFN_" "BUILT_IN_GOMP_TASKLOOP_ULL");


add_function (BUILT_IN_GOMP_SECTIONS_START, "CFN_" "BUILT_IN_GOMP_SECTIONS_START");

add_function (BUILT_IN_GOMP_SECTIONS2_START, "CFN_" "BUILT_IN_GOMP_SECTIONS2_START");

add_function (BUILT_IN_GOMP_SECTIONS_NEXT, "CFN_" "BUILT_IN_GOMP_SECTIONS_NEXT");

add_function (BUILT_IN_GOMP_PARALLEL_SECTIONS, "CFN_" "BUILT_IN_GOMP_PARALLEL_SECTIONS");


add_function (BUILT_IN_GOMP_SECTIONS_END, "CFN_" "BUILT_IN_GOMP_SECTIONS_END");

add_function (BUILT_IN_GOMP_SECTIONS_END_CANCEL, "CFN_" "BUILT_IN_GOMP_SECTIONS_END_CANCEL");


add_function (BUILT_IN_GOMP_SECTIONS_END_NOWAIT, "CFN_" "BUILT_IN_GOMP_SECTIONS_END_NOWAIT");


add_function (BUILT_IN_GOMP_SINGLE_START, "CFN_" "BUILT_IN_GOMP_SINGLE_START");

add_function (BUILT_IN_GOMP_SINGLE_COPY_START, "CFN_" "BUILT_IN_GOMP_SINGLE_COPY_START");

add_function (BUILT_IN_GOMP_SINGLE_COPY_END, "CFN_" "BUILT_IN_GOMP_SINGLE_COPY_END");

add_function (BUILT_IN_GOMP_OFFLOAD_REGISTER, "CFN_" "BUILT_IN_GOMP_OFFLOAD_REGISTER");

add_function (BUILT_IN_GOMP_OFFLOAD_UNREGISTER, "CFN_" "BUILT_IN_GOMP_OFFLOAD_UNREGISTER");


add_function (BUILT_IN_GOMP_TARGET, "CFN_" "BUILT_IN_GOMP_TARGET");


add_function (BUILT_IN_GOMP_TARGET_DATA, "CFN_" "BUILT_IN_GOMP_TARGET_DATA");

add_function (BUILT_IN_GOMP_TARGET_END_DATA, "CFN_" "BUILT_IN_GOMP_TARGET_END_DATA");

add_function (BUILT_IN_GOMP_TARGET_UPDATE, "CFN_" "BUILT_IN_GOMP_TARGET_UPDATE");


add_function (BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA, "CFN_" "BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA");


add_function (BUILT_IN_GOMP_TEAMS, "CFN_" "BUILT_IN_GOMP_TEAMS");

add_function (BUILT_IN_GOMP_TEAMS_REG, "CFN_" "BUILT_IN_GOMP_TEAMS_REG");

add_function (BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER, "CFN_" "BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER");


add_function (BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER, "CFN_" "BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER");


add_function (BUILT_IN_GOMP_TASK_REDUCTION_REMAP, "CFN_" "BUILT_IN_GOMP_TASK_REDUCTION_REMAP");


add_function (BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER, "CFN_" "BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER");


add_function (BUILT_IN_GOACC_DECLARE, "CFN_" "BUILT_IN_GOACC_DECLARE");
# 1052 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def" 1
add_function (BUILT_IN_TM_START, "CFN_" "BUILT_IN_TM_START");


add_function (BUILT_IN_TM_COMMIT, "CFN_" "BUILT_IN_TM_COMMIT");

add_function (BUILT_IN_TM_COMMIT_EH, "CFN_" "BUILT_IN_TM_COMMIT_EH");

add_function (BUILT_IN_TM_ABORT, "CFN_" "BUILT_IN_TM_ABORT");

add_function (BUILT_IN_TM_IRREVOCABLE, "CFN_" "BUILT_IN_TM_IRREVOCABLE");


add_function (BUILT_IN_TM_MEMCPY, "CFN_" "BUILT_IN_TM_MEMCPY");

add_function (BUILT_IN_TM_MEMCPY_RNWT, "CFN_" "BUILT_IN_TM_MEMCPY_RNWT");

add_function (BUILT_IN_TM_MEMCPY_RTWN, "CFN_" "BUILT_IN_TM_MEMCPY_RTWN");

add_function (BUILT_IN_TM_MEMMOVE, "CFN_" "BUILT_IN_TM_MEMMOVE");

add_function (BUILT_IN_TM_MEMSET, "CFN_" "BUILT_IN_TM_MEMSET");


add_function (BUILT_IN_TM_GETTMCLONE_IRR, "CFN_" "BUILT_IN_TM_GETTMCLONE_IRR");

add_function (BUILT_IN_TM_GETTMCLONE_SAFE, "CFN_" "BUILT_IN_TM_GETTMCLONE_SAFE");



add_function (BUILT_IN_TM_MALLOC, "CFN_" "BUILT_IN_TM_MALLOC");

add_function (BUILT_IN_TM_CALLOC, "CFN_" "BUILT_IN_TM_CALLOC");

add_function (BUILT_IN_TM_FREE, "CFN_" "BUILT_IN_TM_FREE");



add_function (BUILT_IN_TM_LOG_1, "CFN_" "BUILT_IN_TM_LOG_1");

add_function (BUILT_IN_TM_LOG_2, "CFN_" "BUILT_IN_TM_LOG_2");

add_function (BUILT_IN_TM_LOG_4, "CFN_" "BUILT_IN_TM_LOG_4");

add_function (BUILT_IN_TM_LOG_8, "CFN_" "BUILT_IN_TM_LOG_8");

add_function (BUILT_IN_TM_LOG_FLOAT, "CFN_" "BUILT_IN_TM_LOG_FLOAT");

add_function (BUILT_IN_TM_LOG_DOUBLE, "CFN_" "BUILT_IN_TM_LOG_DOUBLE");

add_function (BUILT_IN_TM_LOG_LDOUBLE, "CFN_" "BUILT_IN_TM_LOG_LDOUBLE");

add_function (BUILT_IN_TM_LOG, "CFN_" "BUILT_IN_TM_LOG");



add_function (BUILT_IN_TM_LOG_M64, "CFN_" "BUILT_IN_TM_LOG_M64");
add_function (BUILT_IN_TM_LOG_M128, "CFN_" "BUILT_IN_TM_LOG_M128");
add_function (BUILT_IN_TM_LOG_M256, "CFN_" "BUILT_IN_TM_LOG_M256");
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
add_function (BUILT_IN_TM_STORE_1, "CFN_" "BUILT_IN_TM_STORE_1");

add_function (BUILT_IN_TM_STORE_WAR_1, "CFN_" "BUILT_IN_TM_STORE_WAR_1");

add_function (BUILT_IN_TM_STORE_WAW_1, "CFN_" "BUILT_IN_TM_STORE_WAW_1");


add_function (BUILT_IN_TM_STORE_2, "CFN_" "BUILT_IN_TM_STORE_2");

add_function (BUILT_IN_TM_STORE_WAR_2, "CFN_" "BUILT_IN_TM_STORE_WAR_2");

add_function (BUILT_IN_TM_STORE_WAW_2, "CFN_" "BUILT_IN_TM_STORE_WAW_2");


add_function (BUILT_IN_TM_STORE_4, "CFN_" "BUILT_IN_TM_STORE_4");

add_function (BUILT_IN_TM_STORE_WAR_4, "CFN_" "BUILT_IN_TM_STORE_WAR_4");

add_function (BUILT_IN_TM_STORE_WAW_4, "CFN_" "BUILT_IN_TM_STORE_WAW_4");


add_function (BUILT_IN_TM_STORE_8, "CFN_" "BUILT_IN_TM_STORE_8");

add_function (BUILT_IN_TM_STORE_WAR_8, "CFN_" "BUILT_IN_TM_STORE_WAR_8");

add_function (BUILT_IN_TM_STORE_WAW_8, "CFN_" "BUILT_IN_TM_STORE_WAW_8");


add_function (BUILT_IN_TM_STORE_FLOAT, "CFN_" "BUILT_IN_TM_STORE_FLOAT");

add_function (BUILT_IN_TM_STORE_WAR_FLOAT, "CFN_" "BUILT_IN_TM_STORE_WAR_FLOAT");

add_function (BUILT_IN_TM_STORE_WAW_FLOAT, "CFN_" "BUILT_IN_TM_STORE_WAW_FLOAT");


add_function (BUILT_IN_TM_STORE_DOUBLE, "CFN_" "BUILT_IN_TM_STORE_DOUBLE");

add_function (BUILT_IN_TM_STORE_WAR_DOUBLE, "CFN_" "BUILT_IN_TM_STORE_WAR_DOUBLE");

add_function (BUILT_IN_TM_STORE_WAW_DOUBLE, "CFN_" "BUILT_IN_TM_STORE_WAW_DOUBLE");



add_function (BUILT_IN_TM_STORE_M64, "CFN_" "BUILT_IN_TM_STORE_M64");
add_function (BUILT_IN_TM_STORE_WAR_M64, "CFN_" "BUILT_IN_TM_STORE_WAR_M64");
add_function (BUILT_IN_TM_STORE_WAW_M64, "CFN_" "BUILT_IN_TM_STORE_WAW_M64");
add_function (BUILT_IN_TM_STORE_M128, "CFN_" "BUILT_IN_TM_STORE_M128");
add_function (BUILT_IN_TM_STORE_WAR_M128, "CFN_" "BUILT_IN_TM_STORE_WAR_M128");
add_function (BUILT_IN_TM_STORE_WAW_M128, "CFN_" "BUILT_IN_TM_STORE_WAW_M128");
add_function (BUILT_IN_TM_STORE_M256, "CFN_" "BUILT_IN_TM_STORE_M256");
add_function (BUILT_IN_TM_STORE_WAR_M256, "CFN_" "BUILT_IN_TM_STORE_WAR_M256");
add_function (BUILT_IN_TM_STORE_WAW_M256, "CFN_" "BUILT_IN_TM_STORE_WAW_M256");

add_function (BUILT_IN_TM_STORE_LDOUBLE, "CFN_" "BUILT_IN_TM_STORE_LDOUBLE");

add_function (BUILT_IN_TM_STORE_WAR_LDOUBLE, "CFN_" "BUILT_IN_TM_STORE_WAR_LDOUBLE");

add_function (BUILT_IN_TM_STORE_WAW_LDOUBLE, "CFN_" "BUILT_IN_TM_STORE_WAW_LDOUBLE");
# 133 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
add_function (BUILT_IN_TM_LOAD_1, "CFN_" "BUILT_IN_TM_LOAD_1");

add_function (BUILT_IN_TM_LOAD_RAR_1, "CFN_" "BUILT_IN_TM_LOAD_RAR_1");

add_function (BUILT_IN_TM_LOAD_RAW_1, "CFN_" "BUILT_IN_TM_LOAD_RAW_1");

add_function (BUILT_IN_TM_LOAD_RFW_1, "CFN_" "BUILT_IN_TM_LOAD_RFW_1");


add_function (BUILT_IN_TM_LOAD_2, "CFN_" "BUILT_IN_TM_LOAD_2");

add_function (BUILT_IN_TM_LOAD_RAR_2, "CFN_" "BUILT_IN_TM_LOAD_RAR_2");

add_function (BUILT_IN_TM_LOAD_RAW_2, "CFN_" "BUILT_IN_TM_LOAD_RAW_2");

add_function (BUILT_IN_TM_LOAD_RFW_2, "CFN_" "BUILT_IN_TM_LOAD_RFW_2");


add_function (BUILT_IN_TM_LOAD_4, "CFN_" "BUILT_IN_TM_LOAD_4");

add_function (BUILT_IN_TM_LOAD_RAR_4, "CFN_" "BUILT_IN_TM_LOAD_RAR_4");

add_function (BUILT_IN_TM_LOAD_RAW_4, "CFN_" "BUILT_IN_TM_LOAD_RAW_4");

add_function (BUILT_IN_TM_LOAD_RFW_4, "CFN_" "BUILT_IN_TM_LOAD_RFW_4");


add_function (BUILT_IN_TM_LOAD_8, "CFN_" "BUILT_IN_TM_LOAD_8");

add_function (BUILT_IN_TM_LOAD_RAR_8, "CFN_" "BUILT_IN_TM_LOAD_RAR_8");

add_function (BUILT_IN_TM_LOAD_RAW_8, "CFN_" "BUILT_IN_TM_LOAD_RAW_8");

add_function (BUILT_IN_TM_LOAD_RFW_8, "CFN_" "BUILT_IN_TM_LOAD_RFW_8");


add_function (BUILT_IN_TM_LOAD_FLOAT, "CFN_" "BUILT_IN_TM_LOAD_FLOAT");

add_function (BUILT_IN_TM_LOAD_RAR_FLOAT, "CFN_" "BUILT_IN_TM_LOAD_RAR_FLOAT");

add_function (BUILT_IN_TM_LOAD_RAW_FLOAT, "CFN_" "BUILT_IN_TM_LOAD_RAW_FLOAT");

add_function (BUILT_IN_TM_LOAD_RFW_FLOAT, "CFN_" "BUILT_IN_TM_LOAD_RFW_FLOAT");


add_function (BUILT_IN_TM_LOAD_DOUBLE, "CFN_" "BUILT_IN_TM_LOAD_DOUBLE");

add_function (BUILT_IN_TM_LOAD_RAR_DOUBLE, "CFN_" "BUILT_IN_TM_LOAD_RAR_DOUBLE");

add_function (BUILT_IN_TM_LOAD_RAW_DOUBLE, "CFN_" "BUILT_IN_TM_LOAD_RAW_DOUBLE");

add_function (BUILT_IN_TM_LOAD_RFW_DOUBLE, "CFN_" "BUILT_IN_TM_LOAD_RFW_DOUBLE");



add_function (BUILT_IN_TM_LOAD_M64, "CFN_" "BUILT_IN_TM_LOAD_M64");
add_function (BUILT_IN_TM_LOAD_RAR_M64, "CFN_" "BUILT_IN_TM_LOAD_RAR_M64");
add_function (BUILT_IN_TM_LOAD_RAW_M64, "CFN_" "BUILT_IN_TM_LOAD_RAW_M64");
add_function (BUILT_IN_TM_LOAD_RFW_M64, "CFN_" "BUILT_IN_TM_LOAD_RFW_M64");
add_function (BUILT_IN_TM_LOAD_M128, "CFN_" "BUILT_IN_TM_LOAD_M128");
add_function (BUILT_IN_TM_LOAD_RAR_M128, "CFN_" "BUILT_IN_TM_LOAD_RAR_M128");
add_function (BUILT_IN_TM_LOAD_RAW_M128, "CFN_" "BUILT_IN_TM_LOAD_RAW_M128");
add_function (BUILT_IN_TM_LOAD_RFW_M128, "CFN_" "BUILT_IN_TM_LOAD_RFW_M128");
add_function (BUILT_IN_TM_LOAD_M256, "CFN_" "BUILT_IN_TM_LOAD_M256");
add_function (BUILT_IN_TM_LOAD_RAR_M256, "CFN_" "BUILT_IN_TM_LOAD_RAR_M256");
add_function (BUILT_IN_TM_LOAD_RAW_M256, "CFN_" "BUILT_IN_TM_LOAD_RAW_M256");
add_function (BUILT_IN_TM_LOAD_RFW_M256, "CFN_" "BUILT_IN_TM_LOAD_RFW_M256");

add_function (BUILT_IN_TM_LOAD_LDOUBLE, "CFN_" "BUILT_IN_TM_LOAD_LDOUBLE");

add_function (BUILT_IN_TM_LOAD_RAR_LDOUBLE, "CFN_" "BUILT_IN_TM_LOAD_RAR_LDOUBLE");

add_function (BUILT_IN_TM_LOAD_RAW_LDOUBLE, "CFN_" "BUILT_IN_TM_LOAD_RAW_LDOUBLE");

add_function (BUILT_IN_TM_LOAD_RFW_LDOUBLE, "CFN_" "BUILT_IN_TM_LOAD_RFW_LDOUBLE");
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def"
add_function (BEGIN_SANITIZER_BUILTINS, "CFN_" "BEGIN_SANITIZER_BUILTINS");


add_function (BUILT_IN_ASAN_INIT, "CFN_" "BUILT_IN_ASAN_INIT");

add_function (BUILT_IN_ASAN_VERSION_MISMATCH_CHECK, "CFN_" "BUILT_IN_ASAN_VERSION_MISMATCH_CHECK");




add_function (BUILT_IN_ASAN_REPORT_LOAD1, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD1");

add_function (BUILT_IN_ASAN_REPORT_LOAD2, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD2");

add_function (BUILT_IN_ASAN_REPORT_LOAD4, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD4");

add_function (BUILT_IN_ASAN_REPORT_LOAD8, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD8");

add_function (BUILT_IN_ASAN_REPORT_LOAD16, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD16");

add_function (BUILT_IN_ASAN_REPORT_LOAD_N, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD_N");


add_function (BUILT_IN_ASAN_REPORT_STORE1, "CFN_" "BUILT_IN_ASAN_REPORT_STORE1");

add_function (BUILT_IN_ASAN_REPORT_STORE2, "CFN_" "BUILT_IN_ASAN_REPORT_STORE2");

add_function (BUILT_IN_ASAN_REPORT_STORE4, "CFN_" "BUILT_IN_ASAN_REPORT_STORE4");

add_function (BUILT_IN_ASAN_REPORT_STORE8, "CFN_" "BUILT_IN_ASAN_REPORT_STORE8");

add_function (BUILT_IN_ASAN_REPORT_STORE16, "CFN_" "BUILT_IN_ASAN_REPORT_STORE16");

add_function (BUILT_IN_ASAN_REPORT_STORE_N, "CFN_" "BUILT_IN_ASAN_REPORT_STORE_N");


add_function (BUILT_IN_ASAN_REPORT_LOAD1_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD1_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_LOAD2_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD2_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_LOAD4_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD4_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_LOAD8_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD8_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_LOAD16_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD16_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT");



add_function (BUILT_IN_ASAN_REPORT_STORE1_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_STORE1_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_STORE2_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_STORE2_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_STORE4_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_STORE4_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_STORE8_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_STORE8_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_STORE16_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_STORE16_NOABORT");


add_function (BUILT_IN_ASAN_REPORT_STORE_N_NOABORT, "CFN_" "BUILT_IN_ASAN_REPORT_STORE_N_NOABORT");



add_function (BUILT_IN_ASAN_LOAD1, "CFN_" "BUILT_IN_ASAN_LOAD1");

add_function (BUILT_IN_ASAN_LOAD2, "CFN_" "BUILT_IN_ASAN_LOAD2");

add_function (BUILT_IN_ASAN_LOAD4, "CFN_" "BUILT_IN_ASAN_LOAD4");

add_function (BUILT_IN_ASAN_LOAD8, "CFN_" "BUILT_IN_ASAN_LOAD8");

add_function (BUILT_IN_ASAN_LOAD16, "CFN_" "BUILT_IN_ASAN_LOAD16");

add_function (BUILT_IN_ASAN_LOADN, "CFN_" "BUILT_IN_ASAN_LOADN");

add_function (BUILT_IN_ASAN_STORE1, "CFN_" "BUILT_IN_ASAN_STORE1");

add_function (BUILT_IN_ASAN_STORE2, "CFN_" "BUILT_IN_ASAN_STORE2");

add_function (BUILT_IN_ASAN_STORE4, "CFN_" "BUILT_IN_ASAN_STORE4");

add_function (BUILT_IN_ASAN_STORE8, "CFN_" "BUILT_IN_ASAN_STORE8");

add_function (BUILT_IN_ASAN_STORE16, "CFN_" "BUILT_IN_ASAN_STORE16");

add_function (BUILT_IN_ASAN_STOREN, "CFN_" "BUILT_IN_ASAN_STOREN");

add_function (BUILT_IN_ASAN_LOAD1_NOABORT, "CFN_" "BUILT_IN_ASAN_LOAD1_NOABORT");

add_function (BUILT_IN_ASAN_LOAD2_NOABORT, "CFN_" "BUILT_IN_ASAN_LOAD2_NOABORT");

add_function (BUILT_IN_ASAN_LOAD4_NOABORT, "CFN_" "BUILT_IN_ASAN_LOAD4_NOABORT");

add_function (BUILT_IN_ASAN_LOAD8_NOABORT, "CFN_" "BUILT_IN_ASAN_LOAD8_NOABORT");

add_function (BUILT_IN_ASAN_LOAD16_NOABORT, "CFN_" "BUILT_IN_ASAN_LOAD16_NOABORT");

add_function (BUILT_IN_ASAN_LOADN_NOABORT, "CFN_" "BUILT_IN_ASAN_LOADN_NOABORT");

add_function (BUILT_IN_ASAN_STORE1_NOABORT, "CFN_" "BUILT_IN_ASAN_STORE1_NOABORT");

add_function (BUILT_IN_ASAN_STORE2_NOABORT, "CFN_" "BUILT_IN_ASAN_STORE2_NOABORT");

add_function (BUILT_IN_ASAN_STORE4_NOABORT, "CFN_" "BUILT_IN_ASAN_STORE4_NOABORT");

add_function (BUILT_IN_ASAN_STORE8_NOABORT, "CFN_" "BUILT_IN_ASAN_STORE8_NOABORT");

add_function (BUILT_IN_ASAN_STORE16_NOABORT, "CFN_" "BUILT_IN_ASAN_STORE16_NOABORT");

add_function (BUILT_IN_ASAN_STOREN_NOABORT, "CFN_" "BUILT_IN_ASAN_STOREN_NOABORT");

add_function (BUILT_IN_ASAN_REGISTER_GLOBALS, "CFN_" "BUILT_IN_ASAN_REGISTER_GLOBALS");


add_function (BUILT_IN_ASAN_UNREGISTER_GLOBALS, "CFN_" "BUILT_IN_ASAN_UNREGISTER_GLOBALS");


add_function (BUILT_IN_ASAN_HANDLE_NO_RETURN, "CFN_" "BUILT_IN_ASAN_HANDLE_NO_RETURN");


add_function (BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT, "CFN_" "BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT");


add_function (BUILT_IN_ASAN_AFTER_DYNAMIC_INIT, "CFN_" "BUILT_IN_ASAN_AFTER_DYNAMIC_INIT");


add_function (BUILT_IN_ASAN_POISON_STACK_MEMORY, "CFN_" "BUILT_IN_ASAN_POISON_STACK_MEMORY");


add_function (BUILT_IN_ASAN_UNPOISON_STACK_MEMORY, "CFN_" "BUILT_IN_ASAN_UNPOISON_STACK_MEMORY");


add_function (BUILT_IN_ASAN_ALLOCA_POISON, "CFN_" "BUILT_IN_ASAN_ALLOCA_POISON");

add_function (BUILT_IN_ASAN_ALLOCAS_UNPOISON, "CFN_" "BUILT_IN_ASAN_ALLOCAS_UNPOISON");

add_function (BUILT_IN_ASAN_POINTER_COMPARE, "CFN_" "BUILT_IN_ASAN_POINTER_COMPARE");

add_function (BUILT_IN_ASAN_POINTER_SUBTRACT, "CFN_" "BUILT_IN_ASAN_POINTER_SUBTRACT");



add_function (BUILT_IN_TSAN_INIT, "CFN_" "BUILT_IN_TSAN_INIT");

add_function (BUILT_IN_TSAN_FUNC_ENTRY, "CFN_" "BUILT_IN_TSAN_FUNC_ENTRY");

add_function (BUILT_IN_TSAN_FUNC_EXIT, "CFN_" "BUILT_IN_TSAN_FUNC_EXIT");

add_function (BUILT_IN_TSAN_VPTR_UPDATE, "CFN_" "BUILT_IN_TSAN_VPTR_UPDATE");

add_function (BUILT_IN_TSAN_READ1, "CFN_" "BUILT_IN_TSAN_READ1");

add_function (BUILT_IN_TSAN_READ2, "CFN_" "BUILT_IN_TSAN_READ2");

add_function (BUILT_IN_TSAN_READ4, "CFN_" "BUILT_IN_TSAN_READ4");

add_function (BUILT_IN_TSAN_READ8, "CFN_" "BUILT_IN_TSAN_READ8");

add_function (BUILT_IN_TSAN_READ16, "CFN_" "BUILT_IN_TSAN_READ16");

add_function (BUILT_IN_TSAN_WRITE1, "CFN_" "BUILT_IN_TSAN_WRITE1");

add_function (BUILT_IN_TSAN_WRITE2, "CFN_" "BUILT_IN_TSAN_WRITE2");

add_function (BUILT_IN_TSAN_WRITE4, "CFN_" "BUILT_IN_TSAN_WRITE4");

add_function (BUILT_IN_TSAN_WRITE8, "CFN_" "BUILT_IN_TSAN_WRITE8");

add_function (BUILT_IN_TSAN_WRITE16, "CFN_" "BUILT_IN_TSAN_WRITE16");

add_function (BUILT_IN_TSAN_READ_RANGE, "CFN_" "BUILT_IN_TSAN_READ_RANGE");

add_function (BUILT_IN_TSAN_WRITE_RANGE, "CFN_" "BUILT_IN_TSAN_WRITE_RANGE");


add_function (BUILT_IN_TSAN_VOLATILE_READ1, "CFN_" "BUILT_IN_TSAN_VOLATILE_READ1");

add_function (BUILT_IN_TSAN_VOLATILE_READ2, "CFN_" "BUILT_IN_TSAN_VOLATILE_READ2");

add_function (BUILT_IN_TSAN_VOLATILE_READ4, "CFN_" "BUILT_IN_TSAN_VOLATILE_READ4");

add_function (BUILT_IN_TSAN_VOLATILE_READ8, "CFN_" "BUILT_IN_TSAN_VOLATILE_READ8");

add_function (BUILT_IN_TSAN_VOLATILE_READ16, "CFN_" "BUILT_IN_TSAN_VOLATILE_READ16");

add_function (BUILT_IN_TSAN_VOLATILE_WRITE1, "CFN_" "BUILT_IN_TSAN_VOLATILE_WRITE1");

add_function (BUILT_IN_TSAN_VOLATILE_WRITE2, "CFN_" "BUILT_IN_TSAN_VOLATILE_WRITE2");

add_function (BUILT_IN_TSAN_VOLATILE_WRITE4, "CFN_" "BUILT_IN_TSAN_VOLATILE_WRITE4");

add_function (BUILT_IN_TSAN_VOLATILE_WRITE8, "CFN_" "BUILT_IN_TSAN_VOLATILE_WRITE8");

add_function (BUILT_IN_TSAN_VOLATILE_WRITE16, "CFN_" "BUILT_IN_TSAN_VOLATILE_WRITE16");


add_function (BUILT_IN_TSAN_ATOMIC8_LOAD, "CFN_" "BUILT_IN_TSAN_ATOMIC8_LOAD");


add_function (BUILT_IN_TSAN_ATOMIC16_LOAD, "CFN_" "BUILT_IN_TSAN_ATOMIC16_LOAD");


add_function (BUILT_IN_TSAN_ATOMIC32_LOAD, "CFN_" "BUILT_IN_TSAN_ATOMIC32_LOAD");


add_function (BUILT_IN_TSAN_ATOMIC64_LOAD, "CFN_" "BUILT_IN_TSAN_ATOMIC64_LOAD");


add_function (BUILT_IN_TSAN_ATOMIC128_LOAD, "CFN_" "BUILT_IN_TSAN_ATOMIC128_LOAD");



add_function (BUILT_IN_TSAN_ATOMIC8_STORE, "CFN_" "BUILT_IN_TSAN_ATOMIC8_STORE");


add_function (BUILT_IN_TSAN_ATOMIC16_STORE, "CFN_" "BUILT_IN_TSAN_ATOMIC16_STORE");


add_function (BUILT_IN_TSAN_ATOMIC32_STORE, "CFN_" "BUILT_IN_TSAN_ATOMIC32_STORE");


add_function (BUILT_IN_TSAN_ATOMIC64_STORE, "CFN_" "BUILT_IN_TSAN_ATOMIC64_STORE");


add_function (BUILT_IN_TSAN_ATOMIC128_STORE, "CFN_" "BUILT_IN_TSAN_ATOMIC128_STORE");



add_function (BUILT_IN_TSAN_ATOMIC8_EXCHANGE, "CFN_" "BUILT_IN_TSAN_ATOMIC8_EXCHANGE");


add_function (BUILT_IN_TSAN_ATOMIC16_EXCHANGE, "CFN_" "BUILT_IN_TSAN_ATOMIC16_EXCHANGE");


add_function (BUILT_IN_TSAN_ATOMIC32_EXCHANGE, "CFN_" "BUILT_IN_TSAN_ATOMIC32_EXCHANGE");


add_function (BUILT_IN_TSAN_ATOMIC64_EXCHANGE, "CFN_" "BUILT_IN_TSAN_ATOMIC64_EXCHANGE");


add_function (BUILT_IN_TSAN_ATOMIC128_EXCHANGE, "CFN_" "BUILT_IN_TSAN_ATOMIC128_EXCHANGE");



add_function (BUILT_IN_TSAN_ATOMIC8_FETCH_ADD, "CFN_" "BUILT_IN_TSAN_ATOMIC8_FETCH_ADD");


add_function (BUILT_IN_TSAN_ATOMIC16_FETCH_ADD, "CFN_" "BUILT_IN_TSAN_ATOMIC16_FETCH_ADD");


add_function (BUILT_IN_TSAN_ATOMIC32_FETCH_ADD, "CFN_" "BUILT_IN_TSAN_ATOMIC32_FETCH_ADD");


add_function (BUILT_IN_TSAN_ATOMIC64_FETCH_ADD, "CFN_" "BUILT_IN_TSAN_ATOMIC64_FETCH_ADD");


add_function (BUILT_IN_TSAN_ATOMIC128_FETCH_ADD, "CFN_" "BUILT_IN_TSAN_ATOMIC128_FETCH_ADD");



add_function (BUILT_IN_TSAN_ATOMIC8_FETCH_SUB, "CFN_" "BUILT_IN_TSAN_ATOMIC8_FETCH_SUB");


add_function (BUILT_IN_TSAN_ATOMIC16_FETCH_SUB, "CFN_" "BUILT_IN_TSAN_ATOMIC16_FETCH_SUB");


add_function (BUILT_IN_TSAN_ATOMIC32_FETCH_SUB, "CFN_" "BUILT_IN_TSAN_ATOMIC32_FETCH_SUB");


add_function (BUILT_IN_TSAN_ATOMIC64_FETCH_SUB, "CFN_" "BUILT_IN_TSAN_ATOMIC64_FETCH_SUB");


add_function (BUILT_IN_TSAN_ATOMIC128_FETCH_SUB, "CFN_" "BUILT_IN_TSAN_ATOMIC128_FETCH_SUB");



add_function (BUILT_IN_TSAN_ATOMIC8_FETCH_AND, "CFN_" "BUILT_IN_TSAN_ATOMIC8_FETCH_AND");


add_function (BUILT_IN_TSAN_ATOMIC16_FETCH_AND, "CFN_" "BUILT_IN_TSAN_ATOMIC16_FETCH_AND");


add_function (BUILT_IN_TSAN_ATOMIC32_FETCH_AND, "CFN_" "BUILT_IN_TSAN_ATOMIC32_FETCH_AND");


add_function (BUILT_IN_TSAN_ATOMIC64_FETCH_AND, "CFN_" "BUILT_IN_TSAN_ATOMIC64_FETCH_AND");


add_function (BUILT_IN_TSAN_ATOMIC128_FETCH_AND, "CFN_" "BUILT_IN_TSAN_ATOMIC128_FETCH_AND");



add_function (BUILT_IN_TSAN_ATOMIC8_FETCH_OR, "CFN_" "BUILT_IN_TSAN_ATOMIC8_FETCH_OR");


add_function (BUILT_IN_TSAN_ATOMIC16_FETCH_OR, "CFN_" "BUILT_IN_TSAN_ATOMIC16_FETCH_OR");


add_function (BUILT_IN_TSAN_ATOMIC32_FETCH_OR, "CFN_" "BUILT_IN_TSAN_ATOMIC32_FETCH_OR");


add_function (BUILT_IN_TSAN_ATOMIC64_FETCH_OR, "CFN_" "BUILT_IN_TSAN_ATOMIC64_FETCH_OR");


add_function (BUILT_IN_TSAN_ATOMIC128_FETCH_OR, "CFN_" "BUILT_IN_TSAN_ATOMIC128_FETCH_OR");



add_function (BUILT_IN_TSAN_ATOMIC8_FETCH_XOR, "CFN_" "BUILT_IN_TSAN_ATOMIC8_FETCH_XOR");


add_function (BUILT_IN_TSAN_ATOMIC16_FETCH_XOR, "CFN_" "BUILT_IN_TSAN_ATOMIC16_FETCH_XOR");


add_function (BUILT_IN_TSAN_ATOMIC32_FETCH_XOR, "CFN_" "BUILT_IN_TSAN_ATOMIC32_FETCH_XOR");


add_function (BUILT_IN_TSAN_ATOMIC64_FETCH_XOR, "CFN_" "BUILT_IN_TSAN_ATOMIC64_FETCH_XOR");


add_function (BUILT_IN_TSAN_ATOMIC128_FETCH_XOR, "CFN_" "BUILT_IN_TSAN_ATOMIC128_FETCH_XOR");



add_function (BUILT_IN_TSAN_ATOMIC8_FETCH_NAND, "CFN_" "BUILT_IN_TSAN_ATOMIC8_FETCH_NAND");


add_function (BUILT_IN_TSAN_ATOMIC16_FETCH_NAND, "CFN_" "BUILT_IN_TSAN_ATOMIC16_FETCH_NAND");


add_function (BUILT_IN_TSAN_ATOMIC32_FETCH_NAND, "CFN_" "BUILT_IN_TSAN_ATOMIC32_FETCH_NAND");


add_function (BUILT_IN_TSAN_ATOMIC64_FETCH_NAND, "CFN_" "BUILT_IN_TSAN_ATOMIC64_FETCH_NAND");


add_function (BUILT_IN_TSAN_ATOMIC128_FETCH_NAND, "CFN_" "BUILT_IN_TSAN_ATOMIC128_FETCH_NAND");



add_function (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG, "CFN_" "BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG");



add_function (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG, "CFN_" "BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG");



add_function (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG, "CFN_" "BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG");



add_function (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG, "CFN_" "BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG");



add_function (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG, "CFN_" "BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG");




add_function (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK, "CFN_" "BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK");



add_function (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK, "CFN_" "BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK");



add_function (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK, "CFN_" "BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK");



add_function (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK, "CFN_" "BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK");



add_function (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK, "CFN_" "BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK");




add_function (BUILT_IN_TSAN_ATOMIC_THREAD_FENCE, "CFN_" "BUILT_IN_TSAN_ATOMIC_THREAD_FENCE");


add_function (BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE, "CFN_" "BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE");




add_function (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW, "CFN_" "BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW");



add_function (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS, "CFN_" "BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS");



add_function (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE, "CFN_" "BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE");



add_function (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN, "CFN_" "BUILT_IN_UBSAN_HANDLE_MISSING_RETURN");



add_function (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE, "CFN_" "BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE");



add_function (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1, "CFN_" "BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1");



add_function (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW, "CFN_" "BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW");



add_function (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW, "CFN_" "BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW");



add_function (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW, "CFN_" "BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW");



add_function (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW, "CFN_" "BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW");



add_function (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE, "CFN_" "BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE");



add_function (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW, "CFN_" "BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW");



add_function (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW, "CFN_" "BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW");



add_function (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS, "CFN_" "BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS");



add_function (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG, "CFN_" "BUILT_IN_UBSAN_HANDLE_NONNULL_ARG");



add_function (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1, "CFN_" "BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1");



add_function (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN, "CFN_" "BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN");



add_function (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT");



add_function (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS, "CFN_" "BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS");



add_function (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT, "CFN_" "BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT");





add_function (BUILT_IN_SANITIZER_COV_TRACE_PC, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_PC");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CMP1, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CMP1");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CMP2, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CMP2");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CMP4, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CMP4");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CMP8, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CMP8");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CMPF, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CMPF");


add_function (BUILT_IN_SANITIZER_COV_TRACE_CMPD, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_CMPD");


add_function (BUILT_IN_SANITIZER_COV_TRACE_SWITCH, "CFN_" "BUILT_IN_SANITIZER_COV_TRACE_SWITCH");




add_function (END_SANITIZER_BUILTINS, "CFN_" "END_SANITIZER_BUILTINS");
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def"
add_function (BEGIN_COROUTINE_BUILTINS, "CFN_" "BEGIN_COROUTINE_BUILTINS");




add_function (BUILT_IN_CORO_PROMISE, "CFN_" "BUILT_IN_CORO_PROMISE");



add_function (BUILT_IN_CORO_RESUME, "CFN_" "BUILT_IN_CORO_RESUME");


add_function (BUILT_IN_CORO_DESTROY, "CFN_" "BUILT_IN_CORO_DESTROY");


add_function (BUILT_IN_CORO_DONE, "CFN_" "BUILT_IN_CORO_DONE");



add_function (END_COROUTINE_BUILTINS, "CFN_" "END_COROUTINE_BUILTINS");
# 1061 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 1103 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def" 1
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
add_function (BUILT_IN_HSAIL_WORKITEMABSID, "CFN_" "BUILT_IN_HSAIL_WORKITEMABSID");



add_function (BUILT_IN_HSAIL_GRIDSIZE, "CFN_" "BUILT_IN_HSAIL_GRIDSIZE");



add_function (BUILT_IN_HSAIL_WORKITEMFLATABSID_U32, "CFN_" "BUILT_IN_HSAIL_WORKITEMFLATABSID_U32");




add_function (BUILT_IN_HSAIL_WORKITEMFLATABSID_U64, "CFN_" "BUILT_IN_HSAIL_WORKITEMFLATABSID_U64");




add_function (BUILT_IN_HSAIL_WORKITEMFLATID, "CFN_" "BUILT_IN_HSAIL_WORKITEMFLATID");



add_function (BUILT_IN_HSAIL_WORKITEMID, "CFN_" "BUILT_IN_HSAIL_WORKITEMID");



add_function (BUILT_IN_HSAIL_WORKGROUPID, "CFN_" "BUILT_IN_HSAIL_WORKGROUPID");



add_function (BUILT_IN_HSAIL_CURRENTWORKITEMFLATID, "CFN_" "BUILT_IN_HSAIL_CURRENTWORKITEMFLATID");




add_function (BUILT_IN_HSAIL_WORKITEMABSID_U64, "CFN_" "BUILT_IN_HSAIL_WORKITEMABSID_U64");



add_function (BUILT_IN_HSAIL_PACKETID, "CFN_" "BUILT_IN_HSAIL_PACKETID");



add_function (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64, "CFN_" "BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64");




add_function (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32, "CFN_" "BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32");




add_function (BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE, "CFN_" "BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE");




add_function (BUILT_IN_HSAIL_WORKGROUPSIZE, "CFN_" "BUILT_IN_HSAIL_WORKGROUPSIZE");




add_function (BUILT_IN_HSAIL_DIM, "CFN_" "BUILT_IN_HSAIL_DIM");



add_function (BUILT_IN_HSAIL_GRIDGROUPS, "CFN_" "BUILT_IN_HSAIL_GRIDGROUPS");



add_function (BUILT_IN_HSAIL_BITEXTRACT_S32, "CFN_" "BUILT_IN_HSAIL_BITEXTRACT_S32");



add_function (BUILT_IN_HSAIL_BITEXTRACT_U32, "CFN_" "BUILT_IN_HSAIL_BITEXTRACT_U32");



add_function (BUILT_IN_HSAIL_BITEXTRACT_S64, "CFN_" "BUILT_IN_HSAIL_BITEXTRACT_S64");



add_function (BUILT_IN_HSAIL_BITEXTRACT_U64, "CFN_" "BUILT_IN_HSAIL_BITEXTRACT_U64");



add_function (BUILT_IN_HSAIL_BITINSERT_U32, "CFN_" "BUILT_IN_HSAIL_BITINSERT_U32");



add_function (BUILT_IN_HSAIL_BITINSERT_U64, "CFN_" "BUILT_IN_HSAIL_BITINSERT_U64");




add_function (BUILT_IN_HSAIL_BITMASK_B32, "CFN_" "BUILT_IN_HSAIL_BITMASK_B32");



add_function (BUILT_IN_HSAIL_BITMASK_B64, "CFN_" "BUILT_IN_HSAIL_BITMASK_B64");



add_function (BUILT_IN_HSAIL_BITREV_B32, "CFN_" "BUILT_IN_HSAIL_BITREV_B32");



add_function (BUILT_IN_HSAIL_BITREV_B64, "CFN_" "BUILT_IN_HSAIL_BITREV_B64");



add_function (BUILT_IN_HSAIL_BITSELECT_B32, "CFN_" "BUILT_IN_HSAIL_BITSELECT_B32");



add_function (BUILT_IN_HSAIL_BITSELECT_U64, "CFN_" "BUILT_IN_HSAIL_BITSELECT_U64");



add_function (BUILT_IN_HSAIL_FIRSTBIT_U32, "CFN_" "BUILT_IN_HSAIL_FIRSTBIT_U32");



add_function (BUILT_IN_HSAIL_FIRSTBIT_S32, "CFN_" "BUILT_IN_HSAIL_FIRSTBIT_S32");



add_function (BUILT_IN_HSAIL_FIRSTBIT_U64, "CFN_" "BUILT_IN_HSAIL_FIRSTBIT_U64");



add_function (BUILT_IN_HSAIL_FIRSTBIT_S64, "CFN_" "BUILT_IN_HSAIL_FIRSTBIT_S64");



add_function (BUILT_IN_HSAIL_LASTBIT_U32, "CFN_" "BUILT_IN_HSAIL_LASTBIT_U32");



add_function (BUILT_IN_HSAIL_LASTBIT_U64, "CFN_" "BUILT_IN_HSAIL_LASTBIT_U64");



add_function (BUILT_IN_HSAIL_BORROW_U32, "CFN_" "BUILT_IN_HSAIL_BORROW_U32");



add_function (BUILT_IN_HSAIL_BORROW_U64, "CFN_" "BUILT_IN_HSAIL_BORROW_U64");



add_function (BUILT_IN_HSAIL_CARRY_U32, "CFN_" "BUILT_IN_HSAIL_CARRY_U32");



add_function (BUILT_IN_HSAIL_CARRY_U64, "CFN_" "BUILT_IN_HSAIL_CARRY_U64");



add_function (BUILT_IN_HSAIL_REM_S32, "CFN_" "BUILT_IN_HSAIL_REM_S32");



add_function (BUILT_IN_HSAIL_REM_S64, "CFN_" "BUILT_IN_HSAIL_REM_S64");



add_function (BUILT_IN_HSAIL_MIN_F32, "CFN_" "BUILT_IN_HSAIL_MIN_F32");



add_function (BUILT_IN_HSAIL_MAX_F32, "CFN_" "BUILT_IN_HSAIL_MAX_F32");



add_function (BUILT_IN_HSAIL_MIN_F64, "CFN_" "BUILT_IN_HSAIL_MIN_F64");



add_function (BUILT_IN_HSAIL_MAX_F64, "CFN_" "BUILT_IN_HSAIL_MAX_F64");



add_function (BUILT_IN_HSAIL_CLASS_F32, "CFN_" "BUILT_IN_HSAIL_CLASS_F32");



add_function (BUILT_IN_HSAIL_CLASS_F64, "CFN_" "BUILT_IN_HSAIL_CLASS_F64");



add_function (BUILT_IN_HSAIL_CLASS_F32_F16, "CFN_" "BUILT_IN_HSAIL_CLASS_F32_F16");



add_function (BUILT_IN_HSAIL_FRACT_F32, "CFN_" "BUILT_IN_HSAIL_FRACT_F32");



add_function (BUILT_IN_HSAIL_FRACT_F64, "CFN_" "BUILT_IN_HSAIL_FRACT_F64");



add_function (BUILT_IN_HSAIL_BARRIER, "CFN_" "BUILT_IN_HSAIL_BARRIER");



add_function (BUILT_IN_HSAIL_INITFBAR, "CFN_" "BUILT_IN_HSAIL_INITFBAR");



add_function (BUILT_IN_HSAIL_JOINFBAR, "CFN_" "BUILT_IN_HSAIL_JOINFBAR");



add_function (BUILT_IN_HSAIL_WAITFBAR, "CFN_" "BUILT_IN_HSAIL_WAITFBAR");



add_function (BUILT_IN_HSAIL_ARRIVEFBAR, "CFN_" "BUILT_IN_HSAIL_ARRIVEFBAR");



add_function (BUILT_IN_HSAIL_LEAVEFBAR, "CFN_" "BUILT_IN_HSAIL_LEAVEFBAR");



add_function (BUILT_IN_HSAIL_RELEASEFBAR, "CFN_" "BUILT_IN_HSAIL_RELEASEFBAR");



add_function (BUILT_IN_HSAIL_BITALIGN, "CFN_" "BUILT_IN_HSAIL_BITALIGN");



add_function (BUILT_IN_HSAIL_BYTEALIGN, "CFN_" "BUILT_IN_HSAIL_BYTEALIGN");



add_function (BUILT_IN_HSAIL_LERP, "CFN_" "BUILT_IN_HSAIL_LERP");



add_function (BUILT_IN_HSAIL_PACKCVT, "CFN_" "BUILT_IN_HSAIL_PACKCVT");




add_function (BUILT_IN_HSAIL_UNPACKCVT, "CFN_" "BUILT_IN_HSAIL_UNPACKCVT");



add_function (BUILT_IN_HSAIL_SAD_U16X2, "CFN_" "BUILT_IN_HSAIL_SAD_U16X2");



add_function (BUILT_IN_HSAIL_SAD_U32, "CFN_" "BUILT_IN_HSAIL_SAD_U32");



add_function (BUILT_IN_HSAIL_SAD_U8X4, "CFN_" "BUILT_IN_HSAIL_SAD_U8X4");



add_function (BUILT_IN_HSAIL_SADHI_U8X4, "CFN_" "BUILT_IN_HSAIL_SADHI_U8X4");




add_function (BUILT_IN_HSAIL_CLOCK, "CFN_" "BUILT_IN_HSAIL_CLOCK");



add_function (BUILT_IN_HSAIL_CUID, "CFN_" "BUILT_IN_HSAIL_CUID");



add_function (BUILT_IN_HSAIL_MAXCUID, "CFN_" "BUILT_IN_HSAIL_MAXCUID");



add_function (BUILT_IN_HSAIL_DEBUGTRAP, "CFN_" "BUILT_IN_HSAIL_DEBUGTRAP");



add_function (BUILT_IN_HSAIL_GROUPBASEPTR, "CFN_" "BUILT_IN_HSAIL_GROUPBASEPTR");



add_function (BUILT_IN_HSAIL_KERNARGBASEPTR_U64, "CFN_" "BUILT_IN_HSAIL_KERNARGBASEPTR_U64");




add_function (BUILT_IN_HSAIL_KERNARGBASEPTR_U32, "CFN_" "BUILT_IN_HSAIL_KERNARGBASEPTR_U32");




add_function (BUILT_IN_HSAIL_ALLOCA, "CFN_" "BUILT_IN_HSAIL_ALLOCA");



add_function (BUILT_IN_HSAIL_LDQUEUEWRITEINDEX, "CFN_" "BUILT_IN_HSAIL_LDQUEUEWRITEINDEX");




add_function (BUILT_IN_HSAIL_LDQUEUEREADINDEX, "CFN_" "BUILT_IN_HSAIL_LDQUEUEREADINDEX");




add_function (BUILT_IN_HSAIL_STQUEUEWRITEINDEX, "CFN_" "BUILT_IN_HSAIL_STQUEUEWRITEINDEX");




add_function (BUILT_IN_HSAIL_STQUEUEREADINDEX, "CFN_" "BUILT_IN_HSAIL_STQUEUEREADINDEX");




add_function (BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX, "CFN_" "BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX");




add_function (BUILT_IN_HSAIL_CASQUEUEWRITEINDEX, "CFN_" "BUILT_IN_HSAIL_CASQUEUEWRITEINDEX");




add_function (BUILT_IN_HSAIL_SEGMENTP_GLOBAL, "CFN_" "BUILT_IN_HSAIL_SEGMENTP_GLOBAL");




add_function (BUILT_IN_HSAIL_SEGMENTP_GROUP, "CFN_" "BUILT_IN_HSAIL_SEGMENTP_GROUP");




add_function (BUILT_IN_HSAIL_SEGMENTP_PRIVATE, "CFN_" "BUILT_IN_HSAIL_SEGMENTP_PRIVATE");
# 392 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
add_function (BUILT_IN_HSAIL_ATOMIC_MIN_S32, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MIN_S32");



add_function (BUILT_IN_HSAIL_ATOMIC_MIN_S64, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MIN_S64");



add_function (BUILT_IN_HSAIL_ATOMIC_MIN_U32, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MIN_U32");



add_function (BUILT_IN_HSAIL_ATOMIC_MIN_U64, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MIN_U64");



add_function (BUILT_IN_HSAIL_ATOMIC_MAX_S32, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MAX_S32");



add_function (BUILT_IN_HSAIL_ATOMIC_MAX_S64, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MAX_S64");



add_function (BUILT_IN_HSAIL_ATOMIC_MAX_U32, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MAX_U32");



add_function (BUILT_IN_HSAIL_ATOMIC_MAX_U64, "CFN_" "BUILT_IN_HSAIL_ATOMIC_MAX_U64");



add_function (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32, "CFN_" "BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32");




add_function (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64, "CFN_" "BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64");




add_function (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32, "CFN_" "BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32");




add_function (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64, "CFN_" "BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64");
# 449 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
add_function (BUILT_IN_HSAIL_SAT_ADD_U64, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_U64");



add_function (BUILT_IN_HSAIL_SAT_ADD_S64, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_S64");



add_function (BUILT_IN_HSAIL_SAT_ADD_U32, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_U32");



add_function (BUILT_IN_HSAIL_SAT_ADD_S32, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_S32");



add_function (BUILT_IN_HSAIL_SAT_ADD_U16, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_U16");



add_function (BUILT_IN_HSAIL_SAT_ADD_S16, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_S16");



add_function (BUILT_IN_HSAIL_SAT_ADD_U8, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_U8");



add_function (BUILT_IN_HSAIL_SAT_ADD_S8, "CFN_" "BUILT_IN_HSAIL_SAT_ADD_S8");



add_function (BUILT_IN_HSAIL_SAT_SUB_U64, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_U64");



add_function (BUILT_IN_HSAIL_SAT_SUB_S64, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_S64");



add_function (BUILT_IN_HSAIL_SAT_SUB_U32, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_U32");



add_function (BUILT_IN_HSAIL_SAT_SUB_S32, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_S32");



add_function (BUILT_IN_HSAIL_SAT_SUB_U16, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_U16");



add_function (BUILT_IN_HSAIL_SAT_SUB_S16, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_S16");



add_function (BUILT_IN_HSAIL_SAT_SUB_U8, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_U8");



add_function (BUILT_IN_HSAIL_SAT_SUB_S8, "CFN_" "BUILT_IN_HSAIL_SAT_SUB_S8");



add_function (BUILT_IN_HSAIL_SAT_MUL_U64, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_U64");



add_function (BUILT_IN_HSAIL_SAT_MUL_S64, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_S64");



add_function (BUILT_IN_HSAIL_SAT_MUL_U32, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_U32");



add_function (BUILT_IN_HSAIL_SAT_MUL_S32, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_S32");



add_function (BUILT_IN_HSAIL_SAT_MUL_U16, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_U16");



add_function (BUILT_IN_HSAIL_SAT_MUL_S16, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_S16");



add_function (BUILT_IN_HSAIL_SAT_MUL_U8, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_U8");



add_function (BUILT_IN_HSAIL_SAT_MUL_S8, "CFN_" "BUILT_IN_HSAIL_SAT_MUL_S8");







add_function (BUILT_IN_HSAIL_FTZ_F32_F16, "CFN_" "BUILT_IN_HSAIL_FTZ_F32_F16");


add_function (BUILT_IN_HSAIL_FTZ_F32, "CFN_" "BUILT_IN_HSAIL_FTZ_F32");


add_function (BUILT_IN_HSAIL_FTZ_F64, "CFN_" "BUILT_IN_HSAIL_FTZ_F64");


add_function (BUILT_IN_HSAIL_PUSH_FRAME, "CFN_" "BUILT_IN_HSAIL_PUSH_FRAME");


add_function (BUILT_IN_HSAIL_POP_FRAME, "CFN_" "BUILT_IN_HSAIL_POP_FRAME");


add_function (BUILT_IN_HSAIL_SETWORKITEMID, "CFN_" "BUILT_IN_HSAIL_SETWORKITEMID");


add_function (BUILT_IN_HSAIL_LAUNCH_WG_FUNC, "CFN_" "BUILT_IN_HSAIL_LAUNCH_WG_FUNC");



add_function (BUILT_IN_HSAIL_LAUNCH_KERNEL, "CFN_" "BUILT_IN_HSAIL_LAUNCH_KERNEL");



add_function (BUILT_IN_HSAIL_F32_TO_F16, "CFN_" "BUILT_IN_HSAIL_F32_TO_F16");


add_function (BUILT_IN_HSAIL_F16_TO_F32, "CFN_" "BUILT_IN_HSAIL_F16_TO_F32");







add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32");




add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32");




add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32");




add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64");




add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64");




add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64");





add_function (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64, "CFN_" "BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64");
# 1104 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 5195 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2



# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def" 1
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def"
add_function (IFN_MASK_LOAD, "CFN_" "MASK_LOAD");
add_function (IFN_LOAD_LANES, "CFN_" "LOAD_LANES");
add_function (IFN_MASK_LOAD_LANES, "CFN_" "MASK_LOAD_LANES");


add_function (IFN_GATHER_LOAD, "CFN_" "GATHER_LOAD");
add_function (IFN_MASK_GATHER_LOAD, "CFN_" "MASK_GATHER_LOAD");


add_function (IFN_LEN_LOAD, "CFN_" "LEN_LOAD");

add_function (IFN_SCATTER_STORE, "CFN_" "SCATTER_STORE");
add_function (IFN_MASK_SCATTER_STORE, "CFN_" "MASK_SCATTER_STORE");


add_function (IFN_MASK_STORE, "CFN_" "MASK_STORE");
add_function (IFN_STORE_LANES, "CFN_" "STORE_LANES");
add_function (IFN_MASK_STORE_LANES, "CFN_" "MASK_STORE_LANES");


add_function (IFN_VCOND, "CFN_" "VCOND");
add_function (IFN_VCONDU, "CFN_" "VCONDU");
add_function (IFN_VCONDEQ, "CFN_" "VCONDEQ");
add_function (IFN_VCOND_MASK, "CFN_" "VCOND_MASK");

add_function (IFN_LEN_STORE, "CFN_" "LEN_STORE");

add_function (IFN_WHILE_ULT, "CFN_" "WHILE_ULT");
add_function (IFN_CHECK_RAW_PTRS, "CFN_" "CHECK_RAW_PTRS");

add_function (IFN_CHECK_WAR_PTRS, "CFN_" "CHECK_WAR_PTRS");


add_function (IFN_VEC_SHL_INSERT, "CFN_" "VEC_SHL_INSERT");


add_function (IFN_DIV_POW2, "CFN_" "DIV_POW2");

add_function (IFN_FMS, "CFN_" "FMS");
add_function (IFN_FNMA, "CFN_" "FNMA");
add_function (IFN_FNMS, "CFN_" "FNMS");

add_function (IFN_AVG_FLOOR, "CFN_" "AVG_FLOOR");

add_function (IFN_AVG_CEIL, "CFN_" "AVG_CEIL");


add_function (IFN_MULHS, "CFN_" "MULHS");

add_function (IFN_MULHRS, "CFN_" "MULHRS");


add_function (IFN_COND_ADD, "CFN_" "COND_ADD");
add_function (IFN_COND_SUB, "CFN_" "COND_SUB");
add_function (IFN_COND_MUL, "CFN_" "COND_MUL");
add_function (IFN_COND_DIV, "CFN_" "COND_DIV");

add_function (IFN_COND_MOD, "CFN_" "COND_MOD");

add_function (IFN_COND_RDIV, "CFN_" "COND_RDIV");
add_function (IFN_COND_MIN, "CFN_" "COND_MIN");

add_function (IFN_COND_MAX, "CFN_" "COND_MAX");

add_function (IFN_COND_AND, "CFN_" "COND_AND");

add_function (IFN_COND_IOR, "CFN_" "COND_IOR");

add_function (IFN_COND_XOR, "CFN_" "COND_XOR");

add_function (IFN_COND_SHL, "CFN_" "COND_SHL");

add_function (IFN_COND_SHR, "CFN_" "COND_SHR");


add_function (IFN_COND_FMA, "CFN_" "COND_FMA");
add_function (IFN_COND_FMS, "CFN_" "COND_FMS");
add_function (IFN_COND_FNMA, "CFN_" "COND_FNMA");
add_function (IFN_COND_FNMS, "CFN_" "COND_FNMS");

add_function (IFN_RSQRT, "CFN_" "RSQRT");

add_function (IFN_REDUC_PLUS, "CFN_" "REDUC_PLUS");

add_function (IFN_REDUC_MAX, "CFN_" "REDUC_MAX");

add_function (IFN_REDUC_MIN, "CFN_" "REDUC_MIN");

add_function (IFN_REDUC_AND, "CFN_" "REDUC_AND");

add_function (IFN_REDUC_IOR, "CFN_" "REDUC_IOR");

add_function (IFN_REDUC_XOR, "CFN_" "REDUC_XOR");



add_function (IFN_EXTRACT_LAST, "CFN_" "EXTRACT_LAST");



add_function (IFN_FOLD_EXTRACT_LAST, "CFN_" "FOLD_EXTRACT_LAST");


add_function (IFN_FOLD_LEFT_PLUS, "CFN_" "FOLD_LEFT_PLUS");


add_function (IFN_MASK_FOLD_LEFT_PLUS, "CFN_" "MASK_FOLD_LEFT_PLUS");



add_function (IFN_ACOS, "CFN_" "ACOS");
add_function (IFN_ACOSH, "CFN_" "ACOSH");
add_function (IFN_ASIN, "CFN_" "ASIN");
add_function (IFN_ASINH, "CFN_" "ASINH");
add_function (IFN_ATAN, "CFN_" "ATAN");
add_function (IFN_ATANH, "CFN_" "ATANH");
add_function (IFN_COS, "CFN_" "COS");
add_function (IFN_COSH, "CFN_" "COSH");
add_function (IFN_EXP, "CFN_" "EXP");
add_function (IFN_EXP10, "CFN_" "EXP10");
add_function (IFN_EXP2, "CFN_" "EXP2");
add_function (IFN_EXPM1, "CFN_" "EXPM1");
add_function (IFN_LOG, "CFN_" "LOG");
add_function (IFN_LOG10, "CFN_" "LOG10");
add_function (IFN_LOG1P, "CFN_" "LOG1P");
add_function (IFN_LOG2, "CFN_" "LOG2");
add_function (IFN_LOGB, "CFN_" "LOGB");
add_function (IFN_SIGNBIT, "CFN_" "SIGNBIT");
add_function (IFN_SIGNIFICAND, "CFN_" "SIGNIFICAND");
add_function (IFN_SIN, "CFN_" "SIN");
add_function (IFN_SINH, "CFN_" "SINH");
add_function (IFN_SQRT, "CFN_" "SQRT");
add_function (IFN_TAN, "CFN_" "TAN");
add_function (IFN_TANH, "CFN_" "TANH");


add_function (IFN_CEIL, "CFN_" "CEIL");
add_function (IFN_FLOOR, "CFN_" "FLOOR");
add_function (IFN_NEARBYINT, "CFN_" "NEARBYINT");
add_function (IFN_RINT, "CFN_" "RINT");
add_function (IFN_ROUND, "CFN_" "ROUND");
add_function (IFN_ROUNDEVEN, "CFN_" "ROUNDEVEN");
add_function (IFN_TRUNC, "CFN_" "TRUNC");


add_function (IFN_ATAN2, "CFN_" "ATAN2");
add_function (IFN_COPYSIGN, "CFN_" "COPYSIGN");
add_function (IFN_FMOD, "CFN_" "FMOD");
add_function (IFN_HYPOT, "CFN_" "HYPOT");
add_function (IFN_POW, "CFN_" "POW");
add_function (IFN_REMAINDER, "CFN_" "REMAINDER");
add_function (IFN_SCALB, "CFN_" "SCALB");
add_function (IFN_FMIN, "CFN_" "FMIN");
add_function (IFN_FMAX, "CFN_" "FMAX");
add_function (IFN_XORSIGN, "CFN_" "XORSIGN");


add_function (IFN_LDEXP, "CFN_" "LDEXP");


add_function (IFN_FMA, "CFN_" "FMA");


add_function (IFN_CLRSB, "CFN_" "CLRSB");
add_function (IFN_CLZ, "CFN_" "CLZ");
add_function (IFN_CTZ, "CFN_" "CTZ");
add_function (IFN_FFS, "CFN_" "FFS");
add_function (IFN_PARITY, "CFN_" "PARITY");
add_function (IFN_POPCOUNT, "CFN_" "POPCOUNT");

add_function (IFN_GOMP_USE_SIMT, "CFN_" "GOMP_USE_SIMT");
add_function (IFN_GOMP_SIMT_ENTER, "CFN_" "GOMP_SIMT_ENTER");
add_function (IFN_GOMP_SIMT_ENTER_ALLOC, "CFN_" "GOMP_SIMT_ENTER_ALLOC");
add_function (IFN_GOMP_SIMT_EXIT, "CFN_" "GOMP_SIMT_EXIT");
add_function (IFN_GOMP_SIMT_LANE, "CFN_" "GOMP_SIMT_LANE");
add_function (IFN_GOMP_SIMT_VF, "CFN_" "GOMP_SIMT_VF");
add_function (IFN_GOMP_SIMT_LAST_LANE, "CFN_" "GOMP_SIMT_LAST_LANE");
add_function (IFN_GOMP_SIMT_ORDERED_PRED, "CFN_" "GOMP_SIMT_ORDERED_PRED");
add_function (IFN_GOMP_SIMT_VOTE_ANY, "CFN_" "GOMP_SIMT_VOTE_ANY");
add_function (IFN_GOMP_SIMT_XCHG_BFLY, "CFN_" "GOMP_SIMT_XCHG_BFLY");
add_function (IFN_GOMP_SIMT_XCHG_IDX, "CFN_" "GOMP_SIMT_XCHG_IDX");
add_function (IFN_GOMP_SIMD_LANE, "CFN_" "GOMP_SIMD_LANE");
add_function (IFN_GOMP_SIMD_VF, "CFN_" "GOMP_SIMD_VF");
add_function (IFN_GOMP_SIMD_LAST_LANE, "CFN_" "GOMP_SIMD_LAST_LANE");
add_function (IFN_GOMP_SIMD_ORDERED_START, "CFN_" "GOMP_SIMD_ORDERED_START");
add_function (IFN_GOMP_SIMD_ORDERED_END, "CFN_" "GOMP_SIMD_ORDERED_END");
add_function (IFN_LOOP_VECTORIZED, "CFN_" "LOOP_VECTORIZED");
add_function (IFN_LOOP_DIST_ALIAS, "CFN_" "LOOP_DIST_ALIAS");
add_function (IFN_ANNOTATE, "CFN_" "ANNOTATE");
add_function (IFN_UBSAN_NULL, "CFN_" "UBSAN_NULL");
add_function (IFN_UBSAN_BOUNDS, "CFN_" "UBSAN_BOUNDS");
add_function (IFN_UBSAN_VPTR, "CFN_" "UBSAN_VPTR");
add_function (IFN_UBSAN_CHECK_ADD, "CFN_" "UBSAN_CHECK_ADD");
add_function (IFN_UBSAN_CHECK_SUB, "CFN_" "UBSAN_CHECK_SUB");
add_function (IFN_UBSAN_CHECK_MUL, "CFN_" "UBSAN_CHECK_MUL");
add_function (IFN_UBSAN_PTR, "CFN_" "UBSAN_PTR");
add_function (IFN_UBSAN_OBJECT_SIZE, "CFN_" "UBSAN_OBJECT_SIZE");
add_function (IFN_ABNORMAL_DISPATCHER, "CFN_" "ABNORMAL_DISPATCHER");
add_function (IFN_BUILTIN_EXPECT, "CFN_" "BUILTIN_EXPECT");
add_function (IFN_ASAN_CHECK, "CFN_" "ASAN_CHECK");
add_function (IFN_ASAN_MARK, "CFN_" "ASAN_MARK");
add_function (IFN_ASAN_POISON, "CFN_" "ASAN_POISON");
add_function (IFN_ASAN_POISON_USE, "CFN_" "ASAN_POISON_USE");
add_function (IFN_ADD_OVERFLOW, "CFN_" "ADD_OVERFLOW");
add_function (IFN_SUB_OVERFLOW, "CFN_" "SUB_OVERFLOW");
add_function (IFN_MUL_OVERFLOW, "CFN_" "MUL_OVERFLOW");
add_function (IFN_TSAN_FUNC_EXIT, "CFN_" "TSAN_FUNC_EXIT");
add_function (IFN_VA_ARG, "CFN_" "VA_ARG");
add_function (IFN_VEC_CONVERT, "CFN_" "VEC_CONVERT");





add_function (IFN_UNIQUE, "CFN_" "UNIQUE");
add_function (IFN_PHI, "CFN_" "PHI");







add_function (IFN_GOACC_DIM_SIZE, "CFN_" "GOACC_DIM_SIZE");
add_function (IFN_GOACC_DIM_POS, "CFN_" "GOACC_DIM_POS");


add_function (IFN_GOACC_LOOP, "CFN_" "GOACC_LOOP");


add_function (IFN_GOACC_REDUCTION, "CFN_" "GOACC_REDUCTION");



add_function (IFN_GOACC_TILE, "CFN_" "GOACC_TILE");



add_function (IFN_SET_EDOM, "CFN_" "SET_EDOM");




add_function (IFN_ATOMIC_BIT_TEST_AND_SET, "CFN_" "ATOMIC_BIT_TEST_AND_SET");
add_function (IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT, "CFN_" "ATOMIC_BIT_TEST_AND_COMPLEMENT");
add_function (IFN_ATOMIC_BIT_TEST_AND_RESET, "CFN_" "ATOMIC_BIT_TEST_AND_RESET");
add_function (IFN_ATOMIC_COMPARE_EXCHANGE, "CFN_" "ATOMIC_COMPARE_EXCHANGE");


add_function (IFN_FALLTHROUGH, "CFN_" "FALLTHROUGH");


add_function (IFN_LAUNDER, "CFN_" "LAUNDER");


add_function (IFN_DIVMOD, "CFN_" "DIVMOD");


add_function (IFN_CO_ACTOR, "CFN_" "CO_ACTOR");
add_function (IFN_CO_YIELD, "CFN_" "CO_YIELD");
add_function (IFN_CO_SUSPN, "CFN_" "CO_SUSPN");
add_function (IFN_CO_FRAME, "CFN_" "CO_FRAME");


add_function (IFN_NOP, "CFN_" "NOP");
# 5199 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 2


  parser p (r, gimple);

  if (gimple)
    write_header (
# 5204 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                 stdout
# 5204 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                       , "gimple-match-head.c");
  else
    write_header (
# 5206 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                 stdout
# 5206 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                       , "generic-match-head.c");



  for (unsigned i = 0; i < p.user_predicates.length (); ++i)
    {
      predicate_id *pred = p.user_predicates[i];
      lower (pred->matchers, gimple);

      if (verbose == 2)
 for (unsigned j = 0; j < pred->matchers.length (); ++j)
   print_matches (pred->matchers[j]);

      decision_tree dt;
      for (unsigned j = 0; j < pred->matchers.length (); ++j)
 dt.insert (pred->matchers[j], j);

      if (verbose == 2)
 dt.print (
# 5224 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
          stderr
# 5224 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                );

      write_predicate (
# 5226 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
                      stdout
# 5226 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                            , pred, dt, gimple);
    }


  lower (p.simplifiers, gimple);

  if (verbose == 2)
    for (unsigned i = 0; i < p.simplifiers.length (); ++i)
      print_matches (p.simplifiers[i]);

  decision_tree dt;
  for (unsigned i = 0; i < p.simplifiers.length (); ++i)
    dt.insert (p.simplifiers[i], i);

  if (verbose == 2)
    dt.print (
# 5241 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
             stderr
# 5241 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
                   );

  dt.gen (
# 5243 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c" 3 4
         stdout
# 5243 "/home/giulianob/gcc_git_gnu/gcc/gcc/genmatch.c"
               , gimple);


  cpp_finish (r, nullptr);
  cpp_destroy (r);

  delete operators;

  return 0;
}
